   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"gpsNMEA.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	mtk19ProcessDataState,1,1
  20              		.comm	nmeaProcessDataState,1,1
  21              		.comm	ubloxProcessDataState,1,1
  22              		.section	.rodata
  23              		.align	2
  26              	nib2hex:
  27 0000 30       		.byte	48
  28 0001 31       		.byte	49
  29 0002 32       		.byte	50
  30 0003 33       		.byte	51
  31 0004 34       		.byte	52
  32 0005 35       		.byte	53
  33 0006 36       		.byte	54
  34 0007 37       		.byte	55
  35 0008 38       		.byte	56
  36 0009 39       		.byte	57
  37 000a 41       		.byte	65
  38 000b 42       		.byte	66
  39 000c 43       		.byte	67
  40 000d 44       		.byte	68
  41 000e 45       		.byte	69
  42 000f 46       		.byte	70
  43              		.comm	sentenceBuffer,81,4
  44              		.global	sentenceLength
  45              		.bss
  48              	sentenceLength:
  49 0000 00       		.space	1
  50              		.comm	sentenceCalculatedXOR,1,1
  51              		.comm	sentenceXOR,1,1
  52              		.text
  53              		.align	2
  54              		.global	nmeaGetScaledInt
  55              		.thumb
  56              		.thumb_func
  58              	nmeaGetScaledInt:
  59              	.LFB111:
  60              		.file 1 "../src/gps/gpsNMEA.c"
   1:../src/gps/gpsNMEA.c **** /*
   2:../src/gps/gpsNMEA.c ****   February 2013
   3:../src/gps/gpsNMEA.c **** 
   4:../src/gps/gpsNMEA.c ****   aq32Plus Rev -
   5:../src/gps/gpsNMEA.c **** 
   6:../src/gps/gpsNMEA.c ****   Copyright (c) 2012 John Ihlein.  All rights reserved.
   7:../src/gps/gpsNMEA.c **** 
   8:../src/gps/gpsNMEA.c ****   Open Source STM32 Based Multicopter Controller Software
   9:../src/gps/gpsNMEA.c **** 
  10:../src/gps/gpsNMEA.c ****   Includes code and/or ideas from:
  11:../src/gps/gpsNMEA.c **** 
  12:../src/gps/gpsNMEA.c ****   1)AeroQuad
  13:../src/gps/gpsNMEA.c ****   2)BaseFlight
  14:../src/gps/gpsNMEA.c ****   3)CH Robotics
  15:../src/gps/gpsNMEA.c ****   4)MultiWii
  16:../src/gps/gpsNMEA.c ****   5)S.O.H. Madgwick
  17:../src/gps/gpsNMEA.c ****   6)UAVX
  18:../src/gps/gpsNMEA.c **** 
  19:../src/gps/gpsNMEA.c ****   Designed to run on the AQ32 Flight Control Board
  20:../src/gps/gpsNMEA.c **** 
  21:../src/gps/gpsNMEA.c ****   This program is free software: you can redistribute it and/or modify
  22:../src/gps/gpsNMEA.c ****   it under the terms of the GNU General Public License as published by
  23:../src/gps/gpsNMEA.c ****   the Free Software Foundation, either version 3 of the License, or
  24:../src/gps/gpsNMEA.c ****   (at your option) any later version.
  25:../src/gps/gpsNMEA.c **** 
  26:../src/gps/gpsNMEA.c ****   This program is distributed in the hope that it will be useful,
  27:../src/gps/gpsNMEA.c ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
  28:../src/gps/gpsNMEA.c ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  29:../src/gps/gpsNMEA.c ****   GNU General Public License for more details.
  30:../src/gps/gpsNMEA.c **** 
  31:../src/gps/gpsNMEA.c ****   You should have received a copy of the GNU General Public License
  32:../src/gps/gpsNMEA.c ****   along with this program. If not, see <http://www.gnu.org/licenses/>.
  33:../src/gps/gpsNMEA.c **** */
  34:../src/gps/gpsNMEA.c **** 
  35:../src/gps/gpsNMEA.c **** ///////////////////////////////////////////////////////////////////////////////
  36:../src/gps/gpsNMEA.c **** 
  37:../src/gps/gpsNMEA.c **** #include "board.h"
  38:../src/gps/gpsNMEA.c **** 
  39:../src/gps/gpsNMEA.c **** ///////////////////////////////////////////////////////////////////////////////
  40:../src/gps/gpsNMEA.c **** // GPS Defines
  41:../src/gps/gpsNMEA.c **** ///////////////////////////////////////////////////////////////////////////////
  42:../src/gps/gpsNMEA.c **** 
  43:../src/gps/gpsNMEA.c **** #define SENTENCE_SIZE 80 // Maximum size of sentence (80 in NMEA)
  44:../src/gps/gpsNMEA.c **** 
  45:../src/gps/gpsNMEA.c **** ///////////////////////////////////////////////////////////////////////////////
  46:../src/gps/gpsNMEA.c **** // GPS Variables
  47:../src/gps/gpsNMEA.c **** ///////////////////////////////////////////////////////////////////////////////
  48:../src/gps/gpsNMEA.c **** 
  49:../src/gps/gpsNMEA.c **** static const char nib2hex[16] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
  50:../src/gps/gpsNMEA.c **** 
  51:../src/gps/gpsNMEA.c **** char    sentenceBuffer[SENTENCE_SIZE + 1];
  52:../src/gps/gpsNMEA.c **** uint8_t sentenceLength = 0;
  53:../src/gps/gpsNMEA.c **** uint8_t sentenceCalculatedXOR;
  54:../src/gps/gpsNMEA.c **** uint8_t sentenceXOR;
  55:../src/gps/gpsNMEA.c **** 
  56:../src/gps/gpsNMEA.c **** ///////////////////////////////////////////////////////////////////////////////
  57:../src/gps/gpsNMEA.c **** // Get Integer from NMEA
  58:../src/gps/gpsNMEA.c **** ///////////////////////////////////////////////////////////////////////////////
  59:../src/gps/gpsNMEA.c **** 
  60:../src/gps/gpsNMEA.c **** // read a optionally decimal number from string
  61:../src/gps/gpsNMEA.c **** // - value returned is always integer as multiplied to include wanted decimal count
  62:../src/gps/gpsNMEA.c **** // - this will also consume the leading comma (required)
  63:../src/gps/gpsNMEA.c **** // - out can be NULL to ignore read value
  64:../src/gps/gpsNMEA.c **** 
  65:../src/gps/gpsNMEA.c **** uint8_t nmeaGetScaledInt(char **s, long *out, uint8_t decimals)
  66:../src/gps/gpsNMEA.c **** {
  61              		.loc 1 66 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 24
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66 0000 86B0     		sub	sp, sp, #24
  67              	.LCFI0:
  68              		.cfi_def_cfa_offset 24
  69 0002 0390     		str	r0, [sp, #12]
  70 0004 0291     		str	r1, [sp, #8]
  71 0006 1346     		mov	r3, r2
  72 0008 8DF80730 		strb	r3, [sp, #7]
  67:../src/gps/gpsNMEA.c ****     uint8_t ret = 0;
  73              		.loc 1 67 0
  74 000c 4FF00003 		mov	r3, #0
  75 0010 8DF81730 		strb	r3, [sp, #23]
  68:../src/gps/gpsNMEA.c ****     int32_t val = 0;
  76              		.loc 1 68 0
  77 0014 4FF00003 		mov	r3, #0
  78 0018 0493     		str	r3, [sp, #16]
  69:../src/gps/gpsNMEA.c **** 
  70:../src/gps/gpsNMEA.c ****     // read whole numbers (prior to dot)
  71:../src/gps/gpsNMEA.c ****     while (((**s)>='0') && ((**s) <= '9'))
  79              		.loc 1 71 0
  80 001a 17E0     		b	.L2
  81              	.L4:
  72:../src/gps/gpsNMEA.c ****     {
  73:../src/gps/gpsNMEA.c ****         val *= 10;
  82              		.loc 1 73 0
  83 001c 049A     		ldr	r2, [sp, #16]
  84 001e 1346     		mov	r3, r2
  85 0020 4FEA8303 		lsl	r3, r3, #2
  86 0024 9B18     		adds	r3, r3, r2
  87 0026 4FEA4303 		lsl	r3, r3, #1
  88 002a 0493     		str	r3, [sp, #16]
  74:../src/gps/gpsNMEA.c ****         val = val + (*((*s)++) - '0');
  89              		.loc 1 74 0
  90 002c 039B     		ldr	r3, [sp, #12]
  91 002e 1B68     		ldr	r3, [r3, #0]
  92 0030 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
  93 0032 A2F13002 		sub	r2, r2, #48
  94 0036 0499     		ldr	r1, [sp, #16]
  95 0038 8A18     		adds	r2, r1, r2
  96 003a 0492     		str	r2, [sp, #16]
  97 003c 03F10102 		add	r2, r3, #1
  98 0040 039B     		ldr	r3, [sp, #12]
  99 0042 1A60     		str	r2, [r3, #0]
  75:../src/gps/gpsNMEA.c ****         ret = 1;
 100              		.loc 1 75 0
 101 0044 4FF00103 		mov	r3, #1
 102 0048 8DF81730 		strb	r3, [sp, #23]
 103              	.L2:
  71:../src/gps/gpsNMEA.c ****     while (((**s)>='0') && ((**s) <= '9'))
 104              		.loc 1 71 0 discriminator 1
 105 004c 039B     		ldr	r3, [sp, #12]
 106 004e 1B68     		ldr	r3, [r3, #0]
 107 0050 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 108 0052 2F2B     		cmp	r3, #47
 109 0054 04D9     		bls	.L3
  71:../src/gps/gpsNMEA.c ****     while (((**s)>='0') && ((**s) <= '9'))
 110              		.loc 1 71 0 is_stmt 0 discriminator 2
 111 0056 039B     		ldr	r3, [sp, #12]
 112 0058 1B68     		ldr	r3, [r3, #0]
 113 005a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 114 005c 392B     		cmp	r3, #57
 115 005e DDD9     		bls	.L4
 116              	.L3:
  76:../src/gps/gpsNMEA.c ****     }
  77:../src/gps/gpsNMEA.c **** 
  78:../src/gps/gpsNMEA.c ****     if ((**s)=='.')
 117              		.loc 1 78 0 is_stmt 1
 118 0060 039B     		ldr	r3, [sp, #12]
 119 0062 1B68     		ldr	r3, [r3, #0]
 120 0064 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 121 0066 2E2B     		cmp	r3, #46
 122 0068 41D1     		bne	.L18
  79:../src/gps/gpsNMEA.c ****     {
  80:../src/gps/gpsNMEA.c ****         // we have decimals
  81:../src/gps/gpsNMEA.c ****         (*s)++;
 123              		.loc 1 81 0
 124 006a 039B     		ldr	r3, [sp, #12]
 125 006c 1B68     		ldr	r3, [r3, #0]
 126 006e 03F10102 		add	r2, r3, #1
 127 0072 039B     		ldr	r3, [sp, #12]
 128 0074 1A60     		str	r2, [r3, #0]
  82:../src/gps/gpsNMEA.c **** 
  83:../src/gps/gpsNMEA.c ****         while  (decimals--)
 129              		.loc 1 83 0
 130 0076 21E0     		b	.L6
 131              	.L7:
  84:../src/gps/gpsNMEA.c ****         {
  85:../src/gps/gpsNMEA.c ****             val *= 10;
 132              		.loc 1 85 0
 133 0078 049A     		ldr	r2, [sp, #16]
 134 007a 1346     		mov	r3, r2
 135 007c 4FEA8303 		lsl	r3, r3, #2
 136 0080 9B18     		adds	r3, r3, r2
 137 0082 4FEA4303 		lsl	r3, r3, #1
 138 0086 0493     		str	r3, [sp, #16]
  86:../src/gps/gpsNMEA.c ****             if (((**s)>='0') && ((**s) <= '9'))
 139              		.loc 1 86 0
 140 0088 039B     		ldr	r3, [sp, #12]
 141 008a 1B68     		ldr	r3, [r3, #0]
 142 008c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 143 008e 2F2B     		cmp	r3, #47
 144 0090 14D9     		bls	.L6
 145              		.loc 1 86 0 is_stmt 0 discriminator 1
 146 0092 039B     		ldr	r3, [sp, #12]
 147 0094 1B68     		ldr	r3, [r3, #0]
 148 0096 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 149 0098 392B     		cmp	r3, #57
 150 009a 0FD8     		bhi	.L6
  87:../src/gps/gpsNMEA.c ****             {
  88:../src/gps/gpsNMEA.c ****                 val += (*((*s)++) - '0');
 151              		.loc 1 88 0 is_stmt 1
 152 009c 039B     		ldr	r3, [sp, #12]
 153 009e 1B68     		ldr	r3, [r3, #0]
 154 00a0 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 155 00a2 A2F13002 		sub	r2, r2, #48
 156 00a6 0499     		ldr	r1, [sp, #16]
 157 00a8 8A18     		adds	r2, r1, r2
 158 00aa 0492     		str	r2, [sp, #16]
 159 00ac 03F10102 		add	r2, r3, #1
 160 00b0 039B     		ldr	r3, [sp, #12]
 161 00b2 1A60     		str	r2, [r3, #0]
  89:../src/gps/gpsNMEA.c ****                 ret = 1;
 162              		.loc 1 89 0
 163 00b4 4FF00103 		mov	r3, #1
 164 00b8 8DF81730 		strb	r3, [sp, #23]
 165              	.L6:
  83:../src/gps/gpsNMEA.c ****         while  (decimals--)
 166              		.loc 1 83 0 discriminator 1
 167 00bc 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 168 00c0 002B     		cmp	r3, #0
 169 00c2 0CBF     		ite	eq
 170 00c4 0023     		moveq	r3, #0
 171 00c6 0123     		movne	r3, #1
 172 00c8 DBB2     		uxtb	r3, r3
 173 00ca 9DF80720 		ldrb	r2, [sp, #7]
 174 00ce 02F1FF32 		add	r2, r2, #-1
 175 00d2 8DF80720 		strb	r2, [sp, #7]
 176 00d6 002B     		cmp	r3, #0
 177 00d8 CED1     		bne	.L7
  83:../src/gps/gpsNMEA.c ****         while  (decimals--)
 178              		.loc 1 83 0 is_stmt 0
 179 00da 19E0     		b	.L17
 180              	.L10:
  90:../src/gps/gpsNMEA.c ****             }
  91:../src/gps/gpsNMEA.c ****         }
  92:../src/gps/gpsNMEA.c ****     }
  93:../src/gps/gpsNMEA.c ****     else
  94:../src/gps/gpsNMEA.c ****     {
  95:../src/gps/gpsNMEA.c ****         while  (decimals--)
  96:../src/gps/gpsNMEA.c ****           val *= 10;
 181              		.loc 1 96 0 is_stmt 1
 182 00dc 049A     		ldr	r2, [sp, #16]
 183 00de 1346     		mov	r3, r2
 184 00e0 4FEA8303 		lsl	r3, r3, #2
 185 00e4 9B18     		adds	r3, r3, r2
 186 00e6 4FEA4303 		lsl	r3, r3, #1
 187 00ea 0493     		str	r3, [sp, #16]
 188 00ec 00E0     		b	.L9
 189              	.L18:
  95:../src/gps/gpsNMEA.c ****         while  (decimals--)
 190              		.loc 1 95 0
 191 00ee 00BF     		nop
 192              	.L9:
  95:../src/gps/gpsNMEA.c ****         while  (decimals--)
 193              		.loc 1 95 0 is_stmt 0 discriminator 1
 194 00f0 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 195 00f4 002B     		cmp	r3, #0
 196 00f6 0CBF     		ite	eq
 197 00f8 0023     		moveq	r3, #0
 198 00fa 0123     		movne	r3, #1
 199 00fc DBB2     		uxtb	r3, r3
 200 00fe 9DF80720 		ldrb	r2, [sp, #7]
 201 0102 02F1FF32 		add	r2, r2, #-1
 202 0106 8DF80720 		strb	r2, [sp, #7]
 203 010a 002B     		cmp	r3, #0
 204 010c E6D1     		bne	.L10
  97:../src/gps/gpsNMEA.c ****     }
  98:../src/gps/gpsNMEA.c **** 
  99:../src/gps/gpsNMEA.c ****     // take off the decimals we did not care about
 100:../src/gps/gpsNMEA.c ****     while (((**s)>='0') && ((**s) <= '9'))
 205              		.loc 1 100 0 is_stmt 1
 206 010e 06E0     		b	.L11
 207              	.L17:
 208 0110 05E0     		b	.L11
 209              	.L13:
 101:../src/gps/gpsNMEA.c ****         (*s)++;
 210              		.loc 1 101 0
 211 0112 039B     		ldr	r3, [sp, #12]
 212 0114 1B68     		ldr	r3, [r3, #0]
 213 0116 03F10102 		add	r2, r3, #1
 214 011a 039B     		ldr	r3, [sp, #12]
 215 011c 1A60     		str	r2, [r3, #0]
 216              	.L11:
 100:../src/gps/gpsNMEA.c ****     while (((**s)>='0') && ((**s) <= '9'))
 217              		.loc 1 100 0 discriminator 1
 218 011e 039B     		ldr	r3, [sp, #12]
 219 0120 1B68     		ldr	r3, [r3, #0]
 220 0122 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 221 0124 2F2B     		cmp	r3, #47
 222 0126 04D9     		bls	.L12
 100:../src/gps/gpsNMEA.c ****     while (((**s)>='0') && ((**s) <= '9'))
 223              		.loc 1 100 0 is_stmt 0 discriminator 2
 224 0128 039B     		ldr	r3, [sp, #12]
 225 012a 1B68     		ldr	r3, [r3, #0]
 226 012c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 227 012e 392B     		cmp	r3, #57
 228 0130 EFD9     		bls	.L13
 229              	.L12:
 102:../src/gps/gpsNMEA.c **** 
 103:../src/gps/gpsNMEA.c ****     if ((**s) == ',')
 230              		.loc 1 103 0 is_stmt 1
 231 0132 039B     		ldr	r3, [sp, #12]
 232 0134 1B68     		ldr	r3, [r3, #0]
 233 0136 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 234 0138 2C2B     		cmp	r3, #44
 235 013a 06D1     		bne	.L14
 104:../src/gps/gpsNMEA.c ****         (*s)++;
 236              		.loc 1 104 0
 237 013c 039B     		ldr	r3, [sp, #12]
 238 013e 1B68     		ldr	r3, [r3, #0]
 239 0140 03F10102 		add	r2, r3, #1
 240 0144 039B     		ldr	r3, [sp, #12]
 241 0146 1A60     		str	r2, [r3, #0]
 242 0148 03E0     		b	.L15
 243              	.L14:
 105:../src/gps/gpsNMEA.c ****     else
 106:../src/gps/gpsNMEA.c ****         ret = 0; // no comma -> fail
 244              		.loc 1 106 0
 245 014a 4FF00003 		mov	r3, #0
 246 014e 8DF81730 		strb	r3, [sp, #23]
 247              	.L15:
 107:../src/gps/gpsNMEA.c **** 
 108:../src/gps/gpsNMEA.c ****     if (ret && out)
 248              		.loc 1 108 0
 249 0152 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
 250 0156 002B     		cmp	r3, #0
 251 0158 05D0     		beq	.L16
 252              		.loc 1 108 0 is_stmt 0 discriminator 1
 253 015a 029B     		ldr	r3, [sp, #8]
 254 015c 002B     		cmp	r3, #0
 255 015e 02D0     		beq	.L16
 109:../src/gps/gpsNMEA.c ****         *out=val;
 256              		.loc 1 109 0 is_stmt 1
 257 0160 029B     		ldr	r3, [sp, #8]
 258 0162 049A     		ldr	r2, [sp, #16]
 259 0164 1A60     		str	r2, [r3, #0]
 260              	.L16:
 110:../src/gps/gpsNMEA.c **** 
 111:../src/gps/gpsNMEA.c ****     return ret;
 261              		.loc 1 111 0
 262 0166 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
 112:../src/gps/gpsNMEA.c **** }
 263              		.loc 1 112 0
 264 016a 1846     		mov	r0, r3
 265 016c 06B0     		add	sp, sp, #24
 266 016e 7047     		bx	lr
 267              		.cfi_endproc
 268              	.LFE111:
 270              		.align	2
 271              		.global	nmeaGetLatLong
 272              		.thumb
 273              		.thumb_func
 275              	nmeaGetLatLong:
 276              	.LFB112:
 113:../src/gps/gpsNMEA.c **** 
 114:../src/gps/gpsNMEA.c **** ///////////////////////////////////////////////////////////////////////////////
 115:../src/gps/gpsNMEA.c **** // Get Lat/Long from NMEA
 116:../src/gps/gpsNMEA.c **** ///////////////////////////////////////////////////////////////////////////////
 117:../src/gps/gpsNMEA.c **** 
 118:../src/gps/gpsNMEA.c **** // input: string "[d]ddmm.mmmm,[NESW],"
 119:../src/gps/gpsNMEA.c **** 
 120:../src/gps/gpsNMEA.c **** uint8_t nmeaGetLatLong(char **s, long *outp, uint8_t decimals)
 121:../src/gps/gpsNMEA.c **** {
 277              		.loc 1 121 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 24
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281 0170 00B5     		push	{lr}
 282              	.LCFI1:
 283              		.cfi_def_cfa_offset 4
 284              		.cfi_offset 14, -4
 285 0172 87B0     		sub	sp, sp, #28
 286              	.LCFI2:
 287              		.cfi_def_cfa_offset 32
 288 0174 0390     		str	r0, [sp, #12]
 289 0176 0291     		str	r1, [sp, #8]
 290 0178 1346     		mov	r3, r2
 291 017a 8DF80730 		strb	r3, [sp, #7]
 122:../src/gps/gpsNMEA.c ****     int32_t raw, deg;
 123:../src/gps/gpsNMEA.c **** 
 124:../src/gps/gpsNMEA.c ****     if (nmeaGetScaledInt(s, &raw, decimals))
 292              		.loc 1 124 0
 293 017e 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 294 0182 0398     		ldr	r0, [sp, #12]
 295 0184 04AA     		add	r2, sp, #16
 296 0186 1146     		mov	r1, r2
 297 0188 1A46     		mov	r2, r3
 298 018a FFF7FEFF 		bl	nmeaGetScaledInt
 299 018e 0346     		mov	r3, r0
 300 0190 002B     		cmp	r3, #0
 301 0192 00F08480 		beq	.L20
 125:../src/gps/gpsNMEA.c ****     {
 126:../src/gps/gpsNMEA.c ****         deg = raw / 10000000 * 10000000; // whole degrees
 302              		.loc 1 126 0
 303 0196 049A     		ldr	r2, [sp, #16]
 304 0198 4CF66B23 		movw	r3, #51819
 305 019c C6F65F33 		movt	r3, 27487
 306 01a0 83FB0213 		smull	r1, r3, r3, r2
 307 01a4 4FEAA351 		asr	r1, r3, #22
 308 01a8 4FEAE273 		asr	r3, r2, #31
 309 01ac CA1A     		subs	r2, r1, r3
 310 01ae 49F28063 		movw	r3, #38528
 311 01b2 C0F29803 		movt	r3, 152
 312 01b6 03FB02F3 		mul	r3, r3, r2
 313 01ba 0593     		str	r3, [sp, #20]
 127:../src/gps/gpsNMEA.c ****         raw = raw - deg;                 // minutes
 314              		.loc 1 127 0
 315 01bc 049A     		ldr	r2, [sp, #16]
 316 01be 059B     		ldr	r3, [sp, #20]
 317 01c0 D31A     		subs	r3, r2, r3
 318 01c2 0493     		str	r3, [sp, #16]
 128:../src/gps/gpsNMEA.c ****         raw = raw * 100 / 60;            // minutes to fractional degrees
 319              		.loc 1 128 0
 320 01c4 049B     		ldr	r3, [sp, #16]
 321 01c6 4FF06402 		mov	r2, #100
 322 01ca 02FB03F3 		mul	r3, r2, r3
 323 01ce 48F68902 		movw	r2, #34953
 324 01d2 C8F68802 		movt	r2, 34952
 325 01d6 82FB0312 		smull	r1, r2, r2, r3
 326 01da D218     		adds	r2, r2, r3
 327 01dc 4FEA6212 		asr	r2, r2, #5
 328 01e0 4FEAE373 		asr	r3, r3, #31
 329 01e4 D31A     		subs	r3, r2, r3
 330 01e6 0493     		str	r3, [sp, #16]
 129:../src/gps/gpsNMEA.c ****         deg = deg + raw;
 331              		.loc 1 129 0
 332 01e8 049B     		ldr	r3, [sp, #16]
 333 01ea 059A     		ldr	r2, [sp, #20]
 334 01ec D318     		adds	r3, r2, r3
 335 01ee 0593     		str	r3, [sp, #20]
 130:../src/gps/gpsNMEA.c **** 
 131:../src/gps/gpsNMEA.c ****         switch (**s)
 336              		.loc 1 131 0
 337 01f0 039B     		ldr	r3, [sp, #12]
 338 01f2 1B68     		ldr	r3, [r3, #0]
 339 01f4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 340 01f6 A3F14503 		sub	r3, r3, #69
 341 01fa 122B     		cmp	r3, #18
 342 01fc 3AD8     		bhi	.L29
 343 01fe 01A2     		adr	r2, .L24
 344 0200 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 345              		.align	2
 346              	.L24:
 347 0204 67020000 		.word	.L22+1
 348 0208 75020000 		.word	.L29+1
 349 020c 75020000 		.word	.L29+1
 350 0210 75020000 		.word	.L29+1
 351 0214 75020000 		.word	.L29+1
 352 0218 75020000 		.word	.L29+1
 353 021c 75020000 		.word	.L29+1
 354 0220 75020000 		.word	.L29+1
 355 0224 75020000 		.word	.L29+1
 356 0228 67020000 		.word	.L22+1
 357 022c 75020000 		.word	.L29+1
 358 0230 75020000 		.word	.L29+1
 359 0234 75020000 		.word	.L29+1
 360 0238 75020000 		.word	.L29+1
 361 023c 51020000 		.word	.L23+1
 362 0240 75020000 		.word	.L29+1
 363 0244 75020000 		.word	.L29+1
 364 0248 75020000 		.word	.L29+1
 365 024c 51020000 		.word	.L23+1
 366              	.L23:
 132:../src/gps/gpsNMEA.c ****         {
 133:../src/gps/gpsNMEA.c ****             case 'S':
 134:../src/gps/gpsNMEA.c ****             case 'W':
 135:../src/gps/gpsNMEA.c ****                 deg = -deg;
 367              		.loc 1 135 0
 368 0250 059B     		ldr	r3, [sp, #20]
 369 0252 C3F10003 		rsb	r3, r3, #0
 370 0256 0593     		str	r3, [sp, #20]
 136:../src/gps/gpsNMEA.c ****                 (*s)++;
 371              		.loc 1 136 0
 372 0258 039B     		ldr	r3, [sp, #12]
 373 025a 1B68     		ldr	r3, [r3, #0]
 374 025c 03F10102 		add	r2, r3, #1
 375 0260 039B     		ldr	r3, [sp, #12]
 376 0262 1A60     		str	r2, [r3, #0]
 137:../src/gps/gpsNMEA.c ****                 break;
 377              		.loc 1 137 0
 378 0264 07E0     		b	.L25
 379              	.L22:
 138:../src/gps/gpsNMEA.c **** 
 139:../src/gps/gpsNMEA.c ****             case 'N':
 140:../src/gps/gpsNMEA.c ****             case 'E':
 141:../src/gps/gpsNMEA.c ****                 (*s)++;
 380              		.loc 1 141 0
 381 0266 039B     		ldr	r3, [sp, #12]
 382 0268 1B68     		ldr	r3, [r3, #0]
 383 026a 03F10102 		add	r2, r3, #1
 384 026e 039B     		ldr	r3, [sp, #12]
 385 0270 1A60     		str	r2, [r3, #0]
 142:../src/gps/gpsNMEA.c ****                 break;
 386              		.loc 1 142 0
 387 0272 00E0     		b	.L25
 388              	.L29:
 143:../src/gps/gpsNMEA.c **** 
 144:../src/gps/gpsNMEA.c ****             default:
 145:../src/gps/gpsNMEA.c ****                 break;
 389              		.loc 1 145 0
 390 0274 00BF     		nop
 391              	.L25:
 146:../src/gps/gpsNMEA.c ****         }
 147:../src/gps/gpsNMEA.c **** 
 148:../src/gps/gpsNMEA.c ****         if ((**s) == ',')
 392              		.loc 1 148 0
 393 0276 039B     		ldr	r3, [sp, #12]
 394 0278 1B68     		ldr	r3, [r3, #0]
 395 027a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 396 027c 2C2B     		cmp	r3, #44
 397 027e 0ED1     		bne	.L20
 149:../src/gps/gpsNMEA.c ****         {
 150:../src/gps/gpsNMEA.c ****             (*s)++;
 398              		.loc 1 150 0
 399 0280 039B     		ldr	r3, [sp, #12]
 400 0282 1B68     		ldr	r3, [r3, #0]
 401 0284 03F10102 		add	r2, r3, #1
 402 0288 039B     		ldr	r3, [sp, #12]
 403 028a 1A60     		str	r2, [r3, #0]
 151:../src/gps/gpsNMEA.c ****             if (outp) *outp = deg;
 404              		.loc 1 151 0
 405 028c 029B     		ldr	r3, [sp, #8]
 406 028e 002B     		cmp	r3, #0
 407 0290 02D0     		beq	.L26
 408              		.loc 1 151 0 is_stmt 0 discriminator 1
 409 0292 029B     		ldr	r3, [sp, #8]
 410 0294 059A     		ldr	r2, [sp, #20]
 411 0296 1A60     		str	r2, [r3, #0]
 412              	.L26:
 152:../src/gps/gpsNMEA.c ****             return 1;
 413              		.loc 1 152 0 is_stmt 1
 414 0298 4FF00103 		mov	r3, #1
 415 029c 0CE0     		b	.L27
 416              	.L20:
 153:../src/gps/gpsNMEA.c ****         }
 154:../src/gps/gpsNMEA.c ****     }
 155:../src/gps/gpsNMEA.c **** 
 156:../src/gps/gpsNMEA.c ****     if ((**s) == ',') (*s)++; // consume the second comma if no number parsed
 417              		.loc 1 156 0
 418 029e 039B     		ldr	r3, [sp, #12]
 419 02a0 1B68     		ldr	r3, [r3, #0]
 420 02a2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 421 02a4 2C2B     		cmp	r3, #44
 422 02a6 05D1     		bne	.L28
 423              		.loc 1 156 0 is_stmt 0 discriminator 1
 424 02a8 039B     		ldr	r3, [sp, #12]
 425 02aa 1B68     		ldr	r3, [r3, #0]
 426 02ac 03F10102 		add	r2, r3, #1
 427 02b0 039B     		ldr	r3, [sp, #12]
 428 02b2 1A60     		str	r2, [r3, #0]
 429              	.L28:
 157:../src/gps/gpsNMEA.c **** 
 158:../src/gps/gpsNMEA.c ****     return 0;
 430              		.loc 1 158 0 is_stmt 1
 431 02b4 4FF00003 		mov	r3, #0
 432              	.L27:
 159:../src/gps/gpsNMEA.c **** }
 433              		.loc 1 159 0
 434 02b8 1846     		mov	r0, r3
 435 02ba 07B0     		add	sp, sp, #28
 436 02bc 00BD     		pop	{pc}
 437              		.cfi_endproc
 438              	.LFE112:
 440              		.section	.rodata
 441              		.align	2
 442              	.LC0:
 443 0010 47504747 		.ascii	"GPGGA,\000"
 443      412C00
 444 0017 00       		.align	2
 445              	.LC1:
 446 0018 47504753 		.ascii	"GPGSA,\000"
 446      412C00
 447 001f 00       		.align	2
 448              	.LC2:
 449 0020 4750524D 		.ascii	"GPRMC,\000"
 449      432C00
 450 0027 00       		.text
 451 02be 00BF     		.align	2
 452              		.global	nmeaProcessSentence
 453              		.thumb
 454              		.thumb_func
 456              	nmeaProcessSentence:
 457              	.LFB113:
 160:../src/gps/gpsNMEA.c **** 
 161:../src/gps/gpsNMEA.c **** ///////////////////////////////////////////////////////////////////////////////
 162:../src/gps/gpsNMEA.c **** // Process NMEA Sentence
 163:../src/gps/gpsNMEA.c **** ///////////////////////////////////////////////////////////////////////////////
 164:../src/gps/gpsNMEA.c **** 
 165:../src/gps/gpsNMEA.c **** void nmeaProcessSentence()
 166:../src/gps/gpsNMEA.c **** {
 458              		.loc 1 166 0
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 8
 461              		@ frame_needed = 0, uses_anonymous_args = 0
 462 02c0 00B5     		push	{lr}
 463              	.LCFI3:
 464              		.cfi_def_cfa_offset 4
 465              		.cfi_offset 14, -4
 466 02c2 83B0     		sub	sp, sp, #12
 467              	.LCFI4:
 468              		.cfi_def_cfa_offset 16
 167:../src/gps/gpsNMEA.c ****     char *p = sentenceBuffer;
 469              		.loc 1 167 0
 470 02c4 40F20003 		movw	r3, #:lower16:sentenceBuffer
 471 02c8 C0F20003 		movt	r3, #:upper16:sentenceBuffer
 472 02cc 0193     		str	r3, [sp, #4]
 168:../src/gps/gpsNMEA.c ****     int32_t work;
 169:../src/gps/gpsNMEA.c **** 
 170:../src/gps/gpsNMEA.c ****     ///////////////////////////////////
 171:../src/gps/gpsNMEA.c **** 
 172:../src/gps/gpsNMEA.c ****     if (!strncmp(p,"GPGGA,",6))
 473              		.loc 1 172 0
 474 02ce 019B     		ldr	r3, [sp, #4]
 475 02d0 1846     		mov	r0, r3
 476 02d2 40F20001 		movw	r1, #:lower16:.LC0
 477 02d6 C0F20001 		movt	r1, #:upper16:.LC0
 478 02da 4FF00602 		mov	r2, #6
 479 02de FFF7FEFF 		bl	strncmp
 480 02e2 0346     		mov	r3, r0
 481 02e4 002B     		cmp	r3, #0
 482 02e6 40F0C080 		bne	.L31
 173:../src/gps/gpsNMEA.c ****     {
 174:../src/gps/gpsNMEA.c ****         // MediaTek Example: $GPGGA,064951.000,2307.1256,N,12016.4438,E,1,8,0.95,39.9,M,17.8,M,,*65
 175:../src/gps/gpsNMEA.c ****         // Ublox Example   : $GPGGA,092725.00,4717.11399,N,00833.91590,E,1,08,1.01,499.6,M,48.0,M,,
 176:../src/gps/gpsNMEA.c **** 
 177:../src/gps/gpsNMEA.c ****         p += 6;  // Skip over 'GPGGA,'
 483              		.loc 1 177 0
 484 02ea 019B     		ldr	r3, [sp, #4]
 485 02ec 03F10603 		add	r3, r3, #6
 486 02f0 0193     		str	r3, [sp, #4]
 178:../src/gps/gpsNMEA.c **** 
 179:../src/gps/gpsNMEA.c ****         sensors.gpsTime        = (nmeaGetScaledInt(&p, &work, 3)) ? (float)work * 0.001f           
 487              		.loc 1 179 0
 488 02f2 01AB     		add	r3, sp, #4
 489 02f4 1846     		mov	r0, r3
 490 02f6 6B46     		mov	r3, sp
 491 02f8 1946     		mov	r1, r3
 492 02fa 4FF00302 		mov	r2, #3
 493 02fe FFF7FEFF 		bl	nmeaGetScaledInt
 494 0302 0346     		mov	r3, r0
 495 0304 002B     		cmp	r3, #0
 496 0306 09D0     		beq	.L32
 497              		.loc 1 179 0 is_stmt 0 discriminator 1
 498 0308 009B     		ldr	r3, [sp, #0]
 499 030a 07EE903A 		fmsr	s15, r3	@ int
 500 030e B8EEE77A 		fsitos	s14, s15
 501 0312 DFEDB77A 		flds	s15, .L60
 502 0316 67EE277A 		fmuls	s15, s14, s15
 503 031a 01E0     		b	.L33
 504              	.L32:
 505              		.loc 1 179 0 discriminator 2
 506 031c DFEDB57A 		flds	s15, .L60+4
 507              	.L33:
 508              		.loc 1 179 0 discriminator 3
 509 0320 40F20003 		movw	r3, #:lower16:sensors
 510 0324 C0F20003 		movt	r3, #:upper16:sensors
 511 0328 C3ED177A 		fsts	s15, [r3, #92]
 180:../src/gps/gpsNMEA.c **** 
 181:../src/gps/gpsNMEA.c ****         sensors.gpsLatitude    = (nmeaGetLatLong(&p,   &work, 5)) ? (float)work * 0.0000001f * D2R 
 512              		.loc 1 181 0 is_stmt 1 discriminator 3
 513 032c 01AB     		add	r3, sp, #4
 514 032e 1846     		mov	r0, r3
 515 0330 6B46     		mov	r3, sp
 516 0332 1946     		mov	r1, r3
 517 0334 4FF00502 		mov	r2, #5
 518 0338 FFF7FEFF 		bl	nmeaGetLatLong
 519 033c 0346     		mov	r3, r0
 520 033e 002B     		cmp	r3, #0
 521 0340 11D0     		beq	.L34
 522              		.loc 1 181 0 is_stmt 0 discriminator 1
 523 0342 009B     		ldr	r3, [sp, #0]
 524 0344 07EE903A 		fmsr	s15, r3	@ int
 525 0348 B8EEE77A 		fsitos	s14, s15
 526 034c DFEDAA7A 		flds	s15, .L60+8
 527 0350 67EE277A 		fmuls	s15, s14, s15
 528 0354 9FEDAC7A 		flds	s14, .L60+24
 529 0358 67EE877A 		fmuls	s15, s15, s14
 530 035c 9FEDAB7A 		flds	s14, .L60+28
 531 0360 C7EE877A 		fdivs	s15, s15, s14
 532 0364 01E0     		b	.L35
 533              	.L34:
 534              		.loc 1 181 0 discriminator 2
 535 0366 DFEDAA7A 		flds	s15, .L60+32
 536              	.L35:
 537              		.loc 1 181 0 discriminator 3
 538 036a 40F20003 		movw	r3, #:lower16:sensors
 539 036e C0F20003 		movt	r3, #:upper16:sensors
 540 0372 C3ED107A 		fsts	s15, [r3, #64]
 182:../src/gps/gpsNMEA.c ****         sensors.gpsLongitude   = (nmeaGetLatLong(&p,   &work, 5)) ? (float)work * 0.0000001f * D2R 
 541              		.loc 1 182 0 is_stmt 1 discriminator 3
 542 0376 01AB     		add	r3, sp, #4
 543 0378 1846     		mov	r0, r3
 544 037a 6B46     		mov	r3, sp
 545 037c 1946     		mov	r1, r3
 546 037e 4FF00502 		mov	r2, #5
 547 0382 FFF7FEFF 		bl	nmeaGetLatLong
 548 0386 0346     		mov	r3, r0
 549 0388 002B     		cmp	r3, #0
 550 038a 11D0     		beq	.L36
 551              		.loc 1 182 0 is_stmt 0 discriminator 1
 552 038c 009B     		ldr	r3, [sp, #0]
 553 038e 07EE903A 		fmsr	s15, r3	@ int
 554 0392 B8EEE77A 		fsitos	s14, s15
 555 0396 DFED987A 		flds	s15, .L60+8
 556 039a 67EE277A 		fmuls	s15, s14, s15
 557 039e 9FED9A7A 		flds	s14, .L60+24
 558 03a2 67EE877A 		fmuls	s15, s15, s14
 559 03a6 9FED997A 		flds	s14, .L60+28
 560 03aa C7EE877A 		fdivs	s15, s15, s14
 561 03ae 01E0     		b	.L37
 562              	.L36:
 563              		.loc 1 182 0 discriminator 2
 564 03b0 DFED977A 		flds	s15, .L60+32
 565              	.L37:
 566              		.loc 1 182 0 discriminator 3
 567 03b4 40F20003 		movw	r3, #:lower16:sensors
 568 03b8 C0F20003 		movt	r3, #:upper16:sensors
 569 03bc C3ED117A 		fsts	s15, [r3, #68]
 183:../src/gps/gpsNMEA.c **** 
 184:../src/gps/gpsNMEA.c ****         p += 2;  // Skip Quality (1 character and ',')  //nmeaGetScaledInt(&p, NULL,  0); // Positi
 570              		.loc 1 184 0 is_stmt 1 discriminator 3
 571 03c0 019B     		ldr	r3, [sp, #4]
 572 03c2 03F10203 		add	r3, r3, #2
 573 03c6 0193     		str	r3, [sp, #4]
 185:../src/gps/gpsNMEA.c **** 
 186:../src/gps/gpsNMEA.c ****         sensors.gpsNumSats     = (nmeaGetScaledInt(&p, &work, 0)) ? work                           
 574              		.loc 1 186 0 discriminator 3
 575 03c8 01AB     		add	r3, sp, #4
 576 03ca 1846     		mov	r0, r3
 577 03cc 6B46     		mov	r3, sp
 578 03ce 1946     		mov	r1, r3
 579 03d0 4FF00002 		mov	r2, #0
 580 03d4 FFF7FEFF 		bl	nmeaGetScaledInt
 581 03d8 0346     		mov	r3, r0
 582 03da 002B     		cmp	r3, #0
 583 03dc 02D0     		beq	.L38
 584              		.loc 1 186 0 is_stmt 0 discriminator 1
 585 03de 009B     		ldr	r3, [sp, #0]
 586 03e0 DAB2     		uxtb	r2, r3
 587 03e2 01E0     		b	.L39
 588              	.L38:
 589              		.loc 1 186 0 discriminator 2
 590 03e4 4FF00002 		mov	r2, #0
 591              	.L39:
 592              		.loc 1 186 0 discriminator 3
 593 03e8 40F20003 		movw	r3, #:lower16:sensors
 594 03ec C0F20003 		movt	r3, #:upper16:sensors
 595 03f0 83F85420 		strb	r2, [r3, #84]
 187:../src/gps/gpsNMEA.c ****         sensors.gpsHdop        = (nmeaGetScaledInt(&p, &work, 3)) ? (float)work * 0.001f           
 596              		.loc 1 187 0 is_stmt 1 discriminator 3
 597 03f4 01AB     		add	r3, sp, #4
 598 03f6 1846     		mov	r0, r3
 599 03f8 6B46     		mov	r3, sp
 600 03fa 1946     		mov	r1, r3
 601 03fc 4FF00302 		mov	r2, #3
 602 0400 FFF7FEFF 		bl	nmeaGetScaledInt
 603 0404 0346     		mov	r3, r0
 604 0406 002B     		cmp	r3, #0
 605 0408 09D0     		beq	.L40
 606              		.loc 1 187 0 is_stmt 0 discriminator 1
 607 040a 009B     		ldr	r3, [sp, #0]
 608 040c 07EE903A 		fmsr	s15, r3	@ int
 609 0410 B8EEE77A 		fsitos	s14, s15
 610 0414 DFED767A 		flds	s15, .L60
 611 0418 67EE277A 		fmuls	s15, s14, s15
 612 041c 01E0     		b	.L41
 613              	.L40:
 614              		.loc 1 187 0 discriminator 2
 615 041e DFED787A 		flds	s15, .L60+16
 616              	.L41:
 617              		.loc 1 187 0 discriminator 3
 618 0422 40F20003 		movw	r3, #:lower16:sensors
 619 0426 C0F20003 		movt	r3, #:upper16:sensors
 620 042a C3ED187A 		fsts	s15, [r3, #96]
 188:../src/gps/gpsNMEA.c ****         sensors.gpsAltitude    = (nmeaGetScaledInt(&p, &work, 3)) ? (float)work * 0.001f           
 621              		.loc 1 188 0 is_stmt 1 discriminator 3
 622 042e 01AB     		add	r3, sp, #4
 623 0430 1846     		mov	r0, r3
 624 0432 6B46     		mov	r3, sp
 625 0434 1946     		mov	r1, r3
 626 0436 4FF00302 		mov	r2, #3
 627 043a FFF7FEFF 		bl	nmeaGetScaledInt
 628 043e 0346     		mov	r3, r0
 629 0440 002B     		cmp	r3, #0
 630 0442 09D0     		beq	.L42
 631              		.loc 1 188 0 is_stmt 0 discriminator 1
 632 0444 009B     		ldr	r3, [sp, #0]
 633 0446 07EE903A 		fmsr	s15, r3	@ int
 634 044a B8EEE77A 		fsitos	s14, s15
 635 044e DFED687A 		flds	s15, .L60
 636 0452 67EE277A 		fmuls	s15, s14, s15
 637 0456 01E0     		b	.L43
 638              	.L42:
 639              		.loc 1 188 0 discriminator 2
 640 0458 DFED697A 		flds	s15, .L60+16
 641              	.L43:
 642              		.loc 1 188 0 discriminator 3
 643 045c 40F20003 		movw	r3, #:lower16:sensors
 644 0460 C0F20003 		movt	r3, #:upper16:sensors
 645 0464 C3ED127A 		fsts	s15, [r3, #72]
 646 0468 16E1     		b	.L30
 647              	.L31:
 189:../src/gps/gpsNMEA.c ****     }
 190:../src/gps/gpsNMEA.c **** 
 191:../src/gps/gpsNMEA.c ****     ///////////////////////////////////
 192:../src/gps/gpsNMEA.c **** 
 193:../src/gps/gpsNMEA.c ****     else if (!strncmp(p,"GPGSA,",6))
 648              		.loc 1 193 0 is_stmt 1
 649 046a 019B     		ldr	r3, [sp, #4]
 650 046c 1846     		mov	r0, r3
 651 046e 40F20001 		movw	r1, #:lower16:.LC1
 652 0472 C0F20001 		movt	r1, #:upper16:.LC1
 653 0476 4FF00602 		mov	r2, #6
 654 047a FFF7FEFF 		bl	strncmp
 655 047e 0346     		mov	r3, r0
 656 0480 002B     		cmp	r3, #0
 657 0482 1ED1     		bne	.L45
 194:../src/gps/gpsNMEA.c ****     {
 195:../src/gps/gpsNMEA.c ****         // MediaTek Example: $GPGSA,A,3,29,21,26,15,18,09,06,10,,,,,2.32,0.95,2.11*00
 196:../src/gps/gpsNMEA.c ****         // Ublox Example   : $GPGSA,A,3,23,29,07,08,09,18,26,28,,,,,1.94,1.18,1.54*0D
 197:../src/gps/gpsNMEA.c **** 
 198:../src/gps/gpsNMEA.c ****         p += 6;  // Skip over 'GPGSA,'
 658              		.loc 1 198 0
 659 0484 019B     		ldr	r3, [sp, #4]
 660 0486 03F10603 		add	r3, r3, #6
 661 048a 0193     		str	r3, [sp, #4]
 199:../src/gps/gpsNMEA.c **** 
 200:../src/gps/gpsNMEA.c ****         p += 2;  // Skip opMode (1 character and ',')
 662              		.loc 1 200 0
 663 048c 019B     		ldr	r3, [sp, #4]
 664 048e 03F10203 		add	r3, r3, #2
 665 0492 0193     		str	r3, [sp, #4]
 201:../src/gps/gpsNMEA.c **** 
 202:../src/gps/gpsNMEA.c ****         sensors.gpsFix         = (nmeaGetScaledInt(&p, &work, 0)) ? work                           
 666              		.loc 1 202 0
 667 0494 01AB     		add	r3, sp, #4
 668 0496 1846     		mov	r0, r3
 669 0498 6B46     		mov	r3, sp
 670 049a 1946     		mov	r1, r3
 671 049c 4FF00002 		mov	r2, #0
 672 04a0 FFF7FEFF 		bl	nmeaGetScaledInt
 673 04a4 0346     		mov	r3, r0
 674 04a6 002B     		cmp	r3, #0
 675 04a8 02D0     		beq	.L46
 676              		.loc 1 202 0 is_stmt 0 discriminator 1
 677 04aa 009B     		ldr	r3, [sp, #0]
 678 04ac DAB2     		uxtb	r2, r3
 679 04ae 01E0     		b	.L47
 680              	.L46:
 681              		.loc 1 202 0 discriminator 2
 682 04b0 4FF00002 		mov	r2, #0
 683              	.L47:
 684              		.loc 1 202 0 discriminator 3
 685 04b4 40F20003 		movw	r3, #:lower16:sensors
 686 04b8 C0F20003 		movt	r3, #:upper16:sensors
 687 04bc 83F85520 		strb	r2, [r3, #85]
 688 04c0 EAE0     		b	.L30
 689              	.L45:
 203:../src/gps/gpsNMEA.c ****     }
 204:../src/gps/gpsNMEA.c **** 
 205:../src/gps/gpsNMEA.c ****     ///////////////////////////////////
 206:../src/gps/gpsNMEA.c **** 
 207:../src/gps/gpsNMEA.c ****     else if (!strncmp(p,"GPRMC,",6))
 690              		.loc 1 207 0 is_stmt 1
 691 04c2 019B     		ldr	r3, [sp, #4]
 692 04c4 1846     		mov	r0, r3
 693 04c6 40F20001 		movw	r1, #:lower16:.LC2
 694 04ca C0F20001 		movt	r1, #:upper16:.LC2
 695 04ce 4FF00602 		mov	r2, #6
 696 04d2 FFF7FEFF 		bl	strncmp
 697 04d6 0346     		mov	r3, r0
 698 04d8 002B     		cmp	r3, #0
 699 04da 40F0DD80 		bne	.L30
 208:../src/gps/gpsNMEA.c ****     {
 209:../src/gps/gpsNMEA.c ****         // MediaTek Example: $GPRMC,064951.000,A,2307.1256,N,12016.4438,E,0.03,165.48,260406,3.05,W
 210:../src/gps/gpsNMEA.c ****         // Ublox Example   : $GPRMC,083559.00,A,4717.11437,N,00833.91522,E,0.004,77.52,091202,,,A*5
 211:../src/gps/gpsNMEA.c **** 
 212:../src/gps/gpsNMEA.c ****         p += 6;  // Skip over 'GPRMC,'
 700              		.loc 1 212 0
 701 04de 019B     		ldr	r3, [sp, #4]
 702 04e0 03F10603 		add	r3, r3, #6
 703 04e4 0193     		str	r3, [sp, #4]
 213:../src/gps/gpsNMEA.c **** 
 214:../src/gps/gpsNMEA.c ****         sensors.gpsTime        = (nmeaGetScaledInt(&p, &work, 3)) ? (float)work * 0.001f           
 704              		.loc 1 214 0
 705 04e6 01AB     		add	r3, sp, #4
 706 04e8 1846     		mov	r0, r3
 707 04ea 6B46     		mov	r3, sp
 708 04ec 1946     		mov	r1, r3
 709 04ee 4FF00302 		mov	r2, #3
 710 04f2 FFF7FEFF 		bl	nmeaGetScaledInt
 711 04f6 0346     		mov	r3, r0
 712 04f8 002B     		cmp	r3, #0
 713 04fa 09D0     		beq	.L48
 714              		.loc 1 214 0 is_stmt 0 discriminator 1
 715 04fc 009B     		ldr	r3, [sp, #0]
 716 04fe 07EE903A 		fmsr	s15, r3	@ int
 717 0502 B8EEE77A 		fsitos	s14, s15
 718 0506 DFED3A7A 		flds	s15, .L60
 719 050a 67EE277A 		fmuls	s15, s14, s15
 720 050e 01E0     		b	.L49
 721              	.L48:
 722              		.loc 1 214 0 discriminator 2
 723 0510 DFED387A 		flds	s15, .L60+4
 724              	.L49:
 725              		.loc 1 214 0 discriminator 3
 726 0514 40F20003 		movw	r3, #:lower16:sensors
 727 0518 C0F20003 		movt	r3, #:upper16:sensors
 728 051c C3ED177A 		fsts	s15, [r3, #92]
 215:../src/gps/gpsNMEA.c **** 
 216:../src/gps/gpsNMEA.c ****         p += 2;  // Skip Status (1 character and ',')
 729              		.loc 1 216 0 is_stmt 1 discriminator 3
 730 0520 019B     		ldr	r3, [sp, #4]
 731 0522 03F10203 		add	r3, r3, #2
 732 0526 0193     		str	r3, [sp, #4]
 217:../src/gps/gpsNMEA.c **** 
 218:../src/gps/gpsNMEA.c ****         sensors.gpsLatitude    = (nmeaGetLatLong(&p,   &work, 5)) ? (float)work * 0.0000001f * D2R 
 733              		.loc 1 218 0 discriminator 3
 734 0528 01AB     		add	r3, sp, #4
 735 052a 1846     		mov	r0, r3
 736 052c 6B46     		mov	r3, sp
 737 052e 1946     		mov	r1, r3
 738 0530 4FF00502 		mov	r2, #5
 739 0534 FFF7FEFF 		bl	nmeaGetLatLong
 740 0538 0346     		mov	r3, r0
 741 053a 002B     		cmp	r3, #0
 742 053c 11D0     		beq	.L50
 743              		.loc 1 218 0 is_stmt 0 discriminator 1
 744 053e 009B     		ldr	r3, [sp, #0]
 745 0540 07EE903A 		fmsr	s15, r3	@ int
 746 0544 B8EEE77A 		fsitos	s14, s15
 747 0548 DFED2B7A 		flds	s15, .L60+8
 748 054c 67EE277A 		fmuls	s15, s14, s15
 749 0550 9FED2D7A 		flds	s14, .L60+24
 750 0554 67EE877A 		fmuls	s15, s15, s14
 751 0558 9FED2C7A 		flds	s14, .L60+28
 752 055c C7EE877A 		fdivs	s15, s15, s14
 753 0560 01E0     		b	.L51
 754              	.L50:
 755              		.loc 1 218 0 discriminator 2
 756 0562 DFED2B7A 		flds	s15, .L60+32
 757              	.L51:
 758              		.loc 1 218 0 discriminator 3
 759 0566 40F20003 		movw	r3, #:lower16:sensors
 760 056a C0F20003 		movt	r3, #:upper16:sensors
 761 056e C3ED107A 		fsts	s15, [r3, #64]
 219:../src/gps/gpsNMEA.c ****         sensors.gpsLongitude   = (nmeaGetLatLong(&p,   &work, 5)) ? (float)work * 0.0000001f * D2R 
 762              		.loc 1 219 0 is_stmt 1 discriminator 3
 763 0572 01AB     		add	r3, sp, #4
 764 0574 1846     		mov	r0, r3
 765 0576 6B46     		mov	r3, sp
 766 0578 1946     		mov	r1, r3
 767 057a 4FF00502 		mov	r2, #5
 768 057e FFF7FEFF 		bl	nmeaGetLatLong
 769 0582 0346     		mov	r3, r0
 770 0584 002B     		cmp	r3, #0
 771 0586 11D0     		beq	.L52
 772              		.loc 1 219 0 is_stmt 0 discriminator 1
 773 0588 009B     		ldr	r3, [sp, #0]
 774 058a 07EE903A 		fmsr	s15, r3	@ int
 775 058e B8EEE77A 		fsitos	s14, s15
 776 0592 DFED197A 		flds	s15, .L60+8
 777 0596 67EE277A 		fmuls	s15, s14, s15
 778 059a 9FED1B7A 		flds	s14, .L60+24
 779 059e 67EE877A 		fmuls	s15, s15, s14
 780 05a2 9FED1A7A 		flds	s14, .L60+28
 781 05a6 C7EE877A 		fdivs	s15, s15, s14
 782 05aa 01E0     		b	.L53
 783              	.L52:
 784              		.loc 1 219 0 discriminator 2
 785 05ac DFED187A 		flds	s15, .L60+32
 786              	.L53:
 787              		.loc 1 219 0 discriminator 3
 788 05b0 40F20003 		movw	r3, #:lower16:sensors
 789 05b4 C0F20003 		movt	r3, #:upper16:sensors
 790 05b8 C3ED117A 		fsts	s15, [r3, #68]
 220:../src/gps/gpsNMEA.c ****         sensors.gpsGroundSpeed = (nmeaGetScaledInt(&p, &work, 3)) ? (float)work * 0.001f * KNOTS2MP
 791              		.loc 1 220 0 is_stmt 1 discriminator 3
 792 05bc 01AB     		add	r3, sp, #4
 793 05be 1846     		mov	r0, r3
 794 05c0 6B46     		mov	r3, sp
 795 05c2 1946     		mov	r1, r3
 796 05c4 4FF00302 		mov	r2, #3
 797 05c8 FFF7FEFF 		bl	nmeaGetScaledInt
 798 05cc 0346     		mov	r3, r0
 799 05ce 002B     		cmp	r3, #0
 800 05d0 20D0     		beq	.L54
 801              		.loc 1 220 0 is_stmt 0 discriminator 1
 802 05d2 009B     		ldr	r3, [sp, #0]
 803 05d4 07EE903A 		fmsr	s15, r3	@ int
 804 05d8 B8EEE77A 		fsitos	s14, s15
 805 05dc DFED047A 		flds	s15, .L60
 806 05e0 67EE277A 		fmuls	s15, s14, s15
 807 05e4 9FED057A 		flds	s14, .L60+12
 808 05e8 67EE877A 		fmuls	s15, s15, s14
 809 05ec 14E0     		b	.L55
 810              	.L61:
 811 05ee 00BF     		.align	2
 812              	.L60:
 813 05f0 6F12833A 		.word	981668463
 814 05f4 00000000 		.word	0
 815 05f8 95BFD633 		.word	869711765
 816 05fc A1B2033F 		.word	1057206945
 817 0600 003C1C46 		.word	1176255488
 818 0604 6F12833A 		.word	981668463
 819 0608 DB0F4940 		.word	1078530011
 820 060c 00003443 		.word	1127481344
 821 0610 F6832E43 		.word	1127121910
 822              	.L54:
 823              		.loc 1 220 0 discriminator 2
 824 0614 5FED067A 		flds	s15, .L60+16
 825              	.L55:
 826              		.loc 1 220 0 discriminator 3
 827 0618 40F20003 		movw	r3, #:lower16:sensors
 828 061c C0F20003 		movt	r3, #:upper16:sensors
 829 0620 C3ED137A 		fsts	s15, [r3, #76]
 221:../src/gps/gpsNMEA.c ****         sensors.gpsGroundTrack = (nmeaGetScaledInt(&p, &work, 3)) ? (float)work * 0.001f * D2R     
 830              		.loc 1 221 0 is_stmt 1 discriminator 3
 831 0624 01AB     		add	r3, sp, #4
 832 0626 1846     		mov	r0, r3
 833 0628 6B46     		mov	r3, sp
 834 062a 1946     		mov	r1, r3
 835 062c 4FF00302 		mov	r2, #3
 836 0630 FFF7FEFF 		bl	nmeaGetScaledInt
 837 0634 0346     		mov	r3, r0
 838 0636 002B     		cmp	r3, #0
 839 0638 11D0     		beq	.L56
 840              		.loc 1 221 0 is_stmt 0 discriminator 1
 841 063a 009B     		ldr	r3, [sp, #0]
 842 063c 07EE903A 		fmsr	s15, r3	@ int
 843 0640 B8EEE77A 		fsitos	s14, s15
 844 0644 5FED117A 		flds	s15, .L60+20
 845 0648 67EE277A 		fmuls	s15, s14, s15
 846 064c 1FED127A 		flds	s14, .L60+24
 847 0650 67EE877A 		fmuls	s15, s15, s14
 848 0654 1FED137A 		flds	s14, .L60+28
 849 0658 C7EE877A 		fdivs	s15, s15, s14
 850 065c 01E0     		b	.L57
 851              	.L56:
 852              		.loc 1 221 0 discriminator 2
 853 065e 5FED147A 		flds	s15, .L60+32
 854              	.L57:
 855              		.loc 1 221 0 discriminator 3
 856 0662 40F20003 		movw	r3, #:lower16:sensors
 857 0666 C0F20003 		movt	r3, #:upper16:sensors
 858 066a C3ED147A 		fsts	s15, [r3, #80]
 222:../src/gps/gpsNMEA.c ****         sensors.gpsDate        = (nmeaGetScaledInt(&p, &work, 0)) ? work                           
 859              		.loc 1 222 0 is_stmt 1 discriminator 3
 860 066e 01AB     		add	r3, sp, #4
 861 0670 1846     		mov	r0, r3
 862 0672 6B46     		mov	r3, sp
 863 0674 1946     		mov	r1, r3
 864 0676 4FF00002 		mov	r2, #0
 865 067a FFF7FEFF 		bl	nmeaGetScaledInt
 866 067e 0346     		mov	r3, r0
 867 0680 002B     		cmp	r3, #0
 868 0682 02D0     		beq	.L58
 869              		.loc 1 222 0 is_stmt 0 discriminator 1
 870 0684 009B     		ldr	r3, [sp, #0]
 871 0686 1A46     		mov	r2, r3
 872 0688 01E0     		b	.L59
 873              	.L58:
 874              		.loc 1 222 0 discriminator 2
 875 068a 42F20F72 		movw	r2, #9999
 876              	.L59:
 877              		.loc 1 222 0 discriminator 3
 878 068e 40F20003 		movw	r3, #:lower16:sensors
 879 0692 C0F20003 		movt	r3, #:upper16:sensors
 880 0696 9A65     		str	r2, [r3, #88]
 881              	.L30:
 223:../src/gps/gpsNMEA.c ****     }
 224:../src/gps/gpsNMEA.c **** 
 225:../src/gps/gpsNMEA.c ****     ///////////////////////////////////
 226:../src/gps/gpsNMEA.c **** }
 882              		.loc 1 226 0 is_stmt 1
 883 0698 03B0     		add	sp, sp, #12
 884 069a 00BD     		pop	{pc}
 885              		.cfi_endproc
 886              	.LFE113:
 888              		.align	2
 889              		.global	decodeNMEAsentence
 890              		.thumb
 891              		.thumb_func
 893              	decodeNMEAsentence:
 894              	.LFB114:
 227:../src/gps/gpsNMEA.c **** 
 228:../src/gps/gpsNMEA.c **** ///////////////////////////////////////////////////////////////////////////////
 229:../src/gps/gpsNMEA.c **** // Decode a NMEA Sentence
 230:../src/gps/gpsNMEA.c **** ///////////////////////////////////////////////////////////////////////////////
 231:../src/gps/gpsNMEA.c **** 
 232:../src/gps/gpsNMEA.c **** uint8_t decodeNMEAsentence(void)
 233:../src/gps/gpsNMEA.c **** {
 895              		.loc 1 233 0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 8
 898              		@ frame_needed = 0, uses_anonymous_args = 0
 899 069c 00B5     		push	{lr}
 900              	.LCFI5:
 901              		.cfi_def_cfa_offset 4
 902              		.cfi_offset 14, -4
 903 069e 83B0     		sub	sp, sp, #12
 904              	.LCFI6:
 905              		.cfi_def_cfa_offset 16
 234:../src/gps/gpsNMEA.c ****     char     data;
 235:../src/gps/gpsNMEA.c ****     uint8_t  parsed = false;
 906              		.loc 1 235 0
 907 06a0 4FF00003 		mov	r3, #0
 908 06a4 8DF80730 		strb	r3, [sp, #7]
 236:../src/gps/gpsNMEA.c ****     uint16_t i;
 237:../src/gps/gpsNMEA.c ****     uint16_t numberOfChars;
 238:../src/gps/gpsNMEA.c **** 
 239:../src/gps/gpsNMEA.c ****     numberOfChars = gpsNumCharsAvailable();
 909              		.loc 1 239 0
 910 06a8 FFF7FEFF 		bl	gpsNumCharsAvailable
 911 06ac 0346     		mov	r3, r0
 912 06ae ADF80230 		strh	r3, [sp, #2]	@ movhi
 240:../src/gps/gpsNMEA.c **** 
 241:../src/gps/gpsNMEA.c ****     for (i = 0; i < numberOfChars; i++)
 913              		.loc 1 241 0
 914 06b2 4FF00003 		mov	r3, #0
 915 06b6 ADF80430 		strh	r3, [sp, #4]	@ movhi
 916 06ba C5E0     		b	.L63
 917              	.L77:
 242:../src/gps/gpsNMEA.c ****     {
 243:../src/gps/gpsNMEA.c **** 		data = gpsRead();
 918              		.loc 1 243 0
 919 06bc FFF7FEFF 		bl	gpsRead
 920 06c0 0346     		mov	r3, r0
 921 06c2 8DF80130 		strb	r3, [sp, #1]
 244:../src/gps/gpsNMEA.c **** 
 245:../src/gps/gpsNMEA.c ****         switch (nmeaProcessDataState)
 922              		.loc 1 245 0
 923 06c6 40F20003 		movw	r3, #:lower16:nmeaProcessDataState
 924 06ca C0F20003 		movt	r3, #:upper16:nmeaProcessDataState
 925 06ce 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 926 06d0 032B     		cmp	r3, #3
 927 06d2 00F2B380 		bhi	.L64
 928 06d6 01A2     		adr	r2, .L69
 929 06d8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 930              		.align	2
 931              	.L69:
 932 06dc ED060000 		.word	.L65+1
 933 06e0 23070000 		.word	.L66+1
 934 06e4 BB070000 		.word	.L67+1
 935 06e8 FF070000 		.word	.L68+1
 936              	.L65:
 246:../src/gps/gpsNMEA.c ****         {
 247:../src/gps/gpsNMEA.c ****             case WAIT_START:
 248:../src/gps/gpsNMEA.c ****                 if (data == '$')
 937              		.loc 1 248 0
 938 06ec 9DF80130 		ldrb	r3, [sp, #1]	@ zero_extendqisi2
 939 06f0 242B     		cmp	r3, #36
 940 06f2 40F0A280 		bne	.L78
 249:../src/gps/gpsNMEA.c ****                 {
 250:../src/gps/gpsNMEA.c ****                     nmeaProcessDataState  = READ;
 941              		.loc 1 250 0
 942 06f6 40F20003 		movw	r3, #:lower16:nmeaProcessDataState
 943 06fa C0F20003 		movt	r3, #:upper16:nmeaProcessDataState
 944 06fe 4FF00102 		mov	r2, #1
 945 0702 1A70     		strb	r2, [r3, #0]
 251:../src/gps/gpsNMEA.c ****                     sentenceLength        = 0;
 946              		.loc 1 251 0
 947 0704 40F20003 		movw	r3, #:lower16:sentenceLength
 948 0708 C0F20003 		movt	r3, #:upper16:sentenceLength
 949 070c 4FF00002 		mov	r2, #0
 950 0710 1A70     		strb	r2, [r3, #0]
 252:../src/gps/gpsNMEA.c ****                     sentenceCalculatedXOR = 0;
 951              		.loc 1 252 0
 952 0712 40F20003 		movw	r3, #:lower16:sentenceCalculatedXOR
 953 0716 C0F20003 		movt	r3, #:upper16:sentenceCalculatedXOR
 954 071a 4FF00002 		mov	r2, #0
 955 071e 1A70     		strb	r2, [r3, #0]
 253:../src/gps/gpsNMEA.c ****                 }
 254:../src/gps/gpsNMEA.c ****                 break;
 956              		.loc 1 254 0
 957 0720 8BE0     		b	.L78
 958              	.L66:
 255:../src/gps/gpsNMEA.c **** 
 256:../src/gps/gpsNMEA.c ****             case READ:
 257:../src/gps/gpsNMEA.c ****                 if (data == '*')
 959              		.loc 1 257 0
 960 0722 9DF80130 		ldrb	r3, [sp, #1]	@ zero_extendqisi2
 961 0726 2A2B     		cmp	r3, #42
 962 0728 14D1     		bne	.L71
 258:../src/gps/gpsNMEA.c ****                 {
 259:../src/gps/gpsNMEA.c ****                     sentenceBuffer[sentenceLength] = 0; // ensure NUL at end
 963              		.loc 1 259 0
 964 072a 40F20003 		movw	r3, #:lower16:sentenceLength
 965 072e C0F20003 		movt	r3, #:upper16:sentenceLength
 966 0732 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 967 0734 1A46     		mov	r2, r3
 968 0736 40F20003 		movw	r3, #:lower16:sentenceBuffer
 969 073a C0F20003 		movt	r3, #:upper16:sentenceBuffer
 970 073e 4FF00001 		mov	r1, #0
 971 0742 9954     		strb	r1, [r3, r2]
 260:../src/gps/gpsNMEA.c ****                     nmeaProcessDataState           = READ_CS1;
 972              		.loc 1 260 0
 973 0744 40F20003 		movw	r3, #:lower16:nmeaProcessDataState
 974 0748 C0F20003 		movt	r3, #:upper16:nmeaProcessDataState
 975 074c 4FF00202 		mov	r2, #2
 976 0750 1A70     		strb	r2, [r3, #0]
 261:../src/gps/gpsNMEA.c ****                 }
 262:../src/gps/gpsNMEA.c ****                 else if (sentenceLength < SENTENCE_SIZE)
 263:../src/gps/gpsNMEA.c ****                 {
 264:../src/gps/gpsNMEA.c ****                     sentenceBuffer[sentenceLength++] = data;
 265:../src/gps/gpsNMEA.c ****                     sentenceCalculatedXOR ^= data;
 266:../src/gps/gpsNMEA.c ****                 }
 267:../src/gps/gpsNMEA.c ****                 else
 268:../src/gps/gpsNMEA.c ****                 {
 269:../src/gps/gpsNMEA.c ****                     // overrun !!
 270:../src/gps/gpsNMEA.c ****                     nmeaProcessDataState = WAIT_START;
 271:../src/gps/gpsNMEA.c ****                 }
 272:../src/gps/gpsNMEA.c ****                 break;
 977              		.loc 1 272 0
 978 0752 73E0     		b	.L64
 979              	.L71:
 262:../src/gps/gpsNMEA.c ****                 else if (sentenceLength < SENTENCE_SIZE)
 980              		.loc 1 262 0
 981 0754 40F20003 		movw	r3, #:lower16:sentenceLength
 982 0758 C0F20003 		movt	r3, #:upper16:sentenceLength
 983 075c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 984 075e 4F2B     		cmp	r3, #79
 985 0760 23D8     		bhi	.L73
 264:../src/gps/gpsNMEA.c ****                     sentenceBuffer[sentenceLength++] = data;
 986              		.loc 1 264 0
 987 0762 40F20003 		movw	r3, #:lower16:sentenceLength
 988 0766 C0F20003 		movt	r3, #:upper16:sentenceLength
 989 076a 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 990 076c 1146     		mov	r1, r2
 991 076e 40F20003 		movw	r3, #:lower16:sentenceBuffer
 992 0772 C0F20003 		movt	r3, #:upper16:sentenceBuffer
 993 0776 9DF80100 		ldrb	r0, [sp, #1]
 994 077a 5854     		strb	r0, [r3, r1]
 995 077c 02F10103 		add	r3, r2, #1
 996 0780 DAB2     		uxtb	r2, r3
 997 0782 40F20003 		movw	r3, #:lower16:sentenceLength
 998 0786 C0F20003 		movt	r3, #:upper16:sentenceLength
 999 078a 1A70     		strb	r2, [r3, #0]
 265:../src/gps/gpsNMEA.c ****                     sentenceCalculatedXOR ^= data;
 1000              		.loc 1 265 0
 1001 078c 40F20003 		movw	r3, #:lower16:sentenceCalculatedXOR
 1002 0790 C0F20003 		movt	r3, #:upper16:sentenceCalculatedXOR
 1003 0794 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1004 0796 9DF80130 		ldrb	r3, [sp, #1]
 1005 079a 5340     		eors	r3, r3, r2
 1006 079c DAB2     		uxtb	r2, r3
 1007 079e 40F20003 		movw	r3, #:lower16:sentenceCalculatedXOR
 1008 07a2 C0F20003 		movt	r3, #:upper16:sentenceCalculatedXOR
 1009 07a6 1A70     		strb	r2, [r3, #0]
 1010              		.loc 1 272 0
 1011 07a8 48E0     		b	.L64
 1012              	.L73:
 270:../src/gps/gpsNMEA.c ****                     nmeaProcessDataState = WAIT_START;
 1013              		.loc 1 270 0
 1014 07aa 40F20003 		movw	r3, #:lower16:nmeaProcessDataState
 1015 07ae C0F20003 		movt	r3, #:upper16:nmeaProcessDataState
 1016 07b2 4FF00002 		mov	r2, #0
 1017 07b6 1A70     		strb	r2, [r3, #0]
 1018              		.loc 1 272 0
 1019 07b8 40E0     		b	.L64
 1020              	.L67:
 273:../src/gps/gpsNMEA.c **** 
 274:../src/gps/gpsNMEA.c ****             case READ_CS1:
 275:../src/gps/gpsNMEA.c ****                 if (data == nib2hex[sentenceCalculatedXOR>>4])
 1021              		.loc 1 275 0
 1022 07ba 40F20003 		movw	r3, #:lower16:sentenceCalculatedXOR
 1023 07be C0F20003 		movt	r3, #:upper16:sentenceCalculatedXOR
 1024 07c2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1025 07c4 4FEA1313 		lsr	r3, r3, #4
 1026 07c8 DBB2     		uxtb	r3, r3
 1027 07ca 1A46     		mov	r2, r3
 1028 07cc 40F20003 		movw	r3, #:lower16:nib2hex
 1029 07d0 C0F20003 		movt	r3, #:upper16:nib2hex
 1030 07d4 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1031 07d6 9DF80120 		ldrb	r2, [sp, #1]	@ zero_extendqisi2
 1032 07da 9A42     		cmp	r2, r3
 1033 07dc 07D1     		bne	.L74
 276:../src/gps/gpsNMEA.c ****                     nmeaProcessDataState = READ_CS2;
 1034              		.loc 1 276 0
 1035 07de 40F20003 		movw	r3, #:lower16:nmeaProcessDataState
 1036 07e2 C0F20003 		movt	r3, #:upper16:nmeaProcessDataState
 1037 07e6 4FF00302 		mov	r2, #3
 1038 07ea 1A70     		strb	r2, [r3, #0]
 277:../src/gps/gpsNMEA.c ****                 else
 278:../src/gps/gpsNMEA.c ****                     nmeaProcessDataState = WAIT_START;
 279:../src/gps/gpsNMEA.c **** 
 280:../src/gps/gpsNMEA.c ****                 break;
 1039              		.loc 1 280 0
 1040 07ec 26E0     		b	.L64
 1041              	.L74:
 278:../src/gps/gpsNMEA.c ****                     nmeaProcessDataState = WAIT_START;
 1042              		.loc 1 278 0
 1043 07ee 40F20003 		movw	r3, #:lower16:nmeaProcessDataState
 1044 07f2 C0F20003 		movt	r3, #:upper16:nmeaProcessDataState
 1045 07f6 4FF00002 		mov	r2, #0
 1046 07fa 1A70     		strb	r2, [r3, #0]
 1047              		.loc 1 280 0
 1048 07fc 1EE0     		b	.L64
 1049              	.L68:
 281:../src/gps/gpsNMEA.c **** 
 282:../src/gps/gpsNMEA.c ****             case READ_CS2:
 283:../src/gps/gpsNMEA.c ****                 if (data == nib2hex[sentenceCalculatedXOR & 0xf])
 1050              		.loc 1 283 0
 1051 07fe 40F20003 		movw	r3, #:lower16:sentenceCalculatedXOR
 1052 0802 C0F20003 		movt	r3, #:upper16:sentenceCalculatedXOR
 1053 0806 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1054 0808 03F00F02 		and	r2, r3, #15
 1055 080c 40F20003 		movw	r3, #:lower16:nib2hex
 1056 0810 C0F20003 		movt	r3, #:upper16:nib2hex
 1057 0814 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1058 0816 9DF80120 		ldrb	r2, [sp, #1]	@ zero_extendqisi2
 1059 081a 9A42     		cmp	r2, r3
 1060 081c 05D1     		bne	.L76
 284:../src/gps/gpsNMEA.c ****                 {
 285:../src/gps/gpsNMEA.c ****                     parsed = true;
 1061              		.loc 1 285 0
 1062 081e 4FF00103 		mov	r3, #1
 1063 0822 8DF80730 		strb	r3, [sp, #7]
 286:../src/gps/gpsNMEA.c ****                     nmeaProcessSentence();
 1064              		.loc 1 286 0
 1065 0826 FFF7FEFF 		bl	nmeaProcessSentence
 1066              	.L76:
 287:../src/gps/gpsNMEA.c ****                 }
 288:../src/gps/gpsNMEA.c **** 
 289:../src/gps/gpsNMEA.c ****                 nmeaProcessDataState = WAIT_START;
 1067              		.loc 1 289 0
 1068 082a 40F20003 		movw	r3, #:lower16:nmeaProcessDataState
 1069 082e C0F20003 		movt	r3, #:upper16:nmeaProcessDataState
 1070 0832 4FF00002 		mov	r2, #0
 1071 0836 1A70     		strb	r2, [r3, #0]
 290:../src/gps/gpsNMEA.c ****                 break;
 1072              		.loc 1 290 0
 1073 0838 00E0     		b	.L64
 1074              	.L78:
 254:../src/gps/gpsNMEA.c ****                 break;
 1075              		.loc 1 254 0
 1076 083a 00BF     		nop
 1077              	.L64:
 241:../src/gps/gpsNMEA.c ****     for (i = 0; i < numberOfChars; i++)
 1078              		.loc 1 241 0
 1079 083c BDF80430 		ldrh	r3, [sp, #4]	@ movhi
 1080 0840 03F10103 		add	r3, r3, #1
 1081 0844 ADF80430 		strh	r3, [sp, #4]	@ movhi
 1082              	.L63:
 241:../src/gps/gpsNMEA.c ****     for (i = 0; i < numberOfChars; i++)
 1083              		.loc 1 241 0 is_stmt 0 discriminator 1
 1084 0848 BDF80420 		ldrh	r2, [sp, #4]
 1085 084c BDF80230 		ldrh	r3, [sp, #2]
 1086 0850 9A42     		cmp	r2, r3
 1087 0852 FFF433AF 		bcc	.L77
 291:../src/gps/gpsNMEA.c ****         }
 292:../src/gps/gpsNMEA.c **** 
 293:../src/gps/gpsNMEA.c ****     }
 294:../src/gps/gpsNMEA.c **** 
 295:../src/gps/gpsNMEA.c ****     return parsed;
 1088              		.loc 1 295 0 is_stmt 1
 1089 0856 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 296:../src/gps/gpsNMEA.c **** }
 1090              		.loc 1 296 0
 1091 085a 1846     		mov	r0, r3
 1092 085c 03B0     		add	sp, sp, #12
 1093 085e 00BD     		pop	{pc}
 1094              		.cfi_endproc
 1095              	.LFE114:
 1097              	.Letext0:
 1098              		.file 2 "c:\\program files\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 1099              		.file 3 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src/aq32Plus_F3.h"
 1100              		.file 4 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsMediaTe
 1101              		.file 5 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsNMEA.h"
 1102              		.file 6 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsUblox.h
 1103              		.file 7 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\Libraries\\CMSIS\\I
DEFINED SYMBOLS
                            *ABS*:00000000 gpsNMEA.c
                            *COM*:00000001 mtk19ProcessDataState
                            *COM*:00000001 nmeaProcessDataState
                            *COM*:00000001 ubloxProcessDataState
D:\DOCUME~1\e722209\LOCALS~1\Temp\cczQ0oKg.s:23     .rodata:00000000 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\cczQ0oKg.s:26     .rodata:00000000 nib2hex
                            *COM*:00000051 sentenceBuffer
D:\DOCUME~1\e722209\LOCALS~1\Temp\cczQ0oKg.s:48     .bss:00000000 sentenceLength
D:\DOCUME~1\e722209\LOCALS~1\Temp\cczQ0oKg.s:49     .bss:00000000 $d
                            *COM*:00000001 sentenceCalculatedXOR
                            *COM*:00000001 sentenceXOR
D:\DOCUME~1\e722209\LOCALS~1\Temp\cczQ0oKg.s:53     .text:00000000 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\cczQ0oKg.s:58     .text:00000000 nmeaGetScaledInt
D:\DOCUME~1\e722209\LOCALS~1\Temp\cczQ0oKg.s:275    .text:00000170 nmeaGetLatLong
D:\DOCUME~1\e722209\LOCALS~1\Temp\cczQ0oKg.s:347    .text:00000204 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\cczQ0oKg.s:368    .text:00000250 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\cczQ0oKg.s:442    .rodata:00000010 .LC0
D:\DOCUME~1\e722209\LOCALS~1\Temp\cczQ0oKg.s:445    .rodata:00000018 .LC1
D:\DOCUME~1\e722209\LOCALS~1\Temp\cczQ0oKg.s:448    .rodata:00000020 .LC2
D:\DOCUME~1\e722209\LOCALS~1\Temp\cczQ0oKg.s:456    .text:000002c0 nmeaProcessSentence
D:\DOCUME~1\e722209\LOCALS~1\Temp\cczQ0oKg.s:813    .text:000005f0 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\cczQ0oKg.s:824    .text:00000614 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\cczQ0oKg.s:893    .text:0000069c decodeNMEAsentence
D:\DOCUME~1\e722209\LOCALS~1\Temp\cczQ0oKg.s:932    .text:000006dc $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\cczQ0oKg.s:938    .text:000006ec $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
strncmp
sensors
gpsNumCharsAvailable
gpsRead

   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"utilities.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	mtk19ProcessDataState,1,1
  20              		.comm	nmeaProcessDataState,1,1
  21              		.comm	ubloxProcessDataState,1,1
  22              		.align	2
  23              		.global	constrain
  24              		.thumb
  25              		.thumb_func
  27              	constrain:
  28              	.LFB111:
  29              		.file 1 "../src/utilities.c"
   1:../src/utilities.c **** /*
   2:../src/utilities.c ****  December 2012
   3:../src/utilities.c **** 
   4:../src/utilities.c ****   aq32Plus_F3 Rev -
   5:../src/utilities.c **** 
   6:../src/utilities.c ****   Copyright (c) 2012 John Ihlein.  All rights reserved.
   7:../src/utilities.c **** 
   8:../src/utilities.c ****   Open Source STM32 Based Multicopter Controller Software
   9:../src/utilities.c **** 
  10:../src/utilities.c ****   Includes code and/or ideas from:
  11:../src/utilities.c **** 
  12:../src/utilities.c ****   1)AeroQuad
  13:../src/utilities.c ****   2)BaseFlight
  14:../src/utilities.c ****   3)CH Robotics
  15:../src/utilities.c ****   4)MultiWii
  16:../src/utilities.c ****   5)S.O.H. Madgwick
  17:../src/utilities.c ****   6)UAVX
  18:../src/utilities.c ****   7)STM DiscoveryF3 demonstration software
  19:../src/utilities.c **** 
  20:../src/utilities.c ****   Designed to run on the DiscoveryF3 board
  21:../src/utilities.c **** 
  22:../src/utilities.c ****   This program is free software: you can redistribute it and/or modify
  23:../src/utilities.c ****   it under the terms of the GNU General Public License as published by
  24:../src/utilities.c ****   the Free Software Foundation, either version 3 of the License, or
  25:../src/utilities.c ****   (at your option) any later version.
  26:../src/utilities.c **** 
  27:../src/utilities.c ****   This program is distributed in the hope that it will be useful,
  28:../src/utilities.c ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
  29:../src/utilities.c ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  30:../src/utilities.c ****   GNU General Public License for more details.
  31:../src/utilities.c **** 
  32:../src/utilities.c ****   You should have received a copy of the GNU General Public License
  33:../src/utilities.c ****   along with this program. If not, see <http://www.gnu.org/licenses/>.
  34:../src/utilities.c **** */
  35:../src/utilities.c **** 
  36:../src/utilities.c **** ///////////////////////////////////////////////////////////////////////////////
  37:../src/utilities.c **** 
  38:../src/utilities.c **** #include "board.h"
  39:../src/utilities.c **** 
  40:../src/utilities.c **** ///////////////////////////////////////////////////////////////////////////////
  41:../src/utilities.c **** // Constrain
  42:../src/utilities.c **** ///////////////////////////////////////////////////////////////////////////////
  43:../src/utilities.c **** 
  44:../src/utilities.c **** float constrain(float input, float minValue, float maxValue)
  45:../src/utilities.c **** {
  30              		.loc 1 45 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 16
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35 0000 84B0     		sub	sp, sp, #16
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 16
  38 0002 0390     		str	r0, [sp, #12]	@ float
  39 0004 0291     		str	r1, [sp, #8]	@ float
  40 0006 0192     		str	r2, [sp, #4]	@ float
  46:../src/utilities.c ****     if (input < minValue)
  41              		.loc 1 46 0
  42 0008 9DED037A 		flds	s14, [sp, #12]
  43 000c DDED027A 		flds	s15, [sp, #8]
  44 0010 B4EEE77A 		fcmpes	s14, s15
  45 0014 F1EE10FA 		fmstat
  46 0018 54BF     		ite	pl
  47 001a 0023     		movpl	r3, #0
  48 001c 0123     		movmi	r3, #1
  49 001e DBB2     		uxtb	r3, r3
  50 0020 002B     		cmp	r3, #0
  51 0022 01D0     		beq	.L2
  47:../src/utilities.c ****         return minValue;
  52              		.loc 1 47 0
  53 0024 029B     		ldr	r3, [sp, #8]	@ float
  54 0026 10E0     		b	.L3
  55              	.L2:
  48:../src/utilities.c ****     else if (input > maxValue)
  56              		.loc 1 48 0
  57 0028 9DED037A 		flds	s14, [sp, #12]
  58 002c DDED017A 		flds	s15, [sp, #4]
  59 0030 B4EEE77A 		fcmpes	s14, s15
  60 0034 F1EE10FA 		fmstat
  61 0038 D4BF     		ite	le
  62 003a 0023     		movle	r3, #0
  63 003c 0123     		movgt	r3, #1
  64 003e DBB2     		uxtb	r3, r3
  65 0040 002B     		cmp	r3, #0
  66 0042 01D0     		beq	.L4
  49:../src/utilities.c ****         return maxValue;
  67              		.loc 1 49 0
  68 0044 019B     		ldr	r3, [sp, #4]	@ float
  69 0046 00E0     		b	.L3
  70              	.L4:
  50:../src/utilities.c ****     else
  51:../src/utilities.c ****         return input;
  71              		.loc 1 51 0
  72 0048 039B     		ldr	r3, [sp, #12]	@ float
  73              	.L3:
  52:../src/utilities.c **** }
  74              		.loc 1 52 0
  75 004a 1846     		mov	r0, r3	@ float
  76 004c 04B0     		add	sp, sp, #16
  77 004e 7047     		bx	lr
  78              		.cfi_endproc
  79              	.LFE111:
  81              		.align	2
  82              		.global	GPIO_ToggleBits
  83              		.thumb
  84              		.thumb_func
  86              	GPIO_ToggleBits:
  87              	.LFB112:
  53:../src/utilities.c **** 
  54:../src/utilities.c **** ///////////////////////////////////////////////////////////////////////////////
  55:../src/utilities.c **** // GPIO_ToggleBits
  56:../src/utilities.c **** ///////////////////////////////////////////////////////////////////////////////
  57:../src/utilities.c **** 
  58:../src/utilities.c **** void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
  59:../src/utilities.c **** {
  88              		.loc 1 59 0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 8
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		@ link register save eliminated.
  93 0050 82B0     		sub	sp, sp, #8
  94              	.LCFI1:
  95              		.cfi_def_cfa_offset 8
  96 0052 0190     		str	r0, [sp, #4]
  97 0054 0B46     		mov	r3, r1
  98 0056 ADF80230 		strh	r3, [sp, #2]	@ movhi
  60:../src/utilities.c ****   /* Check the parameters */
  61:../src/utilities.c ****   assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  62:../src/utilities.c **** 
  63:../src/utilities.c ****   GPIOx->ODR ^= GPIO_Pin;
  99              		.loc 1 63 0
 100 005a 019B     		ldr	r3, [sp, #4]
 101 005c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 102 005e 9AB2     		uxth	r2, r3
 103 0060 BDF80230 		ldrh	r3, [sp, #2]	@ movhi
 104 0064 5340     		eors	r3, r3, r2
 105 0066 9AB2     		uxth	r2, r3
 106 0068 019B     		ldr	r3, [sp, #4]
 107 006a 9A82     		strh	r2, [r3, #20]	@ movhi
  64:../src/utilities.c **** }
 108              		.loc 1 64 0
 109 006c 02B0     		add	sp, sp, #8
 110 006e 7047     		bx	lr
 111              		.cfi_endproc
 112              	.LFE112:
 114              		.section	.rodata
 115              		.align	2
 116              	.LC0:
 117 0000 30313233 		.ascii	"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\000"
 117      34353637 
 117      38394142 
 117      43444546 
 117      4748494A 
 118              		.text
 119              		.align	2
 120              		.thumb
 121              		.thumb_func
 123              	i2a:
 124              	.LFB113:
  65:../src/utilities.c **** 
  66:../src/utilities.c **** ///////////////////////////////////////////////////////////////////////////////
  67:../src/utilities.c **** // ITOA
  68:../src/utilities.c **** ///////////////////////////////////////////////////////////////////////////////
  69:../src/utilities.c **** 
  70:../src/utilities.c **** /*
  71:../src/utilities.c **** ** The following two functions together make up an itoa()
  72:../src/utilities.c **** ** implementation. Function i2a() is a 'private' function
  73:../src/utilities.c **** ** called by the public itoa() function.
  74:../src/utilities.c **** **
  75:../src/utilities.c **** ** itoa() takes three arguments:
  76:../src/utilities.c **** **        1) the integer to be converted,
  77:../src/utilities.c **** **        2) a pointer to a character conversion buffer,
  78:../src/utilities.c **** **        3) the radix for the conversion
  79:../src/utilities.c **** **           which can range between 2 and 36 inclusive
  80:../src/utilities.c **** **           range errors on the radix default it to base10
  81:../src/utilities.c **** ** Code from http://groups.google.com/group/comp.lang.c/msg/66552ef8b04fe1ab?pli=1
  82:../src/utilities.c **** */
  83:../src/utilities.c **** 
  84:../src/utilities.c **** static char *i2a(unsigned i, char *a, unsigned r)
  85:../src/utilities.c **** {
 125              		.loc 1 85 0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 16
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129 0070 00B5     		push	{lr}
 130              	.LCFI2:
 131              		.cfi_def_cfa_offset 4
 132              		.cfi_offset 14, -4
 133 0072 85B0     		sub	sp, sp, #20
 134              	.LCFI3:
 135              		.cfi_def_cfa_offset 24
 136 0074 0390     		str	r0, [sp, #12]
 137 0076 0291     		str	r1, [sp, #8]
 138 0078 0192     		str	r2, [sp, #4]
  86:../src/utilities.c ****     if (i / r > 0)
 139              		.loc 1 86 0
 140 007a 039A     		ldr	r2, [sp, #12]
 141 007c 019B     		ldr	r3, [sp, #4]
 142 007e B2FBF3F3 		udiv	r3, r2, r3
 143 0082 002B     		cmp	r3, #0
 144 0084 09D0     		beq	.L7
  87:../src/utilities.c ****         a = i2a(i / r, a, r);
 145              		.loc 1 87 0
 146 0086 039A     		ldr	r2, [sp, #12]
 147 0088 019B     		ldr	r3, [sp, #4]
 148 008a B2FBF3F3 		udiv	r3, r2, r3
 149 008e 1846     		mov	r0, r3
 150 0090 0299     		ldr	r1, [sp, #8]
 151 0092 019A     		ldr	r2, [sp, #4]
 152 0094 FFF7ECFF 		bl	i2a
 153 0098 0290     		str	r0, [sp, #8]
 154              	.L7:
  88:../src/utilities.c ****     *a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[i % r];
 155              		.loc 1 88 0
 156 009a 039B     		ldr	r3, [sp, #12]
 157 009c 019A     		ldr	r2, [sp, #4]
 158 009e B3FBF2F2 		udiv	r2, r3, r2
 159 00a2 0199     		ldr	r1, [sp, #4]
 160 00a4 01FB02F2 		mul	r2, r1, r2
 161 00a8 9A1A     		subs	r2, r3, r2
 162 00aa 40F20003 		movw	r3, #:lower16:.LC0
 163 00ae C0F20003 		movt	r3, #:upper16:.LC0
 164 00b2 9A5C     		ldrb	r2, [r3, r2]	@ zero_extendqisi2
 165 00b4 029B     		ldr	r3, [sp, #8]
 166 00b6 1A70     		strb	r2, [r3, #0]
  89:../src/utilities.c ****     return a + 1;
 167              		.loc 1 89 0
 168 00b8 029B     		ldr	r3, [sp, #8]
 169 00ba 03F10103 		add	r3, r3, #1
  90:../src/utilities.c **** }
 170              		.loc 1 90 0
 171 00be 1846     		mov	r0, r3
 172 00c0 05B0     		add	sp, sp, #20
 173 00c2 00BD     		pop	{pc}
 174              		.cfi_endproc
 175              	.LFE113:
 177              		.align	2
 178              		.global	itoa
 179              		.thumb
 180              		.thumb_func
 182              	itoa:
 183              	.LFB114:
  91:../src/utilities.c **** 
  92:../src/utilities.c **** char *itoa(int i, char *a, int r)
  93:../src/utilities.c **** {
 184              		.loc 1 93 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 16
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188 00c4 00B5     		push	{lr}
 189              	.LCFI4:
 190              		.cfi_def_cfa_offset 4
 191              		.cfi_offset 14, -4
 192 00c6 85B0     		sub	sp, sp, #20
 193              	.LCFI5:
 194              		.cfi_def_cfa_offset 24
 195 00c8 0390     		str	r0, [sp, #12]
 196 00ca 0291     		str	r1, [sp, #8]
 197 00cc 0192     		str	r2, [sp, #4]
  94:../src/utilities.c ****     if ((r < 2) || (r > 36))
 198              		.loc 1 94 0
 199 00ce 019B     		ldr	r3, [sp, #4]
 200 00d0 012B     		cmp	r3, #1
 201 00d2 02DD     		ble	.L9
 202              		.loc 1 94 0 is_stmt 0 discriminator 1
 203 00d4 019B     		ldr	r3, [sp, #4]
 204 00d6 242B     		cmp	r3, #36
 205 00d8 02DD     		ble	.L10
 206              	.L9:
  95:../src/utilities.c ****         r = 10;
 207              		.loc 1 95 0 is_stmt 1
 208 00da 4FF00A03 		mov	r3, #10
 209 00de 0193     		str	r3, [sp, #4]
 210              	.L10:
  96:../src/utilities.c ****     if (i < 0) {
 211              		.loc 1 96 0
 212 00e0 039B     		ldr	r3, [sp, #12]
 213 00e2 002B     		cmp	r3, #0
 214 00e4 14DA     		bge	.L11
  97:../src/utilities.c ****         *a = '-';
 215              		.loc 1 97 0
 216 00e6 029B     		ldr	r3, [sp, #8]
 217 00e8 4FF02D02 		mov	r2, #45
 218 00ec 1A70     		strb	r2, [r3, #0]
  98:../src/utilities.c ****         *i2a(-(unsigned) i, a + 1, r) = 0;
 219              		.loc 1 98 0
 220 00ee 039B     		ldr	r3, [sp, #12]
 221 00f0 C3F10001 		rsb	r1, r3, #0
 222 00f4 029B     		ldr	r3, [sp, #8]
 223 00f6 03F10102 		add	r2, r3, #1
 224 00fa 019B     		ldr	r3, [sp, #4]
 225 00fc 0846     		mov	r0, r1
 226 00fe 1146     		mov	r1, r2
 227 0100 1A46     		mov	r2, r3
 228 0102 FFF7B5FF 		bl	i2a
 229 0106 0346     		mov	r3, r0
 230 0108 4FF00002 		mov	r2, #0
 231 010c 1A70     		strb	r2, [r3, #0]
 232 010e 0AE0     		b	.L12
 233              	.L11:
  99:../src/utilities.c ****     } else
 100:../src/utilities.c ****         *i2a(i, a, r) = 0;
 234              		.loc 1 100 0
 235 0110 039A     		ldr	r2, [sp, #12]
 236 0112 019B     		ldr	r3, [sp, #4]
 237 0114 1046     		mov	r0, r2
 238 0116 0299     		ldr	r1, [sp, #8]
 239 0118 1A46     		mov	r2, r3
 240 011a FFF7A9FF 		bl	i2a
 241 011e 0346     		mov	r3, r0
 242 0120 4FF00002 		mov	r2, #0
 243 0124 1A70     		strb	r2, [r3, #0]
 244              	.L12:
 101:../src/utilities.c **** 
 102:../src/utilities.c ****     return a;
 245              		.loc 1 102 0
 246 0126 029B     		ldr	r3, [sp, #8]
 103:../src/utilities.c **** }
 247              		.loc 1 103 0
 248 0128 1846     		mov	r0, r3
 249 012a 05B0     		add	sp, sp, #20
 250 012c 00BD     		pop	{pc}
 251              		.cfi_endproc
 252              	.LFE114:
 254              		.section	.rodata
 255 0025 000000   		.align	2
 256              	.LC1:
 257 0028 2E00     		.ascii	".\000"
 258 002a 0000     		.text
 259 012e 00BF     		.align	2
 260              		.global	ftoa
 261              		.thumb
 262              		.thumb_func
 264              	ftoa:
 265              	.LFB115:
 104:../src/utilities.c **** 
 105:../src/utilities.c **** ///////////////////////////////////////////////////////////////////////////////
 106:../src/utilities.c **** // FTOA
 107:../src/utilities.c **** ///////////////////////////////////////////////////////////////////////////////
 108:../src/utilities.c **** 
 109:../src/utilities.c **** char *ftoa(float x, char *floatString)
 110:../src/utilities.c **** {
 266              		.loc 1 110 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 48
 269              		@ frame_needed = 0, uses_anonymous_args = 0
 270 0130 00B5     		push	{lr}
 271              	.LCFI6:
 272              		.cfi_def_cfa_offset 4
 273              		.cfi_offset 14, -4
 274 0132 8DB0     		sub	sp, sp, #52
 275              	.LCFI7:
 276              		.cfi_def_cfa_offset 56
 277 0134 0190     		str	r0, [sp, #4]	@ float
 278 0136 0091     		str	r1, [sp, #0]
 111:../src/utilities.c ****     int32_t value;
 112:../src/utilities.c ****     char intString1[12];
 113:../src/utilities.c ****     char intString2[12] = { 0, };
 279              		.loc 1 113 0
 280 0138 03AB     		add	r3, sp, #12
 281 013a 4FF00002 		mov	r2, #0
 282 013e 1A60     		str	r2, [r3, #0]
 283 0140 03F10403 		add	r3, r3, #4
 284 0144 4FF00002 		mov	r2, #0
 285 0148 1A60     		str	r2, [r3, #0]
 286 014a 03F10403 		add	r3, r3, #4
 287 014e 4FF00002 		mov	r2, #0
 288 0152 1A60     		str	r2, [r3, #0]
 289 0154 03F10403 		add	r3, r3, #4
 114:../src/utilities.c ****     char *decimalPoint = ".";
 290              		.loc 1 114 0
 291 0158 40F20003 		movw	r3, #:lower16:.LC1
 292 015c C0F20003 		movt	r3, #:upper16:.LC1
 293 0160 0B93     		str	r3, [sp, #44]
 115:../src/utilities.c ****     uint8_t dpLocation;
 116:../src/utilities.c **** 
 117:../src/utilities.c ****     if (x > 0)                  // Rounding for x.xxx display format
 294              		.loc 1 117 0
 295 0162 DDED017A 		flds	s15, [sp, #4]
 296 0166 F5EEC07A 		fcmpezs	s15
 297 016a F1EE10FA 		fmstat
 298 016e D4BF     		ite	le
 299 0170 0023     		movle	r3, #0
 300 0172 0123     		movgt	r3, #1
 301 0174 DBB2     		uxtb	r3, r3
 302 0176 002B     		cmp	r3, #0
 303 0178 08D0     		beq	.L14
 118:../src/utilities.c ****         x += 0.0005f;
 304              		.loc 1 118 0
 305 017a 9DED017A 		flds	s14, [sp, #4]
 306 017e DFED517A 		flds	s15, .L22
 307 0182 77EE277A 		fadds	s15, s14, s15
 308 0186 CDED017A 		fsts	s15, [sp, #4]
 309 018a 07E0     		b	.L15
 310              	.L14:
 119:../src/utilities.c ****     else
 120:../src/utilities.c ****         x -= 0.0005f;
 311              		.loc 1 120 0
 312 018c 9DED017A 		flds	s14, [sp, #4]
 313 0190 DFED4C7A 		flds	s15, .L22
 314 0194 77EE677A 		fsubs	s15, s14, s15
 315 0198 CDED017A 		fsts	s15, [sp, #4]
 316              	.L15:
 121:../src/utilities.c **** 
 122:../src/utilities.c ****     value = (int32_t) (x * 1000.0f);    // Convert float * 1000 to an integer
 317              		.loc 1 122 0
 318 019c 9DED017A 		flds	s14, [sp, #4]
 319 01a0 DFED497A 		flds	s15, .L22+4
 320 01a4 67EE277A 		fmuls	s15, s14, s15
 321 01a8 FDEEE77A 		ftosizs	s15, s15
 322 01ac 17EE903A 		fmrs	r3, s15	@ int
 323 01b0 0A93     		str	r3, [sp, #40]
 123:../src/utilities.c **** 
 124:../src/utilities.c ****     itoa(abs(value), intString1, 10);   // Create string from abs of integer value
 324              		.loc 1 124 0
 325 01b2 0A9B     		ldr	r3, [sp, #40]
 326 01b4 002B     		cmp	r3, #0
 327 01b6 B8BF     		it	lt
 328 01b8 5B42     		rsblt	r3, r3, #0
 329 01ba 1846     		mov	r0, r3
 330 01bc 06AB     		add	r3, sp, #24
 331 01be 1946     		mov	r1, r3
 332 01c0 4FF00A02 		mov	r2, #10
 333 01c4 FFF7FEFF 		bl	itoa
 125:../src/utilities.c **** 
 126:../src/utilities.c ****     if (value >= 0)
 334              		.loc 1 126 0
 335 01c8 0A9B     		ldr	r3, [sp, #40]
 336 01ca 002B     		cmp	r3, #0
 337 01cc 04DB     		blt	.L16
 127:../src/utilities.c ****         intString2[0] = ' ';    // Positive number, add a pad space
 338              		.loc 1 127 0
 339 01ce 4FF02003 		mov	r3, #32
 340 01d2 8DF80C30 		strb	r3, [sp, #12]
 341 01d6 03E0     		b	.L17
 342              	.L16:
 128:../src/utilities.c ****     else
 129:../src/utilities.c ****         intString2[0] = '-';    // Negative number, add a negative sign
 343              		.loc 1 129 0
 344 01d8 4FF02D03 		mov	r3, #45
 345 01dc 8DF80C30 		strb	r3, [sp, #12]
 346              	.L17:
 130:../src/utilities.c **** 
 131:../src/utilities.c ****     if (strlen(intString1) == 1) {
 347              		.loc 1 131 0
 348 01e0 06AB     		add	r3, sp, #24
 349 01e2 1846     		mov	r0, r3
 350 01e4 FFF7FEFF 		bl	strlen
 351 01e8 0346     		mov	r3, r0
 352 01ea 012B     		cmp	r3, #1
 353 01ec 12D1     		bne	.L18
 132:../src/utilities.c ****         intString2[1] = '0';
 354              		.loc 1 132 0
 355 01ee 4FF03003 		mov	r3, #48
 356 01f2 8DF80D30 		strb	r3, [sp, #13]
 133:../src/utilities.c ****         intString2[2] = '0';
 357              		.loc 1 133 0
 358 01f6 4FF03003 		mov	r3, #48
 359 01fa 8DF80E30 		strb	r3, [sp, #14]
 134:../src/utilities.c ****         intString2[3] = '0';
 360              		.loc 1 134 0
 361 01fe 4FF03003 		mov	r3, #48
 362 0202 8DF80F30 		strb	r3, [sp, #15]
 135:../src/utilities.c ****         strcat(intString2, intString1);
 363              		.loc 1 135 0
 364 0206 03AB     		add	r3, sp, #12
 365 0208 1846     		mov	r0, r3
 366 020a 06AB     		add	r3, sp, #24
 367 020c 1946     		mov	r1, r3
 368 020e FFF7FEFF 		bl	strcat
 369 0212 2DE0     		b	.L19
 370              	.L18:
 136:../src/utilities.c ****     } else if (strlen(intString1) == 2) {
 371              		.loc 1 136 0
 372 0214 06AB     		add	r3, sp, #24
 373 0216 1846     		mov	r0, r3
 374 0218 FFF7FEFF 		bl	strlen
 375 021c 0346     		mov	r3, r0
 376 021e 022B     		cmp	r3, #2
 377 0220 0ED1     		bne	.L20
 137:../src/utilities.c ****         intString2[1] = '0';
 378              		.loc 1 137 0
 379 0222 4FF03003 		mov	r3, #48
 380 0226 8DF80D30 		strb	r3, [sp, #13]
 138:../src/utilities.c ****         intString2[2] = '0';
 381              		.loc 1 138 0
 382 022a 4FF03003 		mov	r3, #48
 383 022e 8DF80E30 		strb	r3, [sp, #14]
 139:../src/utilities.c ****         strcat(intString2, intString1);
 384              		.loc 1 139 0
 385 0232 03AB     		add	r3, sp, #12
 386 0234 1846     		mov	r0, r3
 387 0236 06AB     		add	r3, sp, #24
 388 0238 1946     		mov	r1, r3
 389 023a FFF7FEFF 		bl	strcat
 390 023e 17E0     		b	.L19
 391              	.L20:
 140:../src/utilities.c ****     } else if (strlen(intString1) == 3) {
 392              		.loc 1 140 0
 393 0240 06AB     		add	r3, sp, #24
 394 0242 1846     		mov	r0, r3
 395 0244 FFF7FEFF 		bl	strlen
 396 0248 0346     		mov	r3, r0
 397 024a 032B     		cmp	r3, #3
 398 024c 0AD1     		bne	.L21
 141:../src/utilities.c ****         intString2[1] = '0';
 399              		.loc 1 141 0
 400 024e 4FF03003 		mov	r3, #48
 401 0252 8DF80D30 		strb	r3, [sp, #13]
 142:../src/utilities.c ****         strcat(intString2, intString1);
 402              		.loc 1 142 0
 403 0256 03AB     		add	r3, sp, #12
 404 0258 1846     		mov	r0, r3
 405 025a 06AB     		add	r3, sp, #24
 406 025c 1946     		mov	r1, r3
 407 025e FFF7FEFF 		bl	strcat
 408 0262 05E0     		b	.L19
 409              	.L21:
 143:../src/utilities.c ****     } else {
 144:../src/utilities.c ****         strcat(intString2, intString1);
 410              		.loc 1 144 0
 411 0264 03AB     		add	r3, sp, #12
 412 0266 1846     		mov	r0, r3
 413 0268 06AB     		add	r3, sp, #24
 414 026a 1946     		mov	r1, r3
 415 026c FFF7FEFF 		bl	strcat
 416              	.L19:
 145:../src/utilities.c ****     }
 146:../src/utilities.c **** 
 147:../src/utilities.c ****     dpLocation = strlen(intString2) - 3;
 417              		.loc 1 147 0
 418 0270 03AB     		add	r3, sp, #12
 419 0272 1846     		mov	r0, r3
 420 0274 FFF7FEFF 		bl	strlen
 421 0278 0346     		mov	r3, r0
 422 027a DBB2     		uxtb	r3, r3
 423 027c A3F10303 		sub	r3, r3, #3
 424 0280 8DF82730 		strb	r3, [sp, #39]
 148:../src/utilities.c **** 
 149:../src/utilities.c ****     strncpy(floatString, intString2, dpLocation);
 425              		.loc 1 149 0
 426 0284 9DF82730 		ldrb	r3, [sp, #39]	@ zero_extendqisi2
 427 0288 0098     		ldr	r0, [sp, #0]
 428 028a 03AA     		add	r2, sp, #12
 429 028c 1146     		mov	r1, r2
 430 028e 1A46     		mov	r2, r3
 431 0290 FFF7FEFF 		bl	strncpy
 150:../src/utilities.c ****     floatString[dpLocation] = '\0';
 432              		.loc 1 150 0
 433 0294 9DF82730 		ldrb	r3, [sp, #39]	@ zero_extendqisi2
 434 0298 009A     		ldr	r2, [sp, #0]
 435 029a D318     		adds	r3, r2, r3
 436 029c 4FF00002 		mov	r2, #0
 437 02a0 1A70     		strb	r2, [r3, #0]
 151:../src/utilities.c ****     strcat(floatString, decimalPoint);
 438              		.loc 1 151 0
 439 02a2 0098     		ldr	r0, [sp, #0]
 440 02a4 0B99     		ldr	r1, [sp, #44]
 441 02a6 FFF7FEFF 		bl	strcat
 152:../src/utilities.c ****     strcat(floatString, intString2 + dpLocation);
 442              		.loc 1 152 0
 443 02aa 9DF82730 		ldrb	r3, [sp, #39]	@ zero_extendqisi2
 444 02ae 03AA     		add	r2, sp, #12
 445 02b0 D318     		adds	r3, r2, r3
 446 02b2 0098     		ldr	r0, [sp, #0]
 447 02b4 1946     		mov	r1, r3
 448 02b6 FFF7FEFF 		bl	strcat
 153:../src/utilities.c **** 
 154:../src/utilities.c ****     return floatString;
 449              		.loc 1 154 0
 450 02ba 009B     		ldr	r3, [sp, #0]
 155:../src/utilities.c **** }
 451              		.loc 1 155 0
 452 02bc 1846     		mov	r0, r3
 453 02be 0DB0     		add	sp, sp, #52
 454 02c0 00BD     		pop	{pc}
 455              	.L23:
 456 02c2 00BF     		.align	2
 457              	.L22:
 458 02c4 6F12033A 		.word	973279855
 459 02c8 00007A44 		.word	1148846080
 460              		.cfi_endproc
 461              	.LFE115:
 463              		.align	2
 464              		.global	_sbrk
 465              		.thumb
 466              		.thumb_func
 468              	_sbrk:
 469              	.LFB116:
 156:../src/utilities.c **** 
 157:../src/utilities.c **** ///////////////////////////////////////////////////////////////////////////////
 158:../src/utilities.c **** // _sbrk
 159:../src/utilities.c **** ///////////////////////////////////////////////////////////////////////////////
 160:../src/utilities.c **** 
 161:../src/utilities.c **** /*
 162:../src/utilities.c ****  * newlib_stubs.c
 163:../src/utilities.c ****  *
 164:../src/utilities.c ****  *  Created on: 2 Nov 2010
 165:../src/utilities.c ****  *      Author: nanoage.co.uk
 166:../src/utilities.c ****  */
 167:../src/utilities.c **** 
 168:../src/utilities.c **** /*
 169:../src/utilities.c ****  sbrk
 170:../src/utilities.c ****  Increase program data space.
 171:../src/utilities.c ****  Malloc and related functions depend on this
 172:../src/utilities.c ****  */
 173:../src/utilities.c **** 
 174:../src/utilities.c **** caddr_t _sbrk(int incr)
 175:../src/utilities.c **** {
 470              		.loc 1 175 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 16
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 474              		@ link register save eliminated.
 475 02cc 10B4     		push	{r4}
 476              	.LCFI8:
 477              		.cfi_def_cfa_offset 4
 478              		.cfi_offset 4, -4
 479 02ce 85B0     		sub	sp, sp, #20
 480              	.LCFI9:
 481              		.cfi_def_cfa_offset 24
 482 02d0 0190     		str	r0, [sp, #4]
 176:../src/utilities.c ****     extern char _ebss; // Defined by the linker
 177:../src/utilities.c ****     static char *heap_end;
 178:../src/utilities.c ****     char *prev_heap_end;
 179:../src/utilities.c **** 
 180:../src/utilities.c ****     char * stack;
 181:../src/utilities.c **** 
 182:../src/utilities.c ****     if (heap_end == 0)
 483              		.loc 1 182 0
 484 02d2 40F20003 		movw	r3, #:lower16:heap_end.8868
 485 02d6 C0F20003 		movt	r3, #:upper16:heap_end.8868
 486 02da 1B68     		ldr	r3, [r3, #0]
 487 02dc 002B     		cmp	r3, #0
 488 02de 08D1     		bne	.L25
 183:../src/utilities.c ****         heap_end = &_ebss;
 489              		.loc 1 183 0
 490 02e0 40F20003 		movw	r3, #:lower16:heap_end.8868
 491 02e4 C0F20003 		movt	r3, #:upper16:heap_end.8868
 492 02e8 40F20002 		movw	r2, #:lower16:_ebss
 493 02ec C0F20002 		movt	r2, #:upper16:_ebss
 494 02f0 1A60     		str	r2, [r3, #0]
 495              	.L25:
 184:../src/utilities.c **** 
 185:../src/utilities.c ****     prev_heap_end = heap_end;
 496              		.loc 1 185 0
 497 02f2 40F20003 		movw	r3, #:lower16:heap_end.8868
 498 02f6 C0F20003 		movt	r3, #:upper16:heap_end.8868
 499 02fa 1B68     		ldr	r3, [r3, #0]
 500 02fc 0393     		str	r3, [sp, #12]
 501              	.LBB4:
 502              	.LBB5:
 503              		.file 2 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\Libraries\\CMSIS\\I
   1:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /**************************************************************************//**
   2:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  * @file     core_cmFunc.h
   3:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  * @version  V3.00
   5:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  * @date     19. January 2012
   6:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  *
   7:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  * @note
   8:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  *
  10:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  * @par
  11:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  *
  15:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  * @par
  16:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  *
  22:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  ******************************************************************************/
  23:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  24:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  27:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  28:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  29:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  30:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  31:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   @{
  32:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
  33:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  34:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /* ARM armcc specific functions */
  36:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  37:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  38:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #endif
  40:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  41:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  42:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  43:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  44:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Control Register
  45:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  46:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the Control Register.
  47:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  48:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \return               Control Register value
  49:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
  50:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  51:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
  52:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  53:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   return(__regControl);
  54:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
  55:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  56:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  57:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Control Register
  58:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  59:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function writes the given value to the Control Register.
  60:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  61:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \param [in]    control  Control Register value to set
  62:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
  63:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  64:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
  65:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  66:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   __regControl = control;
  67:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
  68:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  69:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  70:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Get IPSR Register
  71:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  72:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the IPSR Register.
  73:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  74:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \return               IPSR Register value
  75:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
  76:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  77:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
  78:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  79:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   return(__regIPSR);
  80:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
  81:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  82:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  83:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Get APSR Register
  84:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  85:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the APSR Register.
  86:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  87:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \return               APSR Register value
  88:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
  89:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
  90:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
  91:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  92:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   return(__regAPSR);
  93:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
  94:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  95:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  96:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Get xPSR Register
  97:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
  98:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the xPSR Register.
  99:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 100:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \return               xPSR Register value
 101:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 102:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 103:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 104:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 105:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   return(__regXPSR);
 106:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 107:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 108:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 109:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 110:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 111:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 112:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 113:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \return               PSP Register value
 114:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 115:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 116:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 117:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 118:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   return(__regProcessStackPointer);
 119:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 120:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 121:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 122:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 123:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 124:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 125:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 126:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 127:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 128:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 129:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 130:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 131:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 132:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 133:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 134:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 135:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 136:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 137:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 138:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 139:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \return               MSP Register value
 140:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 141:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 142:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 143:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 144:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   return(__regMainStackPointer);
 145:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 146:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 147:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 148:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 149:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 150:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 151:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 152:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 153:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 154:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 155:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 156:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 157:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 158:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 159:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 160:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 161:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Priority Mask
 162:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 163:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 164:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 165:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \return               Priority Mask value
 166:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 167:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 168:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 169:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 170:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   return(__regPriMask);
 171:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 172:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 173:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 174:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Priority Mask
 175:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 176:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 177:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 178:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 179:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 180:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 181:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 182:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 183:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   __regPriMask = (priMask);
 184:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 185:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  
 186:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 187:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 188:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 189:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Enable FIQ
 190:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 191:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 192:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     Can only be executed in Privileged modes.
 193:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 194:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 195:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 196:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 197:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Disable FIQ
 198:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 199:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 200:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     Can only be executed in Privileged modes.
 201:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 202:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 203:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 204:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 205:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Base Priority
 206:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 207:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 208:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 209:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \return               Base Priority register value
 210:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 211:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 212:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 213:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 214:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   return(__regBasePri);
 215:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 216:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 217:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 218:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Base Priority
 219:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 220:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 221:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 222:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 223:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 224:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 225:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 226:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 227:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 228:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 229:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  
 230:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 231:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Fault Mask
 232:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 233:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 234:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 235:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \return               Fault Mask register value
 236:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 237:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 238:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 239:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 240:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   return(__regFaultMask);
 241:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 242:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 243:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 244:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Fault Mask
 245:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 246:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 247:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 248:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 249:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 250:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 251:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 252:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 253:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 254:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 255:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 256:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 257:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 258:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 259:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 260:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 261:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Get FPSCR
 262:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 263:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 264:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 265:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \return               Floating Point Status/Control register value
 266:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 267:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 268:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 269:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 270:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 271:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   return(__regfpscr);
 272:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #else
 273:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****    return(0);
 274:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #endif
 275:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 276:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 277:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 278:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Set FPSCR
 279:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 280:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 281:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 282:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 283:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 284:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 285:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 286:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 287:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 288:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   __regfpscr = (fpscr);
 289:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #endif
 290:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 291:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 292:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 293:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 294:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 295:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /* IAR iccarm specific functions */
 297:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 298:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #include <cmsis_iar.h>
 299:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 300:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 301:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /* TI CCS specific functions */
 303:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 304:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #include <cmsis_ccs.h>
 305:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 306:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 307:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /* GNU gcc specific functions */
 309:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 310:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 311:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 312:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 313:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   Can only be executed in Privileged modes.
 314:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 315:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 316:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 317:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("cpsie i");
 318:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 319:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 320:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 321:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 322:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 323:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 324:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   Can only be executed in Privileged modes.
 325:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 326:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 327:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 328:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("cpsid i");
 329:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 330:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 331:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 332:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Control Register
 333:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 334:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the Control Register.
 335:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 336:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \return               Control Register value
 337:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 338:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
 339:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 340:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   uint32_t result;
 341:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 342:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 343:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   return(result);
 344:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 345:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 346:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 347:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Control Register
 348:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 349:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function writes the given value to the Control Register.
 350:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 351:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \param [in]    control  Control Register value to set
 352:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 353:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 354:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 355:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 356:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 357:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 358:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 359:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Get IPSR Register
 360:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 361:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the IPSR Register.
 362:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 363:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \return               IPSR Register value
 364:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 365:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 366:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 367:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   uint32_t result;
 368:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 369:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 370:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   return(result);
 371:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 372:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 373:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 374:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Get APSR Register
 375:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 376:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the APSR Register.
 377:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 378:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \return               APSR Register value
 379:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 380:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 381:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 382:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   uint32_t result;
 383:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 384:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 385:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   return(result);
 386:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 387:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 388:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 389:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Get xPSR Register
 390:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 391:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the xPSR Register.
 392:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 393:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \return               xPSR Register value
 394:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 395:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 396:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 397:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   uint32_t result;
 398:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 399:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 400:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   return(result);
 401:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 402:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 403:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 404:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 405:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 406:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 407:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 408:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \return               PSP Register value
 409:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 410:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 411:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 412:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t result;
 413:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 414:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 415:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   return(result);
 416:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 417:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  
 418:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 419:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 420:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 421:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 422:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 423:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 424:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 425:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 426:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 427:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
 428:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** }
 429:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 430:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 431:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 432:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 433:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 434:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 435:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****     \return               MSP Register value
 436:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****  */
 437:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 438:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** {
 439:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   register uint32_t result;
 440:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h **** 
 441:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 504              		.loc 2 441 0
 505              	@ 441 "D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include/core
 506 02fe EFF30884 		MRS r4, msp
 507              	
 508              	@ 0 "" 2
 442:D:\Documents and Settings\e722209\Desktop\workspace\aq32Plus_F3\Libraries\CMSIS\Include\core_cmFunc.h ****   return(result);
 509              		.loc 2 442 0
 510              		.thumb
 511 0302 2346     		mov	r3, r4
 512              	.LBE5:
 513              	.LBE4:
 186:../src/utilities.c **** 
 187:../src/utilities.c ****     stack = (char*) __get_MSP();
 514              		.loc 1 187 0
 515 0304 0293     		str	r3, [sp, #8]
 188:../src/utilities.c ****     if (heap_end + incr >  stack)
 516              		.loc 1 188 0
 517 0306 40F20003 		movw	r3, #:lower16:heap_end.8868
 518 030a C0F20003 		movt	r3, #:upper16:heap_end.8868
 519 030e 1A68     		ldr	r2, [r3, #0]
 520 0310 019B     		ldr	r3, [sp, #4]
 521 0312 D218     		adds	r2, r2, r3
 522 0314 029B     		ldr	r3, [sp, #8]
 523 0316 9A42     		cmp	r2, r3
 524 0318 02D9     		bls	.L26
 189:../src/utilities.c ****     {
 190:../src/utilities.c ****         // HJI errno = ENOMEM;
 191:../src/utilities.c ****         return  (caddr_t) -1;
 525              		.loc 1 191 0
 526 031a 4FF0FF33 		mov	r3, #-1
 527 031e 0CE0     		b	.L27
 528              	.L26:
 192:../src/utilities.c ****     }
 193:../src/utilities.c **** 
 194:../src/utilities.c ****     heap_end += incr;
 529              		.loc 1 194 0
 530 0320 40F20003 		movw	r3, #:lower16:heap_end.8868
 531 0324 C0F20003 		movt	r3, #:upper16:heap_end.8868
 532 0328 1A68     		ldr	r2, [r3, #0]
 533 032a 019B     		ldr	r3, [sp, #4]
 534 032c D218     		adds	r2, r2, r3
 535 032e 40F20003 		movw	r3, #:lower16:heap_end.8868
 536 0332 C0F20003 		movt	r3, #:upper16:heap_end.8868
 537 0336 1A60     		str	r2, [r3, #0]
 195:../src/utilities.c ****     return (caddr_t) prev_heap_end;
 538              		.loc 1 195 0
 539 0338 039B     		ldr	r3, [sp, #12]
 540              	.L27:
 196:../src/utilities.c **** }
 541              		.loc 1 196 0
 542 033a 1846     		mov	r0, r3
 543 033c 05B0     		add	sp, sp, #20
 544 033e 10BC     		pop	{r4}
 545 0340 7047     		bx	lr
 546              		.cfi_endproc
 547              	.LFE116:
 549              		.global	__aeabi_f2d
 550              		.global	__aeabi_d2f
 551 0342 00BF     		.align	2
 552              		.global	sphereFit
 553              		.thumb
 554              		.thumb_func
 556              	sphereFit:
 557              	.LFB117:
 197:../src/utilities.c **** 
 198:../src/utilities.c **** ///////////////////////////////////////////////////////////////////////////////
 199:../src/utilities.c **** //  Least Squares Fit a Sphere to 3D Data
 200:../src/utilities.c **** ////////////////////////////////////////////////////////////////////////////////
 201:../src/utilities.c **** 
 202:../src/utilities.c **** // Least squares fit a sphere to 3D data, ImaginaryZ's blog,
 203:../src/utilities.c **** // Miscellaneous banter, Useful mathematics, game programming
 204:../src/utilities.c **** // tools and the occasional kink or two.
 205:../src/utilities.c **** // 22 April 2011.
 206:../src/utilities.c **** // http: imaginaryz.blogspot.com.au/2011/04/least-squares-fit-sphere-to-3d-data.html
 207:../src/utilities.c **** 
 208:../src/utilities.c **** // Substantially rewritten for UAVXArm by Prof. G.K. Egan (C) 2012.
 209:../src/utilities.c **** 
 210:../src/utilities.c **** // Incorporated into aq32Plus by J. Ihlein (C) 2012.
 211:../src/utilities.c **** 
 212:../src/utilities.c **** uint16_t sphereFit(float    d[][3],
 213:../src/utilities.c ****                    uint16_t N,
 214:../src/utilities.c ****                    uint16_t MaxIterations,
 215:../src/utilities.c ****                    float    Err,
 216:../src/utilities.c **** 		           uint16_t Population[][3],
 217:../src/utilities.c **** 		           float    SphereOrigin[],
 218:../src/utilities.c **** 		           float    * SphereRadius)
 219:../src/utilities.c **** {
 558              		.loc 1 219 0
 559              		.cfi_startproc
 560              		@ args = 12, pretend = 0, frame = 288
 561              		@ frame_needed = 0, uses_anonymous_args = 0
 562 0344 F0B5     		push	{r4, r5, r6, r7, lr}
 563              	.LCFI10:
 564              		.cfi_def_cfa_offset 20
 565              		.cfi_offset 14, -4
 566              		.cfi_offset 7, -8
 567              		.cfi_offset 6, -12
 568              		.cfi_offset 5, -16
 569              		.cfi_offset 4, -20
 570 0346 C9B0     		sub	sp, sp, #292
 571              	.LCFI11:
 572              		.cfi_def_cfa_offset 312
 573 0348 03AC     		add	r4, sp, #12
 574 034a 2060     		str	r0, [r4, #0]
 575 034c 01A8     		add	r0, sp, #4
 576 034e 0360     		str	r3, [r0, #0]	@ float
 577 0350 0DF10A03 		add	r3, sp, #10
 578 0354 1980     		strh	r1, [r3, #0]	@ movhi
 579 0356 02AB     		add	r3, sp, #8
 580 0358 1A80     		strh	r2, [r3, #0]	@ movhi
 220:../src/utilities.c **** 	uint8_t  c;
 221:../src/utilities.c **** 	uint16_t i, Iterations;
 222:../src/utilities.c **** 	float    s[3], s2[3], s3[3], sum[3], sum2[3], sum3[3];
 223:../src/utilities.c **** 	float    x2sum[3], y2sum[3], z2sum[3];
 224:../src/utilities.c **** 	float    xy_sum, xz_sum, yz_sum;
 225:../src/utilities.c **** 	float    XY, XZ, YZ, X2Z, Y2X, Y2Z, Z2X, X2Y, Z2Y;
 226:../src/utilities.c **** 	float    QS, QB, Q0, Q1, Q2;
 227:../src/utilities.c **** 	float    R2, C[3], C2[3], Delta[3], Denom[3];
 228:../src/utilities.c **** 	float    F0, F1, F2, F3, F4;
 229:../src/utilities.c **** 	float    di2[3];
 230:../src/utilities.c **** 	float    SizeR;
 231:../src/utilities.c **** 
 232:../src/utilities.c ****     for (c = XAXIS; c <= ZAXIS; c++)
 581              		.loc 1 232 0
 582 035a 4FF00003 		mov	r3, #0
 583 035e 8DF81F31 		strb	r3, [sp, #287]
 584 0362 84E0     		b	.L29
 585              	.L30:
 233:../src/utilities.c **** 	{
 234:../src/utilities.c **** 		s[c] = s2[c] = s3[c] = sum[c] = x2sum[c] = y2sum[c] = z2sum[c] = 0.0f;
 586              		.loc 1 234 0 discriminator 2
 587 0364 9DF81F61 		ldrb	r6, [sp, #287]	@ zero_extendqisi2
 588 0368 9DF81F21 		ldrb	r2, [sp, #287]	@ zero_extendqisi2
 589 036c 9DF81F11 		ldrb	r1, [sp, #287]	@ zero_extendqisi2
 590 0370 9DF81F01 		ldrb	r0, [sp, #287]	@ zero_extendqisi2
 591 0374 9DF81F41 		ldrb	r4, [sp, #287]	@ zero_extendqisi2
 592 0378 9DF81F51 		ldrb	r5, [sp, #287]	@ zero_extendqisi2
 593 037c 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 594 0380 4FEA8307 		lsl	r7, r3, #2
 595 0384 0DF5907C 		add	ip, sp, #288
 596 0388 6744     		add	r7, ip, r7
 597 038a A7F1D407 		sub	r7, r7, #212
 598 038e DFF86CEC 		ldr	lr, .L50	@ float
 599 0392 C7F800E0 		str	lr, [r7, #0]	@ float
 600 0396 4FEA8303 		lsl	r3, r3, #2
 601 039a 0DF5907C 		add	ip, sp, #288
 602 039e 6344     		add	r3, ip, r3
 603 03a0 A3F1D403 		sub	r3, r3, #212
 604 03a4 1F68     		ldr	r7, [r3, #0]	@ float
 605 03a6 4FEA8503 		lsl	r3, r5, #2
 606 03aa 0DF5907C 		add	ip, sp, #288
 607 03ae 6344     		add	r3, ip, r3
 608 03b0 43F8C87C 		str	r7, [r3, #-200]	@ float
 609 03b4 4FEA8503 		lsl	r3, r5, #2
 610 03b8 0DF5907C 		add	ip, sp, #288
 611 03bc 6344     		add	r3, ip, r3
 612 03be 53F8C85C 		ldr	r5, [r3, #-200]	@ float
 613 03c2 4FEA8403 		lsl	r3, r4, #2
 614 03c6 0DF5907C 		add	ip, sp, #288
 615 03ca 6344     		add	r3, ip, r3
 616 03cc A3F1BC03 		sub	r3, r3, #188
 617 03d0 1D60     		str	r5, [r3, #0]	@ float
 618 03d2 4FEA8403 		lsl	r3, r4, #2
 619 03d6 0DF5907C 		add	ip, sp, #288
 620 03da 6344     		add	r3, ip, r3
 621 03dc A3F1BC03 		sub	r3, r3, #188
 622 03e0 1C68     		ldr	r4, [r3, #0]	@ float
 623 03e2 4FEA8003 		lsl	r3, r0, #2
 624 03e6 0DF5907C 		add	ip, sp, #288
 625 03ea 6344     		add	r3, ip, r3
 626 03ec 43F8984C 		str	r4, [r3, #-152]	@ float
 627 03f0 4FEA8003 		lsl	r3, r0, #2
 628 03f4 48A8     		add	r0, sp, #288
 629 03f6 C318     		adds	r3, r0, r3
 630 03f8 53F8980C 		ldr	r0, [r3, #-152]	@ float
 631 03fc 4FEA8103 		lsl	r3, r1, #2
 632 0400 0DF5907C 		add	ip, sp, #288
 633 0404 6344     		add	r3, ip, r3
 634 0406 A3F18C03 		sub	r3, r3, #140
 635 040a 1860     		str	r0, [r3, #0]	@ float
 636 040c 4FEA8103 		lsl	r3, r1, #2
 637 0410 48A8     		add	r0, sp, #288
 638 0412 C318     		adds	r3, r0, r3
 639 0414 A3F18C03 		sub	r3, r3, #140
 640 0418 1968     		ldr	r1, [r3, #0]	@ float
 641 041a 4FEA8203 		lsl	r3, r2, #2
 642 041e 0DF5907C 		add	ip, sp, #288
 643 0422 6344     		add	r3, ip, r3
 644 0424 43F8801C 		str	r1, [r3, #-128]	@ float
 645 0428 4FEA8203 		lsl	r3, r2, #2
 646 042c 48A8     		add	r0, sp, #288
 647 042e C318     		adds	r3, r0, r3
 648 0430 53F8802C 		ldr	r2, [r3, #-128]	@ float
 649 0434 4FEA8603 		lsl	r3, r6, #2
 650 0438 48A9     		add	r1, sp, #288
 651 043a CB18     		adds	r3, r1, r3
 652 043c A3F17403 		sub	r3, r3, #116
 653 0440 1A60     		str	r2, [r3, #0]	@ float
 235:../src/utilities.c **** 
 236:../src/utilities.c **** 		Population[0][c] = Population[1][c] = 0;
 654              		.loc 1 236 0 discriminator 2
 655 0442 9DF81F11 		ldrb	r1, [sp, #287]	@ zero_extendqisi2
 656 0446 4E9B     		ldr	r3, [sp, #312]
 657 0448 03F10603 		add	r3, r3, #6
 658 044c 9DF81F21 		ldrb	r2, [sp, #287]	@ zero_extendqisi2
 659 0450 4FF00000 		mov	r0, #0
 660 0454 23F81200 		strh	r0, [r3, r2, lsl #1]	@ movhi
 661 0458 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 662 045c 4E9B     		ldr	r3, [sp, #312]
 663 045e 23F81120 		strh	r2, [r3, r1, lsl #1]	@ movhi
 232:../src/utilities.c ****     for (c = XAXIS; c <= ZAXIS; c++)
 664              		.loc 1 232 0 discriminator 2
 665 0462 9DF81F31 		ldrb	r3, [sp, #287]
 666 0466 03F10103 		add	r3, r3, #1
 667 046a 8DF81F31 		strb	r3, [sp, #287]
 668              	.L29:
 232:../src/utilities.c ****     for (c = XAXIS; c <= ZAXIS; c++)
 669              		.loc 1 232 0 is_stmt 0 discriminator 1
 670 046e 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 671 0472 022B     		cmp	r3, #2
 672 0474 7FF676AF 		bls	.L30
 237:../src/utilities.c **** 	}
 238:../src/utilities.c **** 
 239:../src/utilities.c **** 	xy_sum = xz_sum = yz_sum = 0.0f;
 673              		.loc 1 239 0 is_stmt 1
 674 0478 DFF8803B 		ldr	r3, .L50	@ float
 675 047c 4393     		str	r3, [sp, #268]	@ float
 676 047e 439B     		ldr	r3, [sp, #268]	@ float
 677 0480 4493     		str	r3, [sp, #272]	@ float
 678 0482 449B     		ldr	r3, [sp, #272]	@ float
 679 0484 4593     		str	r3, [sp, #276]	@ float
 240:../src/utilities.c **** 
 241:../src/utilities.c **** 	for (i = 0; i < N; i++)
 680              		.loc 1 241 0
 681 0486 4FF00003 		mov	r3, #0
 682 048a ADF81C31 		strh	r3, [sp, #284]	@ movhi
 683 048e DBE1     		b	.L31
 684              	.L36:
 242:../src/utilities.c **** 	{
 243:../src/utilities.c **** 		for (c = XAXIS; c <= ZAXIS; c++)
 685              		.loc 1 243 0
 686 0490 4FF00003 		mov	r3, #0
 687 0494 8DF81F31 		strb	r3, [sp, #287]
 688 0498 D5E0     		b	.L32
 689              	.L35:
 244:../src/utilities.c **** 		{
 245:../src/utilities.c **** 			di2[c] = SQR(d[i][c]);
 690              		.loc 1 245 0
 691 049a 9DF81F11 		ldrb	r1, [sp, #287]	@ zero_extendqisi2
 692 049e BDF81C21 		ldrh	r2, [sp, #284]
 693 04a2 1346     		mov	r3, r2
 694 04a4 4FEA4303 		lsl	r3, r3, #1
 695 04a8 9B18     		adds	r3, r3, r2
 696 04aa 4FEA8303 		lsl	r3, r3, #2
 697 04ae 03AA     		add	r2, sp, #12
 698 04b0 1268     		ldr	r2, [r2, #0]
 699 04b2 D218     		adds	r2, r2, r3
 700 04b4 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 701 04b8 4FEA8303 		lsl	r3, r3, #2
 702 04bc D318     		adds	r3, r2, r3
 703 04be 93ED007A 		flds	s14, [r3, #0]
 704 04c2 BDF81C21 		ldrh	r2, [sp, #284]
 705 04c6 1346     		mov	r3, r2
 706 04c8 4FEA4303 		lsl	r3, r3, #1
 707 04cc 9B18     		adds	r3, r3, r2
 708 04ce 4FEA8303 		lsl	r3, r3, #2
 709 04d2 03AA     		add	r2, sp, #12
 710 04d4 1268     		ldr	r2, [r2, #0]
 711 04d6 D218     		adds	r2, r2, r3
 712 04d8 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 713 04dc 4FEA8303 		lsl	r3, r3, #2
 714 04e0 D318     		adds	r3, r2, r3
 715 04e2 D3ED007A 		flds	s15, [r3, #0]
 716 04e6 67EE277A 		fmuls	s15, s14, s15
 717 04ea 4FEA8103 		lsl	r3, r1, #2
 718 04ee 04AA     		add	r2, sp, #16
 719 04f0 D318     		adds	r3, r2, r3
 720 04f2 C3ED007A 		fsts	s15, [r3, #0]
 246:../src/utilities.c **** 
 247:../src/utilities.c **** 			s[c]  += d[i][c];
 721              		.loc 1 247 0
 722 04f6 9DF81F11 		ldrb	r1, [sp, #287]	@ zero_extendqisi2
 723 04fa 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 724 04fe 4FEA8303 		lsl	r3, r3, #2
 725 0502 48AA     		add	r2, sp, #288
 726 0504 D318     		adds	r3, r2, r3
 727 0506 A3F17403 		sub	r3, r3, #116
 728 050a 93ED007A 		flds	s14, [r3, #0]
 729 050e BDF81C21 		ldrh	r2, [sp, #284]
 730 0512 1346     		mov	r3, r2
 731 0514 4FEA4303 		lsl	r3, r3, #1
 732 0518 9B18     		adds	r3, r3, r2
 733 051a 4FEA8303 		lsl	r3, r3, #2
 734 051e 03AA     		add	r2, sp, #12
 735 0520 1268     		ldr	r2, [r2, #0]
 736 0522 D218     		adds	r2, r2, r3
 737 0524 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 738 0528 4FEA8303 		lsl	r3, r3, #2
 739 052c D318     		adds	r3, r2, r3
 740 052e D3ED007A 		flds	s15, [r3, #0]
 741 0532 77EE277A 		fadds	s15, s14, s15
 742 0536 4FEA8103 		lsl	r3, r1, #2
 743 053a 0DF5907C 		add	ip, sp, #288
 744 053e 6344     		add	r3, ip, r3
 745 0540 A3F17403 		sub	r3, r3, #116
 746 0544 C3ED007A 		fsts	s15, [r3, #0]
 248:../src/utilities.c **** 			s2[c] += di2[c];
 747              		.loc 1 248 0
 748 0548 9DF81F21 		ldrb	r2, [sp, #287]	@ zero_extendqisi2
 749 054c 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 750 0550 4FEA8303 		lsl	r3, r3, #2
 751 0554 48A8     		add	r0, sp, #288
 752 0556 C318     		adds	r3, r0, r3
 753 0558 13ED207A 		flds	s14, [r3, #-128]
 754 055c 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 755 0560 4FEA8303 		lsl	r3, r3, #2
 756 0564 04A9     		add	r1, sp, #16
 757 0566 CB18     		adds	r3, r1, r3
 758 0568 D3ED007A 		flds	s15, [r3, #0]
 759 056c 77EE277A 		fadds	s15, s14, s15
 760 0570 4FEA8203 		lsl	r3, r2, #2
 761 0574 48A9     		add	r1, sp, #288
 762 0576 CB18     		adds	r3, r1, r3
 763 0578 43ED207A 		fsts	s15, [r3, #-128]
 249:../src/utilities.c **** 			s3[c] += di2[c] * d[i][c];
 764              		.loc 1 249 0
 765 057c 9DF81F11 		ldrb	r1, [sp, #287]	@ zero_extendqisi2
 766 0580 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 767 0584 4FEA8303 		lsl	r3, r3, #2
 768 0588 48AA     		add	r2, sp, #288
 769 058a D318     		adds	r3, r2, r3
 770 058c A3F18C03 		sub	r3, r3, #140
 771 0590 93ED007A 		flds	s14, [r3, #0]
 772 0594 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 773 0598 4FEA8303 		lsl	r3, r3, #2
 774 059c 04AA     		add	r2, sp, #16
 775 059e D318     		adds	r3, r2, r3
 776 05a0 D3ED006A 		flds	s13, [r3, #0]
 777 05a4 BDF81C21 		ldrh	r2, [sp, #284]
 778 05a8 1346     		mov	r3, r2
 779 05aa 4FEA4303 		lsl	r3, r3, #1
 780 05ae 9B18     		adds	r3, r3, r2
 781 05b0 4FEA8303 		lsl	r3, r3, #2
 782 05b4 03AA     		add	r2, sp, #12
 783 05b6 1268     		ldr	r2, [r2, #0]
 784 05b8 D218     		adds	r2, r2, r3
 785 05ba 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 786 05be 4FEA8303 		lsl	r3, r3, #2
 787 05c2 D318     		adds	r3, r2, r3
 788 05c4 D3ED007A 		flds	s15, [r3, #0]
 789 05c8 66EEA77A 		fmuls	s15, s13, s15
 790 05cc 77EE277A 		fadds	s15, s14, s15
 791 05d0 4FEA8103 		lsl	r3, r1, #2
 792 05d4 0DF5907C 		add	ip, sp, #288
 793 05d8 6344     		add	r3, ip, r3
 794 05da A3F18C03 		sub	r3, r3, #140
 795 05de C3ED007A 		fsts	s15, [r3, #0]
 250:../src/utilities.c **** 
 251:../src/utilities.c **** 			Population[d[i][c] > 0.0f][c]++;
 796              		.loc 1 251 0
 797 05e2 BDF81C21 		ldrh	r2, [sp, #284]
 798 05e6 1346     		mov	r3, r2
 799 05e8 4FEA4303 		lsl	r3, r3, #1
 800 05ec 9B18     		adds	r3, r3, r2
 801 05ee 4FEA8303 		lsl	r3, r3, #2
 802 05f2 03AA     		add	r2, sp, #12
 803 05f4 1268     		ldr	r2, [r2, #0]
 804 05f6 D218     		adds	r2, r2, r3
 805 05f8 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 806 05fc 4FEA8303 		lsl	r3, r3, #2
 807 0600 D318     		adds	r3, r2, r3
 808 0602 D3ED007A 		flds	s15, [r3, #0]
 809 0606 F5EEC07A 		fcmpezs	s15
 810 060a F1EE10FA 		fmstat
 811 060e D4BF     		ite	le
 812 0610 0023     		movle	r3, #0
 813 0612 0123     		movgt	r3, #1
 814 0614 DBB2     		uxtb	r3, r3
 815 0616 002B     		cmp	r3, #0
 816 0618 02D0     		beq	.L33
 817              		.loc 1 251 0 is_stmt 0 discriminator 1
 818 061a 4FF00603 		mov	r3, #6
 819 061e 01E0     		b	.L34
 820              	.L33:
 821              		.loc 1 251 0 discriminator 2
 822 0620 4FF00003 		mov	r3, #0
 823              	.L34:
 824              		.loc 1 251 0 discriminator 3
 825 0624 4E9A     		ldr	r2, [sp, #312]
 826 0626 D318     		adds	r3, r2, r3
 827 0628 9DF81F21 		ldrb	r2, [sp, #287]	@ zero_extendqisi2
 828 062c 33F81210 		ldrh	r1, [r3, r2, lsl #1]
 829 0630 01F10101 		add	r1, r1, #1
 830 0634 89B2     		uxth	r1, r1
 831 0636 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 243:../src/utilities.c **** 		for (c = XAXIS; c <= ZAXIS; c++)
 832              		.loc 1 243 0 is_stmt 1 discriminator 3
 833 063a 9DF81F31 		ldrb	r3, [sp, #287]
 834 063e 03F10103 		add	r3, r3, #1
 835 0642 8DF81F31 		strb	r3, [sp, #287]
 836              	.L32:
 243:../src/utilities.c **** 		for (c = XAXIS; c <= ZAXIS; c++)
 837              		.loc 1 243 0 is_stmt 0 discriminator 1
 838 0646 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 839 064a 022B     		cmp	r3, #2
 840 064c 7FF625AF 		bls	.L35
 252:../src/utilities.c **** 		}
 253:../src/utilities.c **** 
 254:../src/utilities.c **** 		xy_sum += d[i][XAXIS] * d[i][YAXIS];
 841              		.loc 1 254 0 is_stmt 1
 842 0650 BDF81C21 		ldrh	r2, [sp, #284]
 843 0654 1346     		mov	r3, r2
 844 0656 4FEA4303 		lsl	r3, r3, #1
 845 065a 9B18     		adds	r3, r3, r2
 846 065c 4FEA8303 		lsl	r3, r3, #2
 847 0660 03AA     		add	r2, sp, #12
 848 0662 1268     		ldr	r2, [r2, #0]
 849 0664 D318     		adds	r3, r2, r3
 850 0666 93ED007A 		flds	s14, [r3, #0]
 851 066a BDF81C21 		ldrh	r2, [sp, #284]
 852 066e 1346     		mov	r3, r2
 853 0670 4FEA4303 		lsl	r3, r3, #1
 854 0674 9B18     		adds	r3, r3, r2
 855 0676 4FEA8303 		lsl	r3, r3, #2
 856 067a 03AA     		add	r2, sp, #12
 857 067c 1268     		ldr	r2, [r2, #0]
 858 067e D318     		adds	r3, r2, r3
 859 0680 D3ED017A 		flds	s15, [r3, #4]
 860 0684 67EE277A 		fmuls	s15, s14, s15
 861 0688 9DED457A 		flds	s14, [sp, #276]
 862 068c 77EE277A 		fadds	s15, s14, s15
 863 0690 CDED457A 		fsts	s15, [sp, #276]
 255:../src/utilities.c **** 		xz_sum += d[i][XAXIS] * d[i][ZAXIS];
 864              		.loc 1 255 0
 865 0694 BDF81C21 		ldrh	r2, [sp, #284]
 866 0698 1346     		mov	r3, r2
 867 069a 4FEA4303 		lsl	r3, r3, #1
 868 069e 9B18     		adds	r3, r3, r2
 869 06a0 4FEA8303 		lsl	r3, r3, #2
 870 06a4 03AA     		add	r2, sp, #12
 871 06a6 1268     		ldr	r2, [r2, #0]
 872 06a8 D318     		adds	r3, r2, r3
 873 06aa 93ED007A 		flds	s14, [r3, #0]
 874 06ae BDF81C21 		ldrh	r2, [sp, #284]
 875 06b2 1346     		mov	r3, r2
 876 06b4 4FEA4303 		lsl	r3, r3, #1
 877 06b8 9B18     		adds	r3, r3, r2
 878 06ba 4FEA8303 		lsl	r3, r3, #2
 879 06be 03AA     		add	r2, sp, #12
 880 06c0 1268     		ldr	r2, [r2, #0]
 881 06c2 D318     		adds	r3, r2, r3
 882 06c4 D3ED027A 		flds	s15, [r3, #8]
 883 06c8 67EE277A 		fmuls	s15, s14, s15
 884 06cc 9DED447A 		flds	s14, [sp, #272]
 885 06d0 77EE277A 		fadds	s15, s14, s15
 886 06d4 CDED447A 		fsts	s15, [sp, #272]
 256:../src/utilities.c **** 		yz_sum += d[i][YAXIS] * d[i][ZAXIS];
 887              		.loc 1 256 0
 888 06d8 BDF81C21 		ldrh	r2, [sp, #284]
 889 06dc 1346     		mov	r3, r2
 890 06de 4FEA4303 		lsl	r3, r3, #1
 891 06e2 9B18     		adds	r3, r3, r2
 892 06e4 4FEA8303 		lsl	r3, r3, #2
 893 06e8 03AA     		add	r2, sp, #12
 894 06ea 1268     		ldr	r2, [r2, #0]
 895 06ec D318     		adds	r3, r2, r3
 896 06ee 93ED017A 		flds	s14, [r3, #4]
 897 06f2 BDF81C21 		ldrh	r2, [sp, #284]
 898 06f6 1346     		mov	r3, r2
 899 06f8 4FEA4303 		lsl	r3, r3, #1
 900 06fc 9B18     		adds	r3, r3, r2
 901 06fe 4FEA8303 		lsl	r3, r3, #2
 902 0702 03AA     		add	r2, sp, #12
 903 0704 1268     		ldr	r2, [r2, #0]
 904 0706 D318     		adds	r3, r2, r3
 905 0708 D3ED027A 		flds	s15, [r3, #8]
 906 070c 67EE277A 		fmuls	s15, s14, s15
 907 0710 9DED437A 		flds	s14, [sp, #268]
 908 0714 77EE277A 		fadds	s15, s14, s15
 909 0718 CDED437A 		fsts	s15, [sp, #268]
 257:../src/utilities.c **** 
 258:../src/utilities.c **** 		x2sum[YAXIS] += di2[XAXIS] * d[i][YAXIS];
 910              		.loc 1 258 0
 911 071c 9DED1A7A 		flds	s14, [sp, #104]
 912 0720 04AB     		add	r3, sp, #16
 913 0722 D3ED006A 		flds	s13, [r3, #0]
 914 0726 BDF81C21 		ldrh	r2, [sp, #284]
 915 072a 1346     		mov	r3, r2
 916 072c 4FEA4303 		lsl	r3, r3, #1
 917 0730 9B18     		adds	r3, r3, r2
 918 0732 4FEA8303 		lsl	r3, r3, #2
 919 0736 03AA     		add	r2, sp, #12
 920 0738 1268     		ldr	r2, [r2, #0]
 921 073a D318     		adds	r3, r2, r3
 922 073c D3ED017A 		flds	s15, [r3, #4]
 923 0740 66EEA77A 		fmuls	s15, s13, s15
 924 0744 77EE277A 		fadds	s15, s14, s15
 925 0748 CDED1A7A 		fsts	s15, [sp, #104]
 259:../src/utilities.c **** 		x2sum[ZAXIS] += di2[XAXIS] * d[i][ZAXIS];
 926              		.loc 1 259 0
 927 074c 9DED1B7A 		flds	s14, [sp, #108]
 928 0750 04AB     		add	r3, sp, #16
 929 0752 D3ED006A 		flds	s13, [r3, #0]
 930 0756 BDF81C21 		ldrh	r2, [sp, #284]
 931 075a 1346     		mov	r3, r2
 932 075c 4FEA4303 		lsl	r3, r3, #1
 933 0760 9B18     		adds	r3, r3, r2
 934 0762 4FEA8303 		lsl	r3, r3, #2
 935 0766 03AA     		add	r2, sp, #12
 936 0768 1268     		ldr	r2, [r2, #0]
 937 076a D318     		adds	r3, r2, r3
 938 076c D3ED027A 		flds	s15, [r3, #8]
 939 0770 66EEA77A 		fmuls	s15, s13, s15
 940 0774 77EE277A 		fadds	s15, s14, s15
 941 0778 CDED1B7A 		fsts	s15, [sp, #108]
 260:../src/utilities.c **** 
 261:../src/utilities.c **** 		y2sum[XAXIS] += di2[YAXIS] * d[i][XAXIS];
 942              		.loc 1 261 0
 943 077c 9DED167A 		flds	s14, [sp, #88]
 944 0780 04AB     		add	r3, sp, #16
 945 0782 D3ED016A 		flds	s13, [r3, #4]
 946 0786 BDF81C21 		ldrh	r2, [sp, #284]
 947 078a 1346     		mov	r3, r2
 948 078c 4FEA4303 		lsl	r3, r3, #1
 949 0790 9B18     		adds	r3, r3, r2
 950 0792 4FEA8303 		lsl	r3, r3, #2
 951 0796 03AA     		add	r2, sp, #12
 952 0798 1268     		ldr	r2, [r2, #0]
 953 079a D318     		adds	r3, r2, r3
 954 079c D3ED007A 		flds	s15, [r3, #0]
 955 07a0 66EEA77A 		fmuls	s15, s13, s15
 956 07a4 77EE277A 		fadds	s15, s14, s15
 957 07a8 CDED167A 		fsts	s15, [sp, #88]
 262:../src/utilities.c **** 		y2sum[ZAXIS] += di2[YAXIS] * d[i][ZAXIS];
 958              		.loc 1 262 0
 959 07ac 9DED187A 		flds	s14, [sp, #96]
 960 07b0 04AB     		add	r3, sp, #16
 961 07b2 D3ED016A 		flds	s13, [r3, #4]
 962 07b6 BDF81C21 		ldrh	r2, [sp, #284]
 963 07ba 1346     		mov	r3, r2
 964 07bc 4FEA4303 		lsl	r3, r3, #1
 965 07c0 9B18     		adds	r3, r3, r2
 966 07c2 4FEA8303 		lsl	r3, r3, #2
 967 07c6 03AA     		add	r2, sp, #12
 968 07c8 1268     		ldr	r2, [r2, #0]
 969 07ca D318     		adds	r3, r2, r3
 970 07cc D3ED027A 		flds	s15, [r3, #8]
 971 07d0 66EEA77A 		fmuls	s15, s13, s15
 972 07d4 77EE277A 		fadds	s15, s14, s15
 973 07d8 CDED187A 		fsts	s15, [sp, #96]
 263:../src/utilities.c **** 
 264:../src/utilities.c **** 		z2sum[XAXIS] += di2[ZAXIS] * d[i][XAXIS];
 974              		.loc 1 264 0
 975 07dc 9DED137A 		flds	s14, [sp, #76]
 976 07e0 04AB     		add	r3, sp, #16
 977 07e2 D3ED026A 		flds	s13, [r3, #8]
 978 07e6 BDF81C21 		ldrh	r2, [sp, #284]
 979 07ea 1346     		mov	r3, r2
 980 07ec 4FEA4303 		lsl	r3, r3, #1
 981 07f0 9B18     		adds	r3, r3, r2
 982 07f2 4FEA8303 		lsl	r3, r3, #2
 983 07f6 03AA     		add	r2, sp, #12
 984 07f8 1268     		ldr	r2, [r2, #0]
 985 07fa D318     		adds	r3, r2, r3
 986 07fc D3ED007A 		flds	s15, [r3, #0]
 987 0800 66EEA77A 		fmuls	s15, s13, s15
 988 0804 77EE277A 		fadds	s15, s14, s15
 989 0808 CDED137A 		fsts	s15, [sp, #76]
 265:../src/utilities.c **** 		z2sum[YAXIS] += di2[ZAXIS] * d[i][YAXIS];
 990              		.loc 1 265 0
 991 080c 9DED147A 		flds	s14, [sp, #80]
 992 0810 04AB     		add	r3, sp, #16
 993 0812 D3ED026A 		flds	s13, [r3, #8]
 994 0816 BDF81C21 		ldrh	r2, [sp, #284]
 995 081a 1346     		mov	r3, r2
 996 081c 4FEA4303 		lsl	r3, r3, #1
 997 0820 9B18     		adds	r3, r3, r2
 998 0822 4FEA8303 		lsl	r3, r3, #2
 999 0826 03AA     		add	r2, sp, #12
 1000 0828 1268     		ldr	r2, [r2, #0]
 1001 082a D318     		adds	r3, r2, r3
 1002 082c D3ED017A 		flds	s15, [r3, #4]
 1003 0830 66EEA77A 		fmuls	s15, s13, s15
 1004 0834 77EE277A 		fadds	s15, s14, s15
 1005 0838 CDED147A 		fsts	s15, [sp, #80]
 241:../src/utilities.c **** 	for (i = 0; i < N; i++)
 1006              		.loc 1 241 0
 1007 083c BDF81C31 		ldrh	r3, [sp, #284]	@ movhi
 1008 0840 03F10103 		add	r3, r3, #1
 1009 0844 ADF81C31 		strh	r3, [sp, #284]	@ movhi
 1010              	.L31:
 241:../src/utilities.c **** 	for (i = 0; i < N; i++)
 1011              		.loc 1 241 0 is_stmt 0 discriminator 1
 1012 0848 BDF81C21 		ldrh	r2, [sp, #284]
 1013 084c 0DF10A03 		add	r3, sp, #10
 1014 0850 1B88     		ldrh	r3, [r3, #0]
 1015 0852 9A42     		cmp	r2, r3
 1016 0854 FFF41CAE 		bcc	.L36
 266:../src/utilities.c **** 	}
 267:../src/utilities.c **** 
 268:../src/utilities.c **** 	SizeR = 1.0f / (float) N;
 1017              		.loc 1 268 0 is_stmt 1
 1018 0858 0DF10A03 		add	r3, sp, #10
 1019 085c 1B88     		ldrh	r3, [r3, #0]
 1020 085e 07EE103A 		fmsr	s14, r3	@ int
 1021 0862 F8EE477A 		fuitos	s15, s14
 1022 0866 B7EE007A 		fconsts	s14, #112
 1023 086a C7EE277A 		fdivs	s15, s14, s15
 1024 086e CDED3F7A 		fsts	s15, [sp, #252]
 269:../src/utilities.c **** 	for (c = XAXIS; c <= ZAXIS; c++)
 1025              		.loc 1 269 0
 1026 0872 4FF00003 		mov	r3, #0
 1027 0876 8DF81F31 		strb	r3, [sp, #287]
 1028 087a 48E0     		b	.L37
 1029              	.L38:
 270:../src/utilities.c **** 	{
 271:../src/utilities.c **** 		sum[c]  = s[c]  * SizeR; //sum( X[n]   )
 1030              		.loc 1 271 0 discriminator 2
 1031 087c 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1032 0880 9DF81F21 		ldrb	r2, [sp, #287]	@ zero_extendqisi2
 1033 0884 4FEA8202 		lsl	r2, r2, #2
 1034 0888 48A8     		add	r0, sp, #288
 1035 088a 8218     		adds	r2, r0, r2
 1036 088c A2F17402 		sub	r2, r2, #116
 1037 0890 92ED007A 		flds	s14, [r2, #0]
 1038 0894 DDED3F7A 		flds	s15, [sp, #252]
 1039 0898 67EE277A 		fmuls	s15, s14, s15
 1040 089c 4FEA8303 		lsl	r3, r3, #2
 1041 08a0 48A9     		add	r1, sp, #288
 1042 08a2 CB18     		adds	r3, r1, r3
 1043 08a4 43ED267A 		fsts	s15, [r3, #-152]
 272:../src/utilities.c **** 		sum2[c] = s2[c] * SizeR; //sum( X[n]^2 )
 1044              		.loc 1 272 0 discriminator 2
 1045 08a8 9DF81F21 		ldrb	r2, [sp, #287]	@ zero_extendqisi2
 1046 08ac 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1047 08b0 4FEA8303 		lsl	r3, r3, #2
 1048 08b4 0DF5907C 		add	ip, sp, #288
 1049 08b8 6344     		add	r3, ip, r3
 1050 08ba 13ED207A 		flds	s14, [r3, #-128]
 1051 08be DDED3F7A 		flds	s15, [sp, #252]
 1052 08c2 67EE277A 		fmuls	s15, s14, s15
 1053 08c6 4FEA8203 		lsl	r3, r2, #2
 1054 08ca 48A8     		add	r0, sp, #288
 1055 08cc C318     		adds	r3, r0, r3
 1056 08ce A3F1A403 		sub	r3, r3, #164
 1057 08d2 C3ED007A 		fsts	s15, [r3, #0]
 273:../src/utilities.c **** 		sum3[c] = s3[c] * SizeR; //sum( X[n]^3 )
 1058              		.loc 1 273 0 discriminator 2
 1059 08d6 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1060 08da 9DF81F21 		ldrb	r2, [sp, #287]	@ zero_extendqisi2
 1061 08de 4FEA8202 		lsl	r2, r2, #2
 1062 08e2 48A9     		add	r1, sp, #288
 1063 08e4 8A18     		adds	r2, r1, r2
 1064 08e6 A2F18C02 		sub	r2, r2, #140
 1065 08ea 92ED007A 		flds	s14, [r2, #0]
 1066 08ee DDED3F7A 		flds	s15, [sp, #252]
 1067 08f2 67EE277A 		fmuls	s15, s14, s15
 1068 08f6 4FEA8303 		lsl	r3, r3, #2
 1069 08fa 48AA     		add	r2, sp, #288
 1070 08fc D318     		adds	r3, r2, r3
 1071 08fe 43ED2C7A 		fsts	s15, [r3, #-176]
 269:../src/utilities.c **** 	for (c = XAXIS; c <= ZAXIS; c++)
 1072              		.loc 1 269 0 discriminator 2
 1073 0902 9DF81F31 		ldrb	r3, [sp, #287]
 1074 0906 03F10103 		add	r3, r3, #1
 1075 090a 8DF81F31 		strb	r3, [sp, #287]
 1076              	.L37:
 269:../src/utilities.c **** 	for (c = XAXIS; c <= ZAXIS; c++)
 1077              		.loc 1 269 0 is_stmt 0 discriminator 1
 1078 090e 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1079 0912 022B     		cmp	r3, #2
 1080 0914 B2D9     		bls	.L38
 274:../src/utilities.c **** 	}
 275:../src/utilities.c **** 
 276:../src/utilities.c **** 	XY = xy_sum * SizeR;         //sum( X[n] * Y[n] )
 1081              		.loc 1 276 0 is_stmt 1
 1082 0916 9DED457A 		flds	s14, [sp, #276]
 1083 091a DDED3F7A 		flds	s15, [sp, #252]
 1084 091e 67EE277A 		fmuls	s15, s14, s15
 1085 0922 CDED3E7A 		fsts	s15, [sp, #248]
 277:../src/utilities.c **** 	XZ = xz_sum * SizeR;         //sum( X[n] * Z[n] )
 1086              		.loc 1 277 0
 1087 0926 9DED447A 		flds	s14, [sp, #272]
 1088 092a DDED3F7A 		flds	s15, [sp, #252]
 1089 092e 67EE277A 		fmuls	s15, s14, s15
 1090 0932 CDED3D7A 		fsts	s15, [sp, #244]
 278:../src/utilities.c **** 	YZ = yz_sum * SizeR;         //sum( Y[n] * Z[n] )
 1091              		.loc 1 278 0
 1092 0936 9DED437A 		flds	s14, [sp, #268]
 1093 093a DDED3F7A 		flds	s15, [sp, #252]
 1094 093e 67EE277A 		fmuls	s15, s14, s15
 1095 0942 CDED3C7A 		fsts	s15, [sp, #240]
 279:../src/utilities.c **** 
 280:../src/utilities.c **** 	X2Y = x2sum[YAXIS] * SizeR;  //sum( X[n]^2 * Y[n] )
 1096              		.loc 1 280 0
 1097 0946 9DED1A7A 		flds	s14, [sp, #104]
 1098 094a DDED3F7A 		flds	s15, [sp, #252]
 1099 094e 67EE277A 		fmuls	s15, s14, s15
 1100 0952 CDED3B7A 		fsts	s15, [sp, #236]
 281:../src/utilities.c **** 	X2Z = x2sum[ZAXIS] * SizeR;  //sum( X[n]^2 * Z[n] )
 1101              		.loc 1 281 0
 1102 0956 9DED1B7A 		flds	s14, [sp, #108]
 1103 095a DDED3F7A 		flds	s15, [sp, #252]
 1104 095e 67EE277A 		fmuls	s15, s14, s15
 1105 0962 CDED3A7A 		fsts	s15, [sp, #232]
 282:../src/utilities.c **** 	Y2X = y2sum[XAXIS] * SizeR;  //sum( Y[n]^2 * X[n] )
 1106              		.loc 1 282 0
 1107 0966 9DED167A 		flds	s14, [sp, #88]
 1108 096a DDED3F7A 		flds	s15, [sp, #252]
 1109 096e 67EE277A 		fmuls	s15, s14, s15
 1110 0972 CDED397A 		fsts	s15, [sp, #228]
 283:../src/utilities.c **** 	Y2Z = y2sum[ZAXIS] * SizeR;  //sum( Y[n]^2 * Z[n] )
 1111              		.loc 1 283 0
 1112 0976 9DED187A 		flds	s14, [sp, #96]
 1113 097a DDED3F7A 		flds	s15, [sp, #252]
 1114 097e 67EE277A 		fmuls	s15, s14, s15
 1115 0982 CDED387A 		fsts	s15, [sp, #224]
 284:../src/utilities.c **** 	Z2X = z2sum[XAXIS] * SizeR;  //sum( Z[n]^2 * X[n] )
 1116              		.loc 1 284 0
 1117 0986 9DED137A 		flds	s14, [sp, #76]
 1118 098a DDED3F7A 		flds	s15, [sp, #252]
 1119 098e 67EE277A 		fmuls	s15, s14, s15
 1120 0992 CDED377A 		fsts	s15, [sp, #220]
 285:../src/utilities.c **** 	Z2Y = z2sum[YAXIS] * SizeR;  //sum( Z[n]^2 * Y[n] )
 1121              		.loc 1 285 0
 1122 0996 9DED147A 		flds	s14, [sp, #80]
 1123 099a DDED3F7A 		flds	s15, [sp, #252]
 1124 099e 67EE277A 		fmuls	s15, s14, s15
 1125 09a2 CDED367A 		fsts	s15, [sp, #216]
 286:../src/utilities.c **** 
 287:../src/utilities.c **** 	//Reduction of multiplications
 288:../src/utilities.c **** 	F0 = sum2[XAXIS] + sum2[YAXIS] + sum2[ZAXIS];
 1126              		.loc 1 288 0
 1127 09a6 9DED1F7A 		flds	s14, [sp, #124]
 1128 09aa DDED207A 		flds	s15, [sp, #128]
 1129 09ae 37EE277A 		fadds	s14, s14, s15
 1130 09b2 DDED217A 		flds	s15, [sp, #132]
 1131 09b6 77EE277A 		fadds	s15, s14, s15
 1132 09ba CDED357A 		fsts	s15, [sp, #212]
 289:../src/utilities.c **** 	F1 = 0.5f * F0;
 1133              		.loc 1 289 0
 1134 09be 9DED357A 		flds	s14, [sp, #212]
 1135 09c2 F6EE007A 		fconsts	s15, #96
 1136 09c6 67EE277A 		fmuls	s15, s14, s15
 1137 09ca CDED347A 		fsts	s15, [sp, #208]
 290:../src/utilities.c **** 	F2 = -8.0f * (sum3[XAXIS] + Y2X + Z2X);
 1138              		.loc 1 290 0
 1139 09ce 9DED1C7A 		flds	s14, [sp, #112]
 1140 09d2 DDED397A 		flds	s15, [sp, #228]
 1141 09d6 37EE277A 		fadds	s14, s14, s15
 1142 09da DDED377A 		flds	s15, [sp, #220]
 1143 09de 37EE277A 		fadds	s14, s14, s15
 1144 09e2 FAEE007A 		fconsts	s15, #160
 1145 09e6 67EE277A 		fmuls	s15, s14, s15
 1146 09ea CDED337A 		fsts	s15, [sp, #204]
 291:../src/utilities.c **** 	F3 = -8.0f * (X2Y + sum3[YAXIS] + Z2Y);
 1147              		.loc 1 291 0
 1148 09ee 9DED1D7A 		flds	s14, [sp, #116]
 1149 09f2 DDED3B7A 		flds	s15, [sp, #236]
 1150 09f6 37EE277A 		fadds	s14, s14, s15
 1151 09fa DDED367A 		flds	s15, [sp, #216]
 1152 09fe 37EE277A 		fadds	s14, s14, s15
 1153 0a02 FAEE007A 		fconsts	s15, #160
 1154 0a06 67EE277A 		fmuls	s15, s14, s15
 1155 0a0a CDED327A 		fsts	s15, [sp, #200]
 292:../src/utilities.c **** 	F4 = -8.0f * (X2Z + Y2Z + sum3[ZAXIS]);
 1156              		.loc 1 292 0
 1157 0a0e 9DED3A7A 		flds	s14, [sp, #232]
 1158 0a12 DDED387A 		flds	s15, [sp, #224]
 1159 0a16 37EE277A 		fadds	s14, s14, s15
 1160 0a1a DDED1E7A 		flds	s15, [sp, #120]
 1161 0a1e 37EE277A 		fadds	s14, s14, s15
 1162 0a22 FAEE007A 		fconsts	s15, #160
 1163 0a26 67EE277A 		fmuls	s15, s14, s15
 1164 0a2a CDED317A 		fsts	s15, [sp, #196]
 293:../src/utilities.c **** 
 294:../src/utilities.c **** 	for (c = XAXIS; c <= ZAXIS; c++)
 1165              		.loc 1 294 0
 1166 0a2e 4FF00003 		mov	r3, #0
 1167 0a32 8DF81F31 		strb	r3, [sp, #287]
 1168 0a36 33E0     		b	.L39
 1169              	.L40:
 295:../src/utilities.c **** 	{
 296:../src/utilities.c **** 		C[c]  = sum[c];
 1170              		.loc 1 296 0 discriminator 2
 1171 0a38 9DF81F11 		ldrb	r1, [sp, #287]	@ zero_extendqisi2
 1172 0a3c 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1173 0a40 4FEA8303 		lsl	r3, r3, #2
 1174 0a44 0DF5907C 		add	ip, sp, #288
 1175 0a48 6344     		add	r3, ip, r3
 1176 0a4a 53F8982C 		ldr	r2, [r3, #-152]	@ float
 1177 0a4e 4FEA8103 		lsl	r3, r1, #2
 1178 0a52 48A8     		add	r0, sp, #288
 1179 0a54 C318     		adds	r3, r0, r3
 1180 0a56 43F8E02C 		str	r2, [r3, #-224]	@ float
 297:../src/utilities.c **** 		C2[c] = SQR(C[c]);
 1181              		.loc 1 297 0 discriminator 2
 1182 0a5a 9DF81F21 		ldrb	r2, [sp, #287]	@ zero_extendqisi2
 1183 0a5e 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1184 0a62 4FEA8303 		lsl	r3, r3, #2
 1185 0a66 48A9     		add	r1, sp, #288
 1186 0a68 CB18     		adds	r3, r1, r3
 1187 0a6a 13ED387A 		flds	s14, [r3, #-224]
 1188 0a6e 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1189 0a72 4FEA8303 		lsl	r3, r3, #2
 1190 0a76 0DF5907C 		add	ip, sp, #288
 1191 0a7a 6344     		add	r3, ip, r3
 1192 0a7c 53ED387A 		flds	s15, [r3, #-224]
 1193 0a80 67EE277A 		fmuls	s15, s14, s15
 1194 0a84 4FEA8203 		lsl	r3, r2, #2
 1195 0a88 48A8     		add	r0, sp, #288
 1196 0a8a C318     		adds	r3, r0, r3
 1197 0a8c A3F1EC03 		sub	r3, r3, #236
 1198 0a90 C3ED007A 		fsts	s15, [r3, #0]
 294:../src/utilities.c **** 	for (c = XAXIS; c <= ZAXIS; c++)
 1199              		.loc 1 294 0 discriminator 2
 1200 0a94 9DF81F31 		ldrb	r3, [sp, #287]
 1201 0a98 03F10103 		add	r3, r3, #1
 1202 0a9c 8DF81F31 		strb	r3, [sp, #287]
 1203              	.L39:
 294:../src/utilities.c **** 	for (c = XAXIS; c <= ZAXIS; c++)
 1204              		.loc 1 294 0 is_stmt 0 discriminator 1
 1205 0aa0 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1206 0aa4 022B     		cmp	r3, #2
 1207 0aa6 C7D9     		bls	.L40
 298:../src/utilities.c **** 	}
 299:../src/utilities.c **** 
 300:../src/utilities.c **** 	QS = C2[XAXIS] + C2[YAXIS] + C2[ZAXIS];
 1208              		.loc 1 300 0 is_stmt 1
 1209 0aa8 9DED0D7A 		flds	s14, [sp, #52]
 1210 0aac DDED0E7A 		flds	s15, [sp, #56]
 1211 0ab0 37EE277A 		fadds	s14, s14, s15
 1212 0ab4 DDED0F7A 		flds	s15, [sp, #60]
 1213 0ab8 77EE277A 		fadds	s15, s14, s15
 1214 0abc CDED307A 		fsts	s15, [sp, #192]
 301:../src/utilities.c **** 	QB = -2.0f * (SQR(C[XAXIS]) + SQR(C[YAXIS]) + SQR(C[ZAXIS]));
 1215              		.loc 1 301 0
 1216 0ac0 9DED107A 		flds	s14, [sp, #64]
 1217 0ac4 DDED107A 		flds	s15, [sp, #64]
 1218 0ac8 27EE277A 		fmuls	s14, s14, s15
 1219 0acc DDED116A 		flds	s13, [sp, #68]
 1220 0ad0 DDED117A 		flds	s15, [sp, #68]
 1221 0ad4 66EEA77A 		fmuls	s15, s13, s15
 1222 0ad8 37EE277A 		fadds	s14, s14, s15
 1223 0adc DDED126A 		flds	s13, [sp, #72]
 1224 0ae0 DDED127A 		flds	s15, [sp, #72]
 1225 0ae4 66EEA77A 		fmuls	s15, s13, s15
 1226 0ae8 37EE277A 		fadds	s14, s14, s15
 1227 0aec F8EE007A 		fconsts	s15, #128
 1228 0af0 67EE277A 		fmuls	s15, s14, s15
 1229 0af4 CDED2F7A 		fsts	s15, [sp, #188]
 302:../src/utilities.c **** 	R2 = F0 + QB + QS;
 1230              		.loc 1 302 0
 1231 0af8 9DED357A 		flds	s14, [sp, #212]
 1232 0afc DDED2F7A 		flds	s15, [sp, #188]
 1233 0b00 37EE277A 		fadds	s14, s14, s15
 1234 0b04 DDED307A 		flds	s15, [sp, #192]
 1235 0b08 77EE277A 		fadds	s15, s14, s15
 1236 0b0c CDED2E7A 		fsts	s15, [sp, #184]
 303:../src/utilities.c **** 	Q0 = 0.5f * (QS - R2);
 1237              		.loc 1 303 0
 1238 0b10 9DED307A 		flds	s14, [sp, #192]
 1239 0b14 DDED2E7A 		flds	s15, [sp, #184]
 1240 0b18 37EE677A 		fsubs	s14, s14, s15
 1241 0b1c F6EE007A 		fconsts	s15, #96
 1242 0b20 67EE277A 		fmuls	s15, s14, s15
 1243 0b24 CDED427A 		fsts	s15, [sp, #264]
 304:../src/utilities.c **** 	Q1 = F1 + Q0;
 1244              		.loc 1 304 0
 1245 0b28 9DED347A 		flds	s14, [sp, #208]
 1246 0b2c DDED427A 		flds	s15, [sp, #264]
 1247 0b30 77EE277A 		fadds	s15, s14, s15
 1248 0b34 CDED417A 		fsts	s15, [sp, #260]
 305:../src/utilities.c **** 	Q2 = 8.0f * (QS - R2 + QB + F0);
 1249              		.loc 1 305 0
 1250 0b38 9DED307A 		flds	s14, [sp, #192]
 1251 0b3c DDED2E7A 		flds	s15, [sp, #184]
 1252 0b40 37EE677A 		fsubs	s14, s14, s15
 1253 0b44 DDED2F7A 		flds	s15, [sp, #188]
 1254 0b48 37EE277A 		fadds	s14, s14, s15
 1255 0b4c DDED357A 		flds	s15, [sp, #212]
 1256 0b50 37EE277A 		fadds	s14, s14, s15
 1257 0b54 F2EE007A 		fconsts	s15, #32
 1258 0b58 67EE277A 		fmuls	s15, s14, s15
 1259 0b5c CDED407A 		fsts	s15, [sp, #256]
 306:../src/utilities.c **** 
 307:../src/utilities.c **** 	Iterations = 0;
 1260              		.loc 1 307 0
 1261 0b60 4FF00003 		mov	r3, #0
 1262 0b64 ADF81A31 		strh	r3, [sp, #282]	@ movhi
 1263              	.L46:
 308:../src/utilities.c **** 
 309:../src/utilities.c **** 	do
 310:../src/utilities.c **** 	{
 311:../src/utilities.c **** 	    for (c = XAXIS; c <= ZAXIS; c++)
 1264              		.loc 1 311 0
 1265 0b68 4FF00003 		mov	r3, #0
 1266 0b6c 8DF81F31 		strb	r3, [sp, #287]
 1267 0b70 57E0     		b	.L41
 1268              	.L43:
 312:../src/utilities.c **** 		{
 313:../src/utilities.c **** 			Denom[c] = Q2 + 16.0f * (C2[c] - 2.0f * C[c] * sum[c] + sum2[c]);
 1269              		.loc 1 313 0
 1270 0b72 9DF81F21 		ldrb	r2, [sp, #287]	@ zero_extendqisi2
 1271 0b76 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1272 0b7a 4FEA8303 		lsl	r3, r3, #2
 1273 0b7e 48A9     		add	r1, sp, #288
 1274 0b80 CB18     		adds	r3, r1, r3
 1275 0b82 A3F1EC03 		sub	r3, r3, #236
 1276 0b86 93ED007A 		flds	s14, [r3, #0]
 1277 0b8a 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1278 0b8e 4FEA8303 		lsl	r3, r3, #2
 1279 0b92 0DF5907C 		add	ip, sp, #288
 1280 0b96 6344     		add	r3, ip, r3
 1281 0b98 53ED387A 		flds	s15, [r3, #-224]
 1282 0b9c 77EEA76A 		fadds	s13, s15, s15
 1283 0ba0 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1284 0ba4 4FEA8303 		lsl	r3, r3, #2
 1285 0ba8 48A8     		add	r0, sp, #288
 1286 0baa C318     		adds	r3, r0, r3
 1287 0bac 53ED267A 		flds	s15, [r3, #-152]
 1288 0bb0 66EEA77A 		fmuls	s15, s13, s15
 1289 0bb4 37EE677A 		fsubs	s14, s14, s15
 1290 0bb8 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1291 0bbc 4FEA8303 		lsl	r3, r3, #2
 1292 0bc0 48A9     		add	r1, sp, #288
 1293 0bc2 CB18     		adds	r3, r1, r3
 1294 0bc4 A3F1A403 		sub	r3, r3, #164
 1295 0bc8 D3ED007A 		flds	s15, [r3, #0]
 1296 0bcc 37EE277A 		fadds	s14, s14, s15
 1297 0bd0 F3EE007A 		fconsts	s15, #48
 1298 0bd4 67EE277A 		fmuls	s15, s14, s15
 1299 0bd8 9DED407A 		flds	s14, [sp, #256]
 1300 0bdc 77EE877A 		fadds	s15, s15, s14
 1301 0be0 4FEA8203 		lsl	r3, r2, #2
 1302 0be4 07AA     		add	r2, sp, #28
 1303 0be6 D318     		adds	r3, r2, r3
 1304 0be8 C3ED007A 		fsts	s15, [r3, #0]
 314:../src/utilities.c **** 			if (Denom[c] == 0.0f)
 1305              		.loc 1 314 0
 1306 0bec 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1307 0bf0 4FEA8303 		lsl	r3, r3, #2
 1308 0bf4 07AA     		add	r2, sp, #28
 1309 0bf6 D318     		adds	r3, r2, r3
 1310 0bf8 D3ED007A 		flds	s15, [r3, #0]
 1311 0bfc F5EE407A 		fcmpzs	s15
 1312 0c00 F1EE10FA 		fmstat
 1313 0c04 07D1     		bne	.L42
 315:../src/utilities.c **** 				Denom[c] = 1.0f;
 1314              		.loc 1 315 0
 1315 0c06 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1316 0c0a 4FEA8303 		lsl	r3, r3, #2
 1317 0c0e 07AA     		add	r2, sp, #28
 1318 0c10 D318     		adds	r3, r2, r3
 1319 0c12 FB4A     		ldr	r2, .L50+4	@ float
 1320 0c14 1A60     		str	r2, [r3, #0]	@ float
 1321              	.L42:
 311:../src/utilities.c **** 	    for (c = XAXIS; c <= ZAXIS; c++)
 1322              		.loc 1 311 0
 1323 0c16 9DF81F31 		ldrb	r3, [sp, #287]
 1324 0c1a 03F10103 		add	r3, r3, #1
 1325 0c1e 8DF81F31 		strb	r3, [sp, #287]
 1326              	.L41:
 311:../src/utilities.c **** 	    for (c = XAXIS; c <= ZAXIS; c++)
 1327              		.loc 1 311 0 is_stmt 0 discriminator 1
 1328 0c22 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1329 0c26 022B     		cmp	r3, #2
 1330 0c28 A3D9     		bls	.L43
 316:../src/utilities.c **** 		}
 317:../src/utilities.c **** 
 318:../src/utilities.c **** 		Delta[XAXIS] = -((F2 + 16.0f * (C[YAXIS] * XY + C[ZAXIS] * XZ + sum[XAXIS] * (-C2[XAXIS] - Q0)
 1331              		.loc 1 318 0 is_stmt 1
 1332 0c2a 9DED117A 		flds	s14, [sp, #68]
 1333 0c2e DDED3E7A 		flds	s15, [sp, #248]
 1334 0c32 27EE277A 		fmuls	s14, s14, s15
 1335 0c36 DDED126A 		flds	s13, [sp, #72]
 1336 0c3a DDED3D7A 		flds	s15, [sp, #244]
 1337 0c3e 66EEA77A 		fmuls	s15, s13, s15
 1338 0c42 37EE277A 		fadds	s14, s14, s15
 1339 0c46 DDED226A 		flds	s13, [sp, #136]
 1340 0c4a DDED0D7A 		flds	s15, [sp, #52]
 1341 0c4e B1EE676A 		fnegs	s12, s15
 1342 0c52 DDED427A 		flds	s15, [sp, #264]
 1343 0c56 76EE677A 		fsubs	s15, s12, s15
 1344 0c5a 66EEA77A 		fmuls	s15, s13, s15
 1345 0c5e 37EE277A 		fadds	s14, s14, s15
 319:../src/utilities.c **** 				       + C[XAXIS] * (sum2[XAXIS] + Q1 - C[ZAXIS] * sum[ZAXIS] - C[YAXIS] * sum[YAXIS]))) / Deno
 1346              		.loc 1 319 0
 1347 0c62 DDED106A 		flds	s13, [sp, #64]
 1348 0c66 9DED1F6A 		flds	s12, [sp, #124]
 1349 0c6a DDED417A 		flds	s15, [sp, #260]
 1350 0c6e 36EE276A 		fadds	s12, s12, s15
 1351 0c72 DDED125A 		flds	s11, [sp, #72]
 1352 0c76 DDED247A 		flds	s15, [sp, #144]
 1353 0c7a 65EEA77A 		fmuls	s15, s11, s15
 1354 0c7e 36EE676A 		fsubs	s12, s12, s15
 1355 0c82 DDED115A 		flds	s11, [sp, #68]
 1356 0c86 DDED237A 		flds	s15, [sp, #140]
 1357 0c8a 65EEA77A 		fmuls	s15, s11, s15
 1358 0c8e 76EE677A 		fsubs	s15, s12, s15
 1359 0c92 66EEA77A 		fmuls	s15, s13, s15
 1360 0c96 37EE277A 		fadds	s14, s14, s15
 318:../src/utilities.c **** 		Delta[XAXIS] = -((F2 + 16.0f * (C[YAXIS] * XY + C[ZAXIS] * XZ + sum[XAXIS] * (-C2[XAXIS] - Q0)
 1361              		.loc 1 318 0
 1362 0c9a F3EE007A 		fconsts	s15, #48
 1363 0c9e 67EE277A 		fmuls	s15, s14, s15
 1364 0ca2 9DED337A 		flds	s14, [sp, #204]
 1365 0ca6 37EE877A 		fadds	s14, s15, s14
 1366              		.loc 1 319 0
 1367 0caa 07AB     		add	r3, sp, #28
 1368 0cac D3ED007A 		flds	s15, [r3, #0]
 1369 0cb0 C7EE277A 		fdivs	s15, s14, s15
 318:../src/utilities.c **** 		Delta[XAXIS] = -((F2 + 16.0f * (C[YAXIS] * XY + C[ZAXIS] * XZ + sum[XAXIS] * (-C2[XAXIS] - Q0)
 1370              		.loc 1 318 0
 1371 0cb4 F1EE677A 		fnegs	s15, s15
 1372 0cb8 CDED0A7A 		fsts	s15, [sp, #40]
 320:../src/utilities.c **** 
 321:../src/utilities.c **** 		Delta[YAXIS] = -((F3 + 16.0f * (C[XAXIS] * XY + C[ZAXIS] * YZ + sum[YAXIS] * (-C2[YAXIS] - Q0)
 1373              		.loc 1 321 0
 1374 0cbc 9DED107A 		flds	s14, [sp, #64]
 1375 0cc0 DDED3E7A 		flds	s15, [sp, #248]
 1376 0cc4 27EE277A 		fmuls	s14, s14, s15
 1377 0cc8 DDED126A 		flds	s13, [sp, #72]
 1378 0ccc DDED3C7A 		flds	s15, [sp, #240]
 1379 0cd0 66EEA77A 		fmuls	s15, s13, s15
 1380 0cd4 37EE277A 		fadds	s14, s14, s15
 1381 0cd8 DDED236A 		flds	s13, [sp, #140]
 1382 0cdc DDED0E7A 		flds	s15, [sp, #56]
 1383 0ce0 B1EE676A 		fnegs	s12, s15
 1384 0ce4 DDED427A 		flds	s15, [sp, #264]
 1385 0ce8 76EE677A 		fsubs	s15, s12, s15
 1386 0cec 66EEA77A 		fmuls	s15, s13, s15
 1387 0cf0 37EE277A 		fadds	s14, s14, s15
 322:../src/utilities.c **** 				       + C[YAXIS] * (sum2[YAXIS] + Q1 - C[XAXIS] * sum[XAXIS] - C[ZAXIS] * sum[ZAXIS]))) / Deno
 1388              		.loc 1 322 0
 1389 0cf4 DDED116A 		flds	s13, [sp, #68]
 1390 0cf8 9DED206A 		flds	s12, [sp, #128]
 1391 0cfc DDED417A 		flds	s15, [sp, #260]
 1392 0d00 36EE276A 		fadds	s12, s12, s15
 1393 0d04 DDED105A 		flds	s11, [sp, #64]
 1394 0d08 DDED227A 		flds	s15, [sp, #136]
 1395 0d0c 65EEA77A 		fmuls	s15, s11, s15
 1396 0d10 36EE676A 		fsubs	s12, s12, s15
 1397 0d14 DDED125A 		flds	s11, [sp, #72]
 1398 0d18 DDED247A 		flds	s15, [sp, #144]
 1399 0d1c 65EEA77A 		fmuls	s15, s11, s15
 1400 0d20 76EE677A 		fsubs	s15, s12, s15
 1401 0d24 66EEA77A 		fmuls	s15, s13, s15
 1402 0d28 37EE277A 		fadds	s14, s14, s15
 321:../src/utilities.c **** 		Delta[YAXIS] = -((F3 + 16.0f * (C[XAXIS] * XY + C[ZAXIS] * YZ + sum[YAXIS] * (-C2[YAXIS] - Q0)
 1403              		.loc 1 321 0
 1404 0d2c F3EE007A 		fconsts	s15, #48
 1405 0d30 67EE277A 		fmuls	s15, s14, s15
 1406 0d34 9DED327A 		flds	s14, [sp, #200]
 1407 0d38 37EE877A 		fadds	s14, s15, s14
 1408              		.loc 1 322 0
 1409 0d3c 07AB     		add	r3, sp, #28
 1410 0d3e D3ED017A 		flds	s15, [r3, #4]
 1411 0d42 C7EE277A 		fdivs	s15, s14, s15
 321:../src/utilities.c **** 		Delta[YAXIS] = -((F3 + 16.0f * (C[XAXIS] * XY + C[ZAXIS] * YZ + sum[YAXIS] * (-C2[YAXIS] - Q0)
 1412              		.loc 1 321 0
 1413 0d46 F1EE677A 		fnegs	s15, s15
 1414 0d4a CDED0B7A 		fsts	s15, [sp, #44]
 323:../src/utilities.c **** 
 324:../src/utilities.c **** 		Delta[ZAXIS] = -((F4 + 16.0f * (C[XAXIS] * XZ + C[YAXIS] * YZ + sum[ZAXIS] * (-C2[ZAXIS] - Q0)
 1415              		.loc 1 324 0
 1416 0d4e 9DED107A 		flds	s14, [sp, #64]
 1417 0d52 DDED3D7A 		flds	s15, [sp, #244]
 1418 0d56 27EE277A 		fmuls	s14, s14, s15
 1419 0d5a DDED116A 		flds	s13, [sp, #68]
 1420 0d5e DDED3C7A 		flds	s15, [sp, #240]
 1421 0d62 66EEA77A 		fmuls	s15, s13, s15
 1422 0d66 37EE277A 		fadds	s14, s14, s15
 1423 0d6a DDED246A 		flds	s13, [sp, #144]
 1424 0d6e DDED0F7A 		flds	s15, [sp, #60]
 1425 0d72 B1EE676A 		fnegs	s12, s15
 1426 0d76 DDED427A 		flds	s15, [sp, #264]
 1427 0d7a 76EE677A 		fsubs	s15, s12, s15
 1428 0d7e 66EEA77A 		fmuls	s15, s13, s15
 1429 0d82 37EE277A 		fadds	s14, s14, s15
 325:../src/utilities.c **** 				       + C[ZAXIS] * (sum2[ZAXIS] + Q1 - C[XAXIS] * sum[XAXIS] - C[YAXIS] * sum[YAXIS]))) / Deno
 1430              		.loc 1 325 0
 1431 0d86 DDED126A 		flds	s13, [sp, #72]
 1432 0d8a 9DED216A 		flds	s12, [sp, #132]
 1433 0d8e DDED417A 		flds	s15, [sp, #260]
 1434 0d92 36EE276A 		fadds	s12, s12, s15
 1435 0d96 DDED105A 		flds	s11, [sp, #64]
 1436 0d9a DDED227A 		flds	s15, [sp, #136]
 1437 0d9e 65EEA77A 		fmuls	s15, s11, s15
 1438 0da2 36EE676A 		fsubs	s12, s12, s15
 1439 0da6 DDED115A 		flds	s11, [sp, #68]
 1440 0daa DDED237A 		flds	s15, [sp, #140]
 1441 0dae 65EEA77A 		fmuls	s15, s11, s15
 1442 0db2 76EE677A 		fsubs	s15, s12, s15
 1443 0db6 66EEA77A 		fmuls	s15, s13, s15
 1444 0dba 37EE277A 		fadds	s14, s14, s15
 324:../src/utilities.c **** 		Delta[ZAXIS] = -((F4 + 16.0f * (C[XAXIS] * XZ + C[YAXIS] * YZ + sum[ZAXIS] * (-C2[ZAXIS] - Q0)
 1445              		.loc 1 324 0
 1446 0dbe F3EE007A 		fconsts	s15, #48
 1447 0dc2 67EE277A 		fmuls	s15, s14, s15
 1448 0dc6 9DED317A 		flds	s14, [sp, #196]
 1449 0dca 37EE877A 		fadds	s14, s15, s14
 1450              		.loc 1 325 0
 1451 0dce 07AB     		add	r3, sp, #28
 1452 0dd0 D3ED027A 		flds	s15, [r3, #8]
 1453 0dd4 C7EE277A 		fdivs	s15, s14, s15
 324:../src/utilities.c **** 		Delta[ZAXIS] = -((F4 + 16.0f * (C[XAXIS] * XZ + C[YAXIS] * YZ + sum[ZAXIS] * (-C2[ZAXIS] - Q0)
 1454              		.loc 1 324 0
 1455 0dd8 F1EE677A 		fnegs	s15, s15
 1456 0ddc CDED0C7A 		fsts	s15, [sp, #48]
 326:../src/utilities.c **** 
 327:../src/utilities.c **** 		for (c = XAXIS; c <= ZAXIS; c++)
 1457              		.loc 1 327 0
 1458 0de0 4FF00003 		mov	r3, #0
 1459 0de4 8DF81F31 		strb	r3, [sp, #287]
 1460 0de8 3DE0     		b	.L44
 1461              	.L45:
 328:../src/utilities.c **** 		{
 329:../src/utilities.c **** 			C[c] += Delta[c];
 1462              		.loc 1 329 0 discriminator 2
 1463 0dea 9DF81F21 		ldrb	r2, [sp, #287]	@ zero_extendqisi2
 1464 0dee 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1465 0df2 4FEA8303 		lsl	r3, r3, #2
 1466 0df6 0DF5907C 		add	ip, sp, #288
 1467 0dfa 6344     		add	r3, ip, r3
 1468 0dfc 13ED387A 		flds	s14, [r3, #-224]
 1469 0e00 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1470 0e04 4FEA8303 		lsl	r3, r3, #2
 1471 0e08 48A8     		add	r0, sp, #288
 1472 0e0a C318     		adds	r3, r0, r3
 1473 0e0c 53ED3E7A 		flds	s15, [r3, #-248]
 1474 0e10 77EE277A 		fadds	s15, s14, s15
 1475 0e14 4FEA8203 		lsl	r3, r2, #2
 1476 0e18 48A9     		add	r1, sp, #288
 1477 0e1a CB18     		adds	r3, r1, r3
 1478 0e1c 43ED387A 		fsts	s15, [r3, #-224]
 330:../src/utilities.c **** 			C2[c] = SQR(C[c]);
 1479              		.loc 1 330 0 discriminator 2
 1480 0e20 9DF81F21 		ldrb	r2, [sp, #287]	@ zero_extendqisi2
 1481 0e24 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1482 0e28 4FEA8303 		lsl	r3, r3, #2
 1483 0e2c 0DF5907C 		add	ip, sp, #288
 1484 0e30 6344     		add	r3, ip, r3
 1485 0e32 13ED387A 		flds	s14, [r3, #-224]
 1486 0e36 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1487 0e3a 4FEA8303 		lsl	r3, r3, #2
 1488 0e3e 48A8     		add	r0, sp, #288
 1489 0e40 C318     		adds	r3, r0, r3
 1490 0e42 53ED387A 		flds	s15, [r3, #-224]
 1491 0e46 67EE277A 		fmuls	s15, s14, s15
 1492 0e4a 4FEA8203 		lsl	r3, r2, #2
 1493 0e4e 48A9     		add	r1, sp, #288
 1494 0e50 CB18     		adds	r3, r1, r3
 1495 0e52 A3F1EC03 		sub	r3, r3, #236
 1496 0e56 C3ED007A 		fsts	s15, [r3, #0]
 327:../src/utilities.c **** 		for (c = XAXIS; c <= ZAXIS; c++)
 1497              		.loc 1 327 0 discriminator 2
 1498 0e5a 9DF81F31 		ldrb	r3, [sp, #287]
 1499 0e5e 03F10103 		add	r3, r3, #1
 1500 0e62 8DF81F31 		strb	r3, [sp, #287]
 1501              	.L44:
 327:../src/utilities.c **** 		for (c = XAXIS; c <= ZAXIS; c++)
 1502              		.loc 1 327 0 is_stmt 0 discriminator 1
 1503 0e66 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1504 0e6a 022B     		cmp	r3, #2
 1505 0e6c BDD9     		bls	.L45
 331:../src/utilities.c **** 		}
 332:../src/utilities.c **** 
 333:../src/utilities.c **** 		QS = C2[XAXIS] + C2[YAXIS] + C2[ZAXIS];
 1506              		.loc 1 333 0 is_stmt 1
 1507 0e6e 9DED0D7A 		flds	s14, [sp, #52]
 1508 0e72 DDED0E7A 		flds	s15, [sp, #56]
 1509 0e76 37EE277A 		fadds	s14, s14, s15
 1510 0e7a DDED0F7A 		flds	s15, [sp, #60]
 1511 0e7e 77EE277A 		fadds	s15, s14, s15
 1512 0e82 CDED307A 		fsts	s15, [sp, #192]
 334:../src/utilities.c **** 		QB = -2.0f * (C[XAXIS] * sum[XAXIS] + C[YAXIS] * sum[YAXIS] + C[ZAXIS] * sum[ZAXIS]);
 1513              		.loc 1 334 0
 1514 0e86 9DED107A 		flds	s14, [sp, #64]
 1515 0e8a DDED227A 		flds	s15, [sp, #136]
 1516 0e8e 27EE277A 		fmuls	s14, s14, s15
 1517 0e92 DDED116A 		flds	s13, [sp, #68]
 1518 0e96 DDED237A 		flds	s15, [sp, #140]
 1519 0e9a 66EEA77A 		fmuls	s15, s13, s15
 1520 0e9e 37EE277A 		fadds	s14, s14, s15
 1521 0ea2 DDED126A 		flds	s13, [sp, #72]
 1522 0ea6 DDED247A 		flds	s15, [sp, #144]
 1523 0eaa 66EEA77A 		fmuls	s15, s13, s15
 1524 0eae 37EE277A 		fadds	s14, s14, s15
 1525 0eb2 F8EE007A 		fconsts	s15, #128
 1526 0eb6 67EE277A 		fmuls	s15, s14, s15
 1527 0eba CDED2F7A 		fsts	s15, [sp, #188]
 335:../src/utilities.c **** 		R2 = F0 + QB + QS;
 1528              		.loc 1 335 0
 1529 0ebe 9DED357A 		flds	s14, [sp, #212]
 1530 0ec2 DDED2F7A 		flds	s15, [sp, #188]
 1531 0ec6 37EE277A 		fadds	s14, s14, s15
 1532 0eca DDED307A 		flds	s15, [sp, #192]
 1533 0ece 77EE277A 		fadds	s15, s14, s15
 1534 0ed2 CDED2E7A 		fsts	s15, [sp, #184]
 336:../src/utilities.c **** 		Q0 = 0.5f * (QS - R2);
 1535              		.loc 1 336 0
 1536 0ed6 9DED307A 		flds	s14, [sp, #192]
 1537 0eda DDED2E7A 		flds	s15, [sp, #184]
 1538 0ede 37EE677A 		fsubs	s14, s14, s15
 1539 0ee2 F6EE007A 		fconsts	s15, #96
 1540 0ee6 67EE277A 		fmuls	s15, s14, s15
 1541 0eea CDED427A 		fsts	s15, [sp, #264]
 337:../src/utilities.c **** 		Q1 = F1 + Q0;
 1542              		.loc 1 337 0
 1543 0eee 9DED347A 		flds	s14, [sp, #208]
 1544 0ef2 DDED427A 		flds	s15, [sp, #264]
 1545 0ef6 77EE277A 		fadds	s15, s14, s15
 1546 0efa CDED417A 		fsts	s15, [sp, #260]
 338:../src/utilities.c **** 		Q2 = 8.0f * (QS - R2 + QB + F0);
 1547              		.loc 1 338 0
 1548 0efe 9DED307A 		flds	s14, [sp, #192]
 1549 0f02 DDED2E7A 		flds	s15, [sp, #184]
 1550 0f06 37EE677A 		fsubs	s14, s14, s15
 1551 0f0a DDED2F7A 		flds	s15, [sp, #188]
 1552 0f0e 37EE277A 		fadds	s14, s14, s15
 1553 0f12 DDED357A 		flds	s15, [sp, #212]
 1554 0f16 37EE277A 		fadds	s14, s14, s15
 1555 0f1a F2EE007A 		fconsts	s15, #32
 1556 0f1e 67EE277A 		fmuls	s15, s14, s15
 1557 0f22 CDED407A 		fsts	s15, [sp, #256]
 339:../src/utilities.c **** 
 340:../src/utilities.c **** 		Iterations++;
 1558              		.loc 1 340 0
 1559 0f26 BDF81A31 		ldrh	r3, [sp, #282]	@ movhi
 1560 0f2a 03F10103 		add	r3, r3, #1
 1561 0f2e ADF81A31 		strh	r3, [sp, #282]	@ movhi
 341:../src/utilities.c **** 	}
 342:../src/utilities.c **** 	while ((Iterations < 50) || ((Iterations < MaxIterations) && ((SQR(Delta[XAXIS]) + SQR(Delta[YAXIS
 1562              		.loc 1 342 0
 1563 0f32 BDF81A31 		ldrh	r3, [sp, #282]
 1564 0f36 312B     		cmp	r3, #49
 1565 0f38 7FF616AE 		bls	.L46
 1566              		.loc 1 342 0 is_stmt 0 discriminator 1
 1567 0f3c BDF81A21 		ldrh	r2, [sp, #282]
 1568 0f40 02AB     		add	r3, sp, #8
 1569 0f42 1B88     		ldrh	r3, [r3, #0]
 1570 0f44 9A42     		cmp	r2, r3
 1571 0f46 23D2     		bcs	.L47
 1572 0f48 9DED0A7A 		flds	s14, [sp, #40]
 1573 0f4c DDED0A7A 		flds	s15, [sp, #40]
 1574 0f50 27EE277A 		fmuls	s14, s14, s15
 1575 0f54 DDED0B6A 		flds	s13, [sp, #44]
 1576 0f58 DDED0B7A 		flds	s15, [sp, #44]
 1577 0f5c 66EEA77A 		fmuls	s15, s13, s15
 1578 0f60 37EE277A 		fadds	s14, s14, s15
 1579 0f64 DDED0C6A 		flds	s13, [sp, #48]
 1580 0f68 DDED0C7A 		flds	s15, [sp, #48]
 1581 0f6c 66EEA77A 		fmuls	s15, s13, s15
 1582 0f70 37EE277A 		fadds	s14, s14, s15
 1583 0f74 01AB     		add	r3, sp, #4
 1584 0f76 D3ED007A 		flds	s15, [r3, #0]
 1585 0f7a B4EEE77A 		fcmpes	s14, s15
 1586 0f7e F1EE10FA 		fmstat
 1587 0f82 D4BF     		ite	le
 1588 0f84 0023     		movle	r3, #0
 1589 0f86 0123     		movgt	r3, #1
 1590 0f88 DBB2     		uxtb	r3, r3
 1591 0f8a 002B     		cmp	r3, #0
 1592 0f8c 7FF4ECAD 		bne	.L46
 1593              	.L47:
 343:../src/utilities.c **** 
 344:../src/utilities.c **** 	for (c = XAXIS; c <= ZAXIS; c++)
 1594              		.loc 1 344 0 is_stmt 1
 1595 0f90 4FF00003 		mov	r3, #0
 1596 0f94 8DF81F31 		strb	r3, [sp, #287]
 1597 0f98 15E0     		b	.L48
 1598              	.L49:
 345:../src/utilities.c **** 		SphereOrigin[c] = C[c];
 1599              		.loc 1 345 0 discriminator 2
 1600 0f9a 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1601 0f9e 4FEA8303 		lsl	r3, r3, #2
 1602 0fa2 4F9A     		ldr	r2, [sp, #316]
 1603 0fa4 D218     		adds	r2, r2, r3
 1604 0fa6 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1605 0faa 4FEA8303 		lsl	r3, r3, #2
 1606 0fae 0DF5907C 		add	ip, sp, #288
 1607 0fb2 6344     		add	r3, ip, r3
 1608 0fb4 53F8E03C 		ldr	r3, [r3, #-224]	@ float
 1609 0fb8 1360     		str	r3, [r2, #0]	@ float
 344:../src/utilities.c **** 	for (c = XAXIS; c <= ZAXIS; c++)
 1610              		.loc 1 344 0 discriminator 2
 1611 0fba 9DF81F31 		ldrb	r3, [sp, #287]
 1612 0fbe 03F10103 		add	r3, r3, #1
 1613 0fc2 8DF81F31 		strb	r3, [sp, #287]
 1614              	.L48:
 344:../src/utilities.c **** 	for (c = XAXIS; c <= ZAXIS; c++)
 1615              		.loc 1 344 0 is_stmt 0 discriminator 1
 1616 0fc6 9DF81F31 		ldrb	r3, [sp, #287]	@ zero_extendqisi2
 1617 0fca 022B     		cmp	r3, #2
 1618 0fcc E5D9     		bls	.L49
 346:../src/utilities.c **** 
 347:../src/utilities.c **** 	*SphereRadius = sqrt(R2);
 1619              		.loc 1 347 0 is_stmt 1
 1620 0fce 2E98     		ldr	r0, [sp, #184]	@ float
 1621 0fd0 FFF7FEFF 		bl	__aeabi_f2d
 1622 0fd4 0246     		mov	r2, r0
 1623 0fd6 0B46     		mov	r3, r1
 1624 0fd8 1046     		mov	r0, r2
 1625 0fda 1946     		mov	r1, r3
 1626 0fdc FFF7FEFF 		bl	sqrt
 1627 0fe0 0246     		mov	r2, r0
 1628 0fe2 0B46     		mov	r3, r1
 1629 0fe4 1046     		mov	r0, r2
 1630 0fe6 1946     		mov	r1, r3
 1631 0fe8 FFF7FEFF 		bl	__aeabi_d2f
 1632 0fec 0246     		mov	r2, r0	@ float
 1633 0fee 509B     		ldr	r3, [sp, #320]
 1634 0ff0 1A60     		str	r2, [r3, #0]	@ float
 348:../src/utilities.c **** 
 349:../src/utilities.c **** 	return (Iterations);
 1635              		.loc 1 349 0
 1636 0ff2 BDF81A31 		ldrh	r3, [sp, #282]
 350:../src/utilities.c **** }
 1637              		.loc 1 350 0
 1638 0ff6 1846     		mov	r0, r3
 1639 0ff8 49B0     		add	sp, sp, #292
 1640 0ffa F0BD     		pop	{r4, r5, r6, r7, pc}
 1641              	.L51:
 1642              		.align	2
 1643              	.L50:
 1644 0ffc 00000000 		.word	0
 1645 1000 0000803F 		.word	1065353216
 1646              		.cfi_endproc
 1647              	.LFE117:
 1649              		.align	2
 1650              		.global	standardRadianFormat
 1651              		.thumb
 1652              		.thumb_func
 1654              	standardRadianFormat:
 1655              	.LFB118:
 351:../src/utilities.c **** 
 352:../src/utilities.c **** ///////////////////////////////////////////////////////////////////////////////
 353:../src/utilities.c **** //  Standard Radian Format Limiter
 354:../src/utilities.c **** ////////////////////////////////////////////////////////////////////////////////
 355:../src/utilities.c **** 
 356:../src/utilities.c **** float standardRadianFormat(float angle)
 357:../src/utilities.c **** {
 1656              		.loc 1 357 0
 1657              		.cfi_startproc
 1658              		@ args = 0, pretend = 0, frame = 8
 1659              		@ frame_needed = 0, uses_anonymous_args = 0
 1660              		@ link register save eliminated.
 1661 1004 82B0     		sub	sp, sp, #8
 1662              	.LCFI12:
 1663              		.cfi_def_cfa_offset 8
 1664 1006 0190     		str	r0, [sp, #4]	@ float
 358:../src/utilities.c ****     if (angle >= PI)
 1665              		.loc 1 358 0
 1666 1008 9DED017A 		flds	s14, [sp, #4]
 1667 100c DFED177A 		flds	s15, .L56
 1668 1010 B4EEE77A 		fcmpes	s14, s15
 1669 1014 F1EE10FA 		fmstat
 1670 1018 B4BF     		ite	lt
 1671 101a 0023     		movlt	r3, #0
 1672 101c 0123     		movge	r3, #1
 1673 101e DBB2     		uxtb	r3, r3
 1674 1020 002B     		cmp	r3, #0
 1675 1022 06D0     		beq	.L53
 359:../src/utilities.c ****         return (angle - 2 * PI);
 1676              		.loc 1 359 0
 1677 1024 9DED017A 		flds	s14, [sp, #4]
 1678 1028 DFED117A 		flds	s15, .L56+4
 1679 102c 77EE677A 		fsubs	s15, s14, s15
 1680 1030 16E0     		b	.L54
 1681              	.L53:
 360:../src/utilities.c ****     else if (angle < -PI)
 1682              		.loc 1 360 0
 1683 1032 9DED017A 		flds	s14, [sp, #4]
 1684 1036 DFED0F7A 		flds	s15, .L56+8
 1685 103a B4EEE77A 		fcmpes	s14, s15
 1686 103e F1EE10FA 		fmstat
 1687 1042 54BF     		ite	pl
 1688 1044 0023     		movpl	r3, #0
 1689 1046 0123     		movmi	r3, #1
 1690 1048 DBB2     		uxtb	r3, r3
 1691 104a 002B     		cmp	r3, #0
 1692 104c 06D0     		beq	.L55
 361:../src/utilities.c ****         return (angle + 2 * PI);
 1693              		.loc 1 361 0
 1694 104e 9DED017A 		flds	s14, [sp, #4]
 1695 1052 DFED077A 		flds	s15, .L56+4
 1696 1056 77EE277A 		fadds	s15, s14, s15
 1697 105a 01E0     		b	.L54
 1698              	.L55:
 362:../src/utilities.c ****     else
 363:../src/utilities.c ****         return (angle);
 1699              		.loc 1 363 0
 1700 105c DDED017A 		flds	s15, [sp, #4]
 1701              	.L54:
 1702 1060 17EE903A 		fmrs	r3, s15
 364:../src/utilities.c **** }
 1703              		.loc 1 364 0
 1704 1064 1846     		mov	r0, r3	@ float
 1705 1066 02B0     		add	sp, sp, #8
 1706 1068 7047     		bx	lr
 1707              	.L57:
 1708 106a 00BF     		.align	2
 1709              	.L56:
 1710 106c DB0F4940 		.word	1078530011
 1711 1070 DB0FC940 		.word	1086918619
 1712 1074 DB0F49C0 		.word	-1068953637
 1713              		.cfi_endproc
 1714              	.LFE118:
 1716              		.global	__aeabi_dmul
 1717              		.global	__aeabi_i2d
 1718              		.global	__aeabi_dadd
 1719              		.global	__aeabi_ddiv
 1720              		.align	2
 1721              		.global	stringToFloat
 1722              		.thumb
 1723              		.thumb_func
 1725              	stringToFloat:
 1726              	.LFB119:
 365:../src/utilities.c **** 
 366:../src/utilities.c **** ////////////////////////////////////////////////////////////////////////////////
 367:../src/utilities.c **** // String to Float Conversion
 368:../src/utilities.c **** ///////////////////////////////////////////////////////////////////////////////
 369:../src/utilities.c **** 
 370:../src/utilities.c **** // Simple and fast atof (ascii to float) function.
 371:../src/utilities.c **** //
 372:../src/utilities.c **** // - Executes about 5x faster than standard MSCRT library atof().
 373:../src/utilities.c **** // - An attractive alternative if the number of calls is in the millions.
 374:../src/utilities.c **** // - Assumes input is a proper integer, fraction, or scientific format.
 375:../src/utilities.c **** // - Matches library atof() to 15 digits (except at extreme exponents).
 376:../src/utilities.c **** // - Follows atof() precedent of essentially no error checking.
 377:../src/utilities.c **** //
 378:../src/utilities.c **** // 09-May-2009 Tom Van Baak (tvb) www.LeapSecond.com
 379:../src/utilities.c **** //
 380:../src/utilities.c **** 
 381:../src/utilities.c **** #define white_space(c) ((c) == ' ' || (c) == '\t')
 382:../src/utilities.c **** #define valid_digit(c) ((c) >= '0' && (c) <= '9')
 383:../src/utilities.c **** 
 384:../src/utilities.c **** float stringToFloat(const char *p)
 385:../src/utilities.c **** {
 1727              		.loc 1 385 0
 1728              		.cfi_startproc
 1729              		@ args = 0, pretend = 0, frame = 56
 1730              		@ frame_needed = 0, uses_anonymous_args = 0
 1731 1078 30B5     		push	{r4, r5, lr}
 1732              	.LCFI13:
 1733              		.cfi_def_cfa_offset 12
 1734              		.cfi_offset 14, -4
 1735              		.cfi_offset 5, -8
 1736              		.cfi_offset 4, -12
 1737 107a 8FB0     		sub	sp, sp, #60
 1738              	.LCFI14:
 1739              		.cfi_def_cfa_offset 72
 1740 107c 0190     		str	r0, [sp, #4]
 386:../src/utilities.c ****     int frac;
 387:../src/utilities.c ****     double sign, value, scale;
 388:../src/utilities.c **** 
 389:../src/utilities.c ****     // Skip leading white space, if any.
 390:../src/utilities.c **** 
 391:../src/utilities.c ****     while (white_space(*p) ) {
 1741              		.loc 1 391 0
 1742 107e 03E0     		b	.L59
 1743              	.L60:
 392:../src/utilities.c ****         p += 1;
 1744              		.loc 1 392 0
 1745 1080 019B     		ldr	r3, [sp, #4]
 1746 1082 03F10103 		add	r3, r3, #1
 1747 1086 0193     		str	r3, [sp, #4]
 1748              	.L59:
 391:../src/utilities.c ****     while (white_space(*p) ) {
 1749              		.loc 1 391 0 discriminator 1
 1750 1088 019B     		ldr	r3, [sp, #4]
 1751 108a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1752 108c 202B     		cmp	r3, #32
 1753 108e F7D0     		beq	.L60
 391:../src/utilities.c ****     while (white_space(*p) ) {
 1754              		.loc 1 391 0 is_stmt 0 discriminator 2
 1755 1090 019B     		ldr	r3, [sp, #4]
 1756 1092 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1757 1094 092B     		cmp	r3, #9
 1758 1096 F3D0     		beq	.L60
 393:../src/utilities.c ****     }
 394:../src/utilities.c **** 
 395:../src/utilities.c ****     // Get sign, if any.
 396:../src/utilities.c **** 
 397:../src/utilities.c ****     sign = 1.0;
 1759              		.loc 1 397 0 is_stmt 1
 1760 1098 99A3     		adr	r3, .L85
 1761 109a D3E90023 		ldrd	r2, [r3]
 1762 109e CDE90A23 		strd	r2, [sp, #40]
 398:../src/utilities.c ****     if (*p == '-') {
 1763              		.loc 1 398 0
 1764 10a2 019B     		ldr	r3, [sp, #4]
 1765 10a4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1766 10a6 2D2B     		cmp	r3, #45
 1767 10a8 09D1     		bne	.L61
 399:../src/utilities.c ****         sign = -1.0;
 1768              		.loc 1 399 0
 1769 10aa 97A3     		adr	r3, .L85+8
 1770 10ac D3E90023 		ldrd	r2, [r3]
 1771 10b0 CDE90A23 		strd	r2, [sp, #40]
 400:../src/utilities.c ****         p += 1;
 1772              		.loc 1 400 0
 1773 10b4 019B     		ldr	r3, [sp, #4]
 1774 10b6 03F10103 		add	r3, r3, #1
 1775 10ba 0193     		str	r3, [sp, #4]
 1776 10bc 07E0     		b	.L62
 1777              	.L61:
 401:../src/utilities.c **** 
 402:../src/utilities.c ****     } else if (*p == '+') {
 1778              		.loc 1 402 0
 1779 10be 019B     		ldr	r3, [sp, #4]
 1780 10c0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1781 10c2 2B2B     		cmp	r3, #43
 1782 10c4 03D1     		bne	.L62
 403:../src/utilities.c ****         p += 1;
 1783              		.loc 1 403 0
 1784 10c6 019B     		ldr	r3, [sp, #4]
 1785 10c8 03F10103 		add	r3, r3, #1
 1786 10cc 0193     		str	r3, [sp, #4]
 1787              	.L62:
 404:../src/utilities.c ****     }
 405:../src/utilities.c **** 
 406:../src/utilities.c ****     // Get digits before decimal point or exponent, if any.
 407:../src/utilities.c **** 
 408:../src/utilities.c ****     value = 0.0;
 1788              		.loc 1 408 0
 1789 10ce 90A3     		adr	r3, .L85+16
 1790 10d0 D3E90023 		ldrd	r2, [r3]
 1791 10d4 CDE90823 		strd	r2, [sp, #32]
 409:../src/utilities.c ****     while (valid_digit(*p)) {
 1792              		.loc 1 409 0
 1793 10d8 1FE0     		b	.L63
 1794              	.L65:
 410:../src/utilities.c ****         value = value * 10.0 + (*p - '0');
 1795              		.loc 1 410 0
 1796 10da DDE90801 		ldrd	r0, [sp, #32]
 1797 10de 8EA3     		adr	r3, .L85+24
 1798 10e0 D3E90023 		ldrd	r2, [r3]
 1799 10e4 FFF7FEFF 		bl	__aeabi_dmul
 1800 10e8 0246     		mov	r2, r0
 1801 10ea 0B46     		mov	r3, r1
 1802 10ec 1446     		mov	r4, r2
 1803 10ee 1D46     		mov	r5, r3
 1804 10f0 019B     		ldr	r3, [sp, #4]
 1805 10f2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1806 10f4 A3F13003 		sub	r3, r3, #48
 1807 10f8 1846     		mov	r0, r3
 1808 10fa FFF7FEFF 		bl	__aeabi_i2d
 1809 10fe 0246     		mov	r2, r0
 1810 1100 0B46     		mov	r3, r1
 1811 1102 2046     		mov	r0, r4
 1812 1104 2946     		mov	r1, r5
 1813 1106 FFF7FEFF 		bl	__aeabi_dadd
 1814 110a 0246     		mov	r2, r0
 1815 110c 0B46     		mov	r3, r1
 1816 110e CDE90823 		strd	r2, [sp, #32]
 411:../src/utilities.c ****         p += 1;
 1817              		.loc 1 411 0
 1818 1112 019B     		ldr	r3, [sp, #4]
 1819 1114 03F10103 		add	r3, r3, #1
 1820 1118 0193     		str	r3, [sp, #4]
 1821              	.L63:
 409:../src/utilities.c ****     while (valid_digit(*p)) {
 1822              		.loc 1 409 0 discriminator 1
 1823 111a 019B     		ldr	r3, [sp, #4]
 1824 111c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1825 111e 2F2B     		cmp	r3, #47
 1826 1120 03D9     		bls	.L64
 409:../src/utilities.c ****     while (valid_digit(*p)) {
 1827              		.loc 1 409 0 is_stmt 0 discriminator 2
 1828 1122 019B     		ldr	r3, [sp, #4]
 1829 1124 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1830 1126 392B     		cmp	r3, #57
 1831 1128 D7D9     		bls	.L65
 1832              	.L64:
 412:../src/utilities.c ****     }
 413:../src/utilities.c **** 
 414:../src/utilities.c ****     // Get digits after decimal point, if any.
 415:../src/utilities.c **** 
 416:../src/utilities.c ****     if (*p == '.') {
 1833              		.loc 1 416 0 is_stmt 1
 1834 112a 019B     		ldr	r3, [sp, #4]
 1835 112c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1836 112e 2E2B     		cmp	r3, #46
 1837 1130 39D1     		bne	.L66
 1838              	.LBB6:
 417:../src/utilities.c ****         double pow10 = 10.0;
 1839              		.loc 1 417 0
 1840 1132 79A3     		adr	r3, .L85+24
 1841 1134 D3E90023 		ldrd	r2, [r3]
 1842 1138 CDE90423 		strd	r2, [sp, #16]
 418:../src/utilities.c ****         p += 1;
 1843              		.loc 1 418 0
 1844 113c 019B     		ldr	r3, [sp, #4]
 1845 113e 03F10103 		add	r3, r3, #1
 1846 1142 0193     		str	r3, [sp, #4]
 419:../src/utilities.c **** 
 420:../src/utilities.c ****         while (valid_digit(*p)) {
 1847              		.loc 1 420 0
 1848 1144 27E0     		b	.L67
 1849              	.L68:
 421:../src/utilities.c ****             value += (*p - '0') / pow10;
 1850              		.loc 1 421 0
 1851 1146 019B     		ldr	r3, [sp, #4]
 1852 1148 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1853 114a A3F13003 		sub	r3, r3, #48
 1854 114e 1846     		mov	r0, r3
 1855 1150 FFF7FEFF 		bl	__aeabi_i2d
 1856 1154 0246     		mov	r2, r0
 1857 1156 0B46     		mov	r3, r1
 1858 1158 1046     		mov	r0, r2
 1859 115a 1946     		mov	r1, r3
 1860 115c DDE90423 		ldrd	r2, [sp, #16]
 1861 1160 FFF7FEFF 		bl	__aeabi_ddiv
 1862 1164 0246     		mov	r2, r0
 1863 1166 0B46     		mov	r3, r1
 1864 1168 DDE90801 		ldrd	r0, [sp, #32]
 1865 116c FFF7FEFF 		bl	__aeabi_dadd
 1866 1170 0246     		mov	r2, r0
 1867 1172 0B46     		mov	r3, r1
 1868 1174 CDE90823 		strd	r2, [sp, #32]
 422:../src/utilities.c ****             pow10 *= 10.0;
 1869              		.loc 1 422 0
 1870 1178 DDE90401 		ldrd	r0, [sp, #16]
 1871 117c 66A3     		adr	r3, .L85+24
 1872 117e D3E90023 		ldrd	r2, [r3]
 1873 1182 FFF7FEFF 		bl	__aeabi_dmul
 1874 1186 0246     		mov	r2, r0
 1875 1188 0B46     		mov	r3, r1
 1876 118a CDE90423 		strd	r2, [sp, #16]
 423:../src/utilities.c ****             p += 1;
 1877              		.loc 1 423 0
 1878 118e 019B     		ldr	r3, [sp, #4]
 1879 1190 03F10103 		add	r3, r3, #1
 1880 1194 0193     		str	r3, [sp, #4]
 1881              	.L67:
 420:../src/utilities.c ****         while (valid_digit(*p)) {
 1882              		.loc 1 420 0 discriminator 1
 1883 1196 019B     		ldr	r3, [sp, #4]
 1884 1198 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1885 119a 2F2B     		cmp	r3, #47
 1886 119c 03D9     		bls	.L66
 420:../src/utilities.c ****         while (valid_digit(*p)) {
 1887              		.loc 1 420 0 is_stmt 0 discriminator 2
 1888 119e 019B     		ldr	r3, [sp, #4]
 1889 11a0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1890 11a2 392B     		cmp	r3, #57
 1891 11a4 CFD9     		bls	.L68
 1892              	.L66:
 1893              	.LBE6:
 424:../src/utilities.c ****         }
 425:../src/utilities.c ****     }
 426:../src/utilities.c **** 
 427:../src/utilities.c ****     // Handle exponent, if any.
 428:../src/utilities.c **** 
 429:../src/utilities.c ****     scale = 1.0;
 1894              		.loc 1 429 0 is_stmt 1
 1895 11a6 56A3     		adr	r3, .L85
 1896 11a8 D3E90023 		ldrd	r2, [r3]
 1897 11ac CDE90623 		strd	r2, [sp, #24]
 430:../src/utilities.c ****     if ((*p == 'e') || (*p == 'E')) {
 1898              		.loc 1 430 0
 1899 11b0 019B     		ldr	r3, [sp, #4]
 1900 11b2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1901 11b4 652B     		cmp	r3, #101
 1902 11b6 03D0     		beq	.L69
 1903              		.loc 1 430 0 is_stmt 0 discriminator 1
 1904 11b8 019B     		ldr	r3, [sp, #4]
 1905 11ba 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1906 11bc 452B     		cmp	r3, #69
 1907 11be 78D1     		bne	.L70
 1908              	.L69:
 1909              	.LBB7:
 431:../src/utilities.c ****         unsigned int expon;
 432:../src/utilities.c ****         p += 1;
 1910              		.loc 1 432 0 is_stmt 1
 1911 11c0 019B     		ldr	r3, [sp, #4]
 1912 11c2 03F10103 		add	r3, r3, #1
 1913 11c6 0193     		str	r3, [sp, #4]
 433:../src/utilities.c **** 
 434:../src/utilities.c ****         // Get sign of exponent, if any.
 435:../src/utilities.c **** 
 436:../src/utilities.c ****         frac = 0;
 1914              		.loc 1 436 0
 1915 11c8 4FF00003 		mov	r3, #0
 1916 11cc 0D93     		str	r3, [sp, #52]
 437:../src/utilities.c ****         if (*p == '-') {
 1917              		.loc 1 437 0
 1918 11ce 019B     		ldr	r3, [sp, #4]
 1919 11d0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1920 11d2 2D2B     		cmp	r3, #45
 1921 11d4 07D1     		bne	.L71
 438:../src/utilities.c ****             frac = 1;
 1922              		.loc 1 438 0
 1923 11d6 4FF00103 		mov	r3, #1
 1924 11da 0D93     		str	r3, [sp, #52]
 439:../src/utilities.c ****             p += 1;
 1925              		.loc 1 439 0
 1926 11dc 019B     		ldr	r3, [sp, #4]
 1927 11de 03F10103 		add	r3, r3, #1
 1928 11e2 0193     		str	r3, [sp, #4]
 1929 11e4 07E0     		b	.L72
 1930              	.L71:
 440:../src/utilities.c **** 
 441:../src/utilities.c ****         } else if (*p == '+') {
 1931              		.loc 1 441 0
 1932 11e6 019B     		ldr	r3, [sp, #4]
 1933 11e8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1934 11ea 2B2B     		cmp	r3, #43
 1935 11ec 03D1     		bne	.L72
 442:../src/utilities.c ****             p += 1;
 1936              		.loc 1 442 0
 1937 11ee 019B     		ldr	r3, [sp, #4]
 1938 11f0 03F10103 		add	r3, r3, #1
 1939 11f4 0193     		str	r3, [sp, #4]
 1940              	.L72:
 443:../src/utilities.c ****         }
 444:../src/utilities.c **** 
 445:../src/utilities.c ****         // Get digits of exponent, if any.
 446:../src/utilities.c **** 
 447:../src/utilities.c ****         expon = 0;
 1941              		.loc 1 447 0
 1942 11f6 4FF00003 		mov	r3, #0
 1943 11fa 0393     		str	r3, [sp, #12]
 448:../src/utilities.c ****         while (valid_digit(*p)) {
 1944              		.loc 1 448 0
 1945 11fc 11E0     		b	.L73
 1946              	.L75:
 449:../src/utilities.c ****             expon = expon * 10 + (*p - '0');
 1947              		.loc 1 449 0
 1948 11fe 039A     		ldr	r2, [sp, #12]
 1949 1200 1346     		mov	r3, r2
 1950 1202 4FEA8303 		lsl	r3, r3, #2
 1951 1206 9B18     		adds	r3, r3, r2
 1952 1208 4FEA4303 		lsl	r3, r3, #1
 1953 120c 1A46     		mov	r2, r3
 1954 120e 019B     		ldr	r3, [sp, #4]
 1955 1210 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1956 1212 D318     		adds	r3, r2, r3
 1957 1214 A3F13003 		sub	r3, r3, #48
 1958 1218 0393     		str	r3, [sp, #12]
 450:../src/utilities.c ****             p += 1;
 1959              		.loc 1 450 0
 1960 121a 019B     		ldr	r3, [sp, #4]
 1961 121c 03F10103 		add	r3, r3, #1
 1962 1220 0193     		str	r3, [sp, #4]
 1963              	.L73:
 448:../src/utilities.c ****         while (valid_digit(*p)) {
 1964              		.loc 1 448 0 discriminator 1
 1965 1222 019B     		ldr	r3, [sp, #4]
 1966 1224 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1967 1226 2F2B     		cmp	r3, #47
 1968 1228 03D9     		bls	.L74
 448:../src/utilities.c ****         while (valid_digit(*p)) {
 1969              		.loc 1 448 0 is_stmt 0 discriminator 2
 1970 122a 019B     		ldr	r3, [sp, #4]
 1971 122c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1972 122e 392B     		cmp	r3, #57
 1973 1230 E5D9     		bls	.L75
 1974              	.L74:
 451:../src/utilities.c ****         }
 452:../src/utilities.c ****         if (expon > 308) expon = 308;
 1975              		.loc 1 452 0 is_stmt 1
 1976 1232 039B     		ldr	r3, [sp, #12]
 1977 1234 B3F59A7F 		cmp	r3, #308
 1978 1238 12D9     		bls	.L77
 1979              		.loc 1 452 0 is_stmt 0 discriminator 1
 1980 123a 4FF49A73 		mov	r3, #308
 1981 123e 0393     		str	r3, [sp, #12]
 453:../src/utilities.c **** 
 454:../src/utilities.c ****         // Calculate scaling factor.
 455:../src/utilities.c **** 
 456:../src/utilities.c ****         while (expon >= 50) { scale *= 1E50; expon -= 50; }
 1982              		.loc 1 456 0 is_stmt 1 discriminator 1
 1983 1240 0EE0     		b	.L77
 1984              	.L78:
 1985              		.loc 1 456 0 is_stmt 0 discriminator 2
 1986 1242 DDE90601 		ldrd	r0, [sp, #24]
 1987 1246 36A3     		adr	r3, .L85+32
 1988 1248 D3E90023 		ldrd	r2, [r3]
 1989 124c FFF7FEFF 		bl	__aeabi_dmul
 1990 1250 0246     		mov	r2, r0
 1991 1252 0B46     		mov	r3, r1
 1992 1254 CDE90623 		strd	r2, [sp, #24]
 1993 1258 039B     		ldr	r3, [sp, #12]
 1994 125a A3F13203 		sub	r3, r3, #50
 1995 125e 0393     		str	r3, [sp, #12]
 1996              	.L77:
 1997              		.loc 1 456 0 discriminator 1
 1998 1260 039B     		ldr	r3, [sp, #12]
 1999 1262 312B     		cmp	r3, #49
 2000 1264 EDD8     		bhi	.L78
 457:../src/utilities.c ****         while (expon >=  8) { scale *= 1E8;  expon -=  8; }
 2001              		.loc 1 457 0 is_stmt 1
 2002 1266 0EE0     		b	.L79
 2003              	.L80:
 2004              		.loc 1 457 0 is_stmt 0 discriminator 2
 2005 1268 DDE90601 		ldrd	r0, [sp, #24]
 2006 126c 2EA3     		adr	r3, .L85+40
 2007 126e D3E90023 		ldrd	r2, [r3]
 2008 1272 FFF7FEFF 		bl	__aeabi_dmul
 2009 1276 0246     		mov	r2, r0
 2010 1278 0B46     		mov	r3, r1
 2011 127a CDE90623 		strd	r2, [sp, #24]
 2012 127e 039B     		ldr	r3, [sp, #12]
 2013 1280 A3F10803 		sub	r3, r3, #8
 2014 1284 0393     		str	r3, [sp, #12]
 2015              	.L79:
 2016              		.loc 1 457 0 discriminator 1
 2017 1286 039B     		ldr	r3, [sp, #12]
 2018 1288 072B     		cmp	r3, #7
 2019 128a EDD8     		bhi	.L80
 458:../src/utilities.c ****         while (expon >   0) { scale *= 10.0; expon -=  1; }
 2020              		.loc 1 458 0 is_stmt 1
 2021 128c 0EE0     		b	.L81
 2022              	.L82:
 2023              		.loc 1 458 0 is_stmt 0 discriminator 2
 2024 128e DDE90601 		ldrd	r0, [sp, #24]
 2025 1292 21A3     		adr	r3, .L85+24
 2026 1294 D3E90023 		ldrd	r2, [r3]
 2027 1298 FFF7FEFF 		bl	__aeabi_dmul
 2028 129c 0246     		mov	r2, r0
 2029 129e 0B46     		mov	r3, r1
 2030 12a0 CDE90623 		strd	r2, [sp, #24]
 2031 12a4 039B     		ldr	r3, [sp, #12]
 2032 12a6 03F1FF33 		add	r3, r3, #-1
 2033 12aa 0393     		str	r3, [sp, #12]
 2034              	.L81:
 2035              		.loc 1 458 0 discriminator 1
 2036 12ac 039B     		ldr	r3, [sp, #12]
 2037 12ae 002B     		cmp	r3, #0
 2038 12b0 EDD1     		bne	.L82
 2039              	.L70:
 2040              	.LBE7:
 459:../src/utilities.c ****     }
 460:../src/utilities.c **** 
 461:../src/utilities.c ****     // Return signed and scaled floating point result.
 462:../src/utilities.c **** 
 463:../src/utilities.c ****     return sign * (frac ? (value / scale) : (value * scale));
 2041              		.loc 1 463 0 is_stmt 1
 2042 12b2 0D9B     		ldr	r3, [sp, #52]
 2043 12b4 002B     		cmp	r3, #0
 2044 12b6 08D0     		beq	.L83
 2045              		.loc 1 463 0 is_stmt 0 discriminator 1
 2046 12b8 DDE90801 		ldrd	r0, [sp, #32]
 2047 12bc DDE90623 		ldrd	r2, [sp, #24]
 2048 12c0 FFF7FEFF 		bl	__aeabi_ddiv
 2049 12c4 0246     		mov	r2, r0
 2050 12c6 0B46     		mov	r3, r1
 2051 12c8 07E0     		b	.L84
 2052              	.L83:
 2053              		.loc 1 463 0 discriminator 2
 2054 12ca DDE90801 		ldrd	r0, [sp, #32]
 2055 12ce DDE90623 		ldrd	r2, [sp, #24]
 2056 12d2 FFF7FEFF 		bl	__aeabi_dmul
 2057 12d6 0246     		mov	r2, r0
 2058 12d8 0B46     		mov	r3, r1
 2059              	.L84:
 2060              		.loc 1 463 0 discriminator 3
 2061 12da 1046     		mov	r0, r2
 2062 12dc 1946     		mov	r1, r3
 2063 12de DDE90A23 		ldrd	r2, [sp, #40]
 2064 12e2 FFF7FEFF 		bl	__aeabi_dmul
 2065 12e6 0246     		mov	r2, r0
 2066 12e8 0B46     		mov	r3, r1
 2067 12ea 1046     		mov	r0, r2
 2068 12ec 1946     		mov	r1, r3
 2069 12ee FFF7FEFF 		bl	__aeabi_d2f
 2070 12f2 0346     		mov	r3, r0	@ float
 464:../src/utilities.c **** }
 2071              		.loc 1 464 0 is_stmt 1 discriminator 3
 2072 12f4 1846     		mov	r0, r3	@ float
 2073 12f6 0FB0     		add	sp, sp, #60
 2074 12f8 30BD     		pop	{r4, r5, pc}
 2075              	.L86:
 2076 12fa 00BFAFF3 		.align	3
 2076      0080
 2077              	.L85:
 2078 1300 00000000 		.word	0
 2079 1304 0000F03F 		.word	1072693248
 2080 1308 00000000 		.word	0
 2081 130c 0000F0BF 		.word	-1074790400
 2082 1310 00000000 		.word	0
 2083 1314 00000000 		.word	0
 2084 1318 00000000 		.word	0
 2085 131c 00002440 		.word	1076101120
 2086 1320 9A647EC5 		.word	-981572454
 2087 1324 0E1B514A 		.word	1246829326
 2088 1328 00000000 		.word	0
 2089 132c 84D79741 		.word	1100470148
 2090              		.cfi_endproc
 2091              	.LFE119:
 2093              		.bss
 2094              		.align	2
 2095              	heap_end.8868:
 2096 0000 00000000 		.space	4
 2097              		.text
 2098              	.Letext0:
 2099              		.file 3 "c:\\program files\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 2100              		.file 4 "c:\\program files\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 2101              		.file 5 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\Libraries\\Device\\
 2102              		.file 6 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsMediaTe
 2103              		.file 7 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsNMEA.h"
 2104              		.file 8 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsUblox.h
 2105              		.file 9 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\Libraries\\CMSIS\\I
DEFINED SYMBOLS
                            *ABS*:00000000 utilities.c
                            *COM*:00000001 mtk19ProcessDataState
                            *COM*:00000001 nmeaProcessDataState
                            *COM*:00000001 ubloxProcessDataState
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:22     .text:00000000 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:27     .text:00000000 constrain
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:86     .text:00000050 GPIO_ToggleBits
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:115    .rodata:00000000 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:116    .rodata:00000000 .LC0
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:123    .text:00000070 i2a
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:182    .text:000000c4 itoa
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:256    .rodata:00000028 .LC1
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:264    .text:00000130 ftoa
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:458    .text:000002c4 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:463    .text:000002cc $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:468    .text:000002cc _sbrk
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:2095   .bss:00000000 heap_end.8868
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:556    .text:00000344 sphereFit
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:1644   .text:00000ffc $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:1649   .text:00001004 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:1654   .text:00001004 standardRadianFormat
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:1710   .text:0000106c $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:1720   .text:00001078 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:1725   .text:00001078 stringToFloat
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:2078   .text:00001300 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccwWMhfd.s:2094   .bss:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
strlen
strcat
strncpy
_ebss
__aeabi_f2d
__aeabi_d2f
sqrt
__aeabi_dmul
__aeabi_i2d
__aeabi_dadd
__aeabi_ddiv

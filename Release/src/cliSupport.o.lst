   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"cliSupport.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	mtk19ProcessDataState,1,1
  20              		.comm	nmeaProcessDataState,1,1
  21              		.comm	ubloxProcessDataState,1,1
  22              		.section	.rodata
  23              		.align	2
  24              	.LC0:
  25 0000 0A456E74 		.ascii	"\012Entering MAX7456 CLI....\012\012\000"
  25      6572696E 
  25      67204D41 
  25      58373435 
  25      3620434C 
  26              		.align	2
  27              	.LC1:
  28 001c 4D415837 		.ascii	"MAX7456 CLI -> \000"
  28      34353620 
  28      434C4920 
  28      2D3E2000 
  29              		.align	2
  30              	.LC2:
  31 002c 0A00     		.ascii	"\012\000"
  32 002e 0000     		.align	2
  33              	.LC3:
  34 0030 0A4D4158 		.ascii	"\012MAX7456 OSD Status:             \000"
  34      37343536 
  34      204F5344 
  34      20537461 
  34      7475733A 
  35 0052 0000     		.align	2
  36              	.LC4:
  37 0054 456E6162 		.ascii	"Enabled\012\000"
  37      6C65640A 
  37      00
  38 005d 000000   		.align	2
  39              	.LC5:
  40 0060 44697361 		.ascii	"Disabled\012\000"
  40      626C6564 
  40      0A00
  41 006a 0000     		.align	2
  42              	.LC6:
  43 006c 4F534420 		.ascii	"OSD Default Video Standard:     \000"
  43      44656661 
  43      756C7420 
  43      56696465 
  43      6F205374 
  44 008d 000000   		.align	2
  45              	.LC7:
  46 0090 50414C0A 		.ascii	"PAL\012\000"
  46      00
  47 0095 000000   		.align	2
  48              	.LC8:
  49 0098 4E545343 		.ascii	"NTSC\012\000"
  49      0A00
  50 009e 0000     		.align	2
  51              	.LC9:
  52 00a0 4F534420 		.ascii	"OSD Display Units:              \000"
  52      44697370 
  52      6C617920 
  52      556E6974 
  52      733A2020 
  53 00c1 000000   		.align	2
  54              	.LC10:
  55 00c4 4D657472 		.ascii	"Metric\012\000"
  55      69630A00 
  56              		.align	2
  57              	.LC11:
  58 00cc 456E676C 		.ascii	"English\012\000"
  58      6973680A 
  58      00
  59 00d5 000000   		.align	2
  60              	.LC12:
  61 00d8 4F534420 		.ascii	"OSD Altitude Display:           \000"
  61      416C7469 
  61      74756465 
  61      20446973 
  61      706C6179 
  62 00f9 000000   		.align	2
  63              	.LC13:
  64 00fc 4F6E0A00 		.ascii	"On\012\000"
  65              		.align	2
  66              	.LC14:
  67 0100 4F66660A 		.ascii	"Off\012\000"
  67      00
  68 0105 000000   		.align	2
  69              	.LC15:
  70 0108 4F534420 		.ascii	"OSD Artifical Horizon Display:  \000"
  70      41727469 
  70      66696361 
  70      6C20486F 
  70      72697A6F 
  71 0129 000000   		.align	2
  72              	.LC16:
  73 012c 4F534420 		.ascii	"OSD Attitude Display:           \000"
  73      41747469 
  73      74756465 
  73      20446973 
  73      706C6179 
  74 014d 000000   		.align	2
  75              	.LC17:
  76 0150 4F534420 		.ascii	"OSD Heading Display:            \000"
  76      48656164 
  76      696E6720 
  76      44697370 
  76      6C61793A 
  77 0171 000000   		.align	2
  78              	.LC18:
  79 0174 0A4D4158 		.ascii	"\012MAX7456 Reset....\012\012\000"
  79      37343536 
  79      20526573 
  79      65742E2E 
  79      2E2E0A0A 
  80 0189 000000   		.align	2
  81              	.LC19:
  82 018c 0A4D4158 		.ascii	"\012MAX7456 Character Set Displayed....\012\012\000"
  82      37343536 
  82      20436861 
  82      72616374 
  82      65722053 
  83 01b3 00       		.align	2
  84              	.LC20:
  85 01b4 0A457869 		.ascii	"\012Exiting MAX7456 CLI....\012\012\000"
  85      74696E67 
  85      204D4158 
  85      37343536 
  85      20434C49 
  86 01cf 00       		.align	2
  87              	.LC21:
  88 01d0 0A577269 		.ascii	"\012Writing EEPROM Parameters....\012\012\000"
  88      74696E67 
  88      20454550 
  88      524F4D20 
  88      50617261 
  89 01f1 000000   		.align	2
  90              	.LC22:
  91 01f4 27612720 		.ascii	"'a' OSD Configuration\012\000"
  91      4F534420 
  91      436F6E66 
  91      69677572 
  91      6174696F 
  92 020b 00       		.align	2
  93              	.LC23:
  94 020c 27622720 		.ascii	"'b' Enable OSD Altitude Display            'B' Disa"
  94      456E6162 
  94      6C65204F 
  94      53442041 
  94      6C746974 
  95 023f 626C6520 		.ascii	"ble OSD Altitude Display\012\000"
  95      4F534420 
  95      416C7469 
  95      74756465 
  95      20446973 
  96 0259 000000   		.align	2
  97              	.LC24:
  98 025c 27632720 		.ascii	"'c' Enable OSD Artificial Horizon Display  'C' Disa"
  98      456E6162 
  98      6C65204F 
  98      53442041 
  98      72746966 
  99 028f 626C6520 		.ascii	"ble OSD Artificial Horizon Display\012\000"
  99      4F534420 
  99      41727469 
  99      66696369 
  99      616C2048 
 100 02b3 00       		.align	2
 101              	.LC25:
 102 02b4 27642720 		.ascii	"'d' Enable OSD Attitude Display            'D' Disa"
 102      456E6162 
 102      6C65204F 
 102      53442041 
 102      74746974 
 103 02e7 626C6520 		.ascii	"ble OSD Attitude Display\012\000"
 103      4F534420 
 103      41747469 
 103      74756465 
 103      20446973 
 104 0301 000000   		.align	2
 105              	.LC26:
 106 0304 27652720 		.ascii	"'e' Enable OSD Heading Display             'E' Disa"
 106      456E6162 
 106      6C65204F 
 106      53442048 
 106      65616469 
 107 0337 626C6520 		.ascii	"ble OSD Heading Display\012\000"
 107      4F534420 
 107      48656164 
 107      696E6720 
 107      44697370 
 108              		.align	2
 109              	.LC27:
 110 0350 27712720 		.ascii	"'q' Set English Display Units              'Q' Set "
 110      53657420 
 110      456E676C 
 110      69736820 
 110      44697370 
 111 0383 4D657472 		.ascii	"Metric Display Units\012\000"
 111      69632044 
 111      6973706C 
 111      61792055 
 111      6E697473 
 112 0399 000000   		.align	2
 113              	.LC28:
 114 039c 27722720 		.ascii	"'r' Reset MAX7456\012\000"
 114      52657365 
 114      74204D41 
 114      58373435 
 114      360A00
 115 03af 00       		.align	2
 116              	.LC29:
 117 03b0 27732720 		.ascii	"'s' Display MAX7456 Character Set\012\000"
 117      44697370 
 117      6C617920 
 117      4D415837 
 117      34353620 
 118 03d3 00       		.align	2
 119              	.LC30:
 120 03d4 27742720 		.ascii	"'t' Download Font to MAX7456\012\000"
 120      446F776E 
 120      6C6F6164 
 120      20466F6E 
 120      7420746F 
 121 03f2 0000     		.align	2
 122              	.LC31:
 123 03f4 27752720 		.ascii	"'u' Change OSD Installed State\012\000"
 123      4368616E 
 123      6765204F 
 123      53442049 
 123      6E737461 
 124              		.align	2
 125              	.LC32:
 126 0414 27762720 		.ascii	"'v' Change Default Video Standard          'W' Writ"
 126      4368616E 
 126      67652044 
 126      65666175 
 126      6C742056 
 127 0447 65204545 		.ascii	"e EEPROM Parameters\012\000"
 127      50524F4D 
 127      20506172 
 127      616D6574 
 127      6572730A 
 128              		.align	2
 129              	.LC33:
 130 045c 27782720 		.ascii	"'x' Exit Sensor CLI                        '?' Comm"
 130      45786974 
 130      2053656E 
 130      736F7220 
 130      434C4920 
 131 048f 616E6420 		.ascii	"and Summary\012\000"
 131      53756D6D 
 131      6172790A 
 131      00
 132              		.text
 133              		.align	2
 134              		.global	max7456CLI
 135              		.thumb
 136              		.thumb_func
 138              	max7456CLI:
 139              	.LFB111:
 140              		.file 1 "../src/cliSupport.c"
   1:../src/cliSupport.c **** /*
   2:../src/cliSupport.c ****   October 2012
   3:../src/cliSupport.c **** 
   4:../src/cliSupport.c ****   aq32Plus Rev -
   5:../src/cliSupport.c **** 
   6:../src/cliSupport.c ****   Copyright (c) 2012 John Ihlein.  All rights reserved.
   7:../src/cliSupport.c **** 
   8:../src/cliSupport.c ****   Open Source STM32 Based Multicopter Controller Software
   9:../src/cliSupport.c **** 
  10:../src/cliSupport.c ****   Includes code and/or ideas from:
  11:../src/cliSupport.c **** 
  12:../src/cliSupport.c ****   1)AeroQuad
  13:../src/cliSupport.c ****   2)BaseFlight
  14:../src/cliSupport.c ****   3)CH Robotics
  15:../src/cliSupport.c ****   4)MultiWii
  16:../src/cliSupport.c ****   5)S.O.H. Madgwick
  17:../src/cliSupport.c ****   6)UAVX
  18:../src/cliSupport.c **** 
  19:../src/cliSupport.c ****   Designed to run on the AQ32 Flight Control Board
  20:../src/cliSupport.c **** 
  21:../src/cliSupport.c ****   This program is free software: you can redistribute it and/or modify
  22:../src/cliSupport.c ****   it under the terms of the GNU General Public License as published by
  23:../src/cliSupport.c ****   the Free Software Foundation, either version 3 of the License, or
  24:../src/cliSupport.c ****   (at your option) any later version.
  25:../src/cliSupport.c **** 
  26:../src/cliSupport.c ****   This program is distributed in the hope that it will be useful,
  27:../src/cliSupport.c ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
  28:../src/cliSupport.c ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  29:../src/cliSupport.c ****   GNU General Public License for more details.
  30:../src/cliSupport.c **** 
  31:../src/cliSupport.c ****   You should have received a copy of the GNU General Public License
  32:../src/cliSupport.c ****   along with this program. If not, see <http://www.gnu.org/licenses/>.
  33:../src/cliSupport.c **** */
  34:../src/cliSupport.c **** 
  35:../src/cliSupport.c **** ///////////////////////////////////////////////////////////////////////////////
  36:../src/cliSupport.c **** 
  37:../src/cliSupport.c **** #include "board.h"
  38:../src/cliSupport.c **** 
  39:../src/cliSupport.c **** ///////////////////////////////////////////////////////////////////////////////
  40:../src/cliSupport.c **** // MAX7456 CLI
  41:../src/cliSupport.c **** ///////////////////////////////////////////////////////////////////////////////
  42:../src/cliSupport.c **** 
  43:../src/cliSupport.c **** void max7456CLI()
  44:../src/cliSupport.c **** {
 141              		.loc 1 44 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 8
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145 0000 00B5     		push	{lr}
 146              	.LCFI0:
 147              		.cfi_def_cfa_offset 4
 148              		.cfi_offset 14, -4
 149 0002 83B0     		sub	sp, sp, #12
 150              	.LCFI1:
 151              		.cfi_def_cfa_offset 16
  45:../src/cliSupport.c ****     uint8_t  max7456query;
  46:../src/cliSupport.c ****     uint8_t  validQuery = false;
 152              		.loc 1 46 0
 153 0004 4FF00003 		mov	r3, #0
 154 0008 8DF80630 		strb	r3, [sp, #6]
  47:../src/cliSupport.c **** 
  48:../src/cliSupport.c ****     cliBusy = true;
 155              		.loc 1 48 0
 156 000c 40F20003 		movw	r3, #:lower16:cliBusy
 157 0010 C0F20003 		movt	r3, #:upper16:cliBusy
 158 0014 4FF00102 		mov	r2, #1
 159 0018 1A70     		strb	r2, [r3, #0]
  49:../src/cliSupport.c **** 
  50:../src/cliSupport.c ****     uart1Print("\nEntering MAX7456 CLI....\n\n");
 160              		.loc 1 50 0
 161 001a 40F20000 		movw	r0, #:lower16:.LC0
 162 001e C0F20000 		movt	r0, #:upper16:.LC0
 163 0022 FFF7FEFF 		bl	uart1Print
  51:../src/cliSupport.c **** 
  52:../src/cliSupport.c ****    	resetMax7456();
 164              		.loc 1 52 0
 165 0026 FFF7FEFF 		bl	resetMax7456
 166 002a 00E0     		b	.L46
 167              	.L48:
  53:../src/cliSupport.c **** 
  54:../src/cliSupport.c ****     while(true)
  55:../src/cliSupport.c ****     {
  56:../src/cliSupport.c ****     	if (!validQuery) uart1Print("MAX7456 CLI -> ");
  57:../src/cliSupport.c **** 
  58:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
  59:../src/cliSupport.c **** 
  60:../src/cliSupport.c **** 		if (validQuery == false)
  61:../src/cliSupport.c **** 		    max7456query = uart1Read();
  62:../src/cliSupport.c **** 
  63:../src/cliSupport.c **** 		if (!validQuery) uart1Print("\n");
  64:../src/cliSupport.c **** 
  65:../src/cliSupport.c **** 		switch(max7456query)
  66:../src/cliSupport.c **** 		{
  67:../src/cliSupport.c ****             ///////////////////////
  68:../src/cliSupport.c **** 
  69:../src/cliSupport.c ****             case 'a': // OSD Configuration
  70:../src/cliSupport.c ****                 uart1Print("\nMAX7456 OSD Status:             ");
  71:../src/cliSupport.c ****                 if (eepromConfig.osdEnabled)
  72:../src/cliSupport.c ****                 	uart1Print("Enabled\n");
  73:../src/cliSupport.c ****                 else
  74:../src/cliSupport.c ****                	    uart1Print("Disabled\n");
  75:../src/cliSupport.c **** 
  76:../src/cliSupport.c ****                 uart1Print("OSD Default Video Standard:     ");
  77:../src/cliSupport.c ****                 if (eepromConfig.defaultVideoStandard)
  78:../src/cliSupport.c ****                     uart1Print("PAL\n");
  79:../src/cliSupport.c ****                 else
  80:../src/cliSupport.c ****                     uart1Print("NTSC\n");
  81:../src/cliSupport.c **** 
  82:../src/cliSupport.c ****                 uart1Print("OSD Display Units:              ");
  83:../src/cliSupport.c ****                 if (eepromConfig.metricUnits)
  84:../src/cliSupport.c ****                     uart1Print("Metric\n");
  85:../src/cliSupport.c ****                 else
  86:../src/cliSupport.c ****                     uart1Print("English\n");
  87:../src/cliSupport.c **** 
  88:../src/cliSupport.c ****                 uart1Print("OSD Altitude Display:           ");
  89:../src/cliSupport.c ****                 if (eepromConfig.osdDisplayAlt)
  90:../src/cliSupport.c ****                     uart1Print("On\n");
  91:../src/cliSupport.c ****                 else
  92:../src/cliSupport.c ****                     uart1Print("Off\n");
  93:../src/cliSupport.c **** 
  94:../src/cliSupport.c ****                 uart1Print("OSD Artifical Horizon Display:  ");
  95:../src/cliSupport.c ****                 if (eepromConfig.osdDisplayAH)
  96:../src/cliSupport.c ****                     uart1Print("On\n");
  97:../src/cliSupport.c ****                 else
  98:../src/cliSupport.c ****                     uart1Print("Off\n");
  99:../src/cliSupport.c **** 
 100:../src/cliSupport.c ****                 uart1Print("OSD Attitude Display:           ");
 101:../src/cliSupport.c ****                 if (eepromConfig.osdDisplayAtt)
 102:../src/cliSupport.c ****                     uart1Print("On\n");
 103:../src/cliSupport.c ****                 else
 104:../src/cliSupport.c ****                     uart1Print("Off\n");
 105:../src/cliSupport.c **** 
 106:../src/cliSupport.c ****                 uart1Print("OSD Heading Display:            ");
 107:../src/cliSupport.c ****                 if (eepromConfig.osdDisplayHdg)
 108:../src/cliSupport.c ****                     uart1Print("On\n");
 109:../src/cliSupport.c ****                 else
 110:../src/cliSupport.c ****                     uart1Print("Off\n");
 111:../src/cliSupport.c **** 
 112:../src/cliSupport.c ****                 uart1Print("\n");
 113:../src/cliSupport.c ****                 validQuery = false;
 114:../src/cliSupport.c ****                 break;
 115:../src/cliSupport.c **** 
 116:../src/cliSupport.c ****             ///////////////////////
 117:../src/cliSupport.c **** 
 118:../src/cliSupport.c ****             case 'b': // Enable OSD Altitude Display
 119:../src/cliSupport.c ****                 eepromConfig.osdDisplayAlt  = true;
 120:../src/cliSupport.c **** 
 121:../src/cliSupport.c ****                 max7456query = 'a';
 122:../src/cliSupport.c ****                 validQuery = true;
 123:../src/cliSupport.c ****                 break;
 124:../src/cliSupport.c **** 
 125:../src/cliSupport.c ****             ///////////////////////
 126:../src/cliSupport.c **** 
 127:../src/cliSupport.c ****             case 'c': // Enable OSD Artifical Horizon Display
 128:../src/cliSupport.c ****                 eepromConfig.osdDisplayAH  = true;
 129:../src/cliSupport.c ****                 eepromConfig.osdDisplayAtt = false;
 130:../src/cliSupport.c **** 
 131:../src/cliSupport.c ****                 max7456query = 'a';
 132:../src/cliSupport.c ****                 validQuery = true;
 133:../src/cliSupport.c ****                 break;
 134:../src/cliSupport.c **** 
 135:../src/cliSupport.c ****             ///////////////////////
 136:../src/cliSupport.c **** 
 137:../src/cliSupport.c ****             case 'd': // Enable OSD Attitude Display
 138:../src/cliSupport.c ****                 eepromConfig.osdDisplayAtt = true;
 139:../src/cliSupport.c ****                 eepromConfig.osdDisplayAH  = false;
 140:../src/cliSupport.c **** 
 141:../src/cliSupport.c ****                 max7456query = 'a';
 142:../src/cliSupport.c ****                 validQuery = true;
 143:../src/cliSupport.c ****                 break;
 144:../src/cliSupport.c **** 
 145:../src/cliSupport.c ****             ///////////////////////
 146:../src/cliSupport.c **** 
 147:../src/cliSupport.c ****             case 'e': // Enable OSD Heading Display
 148:../src/cliSupport.c ****                 eepromConfig.osdDisplayHdg = true;
 149:../src/cliSupport.c **** 
 150:../src/cliSupport.c ****                 max7456query = 'a';
 151:../src/cliSupport.c ****                 validQuery = true;
 152:../src/cliSupport.c ****                 break;
 153:../src/cliSupport.c **** 
 154:../src/cliSupport.c ****             ///////////////////////
 155:../src/cliSupport.c **** 
 156:../src/cliSupport.c ****             case 'q': // Set English Display Units
 157:../src/cliSupport.c ****                 eepromConfig.metricUnits = false;
 158:../src/cliSupport.c **** 
 159:../src/cliSupport.c ****                 max7456query = 'a';
 160:../src/cliSupport.c ****                 validQuery = true;
 161:../src/cliSupport.c ****                 break;
 162:../src/cliSupport.c **** 
 163:../src/cliSupport.c ****             ///////////////////////
 164:../src/cliSupport.c **** 
 165:../src/cliSupport.c ****             case 'r': // Reset MAX7456
 166:../src/cliSupport.c ****                 resetMax7456();
 167:../src/cliSupport.c ****                 uart1Print("\nMAX7456 Reset....\n\n");
 168:../src/cliSupport.c ****                 break;
 169:../src/cliSupport.c **** 
 170:../src/cliSupport.c ****             ///////////////////////
 171:../src/cliSupport.c **** 
 172:../src/cliSupport.c ****             case 's': // Show character set
 173:../src/cliSupport.c ****                 showMax7456Font();
 174:../src/cliSupport.c ****                 uart1Print("\nMAX7456 Character Set Displayed....\n\n");
 175:../src/cliSupport.c ****                 break;
 176:../src/cliSupport.c **** 
 177:../src/cliSupport.c ****             ///////////////////////
 178:../src/cliSupport.c **** 
 179:../src/cliSupport.c ****             case 't': // Download font
 180:../src/cliSupport.c ****                 downloadMax7456Font();
 181:../src/cliSupport.c ****                 break;
 182:../src/cliSupport.c **** 
 183:../src/cliSupport.c ****             ///////////////////////
 184:../src/cliSupport.c **** 
 185:../src/cliSupport.c ****             case 'u': // Toggle OSD enabled status
 186:../src/cliSupport.c ****    			    if (eepromConfig.osdEnabled)                   // If  Enabled
 187:../src/cliSupport.c ****    			        eepromConfig.osdEnabled = false;           // Set Disabled
 188:../src/cliSupport.c ****    			    else
 189:../src/cliSupport.c ****    			    {                                              // If  Disabled
 190:../src/cliSupport.c ****    			        eepromConfig.osdEnabled = true;            // Set Enabled
 191:../src/cliSupport.c ****                     initMax7456();                             // and call init procedure
 192:../src/cliSupport.c **** 				}
 193:../src/cliSupport.c **** 
 194:../src/cliSupport.c ****                 max7456query = 'a';
 195:../src/cliSupport.c ****                 validQuery = true;
 196:../src/cliSupport.c ****    				break;
 197:../src/cliSupport.c **** 
 198:../src/cliSupport.c **** 			///////////////////////
 199:../src/cliSupport.c **** 
 200:../src/cliSupport.c ****    		    case 'v': // Toggle default video standard
 201:../src/cliSupport.c ****    			    if (eepromConfig.defaultVideoStandard)         // If  PAL
 202:../src/cliSupport.c ****    			        eepromConfig.defaultVideoStandard = NTSC;  // Set NTSC
 203:../src/cliSupport.c ****    			    else                                           // If  NTSC
 204:../src/cliSupport.c ****    			        eepromConfig.defaultVideoStandard = PAL;   // Set PAL
 205:../src/cliSupport.c **** 
 206:../src/cliSupport.c ****                 max7456query = 'a';
 207:../src/cliSupport.c ****                 validQuery = true;
 208:../src/cliSupport.c ****    				break;
 209:../src/cliSupport.c **** 
 210:../src/cliSupport.c ****    		    ///////////////////////
 211:../src/cliSupport.c **** 
 212:../src/cliSupport.c ****    			case 'x':
 213:../src/cliSupport.c ****    			    uart1Print("\nExiting MAX7456 CLI....\n\n");
 214:../src/cliSupport.c ****    			    cliBusy = false;
 215:../src/cliSupport.c ****    			    return;
 216:../src/cliSupport.c ****    			    break;
 217:../src/cliSupport.c **** 
 218:../src/cliSupport.c ****             ///////////////////////
 219:../src/cliSupport.c **** 
 220:../src/cliSupport.c ****             case 'B': // Disable OSD Altitude Display
 221:../src/cliSupport.c ****                 eepromConfig.osdDisplayAlt = false;
 222:../src/cliSupport.c **** 
 223:../src/cliSupport.c ****                 max7456query = 'a';
 224:../src/cliSupport.c ****                 validQuery = true;
 225:../src/cliSupport.c ****                 break;
 226:../src/cliSupport.c **** 
 227:../src/cliSupport.c ****             ///////////////////////
 228:../src/cliSupport.c **** 
 229:../src/cliSupport.c ****             case 'C': // Disable OSD Artifical Horizon Display
 230:../src/cliSupport.c ****                 eepromConfig.osdDisplayAH = false;
 231:../src/cliSupport.c **** 
 232:../src/cliSupport.c ****                 max7456query = 'a';
 233:../src/cliSupport.c ****                 validQuery = true;
 234:../src/cliSupport.c ****                 break;
 235:../src/cliSupport.c **** 
 236:../src/cliSupport.c ****             ///////////////////////
 237:../src/cliSupport.c **** 
 238:../src/cliSupport.c ****             case 'D': // Disable OSD Attitude Display
 239:../src/cliSupport.c ****                 eepromConfig.osdDisplayAtt = false;
 240:../src/cliSupport.c **** 
 241:../src/cliSupport.c ****                 max7456query = 'a';
 242:../src/cliSupport.c ****                 validQuery = true;
 243:../src/cliSupport.c ****                 break;
 244:../src/cliSupport.c **** 
 245:../src/cliSupport.c ****             ///////////////////////
 246:../src/cliSupport.c **** 
 247:../src/cliSupport.c ****             case 'E': // Disable OSD Heading Display
 248:../src/cliSupport.c ****                 eepromConfig.osdDisplayHdg = false;
 249:../src/cliSupport.c **** 
 250:../src/cliSupport.c ****                 max7456query = 'a';
 251:../src/cliSupport.c ****                 validQuery = true;
 252:../src/cliSupport.c ****                 break;
 253:../src/cliSupport.c **** 
 254:../src/cliSupport.c ****            ///////////////////////
 255:../src/cliSupport.c **** 
 256:../src/cliSupport.c ****            case 'Q': // Set Metric Display Units
 257:../src/cliSupport.c ****                 eepromConfig.metricUnits = true;
 258:../src/cliSupport.c **** 
 259:../src/cliSupport.c ****                 max7456query = 'a';
 260:../src/cliSupport.c ****                 validQuery = true;
 261:../src/cliSupport.c ****                 break;
 262:../src/cliSupport.c **** 
 263:../src/cliSupport.c ****             ///////////////////////////
 264:../src/cliSupport.c **** 
 265:../src/cliSupport.c ****             case 'W': // Write EEPROM Parameters
 266:../src/cliSupport.c ****                 uart1Print("\nWriting EEPROM Parameters....\n\n");
 267:../src/cliSupport.c ****                 writeEEPROM();
 268:../src/cliSupport.c ****                 break;
 269:../src/cliSupport.c **** 
 270:../src/cliSupport.c ****     		///////////////////////
 271:../src/cliSupport.c **** 
 272:../src/cliSupport.c **** 			case '?':
 273:../src/cliSupport.c **** 			   	uart1Print("\n");
 274:../src/cliSupport.c **** 			   	uart1Print("'a' OSD Configuration\n");
 275:../src/cliSupport.c **** 			    uart1Print("'b' Enable OSD Altitude Display            'B' Disable OSD Altitude Display\n");
 276:../src/cliSupport.c **** 			   	uart1Print("'c' Enable OSD Artificial Horizon Display  'C' Disable OSD Artificial Horizon Di
 277:../src/cliSupport.c **** 			   	uart1Print("'d' Enable OSD Attitude Display            'D' Disable OSD Attitude Display\n");
 278:../src/cliSupport.c **** 			   	uart1Print("'e' Enable OSD Heading Display             'E' Disable OSD Heading Display\n");
 279:../src/cliSupport.c **** 			   	uart1Print("'q' Set English Display Units              'Q' Set Metric Display Units\n");
 280:../src/cliSupport.c **** 			    uart1Print("'r' Reset MAX7456\n");
 281:../src/cliSupport.c **** 			   	uart1Print("'s' Display MAX7456 Character Set\n");
 282:../src/cliSupport.c **** 			   	uart1Print("'t' Download Font to MAX7456\n");
 283:../src/cliSupport.c **** 			   	uart1Print("'u' Change OSD Installed State\n");
 284:../src/cliSupport.c **** 			   	uart1Print("'v' Change Default Video Standard          'W' Write EEPROM Parameters\n");
 285:../src/cliSupport.c **** 			   	uart1Print("'x' Exit Sensor CLI                        '?' Command Summary\n");
 286:../src/cliSupport.c **** 			   	uart1Print("\n");
 287:../src/cliSupport.c **** 	    	    break;
 288:../src/cliSupport.c **** 
 289:../src/cliSupport.c **** 	    	///////////////////////
 290:../src/cliSupport.c **** 	    }
 291:../src/cliSupport.c ****     }
 168              		.loc 1 291 0
 169 002c 00BF     		nop
 170              	.L46:
  56:../src/cliSupport.c ****     	if (!validQuery) uart1Print("MAX7456 CLI -> ");
 171              		.loc 1 56 0
 172 002e 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 173 0032 002B     		cmp	r3, #0
 174 0034 05D1     		bne	.L47
  56:../src/cliSupport.c ****     	if (!validQuery) uart1Print("MAX7456 CLI -> ");
 175              		.loc 1 56 0 is_stmt 0 discriminator 1
 176 0036 40F20000 		movw	r0, #:lower16:.LC1
 177 003a C0F20000 		movt	r0, #:upper16:.LC1
 178 003e FFF7FEFF 		bl	uart1Print
 179              	.L47:
  58:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
 180              		.loc 1 58 0 is_stmt 1
 181 0042 00BF     		nop
 182              	.L4:
  58:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
 183              		.loc 1 58 0 is_stmt 0 discriminator 1
 184 0044 FFF7FEFF 		bl	uart1Available
 185 0048 0346     		mov	r3, r0
 186 004a 002B     		cmp	r3, #0
 187 004c 03D1     		bne	.L3
  58:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
 188              		.loc 1 58 0 discriminator 2
 189 004e 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 190 0052 002B     		cmp	r3, #0
 191 0054 F6D0     		beq	.L4
 192              	.L3:
  60:../src/cliSupport.c **** 		if (validQuery == false)
 193              		.loc 1 60 0 is_stmt 1
 194 0056 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 195 005a 002B     		cmp	r3, #0
 196 005c 04D1     		bne	.L5
  61:../src/cliSupport.c **** 		    max7456query = uart1Read();
 197              		.loc 1 61 0
 198 005e FFF7FEFF 		bl	uart1Read
 199 0062 0346     		mov	r3, r0
 200 0064 8DF80730 		strb	r3, [sp, #7]
 201              	.L5:
  63:../src/cliSupport.c **** 		if (!validQuery) uart1Print("\n");
 202              		.loc 1 63 0
 203 0068 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 204 006c 002B     		cmp	r3, #0
 205 006e 05D1     		bne	.L6
  63:../src/cliSupport.c **** 		if (!validQuery) uart1Print("\n");
 206              		.loc 1 63 0 is_stmt 0 discriminator 1
 207 0070 40F20000 		movw	r0, #:lower16:.LC2
 208 0074 C0F20000 		movt	r0, #:upper16:.LC2
 209 0078 FFF7FEFF 		bl	uart1Print
 210              	.L6:
  65:../src/cliSupport.c **** 		switch(max7456query)
 211              		.loc 1 65 0 is_stmt 1
 212 007c 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 213 0080 A3F13F03 		sub	r3, r3, #63
 214 0084 392B     		cmp	r3, #57
 215 0086 D1D8     		bhi	.L48
 216 0088 01A2     		adr	r2, .L27
 217 008a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 218 008e 00BF     		.align	2
 219              	.L27:
 220 0090 63050000 		.word	.L8+1
 221 0094 2D000000 		.word	.L48+1
 222 0098 2D000000 		.word	.L48+1
 223 009c A7040000 		.word	.L9+1
 224 00a0 C9040000 		.word	.L10+1
 225 00a4 EB040000 		.word	.L11+1
 226 00a8 0D050000 		.word	.L12+1
 227 00ac 2D000000 		.word	.L48+1
 228 00b0 2D000000 		.word	.L48+1
 229 00b4 2D000000 		.word	.L48+1
 230 00b8 2D000000 		.word	.L48+1
 231 00bc 2D000000 		.word	.L48+1
 232 00c0 2D000000 		.word	.L48+1
 233 00c4 2D000000 		.word	.L48+1
 234 00c8 2D000000 		.word	.L48+1
 235 00cc 2D000000 		.word	.L48+1
 236 00d0 2D000000 		.word	.L48+1
 237 00d4 2D000000 		.word	.L48+1
 238 00d8 2F050000 		.word	.L13+1
 239 00dc 2D000000 		.word	.L48+1
 240 00e0 2D000000 		.word	.L48+1
 241 00e4 2D000000 		.word	.L48+1
 242 00e8 2D000000 		.word	.L48+1
 243 00ec 2D000000 		.word	.L48+1
 244 00f0 51050000 		.word	.L14+1
 245 00f4 2D000000 		.word	.L48+1
 246 00f8 2D000000 		.word	.L48+1
 247 00fc 2D000000 		.word	.L48+1
 248 0100 2D000000 		.word	.L48+1
 249 0104 2D000000 		.word	.L48+1
 250 0108 2D000000 		.word	.L48+1
 251 010c 2D000000 		.word	.L48+1
 252 0110 2D000000 		.word	.L48+1
 253 0114 2D000000 		.word	.L48+1
 254 0118 79010000 		.word	.L15+1
 255 011c 09030000 		.word	.L16+1
 256 0120 2B030000 		.word	.L17+1
 257 0124 5D030000 		.word	.L18+1
 258 0128 8F030000 		.word	.L19+1
 259 012c 2D000000 		.word	.L48+1
 260 0130 2D000000 		.word	.L48+1
 261 0134 2D000000 		.word	.L48+1
 262 0138 2D000000 		.word	.L48+1
 263 013c 2D000000 		.word	.L48+1
 264 0140 2D000000 		.word	.L48+1
 265 0144 2D000000 		.word	.L48+1
 266 0148 2D000000 		.word	.L48+1
 267 014c 2D000000 		.word	.L48+1
 268 0150 2D000000 		.word	.L48+1
 269 0154 2D000000 		.word	.L48+1
 270 0158 B1030000 		.word	.L20+1
 271 015c D3030000 		.word	.L21+1
 272 0160 E5030000 		.word	.L22+1
 273 0164 F7030000 		.word	.L23+1
 274 0168 FD030000 		.word	.L24+1
 275 016c 45040000 		.word	.L25+1
 276 0170 2D000000 		.word	.L48+1
 277 0174 89040000 		.word	.L26+1
 278              	.L15:
  70:../src/cliSupport.c ****                 uart1Print("\nMAX7456 OSD Status:             ");
 279              		.loc 1 70 0
 280 0178 40F20000 		movw	r0, #:lower16:.LC3
 281 017c C0F20000 		movt	r0, #:upper16:.LC3
 282 0180 FFF7FEFF 		bl	uart1Print
  71:../src/cliSupport.c ****                 if (eepromConfig.osdEnabled)
 283              		.loc 1 71 0
 284 0184 40F20003 		movw	r3, #:lower16:eepromConfig
 285 0188 C0F20003 		movt	r3, #:upper16:eepromConfig
 286 018c 93F84433 		ldrb	r3, [r3, #836]	@ zero_extendqisi2
 287 0190 002B     		cmp	r3, #0
 288 0192 06D0     		beq	.L28
  72:../src/cliSupport.c ****                 	uart1Print("Enabled\n");
 289              		.loc 1 72 0
 290 0194 40F20000 		movw	r0, #:lower16:.LC4
 291 0198 C0F20000 		movt	r0, #:upper16:.LC4
 292 019c FFF7FEFF 		bl	uart1Print
 293 01a0 05E0     		b	.L29
 294              	.L28:
  74:../src/cliSupport.c ****                	    uart1Print("Disabled\n");
 295              		.loc 1 74 0
 296 01a2 40F20000 		movw	r0, #:lower16:.LC5
 297 01a6 C0F20000 		movt	r0, #:upper16:.LC5
 298 01aa FFF7FEFF 		bl	uart1Print
 299              	.L29:
  76:../src/cliSupport.c ****                 uart1Print("OSD Default Video Standard:     ");
 300              		.loc 1 76 0
 301 01ae 40F20000 		movw	r0, #:lower16:.LC6
 302 01b2 C0F20000 		movt	r0, #:upper16:.LC6
 303 01b6 FFF7FEFF 		bl	uart1Print
  77:../src/cliSupport.c ****                 if (eepromConfig.defaultVideoStandard)
 304              		.loc 1 77 0
 305 01ba 40F20003 		movw	r3, #:lower16:eepromConfig
 306 01be C0F20003 		movt	r3, #:upper16:eepromConfig
 307 01c2 93F84533 		ldrb	r3, [r3, #837]	@ zero_extendqisi2
 308 01c6 002B     		cmp	r3, #0
 309 01c8 06D0     		beq	.L30
  78:../src/cliSupport.c ****                     uart1Print("PAL\n");
 310              		.loc 1 78 0
 311 01ca 40F20000 		movw	r0, #:lower16:.LC7
 312 01ce C0F20000 		movt	r0, #:upper16:.LC7
 313 01d2 FFF7FEFF 		bl	uart1Print
 314 01d6 05E0     		b	.L31
 315              	.L30:
  80:../src/cliSupport.c ****                     uart1Print("NTSC\n");
 316              		.loc 1 80 0
 317 01d8 40F20000 		movw	r0, #:lower16:.LC8
 318 01dc C0F20000 		movt	r0, #:upper16:.LC8
 319 01e0 FFF7FEFF 		bl	uart1Print
 320              	.L31:
  82:../src/cliSupport.c ****                 uart1Print("OSD Display Units:              ");
 321              		.loc 1 82 0
 322 01e4 40F20000 		movw	r0, #:lower16:.LC9
 323 01e8 C0F20000 		movt	r0, #:upper16:.LC9
 324 01ec FFF7FEFF 		bl	uart1Print
  83:../src/cliSupport.c ****                 if (eepromConfig.metricUnits)
 325              		.loc 1 83 0
 326 01f0 40F20003 		movw	r3, #:lower16:eepromConfig
 327 01f4 C0F20003 		movt	r3, #:upper16:eepromConfig
 328 01f8 93F84633 		ldrb	r3, [r3, #838]	@ zero_extendqisi2
 329 01fc 002B     		cmp	r3, #0
 330 01fe 06D0     		beq	.L32
  84:../src/cliSupport.c ****                     uart1Print("Metric\n");
 331              		.loc 1 84 0
 332 0200 40F20000 		movw	r0, #:lower16:.LC10
 333 0204 C0F20000 		movt	r0, #:upper16:.LC10
 334 0208 FFF7FEFF 		bl	uart1Print
 335 020c 05E0     		b	.L33
 336              	.L32:
  86:../src/cliSupport.c ****                     uart1Print("English\n");
 337              		.loc 1 86 0
 338 020e 40F20000 		movw	r0, #:lower16:.LC11
 339 0212 C0F20000 		movt	r0, #:upper16:.LC11
 340 0216 FFF7FEFF 		bl	uart1Print
 341              	.L33:
  88:../src/cliSupport.c ****                 uart1Print("OSD Altitude Display:           ");
 342              		.loc 1 88 0
 343 021a 40F20000 		movw	r0, #:lower16:.LC12
 344 021e C0F20000 		movt	r0, #:upper16:.LC12
 345 0222 FFF7FEFF 		bl	uart1Print
  89:../src/cliSupport.c ****                 if (eepromConfig.osdDisplayAlt)
 346              		.loc 1 89 0
 347 0226 40F20003 		movw	r3, #:lower16:eepromConfig
 348 022a C0F20003 		movt	r3, #:upper16:eepromConfig
 349 022e 93F84733 		ldrb	r3, [r3, #839]	@ zero_extendqisi2
 350 0232 002B     		cmp	r3, #0
 351 0234 06D0     		beq	.L34
  90:../src/cliSupport.c ****                     uart1Print("On\n");
 352              		.loc 1 90 0
 353 0236 40F20000 		movw	r0, #:lower16:.LC13
 354 023a C0F20000 		movt	r0, #:upper16:.LC13
 355 023e FFF7FEFF 		bl	uart1Print
 356 0242 05E0     		b	.L35
 357              	.L34:
  92:../src/cliSupport.c ****                     uart1Print("Off\n");
 358              		.loc 1 92 0
 359 0244 40F20000 		movw	r0, #:lower16:.LC14
 360 0248 C0F20000 		movt	r0, #:upper16:.LC14
 361 024c FFF7FEFF 		bl	uart1Print
 362              	.L35:
  94:../src/cliSupport.c ****                 uart1Print("OSD Artifical Horizon Display:  ");
 363              		.loc 1 94 0
 364 0250 40F20000 		movw	r0, #:lower16:.LC15
 365 0254 C0F20000 		movt	r0, #:upper16:.LC15
 366 0258 FFF7FEFF 		bl	uart1Print
  95:../src/cliSupport.c ****                 if (eepromConfig.osdDisplayAH)
 367              		.loc 1 95 0
 368 025c 40F20003 		movw	r3, #:lower16:eepromConfig
 369 0260 C0F20003 		movt	r3, #:upper16:eepromConfig
 370 0264 93F84833 		ldrb	r3, [r3, #840]	@ zero_extendqisi2
 371 0268 002B     		cmp	r3, #0
 372 026a 06D0     		beq	.L36
  96:../src/cliSupport.c ****                     uart1Print("On\n");
 373              		.loc 1 96 0
 374 026c 40F20000 		movw	r0, #:lower16:.LC13
 375 0270 C0F20000 		movt	r0, #:upper16:.LC13
 376 0274 FFF7FEFF 		bl	uart1Print
 377 0278 05E0     		b	.L37
 378              	.L36:
  98:../src/cliSupport.c ****                     uart1Print("Off\n");
 379              		.loc 1 98 0
 380 027a 40F20000 		movw	r0, #:lower16:.LC14
 381 027e C0F20000 		movt	r0, #:upper16:.LC14
 382 0282 FFF7FEFF 		bl	uart1Print
 383              	.L37:
 100:../src/cliSupport.c ****                 uart1Print("OSD Attitude Display:           ");
 384              		.loc 1 100 0
 385 0286 40F20000 		movw	r0, #:lower16:.LC16
 386 028a C0F20000 		movt	r0, #:upper16:.LC16
 387 028e FFF7FEFF 		bl	uart1Print
 101:../src/cliSupport.c ****                 if (eepromConfig.osdDisplayAtt)
 388              		.loc 1 101 0
 389 0292 40F20003 		movw	r3, #:lower16:eepromConfig
 390 0296 C0F20003 		movt	r3, #:upper16:eepromConfig
 391 029a 93F84933 		ldrb	r3, [r3, #841]	@ zero_extendqisi2
 392 029e 002B     		cmp	r3, #0
 393 02a0 06D0     		beq	.L38
 102:../src/cliSupport.c ****                     uart1Print("On\n");
 394              		.loc 1 102 0
 395 02a2 40F20000 		movw	r0, #:lower16:.LC13
 396 02a6 C0F20000 		movt	r0, #:upper16:.LC13
 397 02aa FFF7FEFF 		bl	uart1Print
 398 02ae 05E0     		b	.L39
 399              	.L38:
 104:../src/cliSupport.c ****                     uart1Print("Off\n");
 400              		.loc 1 104 0
 401 02b0 40F20000 		movw	r0, #:lower16:.LC14
 402 02b4 C0F20000 		movt	r0, #:upper16:.LC14
 403 02b8 FFF7FEFF 		bl	uart1Print
 404              	.L39:
 106:../src/cliSupport.c ****                 uart1Print("OSD Heading Display:            ");
 405              		.loc 1 106 0
 406 02bc 40F20000 		movw	r0, #:lower16:.LC17
 407 02c0 C0F20000 		movt	r0, #:upper16:.LC17
 408 02c4 FFF7FEFF 		bl	uart1Print
 107:../src/cliSupport.c ****                 if (eepromConfig.osdDisplayHdg)
 409              		.loc 1 107 0
 410 02c8 40F20003 		movw	r3, #:lower16:eepromConfig
 411 02cc C0F20003 		movt	r3, #:upper16:eepromConfig
 412 02d0 93F84A33 		ldrb	r3, [r3, #842]	@ zero_extendqisi2
 413 02d4 002B     		cmp	r3, #0
 414 02d6 06D0     		beq	.L40
 108:../src/cliSupport.c ****                     uart1Print("On\n");
 415              		.loc 1 108 0
 416 02d8 40F20000 		movw	r0, #:lower16:.LC13
 417 02dc C0F20000 		movt	r0, #:upper16:.LC13
 418 02e0 FFF7FEFF 		bl	uart1Print
 419 02e4 05E0     		b	.L41
 420              	.L40:
 110:../src/cliSupport.c ****                     uart1Print("Off\n");
 421              		.loc 1 110 0
 422 02e6 40F20000 		movw	r0, #:lower16:.LC14
 423 02ea C0F20000 		movt	r0, #:upper16:.LC14
 424 02ee FFF7FEFF 		bl	uart1Print
 425              	.L41:
 112:../src/cliSupport.c ****                 uart1Print("\n");
 426              		.loc 1 112 0
 427 02f2 40F20000 		movw	r0, #:lower16:.LC2
 428 02f6 C0F20000 		movt	r0, #:upper16:.LC2
 429 02fa FFF7FEFF 		bl	uart1Print
 113:../src/cliSupport.c ****                 validQuery = false;
 430              		.loc 1 113 0
 431 02fe 4FF00003 		mov	r3, #0
 432 0302 8DF80630 		strb	r3, [sp, #6]
 114:../src/cliSupport.c ****                 break;
 433              		.loc 1 114 0
 434 0306 81E1     		b	.L7
 435              	.L16:
 119:../src/cliSupport.c ****                 eepromConfig.osdDisplayAlt  = true;
 436              		.loc 1 119 0
 437 0308 40F20003 		movw	r3, #:lower16:eepromConfig
 438 030c C0F20003 		movt	r3, #:upper16:eepromConfig
 439 0310 4FF00102 		mov	r2, #1
 440 0314 83F84723 		strb	r2, [r3, #839]
 121:../src/cliSupport.c ****                 max7456query = 'a';
 441              		.loc 1 121 0
 442 0318 4FF06103 		mov	r3, #97
 443 031c 8DF80730 		strb	r3, [sp, #7]
 122:../src/cliSupport.c ****                 validQuery = true;
 444              		.loc 1 122 0
 445 0320 4FF00103 		mov	r3, #1
 446 0324 8DF80630 		strb	r3, [sp, #6]
 123:../src/cliSupport.c ****                 break;
 447              		.loc 1 123 0
 448 0328 70E1     		b	.L7
 449              	.L17:
 128:../src/cliSupport.c ****                 eepromConfig.osdDisplayAH  = true;
 450              		.loc 1 128 0
 451 032a 40F20003 		movw	r3, #:lower16:eepromConfig
 452 032e C0F20003 		movt	r3, #:upper16:eepromConfig
 453 0332 4FF00102 		mov	r2, #1
 454 0336 83F84823 		strb	r2, [r3, #840]
 129:../src/cliSupport.c ****                 eepromConfig.osdDisplayAtt = false;
 455              		.loc 1 129 0
 456 033a 40F20003 		movw	r3, #:lower16:eepromConfig
 457 033e C0F20003 		movt	r3, #:upper16:eepromConfig
 458 0342 4FF00002 		mov	r2, #0
 459 0346 83F84923 		strb	r2, [r3, #841]
 131:../src/cliSupport.c ****                 max7456query = 'a';
 460              		.loc 1 131 0
 461 034a 4FF06103 		mov	r3, #97
 462 034e 8DF80730 		strb	r3, [sp, #7]
 132:../src/cliSupport.c ****                 validQuery = true;
 463              		.loc 1 132 0
 464 0352 4FF00103 		mov	r3, #1
 465 0356 8DF80630 		strb	r3, [sp, #6]
 133:../src/cliSupport.c ****                 break;
 466              		.loc 1 133 0
 467 035a 57E1     		b	.L7
 468              	.L18:
 138:../src/cliSupport.c ****                 eepromConfig.osdDisplayAtt = true;
 469              		.loc 1 138 0
 470 035c 40F20003 		movw	r3, #:lower16:eepromConfig
 471 0360 C0F20003 		movt	r3, #:upper16:eepromConfig
 472 0364 4FF00102 		mov	r2, #1
 473 0368 83F84923 		strb	r2, [r3, #841]
 139:../src/cliSupport.c ****                 eepromConfig.osdDisplayAH  = false;
 474              		.loc 1 139 0
 475 036c 40F20003 		movw	r3, #:lower16:eepromConfig
 476 0370 C0F20003 		movt	r3, #:upper16:eepromConfig
 477 0374 4FF00002 		mov	r2, #0
 478 0378 83F84823 		strb	r2, [r3, #840]
 141:../src/cliSupport.c ****                 max7456query = 'a';
 479              		.loc 1 141 0
 480 037c 4FF06103 		mov	r3, #97
 481 0380 8DF80730 		strb	r3, [sp, #7]
 142:../src/cliSupport.c ****                 validQuery = true;
 482              		.loc 1 142 0
 483 0384 4FF00103 		mov	r3, #1
 484 0388 8DF80630 		strb	r3, [sp, #6]
 143:../src/cliSupport.c ****                 break;
 485              		.loc 1 143 0
 486 038c 3EE1     		b	.L7
 487              	.L19:
 148:../src/cliSupport.c ****                 eepromConfig.osdDisplayHdg = true;
 488              		.loc 1 148 0
 489 038e 40F20003 		movw	r3, #:lower16:eepromConfig
 490 0392 C0F20003 		movt	r3, #:upper16:eepromConfig
 491 0396 4FF00102 		mov	r2, #1
 492 039a 83F84A23 		strb	r2, [r3, #842]
 150:../src/cliSupport.c ****                 max7456query = 'a';
 493              		.loc 1 150 0
 494 039e 4FF06103 		mov	r3, #97
 495 03a2 8DF80730 		strb	r3, [sp, #7]
 151:../src/cliSupport.c ****                 validQuery = true;
 496              		.loc 1 151 0
 497 03a6 4FF00103 		mov	r3, #1
 498 03aa 8DF80630 		strb	r3, [sp, #6]
 152:../src/cliSupport.c ****                 break;
 499              		.loc 1 152 0
 500 03ae 2DE1     		b	.L7
 501              	.L20:
 157:../src/cliSupport.c ****                 eepromConfig.metricUnits = false;
 502              		.loc 1 157 0
 503 03b0 40F20003 		movw	r3, #:lower16:eepromConfig
 504 03b4 C0F20003 		movt	r3, #:upper16:eepromConfig
 505 03b8 4FF00002 		mov	r2, #0
 506 03bc 83F84623 		strb	r2, [r3, #838]
 159:../src/cliSupport.c ****                 max7456query = 'a';
 507              		.loc 1 159 0
 508 03c0 4FF06103 		mov	r3, #97
 509 03c4 8DF80730 		strb	r3, [sp, #7]
 160:../src/cliSupport.c ****                 validQuery = true;
 510              		.loc 1 160 0
 511 03c8 4FF00103 		mov	r3, #1
 512 03cc 8DF80630 		strb	r3, [sp, #6]
 161:../src/cliSupport.c ****                 break;
 513              		.loc 1 161 0
 514 03d0 1CE1     		b	.L7
 515              	.L21:
 166:../src/cliSupport.c ****                 resetMax7456();
 516              		.loc 1 166 0
 517 03d2 FFF7FEFF 		bl	resetMax7456
 167:../src/cliSupport.c ****                 uart1Print("\nMAX7456 Reset....\n\n");
 518              		.loc 1 167 0
 519 03d6 40F20000 		movw	r0, #:lower16:.LC18
 520 03da C0F20000 		movt	r0, #:upper16:.LC18
 521 03de FFF7FEFF 		bl	uart1Print
 168:../src/cliSupport.c ****                 break;
 522              		.loc 1 168 0
 523 03e2 13E1     		b	.L7
 524              	.L22:
 173:../src/cliSupport.c ****                 showMax7456Font();
 525              		.loc 1 173 0
 526 03e4 FFF7FEFF 		bl	showMax7456Font
 174:../src/cliSupport.c ****                 uart1Print("\nMAX7456 Character Set Displayed....\n\n");
 527              		.loc 1 174 0
 528 03e8 40F20000 		movw	r0, #:lower16:.LC19
 529 03ec C0F20000 		movt	r0, #:upper16:.LC19
 530 03f0 FFF7FEFF 		bl	uart1Print
 175:../src/cliSupport.c ****                 break;
 531              		.loc 1 175 0
 532 03f4 0AE1     		b	.L7
 533              	.L23:
 180:../src/cliSupport.c ****                 downloadMax7456Font();
 534              		.loc 1 180 0
 535 03f6 FFF7FEFF 		bl	downloadMax7456Font
 181:../src/cliSupport.c ****                 break;
 536              		.loc 1 181 0
 537 03fa 07E1     		b	.L7
 538              	.L24:
 186:../src/cliSupport.c ****    			    if (eepromConfig.osdEnabled)                   // If  Enabled
 539              		.loc 1 186 0
 540 03fc 40F20003 		movw	r3, #:lower16:eepromConfig
 541 0400 C0F20003 		movt	r3, #:upper16:eepromConfig
 542 0404 93F84433 		ldrb	r3, [r3, #836]	@ zero_extendqisi2
 543 0408 002B     		cmp	r3, #0
 544 040a 08D0     		beq	.L42
 187:../src/cliSupport.c ****    			        eepromConfig.osdEnabled = false;           // Set Disabled
 545              		.loc 1 187 0
 546 040c 40F20003 		movw	r3, #:lower16:eepromConfig
 547 0410 C0F20003 		movt	r3, #:upper16:eepromConfig
 548 0414 4FF00002 		mov	r2, #0
 549 0418 83F84423 		strb	r2, [r3, #836]
 550 041c 09E0     		b	.L43
 551              	.L42:
 190:../src/cliSupport.c ****    			        eepromConfig.osdEnabled = true;            // Set Enabled
 552              		.loc 1 190 0
 553 041e 40F20003 		movw	r3, #:lower16:eepromConfig
 554 0422 C0F20003 		movt	r3, #:upper16:eepromConfig
 555 0426 4FF00102 		mov	r2, #1
 556 042a 83F84423 		strb	r2, [r3, #836]
 191:../src/cliSupport.c ****                     initMax7456();                             // and call init procedure
 557              		.loc 1 191 0
 558 042e FFF7FEFF 		bl	initMax7456
 559              	.L43:
 194:../src/cliSupport.c ****                 max7456query = 'a';
 560              		.loc 1 194 0
 561 0432 4FF06103 		mov	r3, #97
 562 0436 8DF80730 		strb	r3, [sp, #7]
 195:../src/cliSupport.c ****                 validQuery = true;
 563              		.loc 1 195 0
 564 043a 4FF00103 		mov	r3, #1
 565 043e 8DF80630 		strb	r3, [sp, #6]
 196:../src/cliSupport.c ****    				break;
 566              		.loc 1 196 0
 567 0442 E3E0     		b	.L7
 568              	.L25:
 201:../src/cliSupport.c ****    			    if (eepromConfig.defaultVideoStandard)         // If  PAL
 569              		.loc 1 201 0
 570 0444 40F20003 		movw	r3, #:lower16:eepromConfig
 571 0448 C0F20003 		movt	r3, #:upper16:eepromConfig
 572 044c 93F84533 		ldrb	r3, [r3, #837]	@ zero_extendqisi2
 573 0450 002B     		cmp	r3, #0
 574 0452 08D0     		beq	.L44
 202:../src/cliSupport.c ****    			        eepromConfig.defaultVideoStandard = NTSC;  // Set NTSC
 575              		.loc 1 202 0
 576 0454 40F20003 		movw	r3, #:lower16:eepromConfig
 577 0458 C0F20003 		movt	r3, #:upper16:eepromConfig
 578 045c 4FF00002 		mov	r2, #0
 579 0460 83F84523 		strb	r2, [r3, #837]
 580 0464 07E0     		b	.L45
 581              	.L44:
 204:../src/cliSupport.c ****    			        eepromConfig.defaultVideoStandard = PAL;   // Set PAL
 582              		.loc 1 204 0
 583 0466 40F20003 		movw	r3, #:lower16:eepromConfig
 584 046a C0F20003 		movt	r3, #:upper16:eepromConfig
 585 046e 4FF00102 		mov	r2, #1
 586 0472 83F84523 		strb	r2, [r3, #837]
 587              	.L45:
 206:../src/cliSupport.c ****                 max7456query = 'a';
 588              		.loc 1 206 0
 589 0476 4FF06103 		mov	r3, #97
 590 047a 8DF80730 		strb	r3, [sp, #7]
 207:../src/cliSupport.c ****                 validQuery = true;
 591              		.loc 1 207 0
 592 047e 4FF00103 		mov	r3, #1
 593 0482 8DF80630 		strb	r3, [sp, #6]
 208:../src/cliSupport.c ****    				break;
 594              		.loc 1 208 0
 595 0486 C1E0     		b	.L7
 596              	.L26:
 213:../src/cliSupport.c ****    			    uart1Print("\nExiting MAX7456 CLI....\n\n");
 597              		.loc 1 213 0
 598 0488 40F20000 		movw	r0, #:lower16:.LC20
 599 048c C0F20000 		movt	r0, #:upper16:.LC20
 600 0490 FFF7FEFF 		bl	uart1Print
 214:../src/cliSupport.c ****    			    cliBusy = false;
 601              		.loc 1 214 0
 602 0494 40F20003 		movw	r3, #:lower16:cliBusy
 603 0498 C0F20003 		movt	r3, #:upper16:cliBusy
 604 049c 4FF00002 		mov	r2, #0
 605 04a0 1A70     		strb	r2, [r3, #0]
 292:../src/cliSupport.c **** }
 606              		.loc 1 292 0
 607 04a2 03B0     		add	sp, sp, #12
 608 04a4 00BD     		pop	{pc}
 609              	.L9:
 221:../src/cliSupport.c ****                 eepromConfig.osdDisplayAlt = false;
 610              		.loc 1 221 0
 611 04a6 40F20003 		movw	r3, #:lower16:eepromConfig
 612 04aa C0F20003 		movt	r3, #:upper16:eepromConfig
 613 04ae 4FF00002 		mov	r2, #0
 614 04b2 83F84723 		strb	r2, [r3, #839]
 223:../src/cliSupport.c ****                 max7456query = 'a';
 615              		.loc 1 223 0
 616 04b6 4FF06103 		mov	r3, #97
 617 04ba 8DF80730 		strb	r3, [sp, #7]
 224:../src/cliSupport.c ****                 validQuery = true;
 618              		.loc 1 224 0
 619 04be 4FF00103 		mov	r3, #1
 620 04c2 8DF80630 		strb	r3, [sp, #6]
 225:../src/cliSupport.c ****                 break;
 621              		.loc 1 225 0
 622 04c6 A1E0     		b	.L7
 623              	.L10:
 230:../src/cliSupport.c ****                 eepromConfig.osdDisplayAH = false;
 624              		.loc 1 230 0
 625 04c8 40F20003 		movw	r3, #:lower16:eepromConfig
 626 04cc C0F20003 		movt	r3, #:upper16:eepromConfig
 627 04d0 4FF00002 		mov	r2, #0
 628 04d4 83F84823 		strb	r2, [r3, #840]
 232:../src/cliSupport.c ****                 max7456query = 'a';
 629              		.loc 1 232 0
 630 04d8 4FF06103 		mov	r3, #97
 631 04dc 8DF80730 		strb	r3, [sp, #7]
 233:../src/cliSupport.c ****                 validQuery = true;
 632              		.loc 1 233 0
 633 04e0 4FF00103 		mov	r3, #1
 634 04e4 8DF80630 		strb	r3, [sp, #6]
 234:../src/cliSupport.c ****                 break;
 635              		.loc 1 234 0
 636 04e8 90E0     		b	.L7
 637              	.L11:
 239:../src/cliSupport.c ****                 eepromConfig.osdDisplayAtt = false;
 638              		.loc 1 239 0
 639 04ea 40F20003 		movw	r3, #:lower16:eepromConfig
 640 04ee C0F20003 		movt	r3, #:upper16:eepromConfig
 641 04f2 4FF00002 		mov	r2, #0
 642 04f6 83F84923 		strb	r2, [r3, #841]
 241:../src/cliSupport.c ****                 max7456query = 'a';
 643              		.loc 1 241 0
 644 04fa 4FF06103 		mov	r3, #97
 645 04fe 8DF80730 		strb	r3, [sp, #7]
 242:../src/cliSupport.c ****                 validQuery = true;
 646              		.loc 1 242 0
 647 0502 4FF00103 		mov	r3, #1
 648 0506 8DF80630 		strb	r3, [sp, #6]
 243:../src/cliSupport.c ****                 break;
 649              		.loc 1 243 0
 650 050a 7FE0     		b	.L7
 651              	.L12:
 248:../src/cliSupport.c ****                 eepromConfig.osdDisplayHdg = false;
 652              		.loc 1 248 0
 653 050c 40F20003 		movw	r3, #:lower16:eepromConfig
 654 0510 C0F20003 		movt	r3, #:upper16:eepromConfig
 655 0514 4FF00002 		mov	r2, #0
 656 0518 83F84A23 		strb	r2, [r3, #842]
 250:../src/cliSupport.c ****                 max7456query = 'a';
 657              		.loc 1 250 0
 658 051c 4FF06103 		mov	r3, #97
 659 0520 8DF80730 		strb	r3, [sp, #7]
 251:../src/cliSupport.c ****                 validQuery = true;
 660              		.loc 1 251 0
 661 0524 4FF00103 		mov	r3, #1
 662 0528 8DF80630 		strb	r3, [sp, #6]
 252:../src/cliSupport.c ****                 break;
 663              		.loc 1 252 0
 664 052c 6EE0     		b	.L7
 665              	.L13:
 257:../src/cliSupport.c ****                 eepromConfig.metricUnits = true;
 666              		.loc 1 257 0
 667 052e 40F20003 		movw	r3, #:lower16:eepromConfig
 668 0532 C0F20003 		movt	r3, #:upper16:eepromConfig
 669 0536 4FF00102 		mov	r2, #1
 670 053a 83F84623 		strb	r2, [r3, #838]
 259:../src/cliSupport.c ****                 max7456query = 'a';
 671              		.loc 1 259 0
 672 053e 4FF06103 		mov	r3, #97
 673 0542 8DF80730 		strb	r3, [sp, #7]
 260:../src/cliSupport.c ****                 validQuery = true;
 674              		.loc 1 260 0
 675 0546 4FF00103 		mov	r3, #1
 676 054a 8DF80630 		strb	r3, [sp, #6]
 261:../src/cliSupport.c ****                 break;
 677              		.loc 1 261 0
 678 054e 5DE0     		b	.L7
 679              	.L14:
 266:../src/cliSupport.c ****                 uart1Print("\nWriting EEPROM Parameters....\n\n");
 680              		.loc 1 266 0
 681 0550 40F20000 		movw	r0, #:lower16:.LC21
 682 0554 C0F20000 		movt	r0, #:upper16:.LC21
 683 0558 FFF7FEFF 		bl	uart1Print
 267:../src/cliSupport.c ****                 writeEEPROM();
 684              		.loc 1 267 0
 685 055c FFF7FEFF 		bl	writeEEPROM
 268:../src/cliSupport.c ****                 break;
 686              		.loc 1 268 0
 687 0560 54E0     		b	.L7
 688              	.L8:
 273:../src/cliSupport.c **** 			   	uart1Print("\n");
 689              		.loc 1 273 0
 690 0562 40F20000 		movw	r0, #:lower16:.LC2
 691 0566 C0F20000 		movt	r0, #:upper16:.LC2
 692 056a FFF7FEFF 		bl	uart1Print
 274:../src/cliSupport.c **** 			   	uart1Print("'a' OSD Configuration\n");
 693              		.loc 1 274 0
 694 056e 40F20000 		movw	r0, #:lower16:.LC22
 695 0572 C0F20000 		movt	r0, #:upper16:.LC22
 696 0576 FFF7FEFF 		bl	uart1Print
 275:../src/cliSupport.c **** 			    uart1Print("'b' Enable OSD Altitude Display            'B' Disable OSD Altitude Display\n");
 697              		.loc 1 275 0
 698 057a 40F20000 		movw	r0, #:lower16:.LC23
 699 057e C0F20000 		movt	r0, #:upper16:.LC23
 700 0582 FFF7FEFF 		bl	uart1Print
 276:../src/cliSupport.c **** 			   	uart1Print("'c' Enable OSD Artificial Horizon Display  'C' Disable OSD Artificial Horizon Di
 701              		.loc 1 276 0
 702 0586 40F20000 		movw	r0, #:lower16:.LC24
 703 058a C0F20000 		movt	r0, #:upper16:.LC24
 704 058e FFF7FEFF 		bl	uart1Print
 277:../src/cliSupport.c **** 			   	uart1Print("'d' Enable OSD Attitude Display            'D' Disable OSD Attitude Display\n");
 705              		.loc 1 277 0
 706 0592 40F20000 		movw	r0, #:lower16:.LC25
 707 0596 C0F20000 		movt	r0, #:upper16:.LC25
 708 059a FFF7FEFF 		bl	uart1Print
 278:../src/cliSupport.c **** 			   	uart1Print("'e' Enable OSD Heading Display             'E' Disable OSD Heading Display\n");
 709              		.loc 1 278 0
 710 059e 40F20000 		movw	r0, #:lower16:.LC26
 711 05a2 C0F20000 		movt	r0, #:upper16:.LC26
 712 05a6 FFF7FEFF 		bl	uart1Print
 279:../src/cliSupport.c **** 			   	uart1Print("'q' Set English Display Units              'Q' Set Metric Display Units\n");
 713              		.loc 1 279 0
 714 05aa 40F20000 		movw	r0, #:lower16:.LC27
 715 05ae C0F20000 		movt	r0, #:upper16:.LC27
 716 05b2 FFF7FEFF 		bl	uart1Print
 280:../src/cliSupport.c **** 			    uart1Print("'r' Reset MAX7456\n");
 717              		.loc 1 280 0
 718 05b6 40F20000 		movw	r0, #:lower16:.LC28
 719 05ba C0F20000 		movt	r0, #:upper16:.LC28
 720 05be FFF7FEFF 		bl	uart1Print
 281:../src/cliSupport.c **** 			   	uart1Print("'s' Display MAX7456 Character Set\n");
 721              		.loc 1 281 0
 722 05c2 40F20000 		movw	r0, #:lower16:.LC29
 723 05c6 C0F20000 		movt	r0, #:upper16:.LC29
 724 05ca FFF7FEFF 		bl	uart1Print
 282:../src/cliSupport.c **** 			   	uart1Print("'t' Download Font to MAX7456\n");
 725              		.loc 1 282 0
 726 05ce 40F20000 		movw	r0, #:lower16:.LC30
 727 05d2 C0F20000 		movt	r0, #:upper16:.LC30
 728 05d6 FFF7FEFF 		bl	uart1Print
 283:../src/cliSupport.c **** 			   	uart1Print("'u' Change OSD Installed State\n");
 729              		.loc 1 283 0
 730 05da 40F20000 		movw	r0, #:lower16:.LC31
 731 05de C0F20000 		movt	r0, #:upper16:.LC31
 732 05e2 FFF7FEFF 		bl	uart1Print
 284:../src/cliSupport.c **** 			   	uart1Print("'v' Change Default Video Standard          'W' Write EEPROM Parameters\n");
 733              		.loc 1 284 0
 734 05e6 40F20000 		movw	r0, #:lower16:.LC32
 735 05ea C0F20000 		movt	r0, #:upper16:.LC32
 736 05ee FFF7FEFF 		bl	uart1Print
 285:../src/cliSupport.c **** 			   	uart1Print("'x' Exit Sensor CLI                        '?' Command Summary\n");
 737              		.loc 1 285 0
 738 05f2 40F20000 		movw	r0, #:lower16:.LC33
 739 05f6 C0F20000 		movt	r0, #:upper16:.LC33
 740 05fa FFF7FEFF 		bl	uart1Print
 286:../src/cliSupport.c **** 			   	uart1Print("\n");
 741              		.loc 1 286 0
 742 05fe 40F20000 		movw	r0, #:lower16:.LC2
 743 0602 C0F20000 		movt	r0, #:upper16:.LC2
 744 0606 FFF7FEFF 		bl	uart1Print
 287:../src/cliSupport.c **** 	    	    break;
 745              		.loc 1 287 0
 746 060a 00BF     		nop
 747              	.L7:
 291:../src/cliSupport.c ****     }
 748              		.loc 1 291 0
 749 060c 0EE5     		b	.L48
 750              		.cfi_endproc
 751              	.LFE111:
 753              		.section	.rodata
 754              		.align	2
 755              	.LC34:
 756 049c 0A456E74 		.ascii	"\012Entering Mixer CLI....\012\012\000"
 756      6572696E 
 756      67204D69 
 756      78657220 
 756      434C492E 
 757 04b6 0000     		.align	2
 758              	.LC35:
 759 04b8 4D697865 		.ascii	"Mixer CLI -> \000"
 759      7220434C 
 759      49202D3E 
 759      2000
 760 04c6 0000     		.align	2
 761              	.LC36:
 762 04c8 0A4D6978 		.ascii	"\012Mixer Configuration:            \000"
 762      65722043 
 762      6F6E6669 
 762      67757261 
 762      74696F6E 
 763 04ea 0000     		.align	2
 764              	.LC37:
 765 04ec 4D495845 		.ascii	"MIXERTYPE GIMBAL\012\000"
 765      52545950 
 765      45204749 
 765      4D42414C 
 765      0A00
 766 04fe 0000     		.align	2
 767              	.LC38:
 768 0500 4D495845 		.ascii	"MIXERTYPE FLYING WING\012\000"
 768      52545950 
 768      4520464C 
 768      59494E47 
 768      2057494E 
 769 0517 00       		.align	2
 770              	.LC39:
 771 0518 4D495845 		.ascii	"MIXERTYPE BICOPTER\012\000"
 771      52545950 
 771      45204249 
 771      434F5054 
 771      45520A00 
 772              		.align	2
 773              	.LC40:
 774 052c 4D495845 		.ascii	"MIXERTYPE TRICOPTER\012\000"
 774      52545950 
 774      45205452 
 774      49434F50 
 774      5445520A 
 775 0541 000000   		.align	2
 776              	.LC41:
 777 0544 4D495845 		.ascii	"MIXERTYPE QUAD PLUS\012\000"
 777      52545950 
 777      45205155 
 777      41442050 
 777      4C55530A 
 778 0559 000000   		.align	2
 779              	.LC42:
 780 055c 4D495845 		.ascii	"MIXERTYPE QUAD X\012\000"
 780      52545950 
 780      45205155 
 780      41442058 
 780      0A00
 781 056e 0000     		.align	2
 782              	.LC43:
 783 0570 4D554C54 		.ascii	"MULTITYPE VTAIL NO COMP\012\000"
 783      49545950 
 783      45205654 
 783      41494C20 
 783      4E4F2043 
 784 0589 000000   		.align	2
 785              	.LC44:
 786 058c 4D554C54 		.ascii	"MULTITYPE VTAIL Y COMP\012\000"
 786      49545950 
 786      45205654 
 786      41494C20 
 786      5920434F 
 787              		.align	2
 788              	.LC45:
 789 05a4 4D554C54 		.ascii	"MULTITYPE VTAIL RY COMP\012\000"
 789      49545950 
 789      45205654 
 789      41494C20 
 789      52592043 
 790 05bd 000000   		.align	2
 791              	.LC46:
 792 05c0 4D554C54 		.ascii	"MULTITYPE VTAIL PY COMP\012\000"
 792      49545950 
 792      45205654 
 792      41494C20 
 792      50592043 
 793 05d9 000000   		.align	2
 794              	.LC47:
 795 05dc 4D554C54 		.ascii	"MULTITYPE VTAIL RP COMP\012\000"
 795      49545950 
 795      45205654 
 795      41494C20 
 795      52502043 
 796 05f5 000000   		.align	2
 797              	.LC48:
 798 05f8 4D554C54 		.ascii	"MULTITYPE VTAIL RPY COMP\012\000"
 798      49545950 
 798      45205654 
 798      41494C20 
 798      52505920 
 799 0612 0000     		.align	2
 800              	.LC49:
 801 0614 4D495845 		.ascii	"MIXERTYPE Y4\012\000"
 801      52545950 
 801      45205934 
 801      0A00
 802 0622 0000     		.align	2
 803              	.LC50:
 804 0624 4D495845 		.ascii	"MIXERTYPE HEX PLUS\012\000"
 804      52545950 
 804      45204845 
 804      5820504C 
 804      55530A00 
 805              		.align	2
 806              	.LC51:
 807 0638 4D495845 		.ascii	"MIXERTYPE HEX X\012\000"
 807      52545950 
 807      45204845 
 807      5820580A 
 807      00
 808 0649 000000   		.align	2
 809              	.LC52:
 810 064c 4D495845 		.ascii	"MIXERTYPE Y6\012\000"
 810      52545950 
 810      45205936 
 810      0A00
 811 065a 0000     		.align	2
 812              	.LC53:
 813 065c 4D495845 		.ascii	"MIXERTYPE FLAT OCTO PLUS\012\000"
 813      52545950 
 813      4520464C 
 813      4154204F 
 813      43544F20 
 814 0676 0000     		.align	2
 815              	.LC54:
 816 0678 4D495845 		.ascii	"MIXERTYPE FLAT OCTO X\012\000"
 816      52545950 
 816      4520464C 
 816      4154204F 
 816      43544F20 
 817 068f 00       		.align	2
 818              	.LC55:
 819 0690 4D495845 		.ascii	"MIXERTYPE COAXIAL OCTO PLUS\012\000"
 819      52545950 
 819      4520434F 
 819      41584941 
 819      4C204F43 
 820 06ad 000000   		.align	2
 821              	.LC56:
 822 06b0 4D495845 		.ascii	"MIXERTYPE COAXIAL OCTO X\012\000"
 822      52545950 
 822      4520434F 
 822      41584941 
 822      4C204F43 
 823 06ca 0000     		.align	2
 824              	.LC57:
 825 06cc 4D495845 		.ascii	"MIXERTYPE FREE MIX\012\000"
 825      52545950 
 825      45204652 
 825      4545204D 
 825      49580A00 
 826              		.align	2
 827              	.LC58:
 828 06e0 4E756D62 		.ascii	"Number of Motors:               \000"
 828      6572206F 
 828      66204D6F 
 828      746F7273 
 828      3A202020 
 829 0701 000000   		.align	2
 830              	.LC59:
 831 0704 45534320 		.ascii	"ESC PWM Rate:                   \000"
 831      50574D20 
 831      52617465 
 831      3A202020 
 831      20202020 
 832 0725 000000   		.align	2
 833              	.LC60:
 834 0728 53657276 		.ascii	"Servo PWM Rate:                 \000"
 834      6F205057 
 834      4D205261 
 834      74653A20 
 834      20202020 
 835 0749 000000   		.align	2
 836              	.LC61:
 837 074c 4269436F 		.ascii	"BiCopter Left Servo Min:        \000"
 837      70746572 
 837      204C6566 
 837      74205365 
 837      72766F20 
 838 076d 000000   		.align	2
 839              	.LC62:
 840 0770 4269436F 		.ascii	"BiCopter Left Servo Mid:        \000"
 840      70746572 
 840      204C6566 
 840      74205365 
 840      72766F20 
 841 0791 000000   		.align	2
 842              	.LC63:
 843 0794 4269436F 		.ascii	"BiCopter Left Servo Max:        \000"
 843      70746572 
 843      204C6566 
 843      74205365 
 843      72766F20 
 844 07b5 000000   		.align	2
 845              	.LC64:
 846 07b8 4269436F 		.ascii	"BiCopter Right Servo Min:       \000"
 846      70746572 
 846      20526967 
 846      68742053 
 846      6572766F 
 847 07d9 000000   		.align	2
 848              	.LC65:
 849 07dc 4269436F 		.ascii	"BiCopter Right Servo Mid:       \000"
 849      70746572 
 849      20526967 
 849      68742053 
 849      6572766F 
 850 07fd 000000   		.align	2
 851              	.LC66:
 852 0800 4269436F 		.ascii	"BiCopter Right Servo Max:       \000"
 852      70746572 
 852      20526967 
 852      68742053 
 852      6572766F 
 853 0821 000000   		.align	2
 854              	.LC67:
 855 0824 526F6C6C 		.ascii	"Roll Direction Left:            \000"
 855      20446972 
 855      65637469 
 855      6F6E204C 
 855      6566743A 
 856 0845 000000   		.align	2
 857              	.LC68:
 858 0848 526F6C6C 		.ascii	"Roll Direction Right:           \000"
 858      20446972 
 858      65637469 
 858      6F6E2052 
 858      69676874 
 859 0869 000000   		.align	2
 860              	.LC69:
 861 086c 50697463 		.ascii	"Pitch Direction Left:           \000"
 861      68204469 
 861      72656374 
 861      696F6E20 
 861      4C656674 
 862 088d 000000   		.align	2
 863              	.LC70:
 864 0890 50697463 		.ascii	"Pitch Direction Right:          \000"
 864      68204469 
 864      72656374 
 864      696F6E20 
 864      52696768 
 865 08b1 000000   		.align	2
 866              	.LC71:
 867 08b4 57696E67 		.ascii	"Wing Left Minimum:              \000"
 867      204C6566 
 867      74204D69 
 867      6E696D75 
 867      6D3A2020 
 868 08d5 000000   		.align	2
 869              	.LC72:
 870 08d8 57696E67 		.ascii	"Wing Left Maximum:              \000"
 870      204C6566 
 870      74204D61 
 870      78696D75 
 870      6D3A2020 
 871 08f9 000000   		.align	2
 872              	.LC73:
 873 08fc 57696E67 		.ascii	"Wing Right Minimum:             \000"
 873      20526967 
 873      6874204D 
 873      696E696D 
 873      756D3A20 
 874 091d 000000   		.align	2
 875              	.LC74:
 876 0920 57696E67 		.ascii	"Wing Right Maximum:             \000"
 876      20526967 
 876      6874204D 
 876      6178696D 
 876      756D3A20 
 877 0941 000000   		.align	2
 878              	.LC75:
 879 0944 47696D62 		.ascii	"Gimbal Roll Servo Min:          \000"
 879      616C2052 
 879      6F6C6C20 
 879      53657276 
 879      6F204D69 
 880 0965 000000   		.align	2
 881              	.LC76:
 882 0968 47696D62 		.ascii	"Gimbal Roll Servo Mid:          \000"
 882      616C2052 
 882      6F6C6C20 
 882      53657276 
 882      6F204D69 
 883 0989 000000   		.align	2
 884              	.LC77:
 885 098c 47696D62 		.ascii	"Gimbal Roll Servo Max:          \000"
 885      616C2052 
 885      6F6C6C20 
 885      53657276 
 885      6F204D61 
 886 09ad 000000   		.align	2
 887              	.LC78:
 888 09b0 47696D62 		.ascii	"Gimbal Roll Servo Gain:        \000"
 888      616C2052 
 888      6F6C6C20 
 888      53657276 
 888      6F204761 
 889              		.align	2
 890              	.LC79:
 891 09d0 47696D62 		.ascii	"Gimbal Pitch Servo Min:         \000"
 891      616C2050 
 891      69746368 
 891      20536572 
 891      766F204D 
 892 09f1 000000   		.align	2
 893              	.LC80:
 894 09f4 47696D62 		.ascii	"Gimbal Pitch Servo Mid:         \000"
 894      616C2050 
 894      69746368 
 894      20536572 
 894      766F204D 
 895 0a15 000000   		.align	2
 896              	.LC81:
 897 0a18 47696D62 		.ascii	"Gimbal Pitch Servo Max:         \000"
 897      616C2050 
 897      69746368 
 897      20536572 
 897      766F204D 
 898 0a39 000000   		.align	2
 899              	.LC82:
 900 0a3c 47696D62 		.ascii	"Gimbal Pitch Servo Gain:       \000"
 900      616C2050 
 900      69746368 
 900      20536572 
 900      766F2047 
 901              		.align	2
 902              	.LC83:
 903 0a5c 54726943 		.ascii	"TriCopter Yaw Servo Min:        \000"
 903      6F707465 
 903      72205961 
 903      77205365 
 903      72766F20 
 904 0a7d 000000   		.align	2
 905              	.LC84:
 906 0a80 54726943 		.ascii	"TriCopter Yaw Servo Mid:        \000"
 906      6F707465 
 906      72205961 
 906      77205365 
 906      72766F20 
 907 0aa1 000000   		.align	2
 908              	.LC85:
 909 0aa4 54726943 		.ascii	"TriCopter Yaw Servo Max:        \000"
 909      6F707465 
 909      72205961 
 909      77205365 
 909      72766F20 
 910 0ac5 000000   		.align	2
 911              	.LC86:
 912 0ac8 56205461 		.ascii	"V Tail Angle                   \000"
 912      696C2041 
 912      6E676C65 
 912      20202020 
 912      20202020 
 913              		.align	2
 914              	.LC87:
 915 0ae8 59617720 		.ascii	"Yaw Direction:                  \000"
 915      44697265 
 915      6374696F 
 915      6E3A2020 
 915      20202020 
 916 0b09 000000   		.align	2
 917              	.LC88:
 918 0b0c 0A0A00   		.ascii	"\012\012\000"
 919 0b0f 00       		.align	2
 920              	.LC89:
 921 0b10 0A4E756D 		.ascii	"\012Number of Free Mixer Motors:  \000"
 921      62657220 
 921      6F662046 
 921      72656520 
 921      4D697865 
 922              		.align	2
 923              	.LC90:
 924 0b30 20202020 		.ascii	"         Roll    Pitch   Yaw\012\000"
 924      20202020 
 924      20526F6C 
 924      6C202020 
 924      20506974 
 925 0b4e 0000     		.align	2
 926              	.LC91:
 927 0b50 4D6F746F 		.ascii	"Motor\000"
 927      7200
 928 0b56 0000     		.align	2
 929              	.LC92:
 930 0b58 202000   		.ascii	"  \000"
 931 0b5b 00       		.align	2
 932              	.LC93:
 933 0b5c 0A457869 		.ascii	"\012Exiting Mixer CLI....\012\012\000"
 933      74696E67 
 933      204D6978 
 933      65722043 
 933      4C492E2E 
 934 0b75 000000   		.align	2
 935              	.LC94:
 936 0b78 27612720 		.ascii	"'a' Mixer Configuration Data               'A' Set "
 936      4D697865 
 936      7220436F 
 936      6E666967 
 936      75726174 
 937 0bab 4D697865 		.ascii	"Mixer Configuration              A1 thru 21, see aq"
 937      7220436F 
 937      6E666967 
 937      75726174 
 937      696F6E20 
 938 0bde 3332506C 		.ascii	"32Plus.h\012\000"
 938      75732E68 
 938      0A00
 939              		.align	2
 940              	.LC95:
 941 0be8 27622720 		.ascii	"'b' Free Mixer Configuration               'B' Set "
 941      46726565 
 941      204D6978 
 941      65722043 
 941      6F6E6669 
 942 0c1b 50574D20 		.ascii	"PWM Rates                        BESC;Servo\012\000"
 942      52617465 
 942      73202020 
 942      20202020 
 942      20202020 
 943              		.align	2
 944              	.LC96:
 945 0c48 20202020 		.ascii	"                                           'C' Set "
 945      20202020 
 945      20202020 
 945      20202020 
 945      20202020 
 946 0c7b 4269436F 		.ascii	"BiCopter Left Servo Parameters   CMin;Mid;Max\012\000"
 946      70746572 
 946      204C6566 
 946      74205365 
 946      72766F20 
 947 0caa 0000     		.align	2
 948              	.LC97:
 949 0cac 20202020 		.ascii	"                                           'D' Set "
 949      20202020 
 949      20202020 
 949      20202020 
 949      20202020 
 950 0cdf 4269436F 		.ascii	"BiCopter Right Servo Parameters  DMin;Mid;Max\012\000"
 950      70746572 
 950      20526967 
 950      68742053 
 950      6572766F 
 951 0d0e 0000     		.align	2
 952              	.LC98:
 953 0d10 20202020 		.ascii	"                                           'E' Set "
 953      20202020 
 953      20202020 
 953      20202020 
 953      20202020 
 954 0d43 466C7969 		.ascii	"Flying Wing Servo Directions     ERollLeft;RollRigh"
 954      6E672057 
 954      696E6720 
 954      53657276 
 954      6F204469 
 955 0d76 743B5069 		.ascii	"t;PitchLeft;PitchRight\012\000"
 955      7463684C 
 955      6566743B 
 955      50697463 
 955      68526967 
 956 0d8e 0000     		.align	2
 957              	.LC99:
 958 0d90 20202020 		.ascii	"                                           'F' Set "
 958      20202020 
 958      20202020 
 958      20202020 
 958      20202020 
 959 0dc3 466C7969 		.ascii	"Flying Wing Servo Limits         FLeftMin;LeftMax;R"
 959      6E672057 
 959      696E6720 
 959      53657276 
 959      6F204C69 
 960 0df6 69676874 		.ascii	"ightMin;RightMax\012\000"
 960      4D696E3B 
 960      52696768 
 960      744D6178 
 960      0A00
 961              		.align	2
 962              	.LC100:
 963 0e08 20202020 		.ascii	"                                           'G' Set "
 963      20202020 
 963      20202020 
 963      20202020 
 963      20202020 
 964 0e3b 4E756D62 		.ascii	"Number of FreeMix Motors         GNumber\012\000"
 964      6572206F 
 964      66204672 
 964      65654D69 
 964      78204D6F 
 965 0e65 000000   		.align	2
 966              	.LC101:
 967 0e68 20202020 		.ascii	"                                           'H' Set "
 967      20202020 
 967      20202020 
 967      20202020 
 967      20202020 
 968 0e9b 46726565 		.ascii	"FreeMix Matrix Element           HRow;Column;Elemen"
 968      4D697820 
 968      4D617472 
 968      69782045 
 968      6C656D65 
 969 0ece 740A00   		.ascii	"t\012\000"
 970 0ed1 000000   		.align	2
 971              	.LC102:
 972 0ed4 20202020 		.ascii	"                                           'I' Set "
 972      20202020 
 972      20202020 
 972      20202020 
 972      20202020 
 973 0f07 47696D62 		.ascii	"Gimbal Roll Servo Parameters     IMin;Mid;Max;Gain\012"
 973      616C2052 
 973      6F6C6C20 
 973      53657276 
 973      6F205061 
 974 0f3a 00       		.ascii	"\000"
 975 0f3b 00       		.align	2
 976              	.LC103:
 977 0f3c 20202020 		.ascii	"                                           'J' Set "
 977      20202020 
 977      20202020 
 977      20202020 
 977      20202020 
 978 0f6f 47696D62 		.ascii	"Gimbal Pitch Servo Parameters    JMin;Mid;Max;Gain\012"
 978      616C2050 
 978      69746368 
 978      20536572 
 978      766F2050 
 979 0fa2 00       		.ascii	"\000"
 980 0fa3 00       		.align	2
 981              	.LC104:
 982 0fa4 20202020 		.ascii	"                                           'K' Set "
 982      20202020 
 982      20202020 
 982      20202020 
 982      20202020 
 983 0fd7 54726943 		.ascii	"TriCopter Servo Parameters       KMin;Mid;Max\012\000"
 983      6F707465 
 983      72205365 
 983      72766F20 
 983      50617261 
 984 1006 0000     		.align	2
 985              	.LC105:
 986 1008 20202020 		.ascii	"                                           'L' Set "
 986      20202020 
 986      20202020 
 986      20202020 
 986      20202020 
 987 103b 56205461 		.ascii	"V Tail Angle                     LAngle\012\000"
 987      696C2041 
 987      6E676C65 
 987      20202020 
 987      20202020 
 988              		.align	2
 989              	.LC106:
 990 1064 20202020 		.ascii	"                                           'M' Set "
 990      20202020 
 990      20202020 
 990      20202020 
 990      20202020 
 991 1097 59617720 		.ascii	"Yaw Direction                    M1 or M-1\012\000"
 991      44697265 
 991      6374696F 
 991      6E202020 
 991      20202020 
 992 10c3 00       		.align	2
 993              	.LC107:
 994 10c4 20202020 		.ascii	"                                           'W' Writ"
 994      20202020 
 994      20202020 
 994      20202020 
 994      20202020 
 995 10f7 65204545 		.ascii	"e EEPROM Parameters\012\000"
 995      50524F4D 
 995      20506172 
 995      616D6574 
 995      6572730A 
 996              		.text
 997 060e 00BF     		.align	2
 998              		.global	mixerCLI
 999              		.thumb
 1000              		.thumb_func
 1002              	mixerCLI:
 1003              	.LFB112:
 293:../src/cliSupport.c **** 
 294:../src/cliSupport.c **** ///////////////////////////////////////////////////////////////////////////////
 295:../src/cliSupport.c **** // Mixer CLI
 296:../src/cliSupport.c **** ///////////////////////////////////////////////////////////////////////////////
 297:../src/cliSupport.c **** 
 298:../src/cliSupport.c **** void mixerCLI()
 299:../src/cliSupport.c **** {
 1004              		.loc 1 299 0
 1005              		.cfi_startproc
 1006              		@ args = 0, pretend = 0, frame = 16
 1007              		@ frame_needed = 0, uses_anonymous_args = 0
 1008 0610 30B5     		push	{r4, r5, lr}
 1009              	.LCFI2:
 1010              		.cfi_def_cfa_offset 12
 1011              		.cfi_offset 14, -4
 1012              		.cfi_offset 5, -8
 1013              		.cfi_offset 4, -12
 1014 0612 85B0     		sub	sp, sp, #20
 1015              	.LCFI3:
 1016              		.cfi_def_cfa_offset 32
 300:../src/cliSupport.c ****     float    tempFloat;
 301:../src/cliSupport.c **** 
 302:../src/cliSupport.c ****     uint8_t  index;
 303:../src/cliSupport.c ****     uint8_t  rows, columns;
 304:../src/cliSupport.c **** 
 305:../src/cliSupport.c ****     uint8_t  mixerQuery;
 306:../src/cliSupport.c ****     uint8_t  validQuery = false;
 1017              		.loc 1 306 0
 1018 0614 4FF00003 		mov	r3, #0
 1019 0618 8DF80930 		strb	r3, [sp, #9]
 307:../src/cliSupport.c **** 
 308:../src/cliSupport.c ****     cliBusy = true;
 1020              		.loc 1 308 0
 1021 061c 40F20003 		movw	r3, #:lower16:cliBusy
 1022 0620 C0F20003 		movt	r3, #:upper16:cliBusy
 1023 0624 4FF00102 		mov	r2, #1
 1024 0628 1A70     		strb	r2, [r3, #0]
 309:../src/cliSupport.c **** 
 310:../src/cliSupport.c ****     uart1Print("\nEntering Mixer CLI....\n\n");
 1025              		.loc 1 310 0
 1026 062a 40F20000 		movw	r0, #:lower16:.LC34
 1027 062e C0F20000 		movt	r0, #:upper16:.LC34
 1028 0632 FFF7FEFF 		bl	uart1Print
 1029 0636 00E0     		b	.L106
 1030              	.L107:
 311:../src/cliSupport.c **** 
 312:../src/cliSupport.c ****     while(true)
 313:../src/cliSupport.c ****     {
 314:../src/cliSupport.c ****         uart1Print("Mixer CLI -> ");
 315:../src/cliSupport.c **** 
 316:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
 317:../src/cliSupport.c **** 
 318:../src/cliSupport.c **** 		if (validQuery == false)
 319:../src/cliSupport.c **** 		    mixerQuery = uart1Read();
 320:../src/cliSupport.c **** 
 321:../src/cliSupport.c **** 		uart1Print("\n");
 322:../src/cliSupport.c **** 
 323:../src/cliSupport.c **** 		switch(mixerQuery)
 324:../src/cliSupport.c **** 		{
 325:../src/cliSupport.c ****             ///////////////////////////
 326:../src/cliSupport.c **** 
 327:../src/cliSupport.c ****             case 'a': // Mixer Configuration
 328:../src/cliSupport.c ****                 uart1Print("\nMixer Configuration:            ");
 329:../src/cliSupport.c ****                 switch (eepromConfig.mixerConfiguration)
 330:../src/cliSupport.c ****                 {
 331:../src/cliSupport.c ****                     case MIXERTYPE_GIMBAL:
 332:../src/cliSupport.c ****                     	uart1Print("MIXERTYPE GIMBAL\n");
 333:../src/cliSupport.c ****                     	break;
 334:../src/cliSupport.c **** 
 335:../src/cliSupport.c ****                     ///////////////////////
 336:../src/cliSupport.c **** 
 337:../src/cliSupport.c ****                     case MIXERTYPE_FLYING_WING:
 338:../src/cliSupport.c ****                     	uart1Print("MIXERTYPE FLYING WING\n");
 339:../src/cliSupport.c ****                     	break;
 340:../src/cliSupport.c **** 
 341:../src/cliSupport.c ****                     ///////////////////////
 342:../src/cliSupport.c **** 
 343:../src/cliSupport.c ****                     case MIXERTYPE_BI:
 344:../src/cliSupport.c ****                         uart1Print("MIXERTYPE BICOPTER\n");
 345:../src/cliSupport.c ****                         break;
 346:../src/cliSupport.c **** 
 347:../src/cliSupport.c ****                     ///////////////////////
 348:../src/cliSupport.c **** 
 349:../src/cliSupport.c ****                     case MIXERTYPE_TRI:
 350:../src/cliSupport.c ****                         uart1Print("MIXERTYPE TRICOPTER\n");
 351:../src/cliSupport.c ****                         break;
 352:../src/cliSupport.c **** 
 353:../src/cliSupport.c ****                     ///////////////////////
 354:../src/cliSupport.c **** 
 355:../src/cliSupport.c ****                     case MIXERTYPE_QUADP:
 356:../src/cliSupport.c ****                         uart1Print("MIXERTYPE QUAD PLUS\n");
 357:../src/cliSupport.c ****                         break;
 358:../src/cliSupport.c **** 
 359:../src/cliSupport.c ****                     case MIXERTYPE_QUADX:
 360:../src/cliSupport.c ****                         uart1Print("MIXERTYPE QUAD X\n");
 361:../src/cliSupport.c ****                         break;
 362:../src/cliSupport.c **** 
 363:../src/cliSupport.c ****                     case MIXERTYPE_VTAIL4_NO_COMP:
 364:../src/cliSupport.c ****                     	uart1Print("MULTITYPE VTAIL NO COMP\n");
 365:../src/cliSupport.c ****                     	break;
 366:../src/cliSupport.c **** 
 367:../src/cliSupport.c ****                     case MIXERTYPE_VTAIL4_Y_COMP:
 368:../src/cliSupport.c ****                     	uart1Print("MULTITYPE VTAIL Y COMP\n");
 369:../src/cliSupport.c ****                     	break;
 370:../src/cliSupport.c **** 
 371:../src/cliSupport.c ****                     case MIXERTYPE_VTAIL4_RY_COMP:
 372:../src/cliSupport.c ****                     	uart1Print("MULTITYPE VTAIL RY COMP\n");
 373:../src/cliSupport.c ****                     	break;
 374:../src/cliSupport.c **** 
 375:../src/cliSupport.c ****                     case MIXERTYPE_VTAIL4_PY_COMP:
 376:../src/cliSupport.c ****                     	uart1Print("MULTITYPE VTAIL PY COMP\n");
 377:../src/cliSupport.c ****                     	break;
 378:../src/cliSupport.c **** 
 379:../src/cliSupport.c ****                     case MIXERTYPE_VTAIL4_RP_COMP:
 380:../src/cliSupport.c ****                     	uart1Print("MULTITYPE VTAIL RP COMP\n");
 381:../src/cliSupport.c ****                     	break;
 382:../src/cliSupport.c **** 
 383:../src/cliSupport.c ****                     case MIXERTYPE_VTAIL4_RPY_COMP:
 384:../src/cliSupport.c ****                     	uart1Print("MULTITYPE VTAIL RPY COMP\n");
 385:../src/cliSupport.c ****                     	break;
 386:../src/cliSupport.c **** 
 387:../src/cliSupport.c ****                     case MIXERTYPE_Y4:
 388:../src/cliSupport.c ****                     	uart1Print("MIXERTYPE Y4\n");
 389:../src/cliSupport.c ****                     	break;
 390:../src/cliSupport.c **** 
 391:../src/cliSupport.c ****                     ///////////////////////
 392:../src/cliSupport.c **** 
 393:../src/cliSupport.c ****                     case MIXERTYPE_HEX6P:
 394:../src/cliSupport.c ****                         uart1Print("MIXERTYPE HEX PLUS\n");
 395:../src/cliSupport.c ****                         break;
 396:../src/cliSupport.c **** 
 397:../src/cliSupport.c ****                     case MIXERTYPE_HEX6X:
 398:../src/cliSupport.c ****                         uart1Print("MIXERTYPE HEX X\n");
 399:../src/cliSupport.c ****                         break;
 400:../src/cliSupport.c **** 
 401:../src/cliSupport.c ****                     case MIXERTYPE_Y6:
 402:../src/cliSupport.c ****                         uart1Print("MIXERTYPE Y6\n");
 403:../src/cliSupport.c ****                         break;
 404:../src/cliSupport.c **** 
 405:../src/cliSupport.c ****                     ///////////////////////
 406:../src/cliSupport.c **** 
 407:../src/cliSupport.c ****                     case MIXERTYPE_OCTOF8P:
 408:../src/cliSupport.c ****                         uart1Print("MIXERTYPE FLAT OCTO PLUS\n");
 409:../src/cliSupport.c ****                         break;
 410:../src/cliSupport.c **** 
 411:../src/cliSupport.c ****                     case MIXERTYPE_OCTOF8X:
 412:../src/cliSupport.c ****                         uart1Print("MIXERTYPE FLAT OCTO X\n");
 413:../src/cliSupport.c ****                         break;
 414:../src/cliSupport.c **** 
 415:../src/cliSupport.c ****                     case MIXERTYPE_OCTOX8P:
 416:../src/cliSupport.c ****                         uart1Print("MIXERTYPE COAXIAL OCTO PLUS\n");
 417:../src/cliSupport.c ****                         break;
 418:../src/cliSupport.c **** 
 419:../src/cliSupport.c ****                     case MIXERTYPE_OCTOX8X:
 420:../src/cliSupport.c ****                         uart1Print("MIXERTYPE COAXIAL OCTO X\n");
 421:../src/cliSupport.c ****                         break;
 422:../src/cliSupport.c **** 
 423:../src/cliSupport.c ****                     ///////////////////////
 424:../src/cliSupport.c **** 
 425:../src/cliSupport.c ****                     case MIXERTYPE_FREEMIX:
 426:../src/cliSupport.c ****                     	uart1Print("MIXERTYPE FREE MIX\n");
 427:../src/cliSupport.c ****                     	break;
 428:../src/cliSupport.c ****                 }
 429:../src/cliSupport.c **** 
 430:../src/cliSupport.c ****                 uart1Print("Number of Motors:               ");
 431:../src/cliSupport.c ****                 itoa(numberMotor,                         numberString, 10); uart1Print(numberStrin
 432:../src/cliSupport.c **** 
 433:../src/cliSupport.c ****                 uart1Print("ESC PWM Rate:                   ");
 434:../src/cliSupport.c ****                 itoa((uint16_t)eepromConfig.escPwmRate,   numberString, 10); uart1Print(numberStrin
 435:../src/cliSupport.c **** 
 436:../src/cliSupport.c ****                 uart1Print("Servo PWM Rate:                 ");
 437:../src/cliSupport.c ****                 itoa((uint16_t)eepromConfig.servoPwmRate, numberString, 10); uart1Print(numberStrin
 438:../src/cliSupport.c **** 
 439:../src/cliSupport.c ****                 if ( eepromConfig.mixerConfiguration == MIXERTYPE_BI )
 440:../src/cliSupport.c ****                 {
 441:../src/cliSupport.c ****                     uart1Print("BiCopter Left Servo Min:        ");
 442:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.biLeftServoMin,  numberString, 10); uart1Print(numb
 443:../src/cliSupport.c ****                     uart1Print("BiCopter Left Servo Mid:        ");
 444:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.biLeftServoMid,  numberString, 10); uart1Print(numb
 445:../src/cliSupport.c ****                     uart1Print("BiCopter Left Servo Max:        ");
 446:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.biLeftServoMax,  numberString, 10); uart1Print(numb
 447:../src/cliSupport.c ****                     uart1Print("BiCopter Right Servo Min:       ");
 448:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.biRightServoMin, numberString, 10); uart1Print(numb
 449:../src/cliSupport.c ****                     uart1Print("BiCopter Right Servo Mid:       ");
 450:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.biRightServoMid, numberString, 10); uart1Print(numb
 451:../src/cliSupport.c ****                     uart1Print("BiCopter Right Servo Max:       ");
 452:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.biRightServoMax, numberString, 10); uart1Print(numb
 453:../src/cliSupport.c ****                 }
 454:../src/cliSupport.c **** 
 455:../src/cliSupport.c ****                 if ( eepromConfig.mixerConfiguration == MIXERTYPE_FLYING_WING )
 456:../src/cliSupport.c ****                 {
 457:../src/cliSupport.c ****                     uart1Print("Roll Direction Left:            ");
 458:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.rollDirectionLeft,   numberString, 10); uart1Print(
 459:../src/cliSupport.c ****                     uart1Print("Roll Direction Right:           ");
 460:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.rollDirectionRight,  numberString, 10); uart1Print(
 461:../src/cliSupport.c ****                     uart1Print("Pitch Direction Left:           ");
 462:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.pitchDirectionLeft,  numberString, 10); uart1Print(
 463:../src/cliSupport.c ****                     uart1Print("Pitch Direction Right:          ");
 464:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.pitchDirectionRight, numberString, 10); uart1Print(
 465:../src/cliSupport.c ****                     uart1Print("Wing Left Minimum:              ");
 466:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.wingLeftMinimum,     numberString, 10); uart1Print(
 467:../src/cliSupport.c ****                     uart1Print("Wing Left Maximum:              ");
 468:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.wingLeftMaximum,     numberString, 10); uart1Print(
 469:../src/cliSupport.c ****                     uart1Print("Wing Right Minimum:             ");
 470:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.wingRightMinimum,    numberString, 10); uart1Print(
 471:../src/cliSupport.c ****                     uart1Print("Wing Right Maximum:             ");
 472:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.wingRightMaximum,    numberString, 10); uart1Print(
 473:../src/cliSupport.c ****                 }
 474:../src/cliSupport.c **** 
 475:../src/cliSupport.c ****                 if ( eepromConfig.mixerConfiguration == MIXERTYPE_GIMBAL )
 476:../src/cliSupport.c ****                 {
 477:../src/cliSupport.c ****                     uart1Print("Gimbal Roll Servo Min:          ");
 478:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.gimbalRollServoMin,  numberString, 10); uart1Print(
 479:../src/cliSupport.c ****                     uart1Print("Gimbal Roll Servo Mid:          ");
 480:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.gimbalRollServoMid,  numberString, 10); uart1Print(
 481:../src/cliSupport.c ****                     uart1Print("Gimbal Roll Servo Max:          ");
 482:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.gimbalRollServoMax,  numberString, 10); uart1Print(
 483:../src/cliSupport.c ****                     uart1Print("Gimbal Roll Servo Gain:        ");
 484:../src/cliSupport.c ****                     ftoa(eepromConfig.gimbalRollServoGain, numberString);               uart1Print(
 485:../src/cliSupport.c ****                     uart1Print("Gimbal Pitch Servo Min:         ");
 486:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.gimbalPitchServoMin, numberString, 10); uart1Print(
 487:../src/cliSupport.c ****                     uart1Print("Gimbal Pitch Servo Mid:         ");
 488:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.gimbalPitchServoMid, numberString, 10); uart1Print(
 489:../src/cliSupport.c ****                     uart1Print("Gimbal Pitch Servo Max:         ");
 490:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.gimbalPitchServoMax, numberString, 10); uart1Print(
 491:../src/cliSupport.c ****                     uart1Print("Gimbal Pitch Servo Gain:       ");
 492:../src/cliSupport.c ****                     ftoa(eepromConfig.gimbalPitchServoGain, numberString);              uart1Print(
 493:../src/cliSupport.c ****                 }
 494:../src/cliSupport.c **** 
 495:../src/cliSupport.c ****                 if ( eepromConfig.mixerConfiguration == MIXERTYPE_TRI )
 496:../src/cliSupport.c ****                 {
 497:../src/cliSupport.c ****                     uart1Print("TriCopter Yaw Servo Min:        ");
 498:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.triYawServoMin, numberString, 10); uart1Print(numbe
 499:../src/cliSupport.c ****                     uart1Print("TriCopter Yaw Servo Mid:        ");
 500:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.triYawServoMid, numberString, 10); uart1Print(numbe
 501:../src/cliSupport.c ****                     uart1Print("TriCopter Yaw Servo Max:        ");
 502:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.triYawServoMax, numberString, 10); uart1Print(numbe
 503:../src/cliSupport.c ****                 }
 504:../src/cliSupport.c **** 
 505:../src/cliSupport.c ****                 if (eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_Y_COMP  ||
 506:../src/cliSupport.c ****                     eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_RY_COMP ||
 507:../src/cliSupport.c ****                     eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_PY_COMP ||
 508:../src/cliSupport.c ****                     eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_RP_COMP ||
 509:../src/cliSupport.c ****                     eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_RPY_COMP)
 510:../src/cliSupport.c ****                 {
 511:../src/cliSupport.c ****                     uart1Print("V Tail Angle                   ");
 512:../src/cliSupport.c ****                     ftoa(eepromConfig.vTailAngle, numberString); uart1Print(numberString); uart1Pri
 513:../src/cliSupport.c ****     			}
 514:../src/cliSupport.c **** 
 515:../src/cliSupport.c ****                 uart1Print("Yaw Direction:                  ");
 516:../src/cliSupport.c ****                 itoa((int8_t)eepromConfig.yawDirection,   numberString, 10); uart1Print(numberStrin
 517:../src/cliSupport.c **** 
 518:../src/cliSupport.c ****                 validQuery = false;
 519:../src/cliSupport.c ****                 break;
 520:../src/cliSupport.c **** 
 521:../src/cliSupport.c ****             ///////////////////////////
 522:../src/cliSupport.c **** 
 523:../src/cliSupport.c ****             case 'b': // Free Mix Matrix
 524:../src/cliSupport.c ****         	    uart1Print("\nNumber of Free Mixer Motors:  ");
 525:../src/cliSupport.c ****         	    itoa( eepromConfig.freeMixMotors, numberString, 10 ); uart1Print( numberString ); uart
 526:../src/cliSupport.c ****                 uart1Print("         Roll    Pitch   Yaw\n");
 527:../src/cliSupport.c **** 
 528:../src/cliSupport.c ****         	    for ( index = 0; index < eepromConfig.freeMixMotors; index++ )
 529:../src/cliSupport.c ****         	    {
 530:../src/cliSupport.c ****         	    	uart1Print("Motor"); itoa(index, numberString, 10);       uart1Print(numberString); u
 531:../src/cliSupport.c ****         	    	ftoa(eepromConfig.freeMix[index][ROLL ], numberString); uart1Print(numberString); uar
 532:../src/cliSupport.c ****         	    	ftoa(eepromConfig.freeMix[index][PITCH], numberString); uart1Print(numberString); uar
 533:../src/cliSupport.c ****         	    	ftoa(eepromConfig.freeMix[index][YAW  ], numberString); uart1Print(numberString); uar
 534:../src/cliSupport.c ****         	    }
 535:../src/cliSupport.c **** 
 536:../src/cliSupport.c ****         	    uart1Print("\n");
 537:../src/cliSupport.c ****         	    validQuery = false;
 538:../src/cliSupport.c ****         	    break;
 539:../src/cliSupport.c **** 
 540:../src/cliSupport.c ****             ///////////////////////////
 541:../src/cliSupport.c **** 
 542:../src/cliSupport.c **** 			case 'x':
 543:../src/cliSupport.c **** 			    uart1Print("\nExiting Mixer CLI....\n\n");
 544:../src/cliSupport.c **** 			    cliBusy = false;
 545:../src/cliSupport.c **** 			    return;
 546:../src/cliSupport.c **** 			    break;
 547:../src/cliSupport.c **** 
 548:../src/cliSupport.c ****             ///////////////////////////
 549:../src/cliSupport.c **** 
 550:../src/cliSupport.c ****             case 'A': // Read Mixer Configuration
 551:../src/cliSupport.c ****                 eepromConfig.mixerConfiguration = (uint8_t)readFloatUart1();
 552:../src/cliSupport.c ****                 initMixer();
 553:../src/cliSupport.c **** 
 554:../src/cliSupport.c ****         	    mixerQuery = 'a';
 555:../src/cliSupport.c ****                 validQuery = true;
 556:../src/cliSupport.c **** 		        break;
 557:../src/cliSupport.c **** 
 558:../src/cliSupport.c ****             ///////////////////////////
 559:../src/cliSupport.c **** 
 560:../src/cliSupport.c ****             case 'B': // Read ESC and Servo PWM Update Rates
 561:../src/cliSupport.c ****                 eepromConfig.escPwmRate   = (uint16_t)readFloatUart1();
 562:../src/cliSupport.c ****                 eepromConfig.servoPwmRate = (uint16_t)readFloatUart1();
 563:../src/cliSupport.c **** 
 564:../src/cliSupport.c ****                 pwmEscInit(eepromConfig.escPwmRate);
 565:../src/cliSupport.c ****                 pwmServoInit(eepromConfig.servoPwmRate);
 566:../src/cliSupport.c **** 
 567:../src/cliSupport.c ****                 mixerQuery = 'a';
 568:../src/cliSupport.c ****                 validQuery = true;
 569:../src/cliSupport.c ****         	    break;
 570:../src/cliSupport.c **** 
 571:../src/cliSupport.c ****             ///////////////////////////
 572:../src/cliSupport.c **** 
 573:../src/cliSupport.c ****             case 'C': // Read BiCopter Left Servo Parameters
 574:../src/cliSupport.c ****            	    eepromConfig.biLeftServoMin = readFloatUart1();
 575:../src/cliSupport.c ****            	    eepromConfig.biLeftServoMid = readFloatUart1();
 576:../src/cliSupport.c ****            	    eepromConfig.biLeftServoMax = readFloatUart1();
 577:../src/cliSupport.c **** 
 578:../src/cliSupport.c ****            	    mixerQuery = 'a';
 579:../src/cliSupport.c ****                 validQuery = true;
 580:../src/cliSupport.c ****                 break;
 581:../src/cliSupport.c **** 
 582:../src/cliSupport.c ****             ///////////////////////////
 583:../src/cliSupport.c **** 
 584:../src/cliSupport.c ****             case 'D': // Read BiCopter Right Servo Parameters
 585:../src/cliSupport.c ****            	    eepromConfig.biRightServoMin = readFloatUart1();
 586:../src/cliSupport.c ****            	    eepromConfig.biRightServoMid = readFloatUart1();
 587:../src/cliSupport.c ****            	    eepromConfig.biRightServoMax = readFloatUart1();
 588:../src/cliSupport.c **** 
 589:../src/cliSupport.c ****            	    mixerQuery = 'a';
 590:../src/cliSupport.c ****                 validQuery = true;
 591:../src/cliSupport.c ****                 break;
 592:../src/cliSupport.c **** 
 593:../src/cliSupport.c ****             ///////////////////////////
 594:../src/cliSupport.c **** 
 595:../src/cliSupport.c ****             case 'E': // Read Flying Wing Servo Directions
 596:../src/cliSupport.c ****                 eepromConfig.rollDirectionLeft   = readFloatUart1();
 597:../src/cliSupport.c ****                 eepromConfig.rollDirectionRight  = readFloatUart1();
 598:../src/cliSupport.c ****                 eepromConfig.pitchDirectionLeft  = readFloatUart1();
 599:../src/cliSupport.c ****                 eepromConfig.pitchDirectionRight = readFloatUart1();
 600:../src/cliSupport.c **** 
 601:../src/cliSupport.c ****          	    mixerQuery = 'a';
 602:../src/cliSupport.c ****                 validQuery = true;
 603:../src/cliSupport.c ****                 break;
 604:../src/cliSupport.c **** 
 605:../src/cliSupport.c ****             ///////////////////////////
 606:../src/cliSupport.c **** 
 607:../src/cliSupport.c ****             case 'F': // Read Flying Wing Servo Limits
 608:../src/cliSupport.c ****            	    eepromConfig.wingLeftMinimum  = readFloatUart1();
 609:../src/cliSupport.c ****            	    eepromConfig.wingLeftMaximum  = readFloatUart1();
 610:../src/cliSupport.c ****            	    eepromConfig.wingRightMinimum = readFloatUart1();
 611:../src/cliSupport.c ****            	    eepromConfig.wingRightMaximum = readFloatUart1();
 612:../src/cliSupport.c **** 
 613:../src/cliSupport.c ****                 mixerQuery = 'a';
 614:../src/cliSupport.c ****                 validQuery = true;
 615:../src/cliSupport.c ****                 break;
 616:../src/cliSupport.c **** 
 617:../src/cliSupport.c ****             ///////////////////////////
 618:../src/cliSupport.c **** 
 619:../src/cliSupport.c ****             case 'G': // Read Free Mix Motor Number
 620:../src/cliSupport.c ****            	    eepromConfig.freeMixMotors = (uint8_t)readFloatUart1();
 621:../src/cliSupport.c ****            	    initMixer();
 622:../src/cliSupport.c **** 
 623:../src/cliSupport.c ****            	    mixerQuery = 'b';
 624:../src/cliSupport.c ****                 validQuery = true;
 625:../src/cliSupport.c ****                 break;
 626:../src/cliSupport.c **** 
 627:../src/cliSupport.c ****             ///////////////////////////
 628:../src/cliSupport.c **** 
 629:../src/cliSupport.c ****             case 'H': // Read Free Mix Matrix Element
 630:../src/cliSupport.c ****                 rows    = (uint8_t)readFloatUart1();
 631:../src/cliSupport.c ****                 columns = (uint8_t)readFloatUart1();
 632:../src/cliSupport.c ****                 eepromConfig.freeMix[rows][columns] = readFloatUart1();
 633:../src/cliSupport.c **** 
 634:../src/cliSupport.c ****                 mixerQuery = 'b';
 635:../src/cliSupport.c ****                 validQuery = true;
 636:../src/cliSupport.c ****                 break;
 637:../src/cliSupport.c **** 
 638:../src/cliSupport.c ****             ///////////////////////////
 639:../src/cliSupport.c **** 
 640:../src/cliSupport.c ****             case 'I': // Read Gimbal Roll Servo Parameters
 641:../src/cliSupport.c ****          	    eepromConfig.gimbalRollServoMin  = readFloatUart1();
 642:../src/cliSupport.c ****            	    eepromConfig.gimbalRollServoMid  = readFloatUart1();
 643:../src/cliSupport.c ****            	    eepromConfig.gimbalRollServoMax  = readFloatUart1();
 644:../src/cliSupport.c ****            	    eepromConfig.gimbalRollServoGain = readFloatUart1();
 645:../src/cliSupport.c **** 
 646:../src/cliSupport.c ****            	    mixerQuery = 'a';
 647:../src/cliSupport.c ****                 validQuery = true;
 648:../src/cliSupport.c ****                 break;
 649:../src/cliSupport.c **** 
 650:../src/cliSupport.c ****             ///////////////////////////
 651:../src/cliSupport.c **** 
 652:../src/cliSupport.c ****             case 'J': // Read Gimbal Pitch Servo Parameters
 653:../src/cliSupport.c ****            	    eepromConfig.gimbalPitchServoMin  = readFloatUart1();
 654:../src/cliSupport.c ****            	    eepromConfig.gimbalPitchServoMid  = readFloatUart1();
 655:../src/cliSupport.c ****            	    eepromConfig.gimbalPitchServoMax  = readFloatUart1();
 656:../src/cliSupport.c ****            	    eepromConfig.gimbalPitchServoGain = readFloatUart1();
 657:../src/cliSupport.c **** 
 658:../src/cliSupport.c ****            	    mixerQuery = 'a';
 659:../src/cliSupport.c ****                 validQuery = true;
 660:../src/cliSupport.c ****                 break;
 661:../src/cliSupport.c **** 
 662:../src/cliSupport.c ****             ///////////////////////////
 663:../src/cliSupport.c **** 
 664:../src/cliSupport.c ****             case 'K': // Read TriCopter YawServo Parameters
 665:../src/cliSupport.c ****         	    eepromConfig.triYawServoMin = readFloatUart1();
 666:../src/cliSupport.c ****            	    eepromConfig.triYawServoMid = readFloatUart1();
 667:../src/cliSupport.c ****            	    eepromConfig.triYawServoMax = readFloatUart1();
 668:../src/cliSupport.c **** 
 669:../src/cliSupport.c ****            	    mixerQuery = 'a';
 670:../src/cliSupport.c ****                 validQuery = true;
 671:../src/cliSupport.c ****                 break;
 672:../src/cliSupport.c **** 
 673:../src/cliSupport.c ****             ///////////////////////////
 674:../src/cliSupport.c **** 
 675:../src/cliSupport.c ****             case 'L': // Read V Tail Angle
 676:../src/cliSupport.c ****         	    eepromConfig.vTailAngle = readFloatUart1();
 677:../src/cliSupport.c **** 
 678:../src/cliSupport.c ****         	    mixerQuery = 'a';
 679:../src/cliSupport.c ****                 validQuery = true;
 680:../src/cliSupport.c ****                 break;
 681:../src/cliSupport.c **** 
 682:../src/cliSupport.c ****             ///////////////////////////
 683:../src/cliSupport.c **** 
 684:../src/cliSupport.c ****             case 'M': // Read yaw direction
 685:../src/cliSupport.c ****                 tempFloat = readFloatUart1();
 686:../src/cliSupport.c ****                 if (tempFloat >= 0.0)
 687:../src/cliSupport.c ****                     tempFloat = 1.0;
 688:../src/cliSupport.c ****                 else
 689:../src/cliSupport.c ****                 	tempFloat = -1.0;
 690:../src/cliSupport.c **** 
 691:../src/cliSupport.c ****                 eepromConfig.yawDirection = tempFloat;
 692:../src/cliSupport.c **** 
 693:../src/cliSupport.c ****                 mixerQuery = 'a';
 694:../src/cliSupport.c ****                 validQuery = true;
 695:../src/cliSupport.c ****                 break;
 696:../src/cliSupport.c **** 
 697:../src/cliSupport.c ****             ///////////////////////////
 698:../src/cliSupport.c **** 
 699:../src/cliSupport.c ****             case 'W': // Write EEPROM Parameters
 700:../src/cliSupport.c ****                 uart1Print("\nWriting EEPROM Parameters....\n\n");
 701:../src/cliSupport.c ****                 writeEEPROM();
 702:../src/cliSupport.c ****                 break;
 703:../src/cliSupport.c **** 
 704:../src/cliSupport.c **** 			///////////////////////////
 705:../src/cliSupport.c **** 
 706:../src/cliSupport.c **** 			case '?':
 707:../src/cliSupport.c **** 			   	uart1Print("\n");
 708:../src/cliSupport.c **** 			   	uart1Print("'a' Mixer Configuration Data               'A' Set Mixer Configuration          
 709:../src/cliSupport.c ****    		        uart1Print("'b' Free Mixer Configuration               'B' Set PWM Rates              
 710:../src/cliSupport.c **** 			   	uart1Print("                                           'C' Set BiCopter Left Servo Parameter
 711:../src/cliSupport.c **** 			   	uart1Print("                                           'D' Set BiCopter Right Servo Paramete
 712:../src/cliSupport.c **** 			   	uart1Print("                                           'E' Set Flying Wing Servo Directions 
 713:../src/cliSupport.c **** 			   	uart1Print("                                           'F' Set Flying Wing Servo Limits     
 714:../src/cliSupport.c ****    		        uart1Print("                                           'G' Set Number of FreeMix Motor
 715:../src/cliSupport.c ****    		        uart1Print("                                           'H' Set FreeMix Matrix Element 
 716:../src/cliSupport.c ****    		        uart1Print("                                           'I' Set Gimbal Roll Servo Param
 717:../src/cliSupport.c ****    		        uart1Print("                                           'J' Set Gimbal Pitch Servo Para
 718:../src/cliSupport.c ****    		        uart1Print("                                           'K' Set TriCopter Servo Paramet
 719:../src/cliSupport.c ****    		        uart1Print("                                           'L' Set V Tail Angle           
 720:../src/cliSupport.c ****    		        uart1Print("                                           'M' Set Yaw Direction          
 721:../src/cliSupport.c ****    		        uart1Print("                                           'W' Write EEPROM Parameters\n")
 722:../src/cliSupport.c ****    		        uart1Print("'x' Exit Sensor CLI                        '?' Command Summary\n");
 723:../src/cliSupport.c ****    		        uart1Print("\n");
 724:../src/cliSupport.c **** 	    	    break;
 725:../src/cliSupport.c **** 
 726:../src/cliSupport.c **** 	    	///////////////////////////
 727:../src/cliSupport.c **** 	    }
 728:../src/cliSupport.c **** 	}
 1031              		.loc 1 728 0
 1032 0638 00BF     		nop
 1033              	.L106:
 314:../src/cliSupport.c ****         uart1Print("Mixer CLI -> ");
 1034              		.loc 1 314 0
 1035 063a 40F20000 		movw	r0, #:lower16:.LC35
 1036 063e C0F20000 		movt	r0, #:upper16:.LC35
 1037 0642 FFF7FEFF 		bl	uart1Print
 316:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
 1038              		.loc 1 316 0
 1039 0646 00BF     		nop
 1040              	.L51:
 316:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
 1041              		.loc 1 316 0 is_stmt 0 discriminator 1
 1042 0648 FFF7FEFF 		bl	uart1Available
 1043 064c 0346     		mov	r3, r0
 1044 064e 002B     		cmp	r3, #0
 1045 0650 03D1     		bne	.L50
 316:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
 1046              		.loc 1 316 0 discriminator 2
 1047 0652 9DF80930 		ldrb	r3, [sp, #9]	@ zero_extendqisi2
 1048 0656 002B     		cmp	r3, #0
 1049 0658 F6D0     		beq	.L51
 1050              	.L50:
 318:../src/cliSupport.c **** 		if (validQuery == false)
 1051              		.loc 1 318 0 is_stmt 1
 1052 065a 9DF80930 		ldrb	r3, [sp, #9]	@ zero_extendqisi2
 1053 065e 002B     		cmp	r3, #0
 1054 0660 04D1     		bne	.L52
 319:../src/cliSupport.c **** 		    mixerQuery = uart1Read();
 1055              		.loc 1 319 0
 1056 0662 FFF7FEFF 		bl	uart1Read
 1057 0666 0346     		mov	r3, r0
 1058 0668 8DF80A30 		strb	r3, [sp, #10]
 1059              	.L52:
 321:../src/cliSupport.c **** 		uart1Print("\n");
 1060              		.loc 1 321 0
 1061 066c 40F20000 		movw	r0, #:lower16:.LC2
 1062 0670 C0F20000 		movt	r0, #:upper16:.LC2
 1063 0674 FFF7FEFF 		bl	uart1Print
 323:../src/cliSupport.c **** 		switch(mixerQuery)
 1064              		.loc 1 323 0
 1065 0678 9DF80A30 		ldrb	r3, [sp, #10]	@ zero_extendqisi2
 1066 067c A3F13F03 		sub	r3, r3, #63
 1067 0680 392B     		cmp	r3, #57
 1068 0682 D9D8     		bhi	.L107
 1069 0684 01A2     		adr	r2, .L72
 1070 0686 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1071 068a 00BF     		.align	2
 1072              	.L72:
 1073 068c 13180000 		.word	.L54+1
 1074 0690 39060000 		.word	.L107+1
 1075 0694 11140000 		.word	.L55+1
 1076 0698 45140000 		.word	.L56+1
 1077 069c B7140000 		.word	.L57+1
 1078 06a0 FF140000 		.word	.L58+1
 1079 06a4 47150000 		.word	.L59+1
 1080 06a8 A1150000 		.word	.L60+1
 1081 06ac FB150000 		.word	.L61+1
 1082 06b0 2F160000 		.word	.L62+1
 1083 06b4 99160000 		.word	.L63+1
 1084 06b8 F3160000 		.word	.L64+1
 1085 06bc 4D170000 		.word	.L65+1
 1086 06c0 95170000 		.word	.L66+1
 1087 06c4 B9170000 		.word	.L67+1
 1088 06c8 39060000 		.word	.L107+1
 1089 06cc 39060000 		.word	.L107+1
 1090 06d0 39060000 		.word	.L107+1
 1091 06d4 39060000 		.word	.L107+1
 1092 06d8 39060000 		.word	.L107+1
 1093 06dc 39060000 		.word	.L107+1
 1094 06e0 39060000 		.word	.L107+1
 1095 06e4 39060000 		.word	.L107+1
 1096 06e8 39060000 		.word	.L107+1
 1097 06ec 01180000 		.word	.L68+1
 1098 06f0 39060000 		.word	.L107+1
 1099 06f4 39060000 		.word	.L107+1
 1100 06f8 39060000 		.word	.L107+1
 1101 06fc 39060000 		.word	.L107+1
 1102 0700 39060000 		.word	.L107+1
 1103 0704 39060000 		.word	.L107+1
 1104 0708 39060000 		.word	.L107+1
 1105 070c 39060000 		.word	.L107+1
 1106 0710 39060000 		.word	.L107+1
 1107 0714 75070000 		.word	.L69+1
 1108 0718 57120000 		.word	.L70+1
 1109 071c 39060000 		.word	.L107+1
 1110 0720 39060000 		.word	.L107+1
 1111 0724 39060000 		.word	.L107+1
 1112 0728 39060000 		.word	.L107+1
 1113 072c 39060000 		.word	.L107+1
 1114 0730 39060000 		.word	.L107+1
 1115 0734 39060000 		.word	.L107+1
 1116 0738 39060000 		.word	.L107+1
 1117 073c 39060000 		.word	.L107+1
 1118 0740 39060000 		.word	.L107+1
 1119 0744 39060000 		.word	.L107+1
 1120 0748 39060000 		.word	.L107+1
 1121 074c 39060000 		.word	.L107+1
 1122 0750 39060000 		.word	.L107+1
 1123 0754 39060000 		.word	.L107+1
 1124 0758 39060000 		.word	.L107+1
 1125 075c 39060000 		.word	.L107+1
 1126 0760 39060000 		.word	.L107+1
 1127 0764 39060000 		.word	.L107+1
 1128 0768 39060000 		.word	.L107+1
 1129 076c 39060000 		.word	.L107+1
 1130 0770 F3130000 		.word	.L71+1
 1131              	.L69:
 328:../src/cliSupport.c ****                 uart1Print("\nMixer Configuration:            ");
 1132              		.loc 1 328 0
 1133 0774 40F20000 		movw	r0, #:lower16:.LC36
 1134 0778 C0F20000 		movt	r0, #:upper16:.LC36
 1135 077c FFF7FEFF 		bl	uart1Print
 329:../src/cliSupport.c ****                 switch (eepromConfig.mixerConfiguration)
 1136              		.loc 1 329 0
 1137 0780 40F20003 		movw	r3, #:lower16:eepromConfig
 1138 0784 C0F20003 		movt	r3, #:upper16:eepromConfig
 1139 0788 93F87C30 		ldrb	r3, [r3, #124]	@ zero_extendqisi2
 1140 078c 03F1FF33 		add	r3, r3, #-1
 1141 0790 142B     		cmp	r3, #20
 1142 0792 00F2C080 		bhi	.L73
 1143 0796 01A2     		adr	r2, .L95
 1144 0798 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1145              		.align	2
 1146              	.L95:
 1147 079c F1070000 		.word	.L74+1
 1148 07a0 FF070000 		.word	.L75+1
 1149 07a4 0D080000 		.word	.L76+1
 1150 07a8 1B080000 		.word	.L77+1
 1151 07ac 29080000 		.word	.L78+1
 1152 07b0 37080000 		.word	.L79+1
 1153 07b4 45080000 		.word	.L80+1
 1154 07b8 53080000 		.word	.L81+1
 1155 07bc 61080000 		.word	.L82+1
 1156 07c0 6F080000 		.word	.L83+1
 1157 07c4 7D080000 		.word	.L84+1
 1158 07c8 8B080000 		.word	.L85+1
 1159 07cc 99080000 		.word	.L86+1
 1160 07d0 A7080000 		.word	.L87+1
 1161 07d4 B5080000 		.word	.L88+1
 1162 07d8 C3080000 		.word	.L89+1
 1163 07dc D1080000 		.word	.L90+1
 1164 07e0 DF080000 		.word	.L91+1
 1165 07e4 ED080000 		.word	.L92+1
 1166 07e8 FB080000 		.word	.L93+1
 1167 07ec 09090000 		.word	.L94+1
 1168              	.L74:
 332:../src/cliSupport.c ****                     	uart1Print("MIXERTYPE GIMBAL\n");
 1169              		.loc 1 332 0
 1170 07f0 40F20000 		movw	r0, #:lower16:.LC37
 1171 07f4 C0F20000 		movt	r0, #:upper16:.LC37
 1172 07f8 FFF7FEFF 		bl	uart1Print
 333:../src/cliSupport.c ****                     	break;
 1173              		.loc 1 333 0
 1174 07fc 8BE0     		b	.L73
 1175              	.L75:
 338:../src/cliSupport.c ****                     	uart1Print("MIXERTYPE FLYING WING\n");
 1176              		.loc 1 338 0
 1177 07fe 40F20000 		movw	r0, #:lower16:.LC38
 1178 0802 C0F20000 		movt	r0, #:upper16:.LC38
 1179 0806 FFF7FEFF 		bl	uart1Print
 339:../src/cliSupport.c ****                     	break;
 1180              		.loc 1 339 0
 1181 080a 84E0     		b	.L73
 1182              	.L76:
 344:../src/cliSupport.c ****                         uart1Print("MIXERTYPE BICOPTER\n");
 1183              		.loc 1 344 0
 1184 080c 40F20000 		movw	r0, #:lower16:.LC39
 1185 0810 C0F20000 		movt	r0, #:upper16:.LC39
 1186 0814 FFF7FEFF 		bl	uart1Print
 345:../src/cliSupport.c ****                         break;
 1187              		.loc 1 345 0
 1188 0818 7DE0     		b	.L73
 1189              	.L77:
 350:../src/cliSupport.c ****                         uart1Print("MIXERTYPE TRICOPTER\n");
 1190              		.loc 1 350 0
 1191 081a 40F20000 		movw	r0, #:lower16:.LC40
 1192 081e C0F20000 		movt	r0, #:upper16:.LC40
 1193 0822 FFF7FEFF 		bl	uart1Print
 351:../src/cliSupport.c ****                         break;
 1194              		.loc 1 351 0
 1195 0826 76E0     		b	.L73
 1196              	.L78:
 356:../src/cliSupport.c ****                         uart1Print("MIXERTYPE QUAD PLUS\n");
 1197              		.loc 1 356 0
 1198 0828 40F20000 		movw	r0, #:lower16:.LC41
 1199 082c C0F20000 		movt	r0, #:upper16:.LC41
 1200 0830 FFF7FEFF 		bl	uart1Print
 357:../src/cliSupport.c ****                         break;
 1201              		.loc 1 357 0
 1202 0834 6FE0     		b	.L73
 1203              	.L79:
 360:../src/cliSupport.c ****                         uart1Print("MIXERTYPE QUAD X\n");
 1204              		.loc 1 360 0
 1205 0836 40F20000 		movw	r0, #:lower16:.LC42
 1206 083a C0F20000 		movt	r0, #:upper16:.LC42
 1207 083e FFF7FEFF 		bl	uart1Print
 361:../src/cliSupport.c ****                         break;
 1208              		.loc 1 361 0
 1209 0842 68E0     		b	.L73
 1210              	.L80:
 364:../src/cliSupport.c ****                     	uart1Print("MULTITYPE VTAIL NO COMP\n");
 1211              		.loc 1 364 0
 1212 0844 40F20000 		movw	r0, #:lower16:.LC43
 1213 0848 C0F20000 		movt	r0, #:upper16:.LC43
 1214 084c FFF7FEFF 		bl	uart1Print
 365:../src/cliSupport.c ****                     	break;
 1215              		.loc 1 365 0
 1216 0850 61E0     		b	.L73
 1217              	.L81:
 368:../src/cliSupport.c ****                     	uart1Print("MULTITYPE VTAIL Y COMP\n");
 1218              		.loc 1 368 0
 1219 0852 40F20000 		movw	r0, #:lower16:.LC44
 1220 0856 C0F20000 		movt	r0, #:upper16:.LC44
 1221 085a FFF7FEFF 		bl	uart1Print
 369:../src/cliSupport.c ****                     	break;
 1222              		.loc 1 369 0
 1223 085e 5AE0     		b	.L73
 1224              	.L82:
 372:../src/cliSupport.c ****                     	uart1Print("MULTITYPE VTAIL RY COMP\n");
 1225              		.loc 1 372 0
 1226 0860 40F20000 		movw	r0, #:lower16:.LC45
 1227 0864 C0F20000 		movt	r0, #:upper16:.LC45
 1228 0868 FFF7FEFF 		bl	uart1Print
 373:../src/cliSupport.c ****                     	break;
 1229              		.loc 1 373 0
 1230 086c 53E0     		b	.L73
 1231              	.L83:
 376:../src/cliSupport.c ****                     	uart1Print("MULTITYPE VTAIL PY COMP\n");
 1232              		.loc 1 376 0
 1233 086e 40F20000 		movw	r0, #:lower16:.LC46
 1234 0872 C0F20000 		movt	r0, #:upper16:.LC46
 1235 0876 FFF7FEFF 		bl	uart1Print
 377:../src/cliSupport.c ****                     	break;
 1236              		.loc 1 377 0
 1237 087a 4CE0     		b	.L73
 1238              	.L84:
 380:../src/cliSupport.c ****                     	uart1Print("MULTITYPE VTAIL RP COMP\n");
 1239              		.loc 1 380 0
 1240 087c 40F20000 		movw	r0, #:lower16:.LC47
 1241 0880 C0F20000 		movt	r0, #:upper16:.LC47
 1242 0884 FFF7FEFF 		bl	uart1Print
 381:../src/cliSupport.c ****                     	break;
 1243              		.loc 1 381 0
 1244 0888 45E0     		b	.L73
 1245              	.L85:
 384:../src/cliSupport.c ****                     	uart1Print("MULTITYPE VTAIL RPY COMP\n");
 1246              		.loc 1 384 0
 1247 088a 40F20000 		movw	r0, #:lower16:.LC48
 1248 088e C0F20000 		movt	r0, #:upper16:.LC48
 1249 0892 FFF7FEFF 		bl	uart1Print
 385:../src/cliSupport.c ****                     	break;
 1250              		.loc 1 385 0
 1251 0896 3EE0     		b	.L73
 1252              	.L86:
 388:../src/cliSupport.c ****                     	uart1Print("MIXERTYPE Y4\n");
 1253              		.loc 1 388 0
 1254 0898 40F20000 		movw	r0, #:lower16:.LC49
 1255 089c C0F20000 		movt	r0, #:upper16:.LC49
 1256 08a0 FFF7FEFF 		bl	uart1Print
 389:../src/cliSupport.c ****                     	break;
 1257              		.loc 1 389 0
 1258 08a4 37E0     		b	.L73
 1259              	.L87:
 394:../src/cliSupport.c ****                         uart1Print("MIXERTYPE HEX PLUS\n");
 1260              		.loc 1 394 0
 1261 08a6 40F20000 		movw	r0, #:lower16:.LC50
 1262 08aa C0F20000 		movt	r0, #:upper16:.LC50
 1263 08ae FFF7FEFF 		bl	uart1Print
 395:../src/cliSupport.c ****                         break;
 1264              		.loc 1 395 0
 1265 08b2 30E0     		b	.L73
 1266              	.L88:
 398:../src/cliSupport.c ****                         uart1Print("MIXERTYPE HEX X\n");
 1267              		.loc 1 398 0
 1268 08b4 40F20000 		movw	r0, #:lower16:.LC51
 1269 08b8 C0F20000 		movt	r0, #:upper16:.LC51
 1270 08bc FFF7FEFF 		bl	uart1Print
 399:../src/cliSupport.c ****                         break;
 1271              		.loc 1 399 0
 1272 08c0 29E0     		b	.L73
 1273              	.L89:
 402:../src/cliSupport.c ****                         uart1Print("MIXERTYPE Y6\n");
 1274              		.loc 1 402 0
 1275 08c2 40F20000 		movw	r0, #:lower16:.LC52
 1276 08c6 C0F20000 		movt	r0, #:upper16:.LC52
 1277 08ca FFF7FEFF 		bl	uart1Print
 403:../src/cliSupport.c ****                         break;
 1278              		.loc 1 403 0
 1279 08ce 22E0     		b	.L73
 1280              	.L90:
 408:../src/cliSupport.c ****                         uart1Print("MIXERTYPE FLAT OCTO PLUS\n");
 1281              		.loc 1 408 0
 1282 08d0 40F20000 		movw	r0, #:lower16:.LC53
 1283 08d4 C0F20000 		movt	r0, #:upper16:.LC53
 1284 08d8 FFF7FEFF 		bl	uart1Print
 409:../src/cliSupport.c ****                         break;
 1285              		.loc 1 409 0
 1286 08dc 1BE0     		b	.L73
 1287              	.L91:
 412:../src/cliSupport.c ****                         uart1Print("MIXERTYPE FLAT OCTO X\n");
 1288              		.loc 1 412 0
 1289 08de 40F20000 		movw	r0, #:lower16:.LC54
 1290 08e2 C0F20000 		movt	r0, #:upper16:.LC54
 1291 08e6 FFF7FEFF 		bl	uart1Print
 413:../src/cliSupport.c ****                         break;
 1292              		.loc 1 413 0
 1293 08ea 14E0     		b	.L73
 1294              	.L92:
 416:../src/cliSupport.c ****                         uart1Print("MIXERTYPE COAXIAL OCTO PLUS\n");
 1295              		.loc 1 416 0
 1296 08ec 40F20000 		movw	r0, #:lower16:.LC55
 1297 08f0 C0F20000 		movt	r0, #:upper16:.LC55
 1298 08f4 FFF7FEFF 		bl	uart1Print
 417:../src/cliSupport.c ****                         break;
 1299              		.loc 1 417 0
 1300 08f8 0DE0     		b	.L73
 1301              	.L93:
 420:../src/cliSupport.c ****                         uart1Print("MIXERTYPE COAXIAL OCTO X\n");
 1302              		.loc 1 420 0
 1303 08fa 40F20000 		movw	r0, #:lower16:.LC56
 1304 08fe C0F20000 		movt	r0, #:upper16:.LC56
 1305 0902 FFF7FEFF 		bl	uart1Print
 421:../src/cliSupport.c ****                         break;
 1306              		.loc 1 421 0
 1307 0906 06E0     		b	.L73
 1308              	.L94:
 426:../src/cliSupport.c ****                     	uart1Print("MIXERTYPE FREE MIX\n");
 1309              		.loc 1 426 0
 1310 0908 40F20000 		movw	r0, #:lower16:.LC57
 1311 090c C0F20000 		movt	r0, #:upper16:.LC57
 1312 0910 FFF7FEFF 		bl	uart1Print
 427:../src/cliSupport.c ****                     	break;
 1313              		.loc 1 427 0
 1314 0914 00BF     		nop
 1315              	.L73:
 430:../src/cliSupport.c ****                 uart1Print("Number of Motors:               ");
 1316              		.loc 1 430 0
 1317 0916 40F20000 		movw	r0, #:lower16:.LC58
 1318 091a C0F20000 		movt	r0, #:upper16:.LC58
 1319 091e FFF7FEFF 		bl	uart1Print
 431:../src/cliSupport.c ****                 itoa(numberMotor,                         numberString, 10); uart1Print(numberStrin
 1320              		.loc 1 431 0
 1321 0922 40F20003 		movw	r3, #:lower16:numberMotor
 1322 0926 C0F20003 		movt	r3, #:upper16:numberMotor
 1323 092a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1324 092c 1846     		mov	r0, r3
 1325 092e 40F20001 		movw	r1, #:lower16:numberString
 1326 0932 C0F20001 		movt	r1, #:upper16:numberString
 1327 0936 4FF00A02 		mov	r2, #10
 1328 093a FFF7FEFF 		bl	itoa
 1329 093e 40F20000 		movw	r0, #:lower16:numberString
 1330 0942 C0F20000 		movt	r0, #:upper16:numberString
 1331 0946 FFF7FEFF 		bl	uart1Print
 1332 094a 40F20000 		movw	r0, #:lower16:.LC2
 1333 094e C0F20000 		movt	r0, #:upper16:.LC2
 1334 0952 FFF7FEFF 		bl	uart1Print
 433:../src/cliSupport.c ****                 uart1Print("ESC PWM Rate:                   ");
 1335              		.loc 1 433 0
 1336 0956 40F20000 		movw	r0, #:lower16:.LC59
 1337 095a C0F20000 		movt	r0, #:upper16:.LC59
 1338 095e FFF7FEFF 		bl	uart1Print
 434:../src/cliSupport.c ****                 itoa((uint16_t)eepromConfig.escPwmRate,   numberString, 10); uart1Print(numberStrin
 1339              		.loc 1 434 0
 1340 0962 40F20003 		movw	r3, #:lower16:eepromConfig
 1341 0966 C0F20003 		movt	r3, #:upper16:eepromConfig
 1342 096a B3F87830 		ldrh	r3, [r3, #120]
 1343 096e 1846     		mov	r0, r3
 1344 0970 40F20001 		movw	r1, #:lower16:numberString
 1345 0974 C0F20001 		movt	r1, #:upper16:numberString
 1346 0978 4FF00A02 		mov	r2, #10
 1347 097c FFF7FEFF 		bl	itoa
 1348 0980 40F20000 		movw	r0, #:lower16:numberString
 1349 0984 C0F20000 		movt	r0, #:upper16:numberString
 1350 0988 FFF7FEFF 		bl	uart1Print
 1351 098c 40F20000 		movw	r0, #:lower16:.LC2
 1352 0990 C0F20000 		movt	r0, #:upper16:.LC2
 1353 0994 FFF7FEFF 		bl	uart1Print
 436:../src/cliSupport.c ****                 uart1Print("Servo PWM Rate:                 ");
 1354              		.loc 1 436 0
 1355 0998 40F20000 		movw	r0, #:lower16:.LC60
 1356 099c C0F20000 		movt	r0, #:upper16:.LC60
 1357 09a0 FFF7FEFF 		bl	uart1Print
 437:../src/cliSupport.c ****                 itoa((uint16_t)eepromConfig.servoPwmRate, numberString, 10); uart1Print(numberStrin
 1358              		.loc 1 437 0
 1359 09a4 40F20003 		movw	r3, #:lower16:eepromConfig
 1360 09a8 C0F20003 		movt	r3, #:upper16:eepromConfig
 1361 09ac B3F87A30 		ldrh	r3, [r3, #122]
 1362 09b0 1846     		mov	r0, r3
 1363 09b2 40F20001 		movw	r1, #:lower16:numberString
 1364 09b6 C0F20001 		movt	r1, #:upper16:numberString
 1365 09ba 4FF00A02 		mov	r2, #10
 1366 09be FFF7FEFF 		bl	itoa
 1367 09c2 40F20000 		movw	r0, #:lower16:numberString
 1368 09c6 C0F20000 		movt	r0, #:upper16:numberString
 1369 09ca FFF7FEFF 		bl	uart1Print
 1370 09ce 40F20000 		movw	r0, #:lower16:.LC2
 1371 09d2 C0F20000 		movt	r0, #:upper16:.LC2
 1372 09d6 FFF7FEFF 		bl	uart1Print
 439:../src/cliSupport.c ****                 if ( eepromConfig.mixerConfiguration == MIXERTYPE_BI )
 1373              		.loc 1 439 0
 1374 09da 40F20003 		movw	r3, #:lower16:eepromConfig
 1375 09de C0F20003 		movt	r3, #:upper16:eepromConfig
 1376 09e2 93F87C30 		ldrb	r3, [r3, #124]	@ zero_extendqisi2
 1377 09e6 032B     		cmp	r3, #3
 1378 09e8 40F0E480 		bne	.L96
 441:../src/cliSupport.c ****                     uart1Print("BiCopter Left Servo Min:        ");
 1379              		.loc 1 441 0
 1380 09ec 40F20000 		movw	r0, #:lower16:.LC61
 1381 09f0 C0F20000 		movt	r0, #:upper16:.LC61
 1382 09f4 FFF7FEFF 		bl	uart1Print
 442:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.biLeftServoMin,  numberString, 10); uart1Print(numb
 1383              		.loc 1 442 0
 1384 09f8 40F20003 		movw	r3, #:lower16:eepromConfig
 1385 09fc C0F20003 		movt	r3, #:upper16:eepromConfig
 1386 0a00 D3EDAE7A 		flds	s15, [r3, #696]
 1387 0a04 FCEEE77A 		ftouizs	s15, s15
 1388 0a08 17EE903A 		fmrs	r3, s15	@ int
 1389 0a0c 9BB2     		uxth	r3, r3
 1390 0a0e 1846     		mov	r0, r3
 1391 0a10 40F20001 		movw	r1, #:lower16:numberString
 1392 0a14 C0F20001 		movt	r1, #:upper16:numberString
 1393 0a18 4FF00A02 		mov	r2, #10
 1394 0a1c FFF7FEFF 		bl	itoa
 1395 0a20 40F20000 		movw	r0, #:lower16:numberString
 1396 0a24 C0F20000 		movt	r0, #:upper16:numberString
 1397 0a28 FFF7FEFF 		bl	uart1Print
 1398 0a2c 40F20000 		movw	r0, #:lower16:.LC2
 1399 0a30 C0F20000 		movt	r0, #:upper16:.LC2
 1400 0a34 FFF7FEFF 		bl	uart1Print
 443:../src/cliSupport.c ****                     uart1Print("BiCopter Left Servo Mid:        ");
 1401              		.loc 1 443 0
 1402 0a38 40F20000 		movw	r0, #:lower16:.LC62
 1403 0a3c C0F20000 		movt	r0, #:upper16:.LC62
 1404 0a40 FFF7FEFF 		bl	uart1Print
 444:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.biLeftServoMid,  numberString, 10); uart1Print(numb
 1405              		.loc 1 444 0
 1406 0a44 40F20003 		movw	r3, #:lower16:eepromConfig
 1407 0a48 C0F20003 		movt	r3, #:upper16:eepromConfig
 1408 0a4c D3EDAF7A 		flds	s15, [r3, #700]
 1409 0a50 FCEEE77A 		ftouizs	s15, s15
 1410 0a54 17EE903A 		fmrs	r3, s15	@ int
 1411 0a58 9BB2     		uxth	r3, r3
 1412 0a5a 1846     		mov	r0, r3
 1413 0a5c 40F20001 		movw	r1, #:lower16:numberString
 1414 0a60 C0F20001 		movt	r1, #:upper16:numberString
 1415 0a64 4FF00A02 		mov	r2, #10
 1416 0a68 FFF7FEFF 		bl	itoa
 1417 0a6c 40F20000 		movw	r0, #:lower16:numberString
 1418 0a70 C0F20000 		movt	r0, #:upper16:numberString
 1419 0a74 FFF7FEFF 		bl	uart1Print
 1420 0a78 40F20000 		movw	r0, #:lower16:.LC2
 1421 0a7c C0F20000 		movt	r0, #:upper16:.LC2
 1422 0a80 FFF7FEFF 		bl	uart1Print
 445:../src/cliSupport.c ****                     uart1Print("BiCopter Left Servo Max:        ");
 1423              		.loc 1 445 0
 1424 0a84 40F20000 		movw	r0, #:lower16:.LC63
 1425 0a88 C0F20000 		movt	r0, #:upper16:.LC63
 1426 0a8c FFF7FEFF 		bl	uart1Print
 446:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.biLeftServoMax,  numberString, 10); uart1Print(numb
 1427              		.loc 1 446 0
 1428 0a90 40F20003 		movw	r3, #:lower16:eepromConfig
 1429 0a94 C0F20003 		movt	r3, #:upper16:eepromConfig
 1430 0a98 D3EDB07A 		flds	s15, [r3, #704]
 1431 0a9c FCEEE77A 		ftouizs	s15, s15
 1432 0aa0 17EE903A 		fmrs	r3, s15	@ int
 1433 0aa4 9BB2     		uxth	r3, r3
 1434 0aa6 1846     		mov	r0, r3
 1435 0aa8 40F20001 		movw	r1, #:lower16:numberString
 1436 0aac C0F20001 		movt	r1, #:upper16:numberString
 1437 0ab0 4FF00A02 		mov	r2, #10
 1438 0ab4 FFF7FEFF 		bl	itoa
 1439 0ab8 40F20000 		movw	r0, #:lower16:numberString
 1440 0abc C0F20000 		movt	r0, #:upper16:numberString
 1441 0ac0 FFF7FEFF 		bl	uart1Print
 1442 0ac4 40F20000 		movw	r0, #:lower16:.LC2
 1443 0ac8 C0F20000 		movt	r0, #:upper16:.LC2
 1444 0acc FFF7FEFF 		bl	uart1Print
 447:../src/cliSupport.c ****                     uart1Print("BiCopter Right Servo Min:       ");
 1445              		.loc 1 447 0
 1446 0ad0 40F20000 		movw	r0, #:lower16:.LC64
 1447 0ad4 C0F20000 		movt	r0, #:upper16:.LC64
 1448 0ad8 FFF7FEFF 		bl	uart1Print
 448:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.biRightServoMin, numberString, 10); uart1Print(numb
 1449              		.loc 1 448 0
 1450 0adc 40F20003 		movw	r3, #:lower16:eepromConfig
 1451 0ae0 C0F20003 		movt	r3, #:upper16:eepromConfig
 1452 0ae4 D3EDB17A 		flds	s15, [r3, #708]
 1453 0ae8 FCEEE77A 		ftouizs	s15, s15
 1454 0aec 17EE903A 		fmrs	r3, s15	@ int
 1455 0af0 9BB2     		uxth	r3, r3
 1456 0af2 1846     		mov	r0, r3
 1457 0af4 40F20001 		movw	r1, #:lower16:numberString
 1458 0af8 C0F20001 		movt	r1, #:upper16:numberString
 1459 0afc 4FF00A02 		mov	r2, #10
 1460 0b00 FFF7FEFF 		bl	itoa
 1461 0b04 40F20000 		movw	r0, #:lower16:numberString
 1462 0b08 C0F20000 		movt	r0, #:upper16:numberString
 1463 0b0c FFF7FEFF 		bl	uart1Print
 1464 0b10 40F20000 		movw	r0, #:lower16:.LC2
 1465 0b14 C0F20000 		movt	r0, #:upper16:.LC2
 1466 0b18 FFF7FEFF 		bl	uart1Print
 449:../src/cliSupport.c ****                     uart1Print("BiCopter Right Servo Mid:       ");
 1467              		.loc 1 449 0
 1468 0b1c 40F20000 		movw	r0, #:lower16:.LC65
 1469 0b20 C0F20000 		movt	r0, #:upper16:.LC65
 1470 0b24 FFF7FEFF 		bl	uart1Print
 450:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.biRightServoMid, numberString, 10); uart1Print(numb
 1471              		.loc 1 450 0
 1472 0b28 40F20003 		movw	r3, #:lower16:eepromConfig
 1473 0b2c C0F20003 		movt	r3, #:upper16:eepromConfig
 1474 0b30 D3EDB27A 		flds	s15, [r3, #712]
 1475 0b34 FCEEE77A 		ftouizs	s15, s15
 1476 0b38 17EE903A 		fmrs	r3, s15	@ int
 1477 0b3c 9BB2     		uxth	r3, r3
 1478 0b3e 1846     		mov	r0, r3
 1479 0b40 40F20001 		movw	r1, #:lower16:numberString
 1480 0b44 C0F20001 		movt	r1, #:upper16:numberString
 1481 0b48 4FF00A02 		mov	r2, #10
 1482 0b4c FFF7FEFF 		bl	itoa
 1483 0b50 40F20000 		movw	r0, #:lower16:numberString
 1484 0b54 C0F20000 		movt	r0, #:upper16:numberString
 1485 0b58 FFF7FEFF 		bl	uart1Print
 1486 0b5c 40F20000 		movw	r0, #:lower16:.LC2
 1487 0b60 C0F20000 		movt	r0, #:upper16:.LC2
 1488 0b64 FFF7FEFF 		bl	uart1Print
 451:../src/cliSupport.c ****                     uart1Print("BiCopter Right Servo Max:       ");
 1489              		.loc 1 451 0
 1490 0b68 40F20000 		movw	r0, #:lower16:.LC66
 1491 0b6c C0F20000 		movt	r0, #:upper16:.LC66
 1492 0b70 FFF7FEFF 		bl	uart1Print
 452:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.biRightServoMax, numberString, 10); uart1Print(numb
 1493              		.loc 1 452 0
 1494 0b74 40F20003 		movw	r3, #:lower16:eepromConfig
 1495 0b78 C0F20003 		movt	r3, #:upper16:eepromConfig
 1496 0b7c D3EDB37A 		flds	s15, [r3, #716]
 1497 0b80 FCEEE77A 		ftouizs	s15, s15
 1498 0b84 17EE903A 		fmrs	r3, s15	@ int
 1499 0b88 9BB2     		uxth	r3, r3
 1500 0b8a 1846     		mov	r0, r3
 1501 0b8c 40F20001 		movw	r1, #:lower16:numberString
 1502 0b90 C0F20001 		movt	r1, #:upper16:numberString
 1503 0b94 4FF00A02 		mov	r2, #10
 1504 0b98 FFF7FEFF 		bl	itoa
 1505 0b9c 40F20000 		movw	r0, #:lower16:numberString
 1506 0ba0 C0F20000 		movt	r0, #:upper16:numberString
 1507 0ba4 FFF7FEFF 		bl	uart1Print
 1508 0ba8 40F20000 		movw	r0, #:lower16:.LC2
 1509 0bac C0F20000 		movt	r0, #:upper16:.LC2
 1510 0bb0 FFF7FEFF 		bl	uart1Print
 1511              	.L96:
 455:../src/cliSupport.c ****                 if ( eepromConfig.mixerConfiguration == MIXERTYPE_FLYING_WING )
 1512              		.loc 1 455 0
 1513 0bb4 40F20003 		movw	r3, #:lower16:eepromConfig
 1514 0bb8 C0F20003 		movt	r3, #:upper16:eepromConfig
 1515 0bbc 93F87C30 		ldrb	r3, [r3, #124]	@ zero_extendqisi2
 1516 0bc0 022B     		cmp	r3, #2
 1517 0bc2 40F03081 		bne	.L97
 457:../src/cliSupport.c ****                     uart1Print("Roll Direction Left:            ");
 1518              		.loc 1 457 0
 1519 0bc6 40F20000 		movw	r0, #:lower16:.LC67
 1520 0bca C0F20000 		movt	r0, #:upper16:.LC67
 1521 0bce FFF7FEFF 		bl	uart1Print
 458:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.rollDirectionLeft,   numberString, 10); uart1Print(
 1522              		.loc 1 458 0
 1523 0bd2 40F20003 		movw	r3, #:lower16:eepromConfig
 1524 0bd6 C0F20003 		movt	r3, #:upper16:eepromConfig
 1525 0bda D3EDA67A 		flds	s15, [r3, #664]
 1526 0bde FCEEE77A 		ftouizs	s15, s15
 1527 0be2 17EE903A 		fmrs	r3, s15	@ int
 1528 0be6 9BB2     		uxth	r3, r3
 1529 0be8 1846     		mov	r0, r3
 1530 0bea 40F20001 		movw	r1, #:lower16:numberString
 1531 0bee C0F20001 		movt	r1, #:upper16:numberString
 1532 0bf2 4FF00A02 		mov	r2, #10
 1533 0bf6 FFF7FEFF 		bl	itoa
 1534 0bfa 40F20000 		movw	r0, #:lower16:numberString
 1535 0bfe C0F20000 		movt	r0, #:upper16:numberString
 1536 0c02 FFF7FEFF 		bl	uart1Print
 1537 0c06 40F20000 		movw	r0, #:lower16:.LC2
 1538 0c0a C0F20000 		movt	r0, #:upper16:.LC2
 1539 0c0e FFF7FEFF 		bl	uart1Print
 459:../src/cliSupport.c ****                     uart1Print("Roll Direction Right:           ");
 1540              		.loc 1 459 0
 1541 0c12 40F20000 		movw	r0, #:lower16:.LC68
 1542 0c16 C0F20000 		movt	r0, #:upper16:.LC68
 1543 0c1a FFF7FEFF 		bl	uart1Print
 460:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.rollDirectionRight,  numberString, 10); uart1Print(
 1544              		.loc 1 460 0
 1545 0c1e 40F20003 		movw	r3, #:lower16:eepromConfig
 1546 0c22 C0F20003 		movt	r3, #:upper16:eepromConfig
 1547 0c26 D3EDA77A 		flds	s15, [r3, #668]
 1548 0c2a FCEEE77A 		ftouizs	s15, s15
 1549 0c2e 17EE903A 		fmrs	r3, s15	@ int
 1550 0c32 9BB2     		uxth	r3, r3
 1551 0c34 1846     		mov	r0, r3
 1552 0c36 40F20001 		movw	r1, #:lower16:numberString
 1553 0c3a C0F20001 		movt	r1, #:upper16:numberString
 1554 0c3e 4FF00A02 		mov	r2, #10
 1555 0c42 FFF7FEFF 		bl	itoa
 1556 0c46 40F20000 		movw	r0, #:lower16:numberString
 1557 0c4a C0F20000 		movt	r0, #:upper16:numberString
 1558 0c4e FFF7FEFF 		bl	uart1Print
 1559 0c52 40F20000 		movw	r0, #:lower16:.LC2
 1560 0c56 C0F20000 		movt	r0, #:upper16:.LC2
 1561 0c5a FFF7FEFF 		bl	uart1Print
 461:../src/cliSupport.c ****                     uart1Print("Pitch Direction Left:           ");
 1562              		.loc 1 461 0
 1563 0c5e 40F20000 		movw	r0, #:lower16:.LC69
 1564 0c62 C0F20000 		movt	r0, #:upper16:.LC69
 1565 0c66 FFF7FEFF 		bl	uart1Print
 462:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.pitchDirectionLeft,  numberString, 10); uart1Print(
 1566              		.loc 1 462 0
 1567 0c6a 40F20003 		movw	r3, #:lower16:eepromConfig
 1568 0c6e C0F20003 		movt	r3, #:upper16:eepromConfig
 1569 0c72 D3EDA87A 		flds	s15, [r3, #672]
 1570 0c76 FCEEE77A 		ftouizs	s15, s15
 1571 0c7a 17EE903A 		fmrs	r3, s15	@ int
 1572 0c7e 9BB2     		uxth	r3, r3
 1573 0c80 1846     		mov	r0, r3
 1574 0c82 40F20001 		movw	r1, #:lower16:numberString
 1575 0c86 C0F20001 		movt	r1, #:upper16:numberString
 1576 0c8a 4FF00A02 		mov	r2, #10
 1577 0c8e FFF7FEFF 		bl	itoa
 1578 0c92 40F20000 		movw	r0, #:lower16:numberString
 1579 0c96 C0F20000 		movt	r0, #:upper16:numberString
 1580 0c9a FFF7FEFF 		bl	uart1Print
 1581 0c9e 40F20000 		movw	r0, #:lower16:.LC2
 1582 0ca2 C0F20000 		movt	r0, #:upper16:.LC2
 1583 0ca6 FFF7FEFF 		bl	uart1Print
 463:../src/cliSupport.c ****                     uart1Print("Pitch Direction Right:          ");
 1584              		.loc 1 463 0
 1585 0caa 40F20000 		movw	r0, #:lower16:.LC70
 1586 0cae C0F20000 		movt	r0, #:upper16:.LC70
 1587 0cb2 FFF7FEFF 		bl	uart1Print
 464:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.pitchDirectionRight, numberString, 10); uart1Print(
 1588              		.loc 1 464 0
 1589 0cb6 40F20003 		movw	r3, #:lower16:eepromConfig
 1590 0cba C0F20003 		movt	r3, #:upper16:eepromConfig
 1591 0cbe D3EDA97A 		flds	s15, [r3, #676]
 1592 0cc2 FCEEE77A 		ftouizs	s15, s15
 1593 0cc6 17EE903A 		fmrs	r3, s15	@ int
 1594 0cca 9BB2     		uxth	r3, r3
 1595 0ccc 1846     		mov	r0, r3
 1596 0cce 40F20001 		movw	r1, #:lower16:numberString
 1597 0cd2 C0F20001 		movt	r1, #:upper16:numberString
 1598 0cd6 4FF00A02 		mov	r2, #10
 1599 0cda FFF7FEFF 		bl	itoa
 1600 0cde 40F20000 		movw	r0, #:lower16:numberString
 1601 0ce2 C0F20000 		movt	r0, #:upper16:numberString
 1602 0ce6 FFF7FEFF 		bl	uart1Print
 1603 0cea 40F20000 		movw	r0, #:lower16:.LC2
 1604 0cee C0F20000 		movt	r0, #:upper16:.LC2
 1605 0cf2 FFF7FEFF 		bl	uart1Print
 465:../src/cliSupport.c ****                     uart1Print("Wing Left Minimum:              ");
 1606              		.loc 1 465 0
 1607 0cf6 40F20000 		movw	r0, #:lower16:.LC71
 1608 0cfa C0F20000 		movt	r0, #:upper16:.LC71
 1609 0cfe FFF7FEFF 		bl	uart1Print
 466:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.wingLeftMinimum,     numberString, 10); uart1Print(
 1610              		.loc 1 466 0
 1611 0d02 40F20003 		movw	r3, #:lower16:eepromConfig
 1612 0d06 C0F20003 		movt	r3, #:upper16:eepromConfig
 1613 0d0a D3EDAA7A 		flds	s15, [r3, #680]
 1614 0d0e FCEEE77A 		ftouizs	s15, s15
 1615 0d12 17EE903A 		fmrs	r3, s15	@ int
 1616 0d16 9BB2     		uxth	r3, r3
 1617 0d18 1846     		mov	r0, r3
 1618 0d1a 40F20001 		movw	r1, #:lower16:numberString
 1619 0d1e C0F20001 		movt	r1, #:upper16:numberString
 1620 0d22 4FF00A02 		mov	r2, #10
 1621 0d26 FFF7FEFF 		bl	itoa
 1622 0d2a 40F20000 		movw	r0, #:lower16:numberString
 1623 0d2e C0F20000 		movt	r0, #:upper16:numberString
 1624 0d32 FFF7FEFF 		bl	uart1Print
 1625 0d36 40F20000 		movw	r0, #:lower16:.LC2
 1626 0d3a C0F20000 		movt	r0, #:upper16:.LC2
 1627 0d3e FFF7FEFF 		bl	uart1Print
 467:../src/cliSupport.c ****                     uart1Print("Wing Left Maximum:              ");
 1628              		.loc 1 467 0
 1629 0d42 40F20000 		movw	r0, #:lower16:.LC72
 1630 0d46 C0F20000 		movt	r0, #:upper16:.LC72
 1631 0d4a FFF7FEFF 		bl	uart1Print
 468:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.wingLeftMaximum,     numberString, 10); uart1Print(
 1632              		.loc 1 468 0
 1633 0d4e 40F20003 		movw	r3, #:lower16:eepromConfig
 1634 0d52 C0F20003 		movt	r3, #:upper16:eepromConfig
 1635 0d56 D3EDAB7A 		flds	s15, [r3, #684]
 1636 0d5a FCEEE77A 		ftouizs	s15, s15
 1637 0d5e 17EE903A 		fmrs	r3, s15	@ int
 1638 0d62 9BB2     		uxth	r3, r3
 1639 0d64 1846     		mov	r0, r3
 1640 0d66 40F20001 		movw	r1, #:lower16:numberString
 1641 0d6a C0F20001 		movt	r1, #:upper16:numberString
 1642 0d6e 4FF00A02 		mov	r2, #10
 1643 0d72 FFF7FEFF 		bl	itoa
 1644 0d76 40F20000 		movw	r0, #:lower16:numberString
 1645 0d7a C0F20000 		movt	r0, #:upper16:numberString
 1646 0d7e FFF7FEFF 		bl	uart1Print
 1647 0d82 40F20000 		movw	r0, #:lower16:.LC2
 1648 0d86 C0F20000 		movt	r0, #:upper16:.LC2
 1649 0d8a FFF7FEFF 		bl	uart1Print
 469:../src/cliSupport.c ****                     uart1Print("Wing Right Minimum:             ");
 1650              		.loc 1 469 0
 1651 0d8e 40F20000 		movw	r0, #:lower16:.LC73
 1652 0d92 C0F20000 		movt	r0, #:upper16:.LC73
 1653 0d96 FFF7FEFF 		bl	uart1Print
 470:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.wingRightMinimum,    numberString, 10); uart1Print(
 1654              		.loc 1 470 0
 1655 0d9a 40F20003 		movw	r3, #:lower16:eepromConfig
 1656 0d9e C0F20003 		movt	r3, #:upper16:eepromConfig
 1657 0da2 D3EDAC7A 		flds	s15, [r3, #688]
 1658 0da6 FCEEE77A 		ftouizs	s15, s15
 1659 0daa 17EE903A 		fmrs	r3, s15	@ int
 1660 0dae 9BB2     		uxth	r3, r3
 1661 0db0 1846     		mov	r0, r3
 1662 0db2 40F20001 		movw	r1, #:lower16:numberString
 1663 0db6 C0F20001 		movt	r1, #:upper16:numberString
 1664 0dba 4FF00A02 		mov	r2, #10
 1665 0dbe FFF7FEFF 		bl	itoa
 1666 0dc2 40F20000 		movw	r0, #:lower16:numberString
 1667 0dc6 C0F20000 		movt	r0, #:upper16:numberString
 1668 0dca FFF7FEFF 		bl	uart1Print
 1669 0dce 40F20000 		movw	r0, #:lower16:.LC2
 1670 0dd2 C0F20000 		movt	r0, #:upper16:.LC2
 1671 0dd6 FFF7FEFF 		bl	uart1Print
 471:../src/cliSupport.c ****                     uart1Print("Wing Right Maximum:             ");
 1672              		.loc 1 471 0
 1673 0dda 40F20000 		movw	r0, #:lower16:.LC74
 1674 0dde C0F20000 		movt	r0, #:upper16:.LC74
 1675 0de2 FFF7FEFF 		bl	uart1Print
 472:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.wingRightMaximum,    numberString, 10); uart1Print(
 1676              		.loc 1 472 0
 1677 0de6 40F20003 		movw	r3, #:lower16:eepromConfig
 1678 0dea C0F20003 		movt	r3, #:upper16:eepromConfig
 1679 0dee D3EDAD7A 		flds	s15, [r3, #692]
 1680 0df2 FCEEE77A 		ftouizs	s15, s15
 1681 0df6 17EE903A 		fmrs	r3, s15	@ int
 1682 0dfa 9BB2     		uxth	r3, r3
 1683 0dfc 1846     		mov	r0, r3
 1684 0dfe 40F20001 		movw	r1, #:lower16:numberString
 1685 0e02 C0F20001 		movt	r1, #:upper16:numberString
 1686 0e06 4FF00A02 		mov	r2, #10
 1687 0e0a FFF7FEFF 		bl	itoa
 1688 0e0e 40F20000 		movw	r0, #:lower16:numberString
 1689 0e12 C0F20000 		movt	r0, #:upper16:numberString
 1690 0e16 FFF7FEFF 		bl	uart1Print
 1691 0e1a 40F20000 		movw	r0, #:lower16:.LC2
 1692 0e1e C0F20000 		movt	r0, #:upper16:.LC2
 1693 0e22 FFF7FEFF 		bl	uart1Print
 1694              	.L97:
 475:../src/cliSupport.c ****                 if ( eepromConfig.mixerConfiguration == MIXERTYPE_GIMBAL )
 1695              		.loc 1 475 0
 1696 0e26 40F20003 		movw	r3, #:lower16:eepromConfig
 1697 0e2a C0F20003 		movt	r3, #:upper16:eepromConfig
 1698 0e2e 93F87C30 		ldrb	r3, [r3, #124]	@ zero_extendqisi2
 1699 0e32 012B     		cmp	r3, #1
 1700 0e34 40F02281 		bne	.L98
 477:../src/cliSupport.c ****                     uart1Print("Gimbal Roll Servo Min:          ");
 1701              		.loc 1 477 0
 1702 0e38 40F20000 		movw	r0, #:lower16:.LC75
 1703 0e3c C0F20000 		movt	r0, #:upper16:.LC75
 1704 0e40 FFF7FEFF 		bl	uart1Print
 478:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.gimbalRollServoMin,  numberString, 10); uart1Print(
 1705              		.loc 1 478 0
 1706 0e44 40F20003 		movw	r3, #:lower16:eepromConfig
 1707 0e48 C0F20003 		movt	r3, #:upper16:eepromConfig
 1708 0e4c D3ED9E7A 		flds	s15, [r3, #632]
 1709 0e50 FCEEE77A 		ftouizs	s15, s15
 1710 0e54 17EE903A 		fmrs	r3, s15	@ int
 1711 0e58 9BB2     		uxth	r3, r3
 1712 0e5a 1846     		mov	r0, r3
 1713 0e5c 40F20001 		movw	r1, #:lower16:numberString
 1714 0e60 C0F20001 		movt	r1, #:upper16:numberString
 1715 0e64 4FF00A02 		mov	r2, #10
 1716 0e68 FFF7FEFF 		bl	itoa
 1717 0e6c 40F20000 		movw	r0, #:lower16:numberString
 1718 0e70 C0F20000 		movt	r0, #:upper16:numberString
 1719 0e74 FFF7FEFF 		bl	uart1Print
 1720 0e78 40F20000 		movw	r0, #:lower16:.LC2
 1721 0e7c C0F20000 		movt	r0, #:upper16:.LC2
 1722 0e80 FFF7FEFF 		bl	uart1Print
 479:../src/cliSupport.c ****                     uart1Print("Gimbal Roll Servo Mid:          ");
 1723              		.loc 1 479 0
 1724 0e84 40F20000 		movw	r0, #:lower16:.LC76
 1725 0e88 C0F20000 		movt	r0, #:upper16:.LC76
 1726 0e8c FFF7FEFF 		bl	uart1Print
 480:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.gimbalRollServoMid,  numberString, 10); uart1Print(
 1727              		.loc 1 480 0
 1728 0e90 40F20003 		movw	r3, #:lower16:eepromConfig
 1729 0e94 C0F20003 		movt	r3, #:upper16:eepromConfig
 1730 0e98 D3ED9F7A 		flds	s15, [r3, #636]
 1731 0e9c FCEEE77A 		ftouizs	s15, s15
 1732 0ea0 17EE903A 		fmrs	r3, s15	@ int
 1733 0ea4 9BB2     		uxth	r3, r3
 1734 0ea6 1846     		mov	r0, r3
 1735 0ea8 40F20001 		movw	r1, #:lower16:numberString
 1736 0eac C0F20001 		movt	r1, #:upper16:numberString
 1737 0eb0 4FF00A02 		mov	r2, #10
 1738 0eb4 FFF7FEFF 		bl	itoa
 1739 0eb8 40F20000 		movw	r0, #:lower16:numberString
 1740 0ebc C0F20000 		movt	r0, #:upper16:numberString
 1741 0ec0 FFF7FEFF 		bl	uart1Print
 1742 0ec4 40F20000 		movw	r0, #:lower16:.LC2
 1743 0ec8 C0F20000 		movt	r0, #:upper16:.LC2
 1744 0ecc FFF7FEFF 		bl	uart1Print
 481:../src/cliSupport.c ****                     uart1Print("Gimbal Roll Servo Max:          ");
 1745              		.loc 1 481 0
 1746 0ed0 40F20000 		movw	r0, #:lower16:.LC77
 1747 0ed4 C0F20000 		movt	r0, #:upper16:.LC77
 1748 0ed8 FFF7FEFF 		bl	uart1Print
 482:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.gimbalRollServoMax,  numberString, 10); uart1Print(
 1749              		.loc 1 482 0
 1750 0edc 40F20003 		movw	r3, #:lower16:eepromConfig
 1751 0ee0 C0F20003 		movt	r3, #:upper16:eepromConfig
 1752 0ee4 D3EDA07A 		flds	s15, [r3, #640]
 1753 0ee8 FCEEE77A 		ftouizs	s15, s15
 1754 0eec 17EE903A 		fmrs	r3, s15	@ int
 1755 0ef0 9BB2     		uxth	r3, r3
 1756 0ef2 1846     		mov	r0, r3
 1757 0ef4 40F20001 		movw	r1, #:lower16:numberString
 1758 0ef8 C0F20001 		movt	r1, #:upper16:numberString
 1759 0efc 4FF00A02 		mov	r2, #10
 1760 0f00 FFF7FEFF 		bl	itoa
 1761 0f04 40F20000 		movw	r0, #:lower16:numberString
 1762 0f08 C0F20000 		movt	r0, #:upper16:numberString
 1763 0f0c FFF7FEFF 		bl	uart1Print
 1764 0f10 40F20000 		movw	r0, #:lower16:.LC2
 1765 0f14 C0F20000 		movt	r0, #:upper16:.LC2
 1766 0f18 FFF7FEFF 		bl	uart1Print
 483:../src/cliSupport.c ****                     uart1Print("Gimbal Roll Servo Gain:        ");
 1767              		.loc 1 483 0
 1768 0f1c 40F20000 		movw	r0, #:lower16:.LC78
 1769 0f20 C0F20000 		movt	r0, #:upper16:.LC78
 1770 0f24 FFF7FEFF 		bl	uart1Print
 484:../src/cliSupport.c ****                     ftoa(eepromConfig.gimbalRollServoGain, numberString);               uart1Print(
 1771              		.loc 1 484 0
 1772 0f28 40F20003 		movw	r3, #:lower16:eepromConfig
 1773 0f2c C0F20003 		movt	r3, #:upper16:eepromConfig
 1774 0f30 D3F88432 		ldr	r3, [r3, #644]	@ float
 1775 0f34 1846     		mov	r0, r3	@ float
 1776 0f36 40F20001 		movw	r1, #:lower16:numberString
 1777 0f3a C0F20001 		movt	r1, #:upper16:numberString
 1778 0f3e FFF7FEFF 		bl	ftoa
 1779 0f42 40F20000 		movw	r0, #:lower16:numberString
 1780 0f46 C0F20000 		movt	r0, #:upper16:numberString
 1781 0f4a FFF7FEFF 		bl	uart1Print
 1782 0f4e 40F20000 		movw	r0, #:lower16:.LC2
 1783 0f52 C0F20000 		movt	r0, #:upper16:.LC2
 1784 0f56 FFF7FEFF 		bl	uart1Print
 485:../src/cliSupport.c ****                     uart1Print("Gimbal Pitch Servo Min:         ");
 1785              		.loc 1 485 0
 1786 0f5a 40F20000 		movw	r0, #:lower16:.LC79
 1787 0f5e C0F20000 		movt	r0, #:upper16:.LC79
 1788 0f62 FFF7FEFF 		bl	uart1Print
 486:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.gimbalPitchServoMin, numberString, 10); uart1Print(
 1789              		.loc 1 486 0
 1790 0f66 40F20003 		movw	r3, #:lower16:eepromConfig
 1791 0f6a C0F20003 		movt	r3, #:upper16:eepromConfig
 1792 0f6e D3EDA27A 		flds	s15, [r3, #648]
 1793 0f72 FCEEE77A 		ftouizs	s15, s15
 1794 0f76 17EE903A 		fmrs	r3, s15	@ int
 1795 0f7a 9BB2     		uxth	r3, r3
 1796 0f7c 1846     		mov	r0, r3
 1797 0f7e 40F20001 		movw	r1, #:lower16:numberString
 1798 0f82 C0F20001 		movt	r1, #:upper16:numberString
 1799 0f86 4FF00A02 		mov	r2, #10
 1800 0f8a FFF7FEFF 		bl	itoa
 1801 0f8e 40F20000 		movw	r0, #:lower16:numberString
 1802 0f92 C0F20000 		movt	r0, #:upper16:numberString
 1803 0f96 FFF7FEFF 		bl	uart1Print
 1804 0f9a 40F20000 		movw	r0, #:lower16:.LC2
 1805 0f9e C0F20000 		movt	r0, #:upper16:.LC2
 1806 0fa2 FFF7FEFF 		bl	uart1Print
 487:../src/cliSupport.c ****                     uart1Print("Gimbal Pitch Servo Mid:         ");
 1807              		.loc 1 487 0
 1808 0fa6 40F20000 		movw	r0, #:lower16:.LC80
 1809 0faa C0F20000 		movt	r0, #:upper16:.LC80
 1810 0fae FFF7FEFF 		bl	uart1Print
 488:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.gimbalPitchServoMid, numberString, 10); uart1Print(
 1811              		.loc 1 488 0
 1812 0fb2 40F20003 		movw	r3, #:lower16:eepromConfig
 1813 0fb6 C0F20003 		movt	r3, #:upper16:eepromConfig
 1814 0fba D3EDA37A 		flds	s15, [r3, #652]
 1815 0fbe FCEEE77A 		ftouizs	s15, s15
 1816 0fc2 17EE903A 		fmrs	r3, s15	@ int
 1817 0fc6 9BB2     		uxth	r3, r3
 1818 0fc8 1846     		mov	r0, r3
 1819 0fca 40F20001 		movw	r1, #:lower16:numberString
 1820 0fce C0F20001 		movt	r1, #:upper16:numberString
 1821 0fd2 4FF00A02 		mov	r2, #10
 1822 0fd6 FFF7FEFF 		bl	itoa
 1823 0fda 40F20000 		movw	r0, #:lower16:numberString
 1824 0fde C0F20000 		movt	r0, #:upper16:numberString
 1825 0fe2 FFF7FEFF 		bl	uart1Print
 1826 0fe6 40F20000 		movw	r0, #:lower16:.LC2
 1827 0fea C0F20000 		movt	r0, #:upper16:.LC2
 1828 0fee FFF7FEFF 		bl	uart1Print
 489:../src/cliSupport.c ****                     uart1Print("Gimbal Pitch Servo Max:         ");
 1829              		.loc 1 489 0
 1830 0ff2 40F20000 		movw	r0, #:lower16:.LC81
 1831 0ff6 C0F20000 		movt	r0, #:upper16:.LC81
 1832 0ffa FFF7FEFF 		bl	uart1Print
 490:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.gimbalPitchServoMax, numberString, 10); uart1Print(
 1833              		.loc 1 490 0
 1834 0ffe 40F20003 		movw	r3, #:lower16:eepromConfig
 1835 1002 C0F20003 		movt	r3, #:upper16:eepromConfig
 1836 1006 D3EDA47A 		flds	s15, [r3, #656]
 1837 100a FCEEE77A 		ftouizs	s15, s15
 1838 100e 17EE903A 		fmrs	r3, s15	@ int
 1839 1012 9BB2     		uxth	r3, r3
 1840 1014 1846     		mov	r0, r3
 1841 1016 40F20001 		movw	r1, #:lower16:numberString
 1842 101a C0F20001 		movt	r1, #:upper16:numberString
 1843 101e 4FF00A02 		mov	r2, #10
 1844 1022 FFF7FEFF 		bl	itoa
 1845 1026 40F20000 		movw	r0, #:lower16:numberString
 1846 102a C0F20000 		movt	r0, #:upper16:numberString
 1847 102e FFF7FEFF 		bl	uart1Print
 1848 1032 40F20000 		movw	r0, #:lower16:.LC2
 1849 1036 C0F20000 		movt	r0, #:upper16:.LC2
 1850 103a FFF7FEFF 		bl	uart1Print
 491:../src/cliSupport.c ****                     uart1Print("Gimbal Pitch Servo Gain:       ");
 1851              		.loc 1 491 0
 1852 103e 40F20000 		movw	r0, #:lower16:.LC82
 1853 1042 C0F20000 		movt	r0, #:upper16:.LC82
 1854 1046 FFF7FEFF 		bl	uart1Print
 492:../src/cliSupport.c ****                     ftoa(eepromConfig.gimbalPitchServoGain, numberString);              uart1Print(
 1855              		.loc 1 492 0
 1856 104a 40F20003 		movw	r3, #:lower16:eepromConfig
 1857 104e C0F20003 		movt	r3, #:upper16:eepromConfig
 1858 1052 D3F89432 		ldr	r3, [r3, #660]	@ float
 1859 1056 1846     		mov	r0, r3	@ float
 1860 1058 40F20001 		movw	r1, #:lower16:numberString
 1861 105c C0F20001 		movt	r1, #:upper16:numberString
 1862 1060 FFF7FEFF 		bl	ftoa
 1863 1064 40F20000 		movw	r0, #:lower16:numberString
 1864 1068 C0F20000 		movt	r0, #:upper16:numberString
 1865 106c FFF7FEFF 		bl	uart1Print
 1866 1070 40F20000 		movw	r0, #:lower16:.LC2
 1867 1074 C0F20000 		movt	r0, #:upper16:.LC2
 1868 1078 FFF7FEFF 		bl	uart1Print
 1869              	.L98:
 495:../src/cliSupport.c ****                 if ( eepromConfig.mixerConfiguration == MIXERTYPE_TRI )
 1870              		.loc 1 495 0
 1871 107c 40F20003 		movw	r3, #:lower16:eepromConfig
 1872 1080 C0F20003 		movt	r3, #:upper16:eepromConfig
 1873 1084 93F87C30 		ldrb	r3, [r3, #124]	@ zero_extendqisi2
 1874 1088 042B     		cmp	r3, #4
 1875 108a 71D1     		bne	.L99
 497:../src/cliSupport.c ****                     uart1Print("TriCopter Yaw Servo Min:        ");
 1876              		.loc 1 497 0
 1877 108c 40F20000 		movw	r0, #:lower16:.LC83
 1878 1090 C0F20000 		movt	r0, #:upper16:.LC83
 1879 1094 FFF7FEFF 		bl	uart1Print
 498:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.triYawServoMin, numberString, 10); uart1Print(numbe
 1880              		.loc 1 498 0
 1881 1098 40F20003 		movw	r3, #:lower16:eepromConfig
 1882 109c C0F20003 		movt	r3, #:upper16:eepromConfig
 1883 10a0 D3EDB47A 		flds	s15, [r3, #720]
 1884 10a4 FCEEE77A 		ftouizs	s15, s15
 1885 10a8 17EE903A 		fmrs	r3, s15	@ int
 1886 10ac 9BB2     		uxth	r3, r3
 1887 10ae 1846     		mov	r0, r3
 1888 10b0 40F20001 		movw	r1, #:lower16:numberString
 1889 10b4 C0F20001 		movt	r1, #:upper16:numberString
 1890 10b8 4FF00A02 		mov	r2, #10
 1891 10bc FFF7FEFF 		bl	itoa
 1892 10c0 40F20000 		movw	r0, #:lower16:numberString
 1893 10c4 C0F20000 		movt	r0, #:upper16:numberString
 1894 10c8 FFF7FEFF 		bl	uart1Print
 1895 10cc 40F20000 		movw	r0, #:lower16:.LC2
 1896 10d0 C0F20000 		movt	r0, #:upper16:.LC2
 1897 10d4 FFF7FEFF 		bl	uart1Print
 499:../src/cliSupport.c ****                     uart1Print("TriCopter Yaw Servo Mid:        ");
 1898              		.loc 1 499 0
 1899 10d8 40F20000 		movw	r0, #:lower16:.LC84
 1900 10dc C0F20000 		movt	r0, #:upper16:.LC84
 1901 10e0 FFF7FEFF 		bl	uart1Print
 500:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.triYawServoMid, numberString, 10); uart1Print(numbe
 1902              		.loc 1 500 0
 1903 10e4 40F20003 		movw	r3, #:lower16:eepromConfig
 1904 10e8 C0F20003 		movt	r3, #:upper16:eepromConfig
 1905 10ec D3EDB57A 		flds	s15, [r3, #724]
 1906 10f0 FCEEE77A 		ftouizs	s15, s15
 1907 10f4 17EE903A 		fmrs	r3, s15	@ int
 1908 10f8 9BB2     		uxth	r3, r3
 1909 10fa 1846     		mov	r0, r3
 1910 10fc 40F20001 		movw	r1, #:lower16:numberString
 1911 1100 C0F20001 		movt	r1, #:upper16:numberString
 1912 1104 4FF00A02 		mov	r2, #10
 1913 1108 FFF7FEFF 		bl	itoa
 1914 110c 40F20000 		movw	r0, #:lower16:numberString
 1915 1110 C0F20000 		movt	r0, #:upper16:numberString
 1916 1114 FFF7FEFF 		bl	uart1Print
 1917 1118 40F20000 		movw	r0, #:lower16:.LC2
 1918 111c C0F20000 		movt	r0, #:upper16:.LC2
 1919 1120 FFF7FEFF 		bl	uart1Print
 501:../src/cliSupport.c ****                     uart1Print("TriCopter Yaw Servo Max:        ");
 1920              		.loc 1 501 0
 1921 1124 40F20000 		movw	r0, #:lower16:.LC85
 1922 1128 C0F20000 		movt	r0, #:upper16:.LC85
 1923 112c FFF7FEFF 		bl	uart1Print
 502:../src/cliSupport.c ****                     itoa((uint16_t)eepromConfig.triYawServoMax, numberString, 10); uart1Print(numbe
 1924              		.loc 1 502 0
 1925 1130 40F20003 		movw	r3, #:lower16:eepromConfig
 1926 1134 C0F20003 		movt	r3, #:upper16:eepromConfig
 1927 1138 D3EDB67A 		flds	s15, [r3, #728]
 1928 113c FCEEE77A 		ftouizs	s15, s15
 1929 1140 17EE903A 		fmrs	r3, s15	@ int
 1930 1144 9BB2     		uxth	r3, r3
 1931 1146 1846     		mov	r0, r3
 1932 1148 40F20001 		movw	r1, #:lower16:numberString
 1933 114c C0F20001 		movt	r1, #:upper16:numberString
 1934 1150 4FF00A02 		mov	r2, #10
 1935 1154 FFF7FEFF 		bl	itoa
 1936 1158 40F20000 		movw	r0, #:lower16:numberString
 1937 115c C0F20000 		movt	r0, #:upper16:numberString
 1938 1160 FFF7FEFF 		bl	uart1Print
 1939 1164 40F20000 		movw	r0, #:lower16:.LC2
 1940 1168 C0F20000 		movt	r0, #:upper16:.LC2
 1941 116c FFF7FEFF 		bl	uart1Print
 1942              	.L99:
 505:../src/cliSupport.c ****                 if (eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_Y_COMP  ||
 1943              		.loc 1 505 0
 1944 1170 40F20003 		movw	r3, #:lower16:eepromConfig
 1945 1174 C0F20003 		movt	r3, #:upper16:eepromConfig
 1946 1178 93F87C30 		ldrb	r3, [r3, #124]	@ zero_extendqisi2
 1947 117c 082B     		cmp	r3, #8
 1948 117e 1FD0     		beq	.L100
 506:../src/cliSupport.c ****                     eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_RY_COMP ||
 1949              		.loc 1 506 0 discriminator 1
 1950 1180 40F20003 		movw	r3, #:lower16:eepromConfig
 1951 1184 C0F20003 		movt	r3, #:upper16:eepromConfig
 1952 1188 93F87C30 		ldrb	r3, [r3, #124]	@ zero_extendqisi2
 505:../src/cliSupport.c ****                 if (eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_Y_COMP  ||
 1953              		.loc 1 505 0 discriminator 1
 1954 118c 092B     		cmp	r3, #9
 1955 118e 17D0     		beq	.L100
 507:../src/cliSupport.c ****                     eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_PY_COMP ||
 1956              		.loc 1 507 0
 1957 1190 40F20003 		movw	r3, #:lower16:eepromConfig
 1958 1194 C0F20003 		movt	r3, #:upper16:eepromConfig
 1959 1198 93F87C30 		ldrb	r3, [r3, #124]	@ zero_extendqisi2
 506:../src/cliSupport.c ****                     eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_RY_COMP ||
 1960              		.loc 1 506 0
 1961 119c 0A2B     		cmp	r3, #10
 1962 119e 0FD0     		beq	.L100
 508:../src/cliSupport.c ****                     eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_RP_COMP ||
 1963              		.loc 1 508 0
 1964 11a0 40F20003 		movw	r3, #:lower16:eepromConfig
 1965 11a4 C0F20003 		movt	r3, #:upper16:eepromConfig
 1966 11a8 93F87C30 		ldrb	r3, [r3, #124]	@ zero_extendqisi2
 507:../src/cliSupport.c ****                     eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_PY_COMP ||
 1967              		.loc 1 507 0
 1968 11ac 0B2B     		cmp	r3, #11
 1969 11ae 07D0     		beq	.L100
 509:../src/cliSupport.c ****                     eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_RPY_COMP)
 1970              		.loc 1 509 0
 1971 11b0 40F20003 		movw	r3, #:lower16:eepromConfig
 1972 11b4 C0F20003 		movt	r3, #:upper16:eepromConfig
 1973 11b8 93F87C30 		ldrb	r3, [r3, #124]	@ zero_extendqisi2
 508:../src/cliSupport.c ****                     eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_RP_COMP ||
 1974              		.loc 1 508 0
 1975 11bc 0C2B     		cmp	r3, #12
 1976 11be 1ED1     		bne	.L101
 1977              	.L100:
 511:../src/cliSupport.c ****                     uart1Print("V Tail Angle                   ");
 1978              		.loc 1 511 0
 1979 11c0 40F20000 		movw	r0, #:lower16:.LC86
 1980 11c4 C0F20000 		movt	r0, #:upper16:.LC86
 1981 11c8 FFF7FEFF 		bl	uart1Print
 512:../src/cliSupport.c ****                     ftoa(eepromConfig.vTailAngle, numberString); uart1Print(numberString); uart1Pri
 1982              		.loc 1 512 0
 1983 11cc 40F20003 		movw	r3, #:lower16:eepromConfig
 1984 11d0 C0F20003 		movt	r3, #:upper16:eepromConfig
 1985 11d4 D3F8DC32 		ldr	r3, [r3, #732]	@ float
 1986 11d8 1846     		mov	r0, r3	@ float
 1987 11da 40F20001 		movw	r1, #:lower16:numberString
 1988 11de C0F20001 		movt	r1, #:upper16:numberString
 1989 11e2 FFF7FEFF 		bl	ftoa
 1990 11e6 40F20000 		movw	r0, #:lower16:numberString
 1991 11ea C0F20000 		movt	r0, #:upper16:numberString
 1992 11ee FFF7FEFF 		bl	uart1Print
 1993 11f2 40F20000 		movw	r0, #:lower16:.LC2
 1994 11f6 C0F20000 		movt	r0, #:upper16:.LC2
 1995 11fa FFF7FEFF 		bl	uart1Print
 1996              	.L101:
 515:../src/cliSupport.c ****                 uart1Print("Yaw Direction:                  ");
 1997              		.loc 1 515 0
 1998 11fe 40F20000 		movw	r0, #:lower16:.LC87
 1999 1202 C0F20000 		movt	r0, #:upper16:.LC87
 2000 1206 FFF7FEFF 		bl	uart1Print
 516:../src/cliSupport.c ****                 itoa((int8_t)eepromConfig.yawDirection,   numberString, 10); uart1Print(numberStrin
 2001              		.loc 1 516 0
 2002 120a 40F20003 		movw	r3, #:lower16:eepromConfig
 2003 120e C0F20003 		movt	r3, #:upper16:eepromConfig
 2004 1212 D3ED207A 		flds	s15, [r3, #128]
 2005 1216 FDEEE77A 		ftosizs	s15, s15
 2006 121a 17EE903A 		fmrs	r3, s15	@ int
 2007 121e DBB2     		uxtb	r3, r3
 2008 1220 5BB2     		sxtb	r3, r3
 2009 1222 1846     		mov	r0, r3
 2010 1224 40F20001 		movw	r1, #:lower16:numberString
 2011 1228 C0F20001 		movt	r1, #:upper16:numberString
 2012 122c 4FF00A02 		mov	r2, #10
 2013 1230 FFF7FEFF 		bl	itoa
 2014 1234 40F20000 		movw	r0, #:lower16:numberString
 2015 1238 C0F20000 		movt	r0, #:upper16:numberString
 2016 123c FFF7FEFF 		bl	uart1Print
 2017 1240 40F20000 		movw	r0, #:lower16:.LC88
 2018 1244 C0F20000 		movt	r0, #:upper16:.LC88
 2019 1248 FFF7FEFF 		bl	uart1Print
 518:../src/cliSupport.c ****                 validQuery = false;
 2020              		.loc 1 518 0
 2021 124c 4FF00003 		mov	r3, #0
 2022 1250 8DF80930 		strb	r3, [sp, #9]
 519:../src/cliSupport.c ****                 break;
 2023              		.loc 1 519 0
 2024 1254 44E3     		b	.L53
 2025              	.L70:
 524:../src/cliSupport.c ****         	    uart1Print("\nNumber of Free Mixer Motors:  ");
 2026              		.loc 1 524 0
 2027 1256 40F20000 		movw	r0, #:lower16:.LC89
 2028 125a C0F20000 		movt	r0, #:upper16:.LC89
 2029 125e FFF7FEFF 		bl	uart1Print
 525:../src/cliSupport.c ****         	    itoa( eepromConfig.freeMixMotors, numberString, 10 ); uart1Print( numberString ); uart
 2030              		.loc 1 525 0
 2031 1262 40F20003 		movw	r3, #:lower16:eepromConfig
 2032 1266 C0F20003 		movt	r3, #:upper16:eepromConfig
 2033 126a 93F8E032 		ldrb	r3, [r3, #736]	@ zero_extendqisi2
 2034 126e 1846     		mov	r0, r3
 2035 1270 40F20001 		movw	r1, #:lower16:numberString
 2036 1274 C0F20001 		movt	r1, #:upper16:numberString
 2037 1278 4FF00A02 		mov	r2, #10
 2038 127c FFF7FEFF 		bl	itoa
 2039 1280 40F20000 		movw	r0, #:lower16:numberString
 2040 1284 C0F20000 		movt	r0, #:upper16:numberString
 2041 1288 FFF7FEFF 		bl	uart1Print
 2042 128c 40F20000 		movw	r0, #:lower16:.LC88
 2043 1290 C0F20000 		movt	r0, #:upper16:.LC88
 2044 1294 FFF7FEFF 		bl	uart1Print
 526:../src/cliSupport.c ****                 uart1Print("         Roll    Pitch   Yaw\n");
 2045              		.loc 1 526 0
 2046 1298 40F20000 		movw	r0, #:lower16:.LC90
 2047 129c C0F20000 		movt	r0, #:upper16:.LC90
 2048 12a0 FFF7FEFF 		bl	uart1Print
 528:../src/cliSupport.c ****         	    for ( index = 0; index < eepromConfig.freeMixMotors; index++ )
 2049              		.loc 1 528 0
 2050 12a4 4FF00003 		mov	r3, #0
 2051 12a8 8DF80B30 		strb	r3, [sp, #11]
 2052 12ac 8BE0     		b	.L102
 2053              	.L103:
 530:../src/cliSupport.c ****         	    	uart1Print("Motor"); itoa(index, numberString, 10);       uart1Print(numberString); u
 2054              		.loc 1 530 0 discriminator 2
 2055 12ae 40F20000 		movw	r0, #:lower16:.LC91
 2056 12b2 C0F20000 		movt	r0, #:upper16:.LC91
 2057 12b6 FFF7FEFF 		bl	uart1Print
 2058 12ba 9DF80B30 		ldrb	r3, [sp, #11]	@ zero_extendqisi2
 2059 12be 1846     		mov	r0, r3
 2060 12c0 40F20001 		movw	r1, #:lower16:numberString
 2061 12c4 C0F20001 		movt	r1, #:upper16:numberString
 2062 12c8 4FF00A02 		mov	r2, #10
 2063 12cc FFF7FEFF 		bl	itoa
 2064 12d0 40F20000 		movw	r0, #:lower16:numberString
 2065 12d4 C0F20000 		movt	r0, #:upper16:numberString
 2066 12d8 FFF7FEFF 		bl	uart1Print
 2067 12dc 40F20000 		movw	r0, #:lower16:.LC92
 2068 12e0 C0F20000 		movt	r0, #:upper16:.LC92
 2069 12e4 FFF7FEFF 		bl	uart1Print
 531:../src/cliSupport.c ****         	    	ftoa(eepromConfig.freeMix[index][ROLL ], numberString); uart1Print(numberString); uar
 2070              		.loc 1 531 0 discriminator 2
 2071 12e8 9DF80B10 		ldrb	r1, [sp, #11]	@ zero_extendqisi2
 2072 12ec 40F20002 		movw	r2, #:lower16:eepromConfig
 2073 12f0 C0F20002 		movt	r2, #:upper16:eepromConfig
 2074 12f4 0B46     		mov	r3, r1
 2075 12f6 4FEA4303 		lsl	r3, r3, #1
 2076 12fa 5B18     		adds	r3, r3, r1
 2077 12fc 4FEA8303 		lsl	r3, r3, #2
 2078 1300 D318     		adds	r3, r2, r3
 2079 1302 03F53973 		add	r3, r3, #740
 2080 1306 1B68     		ldr	r3, [r3, #0]	@ float
 2081 1308 1846     		mov	r0, r3	@ float
 2082 130a 40F20001 		movw	r1, #:lower16:numberString
 2083 130e C0F20001 		movt	r1, #:upper16:numberString
 2084 1312 FFF7FEFF 		bl	ftoa
 2085 1316 40F20000 		movw	r0, #:lower16:numberString
 2086 131a C0F20000 		movt	r0, #:upper16:numberString
 2087 131e FFF7FEFF 		bl	uart1Print
 2088 1322 40F20000 		movw	r0, #:lower16:.LC92
 2089 1326 C0F20000 		movt	r0, #:upper16:.LC92
 2090 132a FFF7FEFF 		bl	uart1Print
 532:../src/cliSupport.c ****         	    	ftoa(eepromConfig.freeMix[index][PITCH], numberString); uart1Print(numberString); uar
 2091              		.loc 1 532 0 discriminator 2
 2092 132e 9DF80B10 		ldrb	r1, [sp, #11]	@ zero_extendqisi2
 2093 1332 40F20002 		movw	r2, #:lower16:eepromConfig
 2094 1336 C0F20002 		movt	r2, #:upper16:eepromConfig
 2095 133a 0B46     		mov	r3, r1
 2096 133c 4FEA4303 		lsl	r3, r3, #1
 2097 1340 5B18     		adds	r3, r3, r1
 2098 1342 4FEA8303 		lsl	r3, r3, #2
 2099 1346 D318     		adds	r3, r2, r3
 2100 1348 03F53A73 		add	r3, r3, #744
 2101 134c 1B68     		ldr	r3, [r3, #0]	@ float
 2102 134e 1846     		mov	r0, r3	@ float
 2103 1350 40F20001 		movw	r1, #:lower16:numberString
 2104 1354 C0F20001 		movt	r1, #:upper16:numberString
 2105 1358 FFF7FEFF 		bl	ftoa
 2106 135c 40F20000 		movw	r0, #:lower16:numberString
 2107 1360 C0F20000 		movt	r0, #:upper16:numberString
 2108 1364 FFF7FEFF 		bl	uart1Print
 2109 1368 40F20000 		movw	r0, #:lower16:.LC92
 2110 136c C0F20000 		movt	r0, #:upper16:.LC92
 2111 1370 FFF7FEFF 		bl	uart1Print
 533:../src/cliSupport.c ****         	    	ftoa(eepromConfig.freeMix[index][YAW  ], numberString); uart1Print(numberString); uar
 2112              		.loc 1 533 0 discriminator 2
 2113 1374 9DF80B10 		ldrb	r1, [sp, #11]	@ zero_extendqisi2
 2114 1378 40F20002 		movw	r2, #:lower16:eepromConfig
 2115 137c C0F20002 		movt	r2, #:upper16:eepromConfig
 2116 1380 0B46     		mov	r3, r1
 2117 1382 4FEA4303 		lsl	r3, r3, #1
 2118 1386 5B18     		adds	r3, r3, r1
 2119 1388 4FEA8303 		lsl	r3, r3, #2
 2120 138c D318     		adds	r3, r2, r3
 2121 138e 03F53B73 		add	r3, r3, #748
 2122 1392 1B68     		ldr	r3, [r3, #0]	@ float
 2123 1394 1846     		mov	r0, r3	@ float
 2124 1396 40F20001 		movw	r1, #:lower16:numberString
 2125 139a C0F20001 		movt	r1, #:upper16:numberString
 2126 139e FFF7FEFF 		bl	ftoa
 2127 13a2 40F20000 		movw	r0, #:lower16:numberString
 2128 13a6 C0F20000 		movt	r0, #:upper16:numberString
 2129 13aa FFF7FEFF 		bl	uart1Print
 2130 13ae 40F20000 		movw	r0, #:lower16:.LC2
 2131 13b2 C0F20000 		movt	r0, #:upper16:.LC2
 2132 13b6 FFF7FEFF 		bl	uart1Print
 528:../src/cliSupport.c ****         	    for ( index = 0; index < eepromConfig.freeMixMotors; index++ )
 2133              		.loc 1 528 0 discriminator 2
 2134 13ba 9DF80B30 		ldrb	r3, [sp, #11]
 2135 13be 03F10103 		add	r3, r3, #1
 2136 13c2 8DF80B30 		strb	r3, [sp, #11]
 2137              	.L102:
 528:../src/cliSupport.c ****         	    for ( index = 0; index < eepromConfig.freeMixMotors; index++ )
 2138              		.loc 1 528 0 is_stmt 0 discriminator 1
 2139 13c6 40F20003 		movw	r3, #:lower16:eepromConfig
 2140 13ca C0F20003 		movt	r3, #:upper16:eepromConfig
 2141 13ce 93F8E032 		ldrb	r3, [r3, #736]	@ zero_extendqisi2
 2142 13d2 9DF80B20 		ldrb	r2, [sp, #11]	@ zero_extendqisi2
 2143 13d6 9A42     		cmp	r2, r3
 2144 13d8 FFF469AF 		bcc	.L103
 536:../src/cliSupport.c ****         	    uart1Print("\n");
 2145              		.loc 1 536 0 is_stmt 1
 2146 13dc 40F20000 		movw	r0, #:lower16:.LC2
 2147 13e0 C0F20000 		movt	r0, #:upper16:.LC2
 2148 13e4 FFF7FEFF 		bl	uart1Print
 537:../src/cliSupport.c ****         	    validQuery = false;
 2149              		.loc 1 537 0
 2150 13e8 4FF00003 		mov	r3, #0
 2151 13ec 8DF80930 		strb	r3, [sp, #9]
 538:../src/cliSupport.c ****         	    break;
 2152              		.loc 1 538 0
 2153 13f0 76E2     		b	.L53
 2154              	.L71:
 543:../src/cliSupport.c **** 			    uart1Print("\nExiting Mixer CLI....\n\n");
 2155              		.loc 1 543 0
 2156 13f2 40F20000 		movw	r0, #:lower16:.LC93
 2157 13f6 C0F20000 		movt	r0, #:upper16:.LC93
 2158 13fa FFF7FEFF 		bl	uart1Print
 544:../src/cliSupport.c **** 			    cliBusy = false;
 2159              		.loc 1 544 0
 2160 13fe 40F20003 		movw	r3, #:lower16:cliBusy
 2161 1402 C0F20003 		movt	r3, #:upper16:cliBusy
 2162 1406 4FF00002 		mov	r2, #0
 2163 140a 1A70     		strb	r2, [r3, #0]
 729:../src/cliSupport.c **** 
 730:../src/cliSupport.c **** }
 2164              		.loc 1 730 0
 2165 140c 05B0     		add	sp, sp, #20
 2166 140e 30BD     		pop	{r4, r5, pc}
 2167              	.L55:
 551:../src/cliSupport.c ****                 eepromConfig.mixerConfiguration = (uint8_t)readFloatUart1();
 2168              		.loc 1 551 0
 2169 1410 FFF7FEFF 		bl	readFloatUart1
 2170 1414 07EE900A 		fmsr	s15, r0
 2171 1418 FCEEE77A 		ftouizs	s15, s15
 2172 141c 17EE903A 		fmrs	r3, s15	@ int
 2173 1420 DAB2     		uxtb	r2, r3
 2174 1422 40F20003 		movw	r3, #:lower16:eepromConfig
 2175 1426 C0F20003 		movt	r3, #:upper16:eepromConfig
 2176 142a 83F87C20 		strb	r2, [r3, #124]
 552:../src/cliSupport.c ****                 initMixer();
 2177              		.loc 1 552 0
 2178 142e FFF7FEFF 		bl	initMixer
 554:../src/cliSupport.c ****         	    mixerQuery = 'a';
 2179              		.loc 1 554 0
 2180 1432 4FF06103 		mov	r3, #97
 2181 1436 8DF80A30 		strb	r3, [sp, #10]
 555:../src/cliSupport.c ****                 validQuery = true;
 2182              		.loc 1 555 0
 2183 143a 4FF00103 		mov	r3, #1
 2184 143e 8DF80930 		strb	r3, [sp, #9]
 556:../src/cliSupport.c **** 		        break;
 2185              		.loc 1 556 0
 2186 1442 4DE2     		b	.L53
 2187              	.L56:
 561:../src/cliSupport.c ****                 eepromConfig.escPwmRate   = (uint16_t)readFloatUart1();
 2188              		.loc 1 561 0
 2189 1444 FFF7FEFF 		bl	readFloatUart1
 2190 1448 07EE900A 		fmsr	s15, r0
 2191 144c FCEEE77A 		ftouizs	s15, s15
 2192 1450 17EE903A 		fmrs	r3, s15	@ int
 2193 1454 9AB2     		uxth	r2, r3
 2194 1456 40F20003 		movw	r3, #:lower16:eepromConfig
 2195 145a C0F20003 		movt	r3, #:upper16:eepromConfig
 2196 145e A3F87820 		strh	r2, [r3, #120]	@ movhi
 562:../src/cliSupport.c ****                 eepromConfig.servoPwmRate = (uint16_t)readFloatUart1();
 2197              		.loc 1 562 0
 2198 1462 FFF7FEFF 		bl	readFloatUart1
 2199 1466 07EE900A 		fmsr	s15, r0
 2200 146a FCEEE77A 		ftouizs	s15, s15
 2201 146e 17EE903A 		fmrs	r3, s15	@ int
 2202 1472 9AB2     		uxth	r2, r3
 2203 1474 40F20003 		movw	r3, #:lower16:eepromConfig
 2204 1478 C0F20003 		movt	r3, #:upper16:eepromConfig
 2205 147c A3F87A20 		strh	r2, [r3, #122]	@ movhi
 564:../src/cliSupport.c ****                 pwmEscInit(eepromConfig.escPwmRate);
 2206              		.loc 1 564 0
 2207 1480 40F20003 		movw	r3, #:lower16:eepromConfig
 2208 1484 C0F20003 		movt	r3, #:upper16:eepromConfig
 2209 1488 B3F87830 		ldrh	r3, [r3, #120]
 2210 148c 1846     		mov	r0, r3
 2211 148e FFF7FEFF 		bl	pwmEscInit
 565:../src/cliSupport.c ****                 pwmServoInit(eepromConfig.servoPwmRate);
 2212              		.loc 1 565 0
 2213 1492 40F20003 		movw	r3, #:lower16:eepromConfig
 2214 1496 C0F20003 		movt	r3, #:upper16:eepromConfig
 2215 149a B3F87A30 		ldrh	r3, [r3, #122]
 2216 149e 1846     		mov	r0, r3
 2217 14a0 FFF7FEFF 		bl	pwmServoInit
 567:../src/cliSupport.c ****                 mixerQuery = 'a';
 2218              		.loc 1 567 0
 2219 14a4 4FF06103 		mov	r3, #97
 2220 14a8 8DF80A30 		strb	r3, [sp, #10]
 568:../src/cliSupport.c ****                 validQuery = true;
 2221              		.loc 1 568 0
 2222 14ac 4FF00103 		mov	r3, #1
 2223 14b0 8DF80930 		strb	r3, [sp, #9]
 569:../src/cliSupport.c ****         	    break;
 2224              		.loc 1 569 0
 2225 14b4 14E2     		b	.L53
 2226              	.L57:
 574:../src/cliSupport.c ****            	    eepromConfig.biLeftServoMin = readFloatUart1();
 2227              		.loc 1 574 0
 2228 14b6 FFF7FEFF 		bl	readFloatUart1
 2229 14ba 0246     		mov	r2, r0	@ float
 2230 14bc 40F20003 		movw	r3, #:lower16:eepromConfig
 2231 14c0 C0F20003 		movt	r3, #:upper16:eepromConfig
 2232 14c4 C3F8B822 		str	r2, [r3, #696]	@ float
 575:../src/cliSupport.c ****            	    eepromConfig.biLeftServoMid = readFloatUart1();
 2233              		.loc 1 575 0
 2234 14c8 FFF7FEFF 		bl	readFloatUart1
 2235 14cc 0246     		mov	r2, r0	@ float
 2236 14ce 40F20003 		movw	r3, #:lower16:eepromConfig
 2237 14d2 C0F20003 		movt	r3, #:upper16:eepromConfig
 2238 14d6 C3F8BC22 		str	r2, [r3, #700]	@ float
 576:../src/cliSupport.c ****            	    eepromConfig.biLeftServoMax = readFloatUart1();
 2239              		.loc 1 576 0
 2240 14da FFF7FEFF 		bl	readFloatUart1
 2241 14de 0246     		mov	r2, r0	@ float
 2242 14e0 40F20003 		movw	r3, #:lower16:eepromConfig
 2243 14e4 C0F20003 		movt	r3, #:upper16:eepromConfig
 2244 14e8 C3F8C022 		str	r2, [r3, #704]	@ float
 578:../src/cliSupport.c ****            	    mixerQuery = 'a';
 2245              		.loc 1 578 0
 2246 14ec 4FF06103 		mov	r3, #97
 2247 14f0 8DF80A30 		strb	r3, [sp, #10]
 579:../src/cliSupport.c ****                 validQuery = true;
 2248              		.loc 1 579 0
 2249 14f4 4FF00103 		mov	r3, #1
 2250 14f8 8DF80930 		strb	r3, [sp, #9]
 580:../src/cliSupport.c ****                 break;
 2251              		.loc 1 580 0
 2252 14fc F0E1     		b	.L53
 2253              	.L58:
 585:../src/cliSupport.c ****            	    eepromConfig.biRightServoMin = readFloatUart1();
 2254              		.loc 1 585 0
 2255 14fe FFF7FEFF 		bl	readFloatUart1
 2256 1502 0246     		mov	r2, r0	@ float
 2257 1504 40F20003 		movw	r3, #:lower16:eepromConfig
 2258 1508 C0F20003 		movt	r3, #:upper16:eepromConfig
 2259 150c C3F8C422 		str	r2, [r3, #708]	@ float
 586:../src/cliSupport.c ****            	    eepromConfig.biRightServoMid = readFloatUart1();
 2260              		.loc 1 586 0
 2261 1510 FFF7FEFF 		bl	readFloatUart1
 2262 1514 0246     		mov	r2, r0	@ float
 2263 1516 40F20003 		movw	r3, #:lower16:eepromConfig
 2264 151a C0F20003 		movt	r3, #:upper16:eepromConfig
 2265 151e C3F8C822 		str	r2, [r3, #712]	@ float
 587:../src/cliSupport.c ****            	    eepromConfig.biRightServoMax = readFloatUart1();
 2266              		.loc 1 587 0
 2267 1522 FFF7FEFF 		bl	readFloatUart1
 2268 1526 0246     		mov	r2, r0	@ float
 2269 1528 40F20003 		movw	r3, #:lower16:eepromConfig
 2270 152c C0F20003 		movt	r3, #:upper16:eepromConfig
 2271 1530 C3F8CC22 		str	r2, [r3, #716]	@ float
 589:../src/cliSupport.c ****            	    mixerQuery = 'a';
 2272              		.loc 1 589 0
 2273 1534 4FF06103 		mov	r3, #97
 2274 1538 8DF80A30 		strb	r3, [sp, #10]
 590:../src/cliSupport.c ****                 validQuery = true;
 2275              		.loc 1 590 0
 2276 153c 4FF00103 		mov	r3, #1
 2277 1540 8DF80930 		strb	r3, [sp, #9]
 591:../src/cliSupport.c ****                 break;
 2278              		.loc 1 591 0
 2279 1544 CCE1     		b	.L53
 2280              	.L59:
 596:../src/cliSupport.c ****                 eepromConfig.rollDirectionLeft   = readFloatUart1();
 2281              		.loc 1 596 0
 2282 1546 FFF7FEFF 		bl	readFloatUart1
 2283 154a 0246     		mov	r2, r0	@ float
 2284 154c 40F20003 		movw	r3, #:lower16:eepromConfig
 2285 1550 C0F20003 		movt	r3, #:upper16:eepromConfig
 2286 1554 C3F89822 		str	r2, [r3, #664]	@ float
 597:../src/cliSupport.c ****                 eepromConfig.rollDirectionRight  = readFloatUart1();
 2287              		.loc 1 597 0
 2288 1558 FFF7FEFF 		bl	readFloatUart1
 2289 155c 0246     		mov	r2, r0	@ float
 2290 155e 40F20003 		movw	r3, #:lower16:eepromConfig
 2291 1562 C0F20003 		movt	r3, #:upper16:eepromConfig
 2292 1566 C3F89C22 		str	r2, [r3, #668]	@ float
 598:../src/cliSupport.c ****                 eepromConfig.pitchDirectionLeft  = readFloatUart1();
 2293              		.loc 1 598 0
 2294 156a FFF7FEFF 		bl	readFloatUart1
 2295 156e 0246     		mov	r2, r0	@ float
 2296 1570 40F20003 		movw	r3, #:lower16:eepromConfig
 2297 1574 C0F20003 		movt	r3, #:upper16:eepromConfig
 2298 1578 C3F8A022 		str	r2, [r3, #672]	@ float
 599:../src/cliSupport.c ****                 eepromConfig.pitchDirectionRight = readFloatUart1();
 2299              		.loc 1 599 0
 2300 157c FFF7FEFF 		bl	readFloatUart1
 2301 1580 0246     		mov	r2, r0	@ float
 2302 1582 40F20003 		movw	r3, #:lower16:eepromConfig
 2303 1586 C0F20003 		movt	r3, #:upper16:eepromConfig
 2304 158a C3F8A422 		str	r2, [r3, #676]	@ float
 601:../src/cliSupport.c ****          	    mixerQuery = 'a';
 2305              		.loc 1 601 0
 2306 158e 4FF06103 		mov	r3, #97
 2307 1592 8DF80A30 		strb	r3, [sp, #10]
 602:../src/cliSupport.c ****                 validQuery = true;
 2308              		.loc 1 602 0
 2309 1596 4FF00103 		mov	r3, #1
 2310 159a 8DF80930 		strb	r3, [sp, #9]
 603:../src/cliSupport.c ****                 break;
 2311              		.loc 1 603 0
 2312 159e 9FE1     		b	.L53
 2313              	.L60:
 608:../src/cliSupport.c ****            	    eepromConfig.wingLeftMinimum  = readFloatUart1();
 2314              		.loc 1 608 0
 2315 15a0 FFF7FEFF 		bl	readFloatUart1
 2316 15a4 0246     		mov	r2, r0	@ float
 2317 15a6 40F20003 		movw	r3, #:lower16:eepromConfig
 2318 15aa C0F20003 		movt	r3, #:upper16:eepromConfig
 2319 15ae C3F8A822 		str	r2, [r3, #680]	@ float
 609:../src/cliSupport.c ****            	    eepromConfig.wingLeftMaximum  = readFloatUart1();
 2320              		.loc 1 609 0
 2321 15b2 FFF7FEFF 		bl	readFloatUart1
 2322 15b6 0246     		mov	r2, r0	@ float
 2323 15b8 40F20003 		movw	r3, #:lower16:eepromConfig
 2324 15bc C0F20003 		movt	r3, #:upper16:eepromConfig
 2325 15c0 C3F8AC22 		str	r2, [r3, #684]	@ float
 610:../src/cliSupport.c ****            	    eepromConfig.wingRightMinimum = readFloatUart1();
 2326              		.loc 1 610 0
 2327 15c4 FFF7FEFF 		bl	readFloatUart1
 2328 15c8 0246     		mov	r2, r0	@ float
 2329 15ca 40F20003 		movw	r3, #:lower16:eepromConfig
 2330 15ce C0F20003 		movt	r3, #:upper16:eepromConfig
 2331 15d2 C3F8B022 		str	r2, [r3, #688]	@ float
 611:../src/cliSupport.c ****            	    eepromConfig.wingRightMaximum = readFloatUart1();
 2332              		.loc 1 611 0
 2333 15d6 FFF7FEFF 		bl	readFloatUart1
 2334 15da 0246     		mov	r2, r0	@ float
 2335 15dc 40F20003 		movw	r3, #:lower16:eepromConfig
 2336 15e0 C0F20003 		movt	r3, #:upper16:eepromConfig
 2337 15e4 C3F8B422 		str	r2, [r3, #692]	@ float
 613:../src/cliSupport.c ****                 mixerQuery = 'a';
 2338              		.loc 1 613 0
 2339 15e8 4FF06103 		mov	r3, #97
 2340 15ec 8DF80A30 		strb	r3, [sp, #10]
 614:../src/cliSupport.c ****                 validQuery = true;
 2341              		.loc 1 614 0
 2342 15f0 4FF00103 		mov	r3, #1
 2343 15f4 8DF80930 		strb	r3, [sp, #9]
 615:../src/cliSupport.c ****                 break;
 2344              		.loc 1 615 0
 2345 15f8 72E1     		b	.L53
 2346              	.L61:
 620:../src/cliSupport.c ****            	    eepromConfig.freeMixMotors = (uint8_t)readFloatUart1();
 2347              		.loc 1 620 0
 2348 15fa FFF7FEFF 		bl	readFloatUart1
 2349 15fe 07EE900A 		fmsr	s15, r0
 2350 1602 FCEEE77A 		ftouizs	s15, s15
 2351 1606 17EE903A 		fmrs	r3, s15	@ int
 2352 160a DAB2     		uxtb	r2, r3
 2353 160c 40F20003 		movw	r3, #:lower16:eepromConfig
 2354 1610 C0F20003 		movt	r3, #:upper16:eepromConfig
 2355 1614 83F8E022 		strb	r2, [r3, #736]
 621:../src/cliSupport.c ****            	    initMixer();
 2356              		.loc 1 621 0
 2357 1618 FFF7FEFF 		bl	initMixer
 623:../src/cliSupport.c ****            	    mixerQuery = 'b';
 2358              		.loc 1 623 0
 2359 161c 4FF06203 		mov	r3, #98
 2360 1620 8DF80A30 		strb	r3, [sp, #10]
 624:../src/cliSupport.c ****                 validQuery = true;
 2361              		.loc 1 624 0
 2362 1624 4FF00103 		mov	r3, #1
 2363 1628 8DF80930 		strb	r3, [sp, #9]
 625:../src/cliSupport.c ****                 break;
 2364              		.loc 1 625 0
 2365 162c 58E1     		b	.L53
 2366              	.L62:
 630:../src/cliSupport.c ****                 rows    = (uint8_t)readFloatUart1();
 2367              		.loc 1 630 0
 2368 162e FFF7FEFF 		bl	readFloatUart1
 2369 1632 07EE900A 		fmsr	s15, r0
 2370 1636 FCEEE77A 		ftouizs	s15, s15
 2371 163a 17EE903A 		fmrs	r3, s15	@ int
 2372 163e 8DF80830 		strb	r3, [sp, #8]
 631:../src/cliSupport.c ****                 columns = (uint8_t)readFloatUart1();
 2373              		.loc 1 631 0
 2374 1642 FFF7FEFF 		bl	readFloatUart1
 2375 1646 07EE900A 		fmsr	s15, r0
 2376 164a FCEEE77A 		ftouizs	s15, s15
 2377 164e 17EE903A 		fmrs	r3, s15	@ int
 2378 1652 8DF80730 		strb	r3, [sp, #7]
 632:../src/cliSupport.c ****                 eepromConfig.freeMix[rows][columns] = readFloatUart1();
 2379              		.loc 1 632 0
 2380 1656 9DF80840 		ldrb	r4, [sp, #8]	@ zero_extendqisi2
 2381 165a 9DF80750 		ldrb	r5, [sp, #7]	@ zero_extendqisi2
 2382 165e FFF7FEFF 		bl	readFloatUart1
 2383 1662 0146     		mov	r1, r0	@ float
 2384 1664 40F20002 		movw	r2, #:lower16:eepromConfig
 2385 1668 C0F20002 		movt	r2, #:upper16:eepromConfig
 2386 166c 2346     		mov	r3, r4
 2387 166e 4FEA4303 		lsl	r3, r3, #1
 2388 1672 1B19     		adds	r3, r3, r4
 2389 1674 5B19     		adds	r3, r3, r5
 2390 1676 03F1B803 		add	r3, r3, #184
 2391 167a 4FEA8303 		lsl	r3, r3, #2
 2392 167e D318     		adds	r3, r2, r3
 2393 1680 03F10403 		add	r3, r3, #4
 2394 1684 1960     		str	r1, [r3, #0]	@ float
 634:../src/cliSupport.c ****                 mixerQuery = 'b';
 2395              		.loc 1 634 0
 2396 1686 4FF06203 		mov	r3, #98
 2397 168a 8DF80A30 		strb	r3, [sp, #10]
 635:../src/cliSupport.c ****                 validQuery = true;
 2398              		.loc 1 635 0
 2399 168e 4FF00103 		mov	r3, #1
 2400 1692 8DF80930 		strb	r3, [sp, #9]
 636:../src/cliSupport.c ****                 break;
 2401              		.loc 1 636 0
 2402 1696 23E1     		b	.L53
 2403              	.L63:
 641:../src/cliSupport.c ****          	    eepromConfig.gimbalRollServoMin  = readFloatUart1();
 2404              		.loc 1 641 0
 2405 1698 FFF7FEFF 		bl	readFloatUart1
 2406 169c 0246     		mov	r2, r0	@ float
 2407 169e 40F20003 		movw	r3, #:lower16:eepromConfig
 2408 16a2 C0F20003 		movt	r3, #:upper16:eepromConfig
 2409 16a6 C3F87822 		str	r2, [r3, #632]	@ float
 642:../src/cliSupport.c ****            	    eepromConfig.gimbalRollServoMid  = readFloatUart1();
 2410              		.loc 1 642 0
 2411 16aa FFF7FEFF 		bl	readFloatUart1
 2412 16ae 0246     		mov	r2, r0	@ float
 2413 16b0 40F20003 		movw	r3, #:lower16:eepromConfig
 2414 16b4 C0F20003 		movt	r3, #:upper16:eepromConfig
 2415 16b8 C3F87C22 		str	r2, [r3, #636]	@ float
 643:../src/cliSupport.c ****            	    eepromConfig.gimbalRollServoMax  = readFloatUart1();
 2416              		.loc 1 643 0
 2417 16bc FFF7FEFF 		bl	readFloatUart1
 2418 16c0 0246     		mov	r2, r0	@ float
 2419 16c2 40F20003 		movw	r3, #:lower16:eepromConfig
 2420 16c6 C0F20003 		movt	r3, #:upper16:eepromConfig
 2421 16ca C3F88022 		str	r2, [r3, #640]	@ float
 644:../src/cliSupport.c ****            	    eepromConfig.gimbalRollServoGain = readFloatUart1();
 2422              		.loc 1 644 0
 2423 16ce FFF7FEFF 		bl	readFloatUart1
 2424 16d2 0246     		mov	r2, r0	@ float
 2425 16d4 40F20003 		movw	r3, #:lower16:eepromConfig
 2426 16d8 C0F20003 		movt	r3, #:upper16:eepromConfig
 2427 16dc C3F88422 		str	r2, [r3, #644]	@ float
 646:../src/cliSupport.c ****            	    mixerQuery = 'a';
 2428              		.loc 1 646 0
 2429 16e0 4FF06103 		mov	r3, #97
 2430 16e4 8DF80A30 		strb	r3, [sp, #10]
 647:../src/cliSupport.c ****                 validQuery = true;
 2431              		.loc 1 647 0
 2432 16e8 4FF00103 		mov	r3, #1
 2433 16ec 8DF80930 		strb	r3, [sp, #9]
 648:../src/cliSupport.c ****                 break;
 2434              		.loc 1 648 0
 2435 16f0 F6E0     		b	.L53
 2436              	.L64:
 653:../src/cliSupport.c ****            	    eepromConfig.gimbalPitchServoMin  = readFloatUart1();
 2437              		.loc 1 653 0
 2438 16f2 FFF7FEFF 		bl	readFloatUart1
 2439 16f6 0246     		mov	r2, r0	@ float
 2440 16f8 40F20003 		movw	r3, #:lower16:eepromConfig
 2441 16fc C0F20003 		movt	r3, #:upper16:eepromConfig
 2442 1700 C3F88822 		str	r2, [r3, #648]	@ float
 654:../src/cliSupport.c ****            	    eepromConfig.gimbalPitchServoMid  = readFloatUart1();
 2443              		.loc 1 654 0
 2444 1704 FFF7FEFF 		bl	readFloatUart1
 2445 1708 0246     		mov	r2, r0	@ float
 2446 170a 40F20003 		movw	r3, #:lower16:eepromConfig
 2447 170e C0F20003 		movt	r3, #:upper16:eepromConfig
 2448 1712 C3F88C22 		str	r2, [r3, #652]	@ float
 655:../src/cliSupport.c ****            	    eepromConfig.gimbalPitchServoMax  = readFloatUart1();
 2449              		.loc 1 655 0
 2450 1716 FFF7FEFF 		bl	readFloatUart1
 2451 171a 0246     		mov	r2, r0	@ float
 2452 171c 40F20003 		movw	r3, #:lower16:eepromConfig
 2453 1720 C0F20003 		movt	r3, #:upper16:eepromConfig
 2454 1724 C3F89022 		str	r2, [r3, #656]	@ float
 656:../src/cliSupport.c ****            	    eepromConfig.gimbalPitchServoGain = readFloatUart1();
 2455              		.loc 1 656 0
 2456 1728 FFF7FEFF 		bl	readFloatUart1
 2457 172c 0246     		mov	r2, r0	@ float
 2458 172e 40F20003 		movw	r3, #:lower16:eepromConfig
 2459 1732 C0F20003 		movt	r3, #:upper16:eepromConfig
 2460 1736 C3F89422 		str	r2, [r3, #660]	@ float
 658:../src/cliSupport.c ****            	    mixerQuery = 'a';
 2461              		.loc 1 658 0
 2462 173a 4FF06103 		mov	r3, #97
 2463 173e 8DF80A30 		strb	r3, [sp, #10]
 659:../src/cliSupport.c ****                 validQuery = true;
 2464              		.loc 1 659 0
 2465 1742 4FF00103 		mov	r3, #1
 2466 1746 8DF80930 		strb	r3, [sp, #9]
 660:../src/cliSupport.c ****                 break;
 2467              		.loc 1 660 0
 2468 174a C9E0     		b	.L53
 2469              	.L65:
 665:../src/cliSupport.c ****         	    eepromConfig.triYawServoMin = readFloatUart1();
 2470              		.loc 1 665 0
 2471 174c FFF7FEFF 		bl	readFloatUart1
 2472 1750 0246     		mov	r2, r0	@ float
 2473 1752 40F20003 		movw	r3, #:lower16:eepromConfig
 2474 1756 C0F20003 		movt	r3, #:upper16:eepromConfig
 2475 175a C3F8D022 		str	r2, [r3, #720]	@ float
 666:../src/cliSupport.c ****            	    eepromConfig.triYawServoMid = readFloatUart1();
 2476              		.loc 1 666 0
 2477 175e FFF7FEFF 		bl	readFloatUart1
 2478 1762 0246     		mov	r2, r0	@ float
 2479 1764 40F20003 		movw	r3, #:lower16:eepromConfig
 2480 1768 C0F20003 		movt	r3, #:upper16:eepromConfig
 2481 176c C3F8D422 		str	r2, [r3, #724]	@ float
 667:../src/cliSupport.c ****            	    eepromConfig.triYawServoMax = readFloatUart1();
 2482              		.loc 1 667 0
 2483 1770 FFF7FEFF 		bl	readFloatUart1
 2484 1774 0246     		mov	r2, r0	@ float
 2485 1776 40F20003 		movw	r3, #:lower16:eepromConfig
 2486 177a C0F20003 		movt	r3, #:upper16:eepromConfig
 2487 177e C3F8D822 		str	r2, [r3, #728]	@ float
 669:../src/cliSupport.c ****            	    mixerQuery = 'a';
 2488              		.loc 1 669 0
 2489 1782 4FF06103 		mov	r3, #97
 2490 1786 8DF80A30 		strb	r3, [sp, #10]
 670:../src/cliSupport.c ****                 validQuery = true;
 2491              		.loc 1 670 0
 2492 178a 4FF00103 		mov	r3, #1
 2493 178e 8DF80930 		strb	r3, [sp, #9]
 671:../src/cliSupport.c ****                 break;
 2494              		.loc 1 671 0
 2495 1792 A5E0     		b	.L53
 2496              	.L66:
 676:../src/cliSupport.c ****         	    eepromConfig.vTailAngle = readFloatUart1();
 2497              		.loc 1 676 0
 2498 1794 FFF7FEFF 		bl	readFloatUart1
 2499 1798 0246     		mov	r2, r0	@ float
 2500 179a 40F20003 		movw	r3, #:lower16:eepromConfig
 2501 179e C0F20003 		movt	r3, #:upper16:eepromConfig
 2502 17a2 C3F8DC22 		str	r2, [r3, #732]	@ float
 678:../src/cliSupport.c ****         	    mixerQuery = 'a';
 2503              		.loc 1 678 0
 2504 17a6 4FF06103 		mov	r3, #97
 2505 17aa 8DF80A30 		strb	r3, [sp, #10]
 679:../src/cliSupport.c ****                 validQuery = true;
 2506              		.loc 1 679 0
 2507 17ae 4FF00103 		mov	r3, #1
 2508 17b2 8DF80930 		strb	r3, [sp, #9]
 680:../src/cliSupport.c ****                 break;
 2509              		.loc 1 680 0
 2510 17b6 93E0     		b	.L53
 2511              	.L67:
 685:../src/cliSupport.c ****                 tempFloat = readFloatUart1();
 2512              		.loc 1 685 0
 2513 17b8 FFF7FEFF 		bl	readFloatUart1
 2514 17bc 0390     		str	r0, [sp, #12]	@ float
 686:../src/cliSupport.c ****                 if (tempFloat >= 0.0)
 2515              		.loc 1 686 0
 2516 17be DDED037A 		flds	s15, [sp, #12]
 2517 17c2 F5EEC07A 		fcmpezs	s15
 2518 17c6 F1EE10FA 		fmstat
 2519 17ca B4BF     		ite	lt
 2520 17cc 0023     		movlt	r3, #0
 2521 17ce 0123     		movge	r3, #1
 2522 17d0 DBB2     		uxtb	r3, r3
 2523 17d2 002B     		cmp	r3, #0
 2524 17d4 02D0     		beq	.L104
 687:../src/cliSupport.c ****                     tempFloat = 1.0;
 2525              		.loc 1 687 0
 2526 17d6 434B     		ldr	r3, .L108	@ float
 2527 17d8 0393     		str	r3, [sp, #12]	@ float
 2528 17da 01E0     		b	.L105
 2529              	.L104:
 689:../src/cliSupport.c ****                 	tempFloat = -1.0;
 2530              		.loc 1 689 0
 2531 17dc 424B     		ldr	r3, .L108+4	@ float
 2532 17de 0393     		str	r3, [sp, #12]	@ float
 2533              	.L105:
 691:../src/cliSupport.c ****                 eepromConfig.yawDirection = tempFloat;
 2534              		.loc 1 691 0
 2535 17e0 40F20003 		movw	r3, #:lower16:eepromConfig
 2536 17e4 C0F20003 		movt	r3, #:upper16:eepromConfig
 2537 17e8 039A     		ldr	r2, [sp, #12]	@ float
 2538 17ea C3F88020 		str	r2, [r3, #128]	@ float
 693:../src/cliSupport.c ****                 mixerQuery = 'a';
 2539              		.loc 1 693 0
 2540 17ee 4FF06103 		mov	r3, #97
 2541 17f2 8DF80A30 		strb	r3, [sp, #10]
 694:../src/cliSupport.c ****                 validQuery = true;
 2542              		.loc 1 694 0
 2543 17f6 4FF00103 		mov	r3, #1
 2544 17fa 8DF80930 		strb	r3, [sp, #9]
 695:../src/cliSupport.c ****                 break;
 2545              		.loc 1 695 0
 2546 17fe 6FE0     		b	.L53
 2547              	.L68:
 700:../src/cliSupport.c ****                 uart1Print("\nWriting EEPROM Parameters....\n\n");
 2548              		.loc 1 700 0
 2549 1800 40F20000 		movw	r0, #:lower16:.LC21
 2550 1804 C0F20000 		movt	r0, #:upper16:.LC21
 2551 1808 FFF7FEFF 		bl	uart1Print
 701:../src/cliSupport.c ****                 writeEEPROM();
 2552              		.loc 1 701 0
 2553 180c FFF7FEFF 		bl	writeEEPROM
 702:../src/cliSupport.c ****                 break;
 2554              		.loc 1 702 0
 2555 1810 66E0     		b	.L53
 2556              	.L54:
 707:../src/cliSupport.c **** 			   	uart1Print("\n");
 2557              		.loc 1 707 0
 2558 1812 40F20000 		movw	r0, #:lower16:.LC2
 2559 1816 C0F20000 		movt	r0, #:upper16:.LC2
 2560 181a FFF7FEFF 		bl	uart1Print
 708:../src/cliSupport.c **** 			   	uart1Print("'a' Mixer Configuration Data               'A' Set Mixer Configuration          
 2561              		.loc 1 708 0
 2562 181e 40F20000 		movw	r0, #:lower16:.LC94
 2563 1822 C0F20000 		movt	r0, #:upper16:.LC94
 2564 1826 FFF7FEFF 		bl	uart1Print
 709:../src/cliSupport.c ****    		        uart1Print("'b' Free Mixer Configuration               'B' Set PWM Rates              
 2565              		.loc 1 709 0
 2566 182a 40F20000 		movw	r0, #:lower16:.LC95
 2567 182e C0F20000 		movt	r0, #:upper16:.LC95
 2568 1832 FFF7FEFF 		bl	uart1Print
 710:../src/cliSupport.c **** 			   	uart1Print("                                           'C' Set BiCopter Left Servo Parameter
 2569              		.loc 1 710 0
 2570 1836 40F20000 		movw	r0, #:lower16:.LC96
 2571 183a C0F20000 		movt	r0, #:upper16:.LC96
 2572 183e FFF7FEFF 		bl	uart1Print
 711:../src/cliSupport.c **** 			   	uart1Print("                                           'D' Set BiCopter Right Servo Paramete
 2573              		.loc 1 711 0
 2574 1842 40F20000 		movw	r0, #:lower16:.LC97
 2575 1846 C0F20000 		movt	r0, #:upper16:.LC97
 2576 184a FFF7FEFF 		bl	uart1Print
 712:../src/cliSupport.c **** 			   	uart1Print("                                           'E' Set Flying Wing Servo Directions 
 2577              		.loc 1 712 0
 2578 184e 40F20000 		movw	r0, #:lower16:.LC98
 2579 1852 C0F20000 		movt	r0, #:upper16:.LC98
 2580 1856 FFF7FEFF 		bl	uart1Print
 713:../src/cliSupport.c **** 			   	uart1Print("                                           'F' Set Flying Wing Servo Limits     
 2581              		.loc 1 713 0
 2582 185a 40F20000 		movw	r0, #:lower16:.LC99
 2583 185e C0F20000 		movt	r0, #:upper16:.LC99
 2584 1862 FFF7FEFF 		bl	uart1Print
 714:../src/cliSupport.c ****    		        uart1Print("                                           'G' Set Number of FreeMix Motor
 2585              		.loc 1 714 0
 2586 1866 40F20000 		movw	r0, #:lower16:.LC100
 2587 186a C0F20000 		movt	r0, #:upper16:.LC100
 2588 186e FFF7FEFF 		bl	uart1Print
 715:../src/cliSupport.c ****    		        uart1Print("                                           'H' Set FreeMix Matrix Element 
 2589              		.loc 1 715 0
 2590 1872 40F20000 		movw	r0, #:lower16:.LC101
 2591 1876 C0F20000 		movt	r0, #:upper16:.LC101
 2592 187a FFF7FEFF 		bl	uart1Print
 716:../src/cliSupport.c ****    		        uart1Print("                                           'I' Set Gimbal Roll Servo Param
 2593              		.loc 1 716 0
 2594 187e 40F20000 		movw	r0, #:lower16:.LC102
 2595 1882 C0F20000 		movt	r0, #:upper16:.LC102
 2596 1886 FFF7FEFF 		bl	uart1Print
 717:../src/cliSupport.c ****    		        uart1Print("                                           'J' Set Gimbal Pitch Servo Para
 2597              		.loc 1 717 0
 2598 188a 40F20000 		movw	r0, #:lower16:.LC103
 2599 188e C0F20000 		movt	r0, #:upper16:.LC103
 2600 1892 FFF7FEFF 		bl	uart1Print
 718:../src/cliSupport.c ****    		        uart1Print("                                           'K' Set TriCopter Servo Paramet
 2601              		.loc 1 718 0
 2602 1896 40F20000 		movw	r0, #:lower16:.LC104
 2603 189a C0F20000 		movt	r0, #:upper16:.LC104
 2604 189e FFF7FEFF 		bl	uart1Print
 719:../src/cliSupport.c ****    		        uart1Print("                                           'L' Set V Tail Angle           
 2605              		.loc 1 719 0
 2606 18a2 40F20000 		movw	r0, #:lower16:.LC105
 2607 18a6 C0F20000 		movt	r0, #:upper16:.LC105
 2608 18aa FFF7FEFF 		bl	uart1Print
 720:../src/cliSupport.c ****    		        uart1Print("                                           'M' Set Yaw Direction          
 2609              		.loc 1 720 0
 2610 18ae 40F20000 		movw	r0, #:lower16:.LC106
 2611 18b2 C0F20000 		movt	r0, #:upper16:.LC106
 2612 18b6 FFF7FEFF 		bl	uart1Print
 721:../src/cliSupport.c ****    		        uart1Print("                                           'W' Write EEPROM Parameters\n")
 2613              		.loc 1 721 0
 2614 18ba 40F20000 		movw	r0, #:lower16:.LC107
 2615 18be C0F20000 		movt	r0, #:upper16:.LC107
 2616 18c2 FFF7FEFF 		bl	uart1Print
 722:../src/cliSupport.c ****    		        uart1Print("'x' Exit Sensor CLI                        '?' Command Summary\n");
 2617              		.loc 1 722 0
 2618 18c6 40F20000 		movw	r0, #:lower16:.LC33
 2619 18ca C0F20000 		movt	r0, #:upper16:.LC33
 2620 18ce FFF7FEFF 		bl	uart1Print
 723:../src/cliSupport.c ****    		        uart1Print("\n");
 2621              		.loc 1 723 0
 2622 18d2 40F20000 		movw	r0, #:lower16:.LC2
 2623 18d6 C0F20000 		movt	r0, #:upper16:.LC2
 2624 18da FFF7FEFF 		bl	uart1Print
 724:../src/cliSupport.c **** 	    	    break;
 2625              		.loc 1 724 0
 2626 18de 00BF     		nop
 2627              	.L53:
 728:../src/cliSupport.c **** 	}
 2628              		.loc 1 728 0
 2629 18e0 FEF7AABE 		b	.L107
 2630              	.L109:
 2631              		.align	2
 2632              	.L108:
 2633 18e4 0000803F 		.word	1065353216
 2634 18e8 000080BF 		.word	-1082130432
 2635              		.cfi_endproc
 2636              	.LFE112:
 2638              		.section	.rodata
 2639              		.align	2
 2640              	.LC108:
 2641 110c 0A456E74 		.ascii	"\012Entering Receiver CLI....\012\012\000"
 2641      6572696E 
 2641      67205265 
 2641      63656976 
 2641      65722043 
 2642 1129 000000   		.align	2
 2643              	.LC109:
 2644 112c 52656365 		.ascii	"Receiver CLI -> \000"
 2644      69766572 
 2644      20434C49 
 2644      202D3E20 
 2644      00
 2645 113d 000000   		.align	2
 2646              	.LC110:
 2647 1140 0A526563 		.ascii	"\012Receiver Type:                  \000"
 2647      65697665 
 2647      72205479 
 2647      70653A20 
 2647      20202020 
 2648 1162 0000     		.align	2
 2649              	.LC111:
 2650 1164 50617261 		.ascii	"Parallel\012\000"
 2650      6C6C656C 
 2650      0A00
 2651 116e 0000     		.align	2
 2652              	.LC112:
 2653 1170 53657269 		.ascii	"Serial\012\000"
 2653      616C0A00 
 2654              		.align	2
 2655              	.LC113:
 2656 1178 5370656B 		.ascii	"Spektrum\012\000"
 2656      7472756D 
 2656      0A00
 2657 1182 0000     		.align	2
 2658              	.LC114:
 2659 1184 43757272 		.ascii	"Current RC Channel Assignment:  \000"
 2659      656E7420 
 2659      52432043 
 2659      68616E6E 
 2659      656C2041 
 2660 11a5 000000   		.align	2
 2661              	.LC115:
 2662 11a8 5370656B 		.ascii	"Spektrum Resolution:            \000"
 2662      7472756D 
 2662      20526573 
 2662      6F6C7574 
 2662      696F6E3A 
 2663 11c9 000000   		.align	2
 2664              	.LC116:
 2665 11cc 31312042 		.ascii	"11 Bit Mode\012\000"
 2665      6974204D 
 2665      6F64650A 
 2665      00
 2666 11d9 000000   		.align	2
 2667              	.LC117:
 2668 11dc 31302042 		.ascii	"10 Bit Mode\012\000"
 2668      6974204D 
 2668      6F64650A 
 2668      00
 2669 11e9 000000   		.align	2
 2670              	.LC118:
 2671 11ec 4E756D62 		.ascii	"Number of Spektrum Channels:    \000"
 2671      6572206F 
 2671      66205370 
 2671      656B7472 
 2671      756D2043 
 2672 120d 000000   		.align	2
 2673              	.LC119:
 2674 1210 25640A00 		.ascii	"%d\012\000"
 2675              		.align	2
 2676              	.LC120:
 2677 1214 4D696420 		.ascii	"Mid Command:                    \000"
 2677      436F6D6D 
 2677      616E643A 
 2677      20202020 
 2677      20202020 
 2678 1235 000000   		.align	2
 2679              	.LC121:
 2680 1238 4D696E20 		.ascii	"Min Check:                      \000"
 2680      43686563 
 2680      6B3A2020 
 2680      20202020 
 2680      20202020 
 2681 1259 000000   		.align	2
 2682              	.LC122:
 2683 125c 4D617820 		.ascii	"Max Check:                      \000"
 2683      43686563 
 2683      6B3A2020 
 2683      20202020 
 2683      20202020 
 2684 127d 000000   		.align	2
 2685              	.LC123:
 2686 1280 4D696E20 		.ascii	"Min Throttle:                   \000"
 2686      5468726F 
 2686      74746C65 
 2686      3A202020 
 2686      20202020 
 2687 12a1 000000   		.align	2
 2688              	.LC124:
 2689 12a4 4D617820 		.ascii	"Max Thottle:                    \000"
 2689      54686F74 
 2689      746C653A 
 2689      20202020 
 2689      20202020 
 2690 12c5 000000   		.align	2
 2691              	.LC125:
 2692 12c8 25640A0A 		.ascii	"%d\012\012\000"
 2692      00
 2693 12cd 000000   		.align	2
 2694              	.LC126:
 2695 12d0 4D617820 		.ascii	"Max Rate Command:               \000"
 2695      52617465 
 2695      20436F6D 
 2695      6D616E64 
 2695      3A202020 
 2696              		.global	__aeabi_f2d
 2697              		.global	__aeabi_dmul
 2698              		.global	__aeabi_ddiv
 2699              		.global	__aeabi_d2f
 2700 12f1 000000   		.align	2
 2701              	.LC127:
 2702 12f4 25362E32 		.ascii	"%6.2f DPS\012\000"
 2702      66204450 
 2702      530A00
 2703 12ff 00       		.align	2
 2704              	.LC128:
 2705 1300 4D617820 		.ascii	"Max Attitude Command:           \000"
 2705      41747469 
 2705      74756465 
 2705      20436F6D 
 2705      6D616E64 
 2706 1321 000000   		.align	2
 2707              	.LC129:
 2708 1324 25362E32 		.ascii	"%6.2f Degrees\012\012\000"
 2708      66204465 
 2708      67726565 
 2708      730A0A00 
 2709              		.align	2
 2710              	.LC130:
 2711 1334 0A457869 		.ascii	"\012Exiting Receiver CLI....\012\012\000"
 2711      74696E67 
 2711      20526563 
 2711      65697665 
 2711      7220434C 
 2712              		.align	2
 2713              	.LC131:
 2714 1350 0A526563 		.ascii	"\012Receiver Type Changed....\012\000"
 2714      65697665 
 2714      72205479 
 2714      70652043 
 2714      68616E67 
 2715              		.align	2
 2716              	.LC132:
 2717 136c 0A537973 		.ascii	"\012System Resetting....\012\000"
 2717      74656D20 
 2717      52657365 
 2717      7474696E 
 2717      672E2E2E 
 2718 1383 00       		.align	2
 2719              	.LC133:
 2720 1384 27612720 		.ascii	"'a' Receiver Configuration Data            'A' Set "
 2720      52656365 
 2720      69766572 
 2720      20436F6E 
 2720      66696775 
 2721 13b7 52582049 		.ascii	"RX Input Type                    AX, 1=Parallel, 2="
 2721      6E707574 
 2721      20547970 
 2721      65202020 
 2721      20202020 
 2722 13ea 53657269 		.ascii	"Serial, 3=Spektrum\012\000"
 2722      616C2C20 
 2722      333D5370 
 2722      656B7472 
 2722      756D0A00 
 2723 13fe 0000     		.align	2
 2724              	.LC134:
 2725 1400 27622720 		.ascii	"'b' Set Maximum Rate Command               'B' Set "
 2725      53657420 
 2725      4D617869 
 2725      6D756D20 
 2725      52617465 
 2726 1433 52432043 		.ascii	"RC Control Order                 BTAER1234\012\000"
 2726      6F6E7472 
 2726      6F6C204F 
 2726      72646572 
 2726      20202020 
 2727 145f 00       		.align	2
 2728              	.LC135:
 2729 1460 27632720 		.ascii	"'c' Set Maximum Attitude Command           'C' Set "
 2729      53657420 
 2729      4D617869 
 2729      6D756D20 
 2729      41747469 
 2730 1493 5370656B 		.ascii	"Spektrum Resolution              C0 or C1\012\000"
 2730      7472756D 
 2730      20526573 
 2730      6F6C7574 
 2730      696F6E20 
 2731 14be 0000     		.align	2
 2732              	.LC136:
 2733 14c0 20202020 		.ascii	"                                           'D' Set "
 2733      20202020 
 2733      20202020 
 2733      20202020 
 2733      20202020 
 2734 14f3 4E756D62 		.ascii	"Number of Spektrum Channels      D6 thru D12\012\000"
 2734      6572206F 
 2734      66205370 
 2734      656B7472 
 2734      756D2043 
 2735 1521 000000   		.align	2
 2736              	.LC137:
 2737 1524 20202020 		.ascii	"                                           'E' Set "
 2737      20202020 
 2737      20202020 
 2737      20202020 
 2737      20202020 
 2738 1557 52432043 		.ascii	"RC Control Points                EmidCmd;minChk;max"
 2738      6F6E7472 
 2738      6F6C2050 
 2738      6F696E74 
 2738      73202020 
 2739 158a 43686B3B 		.ascii	"Chk;minThrot;maxThrot\012\000"
 2739      6D696E54 
 2739      68726F74 
 2739      3B6D6178 
 2739      5468726F 
 2740 15a1 000000   		.align	2
 2741              	.LC138:
 2742 15a4 27782720 		.ascii	"'x' Exit Receiver CLI                      '?' Comm"
 2742      45786974 
 2742      20526563 
 2742      65697665 
 2742      7220434C 
 2743 15d7 616E6420 		.ascii	"and Summary\012\000"
 2743      53756D6D 
 2743      6172790A 
 2743      00
 2744              		.text
 2745              		.align	2
 2746              		.global	receiverCLI
 2747              		.thumb
 2748              		.thumb_func
 2750              	receiverCLI:
 2751              	.LFB113:
 731:../src/cliSupport.c **** 
 732:../src/cliSupport.c **** ///////////////////////////////////////////////////////////////////////////////
 733:../src/cliSupport.c **** // Receiver CLI
 734:../src/cliSupport.c **** ///////////////////////////////////////////////////////////////////////////////
 735:../src/cliSupport.c **** 
 736:../src/cliSupport.c **** void receiverCLI()
 737:../src/cliSupport.c **** {
 2752              		.loc 1 737 0
 2753              		.cfi_startproc
 2754              		@ args = 0, pretend = 0, frame = 24
 2755              		@ frame_needed = 0, uses_anonymous_args = 0
 2756 18ec 00B5     		push	{lr}
 2757              	.LCFI4:
 2758              		.cfi_def_cfa_offset 4
 2759              		.cfi_offset 14, -4
 2760 18ee 89B0     		sub	sp, sp, #36
 2761              	.LCFI5:
 2762              		.cfi_def_cfa_offset 40
 738:../src/cliSupport.c ****     char     rcOrderString[9];
 739:../src/cliSupport.c ****     float    tempFloat;
 740:../src/cliSupport.c ****     uint8_t  index;
 741:../src/cliSupport.c ****     uint8_t  receiverQuery;
 742:../src/cliSupport.c ****     uint8_t  validQuery = false;
 2763              		.loc 1 742 0
 2764 18f0 4FF00003 		mov	r3, #0
 2765 18f4 8DF81D30 		strb	r3, [sp, #29]
 743:../src/cliSupport.c **** 
 744:../src/cliSupport.c ****     cliBusy = true;
 2766              		.loc 1 744 0
 2767 18f8 40F20003 		movw	r3, #:lower16:cliBusy
 2768 18fc C0F20003 		movt	r3, #:upper16:cliBusy
 2769 1900 4FF00102 		mov	r2, #1
 2770 1904 1A70     		strb	r2, [r3, #0]
 745:../src/cliSupport.c **** 
 746:../src/cliSupport.c ****     uart1Print("\nEntering Receiver CLI....\n\n");
 2771              		.loc 1 746 0
 2772 1906 40F20000 		movw	r0, #:lower16:.LC108
 2773 190a C0F20000 		movt	r0, #:upper16:.LC108
 2774 190e FFF7FEFF 		bl	uart1Print
 2775 1912 00E0     		b	.L135
 2776              	.L136:
 747:../src/cliSupport.c **** 
 748:../src/cliSupport.c ****     while(true)
 749:../src/cliSupport.c ****     {
 750:../src/cliSupport.c ****         uart1Print("Receiver CLI -> ");
 751:../src/cliSupport.c **** 
 752:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
 753:../src/cliSupport.c **** 
 754:../src/cliSupport.c **** 		if (validQuery == false)
 755:../src/cliSupport.c **** 		    receiverQuery = uart1Read();
 756:../src/cliSupport.c **** 
 757:../src/cliSupport.c **** 		uart1Print("\n");
 758:../src/cliSupport.c **** 
 759:../src/cliSupport.c **** 		switch(receiverQuery)
 760:../src/cliSupport.c **** 		{
 761:../src/cliSupport.c ****             ///////////////////////////
 762:../src/cliSupport.c **** 
 763:../src/cliSupport.c ****             case 'a': // Receiver Configuration
 764:../src/cliSupport.c ****                 uart1Print("\nReceiver Type:                  ");
 765:../src/cliSupport.c ****                 switch(eepromConfig.receiverType)
 766:../src/cliSupport.c ****                 {
 767:../src/cliSupport.c ****                     case PARALLEL_PWM:
 768:../src/cliSupport.c ****                         uart1Print("Parallel\n");
 769:../src/cliSupport.c ****                         break;
 770:../src/cliSupport.c ****                     case SERIAL_PWM:
 771:../src/cliSupport.c ****                         uart1Print("Serial\n");
 772:../src/cliSupport.c ****                         break;
 773:../src/cliSupport.c ****                     case SPEKTRUM:
 774:../src/cliSupport.c ****                         uart1Print("Spektrum\n");
 775:../src/cliSupport.c ****                         break;
 776:../src/cliSupport.c **** 		        }
 777:../src/cliSupport.c **** 
 778:../src/cliSupport.c ****                 uart1Print("Current RC Channel Assignment:  ");
 779:../src/cliSupport.c ****                 for (index = 0; index < 8; index++)
 780:../src/cliSupport.c ****                     rcOrderString[eepromConfig.rcMap[index]] = rcChannelLetters[index];
 781:../src/cliSupport.c **** 
 782:../src/cliSupport.c ****                 rcOrderString[index] = '\0';
 783:../src/cliSupport.c **** 
 784:../src/cliSupport.c ****                 uart1Print(rcOrderString);  uart1Print("\n");
 785:../src/cliSupport.c **** 
 786:../src/cliSupport.c ****                 uart1Print("Spektrum Resolution:            ");
 787:../src/cliSupport.c ****                 if (eepromConfig.spektrumHires)
 788:../src/cliSupport.c **** 				    uart1Print("11 Bit Mode\n");
 789:../src/cliSupport.c **** 				else
 790:../src/cliSupport.c **** 				    uart1Print("10 Bit Mode\n");
 791:../src/cliSupport.c **** 
 792:../src/cliSupport.c **** 				uart1Print("Number of Spektrum Channels:    ");
 793:../src/cliSupport.c **** 				snprintf(numberString, 16, "%d\n", eepromConfig.spektrumChannels); uart1Print(numberString);
 794:../src/cliSupport.c **** 
 795:../src/cliSupport.c ****                 uart1Print("Mid Command:                    ");
 796:../src/cliSupport.c ****                 snprintf(numberString, 16, "%d\n", (uint16_t)eepromConfig.midCommand); uart1Print(n
 797:../src/cliSupport.c **** 
 798:../src/cliSupport.c **** 				uart1Print("Min Check:                      ");
 799:../src/cliSupport.c ****                 snprintf(numberString, 16, "%d\n", (uint16_t)eepromConfig.minCheck); uart1Print(num
 800:../src/cliSupport.c **** 
 801:../src/cliSupport.c **** 				uart1Print("Max Check:                      ");
 802:../src/cliSupport.c ****                 snprintf(numberString, 16, "%d\n", (uint16_t)eepromConfig.maxCheck); uart1Print(num
 803:../src/cliSupport.c **** 
 804:../src/cliSupport.c **** 				uart1Print("Min Throttle:                   ");
 805:../src/cliSupport.c ****                 snprintf(numberString, 16, "%d\n", (uint16_t)eepromConfig.minThrottle); uart1Print(
 806:../src/cliSupport.c **** 
 807:../src/cliSupport.c **** 				uart1Print("Max Thottle:                    ");
 808:../src/cliSupport.c ****                 snprintf(numberString, 16, "%d\n\n", (uint16_t)eepromConfig.maxThrottle); uart1Prin
 809:../src/cliSupport.c **** 
 810:../src/cliSupport.c **** 				uart1Print("Max Rate Command:               ");
 811:../src/cliSupport.c **** 				tempFloat = eepromConfig.rateScaling * 180000.0 / PI;
 812:../src/cliSupport.c **** 				snprintf(numberString, 16, "%6.2f DPS\n", tempFloat); uart1Print(numberString);
 813:../src/cliSupport.c **** 
 814:../src/cliSupport.c **** 				uart1Print("Max Attitude Command:           ");
 815:../src/cliSupport.c **** 				tempFloat = eepromConfig.attitudeScaling * 180000.0 / PI;
 816:../src/cliSupport.c **** 				snprintf(numberString, 18, "%6.2f Degrees\n\n", tempFloat); uart1Print(numberString);
 817:../src/cliSupport.c **** 
 818:../src/cliSupport.c **** 				validQuery = false;
 819:../src/cliSupport.c ****                 break;
 820:../src/cliSupport.c **** 
 821:../src/cliSupport.c ****             ///////////////////////////
 822:../src/cliSupport.c **** 
 823:../src/cliSupport.c ****             case 'b': // Read Max Rate Value
 824:../src/cliSupport.c ****                 eepromConfig.rateScaling = readFloatUart1() / 180000 * PI;
 825:../src/cliSupport.c **** 
 826:../src/cliSupport.c ****                 receiverQuery = 'a';
 827:../src/cliSupport.c ****                 validQuery = true;
 828:../src/cliSupport.c ****                 break;
 829:../src/cliSupport.c **** 
 830:../src/cliSupport.c ****             ///////////////////////////
 831:../src/cliSupport.c **** 
 832:../src/cliSupport.c ****             case 'c': // Read Max Attitude Value
 833:../src/cliSupport.c ****                 eepromConfig.attitudeScaling = readFloatUart1() / 180000 * PI;
 834:../src/cliSupport.c **** 
 835:../src/cliSupport.c ****                 receiverQuery = 'a';
 836:../src/cliSupport.c ****                 validQuery = true;
 837:../src/cliSupport.c ****                 break;
 838:../src/cliSupport.c **** 
 839:../src/cliSupport.c ****             ///////////////////////////
 840:../src/cliSupport.c **** 
 841:../src/cliSupport.c **** 			case 'x':
 842:../src/cliSupport.c **** 			    uart1Print("\nExiting Receiver CLI....\n\n");
 843:../src/cliSupport.c **** 			    cliBusy = false;
 844:../src/cliSupport.c **** 			    return;
 845:../src/cliSupport.c **** 			    break;
 846:../src/cliSupport.c **** 
 847:../src/cliSupport.c ****             ///////////////////////////
 848:../src/cliSupport.c **** 
 849:../src/cliSupport.c ****             case 'A': // Read RX Input Type
 850:../src/cliSupport.c ****                 eepromConfig.receiverType = (uint8_t)readFloatUart1();
 851:../src/cliSupport.c **** 			    uart1Print( "\nReceiver Type Changed....\n");
 852:../src/cliSupport.c **** 
 853:../src/cliSupport.c **** 			    uart1Print("\nSystem Resetting....\n");
 854:../src/cliSupport.c **** 			    delay(100);
 855:../src/cliSupport.c **** 			    writeEEPROM();
 856:../src/cliSupport.c **** 			    systemReset(false);
 857:../src/cliSupport.c **** 
 858:../src/cliSupport.c **** 		        break;
 859:../src/cliSupport.c **** 
 860:../src/cliSupport.c ****             ///////////////////////////
 861:../src/cliSupport.c **** 
 862:../src/cliSupport.c ****             case 'B': // Read RC Control Order
 863:../src/cliSupport.c ****                 readStringUart1( rcOrderString, 8 );
 864:../src/cliSupport.c ****                 parseRcChannels( rcOrderString );
 865:../src/cliSupport.c **** 
 866:../src/cliSupport.c ****           	    receiverQuery = 'a';
 867:../src/cliSupport.c ****                 validQuery = true;
 868:../src/cliSupport.c ****         	    break;
 869:../src/cliSupport.c **** 
 870:../src/cliSupport.c ****             ///////////////////////////
 871:../src/cliSupport.c **** 
 872:../src/cliSupport.c ****             case 'C': // Read Spektrum Resolution
 873:../src/cliSupport.c ****                 eepromConfig.spektrumHires = (uint8_t)readFloatUart1();
 874:../src/cliSupport.c **** 
 875:../src/cliSupport.c ****                 receiverQuery = 'a';
 876:../src/cliSupport.c ****                 validQuery = true;
 877:../src/cliSupport.c ****                 break;
 878:../src/cliSupport.c **** 
 879:../src/cliSupport.c ****             ///////////////////////////
 880:../src/cliSupport.c **** 
 881:../src/cliSupport.c ****             case 'D': // Read Number of Spektrum Channels
 882:../src/cliSupport.c ****                 eepromConfig.spektrumChannels = (uint8_t)readFloatUart1();
 883:../src/cliSupport.c **** 
 884:../src/cliSupport.c ****                 receiverQuery = 'a';
 885:../src/cliSupport.c ****                 validQuery = true;
 886:../src/cliSupport.c ****                 break;
 887:../src/cliSupport.c **** 
 888:../src/cliSupport.c ****             ///////////////////////////
 889:../src/cliSupport.c **** 
 890:../src/cliSupport.c ****             case 'E': // Read RC Control Points
 891:../src/cliSupport.c ****                 eepromConfig.midCommand   = readFloatUart1();
 892:../src/cliSupport.c ****     	        eepromConfig.minCheck     = readFloatUart1();
 893:../src/cliSupport.c ****     		    eepromConfig.maxCheck     = readFloatUart1();
 894:../src/cliSupport.c ****     		    eepromConfig.minThrottle  = readFloatUart1();
 895:../src/cliSupport.c ****     		    eepromConfig.maxThrottle  = readFloatUart1();
 896:../src/cliSupport.c **** 
 897:../src/cliSupport.c ****                 receiverQuery = 'a';
 898:../src/cliSupport.c ****                 validQuery = true;
 899:../src/cliSupport.c ****                 break;
 900:../src/cliSupport.c **** 
 901:../src/cliSupport.c ****             ///////////////////////////
 902:../src/cliSupport.c **** 
 903:../src/cliSupport.c ****             case 'W': // Write EEPROM Parameters
 904:../src/cliSupport.c ****                 uart1Print("\nWriting EEPROM Parameters....\n\n");
 905:../src/cliSupport.c ****                 writeEEPROM();
 906:../src/cliSupport.c ****                 break;
 907:../src/cliSupport.c **** 
 908:../src/cliSupport.c **** 			///////////////////////////
 909:../src/cliSupport.c **** 
 910:../src/cliSupport.c **** 			case '?':
 911:../src/cliSupport.c **** 			   	uart1Print("\n");
 912:../src/cliSupport.c **** 			   	uart1Print("'a' Receiver Configuration Data            'A' Set RX Input Type                
 913:../src/cliSupport.c ****    		        uart1Print("'b' Set Maximum Rate Command               'B' Set RC Control Order       
 914:../src/cliSupport.c **** 			   	uart1Print("'c' Set Maximum Attitude Command           'C' Set Spektrum Resolution          
 915:../src/cliSupport.c **** 			   	uart1Print("                                           'D' Set Number of Spektrum Channels  
 916:../src/cliSupport.c **** 			   	uart1Print("                                           'E' Set RC Control Points            
 917:../src/cliSupport.c **** 			   	uart1Print("                                           'W' Write EEPROM Parameters\n");
 918:../src/cliSupport.c **** 			   	uart1Print("'x' Exit Receiver CLI                      '?' Command Summary\n");
 919:../src/cliSupport.c **** 			   	uart1Print("\n");
 920:../src/cliSupport.c **** 	    	    break;
 921:../src/cliSupport.c **** 
 922:../src/cliSupport.c **** 	    	///////////////////////////
 923:../src/cliSupport.c **** 	    }
 924:../src/cliSupport.c **** 	}
 2777              		.loc 1 924 0
 2778 1914 00BF     		nop
 2779              	.L135:
 750:../src/cliSupport.c ****         uart1Print("Receiver CLI -> ");
 2780              		.loc 1 750 0
 2781 1916 40F20000 		movw	r0, #:lower16:.LC109
 2782 191a C0F20000 		movt	r0, #:upper16:.LC109
 2783 191e FFF7FEFF 		bl	uart1Print
 752:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
 2784              		.loc 1 752 0
 2785 1922 00BF     		nop
 2786              	.L112:
 752:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
 2787              		.loc 1 752 0 is_stmt 0 discriminator 1
 2788 1924 FFF7FEFF 		bl	uart1Available
 2789 1928 0346     		mov	r3, r0
 2790 192a 002B     		cmp	r3, #0
 2791 192c 03D1     		bne	.L111
 752:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
 2792              		.loc 1 752 0 discriminator 2
 2793 192e 9DF81D30 		ldrb	r3, [sp, #29]	@ zero_extendqisi2
 2794 1932 002B     		cmp	r3, #0
 2795 1934 F6D0     		beq	.L112
 2796              	.L111:
 754:../src/cliSupport.c **** 		if (validQuery == false)
 2797              		.loc 1 754 0 is_stmt 1
 2798 1936 9DF81D30 		ldrb	r3, [sp, #29]	@ zero_extendqisi2
 2799 193a 002B     		cmp	r3, #0
 2800 193c 04D1     		bne	.L113
 755:../src/cliSupport.c **** 		    receiverQuery = uart1Read();
 2801              		.loc 1 755 0
 2802 193e FFF7FEFF 		bl	uart1Read
 2803 1942 0346     		mov	r3, r0
 2804 1944 8DF81E30 		strb	r3, [sp, #30]
 2805              	.L113:
 757:../src/cliSupport.c **** 		uart1Print("\n");
 2806              		.loc 1 757 0
 2807 1948 40F20000 		movw	r0, #:lower16:.LC2
 2808 194c C0F20000 		movt	r0, #:upper16:.LC2
 2809 1950 FFF7FEFF 		bl	uart1Print
 759:../src/cliSupport.c **** 		switch(receiverQuery)
 2810              		.loc 1 759 0
 2811 1954 9DF81E30 		ldrb	r3, [sp, #30]	@ zero_extendqisi2
 2812 1958 A3F13F03 		sub	r3, r3, #63
 2813 195c 392B     		cmp	r3, #57
 2814 195e D9D8     		bhi	.L136
 2815 1960 01A0     		adr	r0, .L126
 2816 1962 50F823F0 		ldr	pc, [r0, r3, lsl #2]
 2817 1966 00BF     		.align	2
 2818              	.L126:
 2819 1968 CF1F0000 		.word	.L115+1
 2820 196c 15190000 		.word	.L136+1
 2821 1970 7F1E0000 		.word	.L116+1
 2822 1974 CB1E0000 		.word	.L117+1
 2823 1978 F11E0000 		.word	.L118+1
 2824 197c 211F0000 		.word	.L119+1
 2825 1980 511F0000 		.word	.L120+1
 2826 1984 15190000 		.word	.L136+1
 2827 1988 15190000 		.word	.L136+1
 2828 198c 15190000 		.word	.L136+1
 2829 1990 15190000 		.word	.L136+1
 2830 1994 15190000 		.word	.L136+1
 2831 1998 15190000 		.word	.L136+1
 2832 199c 15190000 		.word	.L136+1
 2833 19a0 15190000 		.word	.L136+1
 2834 19a4 15190000 		.word	.L136+1
 2835 19a8 15190000 		.word	.L136+1
 2836 19ac 15190000 		.word	.L136+1
 2837 19b0 15190000 		.word	.L136+1
 2838 19b4 15190000 		.word	.L136+1
 2839 19b8 15190000 		.word	.L136+1
 2840 19bc 15190000 		.word	.L136+1
 2841 19c0 15190000 		.word	.L136+1
 2842 19c4 15190000 		.word	.L136+1
 2843 19c8 BD1F0000 		.word	.L121+1
 2844 19cc 15190000 		.word	.L136+1
 2845 19d0 15190000 		.word	.L136+1
 2846 19d4 15190000 		.word	.L136+1
 2847 19d8 15190000 		.word	.L136+1
 2848 19dc 15190000 		.word	.L136+1
 2849 19e0 15190000 		.word	.L136+1
 2850 19e4 15190000 		.word	.L136+1
 2851 19e8 15190000 		.word	.L136+1
 2852 19ec 15190000 		.word	.L136+1
 2853 19f0 511A0000 		.word	.L122+1
 2854 19f4 F51D0000 		.word	.L123+1
 2855 19f8 2B1E0000 		.word	.L124+1
 2856 19fc 15190000 		.word	.L136+1
 2857 1a00 15190000 		.word	.L136+1
 2858 1a04 15190000 		.word	.L136+1
 2859 1a08 15190000 		.word	.L136+1
 2860 1a0c 15190000 		.word	.L136+1
 2861 1a10 15190000 		.word	.L136+1
 2862 1a14 15190000 		.word	.L136+1
 2863 1a18 15190000 		.word	.L136+1
 2864 1a1c 15190000 		.word	.L136+1
 2865 1a20 15190000 		.word	.L136+1
 2866 1a24 15190000 		.word	.L136+1
 2867 1a28 15190000 		.word	.L136+1
 2868 1a2c 15190000 		.word	.L136+1
 2869 1a30 15190000 		.word	.L136+1
 2870 1a34 15190000 		.word	.L136+1
 2871 1a38 15190000 		.word	.L136+1
 2872 1a3c 15190000 		.word	.L136+1
 2873 1a40 15190000 		.word	.L136+1
 2874 1a44 15190000 		.word	.L136+1
 2875 1a48 15190000 		.word	.L136+1
 2876 1a4c 611E0000 		.word	.L125+1
 2877              	.L122:
 764:../src/cliSupport.c ****                 uart1Print("\nReceiver Type:                  ");
 2878              		.loc 1 764 0
 2879 1a50 40F20000 		movw	r0, #:lower16:.LC110
 2880 1a54 C0F20000 		movt	r0, #:upper16:.LC110
 2881 1a58 FFF7FEFF 		bl	uart1Print
 765:../src/cliSupport.c ****                 switch(eepromConfig.receiverType)
 2882              		.loc 1 765 0
 2883 1a5c 40F20003 		movw	r3, #:lower16:eepromConfig
 2884 1a60 C0F20003 		movt	r3, #:upper16:eepromConfig
 2885 1a64 93F86C30 		ldrb	r3, [r3, #108]	@ zero_extendqisi2
 2886 1a68 022B     		cmp	r3, #2
 2887 1a6a 0AD0     		beq	.L129
 2888 1a6c 032B     		cmp	r3, #3
 2889 1a6e 0FD0     		beq	.L130
 2890 1a70 012B     		cmp	r3, #1
 2891 1a72 14D1     		bne	.L127
 2892              	.L128:
 768:../src/cliSupport.c ****                         uart1Print("Parallel\n");
 2893              		.loc 1 768 0
 2894 1a74 40F20000 		movw	r0, #:lower16:.LC111
 2895 1a78 C0F20000 		movt	r0, #:upper16:.LC111
 2896 1a7c FFF7FEFF 		bl	uart1Print
 769:../src/cliSupport.c ****                         break;
 2897              		.loc 1 769 0
 2898 1a80 0DE0     		b	.L127
 2899              	.L129:
 771:../src/cliSupport.c ****                         uart1Print("Serial\n");
 2900              		.loc 1 771 0
 2901 1a82 40F20000 		movw	r0, #:lower16:.LC112
 2902 1a86 C0F20000 		movt	r0, #:upper16:.LC112
 2903 1a8a FFF7FEFF 		bl	uart1Print
 772:../src/cliSupport.c ****                         break;
 2904              		.loc 1 772 0
 2905 1a8e 06E0     		b	.L127
 2906              	.L130:
 774:../src/cliSupport.c ****                         uart1Print("Spektrum\n");
 2907              		.loc 1 774 0
 2908 1a90 40F20000 		movw	r0, #:lower16:.LC113
 2909 1a94 C0F20000 		movt	r0, #:upper16:.LC113
 2910 1a98 FFF7FEFF 		bl	uart1Print
 775:../src/cliSupport.c ****                         break;
 2911              		.loc 1 775 0
 2912 1a9c 00BF     		nop
 2913              	.L127:
 778:../src/cliSupport.c ****                 uart1Print("Current RC Channel Assignment:  ");
 2914              		.loc 1 778 0
 2915 1a9e 40F20000 		movw	r0, #:lower16:.LC114
 2916 1aa2 C0F20000 		movt	r0, #:upper16:.LC114
 2917 1aa6 FFF7FEFF 		bl	uart1Print
 779:../src/cliSupport.c ****                 for (index = 0; index < 8; index++)
 2918              		.loc 1 779 0
 2919 1aaa 4FF00003 		mov	r3, #0
 2920 1aae 8DF81F30 		strb	r3, [sp, #31]
 2921 1ab2 1AE0     		b	.L131
 2922              	.L132:
 780:../src/cliSupport.c ****                     rcOrderString[eepromConfig.rcMap[index]] = rcChannelLetters[index];
 2923              		.loc 1 780 0 discriminator 2
 2924 1ab4 9DF81F20 		ldrb	r2, [sp, #31]	@ zero_extendqisi2
 2925 1ab8 40F20003 		movw	r3, #:lower16:eepromConfig
 2926 1abc C0F20003 		movt	r3, #:upper16:eepromConfig
 2927 1ac0 9B18     		adds	r3, r3, r2
 2928 1ac2 93F86F30 		ldrb	r3, [r3, #111]	@ zero_extendqisi2
 2929 1ac6 1946     		mov	r1, r3
 2930 1ac8 9DF81F20 		ldrb	r2, [sp, #31]	@ zero_extendqisi2
 2931 1acc 40F20003 		movw	r3, #:lower16:rcChannelLetters
 2932 1ad0 C0F20003 		movt	r3, #:upper16:rcChannelLetters
 2933 1ad4 9A5C     		ldrb	r2, [r3, r2]	@ zero_extendqisi2
 2934 1ad6 08A8     		add	r0, sp, #32
 2935 1ad8 4318     		adds	r3, r0, r1
 2936 1ada 03F8142C 		strb	r2, [r3, #-20]
 779:../src/cliSupport.c ****                 for (index = 0; index < 8; index++)
 2937              		.loc 1 779 0 discriminator 2
 2938 1ade 9DF81F30 		ldrb	r3, [sp, #31]
 2939 1ae2 03F10103 		add	r3, r3, #1
 2940 1ae6 8DF81F30 		strb	r3, [sp, #31]
 2941              	.L131:
 779:../src/cliSupport.c ****                 for (index = 0; index < 8; index++)
 2942              		.loc 1 779 0 is_stmt 0 discriminator 1
 2943 1aea 9DF81F30 		ldrb	r3, [sp, #31]	@ zero_extendqisi2
 2944 1aee 072B     		cmp	r3, #7
 2945 1af0 E0D9     		bls	.L132
 782:../src/cliSupport.c ****                 rcOrderString[index] = '\0';
 2946              		.loc 1 782 0 is_stmt 1
 2947 1af2 9DF81F30 		ldrb	r3, [sp, #31]	@ zero_extendqisi2
 2948 1af6 08AA     		add	r2, sp, #32
 2949 1af8 D318     		adds	r3, r2, r3
 2950 1afa 4FF00002 		mov	r2, #0
 2951 1afe 03F8142C 		strb	r2, [r3, #-20]
 784:../src/cliSupport.c ****                 uart1Print(rcOrderString);  uart1Print("\n");
 2952              		.loc 1 784 0
 2953 1b02 03AB     		add	r3, sp, #12
 2954 1b04 1846     		mov	r0, r3
 2955 1b06 FFF7FEFF 		bl	uart1Print
 2956 1b0a 40F20000 		movw	r0, #:lower16:.LC2
 2957 1b0e C0F20000 		movt	r0, #:upper16:.LC2
 2958 1b12 FFF7FEFF 		bl	uart1Print
 786:../src/cliSupport.c ****                 uart1Print("Spektrum Resolution:            ");
 2959              		.loc 1 786 0
 2960 1b16 40F20000 		movw	r0, #:lower16:.LC115
 2961 1b1a C0F20000 		movt	r0, #:upper16:.LC115
 2962 1b1e FFF7FEFF 		bl	uart1Print
 787:../src/cliSupport.c ****                 if (eepromConfig.spektrumHires)
 2963              		.loc 1 787 0
 2964 1b22 40F20003 		movw	r3, #:lower16:eepromConfig
 2965 1b26 C0F20003 		movt	r3, #:upper16:eepromConfig
 2966 1b2a 93F86E30 		ldrb	r3, [r3, #110]	@ zero_extendqisi2
 2967 1b2e 002B     		cmp	r3, #0
 2968 1b30 06D0     		beq	.L133
 788:../src/cliSupport.c **** 				    uart1Print("11 Bit Mode\n");
 2969              		.loc 1 788 0
 2970 1b32 40F20000 		movw	r0, #:lower16:.LC116
 2971 1b36 C0F20000 		movt	r0, #:upper16:.LC116
 2972 1b3a FFF7FEFF 		bl	uart1Print
 2973 1b3e 05E0     		b	.L134
 2974              	.L133:
 790:../src/cliSupport.c **** 				    uart1Print("10 Bit Mode\n");
 2975              		.loc 1 790 0
 2976 1b40 40F20000 		movw	r0, #:lower16:.LC117
 2977 1b44 C0F20000 		movt	r0, #:upper16:.LC117
 2978 1b48 FFF7FEFF 		bl	uart1Print
 2979              	.L134:
 792:../src/cliSupport.c **** 				uart1Print("Number of Spektrum Channels:    ");
 2980              		.loc 1 792 0
 2981 1b4c 40F20000 		movw	r0, #:lower16:.LC118
 2982 1b50 C0F20000 		movt	r0, #:upper16:.LC118
 2983 1b54 FFF7FEFF 		bl	uart1Print
 793:../src/cliSupport.c **** 				snprintf(numberString, 16, "%d\n", eepromConfig.spektrumChannels); uart1Print(numberString);
 2984              		.loc 1 793 0
 2985 1b58 40F20003 		movw	r3, #:lower16:eepromConfig
 2986 1b5c C0F20003 		movt	r3, #:upper16:eepromConfig
 2987 1b60 93F86D30 		ldrb	r3, [r3, #109]	@ zero_extendqisi2
 2988 1b64 40F20000 		movw	r0, #:lower16:numberString
 2989 1b68 C0F20000 		movt	r0, #:upper16:numberString
 2990 1b6c 4FF01001 		mov	r1, #16
 2991 1b70 40F20002 		movw	r2, #:lower16:.LC119
 2992 1b74 C0F20002 		movt	r2, #:upper16:.LC119
 2993 1b78 FFF7FEFF 		bl	snprintf
 2994 1b7c 40F20000 		movw	r0, #:lower16:numberString
 2995 1b80 C0F20000 		movt	r0, #:upper16:numberString
 2996 1b84 FFF7FEFF 		bl	uart1Print
 795:../src/cliSupport.c ****                 uart1Print("Mid Command:                    ");
 2997              		.loc 1 795 0
 2998 1b88 40F20000 		movw	r0, #:lower16:.LC120
 2999 1b8c C0F20000 		movt	r0, #:upper16:.LC120
 3000 1b90 FFF7FEFF 		bl	uart1Print
 796:../src/cliSupport.c ****                 snprintf(numberString, 16, "%d\n", (uint16_t)eepromConfig.midCommand); uart1Print(n
 3001              		.loc 1 796 0
 3002 1b94 40F20003 		movw	r3, #:lower16:eepromConfig
 3003 1b98 C0F20003 		movt	r3, #:upper16:eepromConfig
 3004 1b9c D3ED217A 		flds	s15, [r3, #132]
 3005 1ba0 FCEEE77A 		ftouizs	s15, s15
 3006 1ba4 17EE903A 		fmrs	r3, s15	@ int
 3007 1ba8 9BB2     		uxth	r3, r3
 3008 1baa 40F20000 		movw	r0, #:lower16:numberString
 3009 1bae C0F20000 		movt	r0, #:upper16:numberString
 3010 1bb2 4FF01001 		mov	r1, #16
 3011 1bb6 40F20002 		movw	r2, #:lower16:.LC119
 3012 1bba C0F20002 		movt	r2, #:upper16:.LC119
 3013 1bbe FFF7FEFF 		bl	snprintf
 3014 1bc2 40F20000 		movw	r0, #:lower16:numberString
 3015 1bc6 C0F20000 		movt	r0, #:upper16:numberString
 3016 1bca FFF7FEFF 		bl	uart1Print
 798:../src/cliSupport.c **** 				uart1Print("Min Check:                      ");
 3017              		.loc 1 798 0
 3018 1bce 40F20000 		movw	r0, #:lower16:.LC121
 3019 1bd2 C0F20000 		movt	r0, #:upper16:.LC121
 3020 1bd6 FFF7FEFF 		bl	uart1Print
 799:../src/cliSupport.c ****                 snprintf(numberString, 16, "%d\n", (uint16_t)eepromConfig.minCheck); uart1Print(num
 3021              		.loc 1 799 0
 3022 1bda 40F20003 		movw	r3, #:lower16:eepromConfig
 3023 1bde C0F20003 		movt	r3, #:upper16:eepromConfig
 3024 1be2 D3ED227A 		flds	s15, [r3, #136]
 3025 1be6 FCEEE77A 		ftouizs	s15, s15
 3026 1bea 17EE903A 		fmrs	r3, s15	@ int
 3027 1bee 9BB2     		uxth	r3, r3
 3028 1bf0 40F20000 		movw	r0, #:lower16:numberString
 3029 1bf4 C0F20000 		movt	r0, #:upper16:numberString
 3030 1bf8 4FF01001 		mov	r1, #16
 3031 1bfc 40F20002 		movw	r2, #:lower16:.LC119
 3032 1c00 C0F20002 		movt	r2, #:upper16:.LC119
 3033 1c04 FFF7FEFF 		bl	snprintf
 3034 1c08 40F20000 		movw	r0, #:lower16:numberString
 3035 1c0c C0F20000 		movt	r0, #:upper16:numberString
 3036 1c10 FFF7FEFF 		bl	uart1Print
 801:../src/cliSupport.c **** 				uart1Print("Max Check:                      ");
 3037              		.loc 1 801 0
 3038 1c14 40F20000 		movw	r0, #:lower16:.LC122
 3039 1c18 C0F20000 		movt	r0, #:upper16:.LC122
 3040 1c1c FFF7FEFF 		bl	uart1Print
 802:../src/cliSupport.c ****                 snprintf(numberString, 16, "%d\n", (uint16_t)eepromConfig.maxCheck); uart1Print(num
 3041              		.loc 1 802 0
 3042 1c20 40F20003 		movw	r3, #:lower16:eepromConfig
 3043 1c24 C0F20003 		movt	r3, #:upper16:eepromConfig
 3044 1c28 D3ED237A 		flds	s15, [r3, #140]
 3045 1c2c FCEEE77A 		ftouizs	s15, s15
 3046 1c30 17EE903A 		fmrs	r3, s15	@ int
 3047 1c34 9BB2     		uxth	r3, r3
 3048 1c36 40F20000 		movw	r0, #:lower16:numberString
 3049 1c3a C0F20000 		movt	r0, #:upper16:numberString
 3050 1c3e 4FF01001 		mov	r1, #16
 3051 1c42 40F20002 		movw	r2, #:lower16:.LC119
 3052 1c46 C0F20002 		movt	r2, #:upper16:.LC119
 3053 1c4a FFF7FEFF 		bl	snprintf
 3054 1c4e 40F20000 		movw	r0, #:lower16:numberString
 3055 1c52 C0F20000 		movt	r0, #:upper16:numberString
 3056 1c56 FFF7FEFF 		bl	uart1Print
 804:../src/cliSupport.c **** 				uart1Print("Min Throttle:                   ");
 3057              		.loc 1 804 0
 3058 1c5a 40F20000 		movw	r0, #:lower16:.LC123
 3059 1c5e C0F20000 		movt	r0, #:upper16:.LC123
 3060 1c62 FFF7FEFF 		bl	uart1Print
 805:../src/cliSupport.c ****                 snprintf(numberString, 16, "%d\n", (uint16_t)eepromConfig.minThrottle); uart1Print(
 3061              		.loc 1 805 0
 3062 1c66 40F20003 		movw	r3, #:lower16:eepromConfig
 3063 1c6a C0F20003 		movt	r3, #:upper16:eepromConfig
 3064 1c6e D3ED247A 		flds	s15, [r3, #144]
 3065 1c72 FCEEE77A 		ftouizs	s15, s15
 3066 1c76 17EE903A 		fmrs	r3, s15	@ int
 3067 1c7a 9BB2     		uxth	r3, r3
 3068 1c7c 40F20000 		movw	r0, #:lower16:numberString
 3069 1c80 C0F20000 		movt	r0, #:upper16:numberString
 3070 1c84 4FF01001 		mov	r1, #16
 3071 1c88 40F20002 		movw	r2, #:lower16:.LC119
 3072 1c8c C0F20002 		movt	r2, #:upper16:.LC119
 3073 1c90 FFF7FEFF 		bl	snprintf
 3074 1c94 40F20000 		movw	r0, #:lower16:numberString
 3075 1c98 C0F20000 		movt	r0, #:upper16:numberString
 3076 1c9c FFF7FEFF 		bl	uart1Print
 807:../src/cliSupport.c **** 				uart1Print("Max Thottle:                    ");
 3077              		.loc 1 807 0
 3078 1ca0 40F20000 		movw	r0, #:lower16:.LC124
 3079 1ca4 C0F20000 		movt	r0, #:upper16:.LC124
 3080 1ca8 FFF7FEFF 		bl	uart1Print
 808:../src/cliSupport.c ****                 snprintf(numberString, 16, "%d\n\n", (uint16_t)eepromConfig.maxThrottle); uart1Prin
 3081              		.loc 1 808 0
 3082 1cac 40F20003 		movw	r3, #:lower16:eepromConfig
 3083 1cb0 C0F20003 		movt	r3, #:upper16:eepromConfig
 3084 1cb4 D3ED257A 		flds	s15, [r3, #148]
 3085 1cb8 FCEEE77A 		ftouizs	s15, s15
 3086 1cbc 17EE903A 		fmrs	r3, s15	@ int
 3087 1cc0 9BB2     		uxth	r3, r3
 3088 1cc2 40F20000 		movw	r0, #:lower16:numberString
 3089 1cc6 C0F20000 		movt	r0, #:upper16:numberString
 3090 1cca 4FF01001 		mov	r1, #16
 3091 1cce 40F20002 		movw	r2, #:lower16:.LC125
 3092 1cd2 C0F20002 		movt	r2, #:upper16:.LC125
 3093 1cd6 FFF7FEFF 		bl	snprintf
 3094 1cda 40F20000 		movw	r0, #:lower16:numberString
 3095 1cde C0F20000 		movt	r0, #:upper16:numberString
 3096 1ce2 FFF7FEFF 		bl	uart1Print
 810:../src/cliSupport.c **** 				uart1Print("Max Rate Command:               ");
 3097              		.loc 1 810 0
 3098 1ce6 40F20000 		movw	r0, #:lower16:.LC126
 3099 1cea C0F20000 		movt	r0, #:upper16:.LC126
 3100 1cee FFF7FEFF 		bl	uart1Print
 811:../src/cliSupport.c **** 				tempFloat = eepromConfig.rateScaling * 180000.0 / PI;
 3101              		.loc 1 811 0
 3102 1cf2 40F20003 		movw	r3, #:lower16:eepromConfig
 3103 1cf6 C0F20003 		movt	r3, #:upper16:eepromConfig
 3104 1cfa DB6D     		ldr	r3, [r3, #92]	@ float
 3105 1cfc 1846     		mov	r0, r3	@ float
 3106 1cfe FFF7FEFF 		bl	__aeabi_f2d
 3107 1d02 0246     		mov	r2, r0
 3108 1d04 0B46     		mov	r3, r1
 3109 1d06 1046     		mov	r0, r2
 3110 1d08 1946     		mov	r1, r3
 3111 1d0a CFA3     		adr	r3, .L137+8
 3112 1d0c D3E90023 		ldrd	r2, [r3]
 3113 1d10 FFF7FEFF 		bl	__aeabi_dmul
 3114 1d14 0246     		mov	r2, r0
 3115 1d16 0B46     		mov	r3, r1
 3116 1d18 1046     		mov	r0, r2
 3117 1d1a 1946     		mov	r1, r3
 3118 1d1c CCA3     		adr	r3, .L137+16
 3119 1d1e D3E90023 		ldrd	r2, [r3]
 3120 1d22 FFF7FEFF 		bl	__aeabi_ddiv
 3121 1d26 0246     		mov	r2, r0
 3122 1d28 0B46     		mov	r3, r1
 3123 1d2a 1046     		mov	r0, r2
 3124 1d2c 1946     		mov	r1, r3
 3125 1d2e FFF7FEFF 		bl	__aeabi_d2f
 3126 1d32 0346     		mov	r3, r0	@ float
 3127 1d34 0693     		str	r3, [sp, #24]	@ float
 812:../src/cliSupport.c **** 				snprintf(numberString, 16, "%6.2f DPS\n", tempFloat); uart1Print(numberString);
 3128              		.loc 1 812 0
 3129 1d36 0698     		ldr	r0, [sp, #24]	@ float
 3130 1d38 FFF7FEFF 		bl	__aeabi_f2d
 3131 1d3c 0246     		mov	r2, r0
 3132 1d3e 0B46     		mov	r3, r1
 3133 1d40 CDE90023 		strd	r2, [sp]
 3134 1d44 40F20000 		movw	r0, #:lower16:numberString
 3135 1d48 C0F20000 		movt	r0, #:upper16:numberString
 3136 1d4c 4FF01001 		mov	r1, #16
 3137 1d50 40F20002 		movw	r2, #:lower16:.LC127
 3138 1d54 C0F20002 		movt	r2, #:upper16:.LC127
 3139 1d58 FFF7FEFF 		bl	snprintf
 3140 1d5c 40F20000 		movw	r0, #:lower16:numberString
 3141 1d60 C0F20000 		movt	r0, #:upper16:numberString
 3142 1d64 FFF7FEFF 		bl	uart1Print
 814:../src/cliSupport.c **** 				uart1Print("Max Attitude Command:           ");
 3143              		.loc 1 814 0
 3144 1d68 40F20000 		movw	r0, #:lower16:.LC128
 3145 1d6c C0F20000 		movt	r0, #:upper16:.LC128
 3146 1d70 FFF7FEFF 		bl	uart1Print
 815:../src/cliSupport.c **** 				tempFloat = eepromConfig.attitudeScaling * 180000.0 / PI;
 3147              		.loc 1 815 0
 3148 1d74 40F20003 		movw	r3, #:lower16:eepromConfig
 3149 1d78 C0F20003 		movt	r3, #:upper16:eepromConfig
 3150 1d7c 1B6E     		ldr	r3, [r3, #96]	@ float
 3151 1d7e 1846     		mov	r0, r3	@ float
 3152 1d80 FFF7FEFF 		bl	__aeabi_f2d
 3153 1d84 0246     		mov	r2, r0
 3154 1d86 0B46     		mov	r3, r1
 3155 1d88 1046     		mov	r0, r2
 3156 1d8a 1946     		mov	r1, r3
 3157 1d8c AEA3     		adr	r3, .L137+8
 3158 1d8e D3E90023 		ldrd	r2, [r3]
 3159 1d92 FFF7FEFF 		bl	__aeabi_dmul
 3160 1d96 0246     		mov	r2, r0
 3161 1d98 0B46     		mov	r3, r1
 3162 1d9a 1046     		mov	r0, r2
 3163 1d9c 1946     		mov	r1, r3
 3164 1d9e ACA3     		adr	r3, .L137+16
 3165 1da0 D3E90023 		ldrd	r2, [r3]
 3166 1da4 FFF7FEFF 		bl	__aeabi_ddiv
 3167 1da8 0246     		mov	r2, r0
 3168 1daa 0B46     		mov	r3, r1
 3169 1dac 1046     		mov	r0, r2
 3170 1dae 1946     		mov	r1, r3
 3171 1db0 FFF7FEFF 		bl	__aeabi_d2f
 3172 1db4 0346     		mov	r3, r0	@ float
 3173 1db6 0693     		str	r3, [sp, #24]	@ float
 816:../src/cliSupport.c **** 				snprintf(numberString, 18, "%6.2f Degrees\n\n", tempFloat); uart1Print(numberString);
 3174              		.loc 1 816 0
 3175 1db8 0698     		ldr	r0, [sp, #24]	@ float
 3176 1dba FFF7FEFF 		bl	__aeabi_f2d
 3177 1dbe 0246     		mov	r2, r0
 3178 1dc0 0B46     		mov	r3, r1
 3179 1dc2 CDE90023 		strd	r2, [sp]
 3180 1dc6 40F20000 		movw	r0, #:lower16:numberString
 3181 1dca C0F20000 		movt	r0, #:upper16:numberString
 3182 1dce 4FF01201 		mov	r1, #18
 3183 1dd2 40F20002 		movw	r2, #:lower16:.LC129
 3184 1dd6 C0F20002 		movt	r2, #:upper16:.LC129
 3185 1dda FFF7FEFF 		bl	snprintf
 3186 1dde 40F20000 		movw	r0, #:lower16:numberString
 3187 1de2 C0F20000 		movt	r0, #:upper16:numberString
 3188 1de6 FFF7FEFF 		bl	uart1Print
 818:../src/cliSupport.c **** 				validQuery = false;
 3189              		.loc 1 818 0
 3190 1dea 4FF00003 		mov	r3, #0
 3191 1dee 8DF81D30 		strb	r3, [sp, #29]
 819:../src/cliSupport.c ****                 break;
 3192              		.loc 1 819 0
 3193 1df2 23E1     		b	.L114
 3194              	.L123:
 824:../src/cliSupport.c ****                 eepromConfig.rateScaling = readFloatUart1() / 180000 * PI;
 3195              		.loc 1 824 0
 3196 1df4 FFF7FEFF 		bl	readFloatUart1
 3197 1df8 07EE100A 		fmsr	s14, r0
 3198 1dfc DFED907A 		flds	s15, .L137
 3199 1e00 C7EE277A 		fdivs	s15, s14, s15
 3200 1e04 9FED8F7A 		flds	s14, .L137+4
 3201 1e08 67EE877A 		fmuls	s15, s15, s14
 3202 1e0c 40F20003 		movw	r3, #:lower16:eepromConfig
 3203 1e10 C0F20003 		movt	r3, #:upper16:eepromConfig
 3204 1e14 C3ED177A 		fsts	s15, [r3, #92]
 826:../src/cliSupport.c ****                 receiverQuery = 'a';
 3205              		.loc 1 826 0
 3206 1e18 4FF06103 		mov	r3, #97
 3207 1e1c 8DF81E30 		strb	r3, [sp, #30]
 827:../src/cliSupport.c ****                 validQuery = true;
 3208              		.loc 1 827 0
 3209 1e20 4FF00103 		mov	r3, #1
 3210 1e24 8DF81D30 		strb	r3, [sp, #29]
 828:../src/cliSupport.c ****                 break;
 3211              		.loc 1 828 0
 3212 1e28 08E1     		b	.L114
 3213              	.L124:
 833:../src/cliSupport.c ****                 eepromConfig.attitudeScaling = readFloatUart1() / 180000 * PI;
 3214              		.loc 1 833 0
 3215 1e2a FFF7FEFF 		bl	readFloatUart1
 3216 1e2e 07EE100A 		fmsr	s14, r0
 3217 1e32 DFED837A 		flds	s15, .L137
 3218 1e36 C7EE277A 		fdivs	s15, s14, s15
 3219 1e3a 9FED827A 		flds	s14, .L137+4
 3220 1e3e 67EE877A 		fmuls	s15, s15, s14
 3221 1e42 40F20003 		movw	r3, #:lower16:eepromConfig
 3222 1e46 C0F20003 		movt	r3, #:upper16:eepromConfig
 3223 1e4a C3ED187A 		fsts	s15, [r3, #96]
 835:../src/cliSupport.c ****                 receiverQuery = 'a';
 3224              		.loc 1 835 0
 3225 1e4e 4FF06103 		mov	r3, #97
 3226 1e52 8DF81E30 		strb	r3, [sp, #30]
 836:../src/cliSupport.c ****                 validQuery = true;
 3227              		.loc 1 836 0
 3228 1e56 4FF00103 		mov	r3, #1
 3229 1e5a 8DF81D30 		strb	r3, [sp, #29]
 837:../src/cliSupport.c ****                 break;
 3230              		.loc 1 837 0
 3231 1e5e EDE0     		b	.L114
 3232              	.L125:
 842:../src/cliSupport.c **** 			    uart1Print("\nExiting Receiver CLI....\n\n");
 3233              		.loc 1 842 0
 3234 1e60 40F20000 		movw	r0, #:lower16:.LC130
 3235 1e64 C0F20000 		movt	r0, #:upper16:.LC130
 3236 1e68 FFF7FEFF 		bl	uart1Print
 843:../src/cliSupport.c **** 			    cliBusy = false;
 3237              		.loc 1 843 0
 3238 1e6c 40F20003 		movw	r3, #:lower16:cliBusy
 3239 1e70 C0F20003 		movt	r3, #:upper16:cliBusy
 3240 1e74 4FF00002 		mov	r2, #0
 3241 1e78 1A70     		strb	r2, [r3, #0]
 925:../src/cliSupport.c **** 
 926:../src/cliSupport.c **** }
 3242              		.loc 1 926 0
 3243 1e7a 09B0     		add	sp, sp, #36
 3244 1e7c 00BD     		pop	{pc}
 3245              	.L116:
 850:../src/cliSupport.c ****                 eepromConfig.receiverType = (uint8_t)readFloatUart1();
 3246              		.loc 1 850 0
 3247 1e7e FFF7FEFF 		bl	readFloatUart1
 3248 1e82 07EE900A 		fmsr	s15, r0
 3249 1e86 FCEEE77A 		ftouizs	s15, s15
 3250 1e8a 17EE903A 		fmrs	r3, s15	@ int
 3251 1e8e DAB2     		uxtb	r2, r3
 3252 1e90 40F20003 		movw	r3, #:lower16:eepromConfig
 3253 1e94 C0F20003 		movt	r3, #:upper16:eepromConfig
 3254 1e98 83F86C20 		strb	r2, [r3, #108]
 851:../src/cliSupport.c **** 			    uart1Print( "\nReceiver Type Changed....\n");
 3255              		.loc 1 851 0
 3256 1e9c 40F20000 		movw	r0, #:lower16:.LC131
 3257 1ea0 C0F20000 		movt	r0, #:upper16:.LC131
 3258 1ea4 FFF7FEFF 		bl	uart1Print
 853:../src/cliSupport.c **** 			    uart1Print("\nSystem Resetting....\n");
 3259              		.loc 1 853 0
 3260 1ea8 40F20000 		movw	r0, #:lower16:.LC132
 3261 1eac C0F20000 		movt	r0, #:upper16:.LC132
 3262 1eb0 FFF7FEFF 		bl	uart1Print
 854:../src/cliSupport.c **** 			    delay(100);
 3263              		.loc 1 854 0
 3264 1eb4 4FF06400 		mov	r0, #100
 3265 1eb8 FFF7FEFF 		bl	delay
 855:../src/cliSupport.c **** 			    writeEEPROM();
 3266              		.loc 1 855 0
 3267 1ebc FFF7FEFF 		bl	writeEEPROM
 856:../src/cliSupport.c **** 			    systemReset(false);
 3268              		.loc 1 856 0
 3269 1ec0 4FF00000 		mov	r0, #0
 3270 1ec4 FFF7FEFF 		bl	systemReset
 858:../src/cliSupport.c **** 		        break;
 3271              		.loc 1 858 0
 3272 1ec8 B8E0     		b	.L114
 3273              	.L117:
 863:../src/cliSupport.c ****                 readStringUart1( rcOrderString, 8 );
 3274              		.loc 1 863 0
 3275 1eca 03AB     		add	r3, sp, #12
 3276 1ecc 1846     		mov	r0, r3
 3277 1ece 4FF00801 		mov	r1, #8
 3278 1ed2 FFF7FEFF 		bl	readStringUart1
 864:../src/cliSupport.c ****                 parseRcChannels( rcOrderString );
 3279              		.loc 1 864 0
 3280 1ed6 03AB     		add	r3, sp, #12
 3281 1ed8 1846     		mov	r0, r3
 3282 1eda FFF7FEFF 		bl	parseRcChannels
 866:../src/cliSupport.c ****           	    receiverQuery = 'a';
 3283              		.loc 1 866 0
 3284 1ede 4FF06103 		mov	r3, #97
 3285 1ee2 8DF81E30 		strb	r3, [sp, #30]
 867:../src/cliSupport.c ****                 validQuery = true;
 3286              		.loc 1 867 0
 3287 1ee6 4FF00103 		mov	r3, #1
 3288 1eea 8DF81D30 		strb	r3, [sp, #29]
 868:../src/cliSupport.c ****         	    break;
 3289              		.loc 1 868 0
 3290 1eee A5E0     		b	.L114
 3291              	.L118:
 873:../src/cliSupport.c ****                 eepromConfig.spektrumHires = (uint8_t)readFloatUart1();
 3292              		.loc 1 873 0
 3293 1ef0 FFF7FEFF 		bl	readFloatUart1
 3294 1ef4 07EE900A 		fmsr	s15, r0
 3295 1ef8 FCEEE77A 		ftouizs	s15, s15
 3296 1efc 17EE903A 		fmrs	r3, s15	@ int
 3297 1f00 DAB2     		uxtb	r2, r3
 3298 1f02 40F20003 		movw	r3, #:lower16:eepromConfig
 3299 1f06 C0F20003 		movt	r3, #:upper16:eepromConfig
 3300 1f0a 83F86E20 		strb	r2, [r3, #110]
 875:../src/cliSupport.c ****                 receiverQuery = 'a';
 3301              		.loc 1 875 0
 3302 1f0e 4FF06103 		mov	r3, #97
 3303 1f12 8DF81E30 		strb	r3, [sp, #30]
 876:../src/cliSupport.c ****                 validQuery = true;
 3304              		.loc 1 876 0
 3305 1f16 4FF00103 		mov	r3, #1
 3306 1f1a 8DF81D30 		strb	r3, [sp, #29]
 877:../src/cliSupport.c ****                 break;
 3307              		.loc 1 877 0
 3308 1f1e 8DE0     		b	.L114
 3309              	.L119:
 882:../src/cliSupport.c ****                 eepromConfig.spektrumChannels = (uint8_t)readFloatUart1();
 3310              		.loc 1 882 0
 3311 1f20 FFF7FEFF 		bl	readFloatUart1
 3312 1f24 07EE900A 		fmsr	s15, r0
 3313 1f28 FCEEE77A 		ftouizs	s15, s15
 3314 1f2c 17EE903A 		fmrs	r3, s15	@ int
 3315 1f30 DAB2     		uxtb	r2, r3
 3316 1f32 40F20003 		movw	r3, #:lower16:eepromConfig
 3317 1f36 C0F20003 		movt	r3, #:upper16:eepromConfig
 3318 1f3a 83F86D20 		strb	r2, [r3, #109]
 884:../src/cliSupport.c ****                 receiverQuery = 'a';
 3319              		.loc 1 884 0
 3320 1f3e 4FF06103 		mov	r3, #97
 3321 1f42 8DF81E30 		strb	r3, [sp, #30]
 885:../src/cliSupport.c ****                 validQuery = true;
 3322              		.loc 1 885 0
 3323 1f46 4FF00103 		mov	r3, #1
 3324 1f4a 8DF81D30 		strb	r3, [sp, #29]
 886:../src/cliSupport.c ****                 break;
 3325              		.loc 1 886 0
 3326 1f4e 75E0     		b	.L114
 3327              	.L120:
 891:../src/cliSupport.c ****                 eepromConfig.midCommand   = readFloatUart1();
 3328              		.loc 1 891 0
 3329 1f50 FFF7FEFF 		bl	readFloatUart1
 3330 1f54 0246     		mov	r2, r0	@ float
 3331 1f56 40F20003 		movw	r3, #:lower16:eepromConfig
 3332 1f5a C0F20003 		movt	r3, #:upper16:eepromConfig
 3333 1f5e C3F88420 		str	r2, [r3, #132]	@ float
 892:../src/cliSupport.c ****     	        eepromConfig.minCheck     = readFloatUart1();
 3334              		.loc 1 892 0
 3335 1f62 FFF7FEFF 		bl	readFloatUart1
 3336 1f66 0246     		mov	r2, r0	@ float
 3337 1f68 40F20003 		movw	r3, #:lower16:eepromConfig
 3338 1f6c C0F20003 		movt	r3, #:upper16:eepromConfig
 3339 1f70 C3F88820 		str	r2, [r3, #136]	@ float
 893:../src/cliSupport.c ****     		    eepromConfig.maxCheck     = readFloatUart1();
 3340              		.loc 1 893 0
 3341 1f74 FFF7FEFF 		bl	readFloatUart1
 3342 1f78 0246     		mov	r2, r0	@ float
 3343 1f7a 40F20003 		movw	r3, #:lower16:eepromConfig
 3344 1f7e C0F20003 		movt	r3, #:upper16:eepromConfig
 3345 1f82 C3F88C20 		str	r2, [r3, #140]	@ float
 894:../src/cliSupport.c ****     		    eepromConfig.minThrottle  = readFloatUart1();
 3346              		.loc 1 894 0
 3347 1f86 FFF7FEFF 		bl	readFloatUart1
 3348 1f8a 0246     		mov	r2, r0	@ float
 3349 1f8c 40F20003 		movw	r3, #:lower16:eepromConfig
 3350 1f90 C0F20003 		movt	r3, #:upper16:eepromConfig
 3351 1f94 C3F89020 		str	r2, [r3, #144]	@ float
 895:../src/cliSupport.c ****     		    eepromConfig.maxThrottle  = readFloatUart1();
 3352              		.loc 1 895 0
 3353 1f98 FFF7FEFF 		bl	readFloatUart1
 3354 1f9c 0246     		mov	r2, r0	@ float
 3355 1f9e 40F20003 		movw	r3, #:lower16:eepromConfig
 3356 1fa2 C0F20003 		movt	r3, #:upper16:eepromConfig
 3357 1fa6 C3F89420 		str	r2, [r3, #148]	@ float
 897:../src/cliSupport.c ****                 receiverQuery = 'a';
 3358              		.loc 1 897 0
 3359 1faa 4FF06103 		mov	r3, #97
 3360 1fae 8DF81E30 		strb	r3, [sp, #30]
 898:../src/cliSupport.c ****                 validQuery = true;
 3361              		.loc 1 898 0
 3362 1fb2 4FF00103 		mov	r3, #1
 3363 1fb6 8DF81D30 		strb	r3, [sp, #29]
 899:../src/cliSupport.c ****                 break;
 3364              		.loc 1 899 0
 3365 1fba 3FE0     		b	.L114
 3366              	.L121:
 904:../src/cliSupport.c ****                 uart1Print("\nWriting EEPROM Parameters....\n\n");
 3367              		.loc 1 904 0
 3368 1fbc 40F20000 		movw	r0, #:lower16:.LC21
 3369 1fc0 C0F20000 		movt	r0, #:upper16:.LC21
 3370 1fc4 FFF7FEFF 		bl	uart1Print
 905:../src/cliSupport.c ****                 writeEEPROM();
 3371              		.loc 1 905 0
 3372 1fc8 FFF7FEFF 		bl	writeEEPROM
 906:../src/cliSupport.c ****                 break;
 3373              		.loc 1 906 0
 3374 1fcc 36E0     		b	.L114
 3375              	.L115:
 911:../src/cliSupport.c **** 			   	uart1Print("\n");
 3376              		.loc 1 911 0
 3377 1fce 40F20000 		movw	r0, #:lower16:.LC2
 3378 1fd2 C0F20000 		movt	r0, #:upper16:.LC2
 3379 1fd6 FFF7FEFF 		bl	uart1Print
 912:../src/cliSupport.c **** 			   	uart1Print("'a' Receiver Configuration Data            'A' Set RX Input Type                
 3380              		.loc 1 912 0
 3381 1fda 40F20000 		movw	r0, #:lower16:.LC133
 3382 1fde C0F20000 		movt	r0, #:upper16:.LC133
 3383 1fe2 FFF7FEFF 		bl	uart1Print
 913:../src/cliSupport.c ****    		        uart1Print("'b' Set Maximum Rate Command               'B' Set RC Control Order       
 3384              		.loc 1 913 0
 3385 1fe6 40F20000 		movw	r0, #:lower16:.LC134
 3386 1fea C0F20000 		movt	r0, #:upper16:.LC134
 3387 1fee FFF7FEFF 		bl	uart1Print
 914:../src/cliSupport.c **** 			   	uart1Print("'c' Set Maximum Attitude Command           'C' Set Spektrum Resolution          
 3388              		.loc 1 914 0
 3389 1ff2 40F20000 		movw	r0, #:lower16:.LC135
 3390 1ff6 C0F20000 		movt	r0, #:upper16:.LC135
 3391 1ffa FFF7FEFF 		bl	uart1Print
 915:../src/cliSupport.c **** 			   	uart1Print("                                           'D' Set Number of Spektrum Channels  
 3392              		.loc 1 915 0
 3393 1ffe 40F20000 		movw	r0, #:lower16:.LC136
 3394 2002 C0F20000 		movt	r0, #:upper16:.LC136
 3395 2006 FFF7FEFF 		bl	uart1Print
 916:../src/cliSupport.c **** 			   	uart1Print("                                           'E' Set RC Control Points            
 3396              		.loc 1 916 0
 3397 200a 40F20000 		movw	r0, #:lower16:.LC137
 3398 200e C0F20000 		movt	r0, #:upper16:.LC137
 3399 2012 FFF7FEFF 		bl	uart1Print
 917:../src/cliSupport.c **** 			   	uart1Print("                                           'W' Write EEPROM Parameters\n");
 3400              		.loc 1 917 0
 3401 2016 40F20000 		movw	r0, #:lower16:.LC107
 3402 201a C0F20000 		movt	r0, #:upper16:.LC107
 3403 201e FFF7FEFF 		bl	uart1Print
 918:../src/cliSupport.c **** 			   	uart1Print("'x' Exit Receiver CLI                      '?' Command Summary\n");
 3404              		.loc 1 918 0
 3405 2022 40F20000 		movw	r0, #:lower16:.LC138
 3406 2026 C0F20000 		movt	r0, #:upper16:.LC138
 3407 202a FFF7FEFF 		bl	uart1Print
 919:../src/cliSupport.c **** 			   	uart1Print("\n");
 3408              		.loc 1 919 0
 3409 202e 40F20000 		movw	r0, #:lower16:.LC2
 3410 2032 C0F20000 		movt	r0, #:upper16:.LC2
 3411 2036 FFF7FEFF 		bl	uart1Print
 920:../src/cliSupport.c **** 	    	    break;
 3412              		.loc 1 920 0
 3413 203a 00BF     		nop
 3414              	.L114:
 924:../src/cliSupport.c **** 	}
 3415              		.loc 1 924 0
 3416 203c 6AE4     		b	.L136
 3417              	.L138:
 3418 203e 00BF     		.align	3
 3419              	.L137:
 3420 2040 00C82F48 		.word	1211090944
 3421 2044 DB0F4940 		.word	1078530011
 3422 2048 00000000 		.word	0
 3423 204c 00F90541 		.word	1090910464
 3424 2050 00000060 		.word	1610612736
 3425 2054 FB210940 		.word	1074340347
 3426              		.cfi_endproc
 3427              	.LFE113:
 3429              		.section	.rodata
 3430              		.align	2
 3431              	.LC139:
 3432 15e4 0A456E74 		.ascii	"\012Entering Sensor CLI....\012\012\000"
 3432      6572696E 
 3432      67205365 
 3432      6E736F72 
 3432      20434C49 
 3433 15ff 00       		.align	2
 3434              	.LC140:
 3435 1600 53656E73 		.ascii	"Sensor CLI -> \000"
 3435      6F722043 
 3435      4C49202D 
 3435      3E2000
 3436 160f 00       		.align	2
 3437              	.LC141:
 3438 1610 41636365 		.ascii	"Accel One G:               \000"
 3438      6C204F6E 
 3438      6520473A 
 3438      20202020 
 3438      20202020 
 3439              		.align	2
 3440              	.LC142:
 3441 162c 25392E34 		.ascii	"%9.4f\012\000"
 3441      660A00
 3442 1633 00       		.align	2
 3443              	.LC143:
 3444 1634 4D616720 		.ascii	"Mag Bias:                  \000"
 3444      42696173 
 3444      3A202020 
 3444      20202020 
 3444      20202020 
 3445              		.align	2
 3446              	.LC144:
 3447 1650 25392E34 		.ascii	"%9.4f, \000"
 3447      662C2000 
 3448              		.align	2
 3449              	.LC145:
 3450 1658 41636365 		.ascii	"Accel Cutoff:              \000"
 3450      6C204375 
 3450      746F6666 
 3450      3A202020 
 3450      20202020 
 3451              		.align	2
 3452              	.LC146:
 3453 1674 4B704163 		.ascii	"KpAcc (MARG):              \000"
 3453      6320284D 
 3453      41524729 
 3453      3A202020 
 3453      20202020 
 3454              		.align	2
 3455              	.LC147:
 3456 1690 4B694163 		.ascii	"KiAcc (MARG):              \000"
 3456      6320284D 
 3456      41524729 
 3456      3A202020 
 3456      20202020 
 3457              		.align	2
 3458              	.LC148:
 3459 16ac 4B704D61 		.ascii	"KpMag (MARG):              \000"
 3459      6720284D 
 3459      41524729 
 3459      3A202020 
 3459      20202020 
 3460              		.align	2
 3461              	.LC149:
 3462 16c8 4B694D61 		.ascii	"KiMag (MARG):              \000"
 3462      6720284D 
 3462      41524729 
 3462      3A202020 
 3462      20202020 
 3463              		.align	2
 3464              	.LC150:
 3465 16e4 68646F74 		.ascii	"hdot est/h est Comp Fil A: \000"
 3465      20657374 
 3465      2F682065 
 3465      73742043 
 3465      6F6D7020 
 3466              		.align	2
 3467              	.LC151:
 3468 1700 68646F74 		.ascii	"hdot est/h est Comp Fil B: \000"
 3468      20657374 
 3468      2F682065 
 3468      73742043 
 3468      6F6D7020 
 3469              		.align	2
 3470              	.LC152:
 3471 171c 25392E34 		.ascii	"%9.4f\012\012\000"
 3471      660A0A00 
 3472              		.align	2
 3473              	.LC153:
 3474 1724 0A457869 		.ascii	"\012Exiting Sensor CLI....\012\012\000"
 3474      74696E67 
 3474      2053656E 
 3474      736F7220 
 3474      434C492E 
 3475 173e 0000     		.align	2
 3476              	.LC154:
 3477 1740 27612720 		.ascii	"'a' Display Sensor Data\012\000"
 3477      44697370 
 3477      6C617920 
 3477      53656E73 
 3477      6F722044 
 3478 1759 000000   		.align	2
 3479              	.LC155:
 3480 175c 27622720 		.ascii	"'b' Accel Calibration                      'B' Set "
 3480      41636365 
 3480      6C204361 
 3480      6C696272 
 3480      6174696F 
 3481 178f 41636365 		.ascii	"Accel Cutoff                     BAccelCutoff\012\000"
 3481      6C204375 
 3481      746F6666 
 3481      20202020 
 3481      20202020 
 3482 17be 0000     		.align	2
 3483              	.LC156:
 3484 17c0 27632720 		.ascii	"'c' Magnetometer Calibration               'C' Set "
 3484      4D61676E 
 3484      65746F6D 
 3484      65746572 
 3484      2043616C 
 3485 17f3 6B704163 		.ascii	"kpAcc/kiAcc                      CKpAcc;KiAcc\012\000"
 3485      632F6B69 
 3485      41636320 
 3485      20202020 
 3485      20202020 
 3486 1822 0000     		.align	2
 3487              	.LC157:
 3488 1824 20202020 		.ascii	"                                           'D' Set "
 3488      20202020 
 3488      20202020 
 3488      20202020 
 3488      20202020 
 3489 1857 6B704D61 		.ascii	"kpMag/kiMag                      DKpMag;KiMag\012\000"
 3489      672F6B69 
 3489      4D616720 
 3489      20202020 
 3489      20202020 
 3490 1886 0000     		.align	2
 3491              	.LC158:
 3492 1888 20202020 		.ascii	"                                           'E' Set "
 3492      20202020 
 3492      20202020 
 3492      20202020 
 3492      20202020 
 3493 18bb 6820646F 		.ascii	"h dot est/h est Comp Filter A/B  EA;B\012\000"
 3493      74206573 
 3493      742F6820 
 3493      65737420 
 3493      436F6D70 
 3494              		.text
 3495              		.align	2
 3496              		.global	sensorCLI
 3497              		.thumb
 3498              		.thumb_func
 3500              	sensorCLI:
 3501              	.LFB114:
 927:../src/cliSupport.c **** 
 928:../src/cliSupport.c **** ///////////////////////////////////////////////////////////////////////////////
 929:../src/cliSupport.c **** // Sensor CLI
 930:../src/cliSupport.c **** ///////////////////////////////////////////////////////////////////////////////
 931:../src/cliSupport.c **** 
 932:../src/cliSupport.c **** void sensorCLI()
 933:../src/cliSupport.c **** {
 3502              		.loc 1 933 0
 3503              		.cfi_startproc
 3504              		@ args = 0, pretend = 0, frame = 8
 3505              		@ frame_needed = 0, uses_anonymous_args = 0
 3506 2058 00B5     		push	{lr}
 3507              	.LCFI6:
 3508              		.cfi_def_cfa_offset 4
 3509              		.cfi_offset 14, -4
 3510 205a 85B0     		sub	sp, sp, #20
 3511              	.LCFI7:
 3512              		.cfi_def_cfa_offset 24
 934:../src/cliSupport.c ****     uint8_t  sensorQuery;
 935:../src/cliSupport.c ****     // HJI uint8_t  tempInt;
 936:../src/cliSupport.c ****     uint8_t  validQuery = false;
 3513              		.loc 1 936 0
 3514 205c 4FF00003 		mov	r3, #0
 3515 2060 8DF80E30 		strb	r3, [sp, #14]
 937:../src/cliSupport.c **** 
 938:../src/cliSupport.c ****     cliBusy = true;
 3516              		.loc 1 938 0
 3517 2064 40F20003 		movw	r3, #:lower16:cliBusy
 3518 2068 C0F20003 		movt	r3, #:upper16:cliBusy
 3519 206c 4FF00102 		mov	r2, #1
 3520 2070 1A70     		strb	r2, [r3, #0]
 939:../src/cliSupport.c **** 
 940:../src/cliSupport.c ****     uart1Print("\nEntering Sensor CLI....\n\n");
 3521              		.loc 1 940 0
 3522 2072 40F20000 		movw	r0, #:lower16:.LC139
 3523 2076 C0F20000 		movt	r0, #:upper16:.LC139
 3524 207a FFF7FEFF 		bl	uart1Print
 3525 207e 00E0     		b	.L155
 3526              	.L156:
 941:../src/cliSupport.c **** 
 942:../src/cliSupport.c ****     while(true)
 943:../src/cliSupport.c ****     {
 944:../src/cliSupport.c ****         uart1Print("Sensor CLI -> ");
 945:../src/cliSupport.c **** 
 946:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
 947:../src/cliSupport.c **** 
 948:../src/cliSupport.c **** 		if (validQuery == false)
 949:../src/cliSupport.c **** 		    sensorQuery = uart1Read();
 950:../src/cliSupport.c **** 
 951:../src/cliSupport.c **** 		uart1Print("\n");
 952:../src/cliSupport.c **** 
 953:../src/cliSupport.c **** 		switch(sensorQuery)
 954:../src/cliSupport.c **** 		{
 955:../src/cliSupport.c ****             ///////////////////////////
 956:../src/cliSupport.c **** 
 957:../src/cliSupport.c ****             case 'a': // Sensor Data
 958:../src/cliSupport.c ****                 uart1Print("\n");
 959:../src/cliSupport.c **** 
 960:../src/cliSupport.c ****                 uart1Print("Accel One G:               ");
 961:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f\n", accelOneG); uart1Print(numberString);
 962:../src/cliSupport.c **** 
 963:../src/cliSupport.c ****                 uart1Print("Mag Bias:                  ");
 964:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f, ", eepromConfig.magBias[XAXIS]); uart1Print(numb
 965:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f, ", eepromConfig.magBias[YAXIS]); uart1Print(numb
 966:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f\n", eepromConfig.magBias[ZAXIS]); uart1Print(numb
 967:../src/cliSupport.c **** 
 968:../src/cliSupport.c ****                 uart1Print("Accel Cutoff:              ");
 969:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f\n", eepromConfig.accelCutoff); uart1Print(numberS
 970:../src/cliSupport.c **** 
 971:../src/cliSupport.c ****                 uart1Print("KpAcc (MARG):              ");
 972:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f\n", eepromConfig.KpAcc); uart1Print(numberString)
 973:../src/cliSupport.c **** 
 974:../src/cliSupport.c ****                 uart1Print("KiAcc (MARG):              ");
 975:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f\n", eepromConfig.KiAcc); uart1Print(numberString)
 976:../src/cliSupport.c **** 
 977:../src/cliSupport.c ****                 uart1Print("KpMag (MARG):              ");
 978:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f\n", eepromConfig.KpMag); uart1Print(numberString)
 979:../src/cliSupport.c **** 
 980:../src/cliSupport.c ****                 uart1Print("KiMag (MARG):              ");
 981:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f\n", eepromConfig.KiMag); uart1Print(numberString)
 982:../src/cliSupport.c **** 
 983:../src/cliSupport.c ****                 uart1Print("hdot est/h est Comp Fil A: ");
 984:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f\n", eepromConfig.compFilterA); uart1Print(numberS
 985:../src/cliSupport.c **** 
 986:../src/cliSupport.c ****                 uart1Print("hdot est/h est Comp Fil B: ");
 987:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f\n\n", eepromConfig.compFilterB); uart1Print(numbe
 988:../src/cliSupport.c **** 
 989:../src/cliSupport.c ****                 validQuery = false;
 990:../src/cliSupport.c ****                 break;
 991:../src/cliSupport.c **** 
 992:../src/cliSupport.c ****             ///////////////////////////
 993:../src/cliSupport.c **** 
 994:../src/cliSupport.c ****             case 'b': // Accel Calibration
 995:../src/cliSupport.c ****                 accelCalibration();
 996:../src/cliSupport.c **** 
 997:../src/cliSupport.c ****                 sensorQuery = 'a';
 998:../src/cliSupport.c ****                 validQuery = true;
 999:../src/cliSupport.c ****                 break;
1000:../src/cliSupport.c **** 
1001:../src/cliSupport.c ****             ///////////////////////////
1002:../src/cliSupport.c **** 
1003:../src/cliSupport.c ****             case 'c': // Magnetometer Calibration
1004:../src/cliSupport.c ****                 magCalibration();
1005:../src/cliSupport.c **** 
1006:../src/cliSupport.c ****                 sensorQuery = 'a';
1007:../src/cliSupport.c ****                 validQuery = true;
1008:../src/cliSupport.c ****                 break;
1009:../src/cliSupport.c **** 
1010:../src/cliSupport.c **** 			///////////////////////////
1011:../src/cliSupport.c **** 
1012:../src/cliSupport.c **** 			case 'x':
1013:../src/cliSupport.c **** 			    uart1Print("\nExiting Sensor CLI....\n\n");
1014:../src/cliSupport.c **** 			    cliBusy = false;
1015:../src/cliSupport.c **** 			    return;
1016:../src/cliSupport.c **** 			    break;
1017:../src/cliSupport.c **** 
1018:../src/cliSupport.c ****             ///////////////////////////
1019:../src/cliSupport.c **** 
1020:../src/cliSupport.c ****             case 'B': // Accel Cutoff
1021:../src/cliSupport.c ****                 eepromConfig.accelCutoff = readFloatUart1();
1022:../src/cliSupport.c **** 
1023:../src/cliSupport.c ****                 sensorQuery = 'a';
1024:../src/cliSupport.c ****                 validQuery = true;
1025:../src/cliSupport.c ****         	    break;
1026:../src/cliSupport.c **** 
1027:../src/cliSupport.c ****             ///////////////////////////
1028:../src/cliSupport.c **** 
1029:../src/cliSupport.c ****             case 'C': // kpAcc, kiAcc
1030:../src/cliSupport.c ****                 eepromConfig.KpAcc = readFloatUart1();
1031:../src/cliSupport.c ****                 eepromConfig.KiAcc = readFloatUart1();
1032:../src/cliSupport.c **** 
1033:../src/cliSupport.c ****                 sensorQuery = 'a';
1034:../src/cliSupport.c ****                 validQuery = true;
1035:../src/cliSupport.c ****                 break;
1036:../src/cliSupport.c **** 
1037:../src/cliSupport.c ****             ///////////////////////////
1038:../src/cliSupport.c **** 
1039:../src/cliSupport.c ****             case 'D': // kpMag, kiMag
1040:../src/cliSupport.c ****                 eepromConfig.KpMag = readFloatUart1();
1041:../src/cliSupport.c ****                 eepromConfig.KiMag = readFloatUart1();
1042:../src/cliSupport.c **** 
1043:../src/cliSupport.c ****                 sensorQuery = 'a';
1044:../src/cliSupport.c ****                 validQuery = true;
1045:../src/cliSupport.c ****                 break;
1046:../src/cliSupport.c **** 
1047:../src/cliSupport.c ****             ///////////////////////////
1048:../src/cliSupport.c **** 
1049:../src/cliSupport.c ****             case 'E': // h dot est/h est Comp Filter A/B
1050:../src/cliSupport.c ****                 eepromConfig.compFilterA = readFloatUart1();
1051:../src/cliSupport.c ****                 eepromConfig.compFilterB = readFloatUart1();
1052:../src/cliSupport.c **** 
1053:../src/cliSupport.c ****                 sensorQuery = 'a';
1054:../src/cliSupport.c ****                 validQuery = true;
1055:../src/cliSupport.c ****                 break;
1056:../src/cliSupport.c **** 
1057:../src/cliSupport.c ****             ///////////////////////////
1058:../src/cliSupport.c **** 
1059:../src/cliSupport.c ****             case 'W': // Write EEPROM Parameters
1060:../src/cliSupport.c ****                 uart1Print("\nWriting EEPROM Parameters....\n\n");
1061:../src/cliSupport.c ****                 writeEEPROM();
1062:../src/cliSupport.c ****                 break;
1063:../src/cliSupport.c **** 
1064:../src/cliSupport.c **** 			///////////////////////////
1065:../src/cliSupport.c **** 
1066:../src/cliSupport.c **** 			case '?':
1067:../src/cliSupport.c **** 			   	uart1Print("\n");
1068:../src/cliSupport.c **** 			   	uart1Print("'a' Display Sensor Data\n");
1069:../src/cliSupport.c **** 			   	uart1Print("'b' Accel Calibration                      'B' Set Accel Cutoff                 
1070:../src/cliSupport.c **** 			   	uart1Print("'c' Magnetometer Calibration               'C' Set kpAcc/kiAcc                  
1071:../src/cliSupport.c **** 			   	uart1Print("                                           'D' Set kpMag/kiMag                  
1072:../src/cliSupport.c **** 			   	uart1Print("                                           'E' Set h dot est/h est Comp Filter A
1073:../src/cliSupport.c **** 			   	uart1Print("                                           'W' Write EEPROM Parameters\n");
1074:../src/cliSupport.c **** 			   	uart1Print("'x' Exit Sensor CLI                        '?' Command Summary\n");
1075:../src/cliSupport.c **** 			    uart1Print("\n");
1076:../src/cliSupport.c **** 	    	    break;
1077:../src/cliSupport.c **** 
1078:../src/cliSupport.c **** 	    	///////////////////////////
1079:../src/cliSupport.c **** 	    }
1080:../src/cliSupport.c **** 	}
 3527              		.loc 1 1080 0
 3528 2080 00BF     		nop
 3529              	.L155:
 944:../src/cliSupport.c ****         uart1Print("Sensor CLI -> ");
 3530              		.loc 1 944 0
 3531 2082 40F20000 		movw	r0, #:lower16:.LC140
 3532 2086 C0F20000 		movt	r0, #:upper16:.LC140
 3533 208a FFF7FEFF 		bl	uart1Print
 946:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
 3534              		.loc 1 946 0
 3535 208e 00BF     		nop
 3536              	.L141:
 946:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
 3537              		.loc 1 946 0 is_stmt 0 discriminator 1
 3538 2090 FFF7FEFF 		bl	uart1Available
 3539 2094 0346     		mov	r3, r0
 3540 2096 002B     		cmp	r3, #0
 3541 2098 03D1     		bne	.L140
 946:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
 3542              		.loc 1 946 0 discriminator 2
 3543 209a 9DF80E30 		ldrb	r3, [sp, #14]	@ zero_extendqisi2
 3544 209e 002B     		cmp	r3, #0
 3545 20a0 F6D0     		beq	.L141
 3546              	.L140:
 948:../src/cliSupport.c **** 		if (validQuery == false)
 3547              		.loc 1 948 0 is_stmt 1
 3548 20a2 9DF80E30 		ldrb	r3, [sp, #14]	@ zero_extendqisi2
 3549 20a6 002B     		cmp	r3, #0
 3550 20a8 04D1     		bne	.L142
 949:../src/cliSupport.c **** 		    sensorQuery = uart1Read();
 3551              		.loc 1 949 0
 3552 20aa FFF7FEFF 		bl	uart1Read
 3553 20ae 0346     		mov	r3, r0
 3554 20b0 8DF80F30 		strb	r3, [sp, #15]
 3555              	.L142:
 951:../src/cliSupport.c **** 		uart1Print("\n");
 3556              		.loc 1 951 0
 3557 20b4 40F20000 		movw	r0, #:lower16:.LC2
 3558 20b8 C0F20000 		movt	r0, #:upper16:.LC2
 3559 20bc FFF7FEFF 		bl	uart1Print
 953:../src/cliSupport.c **** 		switch(sensorQuery)
 3560              		.loc 1 953 0
 3561 20c0 9DF80F30 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 3562 20c4 A3F13F03 		sub	r3, r3, #63
 3563 20c8 392B     		cmp	r3, #57
 3564 20ca D9D8     		bhi	.L156
 3565 20cc 01A2     		adr	r2, .L154
 3566 20ce 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3567 20d2 00BF     		.align	2
 3568              	.L154:
 3569 20d4 E7250000 		.word	.L144+1
 3570 20d8 81200000 		.word	.L156+1
 3571 20dc 81200000 		.word	.L156+1
 3572 20e0 1D250000 		.word	.L145+1
 3573 20e4 3F250000 		.word	.L146+1
 3574 20e8 71250000 		.word	.L147+1
 3575 20ec A3250000 		.word	.L148+1
 3576 20f0 81200000 		.word	.L156+1
 3577 20f4 81200000 		.word	.L156+1
 3578 20f8 81200000 		.word	.L156+1
 3579 20fc 81200000 		.word	.L156+1
 3580 2100 81200000 		.word	.L156+1
 3581 2104 81200000 		.word	.L156+1
 3582 2108 81200000 		.word	.L156+1
 3583 210c 81200000 		.word	.L156+1
 3584 2110 81200000 		.word	.L156+1
 3585 2114 81200000 		.word	.L156+1
 3586 2118 81200000 		.word	.L156+1
 3587 211c 81200000 		.word	.L156+1
 3588 2120 81200000 		.word	.L156+1
 3589 2124 81200000 		.word	.L156+1
 3590 2128 81200000 		.word	.L156+1
 3591 212c 81200000 		.word	.L156+1
 3592 2130 81200000 		.word	.L156+1
 3593 2134 D5250000 		.word	.L149+1
 3594 2138 81200000 		.word	.L156+1
 3595 213c 81200000 		.word	.L156+1
 3596 2140 81200000 		.word	.L156+1
 3597 2144 81200000 		.word	.L156+1
 3598 2148 81200000 		.word	.L156+1
 3599 214c 81200000 		.word	.L156+1
 3600 2150 81200000 		.word	.L156+1
 3601 2154 81200000 		.word	.L156+1
 3602 2158 81200000 		.word	.L156+1
 3603 215c BD210000 		.word	.L150+1
 3604 2160 D3240000 		.word	.L151+1
 3605 2164 E9240000 		.word	.L152+1
 3606 2168 81200000 		.word	.L156+1
 3607 216c 81200000 		.word	.L156+1
 3608 2170 81200000 		.word	.L156+1
 3609 2174 81200000 		.word	.L156+1
 3610 2178 81200000 		.word	.L156+1
 3611 217c 81200000 		.word	.L156+1
 3612 2180 81200000 		.word	.L156+1
 3613 2184 81200000 		.word	.L156+1
 3614 2188 81200000 		.word	.L156+1
 3615 218c 81200000 		.word	.L156+1
 3616 2190 81200000 		.word	.L156+1
 3617 2194 81200000 		.word	.L156+1
 3618 2198 81200000 		.word	.L156+1
 3619 219c 81200000 		.word	.L156+1
 3620 21a0 81200000 		.word	.L156+1
 3621 21a4 81200000 		.word	.L156+1
 3622 21a8 81200000 		.word	.L156+1
 3623 21ac 81200000 		.word	.L156+1
 3624 21b0 81200000 		.word	.L156+1
 3625 21b4 81200000 		.word	.L156+1
 3626 21b8 FF240000 		.word	.L153+1
 3627              	.L150:
 958:../src/cliSupport.c ****                 uart1Print("\n");
 3628              		.loc 1 958 0
 3629 21bc 40F20000 		movw	r0, #:lower16:.LC2
 3630 21c0 C0F20000 		movt	r0, #:upper16:.LC2
 3631 21c4 FFF7FEFF 		bl	uart1Print
 960:../src/cliSupport.c ****                 uart1Print("Accel One G:               ");
 3632              		.loc 1 960 0
 3633 21c8 40F20000 		movw	r0, #:lower16:.LC141
 3634 21cc C0F20000 		movt	r0, #:upper16:.LC141
 3635 21d0 FFF7FEFF 		bl	uart1Print
 961:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f\n", accelOneG); uart1Print(numberString);
 3636              		.loc 1 961 0
 3637 21d4 40F20003 		movw	r3, #:lower16:accelOneG
 3638 21d8 C0F20003 		movt	r3, #:upper16:accelOneG
 3639 21dc 1B68     		ldr	r3, [r3, #0]	@ float
 3640 21de 1846     		mov	r0, r3	@ float
 3641 21e0 FFF7FEFF 		bl	__aeabi_f2d
 3642 21e4 0246     		mov	r2, r0
 3643 21e6 0B46     		mov	r3, r1
 3644 21e8 CDE90023 		strd	r2, [sp]
 3645 21ec 40F20000 		movw	r0, #:lower16:numberString
 3646 21f0 C0F20000 		movt	r0, #:upper16:numberString
 3647 21f4 4FF01001 		mov	r1, #16
 3648 21f8 40F20002 		movw	r2, #:lower16:.LC142
 3649 21fc C0F20002 		movt	r2, #:upper16:.LC142
 3650 2200 FFF7FEFF 		bl	snprintf
 3651 2204 40F20000 		movw	r0, #:lower16:numberString
 3652 2208 C0F20000 		movt	r0, #:upper16:numberString
 3653 220c FFF7FEFF 		bl	uart1Print
 963:../src/cliSupport.c ****                 uart1Print("Mag Bias:                  ");
 3654              		.loc 1 963 0
 3655 2210 40F20000 		movw	r0, #:lower16:.LC143
 3656 2214 C0F20000 		movt	r0, #:upper16:.LC143
 3657 2218 FFF7FEFF 		bl	uart1Print
 964:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f, ", eepromConfig.magBias[XAXIS]); uart1Print(numb
 3658              		.loc 1 964 0
 3659 221c 40F20003 		movw	r3, #:lower16:eepromConfig
 3660 2220 C0F20003 		movt	r3, #:upper16:eepromConfig
 3661 2224 5B6B     		ldr	r3, [r3, #52]	@ float
 3662 2226 1846     		mov	r0, r3	@ float
 3663 2228 FFF7FEFF 		bl	__aeabi_f2d
 3664 222c 0246     		mov	r2, r0
 3665 222e 0B46     		mov	r3, r1
 3666 2230 CDE90023 		strd	r2, [sp]
 3667 2234 40F20000 		movw	r0, #:lower16:numberString
 3668 2238 C0F20000 		movt	r0, #:upper16:numberString
 3669 223c 4FF01001 		mov	r1, #16
 3670 2240 40F20002 		movw	r2, #:lower16:.LC144
 3671 2244 C0F20002 		movt	r2, #:upper16:.LC144
 3672 2248 FFF7FEFF 		bl	snprintf
 3673 224c 40F20000 		movw	r0, #:lower16:numberString
 3674 2250 C0F20000 		movt	r0, #:upper16:numberString
 3675 2254 FFF7FEFF 		bl	uart1Print
 965:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f, ", eepromConfig.magBias[YAXIS]); uart1Print(numb
 3676              		.loc 1 965 0
 3677 2258 40F20003 		movw	r3, #:lower16:eepromConfig
 3678 225c C0F20003 		movt	r3, #:upper16:eepromConfig
 3679 2260 9B6B     		ldr	r3, [r3, #56]	@ float
 3680 2262 1846     		mov	r0, r3	@ float
 3681 2264 FFF7FEFF 		bl	__aeabi_f2d
 3682 2268 0246     		mov	r2, r0
 3683 226a 0B46     		mov	r3, r1
 3684 226c CDE90023 		strd	r2, [sp]
 3685 2270 40F20000 		movw	r0, #:lower16:numberString
 3686 2274 C0F20000 		movt	r0, #:upper16:numberString
 3687 2278 4FF01001 		mov	r1, #16
 3688 227c 40F20002 		movw	r2, #:lower16:.LC144
 3689 2280 C0F20002 		movt	r2, #:upper16:.LC144
 3690 2284 FFF7FEFF 		bl	snprintf
 3691 2288 40F20000 		movw	r0, #:lower16:numberString
 3692 228c C0F20000 		movt	r0, #:upper16:numberString
 3693 2290 FFF7FEFF 		bl	uart1Print
 966:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f\n", eepromConfig.magBias[ZAXIS]); uart1Print(numb
 3694              		.loc 1 966 0
 3695 2294 40F20003 		movw	r3, #:lower16:eepromConfig
 3696 2298 C0F20003 		movt	r3, #:upper16:eepromConfig
 3697 229c DB6B     		ldr	r3, [r3, #60]	@ float
 3698 229e 1846     		mov	r0, r3	@ float
 3699 22a0 FFF7FEFF 		bl	__aeabi_f2d
 3700 22a4 0246     		mov	r2, r0
 3701 22a6 0B46     		mov	r3, r1
 3702 22a8 CDE90023 		strd	r2, [sp]
 3703 22ac 40F20000 		movw	r0, #:lower16:numberString
 3704 22b0 C0F20000 		movt	r0, #:upper16:numberString
 3705 22b4 4FF01001 		mov	r1, #16
 3706 22b8 40F20002 		movw	r2, #:lower16:.LC142
 3707 22bc C0F20002 		movt	r2, #:upper16:.LC142
 3708 22c0 FFF7FEFF 		bl	snprintf
 3709 22c4 40F20000 		movw	r0, #:lower16:numberString
 3710 22c8 C0F20000 		movt	r0, #:upper16:numberString
 3711 22cc FFF7FEFF 		bl	uart1Print
 968:../src/cliSupport.c ****                 uart1Print("Accel Cutoff:              ");
 3712              		.loc 1 968 0
 3713 22d0 40F20000 		movw	r0, #:lower16:.LC145
 3714 22d4 C0F20000 		movt	r0, #:upper16:.LC145
 3715 22d8 FFF7FEFF 		bl	uart1Print
 969:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f\n", eepromConfig.accelCutoff); uart1Print(numberS
 3716              		.loc 1 969 0
 3717 22dc 40F20003 		movw	r3, #:lower16:eepromConfig
 3718 22e0 C0F20003 		movt	r3, #:upper16:eepromConfig
 3719 22e4 1B6C     		ldr	r3, [r3, #64]	@ float
 3720 22e6 1846     		mov	r0, r3	@ float
 3721 22e8 FFF7FEFF 		bl	__aeabi_f2d
 3722 22ec 0246     		mov	r2, r0
 3723 22ee 0B46     		mov	r3, r1
 3724 22f0 CDE90023 		strd	r2, [sp]
 3725 22f4 40F20000 		movw	r0, #:lower16:numberString
 3726 22f8 C0F20000 		movt	r0, #:upper16:numberString
 3727 22fc 4FF01001 		mov	r1, #16
 3728 2300 40F20002 		movw	r2, #:lower16:.LC142
 3729 2304 C0F20002 		movt	r2, #:upper16:.LC142
 3730 2308 FFF7FEFF 		bl	snprintf
 3731 230c 40F20000 		movw	r0, #:lower16:numberString
 3732 2310 C0F20000 		movt	r0, #:upper16:numberString
 3733 2314 FFF7FEFF 		bl	uart1Print
 971:../src/cliSupport.c ****                 uart1Print("KpAcc (MARG):              ");
 3734              		.loc 1 971 0
 3735 2318 40F20000 		movw	r0, #:lower16:.LC146
 3736 231c C0F20000 		movt	r0, #:upper16:.LC146
 3737 2320 FFF7FEFF 		bl	uart1Print
 972:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f\n", eepromConfig.KpAcc); uart1Print(numberString)
 3738              		.loc 1 972 0
 3739 2324 40F20003 		movw	r3, #:lower16:eepromConfig
 3740 2328 C0F20003 		movt	r3, #:upper16:eepromConfig
 3741 232c 5B6C     		ldr	r3, [r3, #68]	@ float
 3742 232e 1846     		mov	r0, r3	@ float
 3743 2330 FFF7FEFF 		bl	__aeabi_f2d
 3744 2334 0246     		mov	r2, r0
 3745 2336 0B46     		mov	r3, r1
 3746 2338 CDE90023 		strd	r2, [sp]
 3747 233c 40F20000 		movw	r0, #:lower16:numberString
 3748 2340 C0F20000 		movt	r0, #:upper16:numberString
 3749 2344 4FF01001 		mov	r1, #16
 3750 2348 40F20002 		movw	r2, #:lower16:.LC142
 3751 234c C0F20002 		movt	r2, #:upper16:.LC142
 3752 2350 FFF7FEFF 		bl	snprintf
 3753 2354 40F20000 		movw	r0, #:lower16:numberString
 3754 2358 C0F20000 		movt	r0, #:upper16:numberString
 3755 235c FFF7FEFF 		bl	uart1Print
 974:../src/cliSupport.c ****                 uart1Print("KiAcc (MARG):              ");
 3756              		.loc 1 974 0
 3757 2360 40F20000 		movw	r0, #:lower16:.LC147
 3758 2364 C0F20000 		movt	r0, #:upper16:.LC147
 3759 2368 FFF7FEFF 		bl	uart1Print
 975:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f\n", eepromConfig.KiAcc); uart1Print(numberString)
 3760              		.loc 1 975 0
 3761 236c 40F20003 		movw	r3, #:lower16:eepromConfig
 3762 2370 C0F20003 		movt	r3, #:upper16:eepromConfig
 3763 2374 9B6C     		ldr	r3, [r3, #72]	@ float
 3764 2376 1846     		mov	r0, r3	@ float
 3765 2378 FFF7FEFF 		bl	__aeabi_f2d
 3766 237c 0246     		mov	r2, r0
 3767 237e 0B46     		mov	r3, r1
 3768 2380 CDE90023 		strd	r2, [sp]
 3769 2384 40F20000 		movw	r0, #:lower16:numberString
 3770 2388 C0F20000 		movt	r0, #:upper16:numberString
 3771 238c 4FF01001 		mov	r1, #16
 3772 2390 40F20002 		movw	r2, #:lower16:.LC142
 3773 2394 C0F20002 		movt	r2, #:upper16:.LC142
 3774 2398 FFF7FEFF 		bl	snprintf
 3775 239c 40F20000 		movw	r0, #:lower16:numberString
 3776 23a0 C0F20000 		movt	r0, #:upper16:numberString
 3777 23a4 FFF7FEFF 		bl	uart1Print
 977:../src/cliSupport.c ****                 uart1Print("KpMag (MARG):              ");
 3778              		.loc 1 977 0
 3779 23a8 40F20000 		movw	r0, #:lower16:.LC148
 3780 23ac C0F20000 		movt	r0, #:upper16:.LC148
 3781 23b0 FFF7FEFF 		bl	uart1Print
 978:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f\n", eepromConfig.KpMag); uart1Print(numberString)
 3782              		.loc 1 978 0
 3783 23b4 40F20003 		movw	r3, #:lower16:eepromConfig
 3784 23b8 C0F20003 		movt	r3, #:upper16:eepromConfig
 3785 23bc DB6C     		ldr	r3, [r3, #76]	@ float
 3786 23be 1846     		mov	r0, r3	@ float
 3787 23c0 FFF7FEFF 		bl	__aeabi_f2d
 3788 23c4 0246     		mov	r2, r0
 3789 23c6 0B46     		mov	r3, r1
 3790 23c8 CDE90023 		strd	r2, [sp]
 3791 23cc 40F20000 		movw	r0, #:lower16:numberString
 3792 23d0 C0F20000 		movt	r0, #:upper16:numberString
 3793 23d4 4FF01001 		mov	r1, #16
 3794 23d8 40F20002 		movw	r2, #:lower16:.LC142
 3795 23dc C0F20002 		movt	r2, #:upper16:.LC142
 3796 23e0 FFF7FEFF 		bl	snprintf
 3797 23e4 40F20000 		movw	r0, #:lower16:numberString
 3798 23e8 C0F20000 		movt	r0, #:upper16:numberString
 3799 23ec FFF7FEFF 		bl	uart1Print
 980:../src/cliSupport.c ****                 uart1Print("KiMag (MARG):              ");
 3800              		.loc 1 980 0
 3801 23f0 40F20000 		movw	r0, #:lower16:.LC149
 3802 23f4 C0F20000 		movt	r0, #:upper16:.LC149
 3803 23f8 FFF7FEFF 		bl	uart1Print
 981:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f\n", eepromConfig.KiMag); uart1Print(numberString)
 3804              		.loc 1 981 0
 3805 23fc 40F20003 		movw	r3, #:lower16:eepromConfig
 3806 2400 C0F20003 		movt	r3, #:upper16:eepromConfig
 3807 2404 1B6D     		ldr	r3, [r3, #80]	@ float
 3808 2406 1846     		mov	r0, r3	@ float
 3809 2408 FFF7FEFF 		bl	__aeabi_f2d
 3810 240c 0246     		mov	r2, r0
 3811 240e 0B46     		mov	r3, r1
 3812 2410 CDE90023 		strd	r2, [sp]
 3813 2414 40F20000 		movw	r0, #:lower16:numberString
 3814 2418 C0F20000 		movt	r0, #:upper16:numberString
 3815 241c 4FF01001 		mov	r1, #16
 3816 2420 40F20002 		movw	r2, #:lower16:.LC142
 3817 2424 C0F20002 		movt	r2, #:upper16:.LC142
 3818 2428 FFF7FEFF 		bl	snprintf
 3819 242c 40F20000 		movw	r0, #:lower16:numberString
 3820 2430 C0F20000 		movt	r0, #:upper16:numberString
 3821 2434 FFF7FEFF 		bl	uart1Print
 983:../src/cliSupport.c ****                 uart1Print("hdot est/h est Comp Fil A: ");
 3822              		.loc 1 983 0
 3823 2438 40F20000 		movw	r0, #:lower16:.LC150
 3824 243c C0F20000 		movt	r0, #:upper16:.LC150
 3825 2440 FFF7FEFF 		bl	uart1Print
 984:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f\n", eepromConfig.compFilterA); uart1Print(numberS
 3826              		.loc 1 984 0
 3827 2444 40F20003 		movw	r3, #:lower16:eepromConfig
 3828 2448 C0F20003 		movt	r3, #:upper16:eepromConfig
 3829 244c 5B6D     		ldr	r3, [r3, #84]	@ float
 3830 244e 1846     		mov	r0, r3	@ float
 3831 2450 FFF7FEFF 		bl	__aeabi_f2d
 3832 2454 0246     		mov	r2, r0
 3833 2456 0B46     		mov	r3, r1
 3834 2458 CDE90023 		strd	r2, [sp]
 3835 245c 40F20000 		movw	r0, #:lower16:numberString
 3836 2460 C0F20000 		movt	r0, #:upper16:numberString
 3837 2464 4FF01001 		mov	r1, #16
 3838 2468 40F20002 		movw	r2, #:lower16:.LC142
 3839 246c C0F20002 		movt	r2, #:upper16:.LC142
 3840 2470 FFF7FEFF 		bl	snprintf
 3841 2474 40F20000 		movw	r0, #:lower16:numberString
 3842 2478 C0F20000 		movt	r0, #:upper16:numberString
 3843 247c FFF7FEFF 		bl	uart1Print
 986:../src/cliSupport.c ****                 uart1Print("hdot est/h est Comp Fil B: ");
 3844              		.loc 1 986 0
 3845 2480 40F20000 		movw	r0, #:lower16:.LC151
 3846 2484 C0F20000 		movt	r0, #:upper16:.LC151
 3847 2488 FFF7FEFF 		bl	uart1Print
 987:../src/cliSupport.c ****                 snprintf(numberString, 16, "%9.4f\n\n", eepromConfig.compFilterB); uart1Print(numbe
 3848              		.loc 1 987 0
 3849 248c 40F20003 		movw	r3, #:lower16:eepromConfig
 3850 2490 C0F20003 		movt	r3, #:upper16:eepromConfig
 3851 2494 9B6D     		ldr	r3, [r3, #88]	@ float
 3852 2496 1846     		mov	r0, r3	@ float
 3853 2498 FFF7FEFF 		bl	__aeabi_f2d
 3854 249c 0246     		mov	r2, r0
 3855 249e 0B46     		mov	r3, r1
 3856 24a0 CDE90023 		strd	r2, [sp]
 3857 24a4 40F20000 		movw	r0, #:lower16:numberString
 3858 24a8 C0F20000 		movt	r0, #:upper16:numberString
 3859 24ac 4FF01001 		mov	r1, #16
 3860 24b0 40F20002 		movw	r2, #:lower16:.LC152
 3861 24b4 C0F20002 		movt	r2, #:upper16:.LC152
 3862 24b8 FFF7FEFF 		bl	snprintf
 3863 24bc 40F20000 		movw	r0, #:lower16:numberString
 3864 24c0 C0F20000 		movt	r0, #:upper16:numberString
 3865 24c4 FFF7FEFF 		bl	uart1Print
 989:../src/cliSupport.c ****                 validQuery = false;
 3866              		.loc 1 989 0
 3867 24c8 4FF00003 		mov	r3, #0
 3868 24cc 8DF80E30 		strb	r3, [sp, #14]
 990:../src/cliSupport.c ****                 break;
 3869              		.loc 1 990 0
 3870 24d0 C0E0     		b	.L143
 3871              	.L151:
 995:../src/cliSupport.c ****                 accelCalibration();
 3872              		.loc 1 995 0
 3873 24d2 FFF7FEFF 		bl	accelCalibration
 997:../src/cliSupport.c ****                 sensorQuery = 'a';
 3874              		.loc 1 997 0
 3875 24d6 4FF06103 		mov	r3, #97
 3876 24da 8DF80F30 		strb	r3, [sp, #15]
 998:../src/cliSupport.c ****                 validQuery = true;
 3877              		.loc 1 998 0
 3878 24de 4FF00103 		mov	r3, #1
 3879 24e2 8DF80E30 		strb	r3, [sp, #14]
 999:../src/cliSupport.c ****                 break;
 3880              		.loc 1 999 0
 3881 24e6 B5E0     		b	.L143
 3882              	.L152:
1004:../src/cliSupport.c ****                 magCalibration();
 3883              		.loc 1 1004 0
 3884 24e8 FFF7FEFF 		bl	magCalibration
1006:../src/cliSupport.c ****                 sensorQuery = 'a';
 3885              		.loc 1 1006 0
 3886 24ec 4FF06103 		mov	r3, #97
 3887 24f0 8DF80F30 		strb	r3, [sp, #15]
1007:../src/cliSupport.c ****                 validQuery = true;
 3888              		.loc 1 1007 0
 3889 24f4 4FF00103 		mov	r3, #1
 3890 24f8 8DF80E30 		strb	r3, [sp, #14]
1008:../src/cliSupport.c ****                 break;
 3891              		.loc 1 1008 0
 3892 24fc AAE0     		b	.L143
 3893              	.L153:
1013:../src/cliSupport.c **** 			    uart1Print("\nExiting Sensor CLI....\n\n");
 3894              		.loc 1 1013 0
 3895 24fe 40F20000 		movw	r0, #:lower16:.LC153
 3896 2502 C0F20000 		movt	r0, #:upper16:.LC153
 3897 2506 FFF7FEFF 		bl	uart1Print
1014:../src/cliSupport.c **** 			    cliBusy = false;
 3898              		.loc 1 1014 0
 3899 250a 40F20003 		movw	r3, #:lower16:cliBusy
 3900 250e C0F20003 		movt	r3, #:upper16:cliBusy
 3901 2512 4FF00002 		mov	r2, #0
 3902 2516 1A70     		strb	r2, [r3, #0]
1081:../src/cliSupport.c **** 
1082:../src/cliSupport.c **** }
 3903              		.loc 1 1082 0
 3904 2518 05B0     		add	sp, sp, #20
 3905 251a 00BD     		pop	{pc}
 3906              	.L145:
1021:../src/cliSupport.c ****                 eepromConfig.accelCutoff = readFloatUart1();
 3907              		.loc 1 1021 0
 3908 251c FFF7FEFF 		bl	readFloatUart1
 3909 2520 0246     		mov	r2, r0	@ float
 3910 2522 40F20003 		movw	r3, #:lower16:eepromConfig
 3911 2526 C0F20003 		movt	r3, #:upper16:eepromConfig
 3912 252a 1A64     		str	r2, [r3, #64]	@ float
1023:../src/cliSupport.c ****                 sensorQuery = 'a';
 3913              		.loc 1 1023 0
 3914 252c 4FF06103 		mov	r3, #97
 3915 2530 8DF80F30 		strb	r3, [sp, #15]
1024:../src/cliSupport.c ****                 validQuery = true;
 3916              		.loc 1 1024 0
 3917 2534 4FF00103 		mov	r3, #1
 3918 2538 8DF80E30 		strb	r3, [sp, #14]
1025:../src/cliSupport.c ****         	    break;
 3919              		.loc 1 1025 0
 3920 253c 8AE0     		b	.L143
 3921              	.L146:
1030:../src/cliSupport.c ****                 eepromConfig.KpAcc = readFloatUart1();
 3922              		.loc 1 1030 0
 3923 253e FFF7FEFF 		bl	readFloatUart1
 3924 2542 0246     		mov	r2, r0	@ float
 3925 2544 40F20003 		movw	r3, #:lower16:eepromConfig
 3926 2548 C0F20003 		movt	r3, #:upper16:eepromConfig
 3927 254c 5A64     		str	r2, [r3, #68]	@ float
1031:../src/cliSupport.c ****                 eepromConfig.KiAcc = readFloatUart1();
 3928              		.loc 1 1031 0
 3929 254e FFF7FEFF 		bl	readFloatUart1
 3930 2552 0246     		mov	r2, r0	@ float
 3931 2554 40F20003 		movw	r3, #:lower16:eepromConfig
 3932 2558 C0F20003 		movt	r3, #:upper16:eepromConfig
 3933 255c 9A64     		str	r2, [r3, #72]	@ float
1033:../src/cliSupport.c ****                 sensorQuery = 'a';
 3934              		.loc 1 1033 0
 3935 255e 4FF06103 		mov	r3, #97
 3936 2562 8DF80F30 		strb	r3, [sp, #15]
1034:../src/cliSupport.c ****                 validQuery = true;
 3937              		.loc 1 1034 0
 3938 2566 4FF00103 		mov	r3, #1
 3939 256a 8DF80E30 		strb	r3, [sp, #14]
1035:../src/cliSupport.c ****                 break;
 3940              		.loc 1 1035 0
 3941 256e 71E0     		b	.L143
 3942              	.L147:
1040:../src/cliSupport.c ****                 eepromConfig.KpMag = readFloatUart1();
 3943              		.loc 1 1040 0
 3944 2570 FFF7FEFF 		bl	readFloatUart1
 3945 2574 0246     		mov	r2, r0	@ float
 3946 2576 40F20003 		movw	r3, #:lower16:eepromConfig
 3947 257a C0F20003 		movt	r3, #:upper16:eepromConfig
 3948 257e DA64     		str	r2, [r3, #76]	@ float
1041:../src/cliSupport.c ****                 eepromConfig.KiMag = readFloatUart1();
 3949              		.loc 1 1041 0
 3950 2580 FFF7FEFF 		bl	readFloatUart1
 3951 2584 0246     		mov	r2, r0	@ float
 3952 2586 40F20003 		movw	r3, #:lower16:eepromConfig
 3953 258a C0F20003 		movt	r3, #:upper16:eepromConfig
 3954 258e 1A65     		str	r2, [r3, #80]	@ float
1043:../src/cliSupport.c ****                 sensorQuery = 'a';
 3955              		.loc 1 1043 0
 3956 2590 4FF06103 		mov	r3, #97
 3957 2594 8DF80F30 		strb	r3, [sp, #15]
1044:../src/cliSupport.c ****                 validQuery = true;
 3958              		.loc 1 1044 0
 3959 2598 4FF00103 		mov	r3, #1
 3960 259c 8DF80E30 		strb	r3, [sp, #14]
1045:../src/cliSupport.c ****                 break;
 3961              		.loc 1 1045 0
 3962 25a0 58E0     		b	.L143
 3963              	.L148:
1050:../src/cliSupport.c ****                 eepromConfig.compFilterA = readFloatUart1();
 3964              		.loc 1 1050 0
 3965 25a2 FFF7FEFF 		bl	readFloatUart1
 3966 25a6 0246     		mov	r2, r0	@ float
 3967 25a8 40F20003 		movw	r3, #:lower16:eepromConfig
 3968 25ac C0F20003 		movt	r3, #:upper16:eepromConfig
 3969 25b0 5A65     		str	r2, [r3, #84]	@ float
1051:../src/cliSupport.c ****                 eepromConfig.compFilterB = readFloatUart1();
 3970              		.loc 1 1051 0
 3971 25b2 FFF7FEFF 		bl	readFloatUart1
 3972 25b6 0246     		mov	r2, r0	@ float
 3973 25b8 40F20003 		movw	r3, #:lower16:eepromConfig
 3974 25bc C0F20003 		movt	r3, #:upper16:eepromConfig
 3975 25c0 9A65     		str	r2, [r3, #88]	@ float
1053:../src/cliSupport.c ****                 sensorQuery = 'a';
 3976              		.loc 1 1053 0
 3977 25c2 4FF06103 		mov	r3, #97
 3978 25c6 8DF80F30 		strb	r3, [sp, #15]
1054:../src/cliSupport.c ****                 validQuery = true;
 3979              		.loc 1 1054 0
 3980 25ca 4FF00103 		mov	r3, #1
 3981 25ce 8DF80E30 		strb	r3, [sp, #14]
1055:../src/cliSupport.c ****                 break;
 3982              		.loc 1 1055 0
 3983 25d2 3FE0     		b	.L143
 3984              	.L149:
1060:../src/cliSupport.c ****                 uart1Print("\nWriting EEPROM Parameters....\n\n");
 3985              		.loc 1 1060 0
 3986 25d4 40F20000 		movw	r0, #:lower16:.LC21
 3987 25d8 C0F20000 		movt	r0, #:upper16:.LC21
 3988 25dc FFF7FEFF 		bl	uart1Print
1061:../src/cliSupport.c ****                 writeEEPROM();
 3989              		.loc 1 1061 0
 3990 25e0 FFF7FEFF 		bl	writeEEPROM
1062:../src/cliSupport.c ****                 break;
 3991              		.loc 1 1062 0
 3992 25e4 36E0     		b	.L143
 3993              	.L144:
1067:../src/cliSupport.c **** 			   	uart1Print("\n");
 3994              		.loc 1 1067 0
 3995 25e6 40F20000 		movw	r0, #:lower16:.LC2
 3996 25ea C0F20000 		movt	r0, #:upper16:.LC2
 3997 25ee FFF7FEFF 		bl	uart1Print
1068:../src/cliSupport.c **** 			   	uart1Print("'a' Display Sensor Data\n");
 3998              		.loc 1 1068 0
 3999 25f2 40F20000 		movw	r0, #:lower16:.LC154
 4000 25f6 C0F20000 		movt	r0, #:upper16:.LC154
 4001 25fa FFF7FEFF 		bl	uart1Print
1069:../src/cliSupport.c **** 			   	uart1Print("'b' Accel Calibration                      'B' Set Accel Cutoff                 
 4002              		.loc 1 1069 0
 4003 25fe 40F20000 		movw	r0, #:lower16:.LC155
 4004 2602 C0F20000 		movt	r0, #:upper16:.LC155
 4005 2606 FFF7FEFF 		bl	uart1Print
1070:../src/cliSupport.c **** 			   	uart1Print("'c' Magnetometer Calibration               'C' Set kpAcc/kiAcc                  
 4006              		.loc 1 1070 0
 4007 260a 40F20000 		movw	r0, #:lower16:.LC156
 4008 260e C0F20000 		movt	r0, #:upper16:.LC156
 4009 2612 FFF7FEFF 		bl	uart1Print
1071:../src/cliSupport.c **** 			   	uart1Print("                                           'D' Set kpMag/kiMag                  
 4010              		.loc 1 1071 0
 4011 2616 40F20000 		movw	r0, #:lower16:.LC157
 4012 261a C0F20000 		movt	r0, #:upper16:.LC157
 4013 261e FFF7FEFF 		bl	uart1Print
1072:../src/cliSupport.c **** 			   	uart1Print("                                           'E' Set h dot est/h est Comp Filter A
 4014              		.loc 1 1072 0
 4015 2622 40F20000 		movw	r0, #:lower16:.LC158
 4016 2626 C0F20000 		movt	r0, #:upper16:.LC158
 4017 262a FFF7FEFF 		bl	uart1Print
1073:../src/cliSupport.c **** 			   	uart1Print("                                           'W' Write EEPROM Parameters\n");
 4018              		.loc 1 1073 0
 4019 262e 40F20000 		movw	r0, #:lower16:.LC107
 4020 2632 C0F20000 		movt	r0, #:upper16:.LC107
 4021 2636 FFF7FEFF 		bl	uart1Print
1074:../src/cliSupport.c **** 			   	uart1Print("'x' Exit Sensor CLI                        '?' Command Summary\n");
 4022              		.loc 1 1074 0
 4023 263a 40F20000 		movw	r0, #:lower16:.LC33
 4024 263e C0F20000 		movt	r0, #:upper16:.LC33
 4025 2642 FFF7FEFF 		bl	uart1Print
1075:../src/cliSupport.c **** 			    uart1Print("\n");
 4026              		.loc 1 1075 0
 4027 2646 40F20000 		movw	r0, #:lower16:.LC2
 4028 264a C0F20000 		movt	r0, #:upper16:.LC2
 4029 264e FFF7FEFF 		bl	uart1Print
1076:../src/cliSupport.c **** 	    	    break;
 4030              		.loc 1 1076 0
 4031 2652 00BF     		nop
 4032              	.L143:
1080:../src/cliSupport.c **** 	}
 4033              		.loc 1 1080 0
 4034 2654 14E5     		b	.L156
 4035              		.cfi_endproc
 4036              	.LFE114:
 4038              		.section	.rodata
 4039 18e2 0000     		.align	2
 4040              	.LC159:
 4041 18e4 0A456E74 		.ascii	"\012Entering GPS CLI....\012\012\000"
 4041      6572696E 
 4041      67204750 
 4041      5320434C 
 4041      492E2E2E 
 4042              		.align	2
 4043              	.LC160:
 4044 18fc 47505320 		.ascii	"GPS CLI -> \000"
 4044      434C4920 
 4044      2D3E2000 
 4045              		.align	2
 4046              	.LC161:
 4047 1908 4E6F2047 		.ascii	"No GPS Installed....\012\012\000"
 4047      50532049 
 4047      6E737461 
 4047      6C6C6564 
 4047      2E2E2E2E 
 4048 191f 00       		.align	2
 4049              	.LC162:
 4050 1920 4D656469 		.ascii	"MediaTek 3329 GPS installed, Binary Mode....\012\012"
 4050      6154656B 
 4050      20333332 
 4050      39204750 
 4050      5320696E 
 4051 194e 00       		.ascii	"\000"
 4052 194f 00       		.align	2
 4053              	.LC163:
 4054 1950 4D656469 		.ascii	"MediaTek 3329 GPS Installed, NMEA Mode....\012\012\000"
 4054      6154656B 
 4054      20333332 
 4054      39204750 
 4054      5320496E 
 4055 197d 000000   		.align	2
 4056              	.LC164:
 4057 1980 55424C4F 		.ascii	"UBLOX GPS Installed, Binary Mode....\012\012\000"
 4057      58204750 
 4057      5320496E 
 4057      7374616C 
 4057      6C65642C 
 4058 19a7 00       		.align	2
 4059              	.LC165:
 4060 19a8 0A457869 		.ascii	"\012Exiting GPS CLI....\012\012\000"
 4060      74696E67 
 4060      20475053 
 4060      20434C49 
 4060      2E2E2E2E 
 4061 19bf 00       		.align	2
 4062              	.LC166:
 4063 19c0 27612720 		.ascii	"'a' Display GPS Installation Data          'A' Set "
 4063      44697370 
 4063      6C617920 
 4063      47505320 
 4063      496E7374 
 4064 19f3 47505320 		.ascii	"GPS Type to No GPS\012\000"
 4064      54797065 
 4064      20746F20 
 4064      4E6F2047 
 4064      50530A00 
 4065 1a07 00       		.align	2
 4066              	.LC167:
 4067 1a08 20202020 		.ascii	"                                           'B' Set "
 4067      20202020 
 4067      20202020 
 4067      20202020 
 4067      20202020 
 4068 1a3b 47505320 		.ascii	"GPS Type to MediaTek 3329 Binary\012\000"
 4068      54797065 
 4068      20746F20 
 4068      4D656469 
 4068      6154656B 
 4069 1a5d 000000   		.align	2
 4070              	.LC168:
 4071 1a60 20202020 		.ascii	"                                           'C' Set "
 4071      20202020 
 4071      20202020 
 4071      20202020 
 4071      20202020 
 4072 1a93 47505320 		.ascii	"GPS Type to MediaTek 3329 NMEA\012\000"
 4072      54797065 
 4072      20746F20 
 4072      4D656469 
 4072      6154656B 
 4073 1ab3 00       		.align	2
 4074              	.LC169:
 4075 1ab4 20202020 		.ascii	"                                           'D' Set "
 4075      20202020 
 4075      20202020 
 4075      20202020 
 4075      20202020 
 4076 1ae7 47505320 		.ascii	"GPS Type to UBLOX\012\000"
 4076      54797065 
 4076      20746F20 
 4076      55424C4F 
 4076      580A00
 4077 1afa 0000     		.align	2
 4078              	.LC170:
 4079 1afc 27782720 		.ascii	"'x' Exit GPS CLI                           '?' Comm"
 4079      45786974 
 4079      20475053 
 4079      20434C49 
 4079      20202020 
 4080 1b2f 616E6420 		.ascii	"and Summary\012\000"
 4080      53756D6D 
 4080      6172790A 
 4080      00
 4081              		.text
 4082 2656 00BF     		.align	2
 4083              		.global	gpsCLI
 4084              		.thumb
 4085              		.thumb_func
 4087              	gpsCLI:
 4088              	.LFB115:
1083:../src/cliSupport.c **** 
1084:../src/cliSupport.c **** ///////////////////////////////////////////////////////////////////////////////
1085:../src/cliSupport.c **** // GPS CLI
1086:../src/cliSupport.c **** ///////////////////////////////////////////////////////////////////////////////
1087:../src/cliSupport.c **** 
1088:../src/cliSupport.c **** void gpsCLI()
1089:../src/cliSupport.c **** {
 4089              		.loc 1 1089 0
 4090              		.cfi_startproc
 4091              		@ args = 0, pretend = 0, frame = 8
 4092              		@ frame_needed = 0, uses_anonymous_args = 0
 4093 2658 00B5     		push	{lr}
 4094              	.LCFI8:
 4095              		.cfi_def_cfa_offset 4
 4096              		.cfi_offset 14, -4
 4097 265a 83B0     		sub	sp, sp, #12
 4098              	.LCFI9:
 4099              		.cfi_def_cfa_offset 16
1090:../src/cliSupport.c ****     uint8_t  gpsQuery;
1091:../src/cliSupport.c ****     uint8_t  validQuery = false;
 4100              		.loc 1 1091 0
 4101 265c 4FF00003 		mov	r3, #0
 4102 2660 8DF80630 		strb	r3, [sp, #6]
1092:../src/cliSupport.c **** 
1093:../src/cliSupport.c ****     cliBusy = true;
 4103              		.loc 1 1093 0
 4104 2664 40F20003 		movw	r3, #:lower16:cliBusy
 4105 2668 C0F20003 		movt	r3, #:upper16:cliBusy
 4106 266c 4FF00102 		mov	r2, #1
 4107 2670 1A70     		strb	r2, [r3, #0]
1094:../src/cliSupport.c **** 
1095:../src/cliSupport.c ****     uart1Print("\nEntering GPS CLI....\n\n");
 4108              		.loc 1 1095 0
 4109 2672 40F20000 		movw	r0, #:lower16:.LC159
 4110 2676 C0F20000 		movt	r0, #:upper16:.LC159
 4111 267a FFF7FEFF 		bl	uart1Print
 4112 267e 00E0     		b	.L177
 4113              	.L178:
1096:../src/cliSupport.c **** 
1097:../src/cliSupport.c ****     while(true)
1098:../src/cliSupport.c ****     {
1099:../src/cliSupport.c ****         uart1Print("GPS CLI -> ");
1100:../src/cliSupport.c **** 
1101:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
1102:../src/cliSupport.c **** 
1103:../src/cliSupport.c **** 		if (validQuery == false)
1104:../src/cliSupport.c **** 		    gpsQuery = uart1Read();
1105:../src/cliSupport.c **** 
1106:../src/cliSupport.c **** 		uart1Print("\n");
1107:../src/cliSupport.c **** 
1108:../src/cliSupport.c **** 		switch(gpsQuery)
1109:../src/cliSupport.c **** 		{
1110:../src/cliSupport.c ****             ///////////////////////////
1111:../src/cliSupport.c **** 
1112:../src/cliSupport.c ****             case 'a': // GPS Installation Data
1113:../src/cliSupport.c ****                 uart1Print("\n");
1114:../src/cliSupport.c **** 
1115:../src/cliSupport.c **** 				switch(eepromConfig.gpsType)
1116:../src/cliSupport.c **** 				{
1117:../src/cliSupport.c **** 					///////////////
1118:../src/cliSupport.c **** 
1119:../src/cliSupport.c **** 					case NO_GPS:
1120:../src/cliSupport.c **** 					    uart1Print("No GPS Installed....\n\n");
1121:../src/cliSupport.c **** 					    break;
1122:../src/cliSupport.c **** 
1123:../src/cliSupport.c **** 					///////////////
1124:../src/cliSupport.c **** 
1125:../src/cliSupport.c **** 					case MEDIATEK_3329_BINARY:
1126:../src/cliSupport.c **** 					    uart1Print("MediaTek 3329 GPS installed, Binary Mode....\n\n");
1127:../src/cliSupport.c **** 					    break;
1128:../src/cliSupport.c **** 
1129:../src/cliSupport.c **** 					///////////////
1130:../src/cliSupport.c **** 
1131:../src/cliSupport.c **** 					case MEDIATEK_3329_NMEA:
1132:../src/cliSupport.c **** 					    uart1Print("MediaTek 3329 GPS Installed, NMEA Mode....\n\n");
1133:../src/cliSupport.c **** 					    break;
1134:../src/cliSupport.c **** 
1135:../src/cliSupport.c **** 					///////////////
1136:../src/cliSupport.c **** 
1137:../src/cliSupport.c **** 					case UBLOX:
1138:../src/cliSupport.c **** 					    uart1Print("UBLOX GPS Installed, Binary Mode....\n\n");
1139:../src/cliSupport.c **** 					    break;
1140:../src/cliSupport.c **** 
1141:../src/cliSupport.c **** 					///////////////
1142:../src/cliSupport.c **** 				}
1143:../src/cliSupport.c **** 
1144:../src/cliSupport.c ****                 validQuery = false;
1145:../src/cliSupport.c ****                 break;
1146:../src/cliSupport.c **** 
1147:../src/cliSupport.c ****             ///////////////////////////
1148:../src/cliSupport.c **** 
1149:../src/cliSupport.c **** 			case 'x':
1150:../src/cliSupport.c **** 			    uart1Print("\nExiting GPS CLI....\n\n");
1151:../src/cliSupport.c **** 			    cliBusy = false;
1152:../src/cliSupport.c **** 			    return;
1153:../src/cliSupport.c **** 			    break;
1154:../src/cliSupport.c **** 
1155:../src/cliSupport.c ****             ///////////////////////////
1156:../src/cliSupport.c **** 
1157:../src/cliSupport.c ****             case 'A': // Set GPS Installed State to False
1158:../src/cliSupport.c ****                 eepromConfig.gpsType = NO_GPS;
1159:../src/cliSupport.c **** 
1160:../src/cliSupport.c ****                 gpsQuery = 'a';
1161:../src/cliSupport.c ****                 validQuery = true;
1162:../src/cliSupport.c ****                 break;
1163:../src/cliSupport.c **** 
1164:../src/cliSupport.c ****             ///////////////////////////
1165:../src/cliSupport.c **** 
1166:../src/cliSupport.c ****             case 'B': // Set GPS Type to MediaTek 3329 Binary
1167:../src/cliSupport.c ****                 eepromConfig.gpsType = MEDIATEK_3329_BINARY;
1168:../src/cliSupport.c **** 
1169:../src/cliSupport.c ****                 initGPS();
1170:../src/cliSupport.c **** 
1171:../src/cliSupport.c ****                 gpsQuery = 'a';
1172:../src/cliSupport.c ****                 validQuery = true;
1173:../src/cliSupport.c ****         	    break;
1174:../src/cliSupport.c **** 
1175:../src/cliSupport.c ****             ///////////////////////////
1176:../src/cliSupport.c **** 
1177:../src/cliSupport.c ****             case 'C': // Set GPS Type to MediaTek 3329 NMEA
1178:../src/cliSupport.c ****                 eepromConfig.gpsType = MEDIATEK_3329_NMEA;
1179:../src/cliSupport.c **** 
1180:../src/cliSupport.c ****                 initGPS();
1181:../src/cliSupport.c **** 
1182:../src/cliSupport.c ****                 gpsQuery = 'a';
1183:../src/cliSupport.c ****                 validQuery = true;
1184:../src/cliSupport.c ****                 break;
1185:../src/cliSupport.c **** 
1186:../src/cliSupport.c ****             ///////////////////////////
1187:../src/cliSupport.c **** 
1188:../src/cliSupport.c ****             case 'D': // Set GPS Type to UBLOX Binary
1189:../src/cliSupport.c ****                 eepromConfig.gpsType = UBLOX;
1190:../src/cliSupport.c **** 
1191:../src/cliSupport.c ****                 initGPS();
1192:../src/cliSupport.c **** 
1193:../src/cliSupport.c ****                 gpsQuery = 'a';
1194:../src/cliSupport.c ****                 validQuery = true;
1195:../src/cliSupport.c ****                 break;
1196:../src/cliSupport.c **** 
1197:../src/cliSupport.c ****             ///////////////////////////
1198:../src/cliSupport.c **** 
1199:../src/cliSupport.c ****             case 'W': // Write EEPROM Parameters
1200:../src/cliSupport.c ****                 uart1Print("\nWriting EEPROM Parameters....\n\n");
1201:../src/cliSupport.c ****                 writeEEPROM();
1202:../src/cliSupport.c ****                 break;
1203:../src/cliSupport.c **** 
1204:../src/cliSupport.c **** 			///////////////////////////
1205:../src/cliSupport.c **** 
1206:../src/cliSupport.c **** 			case '?':
1207:../src/cliSupport.c **** 			   	uart1Print("\n");
1208:../src/cliSupport.c **** 			   	uart1Print("'a' Display GPS Installation Data          'A' Set GPS Type to No GPS\n");
1209:../src/cliSupport.c **** 			   	uart1Print("                                           'B' Set GPS Type to MediaTek 3329 Bin
1210:../src/cliSupport.c **** 			   	uart1Print("                                           'C' Set GPS Type to MediaTek 3329 NME
1211:../src/cliSupport.c **** 			   	uart1Print("                                           'D' Set GPS Type to UBLOX\n");
1212:../src/cliSupport.c **** 			   	uart1Print("                                           'W' Write EEPROM Parameters\n");
1213:../src/cliSupport.c **** 			   	uart1Print("'x' Exit GPS CLI                           '?' Command Summary\n");
1214:../src/cliSupport.c **** 			    uart1Print("\n");
1215:../src/cliSupport.c **** 	    	    break;
1216:../src/cliSupport.c **** 
1217:../src/cliSupport.c **** 	    	///////////////////////////
1218:../src/cliSupport.c **** 	    }
1219:../src/cliSupport.c **** 	}
 4114              		.loc 1 1219 0
 4115 2680 00BF     		nop
 4116              	.L177:
1099:../src/cliSupport.c ****         uart1Print("GPS CLI -> ");
 4117              		.loc 1 1099 0
 4118 2682 40F20000 		movw	r0, #:lower16:.LC160
 4119 2686 C0F20000 		movt	r0, #:upper16:.LC160
 4120 268a FFF7FEFF 		bl	uart1Print
1101:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
 4121              		.loc 1 1101 0
 4122 268e 00BF     		nop
 4123              	.L159:
1101:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
 4124              		.loc 1 1101 0 is_stmt 0 discriminator 1
 4125 2690 FFF7FEFF 		bl	uart1Available
 4126 2694 0346     		mov	r3, r0
 4127 2696 002B     		cmp	r3, #0
 4128 2698 03D1     		bne	.L158
1101:../src/cliSupport.c **** 		while ((uart1Available() == false) && (validQuery == false));
 4129              		.loc 1 1101 0 discriminator 2
 4130 269a 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 4131 269e 002B     		cmp	r3, #0
 4132 26a0 F6D0     		beq	.L159
 4133              	.L158:
1103:../src/cliSupport.c **** 		if (validQuery == false)
 4134              		.loc 1 1103 0 is_stmt 1
 4135 26a2 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 4136 26a6 002B     		cmp	r3, #0
 4137 26a8 04D1     		bne	.L160
1104:../src/cliSupport.c **** 		    gpsQuery = uart1Read();
 4138              		.loc 1 1104 0
 4139 26aa FFF7FEFF 		bl	uart1Read
 4140 26ae 0346     		mov	r3, r0
 4141 26b0 8DF80730 		strb	r3, [sp, #7]
 4142              	.L160:
1106:../src/cliSupport.c **** 		uart1Print("\n");
 4143              		.loc 1 1106 0
 4144 26b4 40F20000 		movw	r0, #:lower16:.LC2
 4145 26b8 C0F20000 		movt	r0, #:upper16:.LC2
 4146 26bc FFF7FEFF 		bl	uart1Print
1108:../src/cliSupport.c **** 		switch(gpsQuery)
 4147              		.loc 1 1108 0
 4148 26c0 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 4149 26c4 A3F13F03 		sub	r3, r3, #63
 4150 26c8 392B     		cmp	r3, #57
 4151 26ca D9D8     		bhi	.L178
 4152 26cc 01A2     		adr	r2, .L170
 4153 26ce 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4154 26d2 00BF     		.align	2
 4155              	.L170:
 4156 26d4 F7280000 		.word	.L162+1
 4157 26d8 81260000 		.word	.L178+1
 4158 26dc 51280000 		.word	.L163+1
 4159 26e0 73280000 		.word	.L164+1
 4160 26e4 99280000 		.word	.L165+1
 4161 26e8 BF280000 		.word	.L166+1
 4162 26ec 81260000 		.word	.L178+1
 4163 26f0 81260000 		.word	.L178+1
 4164 26f4 81260000 		.word	.L178+1
 4165 26f8 81260000 		.word	.L178+1
 4166 26fc 81260000 		.word	.L178+1
 4167 2700 81260000 		.word	.L178+1
 4168 2704 81260000 		.word	.L178+1
 4169 2708 81260000 		.word	.L178+1
 4170 270c 81260000 		.word	.L178+1
 4171 2710 81260000 		.word	.L178+1
 4172 2714 81260000 		.word	.L178+1
 4173 2718 81260000 		.word	.L178+1
 4174 271c 81260000 		.word	.L178+1
 4175 2720 81260000 		.word	.L178+1
 4176 2724 81260000 		.word	.L178+1
 4177 2728 81260000 		.word	.L178+1
 4178 272c 81260000 		.word	.L178+1
 4179 2730 81260000 		.word	.L178+1
 4180 2734 E5280000 		.word	.L167+1
 4181 2738 81260000 		.word	.L178+1
 4182 273c 81260000 		.word	.L178+1
 4183 2740 81260000 		.word	.L178+1
 4184 2744 81260000 		.word	.L178+1
 4185 2748 81260000 		.word	.L178+1
 4186 274c 81260000 		.word	.L178+1
 4187 2750 81260000 		.word	.L178+1
 4188 2754 81260000 		.word	.L178+1
 4189 2758 81260000 		.word	.L178+1
 4190 275c BD270000 		.word	.L168+1
 4191 2760 81260000 		.word	.L178+1
 4192 2764 81260000 		.word	.L178+1
 4193 2768 81260000 		.word	.L178+1
 4194 276c 81260000 		.word	.L178+1
 4195 2770 81260000 		.word	.L178+1
 4196 2774 81260000 		.word	.L178+1
 4197 2778 81260000 		.word	.L178+1
 4198 277c 81260000 		.word	.L178+1
 4199 2780 81260000 		.word	.L178+1
 4200 2784 81260000 		.word	.L178+1
 4201 2788 81260000 		.word	.L178+1
 4202 278c 81260000 		.word	.L178+1
 4203 2790 81260000 		.word	.L178+1
 4204 2794 81260000 		.word	.L178+1
 4205 2798 81260000 		.word	.L178+1
 4206 279c 81260000 		.word	.L178+1
 4207 27a0 81260000 		.word	.L178+1
 4208 27a4 81260000 		.word	.L178+1
 4209 27a8 81260000 		.word	.L178+1
 4210 27ac 81260000 		.word	.L178+1
 4211 27b0 81260000 		.word	.L178+1
 4212 27b4 81260000 		.word	.L178+1
 4213 27b8 33280000 		.word	.L169+1
 4214              	.L168:
1113:../src/cliSupport.c ****                 uart1Print("\n");
 4215              		.loc 1 1113 0
 4216 27bc 40F20000 		movw	r0, #:lower16:.LC2
 4217 27c0 C0F20000 		movt	r0, #:upper16:.LC2
 4218 27c4 FFF7FEFF 		bl	uart1Print
1115:../src/cliSupport.c **** 				switch(eepromConfig.gpsType)
 4219              		.loc 1 1115 0
 4220 27c8 40F20003 		movw	r3, #:lower16:eepromConfig
 4221 27cc C0F20003 		movt	r3, #:upper16:eepromConfig
 4222 27d0 93F84B33 		ldrb	r3, [r3, #843]	@ zero_extendqisi2
 4223 27d4 032B     		cmp	r3, #3
 4224 27d6 27D8     		bhi	.L171
 4225 27d8 01A2     		adr	r2, .L176
 4226 27da 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4227 27de 00BF     		.align	2
 4228              	.L176:
 4229 27e0 F1270000 		.word	.L172+1
 4230 27e4 FF270000 		.word	.L173+1
 4231 27e8 0D280000 		.word	.L174+1
 4232 27ec 1B280000 		.word	.L175+1
 4233              	.L172:
1120:../src/cliSupport.c **** 					    uart1Print("No GPS Installed....\n\n");
 4234              		.loc 1 1120 0
 4235 27f0 40F20000 		movw	r0, #:lower16:.LC161
 4236 27f4 C0F20000 		movt	r0, #:upper16:.LC161
 4237 27f8 FFF7FEFF 		bl	uart1Print
1121:../src/cliSupport.c **** 					    break;
 4238              		.loc 1 1121 0
 4239 27fc 14E0     		b	.L171
 4240              	.L173:
1126:../src/cliSupport.c **** 					    uart1Print("MediaTek 3329 GPS installed, Binary Mode....\n\n");
 4241              		.loc 1 1126 0
 4242 27fe 40F20000 		movw	r0, #:lower16:.LC162
 4243 2802 C0F20000 		movt	r0, #:upper16:.LC162
 4244 2806 FFF7FEFF 		bl	uart1Print
1127:../src/cliSupport.c **** 					    break;
 4245              		.loc 1 1127 0
 4246 280a 0DE0     		b	.L171
 4247              	.L174:
1132:../src/cliSupport.c **** 					    uart1Print("MediaTek 3329 GPS Installed, NMEA Mode....\n\n");
 4248              		.loc 1 1132 0
 4249 280c 40F20000 		movw	r0, #:lower16:.LC163
 4250 2810 C0F20000 		movt	r0, #:upper16:.LC163
 4251 2814 FFF7FEFF 		bl	uart1Print
1133:../src/cliSupport.c **** 					    break;
 4252              		.loc 1 1133 0
 4253 2818 06E0     		b	.L171
 4254              	.L175:
1138:../src/cliSupport.c **** 					    uart1Print("UBLOX GPS Installed, Binary Mode....\n\n");
 4255              		.loc 1 1138 0
 4256 281a 40F20000 		movw	r0, #:lower16:.LC164
 4257 281e C0F20000 		movt	r0, #:upper16:.LC164
 4258 2822 FFF7FEFF 		bl	uart1Print
1139:../src/cliSupport.c **** 					    break;
 4259              		.loc 1 1139 0
 4260 2826 00BF     		nop
 4261              	.L171:
1144:../src/cliSupport.c ****                 validQuery = false;
 4262              		.loc 1 1144 0
 4263 2828 4FF00003 		mov	r3, #0
 4264 282c 8DF80630 		strb	r3, [sp, #6]
1145:../src/cliSupport.c ****                 break;
 4265              		.loc 1 1145 0
 4266 2830 92E0     		b	.L161
 4267              	.L169:
1150:../src/cliSupport.c **** 			    uart1Print("\nExiting GPS CLI....\n\n");
 4268              		.loc 1 1150 0
 4269 2832 40F20000 		movw	r0, #:lower16:.LC165
 4270 2836 C0F20000 		movt	r0, #:upper16:.LC165
 4271 283a FFF7FEFF 		bl	uart1Print
1151:../src/cliSupport.c **** 			    cliBusy = false;
 4272              		.loc 1 1151 0
 4273 283e 40F20003 		movw	r3, #:lower16:cliBusy
 4274 2842 C0F20003 		movt	r3, #:upper16:cliBusy
 4275 2846 4FF00002 		mov	r2, #0
 4276 284a 1A70     		strb	r2, [r3, #0]
1220:../src/cliSupport.c **** 
1221:../src/cliSupport.c **** }
 4277              		.loc 1 1221 0
 4278 284c 03B0     		add	sp, sp, #12
 4279 284e 00BD     		pop	{pc}
 4280              	.L163:
1158:../src/cliSupport.c ****                 eepromConfig.gpsType = NO_GPS;
 4281              		.loc 1 1158 0
 4282 2850 40F20003 		movw	r3, #:lower16:eepromConfig
 4283 2854 C0F20003 		movt	r3, #:upper16:eepromConfig
 4284 2858 4FF00002 		mov	r2, #0
 4285 285c 83F84B23 		strb	r2, [r3, #843]
1160:../src/cliSupport.c ****                 gpsQuery = 'a';
 4286              		.loc 1 1160 0
 4287 2860 4FF06103 		mov	r3, #97
 4288 2864 8DF80730 		strb	r3, [sp, #7]
1161:../src/cliSupport.c ****                 validQuery = true;
 4289              		.loc 1 1161 0
 4290 2868 4FF00103 		mov	r3, #1
 4291 286c 8DF80630 		strb	r3, [sp, #6]
1162:../src/cliSupport.c ****                 break;
 4292              		.loc 1 1162 0
 4293 2870 72E0     		b	.L161
 4294              	.L164:
1167:../src/cliSupport.c ****                 eepromConfig.gpsType = MEDIATEK_3329_BINARY;
 4295              		.loc 1 1167 0
 4296 2872 40F20003 		movw	r3, #:lower16:eepromConfig
 4297 2876 C0F20003 		movt	r3, #:upper16:eepromConfig
 4298 287a 4FF00102 		mov	r2, #1
 4299 287e 83F84B23 		strb	r2, [r3, #843]
1169:../src/cliSupport.c ****                 initGPS();
 4300              		.loc 1 1169 0
 4301 2882 FFF7FEFF 		bl	initGPS
1171:../src/cliSupport.c ****                 gpsQuery = 'a';
 4302              		.loc 1 1171 0
 4303 2886 4FF06103 		mov	r3, #97
 4304 288a 8DF80730 		strb	r3, [sp, #7]
1172:../src/cliSupport.c ****                 validQuery = true;
 4305              		.loc 1 1172 0
 4306 288e 4FF00103 		mov	r3, #1
 4307 2892 8DF80630 		strb	r3, [sp, #6]
1173:../src/cliSupport.c ****         	    break;
 4308              		.loc 1 1173 0
 4309 2896 5FE0     		b	.L161
 4310              	.L165:
1178:../src/cliSupport.c ****                 eepromConfig.gpsType = MEDIATEK_3329_NMEA;
 4311              		.loc 1 1178 0
 4312 2898 40F20003 		movw	r3, #:lower16:eepromConfig
 4313 289c C0F20003 		movt	r3, #:upper16:eepromConfig
 4314 28a0 4FF00202 		mov	r2, #2
 4315 28a4 83F84B23 		strb	r2, [r3, #843]
1180:../src/cliSupport.c ****                 initGPS();
 4316              		.loc 1 1180 0
 4317 28a8 FFF7FEFF 		bl	initGPS
1182:../src/cliSupport.c ****                 gpsQuery = 'a';
 4318              		.loc 1 1182 0
 4319 28ac 4FF06103 		mov	r3, #97
 4320 28b0 8DF80730 		strb	r3, [sp, #7]
1183:../src/cliSupport.c ****                 validQuery = true;
 4321              		.loc 1 1183 0
 4322 28b4 4FF00103 		mov	r3, #1
 4323 28b8 8DF80630 		strb	r3, [sp, #6]
1184:../src/cliSupport.c ****                 break;
 4324              		.loc 1 1184 0
 4325 28bc 4CE0     		b	.L161
 4326              	.L166:
1189:../src/cliSupport.c ****                 eepromConfig.gpsType = UBLOX;
 4327              		.loc 1 1189 0
 4328 28be 40F20003 		movw	r3, #:lower16:eepromConfig
 4329 28c2 C0F20003 		movt	r3, #:upper16:eepromConfig
 4330 28c6 4FF00302 		mov	r2, #3
 4331 28ca 83F84B23 		strb	r2, [r3, #843]
1191:../src/cliSupport.c ****                 initGPS();
 4332              		.loc 1 1191 0
 4333 28ce FFF7FEFF 		bl	initGPS
1193:../src/cliSupport.c ****                 gpsQuery = 'a';
 4334              		.loc 1 1193 0
 4335 28d2 4FF06103 		mov	r3, #97
 4336 28d6 8DF80730 		strb	r3, [sp, #7]
1194:../src/cliSupport.c ****                 validQuery = true;
 4337              		.loc 1 1194 0
 4338 28da 4FF00103 		mov	r3, #1
 4339 28de 8DF80630 		strb	r3, [sp, #6]
1195:../src/cliSupport.c ****                 break;
 4340              		.loc 1 1195 0
 4341 28e2 39E0     		b	.L161
 4342              	.L167:
1200:../src/cliSupport.c ****                 uart1Print("\nWriting EEPROM Parameters....\n\n");
 4343              		.loc 1 1200 0
 4344 28e4 40F20000 		movw	r0, #:lower16:.LC21
 4345 28e8 C0F20000 		movt	r0, #:upper16:.LC21
 4346 28ec FFF7FEFF 		bl	uart1Print
1201:../src/cliSupport.c ****                 writeEEPROM();
 4347              		.loc 1 1201 0
 4348 28f0 FFF7FEFF 		bl	writeEEPROM
1202:../src/cliSupport.c ****                 break;
 4349              		.loc 1 1202 0
 4350 28f4 30E0     		b	.L161
 4351              	.L162:
1207:../src/cliSupport.c **** 			   	uart1Print("\n");
 4352              		.loc 1 1207 0
 4353 28f6 40F20000 		movw	r0, #:lower16:.LC2
 4354 28fa C0F20000 		movt	r0, #:upper16:.LC2
 4355 28fe FFF7FEFF 		bl	uart1Print
1208:../src/cliSupport.c **** 			   	uart1Print("'a' Display GPS Installation Data          'A' Set GPS Type to No GPS\n");
 4356              		.loc 1 1208 0
 4357 2902 40F20000 		movw	r0, #:lower16:.LC166
 4358 2906 C0F20000 		movt	r0, #:upper16:.LC166
 4359 290a FFF7FEFF 		bl	uart1Print
1209:../src/cliSupport.c **** 			   	uart1Print("                                           'B' Set GPS Type to MediaTek 3329 Bin
 4360              		.loc 1 1209 0
 4361 290e 40F20000 		movw	r0, #:lower16:.LC167
 4362 2912 C0F20000 		movt	r0, #:upper16:.LC167
 4363 2916 FFF7FEFF 		bl	uart1Print
1210:../src/cliSupport.c **** 			   	uart1Print("                                           'C' Set GPS Type to MediaTek 3329 NME
 4364              		.loc 1 1210 0
 4365 291a 40F20000 		movw	r0, #:lower16:.LC168
 4366 291e C0F20000 		movt	r0, #:upper16:.LC168
 4367 2922 FFF7FEFF 		bl	uart1Print
1211:../src/cliSupport.c **** 			   	uart1Print("                                           'D' Set GPS Type to UBLOX\n");
 4368              		.loc 1 1211 0
 4369 2926 40F20000 		movw	r0, #:lower16:.LC169
 4370 292a C0F20000 		movt	r0, #:upper16:.LC169
 4371 292e FFF7FEFF 		bl	uart1Print
1212:../src/cliSupport.c **** 			   	uart1Print("                                           'W' Write EEPROM Parameters\n");
 4372              		.loc 1 1212 0
 4373 2932 40F20000 		movw	r0, #:lower16:.LC107
 4374 2936 C0F20000 		movt	r0, #:upper16:.LC107
 4375 293a FFF7FEFF 		bl	uart1Print
1213:../src/cliSupport.c **** 			   	uart1Print("'x' Exit GPS CLI                           '?' Command Summary\n");
 4376              		.loc 1 1213 0
 4377 293e 40F20000 		movw	r0, #:lower16:.LC170
 4378 2942 C0F20000 		movt	r0, #:upper16:.LC170
 4379 2946 FFF7FEFF 		bl	uart1Print
1214:../src/cliSupport.c **** 			    uart1Print("\n");
 4380              		.loc 1 1214 0
 4381 294a 40F20000 		movw	r0, #:lower16:.LC2
 4382 294e C0F20000 		movt	r0, #:upper16:.LC2
 4383 2952 FFF7FEFF 		bl	uart1Print
1215:../src/cliSupport.c **** 	    	    break;
 4384              		.loc 1 1215 0
 4385 2956 00BF     		nop
 4386              	.L161:
1219:../src/cliSupport.c **** 	}
 4387              		.loc 1 1219 0
 4388 2958 92E6     		b	.L178
 4389              		.cfi_endproc
 4390              	.LFE115:
 4392              	.Letext0:
 4393              		.file 2 "c:\\program files\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 4394              		.file 3 "../src/pid.h"
 4395              		.file 4 "../src/aq32Plus_F3.h"
 4396              		.file 5 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsMediaTe
 4397              		.file 6 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsNMEA.h"
 4398              		.file 7 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsUblox.h
 4399              		.file 8 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\Libraries\\CMSIS\\I
 4400              		.file 9 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\sensors/lsm303
 4401              		.file 10 "../src/cli.h"
 4402              		.file 11 "../src/config.h"
 4403              		.file 12 "../src/mixer.h"
DEFINED SYMBOLS
                            *ABS*:00000000 cliSupport.c
                            *COM*:00000001 mtk19ProcessDataState
                            *COM*:00000001 nmeaProcessDataState
                            *COM*:00000001 ubloxProcessDataState
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:23     .rodata:00000000 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:24     .rodata:00000000 .LC0
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:27     .rodata:0000001c .LC1
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:30     .rodata:0000002c .LC2
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:33     .rodata:00000030 .LC3
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:36     .rodata:00000054 .LC4
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:39     .rodata:00000060 .LC5
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:42     .rodata:0000006c .LC6
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:45     .rodata:00000090 .LC7
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:48     .rodata:00000098 .LC8
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:51     .rodata:000000a0 .LC9
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:54     .rodata:000000c4 .LC10
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:57     .rodata:000000cc .LC11
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:60     .rodata:000000d8 .LC12
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:63     .rodata:000000fc .LC13
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:66     .rodata:00000100 .LC14
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:69     .rodata:00000108 .LC15
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:72     .rodata:0000012c .LC16
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:75     .rodata:00000150 .LC17
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:78     .rodata:00000174 .LC18
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:81     .rodata:0000018c .LC19
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:84     .rodata:000001b4 .LC20
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:87     .rodata:000001d0 .LC21
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:90     .rodata:000001f4 .LC22
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:93     .rodata:0000020c .LC23
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:97     .rodata:0000025c .LC24
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:101    .rodata:000002b4 .LC25
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:105    .rodata:00000304 .LC26
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:109    .rodata:00000350 .LC27
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:113    .rodata:0000039c .LC28
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:116    .rodata:000003b0 .LC29
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:119    .rodata:000003d4 .LC30
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:122    .rodata:000003f4 .LC31
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:125    .rodata:00000414 .LC32
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:129    .rodata:0000045c .LC33
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:133    .text:00000000 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:138    .text:00000000 max7456CLI
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:220    .text:00000090 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:280    .text:00000178 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:755    .rodata:0000049c .LC34
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:758    .rodata:000004b8 .LC35
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:761    .rodata:000004c8 .LC36
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:764    .rodata:000004ec .LC37
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:767    .rodata:00000500 .LC38
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:770    .rodata:00000518 .LC39
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:773    .rodata:0000052c .LC40
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:776    .rodata:00000544 .LC41
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:779    .rodata:0000055c .LC42
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:782    .rodata:00000570 .LC43
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:785    .rodata:0000058c .LC44
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:788    .rodata:000005a4 .LC45
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:791    .rodata:000005c0 .LC46
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:794    .rodata:000005dc .LC47
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:797    .rodata:000005f8 .LC48
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:800    .rodata:00000614 .LC49
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:803    .rodata:00000624 .LC50
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:806    .rodata:00000638 .LC51
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:809    .rodata:0000064c .LC52
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:812    .rodata:0000065c .LC53
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:815    .rodata:00000678 .LC54
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:818    .rodata:00000690 .LC55
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:821    .rodata:000006b0 .LC56
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:824    .rodata:000006cc .LC57
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:827    .rodata:000006e0 .LC58
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:830    .rodata:00000704 .LC59
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:833    .rodata:00000728 .LC60
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:836    .rodata:0000074c .LC61
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:839    .rodata:00000770 .LC62
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:842    .rodata:00000794 .LC63
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:845    .rodata:000007b8 .LC64
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:848    .rodata:000007dc .LC65
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:851    .rodata:00000800 .LC66
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:854    .rodata:00000824 .LC67
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:857    .rodata:00000848 .LC68
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:860    .rodata:0000086c .LC69
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:863    .rodata:00000890 .LC70
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:866    .rodata:000008b4 .LC71
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:869    .rodata:000008d8 .LC72
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:872    .rodata:000008fc .LC73
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:875    .rodata:00000920 .LC74
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:878    .rodata:00000944 .LC75
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:881    .rodata:00000968 .LC76
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:884    .rodata:0000098c .LC77
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:887    .rodata:000009b0 .LC78
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:890    .rodata:000009d0 .LC79
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:893    .rodata:000009f4 .LC80
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:896    .rodata:00000a18 .LC81
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:899    .rodata:00000a3c .LC82
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:902    .rodata:00000a5c .LC83
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:905    .rodata:00000a80 .LC84
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:908    .rodata:00000aa4 .LC85
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:911    .rodata:00000ac8 .LC86
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:914    .rodata:00000ae8 .LC87
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:917    .rodata:00000b0c .LC88
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:920    .rodata:00000b10 .LC89
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:923    .rodata:00000b30 .LC90
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:926    .rodata:00000b50 .LC91
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:929    .rodata:00000b58 .LC92
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:932    .rodata:00000b5c .LC93
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:935    .rodata:00000b78 .LC94
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:940    .rodata:00000be8 .LC95
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:944    .rodata:00000c48 .LC96
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:948    .rodata:00000cac .LC97
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:952    .rodata:00000d10 .LC98
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:957    .rodata:00000d90 .LC99
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:962    .rodata:00000e08 .LC100
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:966    .rodata:00000e68 .LC101
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:971    .rodata:00000ed4 .LC102
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:976    .rodata:00000f3c .LC103
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:981    .rodata:00000fa4 .LC104
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:985    .rodata:00001008 .LC105
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:989    .rodata:00001064 .LC106
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:993    .rodata:000010c4 .LC107
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:1002   .text:00000610 mixerCLI
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:1073   .text:0000068c $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:1133   .text:00000774 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:1147   .text:0000079c $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:1170   .text:000007f0 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2633   .text:000018e4 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2640   .rodata:0000110c .LC108
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2643   .rodata:0000112c .LC109
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2646   .rodata:00001140 .LC110
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2649   .rodata:00001164 .LC111
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2652   .rodata:00001170 .LC112
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2655   .rodata:00001178 .LC113
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2658   .rodata:00001184 .LC114
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2661   .rodata:000011a8 .LC115
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2664   .rodata:000011cc .LC116
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2667   .rodata:000011dc .LC117
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2670   .rodata:000011ec .LC118
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2673   .rodata:00001210 .LC119
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2676   .rodata:00001214 .LC120
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2679   .rodata:00001238 .LC121
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2682   .rodata:0000125c .LC122
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2685   .rodata:00001280 .LC123
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2688   .rodata:000012a4 .LC124
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2691   .rodata:000012c8 .LC125
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2694   .rodata:000012d0 .LC126
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2701   .rodata:000012f4 .LC127
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2704   .rodata:00001300 .LC128
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2707   .rodata:00001324 .LC129
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2710   .rodata:00001334 .LC130
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2713   .rodata:00001350 .LC131
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2716   .rodata:0000136c .LC132
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2719   .rodata:00001384 .LC133
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2724   .rodata:00001400 .LC134
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2728   .rodata:00001460 .LC135
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2732   .rodata:000014c0 .LC136
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2736   .rodata:00001524 .LC137
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2741   .rodata:000015a4 .LC138
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2745   .text:000018ec $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2750   .text:000018ec receiverCLI
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2819   .text:00001968 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:2879   .text:00001a50 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3420   .text:00002040 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3431   .rodata:000015e4 .LC139
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3434   .rodata:00001600 .LC140
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3437   .rodata:00001610 .LC141
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3440   .rodata:0000162c .LC142
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3443   .rodata:00001634 .LC143
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3446   .rodata:00001650 .LC144
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3449   .rodata:00001658 .LC145
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3452   .rodata:00001674 .LC146
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3455   .rodata:00001690 .LC147
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3458   .rodata:000016ac .LC148
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3461   .rodata:000016c8 .LC149
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3464   .rodata:000016e4 .LC150
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3467   .rodata:00001700 .LC151
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3470   .rodata:0000171c .LC152
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3473   .rodata:00001724 .LC153
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3476   .rodata:00001740 .LC154
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3479   .rodata:0000175c .LC155
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3483   .rodata:000017c0 .LC156
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3487   .rodata:00001824 .LC157
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3491   .rodata:00001888 .LC158
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3495   .text:00002058 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3500   .text:00002058 sensorCLI
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3569   .text:000020d4 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:3629   .text:000021bc $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:4040   .rodata:000018e4 .LC159
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:4043   .rodata:000018fc .LC160
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:4046   .rodata:00001908 .LC161
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:4049   .rodata:00001920 .LC162
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:4053   .rodata:00001950 .LC163
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:4056   .rodata:00001980 .LC164
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:4059   .rodata:000019a8 .LC165
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:4062   .rodata:000019c0 .LC166
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:4066   .rodata:00001a08 .LC167
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:4070   .rodata:00001a60 .LC168
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:4074   .rodata:00001ab4 .LC169
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:4078   .rodata:00001afc .LC170
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:4087   .text:00002658 gpsCLI
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:4156   .text:000026d4 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:4216   .text:000027bc $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:4229   .text:000027e0 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccVimRGp.s:4235   .text:000027f0 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
cliBusy
uart1Print
resetMax7456
uart1Available
uart1Read
eepromConfig
showMax7456Font
downloadMax7456Font
initMax7456
writeEEPROM
numberMotor
numberString
itoa
ftoa
readFloatUart1
initMixer
pwmEscInit
pwmServoInit
__aeabi_f2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2f
rcChannelLetters
snprintf
delay
systemReset
readStringUart1
parseRcChannels
accelOneG
accelCalibration
magCalibration
initGPS

   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	mtk19ProcessDataState,1,1
  20              		.comm	nmeaProcessDataState,1,1
  21              		.comm	ubloxProcessDataState,1,1
  22              		.comm	eepromConfig,844,4
  23              		.global	execUpCount
  24              		.bss
  27              	execUpCount:
  28 0000 00       		.space	1
  29              		.comm	sensors,100,4
  30              		.comm	timerValue,2,2
  31              		.comm	numberString,32,4
  32              		.section	.rodata
  33              		.align	2
  34              	.LC0:
  35 0000 2C00     		.ascii	",\000"
  36 0002 0000     		.align	2
  37              	.LC1:
  38 0004 0A00     		.ascii	"\012\000"
  39 0006 0000     		.text
  40              		.align	2
  41              		.global	main
  42              		.thumb
  43              		.thumb_func
  45              	main:
  46              	.LFB111:
  47              		.file 1 "../src/main.c"
   1:../src/main.c **** /*
   2:../src/main.c ****   December 2012
   3:../src/main.c **** 
   4:../src/main.c ****   aq32Plus_F3 Rev -
   5:../src/main.c **** 
   6:../src/main.c ****   Copyright (c) 2012 John Ihlein.  All rights reserved.
   7:../src/main.c **** 
   8:../src/main.c ****   Open Source STM32 Based Multicopter Controller Software
   9:../src/main.c **** 
  10:../src/main.c ****   Includes code and/or ideas from:
  11:../src/main.c **** 
  12:../src/main.c ****   1)AeroQuad
  13:../src/main.c ****   2)BaseFlight
  14:../src/main.c ****   3)CH Robotics
  15:../src/main.c ****   4)MultiWii
  16:../src/main.c ****   5)S.O.H. Madgwick
  17:../src/main.c ****   6)UAVX
  18:../src/main.c ****   7)STM DiscoveryF3 demonstration software
  19:../src/main.c **** 
  20:../src/main.c ****   Designed to run on the DiscoveryF3 board
  21:../src/main.c **** 
  22:../src/main.c ****   This program is free software: you can redistribute it and/or modify
  23:../src/main.c ****   it under the terms of the GNU General Public License as published by
  24:../src/main.c ****   the Free Software Foundation, either version 3 of the License, or
  25:../src/main.c ****   (at your option) any later version.
  26:../src/main.c **** 
  27:../src/main.c ****   This program is distributed in the hope that it will be useful,
  28:../src/main.c ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
  29:../src/main.c ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  30:../src/main.c ****   GNU General Public License for more details.
  31:../src/main.c **** 
  32:../src/main.c ****   You should have received a copy of the GNU General Public License
  33:../src/main.c ****   along with this program. If not, see <http://www.gnu.org/licenses/>.
  34:../src/main.c **** */
  35:../src/main.c **** 
  36:../src/main.c **** ///////////////////////////////////////////////////////////////////////////////
  37:../src/main.c **** 
  38:../src/main.c **** #include "board.h"
  39:../src/main.c **** 
  40:../src/main.c **** ///////////////////////////////////////////////////////////////////////////////
  41:../src/main.c **** 
  42:../src/main.c **** eepromConfig_t eepromConfig;
  43:../src/main.c **** 
  44:../src/main.c **** uint8_t        execUpCount = 0;
  45:../src/main.c **** 
  46:../src/main.c **** sensors_t      sensors;
  47:../src/main.c **** 
  48:../src/main.c **** uint16_t       timerValue;
  49:../src/main.c **** 
  50:../src/main.c **** char           numberString[32];
  51:../src/main.c **** 
  52:../src/main.c **** ///////////////////////////////////////////////////////////////////////////////
  53:../src/main.c **** 
  54:../src/main.c **** int main(void)
  55:../src/main.c **** {
  48              		.loc 1 55 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 8
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  53              	.LCFI0:
  54              		.cfi_def_cfa_offset 28
  55              		.cfi_offset 14, -4
  56              		.cfi_offset 9, -8
  57              		.cfi_offset 8, -12
  58              		.cfi_offset 7, -16
  59              		.cfi_offset 6, -20
  60              		.cfi_offset 5, -24
  61              		.cfi_offset 4, -28
  62 0004 8BB0     		sub	sp, sp, #44
  63              	.LCFI1:
  64              		.cfi_def_cfa_offset 72
  56:../src/main.c **** 	///////////////////////////////////////////////////////////////////////////
  57:../src/main.c **** 
  58:../src/main.c **** 	uint32_t currentTime;
  59:../src/main.c **** 
  60:../src/main.c ****     systemReady = false;
  65              		.loc 1 60 0
  66 0006 40F20003 		movw	r3, #:lower16:systemReady
  67 000a C0F20003 		movt	r3, #:upper16:systemReady
  68 000e 4FF00002 		mov	r2, #0
  69 0012 1A70     		strb	r2, [r3, #0]
  61:../src/main.c **** 
  62:../src/main.c ****     systemInit();
  70              		.loc 1 62 0
  71 0014 FFF7FEFF 		bl	systemInit
  63:../src/main.c **** 
  64:../src/main.c ****     systemReady = true;
  72              		.loc 1 64 0
  73 0018 40F20003 		movw	r3, #:lower16:systemReady
  74 001c C0F20003 		movt	r3, #:upper16:systemReady
  75 0020 4FF00102 		mov	r2, #1
  76 0024 1A70     		strb	r2, [r3, #0]
  77 0026 00E0     		b	.L29
  78              	.L30:
  65:../src/main.c **** 
  66:../src/main.c ****     while (1)
  67:../src/main.c ****     {
  68:../src/main.c ****     	///////////////////////////////
  69:../src/main.c **** 
  70:../src/main.c ****         if (frame_50Hz)
  71:../src/main.c ****         {
  72:../src/main.c ****         	frame_50Hz = false;
  73:../src/main.c **** 
  74:../src/main.c ****         	currentTime      = micros();
  75:../src/main.c **** 			deltaTime50Hz    = currentTime - previous50HzTime;
  76:../src/main.c **** 			previous50HzTime = currentTime;
  77:../src/main.c **** 
  78:../src/main.c **** 			processFlightCommands();
  79:../src/main.c **** 
  80:../src/main.c **** 			if (eepromConfig.osdEnabled)
  81:../src/main.c **** 			{
  82:../src/main.c **** 				if (eepromConfig.osdDisplayAlt)
  83:../src/main.c **** 				    displayAltitude(sensors.pressureAlt10Hz, 0.0f, DISENGAGED);
  84:../src/main.c **** 
  85:../src/main.c **** 				if (eepromConfig.osdDisplayAH)
  86:../src/main.c **** 				    displayArtificialHorizon(sensors.attitude500Hz[ROLL], sensors.attitude500Hz[PITCH], flightM
  87:../src/main.c **** 
  88:../src/main.c **** 				if (eepromConfig.osdDisplayAtt)
  89:../src/main.c **** 				    displayAttitude(sensors.attitude500Hz[ROLL], sensors.attitude500Hz[PITCH], flightMode);
  90:../src/main.c **** 
  91:../src/main.c **** 				if (eepromConfig.osdDisplayHdg)
  92:../src/main.c **** 				    displayHeading(sensors.attitude500Hz[YAW]);
  93:../src/main.c **** 			}
  94:../src/main.c **** 
  95:../src/main.c **** 			executionTime50Hz = micros() - currentTime;
  96:../src/main.c ****         }
  97:../src/main.c **** 
  98:../src/main.c ****         ///////////////////////////////
  99:../src/main.c **** 
 100:../src/main.c ****         if (frame_10Hz)
 101:../src/main.c ****         {
 102:../src/main.c ****         	frame_10Hz = false;
 103:../src/main.c **** 
 104:../src/main.c ****         	currentTime      = micros();
 105:../src/main.c **** 			deltaTime10Hz    = currentTime - previous10HzTime;
 106:../src/main.c **** 			previous10HzTime = currentTime;
 107:../src/main.c **** 
 108:../src/main.c **** 			if (newMagData == true)
 109:../src/main.c **** 			{
 110:../src/main.c **** 				sensors.mag10Hz[XAXIS] = -((float)rawMag[XAXIS].value * magScaleFactor[XAXIS] - eepromConfig.ma
 111:../src/main.c **** 			    sensors.mag10Hz[YAXIS] =   (float)rawMag[YAXIS].value * magScaleFactor[YAXIS] - eepromConfig
 112:../src/main.c **** 			    sensors.mag10Hz[ZAXIS] = -((float)rawMag[ZAXIS].value * magScaleFactor[ZAXIS] - eepromConfig
 113:../src/main.c **** 
 114:../src/main.c **** 			    newMagData = false;
 115:../src/main.c **** 			    magDataUpdate = true;
 116:../src/main.c ****             }
 117:../src/main.c **** 
 118:../src/main.c ****         	switch (eepromConfig.gpsType)
 119:../src/main.c **** 			{
 120:../src/main.c **** 			    ///////////////////////
 121:../src/main.c **** 
 122:../src/main.c **** 			    case NO_GPS:                // No GPS installed
 123:../src/main.c **** 			        break;
 124:../src/main.c **** 
 125:../src/main.c **** 			    ///////////////////////
 126:../src/main.c **** 
 127:../src/main.c **** 			    case MEDIATEK_3329_BINARY:  // MediaTek 3329 in binary mode
 128:../src/main.c **** 			    	decodeMediaTek3329BinaryMsg();
 129:../src/main.c **** 			    	break;
 130:../src/main.c **** 
 131:../src/main.c **** 				///////////////////////
 132:../src/main.c **** 
 133:../src/main.c **** 				case MEDIATEK_3329_NMEA:    // MediaTek 3329 in NMEA mode
 134:../src/main.c **** 				    decodeNMEAsentence();
 135:../src/main.c **** 	        	    break;
 136:../src/main.c **** 
 137:../src/main.c **** 			    ///////////////////////
 138:../src/main.c **** 
 139:../src/main.c **** 			    case UBLOX:                 // UBLOX in binary mode
 140:../src/main.c **** 			    	decodeUbloxMsg();
 141:../src/main.c **** 			    	break;
 142:../src/main.c **** 
 143:../src/main.c **** 			    ///////////////////////
 144:../src/main.c **** 			}
 145:../src/main.c **** 
 146:../src/main.c ****         	cliCom();
 147:../src/main.c **** 
 148:../src/main.c ****         	rfCom();
 149:../src/main.c **** 
 150:../src/main.c ****             executionTime10Hz = micros() - currentTime;
 151:../src/main.c ****         }
 152:../src/main.c **** 
 153:../src/main.c ****         ///////////////////////////////
 154:../src/main.c **** 
 155:../src/main.c ****         if (frame_500Hz)
 156:../src/main.c ****         {
 157:../src/main.c **** 			frame_500Hz = false;
 158:../src/main.c **** 
 159:../src/main.c ****        	    currentTime       = micros();
 160:../src/main.c ****        	    deltaTime500Hz    = currentTime - previous500HzTime;
 161:../src/main.c ****        	    previous500HzTime = currentTime;
 162:../src/main.c **** 
 163:../src/main.c ****        	    TIM_Cmd(TIM6, DISABLE);
 164:../src/main.c ****        	 	timerValue = TIM_GetCounter(TIM6);
 165:../src/main.c ****        	 	TIM_SetCounter(TIM6, 0);
 166:../src/main.c ****        	 	TIM_Cmd(TIM6, ENABLE);
 167:../src/main.c **** 
 168:../src/main.c ****        	 	dt500Hz = (float)timerValue * 0.0000005f;  // For integrations in 500 Hz loop
 169:../src/main.c **** 
 170:../src/main.c ****             sensors.accel500Hz[XAXIS] = -((float)accelSummedSamples500Hz[XAXIS] / 2.0f - eepromConf
 171:../src/main.c **** 			sensors.accel500Hz[YAXIS] =  ((float)accelSummedSamples500Hz[YAXIS] / 2.0f - eepromConfig.accelB
 172:../src/main.c **** 			sensors.accel500Hz[ZAXIS] = -((float)accelSummedSamples500Hz[ZAXIS] / 2.0f - eepromConfig.accelB
 173:../src/main.c **** 
 174:../src/main.c ****             sensors.accel500Hz[XAXIS] = computeFourthOrder500Hz(sensors.accel500Hz[XAXIS], &fourthO
 175:../src/main.c ****             sensors.accel500Hz[YAXIS] = computeFourthOrder500Hz(sensors.accel500Hz[YAXIS], &fourthO
 176:../src/main.c ****             sensors.accel500Hz[ZAXIS] = computeFourthOrder500Hz(sensors.accel500Hz[ZAXIS], &fourthO
 177:../src/main.c **** 
 178:../src/main.c ****             sensors.gyro500Hz[ROLL ] =  ((float)gyroSummedSamples500Hz[ROLL]  / 2.0f - gyroRTBias[R
 179:../src/main.c **** 			sensors.gyro500Hz[PITCH] =  ((float)gyroSummedSamples500Hz[PITCH] / 2.0f - gyroRTBias[PITCH]) * 
 180:../src/main.c ****             sensors.gyro500Hz[YAW  ] = -((float)gyroSummedSamples500Hz[YAW]   / 2.0f - gyroRTBias[Y
 181:../src/main.c **** 
 182:../src/main.c ****             MargAHRSupdate( sensors.gyro500Hz[ROLL],   sensors.gyro500Hz[PITCH],  sensors.gyro500Hz
 183:../src/main.c ****                             sensors.accel500Hz[XAXIS], sensors.accel500Hz[YAXIS], sensors.accel500H
 184:../src/main.c ****                             sensors.mag10Hz[XAXIS],    sensors.mag10Hz[YAXIS],    sensors.mag10Hz[Z
 185:../src/main.c ****                             eepromConfig.accelCutoff,
 186:../src/main.c ****                             magDataUpdate,
 187:../src/main.c ****                             dt500Hz );
 188:../src/main.c **** 
 189:../src/main.c ****             magDataUpdate = false;
 190:../src/main.c **** 
 191:../src/main.c ****             computeAxisCommands(dt500Hz);
 192:../src/main.c ****             mixTable();
 193:../src/main.c ****             writeServos();
 194:../src/main.c ****             writeMotors();
 195:../src/main.c **** 
 196:../src/main.c ****        	    executionTime500Hz = micros() - currentTime;
 197:../src/main.c **** 		}
 198:../src/main.c **** 
 199:../src/main.c ****         ///////////////////////////////
 200:../src/main.c **** 
 201:../src/main.c ****         if (frame_100Hz)
 202:../src/main.c ****         {
 203:../src/main.c ****         	frame_100Hz = false;
 204:../src/main.c **** 
 205:../src/main.c ****         	currentTime       = micros();
 206:../src/main.c **** 			deltaTime100Hz    = currentTime - previous100HzTime;
 207:../src/main.c **** 			previous100HzTime = currentTime;
 208:../src/main.c **** 
 209:../src/main.c **** 			TIM_Cmd(TIM7, DISABLE);
 210:../src/main.c **** 			timerValue = TIM_GetCounter(TIM7);
 211:../src/main.c **** 			TIM_SetCounter(TIM7, 0);
 212:../src/main.c **** 			TIM_Cmd(TIM7, ENABLE);
 213:../src/main.c **** 
 214:../src/main.c **** 			dt100Hz = (float)timerValue * 0.0000005f;  // For integrations in 100 Hz loop
 215:../src/main.c **** 
 216:../src/main.c **** 			sensors.accel100Hz[XAXIS] = -((float)accelSummedSamples100Hz[XAXIS] / 10.0f - eepromConfig.accel
 217:../src/main.c **** 			sensors.accel100Hz[YAXIS] =  ((float)accelSummedSamples100Hz[YAXIS] / 10.0f - eepromConfig.accel
 218:../src/main.c **** 			sensors.accel100Hz[ZAXIS] = -((float)accelSummedSamples100Hz[ZAXIS] / 10.0f - eepromConfig.accel
 219:../src/main.c **** 
 220:../src/main.c ****         	sensors.accel100Hz[XAXIS] = computeFourthOrder100Hz(sensors.accel100Hz[XAXIS], &fourthOrde
 221:../src/main.c ****             sensors.accel100Hz[YAXIS] = computeFourthOrder100Hz(sensors.accel100Hz[YAXIS], &fourthO
 222:../src/main.c ****             sensors.accel100Hz[ZAXIS] = computeFourthOrder100Hz(sensors.accel100Hz[ZAXIS], &fourthO
 223:../src/main.c **** 
 224:../src/main.c ****             createRotationMatrix();
 225:../src/main.c ****             bodyAccelToEarthAccel();
 226:../src/main.c ****             vertCompFilter(dt100Hz);
 227:../src/main.c **** 
 228:../src/main.c ****             // High Speed Telemetry Test Code Begin
 229:../src/main.c ****             if ( highSpeedTelem1Enabled == true )
 230:../src/main.c ****             {
 231:../src/main.c ****             	// 500 Hz Accels
 232:../src/main.c ****             	ftoa(sensors.accel500Hz[XAXIS], numberString); telemetryPrint(numberString); telemetry
 233:../src/main.c ****             	ftoa(sensors.accel500Hz[YAXIS], numberString); telemetryPrint(numberString); telemetry
 234:../src/main.c ****             	ftoa(sensors.accel500Hz[ZAXIS], numberString); telemetryPrint(numberString); telemetry
 235:../src/main.c ****             }
 236:../src/main.c **** 
 237:../src/main.c ****             if ( highSpeedTelem2Enabled == true )
 238:../src/main.c ****             {
 239:../src/main.c ****             	// 500 Hz Gyros
 240:../src/main.c ****             	ftoa(sensors.gyro500Hz[ROLL ], numberString); telemetryPrint(numberString); telemetryP
 241:../src/main.c ****              	ftoa(sensors.gyro500Hz[PITCH], numberString); telemetryPrint(numberString); telemetry
 242:../src/main.c ****             	ftoa(sensors.gyro500Hz[YAW  ], numberString); telemetryPrint(numberString); telemetryP
 243:../src/main.c ****             }
 244:../src/main.c **** 
 245:../src/main.c ****             if ( highSpeedTelem3Enabled == true )
 246:../src/main.c ****             {
 247:../src/main.c ****             	// Roll Rate, Roll Rate Command
 248:../src/main.c ****             	ftoa(sensors.gyro500Hz[ROLL], numberString); telemetryPrint(numberString); telemetryPr
 249:../src/main.c ****             	ftoa(rxCommand[ROLL],         numberString); telemetryPrint(numberString); telemetryPr
 250:../src/main.c ****             }
 251:../src/main.c **** 
 252:../src/main.c ****             if ( highSpeedTelem4Enabled == true )
 253:../src/main.c ****             {
 254:../src/main.c ****             	// Pitch Rate, Pitch Rate Command
 255:../src/main.c ****             	ftoa(sensors.gyro500Hz[PITCH], numberString); telemetryPrint(numberString); telemetryP
 256:../src/main.c ****             	ftoa(rxCommand[PITCH],         numberString); telemetryPrint(numberString); telemetryP
 257:../src/main.c ****             }
 258:../src/main.c **** 
 259:../src/main.c ****             if ( highSpeedTelem5Enabled == true )
 260:../src/main.c ****             {
 261:../src/main.c ****             	// Yaw Rate, Yaw Rate Command
 262:../src/main.c ****             	ftoa(sensors.gyro500Hz[YAW], numberString); telemetryPrint(numberString); telemetryPri
 263:../src/main.c ****             	ftoa(rxCommand[YAW],         numberString); telemetryPrint(numberString); telemetryPri
 264:../src/main.c ****             }
 265:../src/main.c **** 
 266:../src/main.c ****             if ( highSpeedTelem6Enabled == true )
 267:../src/main.c ****             {
 268:../src/main.c ****             	// 500 Hz Attitudes
 269:../src/main.c ****             	ftoa(sensors.attitude500Hz[ROLL ], numberString); telemetryPrint(numberString); teleme
 270:../src/main.c ****             	ftoa(sensors.attitude500Hz[PITCH], numberString); telemetryPrint(numberString); teleme
 271:../src/main.c ****             	ftoa(sensors.attitude500Hz[YAW  ], numberString); telemetryPrint(numberString); teleme
 272:../src/main.c ****             }
 273:../src/main.c ****             // High Speed Telemetry Test Code End
 274:../src/main.c **** 
 275:../src/main.c ****             executionTime100Hz = micros() - currentTime;
 276:../src/main.c ****         }
 277:../src/main.c **** 
 278:../src/main.c ****         ///////////////////////////////
 279:../src/main.c **** 
 280:../src/main.c ****         if (frame_5Hz)
 281:../src/main.c ****         {
 282:../src/main.c ****         	frame_5Hz = false;
 283:../src/main.c **** 
 284:../src/main.c ****         	currentTime     = micros();
 285:../src/main.c **** 			deltaTime5Hz    = currentTime - previous5HzTime;
 286:../src/main.c **** 			previous5HzTime = currentTime;
 287:../src/main.c **** 
 288:../src/main.c **** 			if (execUp == true)
 289:../src/main.c **** 			    GREEN_W_LED_TOGGLE;
 290:../src/main.c **** 
 291:../src/main.c ****         	executionTime5Hz = micros() - currentTime;
 292:../src/main.c ****         }
 293:../src/main.c **** 
 294:../src/main.c ****         ///////////////////////////////
 295:../src/main.c **** 
 296:../src/main.c ****         if (frame_1Hz)
 297:../src/main.c ****         {
 298:../src/main.c ****         	frame_1Hz = false;
 299:../src/main.c **** 
 300:../src/main.c ****         	currentTime     = micros();
 301:../src/main.c **** 			deltaTime1Hz    = currentTime - previous1HzTime;
 302:../src/main.c **** 			previous1HzTime = currentTime;
 303:../src/main.c **** 
 304:../src/main.c **** 			if (execUp == true)
 305:../src/main.c **** 				GREEN_E_LED_TOGGLE;
 306:../src/main.c **** 
 307:../src/main.c **** 			if (execUp == false)
 308:../src/main.c **** 			    execUpCount++;
 309:../src/main.c **** 
 310:../src/main.c **** 			if (execUpCount == 5)
 311:../src/main.c **** 			    execUp = true;
 312:../src/main.c **** 
 313:../src/main.c **** 			executionTime1Hz = micros() - currentTime;
 314:../src/main.c ****         }
 315:../src/main.c **** 
 316:../src/main.c ****         ////////////////////////////////
 317:../src/main.c ****     }
  79              		.loc 1 317 0
  80 0028 00BF     		nop
  81              	.L29:
  70:../src/main.c ****         if (frame_50Hz)
  82              		.loc 1 70 0
  83 002a 40F20003 		movw	r3, #:lower16:frame_50Hz
  84 002e C0F20003 		movt	r3, #:upper16:frame_50Hz
  85 0032 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  86 0034 002B     		cmp	r3, #0
  87 0036 00F08B80 		beq	.L2
  72:../src/main.c ****         	frame_50Hz = false;
  88              		.loc 1 72 0
  89 003a 40F20003 		movw	r3, #:lower16:frame_50Hz
  90 003e C0F20003 		movt	r3, #:upper16:frame_50Hz
  91 0042 4FF00002 		mov	r2, #0
  92 0046 1A70     		strb	r2, [r3, #0]
  74:../src/main.c ****         	currentTime      = micros();
  93              		.loc 1 74 0
  94 0048 FFF7FEFF 		bl	micros
  95 004c 0990     		str	r0, [sp, #36]
  75:../src/main.c **** 			deltaTime50Hz    = currentTime - previous50HzTime;
  96              		.loc 1 75 0
  97 004e 40F20003 		movw	r3, #:lower16:previous50HzTime
  98 0052 C0F20003 		movt	r3, #:upper16:previous50HzTime
  99 0056 1B68     		ldr	r3, [r3, #0]
 100 0058 099A     		ldr	r2, [sp, #36]
 101 005a D21A     		subs	r2, r2, r3
 102 005c 40F20003 		movw	r3, #:lower16:deltaTime50Hz
 103 0060 C0F20003 		movt	r3, #:upper16:deltaTime50Hz
 104 0064 1A60     		str	r2, [r3, #0]
  76:../src/main.c **** 			previous50HzTime = currentTime;
 105              		.loc 1 76 0
 106 0066 40F20003 		movw	r3, #:lower16:previous50HzTime
 107 006a C0F20003 		movt	r3, #:upper16:previous50HzTime
 108 006e 099A     		ldr	r2, [sp, #36]
 109 0070 1A60     		str	r2, [r3, #0]
  78:../src/main.c **** 			processFlightCommands();
 110              		.loc 1 78 0
 111 0072 FFF7FEFF 		bl	processFlightCommands
  80:../src/main.c **** 			if (eepromConfig.osdEnabled)
 112              		.loc 1 80 0
 113 0076 40F20003 		movw	r3, #:lower16:eepromConfig
 114 007a C0F20003 		movt	r3, #:upper16:eepromConfig
 115 007e 93F84433 		ldrb	r3, [r3, #836]	@ zero_extendqisi2
 116 0082 002B     		cmp	r3, #0
 117 0084 5AD0     		beq	.L3
  82:../src/main.c **** 				if (eepromConfig.osdDisplayAlt)
 118              		.loc 1 82 0
 119 0086 40F20003 		movw	r3, #:lower16:eepromConfig
 120 008a C0F20003 		movt	r3, #:upper16:eepromConfig
 121 008e 93F84733 		ldrb	r3, [r3, #839]	@ zero_extendqisi2
 122 0092 002B     		cmp	r3, #0
 123 0094 0AD0     		beq	.L4
  83:../src/main.c **** 				    displayAltitude(sensors.pressureAlt10Hz, 0.0f, DISENGAGED);
 124              		.loc 1 83 0
 125 0096 40F20003 		movw	r3, #:lower16:sensors
 126 009a C0F20003 		movt	r3, #:upper16:sensors
 127 009e DB6B     		ldr	r3, [r3, #60]	@ float
 128 00a0 1846     		mov	r0, r3	@ float
 129 00a2 8649     		ldr	r1, .L31	@ float
 130 00a4 4FF00002 		mov	r2, #0
 131 00a8 FFF7FEFF 		bl	displayAltitude
 132              	.L4:
  85:../src/main.c **** 				if (eepromConfig.osdDisplayAH)
 133              		.loc 1 85 0
 134 00ac 40F20003 		movw	r3, #:lower16:eepromConfig
 135 00b0 C0F20003 		movt	r3, #:upper16:eepromConfig
 136 00b4 93F84833 		ldrb	r3, [r3, #840]	@ zero_extendqisi2
 137 00b8 002B     		cmp	r3, #0
 138 00ba 13D0     		beq	.L5
  86:../src/main.c **** 				    displayArtificialHorizon(sensors.attitude500Hz[ROLL], sensors.attitude500Hz[PITCH], flightM
 139              		.loc 1 86 0
 140 00bc 40F20003 		movw	r3, #:lower16:sensors
 141 00c0 C0F20003 		movt	r3, #:upper16:sensors
 142 00c4 9969     		ldr	r1, [r3, #24]	@ float
 143 00c6 40F20003 		movw	r3, #:lower16:sensors
 144 00ca C0F20003 		movt	r3, #:upper16:sensors
 145 00ce DA69     		ldr	r2, [r3, #28]	@ float
 146 00d0 40F20003 		movw	r3, #:lower16:flightMode
 147 00d4 C0F20003 		movt	r3, #:upper16:flightMode
 148 00d8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 149 00da 0846     		mov	r0, r1	@ float
 150 00dc 1146     		mov	r1, r2	@ float
 151 00de 1A46     		mov	r2, r3
 152 00e0 FFF7FEFF 		bl	displayArtificialHorizon
 153              	.L5:
  88:../src/main.c **** 				if (eepromConfig.osdDisplayAtt)
 154              		.loc 1 88 0
 155 00e4 40F20003 		movw	r3, #:lower16:eepromConfig
 156 00e8 C0F20003 		movt	r3, #:upper16:eepromConfig
 157 00ec 93F84933 		ldrb	r3, [r3, #841]	@ zero_extendqisi2
 158 00f0 002B     		cmp	r3, #0
 159 00f2 13D0     		beq	.L6
  89:../src/main.c **** 				    displayAttitude(sensors.attitude500Hz[ROLL], sensors.attitude500Hz[PITCH], flightMode);
 160              		.loc 1 89 0
 161 00f4 40F20003 		movw	r3, #:lower16:sensors
 162 00f8 C0F20003 		movt	r3, #:upper16:sensors
 163 00fc 9969     		ldr	r1, [r3, #24]	@ float
 164 00fe 40F20003 		movw	r3, #:lower16:sensors
 165 0102 C0F20003 		movt	r3, #:upper16:sensors
 166 0106 DA69     		ldr	r2, [r3, #28]	@ float
 167 0108 40F20003 		movw	r3, #:lower16:flightMode
 168 010c C0F20003 		movt	r3, #:upper16:flightMode
 169 0110 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 170 0112 0846     		mov	r0, r1	@ float
 171 0114 1146     		mov	r1, r2	@ float
 172 0116 1A46     		mov	r2, r3
 173 0118 FFF7FEFF 		bl	displayAttitude
 174              	.L6:
  91:../src/main.c **** 				if (eepromConfig.osdDisplayHdg)
 175              		.loc 1 91 0
 176 011c 40F20003 		movw	r3, #:lower16:eepromConfig
 177 0120 C0F20003 		movt	r3, #:upper16:eepromConfig
 178 0124 93F84A33 		ldrb	r3, [r3, #842]	@ zero_extendqisi2
 179 0128 002B     		cmp	r3, #0
 180 012a 07D0     		beq	.L3
  92:../src/main.c **** 				    displayHeading(sensors.attitude500Hz[YAW]);
 181              		.loc 1 92 0
 182 012c 40F20003 		movw	r3, #:lower16:sensors
 183 0130 C0F20003 		movt	r3, #:upper16:sensors
 184 0134 1B6A     		ldr	r3, [r3, #32]	@ float
 185 0136 1846     		mov	r0, r3	@ float
 186 0138 FFF7FEFF 		bl	displayHeading
 187              	.L3:
  95:../src/main.c **** 			executionTime50Hz = micros() - currentTime;
 188              		.loc 1 95 0
 189 013c FFF7FEFF 		bl	micros
 190 0140 0246     		mov	r2, r0
 191 0142 099B     		ldr	r3, [sp, #36]
 192 0144 D21A     		subs	r2, r2, r3
 193 0146 40F20003 		movw	r3, #:lower16:executionTime50Hz
 194 014a C0F20003 		movt	r3, #:upper16:executionTime50Hz
 195 014e 1A60     		str	r2, [r3, #0]
 196              	.L2:
 100:../src/main.c ****         if (frame_10Hz)
 197              		.loc 1 100 0
 198 0150 40F20003 		movw	r3, #:lower16:frame_10Hz
 199 0154 C0F20003 		movt	r3, #:upper16:frame_10Hz
 200 0158 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 201 015a 002B     		cmp	r3, #0
 202 015c 00F0C380 		beq	.L7
 102:../src/main.c ****         	frame_10Hz = false;
 203              		.loc 1 102 0
 204 0160 40F20003 		movw	r3, #:lower16:frame_10Hz
 205 0164 C0F20003 		movt	r3, #:upper16:frame_10Hz
 206 0168 4FF00002 		mov	r2, #0
 207 016c 1A70     		strb	r2, [r3, #0]
 104:../src/main.c ****         	currentTime      = micros();
 208              		.loc 1 104 0
 209 016e FFF7FEFF 		bl	micros
 210 0172 0990     		str	r0, [sp, #36]
 105:../src/main.c **** 			deltaTime10Hz    = currentTime - previous10HzTime;
 211              		.loc 1 105 0
 212 0174 40F20003 		movw	r3, #:lower16:previous10HzTime
 213 0178 C0F20003 		movt	r3, #:upper16:previous10HzTime
 214 017c 1B68     		ldr	r3, [r3, #0]
 215 017e 099A     		ldr	r2, [sp, #36]
 216 0180 D21A     		subs	r2, r2, r3
 217 0182 40F20003 		movw	r3, #:lower16:deltaTime10Hz
 218 0186 C0F20003 		movt	r3, #:upper16:deltaTime10Hz
 219 018a 1A60     		str	r2, [r3, #0]
 106:../src/main.c **** 			previous10HzTime = currentTime;
 220              		.loc 1 106 0
 221 018c 40F20003 		movw	r3, #:lower16:previous10HzTime
 222 0190 C0F20003 		movt	r3, #:upper16:previous10HzTime
 223 0194 099A     		ldr	r2, [sp, #36]
 224 0196 1A60     		str	r2, [r3, #0]
 108:../src/main.c **** 			if (newMagData == true)
 225              		.loc 1 108 0
 226 0198 40F20003 		movw	r3, #:lower16:newMagData
 227 019c C0F20003 		movt	r3, #:upper16:newMagData
 228 01a0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 229 01a2 012B     		cmp	r3, #1
 230 01a4 71D1     		bne	.L8
 110:../src/main.c **** 				sensors.mag10Hz[XAXIS] = -((float)rawMag[XAXIS].value * magScaleFactor[XAXIS] - eepromConfig.ma
 231              		.loc 1 110 0
 232 01a6 40F20003 		movw	r3, #:lower16:rawMag
 233 01aa C0F20003 		movt	r3, #:upper16:rawMag
 234 01ae 1B88     		ldrh	r3, [r3, #0]
 235 01b0 1BB2     		sxth	r3, r3
 236 01b2 07EE903A 		fmsr	s15, r3	@ int
 237 01b6 B8EEE77A 		fsitos	s14, s15
 238 01ba 40F20003 		movw	r3, #:lower16:magScaleFactor
 239 01be C0F20003 		movt	r3, #:upper16:magScaleFactor
 240 01c2 D3ED007A 		flds	s15, [r3, #0]
 241 01c6 67EE277A 		fmuls	s15, s14, s15
 242 01ca 40F20003 		movw	r3, #:lower16:eepromConfig
 243 01ce C0F20003 		movt	r3, #:upper16:eepromConfig
 244 01d2 93ED0D7A 		flds	s14, [r3, #52]
 245 01d6 77EEC77A 		fsubs	s15, s15, s14
 246 01da F1EE677A 		fnegs	s15, s15
 247 01de 40F20003 		movw	r3, #:lower16:sensors
 248 01e2 C0F20003 		movt	r3, #:upper16:sensors
 249 01e6 C3ED0C7A 		fsts	s15, [r3, #48]
 111:../src/main.c **** 			    sensors.mag10Hz[YAXIS] =   (float)rawMag[YAXIS].value * magScaleFactor[YAXIS] - eepromConfig
 250              		.loc 1 111 0
 251 01ea 40F20003 		movw	r3, #:lower16:rawMag
 252 01ee C0F20003 		movt	r3, #:upper16:rawMag
 253 01f2 5B88     		ldrh	r3, [r3, #2]
 254 01f4 1BB2     		sxth	r3, r3
 255 01f6 07EE903A 		fmsr	s15, r3	@ int
 256 01fa B8EEE77A 		fsitos	s14, s15
 257 01fe 40F20003 		movw	r3, #:lower16:magScaleFactor
 258 0202 C0F20003 		movt	r3, #:upper16:magScaleFactor
 259 0206 D3ED017A 		flds	s15, [r3, #4]
 260 020a 67EE277A 		fmuls	s15, s14, s15
 261 020e 40F20003 		movw	r3, #:lower16:eepromConfig
 262 0212 C0F20003 		movt	r3, #:upper16:eepromConfig
 263 0216 93ED0E7A 		flds	s14, [r3, #56]
 264 021a 77EEC77A 		fsubs	s15, s15, s14
 265 021e 40F20003 		movw	r3, #:lower16:sensors
 266 0222 C0F20003 		movt	r3, #:upper16:sensors
 267 0226 C3ED0D7A 		fsts	s15, [r3, #52]
 112:../src/main.c **** 			    sensors.mag10Hz[ZAXIS] = -((float)rawMag[ZAXIS].value * magScaleFactor[ZAXIS] - eepromConfig
 268              		.loc 1 112 0
 269 022a 40F20003 		movw	r3, #:lower16:rawMag
 270 022e C0F20003 		movt	r3, #:upper16:rawMag
 271 0232 9B88     		ldrh	r3, [r3, #4]
 272 0234 1BB2     		sxth	r3, r3
 273 0236 07EE903A 		fmsr	s15, r3	@ int
 274 023a B8EEE77A 		fsitos	s14, s15
 275 023e 40F20003 		movw	r3, #:lower16:magScaleFactor
 276 0242 C0F20003 		movt	r3, #:upper16:magScaleFactor
 277 0246 D3ED027A 		flds	s15, [r3, #8]
 278 024a 67EE277A 		fmuls	s15, s14, s15
 279 024e 40F20003 		movw	r3, #:lower16:eepromConfig
 280 0252 C0F20003 		movt	r3, #:upper16:eepromConfig
 281 0256 93ED0F7A 		flds	s14, [r3, #60]
 282 025a 77EEC77A 		fsubs	s15, s15, s14
 283 025e F1EE677A 		fnegs	s15, s15
 284 0262 40F20003 		movw	r3, #:lower16:sensors
 285 0266 C0F20003 		movt	r3, #:upper16:sensors
 286 026a C3ED0E7A 		fsts	s15, [r3, #56]
 114:../src/main.c **** 			    newMagData = false;
 287              		.loc 1 114 0
 288 026e 40F20003 		movw	r3, #:lower16:newMagData
 289 0272 C0F20003 		movt	r3, #:upper16:newMagData
 290 0276 4FF00002 		mov	r2, #0
 291 027a 1A70     		strb	r2, [r3, #0]
 115:../src/main.c **** 			    magDataUpdate = true;
 292              		.loc 1 115 0
 293 027c 40F20003 		movw	r3, #:lower16:magDataUpdate
 294 0280 C0F20003 		movt	r3, #:upper16:magDataUpdate
 295 0284 4FF00102 		mov	r2, #1
 296 0288 1A70     		strb	r2, [r3, #0]
 297              	.L8:
 118:../src/main.c ****         	switch (eepromConfig.gpsType)
 298              		.loc 1 118 0
 299 028a 40F20003 		movw	r3, #:lower16:eepromConfig
 300 028e C0F20003 		movt	r3, #:upper16:eepromConfig
 301 0292 93F84B33 		ldrb	r3, [r3, #843]	@ zero_extendqisi2
 302 0296 032B     		cmp	r3, #3
 303 0298 17D8     		bhi	.L9
 304 029a 01A2     		adr	r2, .L14
 305 029c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 306              		.align	2
 307              	.L14:
 308 02a0 CB020000 		.word	.L9+1
 309 02a4 B1020000 		.word	.L11+1
 310 02a8 B7020000 		.word	.L12+1
 311 02ac C5020000 		.word	.L13+1
 312              	.L11:
 128:../src/main.c **** 			    	decodeMediaTek3329BinaryMsg();
 313              		.loc 1 128 0
 314 02b0 FFF7FEFF 		bl	decodeMediaTek3329BinaryMsg
 129:../src/main.c **** 			    	break;
 315              		.loc 1 129 0
 316 02b4 09E0     		b	.L9
 317              	.L12:
 134:../src/main.c **** 				    decodeNMEAsentence();
 318              		.loc 1 134 0
 319 02b6 FFF7FEFF 		bl	decodeNMEAsentence
 135:../src/main.c **** 	        	    break;
 320              		.loc 1 135 0
 321 02ba 06E0     		b	.L9
 322              	.L32:
 323              		.align	2
 324              	.L31:
 325 02bc 00000000 		.word	0
 326 02c0 BD370635 		.word	889599933
 327              	.L13:
 140:../src/main.c **** 			    	decodeUbloxMsg();
 328              		.loc 1 140 0
 329 02c4 FFF7FEFF 		bl	decodeUbloxMsg
 141:../src/main.c **** 			    	break;
 330              		.loc 1 141 0
 331 02c8 00BF     		nop
 332              	.L9:
 146:../src/main.c ****         	cliCom();
 333              		.loc 1 146 0
 334 02ca FFF7FEFF 		bl	cliCom
 148:../src/main.c ****         	rfCom();
 335              		.loc 1 148 0
 336 02ce FFF7FEFF 		bl	rfCom
 150:../src/main.c ****             executionTime10Hz = micros() - currentTime;
 337              		.loc 1 150 0
 338 02d2 FFF7FEFF 		bl	micros
 339 02d6 0246     		mov	r2, r0
 340 02d8 099B     		ldr	r3, [sp, #36]
 341 02da D21A     		subs	r2, r2, r3
 342 02dc 40F20003 		movw	r3, #:lower16:executionTime10Hz
 343 02e0 C0F20003 		movt	r3, #:upper16:executionTime10Hz
 344 02e4 1A60     		str	r2, [r3, #0]
 345              	.L7:
 155:../src/main.c ****         if (frame_500Hz)
 346              		.loc 1 155 0
 347 02e6 40F20003 		movw	r3, #:lower16:frame_500Hz
 348 02ea C0F20003 		movt	r3, #:upper16:frame_500Hz
 349 02ee 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 350 02f0 002B     		cmp	r3, #0
 351 02f2 00F0BE81 		beq	.L15
 157:../src/main.c **** 			frame_500Hz = false;
 352              		.loc 1 157 0
 353 02f6 40F20003 		movw	r3, #:lower16:frame_500Hz
 354 02fa C0F20003 		movt	r3, #:upper16:frame_500Hz
 355 02fe 4FF00002 		mov	r2, #0
 356 0302 1A70     		strb	r2, [r3, #0]
 159:../src/main.c ****        	    currentTime       = micros();
 357              		.loc 1 159 0
 358 0304 FFF7FEFF 		bl	micros
 359 0308 0990     		str	r0, [sp, #36]
 160:../src/main.c ****        	    deltaTime500Hz    = currentTime - previous500HzTime;
 360              		.loc 1 160 0
 361 030a 40F20003 		movw	r3, #:lower16:previous500HzTime
 362 030e C0F20003 		movt	r3, #:upper16:previous500HzTime
 363 0312 1B68     		ldr	r3, [r3, #0]
 364 0314 099A     		ldr	r2, [sp, #36]
 365 0316 D21A     		subs	r2, r2, r3
 366 0318 40F20003 		movw	r3, #:lower16:deltaTime500Hz
 367 031c C0F20003 		movt	r3, #:upper16:deltaTime500Hz
 368 0320 1A60     		str	r2, [r3, #0]
 161:../src/main.c ****        	    previous500HzTime = currentTime;
 369              		.loc 1 161 0
 370 0322 40F20003 		movw	r3, #:lower16:previous500HzTime
 371 0326 C0F20003 		movt	r3, #:upper16:previous500HzTime
 372 032a 099A     		ldr	r2, [sp, #36]
 373 032c 1A60     		str	r2, [r3, #0]
 163:../src/main.c ****        	    TIM_Cmd(TIM6, DISABLE);
 374              		.loc 1 163 0
 375 032e 4FF48050 		mov	r0, #4096
 376 0332 C4F20000 		movt	r0, 16384
 377 0336 4FF00001 		mov	r1, #0
 378 033a FFF7FEFF 		bl	TIM_Cmd
 164:../src/main.c ****        	 	timerValue = TIM_GetCounter(TIM6);
 379              		.loc 1 164 0
 380 033e 4FF48050 		mov	r0, #4096
 381 0342 C4F20000 		movt	r0, 16384
 382 0346 FFF7FEFF 		bl	TIM_GetCounter
 383 034a 0346     		mov	r3, r0
 384 034c 9AB2     		uxth	r2, r3
 385 034e 40F20003 		movw	r3, #:lower16:timerValue
 386 0352 C0F20003 		movt	r3, #:upper16:timerValue
 387 0356 1A80     		strh	r2, [r3, #0]	@ movhi
 165:../src/main.c ****        	 	TIM_SetCounter(TIM6, 0);
 388              		.loc 1 165 0
 389 0358 4FF48050 		mov	r0, #4096
 390 035c C4F20000 		movt	r0, 16384
 391 0360 4FF00001 		mov	r1, #0
 392 0364 FFF7FEFF 		bl	TIM_SetCounter
 166:../src/main.c ****        	 	TIM_Cmd(TIM6, ENABLE);
 393              		.loc 1 166 0
 394 0368 4FF48050 		mov	r0, #4096
 395 036c C4F20000 		movt	r0, 16384
 396 0370 4FF00101 		mov	r1, #1
 397 0374 FFF7FEFF 		bl	TIM_Cmd
 168:../src/main.c ****        	 	dt500Hz = (float)timerValue * 0.0000005f;  // For integrations in 500 Hz loop
 398              		.loc 1 168 0
 399 0378 40F20003 		movw	r3, #:lower16:timerValue
 400 037c C0F20003 		movt	r3, #:upper16:timerValue
 401 0380 1B88     		ldrh	r3, [r3, #0]
 402 0382 07EE903A 		fmsr	s15, r3	@ int
 403 0386 B8EE677A 		fuitos	s14, s15
 404 038a 5FED337A 		flds	s15, .L31+4
 405 038e 67EE277A 		fmuls	s15, s14, s15
 406 0392 40F20003 		movw	r3, #:lower16:dt500Hz
 407 0396 C0F20003 		movt	r3, #:upper16:dt500Hz
 408 039a C3ED007A 		fsts	s15, [r3, #0]
 170:../src/main.c ****             sensors.accel500Hz[XAXIS] = -((float)accelSummedSamples500Hz[XAXIS] / 2.0f - eepromConf
 409              		.loc 1 170 0
 410 039e 40F20003 		movw	r3, #:lower16:accelSummedSamples500Hz
 411 03a2 C0F20003 		movt	r3, #:upper16:accelSummedSamples500Hz
 412 03a6 1B68     		ldr	r3, [r3, #0]
 413 03a8 07EE903A 		fmsr	s15, r3	@ int
 414 03ac B8EEE77A 		fsitos	s14, s15
 415 03b0 F0EE007A 		fconsts	s15, #0
 416 03b4 C7EE277A 		fdivs	s15, s14, s15
 417 03b8 40F20003 		movw	r3, #:lower16:eepromConfig
 418 03bc C0F20003 		movt	r3, #:upper16:eepromConfig
 419 03c0 93ED017A 		flds	s14, [r3, #4]
 420 03c4 77EEC77A 		fsubs	s15, s15, s14
 421 03c8 B1EE677A 		fnegs	s14, s15
 422 03cc 40F20003 		movw	r3, #:lower16:eepromConfig
 423 03d0 C0F20003 		movt	r3, #:upper16:eepromConfig
 424 03d4 D3ED047A 		flds	s15, [r3, #16]
 425 03d8 67EE277A 		fmuls	s15, s14, s15
 426 03dc 40F20003 		movw	r3, #:lower16:sensors
 427 03e0 C0F20003 		movt	r3, #:upper16:sensors
 428 03e4 C3ED007A 		fsts	s15, [r3, #0]
 171:../src/main.c **** 			sensors.accel500Hz[YAXIS] =  ((float)accelSummedSamples500Hz[YAXIS] / 2.0f - eepromConfig.accelB
 429              		.loc 1 171 0
 430 03e8 40F20003 		movw	r3, #:lower16:accelSummedSamples500Hz
 431 03ec C0F20003 		movt	r3, #:upper16:accelSummedSamples500Hz
 432 03f0 5B68     		ldr	r3, [r3, #4]
 433 03f2 07EE903A 		fmsr	s15, r3	@ int
 434 03f6 B8EEE77A 		fsitos	s14, s15
 435 03fa F0EE007A 		fconsts	s15, #0
 436 03fe C7EE277A 		fdivs	s15, s14, s15
 437 0402 40F20003 		movw	r3, #:lower16:eepromConfig
 438 0406 C0F20003 		movt	r3, #:upper16:eepromConfig
 439 040a 93ED027A 		flds	s14, [r3, #8]
 440 040e 37EEC77A 		fsubs	s14, s15, s14
 441 0412 40F20003 		movw	r3, #:lower16:eepromConfig
 442 0416 C0F20003 		movt	r3, #:upper16:eepromConfig
 443 041a D3ED057A 		flds	s15, [r3, #20]
 444 041e 67EE277A 		fmuls	s15, s14, s15
 445 0422 40F20003 		movw	r3, #:lower16:sensors
 446 0426 C0F20003 		movt	r3, #:upper16:sensors
 447 042a C3ED017A 		fsts	s15, [r3, #4]
 172:../src/main.c **** 			sensors.accel500Hz[ZAXIS] = -((float)accelSummedSamples500Hz[ZAXIS] / 2.0f - eepromConfig.accelB
 448              		.loc 1 172 0
 449 042e 40F20003 		movw	r3, #:lower16:accelSummedSamples500Hz
 450 0432 C0F20003 		movt	r3, #:upper16:accelSummedSamples500Hz
 451 0436 9B68     		ldr	r3, [r3, #8]
 452 0438 07EE903A 		fmsr	s15, r3	@ int
 453 043c B8EEE77A 		fsitos	s14, s15
 454 0440 F0EE007A 		fconsts	s15, #0
 455 0444 C7EE277A 		fdivs	s15, s14, s15
 456 0448 40F20003 		movw	r3, #:lower16:eepromConfig
 457 044c C0F20003 		movt	r3, #:upper16:eepromConfig
 458 0450 93ED037A 		flds	s14, [r3, #12]
 459 0454 77EEC77A 		fsubs	s15, s15, s14
 460 0458 B1EE677A 		fnegs	s14, s15
 461 045c 40F20003 		movw	r3, #:lower16:eepromConfig
 462 0460 C0F20003 		movt	r3, #:upper16:eepromConfig
 463 0464 D3ED067A 		flds	s15, [r3, #24]
 464 0468 67EE277A 		fmuls	s15, s14, s15
 465 046c 40F20003 		movw	r3, #:lower16:sensors
 466 0470 C0F20003 		movt	r3, #:upper16:sensors
 467 0474 C3ED027A 		fsts	s15, [r3, #8]
 174:../src/main.c ****             sensors.accel500Hz[XAXIS] = computeFourthOrder500Hz(sensors.accel500Hz[XAXIS], &fourthO
 468              		.loc 1 174 0
 469 0478 40F20003 		movw	r3, #:lower16:sensors
 470 047c C0F20003 		movt	r3, #:upper16:sensors
 471 0480 1B68     		ldr	r3, [r3, #0]	@ float
 472 0482 1846     		mov	r0, r3	@ float
 473 0484 40F20001 		movw	r1, #:lower16:fourthOrder500Hz
 474 0488 C0F20001 		movt	r1, #:upper16:fourthOrder500Hz
 475 048c FFF7FEFF 		bl	computeFourthOrder500Hz
 476 0490 0246     		mov	r2, r0	@ float
 477 0492 40F20003 		movw	r3, #:lower16:sensors
 478 0496 C0F20003 		movt	r3, #:upper16:sensors
 479 049a 1A60     		str	r2, [r3, #0]	@ float
 175:../src/main.c ****             sensors.accel500Hz[YAXIS] = computeFourthOrder500Hz(sensors.accel500Hz[YAXIS], &fourthO
 480              		.loc 1 175 0
 481 049c 40F20003 		movw	r3, #:lower16:sensors
 482 04a0 C0F20003 		movt	r3, #:upper16:sensors
 483 04a4 5B68     		ldr	r3, [r3, #4]	@ float
 484 04a6 1846     		mov	r0, r3	@ float
 485 04a8 E249     		ldr	r1, .L33
 486 04aa FFF7FEFF 		bl	computeFourthOrder500Hz
 487 04ae 0246     		mov	r2, r0	@ float
 488 04b0 40F20003 		movw	r3, #:lower16:sensors
 489 04b4 C0F20003 		movt	r3, #:upper16:sensors
 490 04b8 5A60     		str	r2, [r3, #4]	@ float
 176:../src/main.c ****             sensors.accel500Hz[ZAXIS] = computeFourthOrder500Hz(sensors.accel500Hz[ZAXIS], &fourthO
 491              		.loc 1 176 0
 492 04ba 40F20003 		movw	r3, #:lower16:sensors
 493 04be C0F20003 		movt	r3, #:upper16:sensors
 494 04c2 9B68     		ldr	r3, [r3, #8]	@ float
 495 04c4 1846     		mov	r0, r3	@ float
 496 04c6 DC49     		ldr	r1, .L33+4
 497 04c8 FFF7FEFF 		bl	computeFourthOrder500Hz
 498 04cc 0246     		mov	r2, r0	@ float
 499 04ce 40F20003 		movw	r3, #:lower16:sensors
 500 04d2 C0F20003 		movt	r3, #:upper16:sensors
 501 04d6 9A60     		str	r2, [r3, #8]	@ float
 178:../src/main.c ****             sensors.gyro500Hz[ROLL ] =  ((float)gyroSummedSamples500Hz[ROLL]  / 2.0f - gyroRTBias[R
 502              		.loc 1 178 0
 503 04d8 40F20003 		movw	r3, #:lower16:gyroSummedSamples500Hz
 504 04dc C0F20003 		movt	r3, #:upper16:gyroSummedSamples500Hz
 505 04e0 1B68     		ldr	r3, [r3, #0]
 506 04e2 07EE903A 		fmsr	s15, r3	@ int
 507 04e6 B8EEE77A 		fsitos	s14, s15
 508 04ea F0EE007A 		fconsts	s15, #0
 509 04ee C7EE277A 		fdivs	s15, s14, s15
 510 04f2 40F20003 		movw	r3, #:lower16:gyroRTBias
 511 04f6 C0F20003 		movt	r3, #:upper16:gyroRTBias
 512 04fa 93ED007A 		flds	s14, [r3, #0]
 513 04fe 37EEC77A 		fsubs	s14, s15, s14
 514 0502 DFEDCE7A 		flds	s15, .L33+8
 515 0506 67EE277A 		fmuls	s15, s14, s15
 516 050a 40F20003 		movw	r3, #:lower16:sensors
 517 050e C0F20003 		movt	r3, #:upper16:sensors
 518 0512 C3ED097A 		fsts	s15, [r3, #36]
 179:../src/main.c **** 			sensors.gyro500Hz[PITCH] =  ((float)gyroSummedSamples500Hz[PITCH] / 2.0f - gyroRTBias[PITCH]) * 
 519              		.loc 1 179 0
 520 0516 40F20003 		movw	r3, #:lower16:gyroSummedSamples500Hz
 521 051a C0F20003 		movt	r3, #:upper16:gyroSummedSamples500Hz
 522 051e 5B68     		ldr	r3, [r3, #4]
 523 0520 07EE903A 		fmsr	s15, r3	@ int
 524 0524 B8EEE77A 		fsitos	s14, s15
 525 0528 F0EE007A 		fconsts	s15, #0
 526 052c C7EE277A 		fdivs	s15, s14, s15
 527 0530 40F20003 		movw	r3, #:lower16:gyroRTBias
 528 0534 C0F20003 		movt	r3, #:upper16:gyroRTBias
 529 0538 93ED017A 		flds	s14, [r3, #4]
 530 053c 37EEC77A 		fsubs	s14, s15, s14
 531 0540 DFEDBE7A 		flds	s15, .L33+8
 532 0544 67EE277A 		fmuls	s15, s14, s15
 533 0548 40F20003 		movw	r3, #:lower16:sensors
 534 054c C0F20003 		movt	r3, #:upper16:sensors
 535 0550 C3ED0A7A 		fsts	s15, [r3, #40]
 180:../src/main.c ****             sensors.gyro500Hz[YAW  ] = -((float)gyroSummedSamples500Hz[YAW]   / 2.0f - gyroRTBias[Y
 536              		.loc 1 180 0
 537 0554 40F20003 		movw	r3, #:lower16:gyroSummedSamples500Hz
 538 0558 C0F20003 		movt	r3, #:upper16:gyroSummedSamples500Hz
 539 055c 9B68     		ldr	r3, [r3, #8]
 540 055e 07EE903A 		fmsr	s15, r3	@ int
 541 0562 B8EEE77A 		fsitos	s14, s15
 542 0566 F0EE007A 		fconsts	s15, #0
 543 056a C7EE277A 		fdivs	s15, s14, s15
 544 056e 40F20003 		movw	r3, #:lower16:gyroRTBias
 545 0572 C0F20003 		movt	r3, #:upper16:gyroRTBias
 546 0576 93ED027A 		flds	s14, [r3, #8]
 547 057a 77EEC77A 		fsubs	s15, s15, s14
 548 057e B1EE677A 		fnegs	s14, s15
 549 0582 DFEDAE7A 		flds	s15, .L33+8
 550 0586 67EE277A 		fmuls	s15, s14, s15
 551 058a 40F20003 		movw	r3, #:lower16:sensors
 552 058e C0F20003 		movt	r3, #:upper16:sensors
 553 0592 C3ED0B7A 		fsts	s15, [r3, #44]
 182:../src/main.c ****             MargAHRSupdate( sensors.gyro500Hz[ROLL],   sensors.gyro500Hz[PITCH],  sensors.gyro500Hz
 554              		.loc 1 182 0
 555 0596 40F20003 		movw	r3, #:lower16:sensors
 556 059a C0F20003 		movt	r3, #:upper16:sensors
 557 059e 586A     		ldr	r0, [r3, #36]	@ float
 558 05a0 40F20003 		movw	r3, #:lower16:sensors
 559 05a4 C0F20003 		movt	r3, #:upper16:sensors
 560 05a8 996A     		ldr	r1, [r3, #40]	@ float
 561 05aa 40F20003 		movw	r3, #:lower16:sensors
 562 05ae C0F20003 		movt	r3, #:upper16:sensors
 563 05b2 DA6A     		ldr	r2, [r3, #44]	@ float
 564 05b4 40F20003 		movw	r3, #:lower16:sensors
 565 05b8 C0F20003 		movt	r3, #:upper16:sensors
 566 05bc 1C68     		ldr	r4, [r3, #0]	@ float
 567 05be 40F20003 		movw	r3, #:lower16:sensors
 568 05c2 C0F20003 		movt	r3, #:upper16:sensors
 569 05c6 D3F80490 		ldr	r9, [r3, #4]	@ float
 570 05ca 40F20003 		movw	r3, #:lower16:sensors
 571 05ce C0F20003 		movt	r3, #:upper16:sensors
 572 05d2 D3F80880 		ldr	r8, [r3, #8]	@ float
 573 05d6 40F20003 		movw	r3, #:lower16:sensors
 574 05da C0F20003 		movt	r3, #:upper16:sensors
 575 05de D3F830C0 		ldr	ip, [r3, #48]	@ float
 576 05e2 40F20003 		movw	r3, #:lower16:sensors
 577 05e6 C0F20003 		movt	r3, #:upper16:sensors
 578 05ea D3F834E0 		ldr	lr, [r3, #52]	@ float
 579 05ee 40F20003 		movw	r3, #:lower16:sensors
 580 05f2 C0F20003 		movt	r3, #:upper16:sensors
 581 05f6 9F6B     		ldr	r7, [r3, #56]	@ float
 582 05f8 40F20003 		movw	r3, #:lower16:eepromConfig
 583 05fc C0F20003 		movt	r3, #:upper16:eepromConfig
 584 0600 1E6C     		ldr	r6, [r3, #64]	@ float
 585 0602 40F20003 		movw	r3, #:lower16:magDataUpdate
 586 0606 C0F20003 		movt	r3, #:upper16:magDataUpdate
 587 060a 1D78     		ldrb	r5, [r3, #0]	@ zero_extendqisi2
 588 060c 40F20003 		movw	r3, #:lower16:dt500Hz
 589 0610 C0F20003 		movt	r3, #:upper16:dt500Hz
 590 0614 1B68     		ldr	r3, [r3, #0]	@ float
 591 0616 CDF80090 		str	r9, [sp, #0]	@ float
 592 061a CDF80480 		str	r8, [sp, #4]	@ float
 593 061e CDF808C0 		str	ip, [sp, #8]	@ float
 594 0622 CDF80CE0 		str	lr, [sp, #12]	@ float
 595 0626 0497     		str	r7, [sp, #16]	@ float
 596 0628 0596     		str	r6, [sp, #20]	@ float
 597 062a 0695     		str	r5, [sp, #24]
 598 062c 0793     		str	r3, [sp, #28]	@ float
 599 062e 2346     		mov	r3, r4	@ float
 600 0630 FFF7FEFF 		bl	MargAHRSupdate
 189:../src/main.c ****             magDataUpdate = false;
 601              		.loc 1 189 0
 602 0634 40F20003 		movw	r3, #:lower16:magDataUpdate
 603 0638 C0F20003 		movt	r3, #:upper16:magDataUpdate
 604 063c 4FF00002 		mov	r2, #0
 605 0640 1A70     		strb	r2, [r3, #0]
 191:../src/main.c ****             computeAxisCommands(dt500Hz);
 606              		.loc 1 191 0
 607 0642 40F20003 		movw	r3, #:lower16:dt500Hz
 608 0646 C0F20003 		movt	r3, #:upper16:dt500Hz
 609 064a 1B68     		ldr	r3, [r3, #0]	@ float
 610 064c 1846     		mov	r0, r3	@ float
 611 064e FFF7FEFF 		bl	computeAxisCommands
 192:../src/main.c ****             mixTable();
 612              		.loc 1 192 0
 613 0652 FFF7FEFF 		bl	mixTable
 193:../src/main.c ****             writeServos();
 614              		.loc 1 193 0
 615 0656 FFF7FEFF 		bl	writeServos
 194:../src/main.c ****             writeMotors();
 616              		.loc 1 194 0
 617 065a FFF7FEFF 		bl	writeMotors
 196:../src/main.c ****        	    executionTime500Hz = micros() - currentTime;
 618              		.loc 1 196 0
 619 065e FFF7FEFF 		bl	micros
 620 0662 0246     		mov	r2, r0
 621 0664 099B     		ldr	r3, [sp, #36]
 622 0666 D21A     		subs	r2, r2, r3
 623 0668 40F20003 		movw	r3, #:lower16:executionTime500Hz
 624 066c C0F20003 		movt	r3, #:upper16:executionTime500Hz
 625 0670 1A60     		str	r2, [r3, #0]
 626              	.L15:
 201:../src/main.c ****         if (frame_100Hz)
 627              		.loc 1 201 0
 628 0672 40F20003 		movw	r3, #:lower16:frame_100Hz
 629 0676 C0F20003 		movt	r3, #:upper16:frame_100Hz
 630 067a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 631 067c 002B     		cmp	r3, #0
 632 067e 00F0A982 		beq	.L16
 203:../src/main.c ****         	frame_100Hz = false;
 633              		.loc 1 203 0
 634 0682 40F20003 		movw	r3, #:lower16:frame_100Hz
 635 0686 C0F20003 		movt	r3, #:upper16:frame_100Hz
 636 068a 4FF00002 		mov	r2, #0
 637 068e 1A70     		strb	r2, [r3, #0]
 205:../src/main.c ****         	currentTime       = micros();
 638              		.loc 1 205 0
 639 0690 FFF7FEFF 		bl	micros
 640 0694 0990     		str	r0, [sp, #36]
 206:../src/main.c **** 			deltaTime100Hz    = currentTime - previous100HzTime;
 641              		.loc 1 206 0
 642 0696 40F20003 		movw	r3, #:lower16:previous100HzTime
 643 069a C0F20003 		movt	r3, #:upper16:previous100HzTime
 644 069e 1B68     		ldr	r3, [r3, #0]
 645 06a0 099A     		ldr	r2, [sp, #36]
 646 06a2 D21A     		subs	r2, r2, r3
 647 06a4 40F20003 		movw	r3, #:lower16:deltaTime100Hz
 648 06a8 C0F20003 		movt	r3, #:upper16:deltaTime100Hz
 649 06ac 1A60     		str	r2, [r3, #0]
 207:../src/main.c **** 			previous100HzTime = currentTime;
 650              		.loc 1 207 0
 651 06ae 40F20003 		movw	r3, #:lower16:previous100HzTime
 652 06b2 C0F20003 		movt	r3, #:upper16:previous100HzTime
 653 06b6 099A     		ldr	r2, [sp, #36]
 654 06b8 1A60     		str	r2, [r3, #0]
 209:../src/main.c **** 			TIM_Cmd(TIM7, DISABLE);
 655              		.loc 1 209 0
 656 06ba 4FF4A050 		mov	r0, #5120
 657 06be C4F20000 		movt	r0, 16384
 658 06c2 4FF00001 		mov	r1, #0
 659 06c6 FFF7FEFF 		bl	TIM_Cmd
 210:../src/main.c **** 			timerValue = TIM_GetCounter(TIM7);
 660              		.loc 1 210 0
 661 06ca 4FF4A050 		mov	r0, #5120
 662 06ce C4F20000 		movt	r0, 16384
 663 06d2 FFF7FEFF 		bl	TIM_GetCounter
 664 06d6 0346     		mov	r3, r0
 665 06d8 9AB2     		uxth	r2, r3
 666 06da 40F20003 		movw	r3, #:lower16:timerValue
 667 06de C0F20003 		movt	r3, #:upper16:timerValue
 668 06e2 1A80     		strh	r2, [r3, #0]	@ movhi
 211:../src/main.c **** 			TIM_SetCounter(TIM7, 0);
 669              		.loc 1 211 0
 670 06e4 4FF4A050 		mov	r0, #5120
 671 06e8 C4F20000 		movt	r0, 16384
 672 06ec 4FF00001 		mov	r1, #0
 673 06f0 FFF7FEFF 		bl	TIM_SetCounter
 212:../src/main.c **** 			TIM_Cmd(TIM7, ENABLE);
 674              		.loc 1 212 0
 675 06f4 4FF4A050 		mov	r0, #5120
 676 06f8 C4F20000 		movt	r0, 16384
 677 06fc 4FF00101 		mov	r1, #1
 678 0700 FFF7FEFF 		bl	TIM_Cmd
 214:../src/main.c **** 			dt100Hz = (float)timerValue * 0.0000005f;  // For integrations in 100 Hz loop
 679              		.loc 1 214 0
 680 0704 40F20003 		movw	r3, #:lower16:timerValue
 681 0708 C0F20003 		movt	r3, #:upper16:timerValue
 682 070c 1B88     		ldrh	r3, [r3, #0]
 683 070e 07EE903A 		fmsr	s15, r3	@ int
 684 0712 B8EE677A 		fuitos	s14, s15
 685 0716 DFED4A7A 		flds	s15, .L33+12
 686 071a 67EE277A 		fmuls	s15, s14, s15
 687 071e 40F20003 		movw	r3, #:lower16:dt100Hz
 688 0722 C0F20003 		movt	r3, #:upper16:dt100Hz
 689 0726 C3ED007A 		fsts	s15, [r3, #0]
 216:../src/main.c **** 			sensors.accel100Hz[XAXIS] = -((float)accelSummedSamples100Hz[XAXIS] / 10.0f - eepromConfig.accel
 690              		.loc 1 216 0
 691 072a 40F20003 		movw	r3, #:lower16:accelSummedSamples100Hz
 692 072e C0F20003 		movt	r3, #:upper16:accelSummedSamples100Hz
 693 0732 1B68     		ldr	r3, [r3, #0]
 694 0734 07EE903A 		fmsr	s15, r3	@ int
 695 0738 B8EEE77A 		fsitos	s14, s15
 696 073c F2EE047A 		fconsts	s15, #36
 697 0740 C7EE277A 		fdivs	s15, s14, s15
 698 0744 40F20003 		movw	r3, #:lower16:eepromConfig
 699 0748 C0F20003 		movt	r3, #:upper16:eepromConfig
 700 074c 93ED017A 		flds	s14, [r3, #4]
 701 0750 77EEC77A 		fsubs	s15, s15, s14
 702 0754 B1EE677A 		fnegs	s14, s15
 703 0758 40F20003 		movw	r3, #:lower16:eepromConfig
 704 075c C0F20003 		movt	r3, #:upper16:eepromConfig
 705 0760 D3ED047A 		flds	s15, [r3, #16]
 706 0764 67EE277A 		fmuls	s15, s14, s15
 707 0768 40F20003 		movw	r3, #:lower16:sensors
 708 076c C0F20003 		movt	r3, #:upper16:sensors
 709 0770 C3ED037A 		fsts	s15, [r3, #12]
 217:../src/main.c **** 			sensors.accel100Hz[YAXIS] =  ((float)accelSummedSamples100Hz[YAXIS] / 10.0f - eepromConfig.accel
 710              		.loc 1 217 0
 711 0774 40F20003 		movw	r3, #:lower16:accelSummedSamples100Hz
 712 0778 C0F20003 		movt	r3, #:upper16:accelSummedSamples100Hz
 713 077c 5B68     		ldr	r3, [r3, #4]
 714 077e 07EE903A 		fmsr	s15, r3	@ int
 715 0782 B8EEE77A 		fsitos	s14, s15
 716 0786 F2EE047A 		fconsts	s15, #36
 717 078a C7EE277A 		fdivs	s15, s14, s15
 718 078e 40F20003 		movw	r3, #:lower16:eepromConfig
 719 0792 C0F20003 		movt	r3, #:upper16:eepromConfig
 720 0796 93ED027A 		flds	s14, [r3, #8]
 721 079a 37EEC77A 		fsubs	s14, s15, s14
 722 079e 40F20003 		movw	r3, #:lower16:eepromConfig
 723 07a2 C0F20003 		movt	r3, #:upper16:eepromConfig
 724 07a6 D3ED057A 		flds	s15, [r3, #20]
 725 07aa 67EE277A 		fmuls	s15, s14, s15
 726 07ae 40F20003 		movw	r3, #:lower16:sensors
 727 07b2 C0F20003 		movt	r3, #:upper16:sensors
 728 07b6 C3ED047A 		fsts	s15, [r3, #16]
 218:../src/main.c **** 			sensors.accel100Hz[ZAXIS] = -((float)accelSummedSamples100Hz[ZAXIS] / 10.0f - eepromConfig.accel
 729              		.loc 1 218 0
 730 07ba 40F20003 		movw	r3, #:lower16:accelSummedSamples100Hz
 731 07be C0F20003 		movt	r3, #:upper16:accelSummedSamples100Hz
 732 07c2 9B68     		ldr	r3, [r3, #8]
 733 07c4 07EE903A 		fmsr	s15, r3	@ int
 734 07c8 B8EEE77A 		fsitos	s14, s15
 735 07cc F2EE047A 		fconsts	s15, #36
 736 07d0 C7EE277A 		fdivs	s15, s14, s15
 737 07d4 40F20003 		movw	r3, #:lower16:eepromConfig
 738 07d8 C0F20003 		movt	r3, #:upper16:eepromConfig
 739 07dc 93ED037A 		flds	s14, [r3, #12]
 740 07e0 77EEC77A 		fsubs	s15, s15, s14
 741 07e4 B1EE677A 		fnegs	s14, s15
 742 07e8 40F20003 		movw	r3, #:lower16:eepromConfig
 743 07ec C0F20003 		movt	r3, #:upper16:eepromConfig
 744 07f0 D3ED067A 		flds	s15, [r3, #24]
 745 07f4 67EE277A 		fmuls	s15, s14, s15
 746 07f8 40F20003 		movw	r3, #:lower16:sensors
 747 07fc C0F20003 		movt	r3, #:upper16:sensors
 748 0800 C3ED057A 		fsts	s15, [r3, #20]
 220:../src/main.c ****         	sensors.accel100Hz[XAXIS] = computeFourthOrder100Hz(sensors.accel100Hz[XAXIS], &fourthOrde
 749              		.loc 1 220 0
 750 0804 40F20003 		movw	r3, #:lower16:sensors
 751 0808 C0F20003 		movt	r3, #:upper16:sensors
 752 080c DB68     		ldr	r3, [r3, #12]	@ float
 753 080e 1846     		mov	r0, r3	@ float
 754 0810 40F20001 		movw	r1, #:lower16:fourthOrder100Hz
 755 0814 C0F20001 		movt	r1, #:upper16:fourthOrder100Hz
 756 0818 FFF7FEFF 		bl	computeFourthOrder100Hz
 757 081c 0246     		mov	r2, r0	@ float
 758 081e 40F20003 		movw	r3, #:lower16:sensors
 759 0822 C0F20003 		movt	r3, #:upper16:sensors
 760 0826 DA60     		str	r2, [r3, #12]	@ float
 221:../src/main.c ****             sensors.accel100Hz[YAXIS] = computeFourthOrder100Hz(sensors.accel100Hz[YAXIS], &fourthO
 761              		.loc 1 221 0
 762 0828 40F20003 		movw	r3, #:lower16:sensors
 763 082c C0F20003 		movt	r3, #:upper16:sensors
 764 0830 08E0     		b	.L34
 765              	.L35:
 766 0832 00BF     		.align	2
 767              	.L33:
 768 0834 20000000 		.word	fourthOrder500Hz+32
 769 0838 40000000 		.word	fourthOrder500Hz+64
 770 083c 1F22A039 		.word	966795807
 771 0840 BD370635 		.word	889599933
 772              	.L34:
 773 0844 1B69     		ldr	r3, [r3, #16]	@ float
 774 0846 1846     		mov	r0, r3	@ float
 775 0848 DB49     		ldr	r1, .L36
 776 084a FFF7FEFF 		bl	computeFourthOrder100Hz
 777 084e 0246     		mov	r2, r0	@ float
 778 0850 40F20003 		movw	r3, #:lower16:sensors
 779 0854 C0F20003 		movt	r3, #:upper16:sensors
 780 0858 1A61     		str	r2, [r3, #16]	@ float
 222:../src/main.c ****             sensors.accel100Hz[ZAXIS] = computeFourthOrder100Hz(sensors.accel100Hz[ZAXIS], &fourthO
 781              		.loc 1 222 0
 782 085a 40F20003 		movw	r3, #:lower16:sensors
 783 085e C0F20003 		movt	r3, #:upper16:sensors
 784 0862 5B69     		ldr	r3, [r3, #20]	@ float
 785 0864 1846     		mov	r0, r3	@ float
 786 0866 D549     		ldr	r1, .L36+4
 787 0868 FFF7FEFF 		bl	computeFourthOrder100Hz
 788 086c 0246     		mov	r2, r0	@ float
 789 086e 40F20003 		movw	r3, #:lower16:sensors
 790 0872 C0F20003 		movt	r3, #:upper16:sensors
 791 0876 5A61     		str	r2, [r3, #20]	@ float
 224:../src/main.c ****             createRotationMatrix();
 792              		.loc 1 224 0
 793 0878 FFF7FEFF 		bl	createRotationMatrix
 225:../src/main.c ****             bodyAccelToEarthAccel();
 794              		.loc 1 225 0
 795 087c FFF7FEFF 		bl	bodyAccelToEarthAccel
 226:../src/main.c ****             vertCompFilter(dt100Hz);
 796              		.loc 1 226 0
 797 0880 40F20003 		movw	r3, #:lower16:dt100Hz
 798 0884 C0F20003 		movt	r3, #:upper16:dt100Hz
 799 0888 1B68     		ldr	r3, [r3, #0]	@ float
 800 088a 1846     		mov	r0, r3	@ float
 801 088c FFF7FEFF 		bl	vertCompFilter
 229:../src/main.c ****             if ( highSpeedTelem1Enabled == true )
 802              		.loc 1 229 0
 803 0890 40F20003 		movw	r3, #:lower16:highSpeedTelem1Enabled
 804 0894 C0F20003 		movt	r3, #:upper16:highSpeedTelem1Enabled
 805 0898 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 806 089a 012B     		cmp	r3, #1
 807 089c 47D1     		bne	.L17
 232:../src/main.c ****             	ftoa(sensors.accel500Hz[XAXIS], numberString); telemetryPrint(numberString); telemetry
 808              		.loc 1 232 0
 809 089e 40F20003 		movw	r3, #:lower16:sensors
 810 08a2 C0F20003 		movt	r3, #:upper16:sensors
 811 08a6 1B68     		ldr	r3, [r3, #0]	@ float
 812 08a8 1846     		mov	r0, r3	@ float
 813 08aa 40F20001 		movw	r1, #:lower16:numberString
 814 08ae C0F20001 		movt	r1, #:upper16:numberString
 815 08b2 FFF7FEFF 		bl	ftoa
 816 08b6 40F20000 		movw	r0, #:lower16:numberString
 817 08ba C0F20000 		movt	r0, #:upper16:numberString
 818 08be FFF7FEFF 		bl	telemetryPrint
 819 08c2 40F20000 		movw	r0, #:lower16:.LC0
 820 08c6 C0F20000 		movt	r0, #:upper16:.LC0
 821 08ca FFF7FEFF 		bl	telemetryPrint
 233:../src/main.c ****             	ftoa(sensors.accel500Hz[YAXIS], numberString); telemetryPrint(numberString); telemetry
 822              		.loc 1 233 0
 823 08ce 40F20003 		movw	r3, #:lower16:sensors
 824 08d2 C0F20003 		movt	r3, #:upper16:sensors
 825 08d6 5B68     		ldr	r3, [r3, #4]	@ float
 826 08d8 1846     		mov	r0, r3	@ float
 827 08da 40F20001 		movw	r1, #:lower16:numberString
 828 08de C0F20001 		movt	r1, #:upper16:numberString
 829 08e2 FFF7FEFF 		bl	ftoa
 830 08e6 40F20000 		movw	r0, #:lower16:numberString
 831 08ea C0F20000 		movt	r0, #:upper16:numberString
 832 08ee FFF7FEFF 		bl	telemetryPrint
 833 08f2 40F20000 		movw	r0, #:lower16:.LC0
 834 08f6 C0F20000 		movt	r0, #:upper16:.LC0
 835 08fa FFF7FEFF 		bl	telemetryPrint
 234:../src/main.c ****             	ftoa(sensors.accel500Hz[ZAXIS], numberString); telemetryPrint(numberString); telemetry
 836              		.loc 1 234 0
 837 08fe 40F20003 		movw	r3, #:lower16:sensors
 838 0902 C0F20003 		movt	r3, #:upper16:sensors
 839 0906 9B68     		ldr	r3, [r3, #8]	@ float
 840 0908 1846     		mov	r0, r3	@ float
 841 090a 40F20001 		movw	r1, #:lower16:numberString
 842 090e C0F20001 		movt	r1, #:upper16:numberString
 843 0912 FFF7FEFF 		bl	ftoa
 844 0916 40F20000 		movw	r0, #:lower16:numberString
 845 091a C0F20000 		movt	r0, #:upper16:numberString
 846 091e FFF7FEFF 		bl	telemetryPrint
 847 0922 40F20000 		movw	r0, #:lower16:.LC1
 848 0926 C0F20000 		movt	r0, #:upper16:.LC1
 849 092a FFF7FEFF 		bl	telemetryPrint
 850              	.L17:
 237:../src/main.c ****             if ( highSpeedTelem2Enabled == true )
 851              		.loc 1 237 0
 852 092e 40F20003 		movw	r3, #:lower16:highSpeedTelem2Enabled
 853 0932 C0F20003 		movt	r3, #:upper16:highSpeedTelem2Enabled
 854 0936 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 855 0938 012B     		cmp	r3, #1
 856 093a 47D1     		bne	.L18
 240:../src/main.c ****             	ftoa(sensors.gyro500Hz[ROLL ], numberString); telemetryPrint(numberString); telemetryP
 857              		.loc 1 240 0
 858 093c 40F20003 		movw	r3, #:lower16:sensors
 859 0940 C0F20003 		movt	r3, #:upper16:sensors
 860 0944 5B6A     		ldr	r3, [r3, #36]	@ float
 861 0946 1846     		mov	r0, r3	@ float
 862 0948 40F20001 		movw	r1, #:lower16:numberString
 863 094c C0F20001 		movt	r1, #:upper16:numberString
 864 0950 FFF7FEFF 		bl	ftoa
 865 0954 40F20000 		movw	r0, #:lower16:numberString
 866 0958 C0F20000 		movt	r0, #:upper16:numberString
 867 095c FFF7FEFF 		bl	telemetryPrint
 868 0960 40F20000 		movw	r0, #:lower16:.LC0
 869 0964 C0F20000 		movt	r0, #:upper16:.LC0
 870 0968 FFF7FEFF 		bl	telemetryPrint
 241:../src/main.c ****              	ftoa(sensors.gyro500Hz[PITCH], numberString); telemetryPrint(numberString); telemetry
 871              		.loc 1 241 0
 872 096c 40F20003 		movw	r3, #:lower16:sensors
 873 0970 C0F20003 		movt	r3, #:upper16:sensors
 874 0974 9B6A     		ldr	r3, [r3, #40]	@ float
 875 0976 1846     		mov	r0, r3	@ float
 876 0978 40F20001 		movw	r1, #:lower16:numberString
 877 097c C0F20001 		movt	r1, #:upper16:numberString
 878 0980 FFF7FEFF 		bl	ftoa
 879 0984 40F20000 		movw	r0, #:lower16:numberString
 880 0988 C0F20000 		movt	r0, #:upper16:numberString
 881 098c FFF7FEFF 		bl	telemetryPrint
 882 0990 40F20000 		movw	r0, #:lower16:.LC0
 883 0994 C0F20000 		movt	r0, #:upper16:.LC0
 884 0998 FFF7FEFF 		bl	telemetryPrint
 242:../src/main.c ****             	ftoa(sensors.gyro500Hz[YAW  ], numberString); telemetryPrint(numberString); telemetryP
 885              		.loc 1 242 0
 886 099c 40F20003 		movw	r3, #:lower16:sensors
 887 09a0 C0F20003 		movt	r3, #:upper16:sensors
 888 09a4 DB6A     		ldr	r3, [r3, #44]	@ float
 889 09a6 1846     		mov	r0, r3	@ float
 890 09a8 40F20001 		movw	r1, #:lower16:numberString
 891 09ac C0F20001 		movt	r1, #:upper16:numberString
 892 09b0 FFF7FEFF 		bl	ftoa
 893 09b4 40F20000 		movw	r0, #:lower16:numberString
 894 09b8 C0F20000 		movt	r0, #:upper16:numberString
 895 09bc FFF7FEFF 		bl	telemetryPrint
 896 09c0 40F20000 		movw	r0, #:lower16:.LC1
 897 09c4 C0F20000 		movt	r0, #:upper16:.LC1
 898 09c8 FFF7FEFF 		bl	telemetryPrint
 899              	.L18:
 245:../src/main.c ****             if ( highSpeedTelem3Enabled == true )
 900              		.loc 1 245 0
 901 09cc 40F20003 		movw	r3, #:lower16:highSpeedTelem3Enabled
 902 09d0 C0F20003 		movt	r3, #:upper16:highSpeedTelem3Enabled
 903 09d4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 904 09d6 012B     		cmp	r3, #1
 905 09d8 2FD1     		bne	.L19
 248:../src/main.c ****             	ftoa(sensors.gyro500Hz[ROLL], numberString); telemetryPrint(numberString); telemetryPr
 906              		.loc 1 248 0
 907 09da 40F20003 		movw	r3, #:lower16:sensors
 908 09de C0F20003 		movt	r3, #:upper16:sensors
 909 09e2 5B6A     		ldr	r3, [r3, #36]	@ float
 910 09e4 1846     		mov	r0, r3	@ float
 911 09e6 40F20001 		movw	r1, #:lower16:numberString
 912 09ea C0F20001 		movt	r1, #:upper16:numberString
 913 09ee FFF7FEFF 		bl	ftoa
 914 09f2 40F20000 		movw	r0, #:lower16:numberString
 915 09f6 C0F20000 		movt	r0, #:upper16:numberString
 916 09fa FFF7FEFF 		bl	telemetryPrint
 917 09fe 40F20000 		movw	r0, #:lower16:.LC0
 918 0a02 C0F20000 		movt	r0, #:upper16:.LC0
 919 0a06 FFF7FEFF 		bl	telemetryPrint
 249:../src/main.c ****             	ftoa(rxCommand[ROLL],         numberString); telemetryPrint(numberString); telemetryPr
 920              		.loc 1 249 0
 921 0a0a 40F20003 		movw	r3, #:lower16:rxCommand
 922 0a0e C0F20003 		movt	r3, #:upper16:rxCommand
 923 0a12 1B68     		ldr	r3, [r3, #0]	@ float
 924 0a14 1846     		mov	r0, r3	@ float
 925 0a16 40F20001 		movw	r1, #:lower16:numberString
 926 0a1a C0F20001 		movt	r1, #:upper16:numberString
 927 0a1e FFF7FEFF 		bl	ftoa
 928 0a22 40F20000 		movw	r0, #:lower16:numberString
 929 0a26 C0F20000 		movt	r0, #:upper16:numberString
 930 0a2a FFF7FEFF 		bl	telemetryPrint
 931 0a2e 40F20000 		movw	r0, #:lower16:.LC1
 932 0a32 C0F20000 		movt	r0, #:upper16:.LC1
 933 0a36 FFF7FEFF 		bl	telemetryPrint
 934              	.L19:
 252:../src/main.c ****             if ( highSpeedTelem4Enabled == true )
 935              		.loc 1 252 0
 936 0a3a 40F20003 		movw	r3, #:lower16:highSpeedTelem4Enabled
 937 0a3e C0F20003 		movt	r3, #:upper16:highSpeedTelem4Enabled
 938 0a42 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 939 0a44 012B     		cmp	r3, #1
 940 0a46 2FD1     		bne	.L20
 255:../src/main.c ****             	ftoa(sensors.gyro500Hz[PITCH], numberString); telemetryPrint(numberString); telemetryP
 941              		.loc 1 255 0
 942 0a48 40F20003 		movw	r3, #:lower16:sensors
 943 0a4c C0F20003 		movt	r3, #:upper16:sensors
 944 0a50 9B6A     		ldr	r3, [r3, #40]	@ float
 945 0a52 1846     		mov	r0, r3	@ float
 946 0a54 40F20001 		movw	r1, #:lower16:numberString
 947 0a58 C0F20001 		movt	r1, #:upper16:numberString
 948 0a5c FFF7FEFF 		bl	ftoa
 949 0a60 40F20000 		movw	r0, #:lower16:numberString
 950 0a64 C0F20000 		movt	r0, #:upper16:numberString
 951 0a68 FFF7FEFF 		bl	telemetryPrint
 952 0a6c 40F20000 		movw	r0, #:lower16:.LC0
 953 0a70 C0F20000 		movt	r0, #:upper16:.LC0
 954 0a74 FFF7FEFF 		bl	telemetryPrint
 256:../src/main.c ****             	ftoa(rxCommand[PITCH],         numberString); telemetryPrint(numberString); telemetryP
 955              		.loc 1 256 0
 956 0a78 40F20003 		movw	r3, #:lower16:rxCommand
 957 0a7c C0F20003 		movt	r3, #:upper16:rxCommand
 958 0a80 5B68     		ldr	r3, [r3, #4]	@ float
 959 0a82 1846     		mov	r0, r3	@ float
 960 0a84 40F20001 		movw	r1, #:lower16:numberString
 961 0a88 C0F20001 		movt	r1, #:upper16:numberString
 962 0a8c FFF7FEFF 		bl	ftoa
 963 0a90 40F20000 		movw	r0, #:lower16:numberString
 964 0a94 C0F20000 		movt	r0, #:upper16:numberString
 965 0a98 FFF7FEFF 		bl	telemetryPrint
 966 0a9c 40F20000 		movw	r0, #:lower16:.LC1
 967 0aa0 C0F20000 		movt	r0, #:upper16:.LC1
 968 0aa4 FFF7FEFF 		bl	telemetryPrint
 969              	.L20:
 259:../src/main.c ****             if ( highSpeedTelem5Enabled == true )
 970              		.loc 1 259 0
 971 0aa8 40F20003 		movw	r3, #:lower16:highSpeedTelem5Enabled
 972 0aac C0F20003 		movt	r3, #:upper16:highSpeedTelem5Enabled
 973 0ab0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 974 0ab2 012B     		cmp	r3, #1
 975 0ab4 2FD1     		bne	.L21
 262:../src/main.c ****             	ftoa(sensors.gyro500Hz[YAW], numberString); telemetryPrint(numberString); telemetryPri
 976              		.loc 1 262 0
 977 0ab6 40F20003 		movw	r3, #:lower16:sensors
 978 0aba C0F20003 		movt	r3, #:upper16:sensors
 979 0abe DB6A     		ldr	r3, [r3, #44]	@ float
 980 0ac0 1846     		mov	r0, r3	@ float
 981 0ac2 40F20001 		movw	r1, #:lower16:numberString
 982 0ac6 C0F20001 		movt	r1, #:upper16:numberString
 983 0aca FFF7FEFF 		bl	ftoa
 984 0ace 40F20000 		movw	r0, #:lower16:numberString
 985 0ad2 C0F20000 		movt	r0, #:upper16:numberString
 986 0ad6 FFF7FEFF 		bl	telemetryPrint
 987 0ada 40F20000 		movw	r0, #:lower16:.LC0
 988 0ade C0F20000 		movt	r0, #:upper16:.LC0
 989 0ae2 FFF7FEFF 		bl	telemetryPrint
 263:../src/main.c ****             	ftoa(rxCommand[YAW],         numberString); telemetryPrint(numberString); telemetryPri
 990              		.loc 1 263 0
 991 0ae6 40F20003 		movw	r3, #:lower16:rxCommand
 992 0aea C0F20003 		movt	r3, #:upper16:rxCommand
 993 0aee 9B68     		ldr	r3, [r3, #8]	@ float
 994 0af0 1846     		mov	r0, r3	@ float
 995 0af2 40F20001 		movw	r1, #:lower16:numberString
 996 0af6 C0F20001 		movt	r1, #:upper16:numberString
 997 0afa FFF7FEFF 		bl	ftoa
 998 0afe 40F20000 		movw	r0, #:lower16:numberString
 999 0b02 C0F20000 		movt	r0, #:upper16:numberString
 1000 0b06 FFF7FEFF 		bl	telemetryPrint
 1001 0b0a 40F20000 		movw	r0, #:lower16:.LC1
 1002 0b0e C0F20000 		movt	r0, #:upper16:.LC1
 1003 0b12 FFF7FEFF 		bl	telemetryPrint
 1004              	.L21:
 266:../src/main.c ****             if ( highSpeedTelem6Enabled == true )
 1005              		.loc 1 266 0
 1006 0b16 40F20003 		movw	r3, #:lower16:highSpeedTelem6Enabled
 1007 0b1a C0F20003 		movt	r3, #:upper16:highSpeedTelem6Enabled
 1008 0b1e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1009 0b20 012B     		cmp	r3, #1
 1010 0b22 4DD1     		bne	.L22
 269:../src/main.c ****             	ftoa(sensors.attitude500Hz[ROLL ], numberString); telemetryPrint(numberString); teleme
 1011              		.loc 1 269 0
 1012 0b24 40F20003 		movw	r3, #:lower16:sensors
 1013 0b28 C0F20003 		movt	r3, #:upper16:sensors
 1014 0b2c 9B69     		ldr	r3, [r3, #24]	@ float
 1015 0b2e 1846     		mov	r0, r3	@ float
 1016 0b30 40F20001 		movw	r1, #:lower16:numberString
 1017 0b34 C0F20001 		movt	r1, #:upper16:numberString
 1018 0b38 FFF7FEFF 		bl	ftoa
 1019 0b3c 40F20000 		movw	r0, #:lower16:numberString
 1020 0b40 C0F20000 		movt	r0, #:upper16:numberString
 1021 0b44 FFF7FEFF 		bl	telemetryPrint
 1022 0b48 40F20000 		movw	r0, #:lower16:.LC0
 1023 0b4c C0F20000 		movt	r0, #:upper16:.LC0
 1024 0b50 FFF7FEFF 		bl	telemetryPrint
 270:../src/main.c ****             	ftoa(sensors.attitude500Hz[PITCH], numberString); telemetryPrint(numberString); teleme
 1025              		.loc 1 270 0
 1026 0b54 40F20003 		movw	r3, #:lower16:sensors
 1027 0b58 C0F20003 		movt	r3, #:upper16:sensors
 1028 0b5c DB69     		ldr	r3, [r3, #28]	@ float
 1029 0b5e 1846     		mov	r0, r3	@ float
 1030 0b60 40F20001 		movw	r1, #:lower16:numberString
 1031 0b64 C0F20001 		movt	r1, #:upper16:numberString
 1032 0b68 FFF7FEFF 		bl	ftoa
 1033 0b6c 40F20000 		movw	r0, #:lower16:numberString
 1034 0b70 C0F20000 		movt	r0, #:upper16:numberString
 1035 0b74 FFF7FEFF 		bl	telemetryPrint
 1036 0b78 40F20000 		movw	r0, #:lower16:.LC0
 1037 0b7c C0F20000 		movt	r0, #:upper16:.LC0
 1038 0b80 FFF7FEFF 		bl	telemetryPrint
 271:../src/main.c ****             	ftoa(sensors.attitude500Hz[YAW  ], numberString); telemetryPrint(numberString); teleme
 1039              		.loc 1 271 0
 1040 0b84 40F20003 		movw	r3, #:lower16:sensors
 1041 0b88 C0F20003 		movt	r3, #:upper16:sensors
 1042 0b8c 1B6A     		ldr	r3, [r3, #32]	@ float
 1043 0b8e 1846     		mov	r0, r3	@ float
 1044 0b90 40F20001 		movw	r1, #:lower16:numberString
 1045 0b94 C0F20001 		movt	r1, #:upper16:numberString
 1046 0b98 FFF7FEFF 		bl	ftoa
 1047 0b9c 40F20000 		movw	r0, #:lower16:numberString
 1048 0ba0 C0F20000 		movt	r0, #:upper16:numberString
 1049 0ba4 FFF7FEFF 		bl	telemetryPrint
 1050 0ba8 40F20000 		movw	r0, #:lower16:.LC1
 1051 0bac C0F20000 		movt	r0, #:upper16:.LC1
 1052 0bb0 FFF7FEFF 		bl	telemetryPrint
 1053 0bb4 04E0     		b	.L37
 1054              	.L38:
 1055 0bb6 00BF     		.align	2
 1056              	.L36:
 1057 0bb8 20000000 		.word	fourthOrder100Hz+32
 1058 0bbc 40000000 		.word	fourthOrder100Hz+64
 1059              	.L37:
 1060              	.L22:
 275:../src/main.c ****             executionTime100Hz = micros() - currentTime;
 1061              		.loc 1 275 0
 1062 0bc0 FFF7FEFF 		bl	micros
 1063 0bc4 0246     		mov	r2, r0
 1064 0bc6 099B     		ldr	r3, [sp, #36]
 1065 0bc8 D21A     		subs	r2, r2, r3
 1066 0bca 40F20003 		movw	r3, #:lower16:executionTime100Hz
 1067 0bce C0F20003 		movt	r3, #:upper16:executionTime100Hz
 1068 0bd2 1A60     		str	r2, [r3, #0]
 1069              	.L16:
 280:../src/main.c ****         if (frame_5Hz)
 1070              		.loc 1 280 0
 1071 0bd4 40F20003 		movw	r3, #:lower16:frame_5Hz
 1072 0bd8 C0F20003 		movt	r3, #:upper16:frame_5Hz
 1073 0bdc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1074 0bde 002B     		cmp	r3, #0
 1075 0be0 34D0     		beq	.L23
 282:../src/main.c ****         	frame_5Hz = false;
 1076              		.loc 1 282 0
 1077 0be2 40F20003 		movw	r3, #:lower16:frame_5Hz
 1078 0be6 C0F20003 		movt	r3, #:upper16:frame_5Hz
 1079 0bea 4FF00002 		mov	r2, #0
 1080 0bee 1A70     		strb	r2, [r3, #0]
 284:../src/main.c ****         	currentTime     = micros();
 1081              		.loc 1 284 0
 1082 0bf0 FFF7FEFF 		bl	micros
 1083 0bf4 0990     		str	r0, [sp, #36]
 285:../src/main.c **** 			deltaTime5Hz    = currentTime - previous5HzTime;
 1084              		.loc 1 285 0
 1085 0bf6 40F20003 		movw	r3, #:lower16:previous5HzTime
 1086 0bfa C0F20003 		movt	r3, #:upper16:previous5HzTime
 1087 0bfe 1B68     		ldr	r3, [r3, #0]
 1088 0c00 099A     		ldr	r2, [sp, #36]
 1089 0c02 D21A     		subs	r2, r2, r3
 1090 0c04 40F20003 		movw	r3, #:lower16:deltaTime5Hz
 1091 0c08 C0F20003 		movt	r3, #:upper16:deltaTime5Hz
 1092 0c0c 1A60     		str	r2, [r3, #0]
 286:../src/main.c **** 			previous5HzTime = currentTime;
 1093              		.loc 1 286 0
 1094 0c0e 40F20003 		movw	r3, #:lower16:previous5HzTime
 1095 0c12 C0F20003 		movt	r3, #:upper16:previous5HzTime
 1096 0c16 099A     		ldr	r2, [sp, #36]
 1097 0c18 1A60     		str	r2, [r3, #0]
 288:../src/main.c **** 			if (execUp == true)
 1098              		.loc 1 288 0
 1099 0c1a 40F20003 		movw	r3, #:lower16:execUp
 1100 0c1e C0F20003 		movt	r3, #:upper16:execUp
 1101 0c22 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1102 0c24 012B     		cmp	r3, #1
 1103 0c26 07D1     		bne	.L24
 289:../src/main.c **** 			    GREEN_W_LED_TOGGLE;
 1104              		.loc 1 289 0
 1105 0c28 4FF48050 		mov	r0, #4096
 1106 0c2c C4F60000 		movt	r0, 18432
 1107 0c30 4FF40041 		mov	r1, #32768
 1108 0c34 FFF7FEFF 		bl	GPIO_ToggleBits
 1109              	.L24:
 291:../src/main.c ****         	executionTime5Hz = micros() - currentTime;
 1110              		.loc 1 291 0
 1111 0c38 FFF7FEFF 		bl	micros
 1112 0c3c 0246     		mov	r2, r0
 1113 0c3e 099B     		ldr	r3, [sp, #36]
 1114 0c40 D21A     		subs	r2, r2, r3
 1115 0c42 40F20003 		movw	r3, #:lower16:executionTime5Hz
 1116 0c46 C0F20003 		movt	r3, #:upper16:executionTime5Hz
 1117 0c4a 1A60     		str	r2, [r3, #0]
 1118              	.L23:
 296:../src/main.c ****         if (frame_1Hz)
 1119              		.loc 1 296 0
 1120 0c4c 40F20003 		movw	r3, #:lower16:frame_1Hz
 1121 0c50 C0F20003 		movt	r3, #:upper16:frame_1Hz
 1122 0c54 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1123 0c56 002B     		cmp	r3, #0
 1124 0c58 3FF4E6A9 		beq	.L30
 298:../src/main.c ****         	frame_1Hz = false;
 1125              		.loc 1 298 0
 1126 0c5c 40F20003 		movw	r3, #:lower16:frame_1Hz
 1127 0c60 C0F20003 		movt	r3, #:upper16:frame_1Hz
 1128 0c64 4FF00002 		mov	r2, #0
 1129 0c68 1A70     		strb	r2, [r3, #0]
 300:../src/main.c ****         	currentTime     = micros();
 1130              		.loc 1 300 0
 1131 0c6a FFF7FEFF 		bl	micros
 1132 0c6e 0990     		str	r0, [sp, #36]
 301:../src/main.c **** 			deltaTime1Hz    = currentTime - previous1HzTime;
 1133              		.loc 1 301 0
 1134 0c70 40F20003 		movw	r3, #:lower16:previous1HzTime
 1135 0c74 C0F20003 		movt	r3, #:upper16:previous1HzTime
 1136 0c78 1B68     		ldr	r3, [r3, #0]
 1137 0c7a 099A     		ldr	r2, [sp, #36]
 1138 0c7c D21A     		subs	r2, r2, r3
 1139 0c7e 40F20003 		movw	r3, #:lower16:deltaTime1Hz
 1140 0c82 C0F20003 		movt	r3, #:upper16:deltaTime1Hz
 1141 0c86 1A60     		str	r2, [r3, #0]
 302:../src/main.c **** 			previous1HzTime = currentTime;
 1142              		.loc 1 302 0
 1143 0c88 40F20003 		movw	r3, #:lower16:previous1HzTime
 1144 0c8c C0F20003 		movt	r3, #:upper16:previous1HzTime
 1145 0c90 099A     		ldr	r2, [sp, #36]
 1146 0c92 1A60     		str	r2, [r3, #0]
 304:../src/main.c **** 			if (execUp == true)
 1147              		.loc 1 304 0
 1148 0c94 40F20003 		movw	r3, #:lower16:execUp
 1149 0c98 C0F20003 		movt	r3, #:upper16:execUp
 1150 0c9c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1151 0c9e 012B     		cmp	r3, #1
 1152 0ca0 07D1     		bne	.L26
 305:../src/main.c **** 				GREEN_E_LED_TOGGLE;
 1153              		.loc 1 305 0
 1154 0ca2 4FF48050 		mov	r0, #4096
 1155 0ca6 C4F60000 		movt	r0, 18432
 1156 0caa 4FF40061 		mov	r1, #2048
 1157 0cae FFF7FEFF 		bl	GPIO_ToggleBits
 1158              	.L26:
 307:../src/main.c **** 			if (execUp == false)
 1159              		.loc 1 307 0
 1160 0cb2 40F20003 		movw	r3, #:lower16:execUp
 1161 0cb6 C0F20003 		movt	r3, #:upper16:execUp
 1162 0cba 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1163 0cbc 002B     		cmp	r3, #0
 1164 0cbe 0CD1     		bne	.L27
 308:../src/main.c **** 			    execUpCount++;
 1165              		.loc 1 308 0
 1166 0cc0 40F20003 		movw	r3, #:lower16:execUpCount
 1167 0cc4 C0F20003 		movt	r3, #:upper16:execUpCount
 1168 0cc8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1169 0cca 03F10103 		add	r3, r3, #1
 1170 0cce DAB2     		uxtb	r2, r3
 1171 0cd0 40F20003 		movw	r3, #:lower16:execUpCount
 1172 0cd4 C0F20003 		movt	r3, #:upper16:execUpCount
 1173 0cd8 1A70     		strb	r2, [r3, #0]
 1174              	.L27:
 310:../src/main.c **** 			if (execUpCount == 5)
 1175              		.loc 1 310 0
 1176 0cda 40F20003 		movw	r3, #:lower16:execUpCount
 1177 0cde C0F20003 		movt	r3, #:upper16:execUpCount
 1178 0ce2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1179 0ce4 052B     		cmp	r3, #5
 1180 0ce6 06D1     		bne	.L28
 311:../src/main.c **** 			    execUp = true;
 1181              		.loc 1 311 0
 1182 0ce8 40F20003 		movw	r3, #:lower16:execUp
 1183 0cec C0F20003 		movt	r3, #:upper16:execUp
 1184 0cf0 4FF00102 		mov	r2, #1
 1185 0cf4 1A70     		strb	r2, [r3, #0]
 1186              	.L28:
 313:../src/main.c **** 			executionTime1Hz = micros() - currentTime;
 1187              		.loc 1 313 0
 1188 0cf6 FFF7FEFF 		bl	micros
 1189 0cfa 0246     		mov	r2, r0
 1190 0cfc 099B     		ldr	r3, [sp, #36]
 1191 0cfe D21A     		subs	r2, r2, r3
 1192 0d00 40F20003 		movw	r3, #:lower16:executionTime1Hz
 1193 0d04 C0F20003 		movt	r3, #:upper16:executionTime1Hz
 1194 0d08 1A60     		str	r2, [r3, #0]
 1195              		.loc 1 317 0
 1196 0d0a FFF78DB9 		b	.L30
 1197              		.cfi_endproc
 1198              	.LFE111:
 1200              	.Letext0:
 1201              		.file 2 "c:\\program files\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 1202              		.file 3 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\Libraries\\Device\\
 1203              		.file 4 "../src/pid.h"
 1204              		.file 5 "../src/aq32Plus_F3.h"
 1205              		.file 6 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsMediaTe
 1206              		.file 7 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsNMEA.h"
 1207              		.file 8 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsUblox.h
 1208              		.file 9 "../src/lowPassFilter.h"
 1209              		.file 10 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\Libraries\\CMSIS\\
 1210              		.file 11 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\drv/drv_syste
 1211              		.file 12 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\sensors/l3gd2
 1212              		.file 13 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\sensors/lsm30
 1213              		.file 14 "../src/cli.h"
 1214              		.file 15 "../src/flightCommand.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
                            *COM*:00000001 mtk19ProcessDataState
                            *COM*:00000001 nmeaProcessDataState
                            *COM*:00000001 ubloxProcessDataState
                            *COM*:0000034c eepromConfig
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccxiXd7y.s:27     .bss:00000000 execUpCount
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccxiXd7y.s:28     .bss:00000000 $d
                            *COM*:00000064 sensors
                            *COM*:00000002 timerValue
                            *COM*:00000020 numberString
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccxiXd7y.s:33     .rodata:00000000 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccxiXd7y.s:34     .rodata:00000000 .LC0
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccxiXd7y.s:37     .rodata:00000004 .LC1
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccxiXd7y.s:40     .text:00000000 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccxiXd7y.s:45     .text:00000000 main
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccxiXd7y.s:308    .text:000002a0 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccxiXd7y.s:314    .text:000002b0 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccxiXd7y.s:325    .text:000002bc $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccxiXd7y.s:329    .text:000002c4 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccxiXd7y.s:768    .text:00000834 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccxiXd7y.s:773    .text:00000844 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccxiXd7y.s:1057   .text:00000bb8 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccxiXd7y.s:1062   .text:00000bc0 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
systemReady
systemInit
frame_50Hz
micros
previous50HzTime
deltaTime50Hz
processFlightCommands
displayAltitude
flightMode
displayArtificialHorizon
displayAttitude
displayHeading
executionTime50Hz
frame_10Hz
previous10HzTime
deltaTime10Hz
newMagData
rawMag
magScaleFactor
magDataUpdate
decodeMediaTek3329BinaryMsg
decodeNMEAsentence
decodeUbloxMsg
cliCom
rfCom
executionTime10Hz
frame_500Hz
previous500HzTime
deltaTime500Hz
TIM_Cmd
TIM_GetCounter
TIM_SetCounter
dt500Hz
accelSummedSamples500Hz
fourthOrder500Hz
computeFourthOrder500Hz
gyroSummedSamples500Hz
gyroRTBias
MargAHRSupdate
computeAxisCommands
mixTable
writeServos
writeMotors
executionTime500Hz
frame_100Hz
previous100HzTime
deltaTime100Hz
dt100Hz
accelSummedSamples100Hz
fourthOrder100Hz
computeFourthOrder100Hz
createRotationMatrix
bodyAccelToEarthAccel
vertCompFilter
highSpeedTelem1Enabled
ftoa
telemetryPrint
highSpeedTelem2Enabled
highSpeedTelem3Enabled
rxCommand
highSpeedTelem4Enabled
highSpeedTelem5Enabled
highSpeedTelem6Enabled
executionTime100Hz
frame_5Hz
previous5HzTime
deltaTime5Hz
execUp
GPIO_ToggleBits
executionTime5Hz
frame_1Hz
previous1HzTime
deltaTime1Hz
executionTime1Hz

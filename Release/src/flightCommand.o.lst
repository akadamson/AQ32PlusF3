   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"flightCommand.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	mtk19ProcessDataState,1,1
  20              		.comm	nmeaProcessDataState,1,1
  21              		.comm	ubloxProcessDataState,1,1
  22              		.global	rxCommand
  23              		.data
  24              		.align	2
  27              	rxCommand:
  28 0000 00000000 		.word	0
  29 0004 00000000 		.word	0
  30 0008 00000000 		.word	0
  31 000c 0000FA44 		.word	1157234688
  32 0010 0000FA44 		.word	1157234688
  33 0014 0000FA44 		.word	1157234688
  34 0018 0000FA44 		.word	1157234688
  35 001c 0000FA44 		.word	1157234688
  36              		.global	commandInDetent
  37              		.align	2
  40              	commandInDetent:
  41 0020 01       		.byte	1
  42 0021 01       		.byte	1
  43 0022 01       		.byte	1
  44              		.global	previousCommandInDetent
  45 0023 00       		.align	2
  48              	previousCommandInDetent:
  49 0024 01       		.byte	1
  50 0025 01       		.byte	1
  51 0026 01       		.byte	1
  52              		.global	flightMode
  53              		.bss
  56              	flightMode:
  57 0000 00       		.space	1
  58              		.global	headingHoldEngaged
  61              	headingHoldEngaged:
  62 0001 00       		.space	1
  63              		.global	armed
  66              	armed:
  67 0002 00       		.space	1
  68              		.global	armingTimer
  71              	armingTimer:
  72 0003 00       		.space	1
  73              		.global	altitudeHoldState
  76              	altitudeHoldState:
  77 0004 00       		.space	1
  78              		.global	previousAUX2State
  79              		.data
  80 0027 00       		.align	1
  83              	previousAUX2State:
  84 0028 D007     		.short	2000
  85              		.global	altitudeHoldThrottleValue
  86 002a 0000     		.bss
  87 0005 000000   		.align	2
  90              	altitudeHoldThrottleValue:
  91 0008 00000000 		.space	4
  92              		.text
  93              		.align	2
  94              		.global	processFlightCommands
  95              		.thumb
  96              		.thumb_func
  98              	processFlightCommands:
  99              	.LFB111:
 100              		.file 1 "../src/flightCommand.c"
   1:../src/flightCommand.c **** /*
   2:../src/flightCommand.c ****   December 2012
   3:../src/flightCommand.c **** 
   4:../src/flightCommand.c ****   aq32Plus_F3 Rev -
   5:../src/flightCommand.c **** 
   6:../src/flightCommand.c ****   Copyright (c) 2012 John Ihlein.  All rights reserved.
   7:../src/flightCommand.c **** 
   8:../src/flightCommand.c ****   Open Source STM32 Based Multicopter Controller Software
   9:../src/flightCommand.c **** 
  10:../src/flightCommand.c ****   Includes code and/or ideas from:
  11:../src/flightCommand.c **** 
  12:../src/flightCommand.c ****   1)AeroQuad
  13:../src/flightCommand.c ****   2)BaseFlight
  14:../src/flightCommand.c ****   3)CH Robotics
  15:../src/flightCommand.c ****   4)MultiWii
  16:../src/flightCommand.c ****   5)S.O.H. Madgwick
  17:../src/flightCommand.c ****   6)UAVX
  18:../src/flightCommand.c ****   7)STM DiscoveryF3 demonstration software
  19:../src/flightCommand.c **** 
  20:../src/flightCommand.c ****   Designed to run on the DiscoveryF3 board
  21:../src/flightCommand.c **** 
  22:../src/flightCommand.c ****   This program is free software: you can redistribute it and/or modify
  23:../src/flightCommand.c ****   it under the terms of the GNU General Public License as published by
  24:../src/flightCommand.c ****   the Free Software Foundation, either version 3 of the License, or
  25:../src/flightCommand.c ****   (at your option) any later version.
  26:../src/flightCommand.c **** 
  27:../src/flightCommand.c ****   This program is distributed in the hope that it will be useful,
  28:../src/flightCommand.c ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
  29:../src/flightCommand.c ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  30:../src/flightCommand.c ****   GNU General Public License for more details.
  31:../src/flightCommand.c **** 
  32:../src/flightCommand.c ****   You should have received a copy of the GNU General Public License
  33:../src/flightCommand.c ****   along with this program. If not, see <http://www.gnu.org/licenses/>.
  34:../src/flightCommand.c **** */
  35:../src/flightCommand.c **** 
  36:../src/flightCommand.c **** ///////////////////////////////////////////////////////////////////////////////
  37:../src/flightCommand.c **** 
  38:../src/flightCommand.c **** #include "board.h"
  39:../src/flightCommand.c **** 
  40:../src/flightCommand.c **** ///////////////////////////////////////////////////////////////////////////////
  41:../src/flightCommand.c **** // Process Pilot Commands Defines and Variables
  42:../src/flightCommand.c **** ///////////////////////////////////////////////////////////////////////////////
  43:../src/flightCommand.c **** 
  44:../src/flightCommand.c **** float    rxCommand[8] = { 0.0f, 0.0f, 0.0f, 2000.0f, 2000.0f, 2000.0f, 2000.0f, 2000.0f };
  45:../src/flightCommand.c **** 
  46:../src/flightCommand.c **** uint8_t  commandInDetent[3]         = { true, true, true };
  47:../src/flightCommand.c **** uint8_t  previousCommandInDetent[3] = { true, true, true };
  48:../src/flightCommand.c **** 
  49:../src/flightCommand.c **** ///////////////////////////////////////////////////////////////////////////////
  50:../src/flightCommand.c **** // Flight Mode Defines and Variables
  51:../src/flightCommand.c **** ///////////////////////////////////////////////////////////////////////////////
  52:../src/flightCommand.c **** 
  53:../src/flightCommand.c **** uint8_t flightMode = RATE;
  54:../src/flightCommand.c **** 
  55:../src/flightCommand.c **** uint8_t headingHoldEngaged = false;
  56:../src/flightCommand.c **** 
  57:../src/flightCommand.c **** ///////////////////////////////////////////////////////////////////////////////
  58:../src/flightCommand.c **** // Arm State Variables
  59:../src/flightCommand.c **** ///////////////////////////////////////////////////////////////////////////////
  60:../src/flightCommand.c **** 
  61:../src/flightCommand.c **** uint8_t armed       = false;
  62:../src/flightCommand.c **** uint8_t armingTimer = 0;
  63:../src/flightCommand.c **** 
  64:../src/flightCommand.c **** ///////////////////////////////////////////////////////////////////////////////
  65:../src/flightCommand.c **** // Altitude Hold State Variables
  66:../src/flightCommand.c **** ///////////////////////////////////////////////////////////////////////////////
  67:../src/flightCommand.c **** 
  68:../src/flightCommand.c **** uint8_t  altitudeHoldState = DISENGAGED;
  69:../src/flightCommand.c **** uint16_t previousAUX2State = MINCOMMAND;
  70:../src/flightCommand.c **** 
  71:../src/flightCommand.c **** float    altitudeHoldThrottleValue = 0.0f;
  72:../src/flightCommand.c **** 
  73:../src/flightCommand.c **** ///////////////////////////////////////////////////////////////////////////////
  74:../src/flightCommand.c **** // Read Flight Commands
  75:../src/flightCommand.c **** ///////////////////////////////////////////////////////////////////////////////
  76:../src/flightCommand.c **** 
  77:../src/flightCommand.c **** void processFlightCommands(void)
  78:../src/flightCommand.c **** {
 101              		.loc 1 78 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 8
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105 0000 10B5     		push	{r4, lr}
 106              	.LCFI0:
 107              		.cfi_def_cfa_offset 8
 108              		.cfi_offset 14, -4
 109              		.cfi_offset 4, -8
 110 0002 82B0     		sub	sp, sp, #8
 111              	.LCFI1:
 112              		.cfi_def_cfa_offset 16
  79:../src/flightCommand.c ****     uint8_t channel;
  80:../src/flightCommand.c **** 
  81:../src/flightCommand.c ****     if ( rcActive == true )
 113              		.loc 1 81 0
 114 0004 40F20003 		movw	r3, #:lower16:rcActive
 115 0008 C0F20003 		movt	r3, #:upper16:rcActive
 116 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 117 000e 012B     		cmp	r3, #1
 118 0010 40F0DF80 		bne	.L2
  82:../src/flightCommand.c ****     {
  83:../src/flightCommand.c **** 		// Read receiver commands
  84:../src/flightCommand.c ****         for (channel = 0; channel < 8; channel++)
 119              		.loc 1 84 0
 120 0014 4FF00003 		mov	r3, #0
 121 0018 8DF80730 		strb	r3, [sp, #7]
 122 001c 21E0     		b	.L3
 123              	.L4:
  85:../src/flightCommand.c ****             rxCommand[channel] = (float)rxRead(eepromConfig.rcMap[channel]);
 124              		.loc 1 85 0 discriminator 2
 125 001e 9DF80740 		ldrb	r4, [sp, #7]	@ zero_extendqisi2
 126 0022 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 127 0026 40F20003 		movw	r3, #:lower16:eepromConfig
 128 002a C0F20003 		movt	r3, #:upper16:eepromConfig
 129 002e 9B18     		adds	r3, r3, r2
 130 0030 93F86F30 		ldrb	r3, [r3, #111]	@ zero_extendqisi2
 131 0034 1846     		mov	r0, r3
 132 0036 FFF7FEFF 		bl	rxRead
 133 003a 0346     		mov	r3, r0
 134 003c 07EE103A 		fmsr	s14, r3	@ int
 135 0040 F8EE477A 		fuitos	s15, s14
 136 0044 40F20003 		movw	r3, #:lower16:rxCommand
 137 0048 C0F20003 		movt	r3, #:upper16:rxCommand
 138 004c 4FEA8402 		lsl	r2, r4, #2
 139 0050 9B18     		adds	r3, r3, r2
 140 0052 C3ED007A 		fsts	s15, [r3, #0]
  84:../src/flightCommand.c ****         for (channel = 0; channel < 8; channel++)
 141              		.loc 1 84 0 discriminator 2
 142 0056 9DF80730 		ldrb	r3, [sp, #7]
 143 005a 03F10103 		add	r3, r3, #1
 144 005e 8DF80730 		strb	r3, [sp, #7]
 145              	.L3:
  84:../src/flightCommand.c ****         for (channel = 0; channel < 8; channel++)
 146              		.loc 1 84 0 is_stmt 0 discriminator 1
 147 0062 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 148 0066 072B     		cmp	r3, #7
 149 0068 D9D9     		bls	.L4
  86:../src/flightCommand.c **** 
  87:../src/flightCommand.c ****         rxCommand[ROLL]  -= eepromConfig.midCommand;                  // Roll Range    -1000:1000
 150              		.loc 1 87 0 is_stmt 1
 151 006a 40F20003 		movw	r3, #:lower16:rxCommand
 152 006e C0F20003 		movt	r3, #:upper16:rxCommand
 153 0072 93ED007A 		flds	s14, [r3, #0]
 154 0076 40F20003 		movw	r3, #:lower16:eepromConfig
 155 007a C0F20003 		movt	r3, #:upper16:eepromConfig
 156 007e D3ED217A 		flds	s15, [r3, #132]
 157 0082 77EE677A 		fsubs	s15, s14, s15
 158 0086 40F20003 		movw	r3, #:lower16:rxCommand
 159 008a C0F20003 		movt	r3, #:upper16:rxCommand
 160 008e C3ED007A 		fsts	s15, [r3, #0]
  88:../src/flightCommand.c ****         rxCommand[PITCH] -= eepromConfig.midCommand;                  // Pitch Range   -1000:1000
 161              		.loc 1 88 0
 162 0092 40F20003 		movw	r3, #:lower16:rxCommand
 163 0096 C0F20003 		movt	r3, #:upper16:rxCommand
 164 009a 93ED017A 		flds	s14, [r3, #4]
 165 009e 40F20003 		movw	r3, #:lower16:eepromConfig
 166 00a2 C0F20003 		movt	r3, #:upper16:eepromConfig
 167 00a6 D3ED217A 		flds	s15, [r3, #132]
 168 00aa 77EE677A 		fsubs	s15, s14, s15
 169 00ae 40F20003 		movw	r3, #:lower16:rxCommand
 170 00b2 C0F20003 		movt	r3, #:upper16:rxCommand
 171 00b6 C3ED017A 		fsts	s15, [r3, #4]
  89:../src/flightCommand.c ****         rxCommand[YAW]   -= eepromConfig.midCommand;                  // Yaw Range     -1000:1000
 172              		.loc 1 89 0
 173 00ba 40F20003 		movw	r3, #:lower16:rxCommand
 174 00be C0F20003 		movt	r3, #:upper16:rxCommand
 175 00c2 93ED027A 		flds	s14, [r3, #8]
 176 00c6 40F20003 		movw	r3, #:lower16:eepromConfig
 177 00ca C0F20003 		movt	r3, #:upper16:eepromConfig
 178 00ce D3ED217A 		flds	s15, [r3, #132]
 179 00d2 77EE677A 		fsubs	s15, s14, s15
 180 00d6 40F20003 		movw	r3, #:lower16:rxCommand
 181 00da C0F20003 		movt	r3, #:upper16:rxCommand
 182 00de C3ED027A 		fsts	s15, [r3, #8]
  90:../src/flightCommand.c **** 
  91:../src/flightCommand.c ****         rxCommand[THROTTLE] -= eepromConfig.midCommand - MIDCOMMAND;  // Throttle Range 2000:4000
 183              		.loc 1 91 0
 184 00e2 40F20003 		movw	r3, #:lower16:rxCommand
 185 00e6 C0F20003 		movt	r3, #:upper16:rxCommand
 186 00ea 93ED037A 		flds	s14, [r3, #12]
 187 00ee 40F20003 		movw	r3, #:lower16:eepromConfig
 188 00f2 C0F20003 		movt	r3, #:upper16:eepromConfig
 189 00f6 D3ED216A 		flds	s13, [r3, #132]
 190 00fa DFED8C7A 		flds	s15, .L25+12
 191 00fe 76EEE77A 		fsubs	s15, s13, s15
 192 0102 77EE677A 		fsubs	s15, s14, s15
 193 0106 40F20003 		movw	r3, #:lower16:rxCommand
 194 010a C0F20003 		movt	r3, #:upper16:rxCommand
 195 010e C3ED037A 		fsts	s15, [r3, #12]
  92:../src/flightCommand.c ****         rxCommand[AUX1]     -= eepromConfig.midCommand - MIDCOMMAND;  // Aux1 Range     2000:4000
 196              		.loc 1 92 0
 197 0112 40F20003 		movw	r3, #:lower16:rxCommand
 198 0116 C0F20003 		movt	r3, #:upper16:rxCommand
 199 011a 93ED047A 		flds	s14, [r3, #16]
 200 011e 40F20003 		movw	r3, #:lower16:eepromConfig
 201 0122 C0F20003 		movt	r3, #:upper16:eepromConfig
 202 0126 D3ED216A 		flds	s13, [r3, #132]
 203 012a DFED807A 		flds	s15, .L25+12
 204 012e 76EEE77A 		fsubs	s15, s13, s15
 205 0132 77EE677A 		fsubs	s15, s14, s15
 206 0136 40F20003 		movw	r3, #:lower16:rxCommand
 207 013a C0F20003 		movt	r3, #:upper16:rxCommand
 208 013e C3ED047A 		fsts	s15, [r3, #16]
  93:../src/flightCommand.c ****         rxCommand[AUX2]     -= eepromConfig.midCommand - MIDCOMMAND;  // Aux2 Range     2000:4000
 209              		.loc 1 93 0
 210 0142 40F20003 		movw	r3, #:lower16:rxCommand
 211 0146 C0F20003 		movt	r3, #:upper16:rxCommand
 212 014a 93ED057A 		flds	s14, [r3, #20]
 213 014e 40F20003 		movw	r3, #:lower16:eepromConfig
 214 0152 C0F20003 		movt	r3, #:upper16:eepromConfig
 215 0156 D3ED216A 		flds	s13, [r3, #132]
 216 015a DFED747A 		flds	s15, .L25+12
 217 015e 76EEE77A 		fsubs	s15, s13, s15
 218 0162 77EE677A 		fsubs	s15, s14, s15
 219 0166 40F20003 		movw	r3, #:lower16:rxCommand
 220 016a C0F20003 		movt	r3, #:upper16:rxCommand
 221 016e C3ED057A 		fsts	s15, [r3, #20]
  94:../src/flightCommand.c ****         rxCommand[AUX3]     -= eepromConfig.midCommand - MIDCOMMAND;  // Aux3 Range     2000:4000
 222              		.loc 1 94 0
 223 0172 40F20003 		movw	r3, #:lower16:rxCommand
 224 0176 C0F20003 		movt	r3, #:upper16:rxCommand
 225 017a 93ED067A 		flds	s14, [r3, #24]
 226 017e 40F20003 		movw	r3, #:lower16:eepromConfig
 227 0182 C0F20003 		movt	r3, #:upper16:eepromConfig
 228 0186 D3ED216A 		flds	s13, [r3, #132]
 229 018a DFED687A 		flds	s15, .L25+12
 230 018e 76EEE77A 		fsubs	s15, s13, s15
 231 0192 77EE677A 		fsubs	s15, s14, s15
 232 0196 40F20003 		movw	r3, #:lower16:rxCommand
 233 019a C0F20003 		movt	r3, #:upper16:rxCommand
 234 019e C3ED067A 		fsts	s15, [r3, #24]
  95:../src/flightCommand.c ****         rxCommand[AUX4]     -= eepromConfig.midCommand - MIDCOMMAND;  // Aux4 Range     2000:4000
 235              		.loc 1 95 0
 236 01a2 40F20003 		movw	r3, #:lower16:rxCommand
 237 01a6 C0F20003 		movt	r3, #:upper16:rxCommand
 238 01aa 93ED077A 		flds	s14, [r3, #28]
 239 01ae 40F20003 		movw	r3, #:lower16:eepromConfig
 240 01b2 C0F20003 		movt	r3, #:upper16:eepromConfig
 241 01b6 D3ED216A 		flds	s13, [r3, #132]
 242 01ba DFED5C7A 		flds	s15, .L25+12
 243 01be 76EEE77A 		fsubs	s15, s13, s15
 244 01c2 77EE677A 		fsubs	s15, s14, s15
 245 01c6 40F20003 		movw	r3, #:lower16:rxCommand
 246 01ca C0F20003 		movt	r3, #:upper16:rxCommand
 247 01ce C3ED077A 		fsts	s15, [r3, #28]
 248              	.L2:
  96:../src/flightCommand.c ****     }
  97:../src/flightCommand.c **** 
  98:../src/flightCommand.c ****     // Set past command in detent values
  99:../src/flightCommand.c ****     for (channel = 0; channel < 3; channel++)
 249              		.loc 1 99 0
 250 01d2 4FF00003 		mov	r3, #0
 251 01d6 8DF80730 		strb	r3, [sp, #7]
 252 01da 13E0     		b	.L5
 253              	.L6:
 100:../src/flightCommand.c ****     	previousCommandInDetent[channel] = commandInDetent[channel];
 254              		.loc 1 100 0 discriminator 2
 255 01dc 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 256 01e0 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 257 01e4 40F20003 		movw	r3, #:lower16:commandInDetent
 258 01e8 C0F20003 		movt	r3, #:upper16:commandInDetent
 259 01ec 595C     		ldrb	r1, [r3, r1]	@ zero_extendqisi2
 260 01ee 40F20003 		movw	r3, #:lower16:previousCommandInDetent
 261 01f2 C0F20003 		movt	r3, #:upper16:previousCommandInDetent
 262 01f6 9954     		strb	r1, [r3, r2]
  99:../src/flightCommand.c ****     for (channel = 0; channel < 3; channel++)
 263              		.loc 1 99 0 discriminator 2
 264 01f8 9DF80730 		ldrb	r3, [sp, #7]
 265 01fc 03F10103 		add	r3, r3, #1
 266 0200 8DF80730 		strb	r3, [sp, #7]
 267              	.L5:
  99:../src/flightCommand.c ****     for (channel = 0; channel < 3; channel++)
 268              		.loc 1 99 0 is_stmt 0 discriminator 1
 269 0204 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 270 0208 022B     		cmp	r3, #2
 271 020a E7D9     		bls	.L6
 101:../src/flightCommand.c **** 
 102:../src/flightCommand.c ****     // Apply deadbands and set detent discretes'
 103:../src/flightCommand.c ****     for (channel = 0; channel < 3; channel++)
 272              		.loc 1 103 0 is_stmt 1
 273 020c 4FF00003 		mov	r3, #0
 274 0210 8DF80730 		strb	r3, [sp, #7]
 275 0214 B4E0     		b	.L7
 276              	.L11:
 104:../src/flightCommand.c ****     {
 105:../src/flightCommand.c ****     	if ((rxCommand[channel] <= DEADBAND) && (rxCommand[channel] >= -DEADBAND))
 277              		.loc 1 105 0
 278 0216 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 279 021a 40F20003 		movw	r3, #:lower16:rxCommand
 280 021e C0F20003 		movt	r3, #:upper16:rxCommand
 281 0222 4FEA8202 		lsl	r2, r2, #2
 282 0226 9B18     		adds	r3, r3, r2
 283 0228 93ED007A 		flds	s14, [r3, #0]
 284 022c F3EE087A 		fconsts	s15, #56
 285 0230 B4EEE77A 		fcmpes	s14, s15
 286 0234 F1EE10FA 		fmstat
 287 0238 8CBF     		ite	hi
 288 023a 0023     		movhi	r3, #0
 289 023c 0123     		movls	r3, #1
 290 023e DBB2     		uxtb	r3, r3
 291 0240 002B     		cmp	r3, #0
 292 0242 2BD0     		beq	.L8
 293              		.loc 1 105 0 is_stmt 0 discriminator 1
 294 0244 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 295 0248 40F20003 		movw	r3, #:lower16:rxCommand
 296 024c C0F20003 		movt	r3, #:upper16:rxCommand
 297 0250 4FEA8202 		lsl	r2, r2, #2
 298 0254 9B18     		adds	r3, r3, r2
 299 0256 93ED007A 		flds	s14, [r3, #0]
 300 025a FBEE087A 		fconsts	s15, #184
 301 025e B4EEE77A 		fcmpes	s14, s15
 302 0262 F1EE10FA 		fmstat
 303 0266 B4BF     		ite	lt
 304 0268 0023     		movlt	r3, #0
 305 026a 0123     		movge	r3, #1
 306 026c DBB2     		uxtb	r3, r3
 307 026e 002B     		cmp	r3, #0
 308 0270 14D0     		beq	.L8
 106:../src/flightCommand.c ****         {
 107:../src/flightCommand.c ****             rxCommand[channel] = 0;
 309              		.loc 1 107 0 is_stmt 1
 310 0272 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 311 0276 40F20003 		movw	r3, #:lower16:rxCommand
 312 027a C0F20003 		movt	r3, #:upper16:rxCommand
 313 027e 4FEA8202 		lsl	r2, r2, #2
 314 0282 9B18     		adds	r3, r3, r2
 315 0284 264A     		ldr	r2, .L25	@ float
 316 0286 1A60     		str	r2, [r3, #0]	@ float
 108:../src/flightCommand.c ****   	        commandInDetent[channel] = true;
 317              		.loc 1 108 0
 318 0288 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 319 028c 40F20003 		movw	r3, #:lower16:commandInDetent
 320 0290 C0F20003 		movt	r3, #:upper16:commandInDetent
 321 0294 4FF00101 		mov	r1, #1
 322 0298 9954     		strb	r1, [r3, r2]
 323 029a 6BE0     		b	.L9
 324              	.L8:
 109:../src/flightCommand.c ****   	    }
 110:../src/flightCommand.c ****         else
 111:../src/flightCommand.c ****   	    {
 112:../src/flightCommand.c ****   	        commandInDetent[channel] = false;
 325              		.loc 1 112 0
 326 029c 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 327 02a0 40F20003 		movw	r3, #:lower16:commandInDetent
 328 02a4 C0F20003 		movt	r3, #:upper16:commandInDetent
 329 02a8 4FF00001 		mov	r1, #0
 330 02ac 9954     		strb	r1, [r3, r2]
 113:../src/flightCommand.c ****   	        if (rxCommand[channel] > 0)
 331              		.loc 1 113 0
 332 02ae 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 333 02b2 40F20003 		movw	r3, #:lower16:rxCommand
 334 02b6 C0F20003 		movt	r3, #:upper16:rxCommand
 335 02ba 4FEA8202 		lsl	r2, r2, #2
 336 02be 9B18     		adds	r3, r3, r2
 337 02c0 D3ED007A 		flds	s15, [r3, #0]
 338 02c4 F5EEC07A 		fcmpezs	s15
 339 02c8 F1EE10FA 		fmstat
 340 02cc D4BF     		ite	le
 341 02ce 0023     		movle	r3, #0
 342 02d0 0123     		movgt	r3, #1
 343 02d2 DBB2     		uxtb	r3, r3
 344 02d4 002B     		cmp	r3, #0
 345 02d6 2BD0     		beq	.L10
 114:../src/flightCommand.c ****   	        {
 115:../src/flightCommand.c ****   		        rxCommand[channel] = (rxCommand[channel] - DEADBAND) * DEADBAND_SLOPE;
 346              		.loc 1 115 0
 347 02d8 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 348 02dc 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 349 02e0 40F20003 		movw	r3, #:lower16:rxCommand
 350 02e4 C0F20003 		movt	r3, #:upper16:rxCommand
 351 02e8 4FEA8101 		lsl	r1, r1, #2
 352 02ec 5B18     		adds	r3, r3, r1
 353 02ee 93ED007A 		flds	s14, [r3, #0]
 354 02f2 F3EE087A 		fconsts	s15, #56
 355 02f6 37EE677A 		fsubs	s14, s14, s15
 356 02fa DFED0A7A 		flds	s15, .L25+4
 357 02fe 67EE277A 		fmuls	s15, s14, s15
 358 0302 9FED097A 		flds	s14, .L25+8
 359 0306 C7EE877A 		fdivs	s15, s15, s14
 360 030a 40F20003 		movw	r3, #:lower16:rxCommand
 361 030e C0F20003 		movt	r3, #:upper16:rxCommand
 362 0312 4FEA8202 		lsl	r2, r2, #2
 363 0316 9B18     		adds	r3, r3, r2
 364 0318 C3ED007A 		fsts	s15, [r3, #0]
 365 031c 2AE0     		b	.L9
 366              	.L26:
 367 031e 00BF     		.align	2
 368              	.L25:
 369 0320 00000000 		.word	0
 370 0324 00007A44 		.word	1148846080
 371 0328 00007444 		.word	1148452864
 372 032c 00803B45 		.word	1161527296
 373              	.L10:
 116:../src/flightCommand.c ****   	        }
 117:../src/flightCommand.c ****   	        else
 118:../src/flightCommand.c ****   	        {
 119:../src/flightCommand.c ****   	            rxCommand[channel] = (rxCommand[channel] + DEADBAND) * DEADBAND_SLOPE;
 374              		.loc 1 119 0
 375 0330 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 376 0334 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 377 0338 40F20003 		movw	r3, #:lower16:rxCommand
 378 033c C0F20003 		movt	r3, #:upper16:rxCommand
 379 0340 4FEA8101 		lsl	r1, r1, #2
 380 0344 5B18     		adds	r3, r3, r1
 381 0346 93ED007A 		flds	s14, [r3, #0]
 382 034a F3EE087A 		fconsts	s15, #56
 383 034e 37EE277A 		fadds	s14, s14, s15
 384 0352 5FED0C7A 		flds	s15, .L25+4
 385 0356 67EE277A 		fmuls	s15, s14, s15
 386 035a 1FED0D7A 		flds	s14, .L25+8
 387 035e C7EE877A 		fdivs	s15, s15, s14
 388 0362 40F20003 		movw	r3, #:lower16:rxCommand
 389 0366 C0F20003 		movt	r3, #:upper16:rxCommand
 390 036a 4FEA8202 		lsl	r2, r2, #2
 391 036e 9B18     		adds	r3, r3, r2
 392 0370 C3ED007A 		fsts	s15, [r3, #0]
 393              	.L9:
 103:../src/flightCommand.c ****     for (channel = 0; channel < 3; channel++)
 394              		.loc 1 103 0
 395 0374 9DF80730 		ldrb	r3, [sp, #7]
 396 0378 03F10103 		add	r3, r3, #1
 397 037c 8DF80730 		strb	r3, [sp, #7]
 398              	.L7:
 103:../src/flightCommand.c ****     for (channel = 0; channel < 3; channel++)
 399              		.loc 1 103 0 is_stmt 0 discriminator 1
 400 0380 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 401 0384 022B     		cmp	r3, #2
 402 0386 7FF646AF 		bls	.L11
 120:../src/flightCommand.c ****   	        }
 121:../src/flightCommand.c ****         }
 122:../src/flightCommand.c ****     }
 123:../src/flightCommand.c **** 
 124:../src/flightCommand.c ****     ///////////////////////////////////
 125:../src/flightCommand.c **** 
 126:../src/flightCommand.c ****     // Check for low throttle
 127:../src/flightCommand.c ****     if ( rxCommand[THROTTLE] < eepromConfig.minCheck )
 403              		.loc 1 127 0 is_stmt 1
 404 038a 40F20003 		movw	r3, #:lower16:rxCommand
 405 038e C0F20003 		movt	r3, #:upper16:rxCommand
 406 0392 93ED037A 		flds	s14, [r3, #12]
 407 0396 40F20003 		movw	r3, #:lower16:eepromConfig
 408 039a C0F20003 		movt	r3, #:upper16:eepromConfig
 409 039e D3ED227A 		flds	s15, [r3, #136]
 410 03a2 B4EEE77A 		fcmpes	s14, s15
 411 03a6 F1EE10FA 		fmstat
 412 03aa 54BF     		ite	pl
 413 03ac 0023     		movpl	r3, #0
 414 03ae 0123     		movmi	r3, #1
 415 03b0 DBB2     		uxtb	r3, r3
 416 03b2 002B     		cmp	r3, #0
 417 03b4 00F0D480 		beq	.L12
 128:../src/flightCommand.c ****     {
 129:../src/flightCommand.c **** 		// Check for disarm command ( low throttle, left yaw ), will disarm immediately
 130:../src/flightCommand.c **** 		if ( (rxCommand[YAW] < (eepromConfig.minCheck - MIDCOMMAND)) && (armed == true) )
 418              		.loc 1 130 0
 419 03b8 40F20003 		movw	r3, #:lower16:rxCommand
 420 03bc C0F20003 		movt	r3, #:upper16:rxCommand
 421 03c0 93ED027A 		flds	s14, [r3, #8]
 422 03c4 40F20003 		movw	r3, #:lower16:eepromConfig
 423 03c8 C0F20003 		movt	r3, #:upper16:eepromConfig
 424 03cc D3ED226A 		flds	s13, [r3, #136]
 425 03d0 5FED2A7A 		flds	s15, .L25+12
 426 03d4 76EEE77A 		fsubs	s15, s13, s15
 427 03d8 B4EEE77A 		fcmpes	s14, s15
 428 03dc F1EE10FA 		fmstat
 429 03e0 54BF     		ite	pl
 430 03e2 0023     		movpl	r3, #0
 431 03e4 0123     		movmi	r3, #1
 432 03e6 DBB2     		uxtb	r3, r3
 433 03e8 002B     		cmp	r3, #0
 434 03ea 11D0     		beq	.L13
 435              		.loc 1 130 0 is_stmt 0 discriminator 1
 436 03ec 40F20003 		movw	r3, #:lower16:armed
 437 03f0 C0F20003 		movt	r3, #:upper16:armed
 438 03f4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 439 03f6 012B     		cmp	r3, #1
 440 03f8 0AD1     		bne	.L13
 131:../src/flightCommand.c **** 		{
 132:../src/flightCommand.c **** 			armed = false;
 441              		.loc 1 132 0 is_stmt 1
 442 03fa 40F20003 		movw	r3, #:lower16:armed
 443 03fe C0F20003 		movt	r3, #:upper16:armed
 444 0402 4FF00002 		mov	r2, #0
 445 0406 1A70     		strb	r2, [r3, #0]
 133:../src/flightCommand.c **** 
 134:../src/flightCommand.c **** 			zeroPIDintegralError();
 446              		.loc 1 134 0
 447 0408 FFF7FEFF 		bl	zeroPIDintegralError
 135:../src/flightCommand.c **** 			zeroPIDstates();
 448              		.loc 1 135 0
 449 040c FFF7FEFF 		bl	zeroPIDstates
 450              	.L13:
 136:../src/flightCommand.c **** 		}
 137:../src/flightCommand.c **** 
 138:../src/flightCommand.c **** 		// Check for gyro bias command ( low throttle, left yaw, aft pitch, right roll )
 139:../src/flightCommand.c **** 		if ( (rxCommand[YAW  ] < (eepromConfig.minCheck - MIDCOMMAND)) &&
 451              		.loc 1 139 0
 452 0410 40F20003 		movw	r3, #:lower16:rxCommand
 453 0414 C0F20003 		movt	r3, #:upper16:rxCommand
 454 0418 93ED027A 		flds	s14, [r3, #8]
 455 041c 40F20003 		movw	r3, #:lower16:eepromConfig
 456 0420 C0F20003 		movt	r3, #:upper16:eepromConfig
 457 0424 D3ED226A 		flds	s13, [r3, #136]
 458 0428 5FED407A 		flds	s15, .L25+12
 459 042c 76EEE77A 		fsubs	s15, s13, s15
 460 0430 B4EEE77A 		fcmpes	s14, s15
 461 0434 F1EE10FA 		fmstat
 462 0438 54BF     		ite	pl
 463 043a 0023     		movpl	r3, #0
 464 043c 0123     		movmi	r3, #1
 465 043e DBB2     		uxtb	r3, r3
 466 0440 002B     		cmp	r3, #0
 467 0442 37D0     		beq	.L14
 140:../src/flightCommand.c **** 		     (rxCommand[ROLL ] > (eepromConfig.maxCheck - MIDCOMMAND)) &&
 468              		.loc 1 140 0 discriminator 1
 469 0444 40F20003 		movw	r3, #:lower16:rxCommand
 470 0448 C0F20003 		movt	r3, #:upper16:rxCommand
 471 044c 93ED007A 		flds	s14, [r3, #0]
 472 0450 40F20003 		movw	r3, #:lower16:eepromConfig
 473 0454 C0F20003 		movt	r3, #:upper16:eepromConfig
 474 0458 D3ED236A 		flds	s13, [r3, #140]
 475 045c 5FED4D7A 		flds	s15, .L25+12
 476 0460 76EEE77A 		fsubs	s15, s13, s15
 477 0464 B4EEE77A 		fcmpes	s14, s15
 478 0468 F1EE10FA 		fmstat
 479 046c D4BF     		ite	le
 480 046e 0023     		movle	r3, #0
 481 0470 0123     		movgt	r3, #1
 482 0472 DBB2     		uxtb	r3, r3
 139:../src/flightCommand.c **** 		if ( (rxCommand[YAW  ] < (eepromConfig.minCheck - MIDCOMMAND)) &&
 483              		.loc 1 139 0 discriminator 1
 484 0474 002B     		cmp	r3, #0
 485 0476 1DD0     		beq	.L14
 141:../src/flightCommand.c **** 		     (rxCommand[PITCH] < (eepromConfig.minCheck - MIDCOMMAND)) )
 486              		.loc 1 141 0
 487 0478 40F20003 		movw	r3, #:lower16:rxCommand
 488 047c C0F20003 		movt	r3, #:upper16:rxCommand
 489 0480 93ED017A 		flds	s14, [r3, #4]
 490 0484 40F20003 		movw	r3, #:lower16:eepromConfig
 491 0488 C0F20003 		movt	r3, #:upper16:eepromConfig
 492 048c D3ED226A 		flds	s13, [r3, #136]
 493 0490 5FED5A7A 		flds	s15, .L25+12
 494 0494 76EEE77A 		fsubs	s15, s13, s15
 495 0498 B4EEE77A 		fcmpes	s14, s15
 496 049c F1EE10FA 		fmstat
 497 04a0 54BF     		ite	pl
 498 04a2 0023     		movpl	r3, #0
 499 04a4 0123     		movmi	r3, #1
 500 04a6 DBB2     		uxtb	r3, r3
 140:../src/flightCommand.c **** 		     (rxCommand[ROLL ] > (eepromConfig.maxCheck - MIDCOMMAND)) &&
 501              		.loc 1 140 0
 502 04a8 002B     		cmp	r3, #0
 503 04aa 03D0     		beq	.L14
 142:../src/flightCommand.c **** 		{
 143:../src/flightCommand.c **** 			// HJI computeMPU6000RTData();
 144:../src/flightCommand.c **** 			pulseMotors(3);
 504              		.loc 1 144 0
 505 04ac 4FF00300 		mov	r0, #3
 506 04b0 FFF7FEFF 		bl	pulseMotors
 507              	.L14:
 145:../src/flightCommand.c **** 		}
 146:../src/flightCommand.c **** 
 147:../src/flightCommand.c **** 		// Check for arm command ( low throttle, right yaw), must be present for 1 sec before arming
 148:../src/flightCommand.c **** 		if ((rxCommand[YAW] > (eepromConfig.maxCheck - MIDCOMMAND) ) && (armed == false) && (execUp == tr
 508              		.loc 1 148 0
 509 04b4 40F20003 		movw	r3, #:lower16:rxCommand
 510 04b8 C0F20003 		movt	r3, #:upper16:rxCommand
 511 04bc 93ED027A 		flds	s14, [r3, #8]
 512 04c0 40F20003 		movw	r3, #:lower16:eepromConfig
 513 04c4 C0F20003 		movt	r3, #:upper16:eepromConfig
 514 04c8 D3ED236A 		flds	s13, [r3, #140]
 515 04cc 5FED697A 		flds	s15, .L25+12
 516 04d0 76EEE77A 		fsubs	s15, s13, s15
 517 04d4 B4EEE77A 		fcmpes	s14, s15
 518 04d8 F1EE10FA 		fmstat
 519 04dc D4BF     		ite	le
 520 04de 0023     		movle	r3, #0
 521 04e0 0123     		movgt	r3, #1
 522 04e2 DBB2     		uxtb	r3, r3
 523 04e4 002B     		cmp	r3, #0
 524 04e6 34D0     		beq	.L15
 525              		.loc 1 148 0 is_stmt 0 discriminator 1
 526 04e8 40F20003 		movw	r3, #:lower16:armed
 527 04ec C0F20003 		movt	r3, #:upper16:armed
 528 04f0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 529 04f2 002B     		cmp	r3, #0
 530 04f4 2DD1     		bne	.L15
 531 04f6 40F20003 		movw	r3, #:lower16:execUp
 532 04fa C0F20003 		movt	r3, #:upper16:execUp
 533 04fe 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 534 0500 012B     		cmp	r3, #1
 535 0502 26D1     		bne	.L15
 149:../src/flightCommand.c **** 		{
 150:../src/flightCommand.c **** 			armingTimer++;
 536              		.loc 1 150 0 is_stmt 1
 537 0504 40F20003 		movw	r3, #:lower16:armingTimer
 538 0508 C0F20003 		movt	r3, #:upper16:armingTimer
 539 050c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 540 050e 03F10103 		add	r3, r3, #1
 541 0512 DAB2     		uxtb	r2, r3
 542 0514 40F20003 		movw	r3, #:lower16:armingTimer
 543 0518 C0F20003 		movt	r3, #:upper16:armingTimer
 544 051c 1A70     		strb	r2, [r3, #0]
 151:../src/flightCommand.c **** 
 152:../src/flightCommand.c **** 			if ( armingTimer > 50 )
 545              		.loc 1 152 0
 546 051e 40F20003 		movw	r3, #:lower16:armingTimer
 547 0522 C0F20003 		movt	r3, #:upper16:armingTimer
 548 0526 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 549 0528 322B     		cmp	r3, #50
 550 052a 19D9     		bls	.L12
 153:../src/flightCommand.c **** 			{
 154:../src/flightCommand.c **** 				zeroPIDintegralError();
 551              		.loc 1 154 0
 552 052c FFF7FEFF 		bl	zeroPIDintegralError
 155:../src/flightCommand.c **** 				zeroPIDstates();
 553              		.loc 1 155 0
 554 0530 FFF7FEFF 		bl	zeroPIDstates
 156:../src/flightCommand.c **** 				armed = true;
 555              		.loc 1 156 0
 556 0534 40F20003 		movw	r3, #:lower16:armed
 557 0538 C0F20003 		movt	r3, #:upper16:armed
 558 053c 4FF00102 		mov	r2, #1
 559 0540 1A70     		strb	r2, [r3, #0]
 157:../src/flightCommand.c **** 				armingTimer = 0;
 560              		.loc 1 157 0
 561 0542 40F20003 		movw	r3, #:lower16:armingTimer
 562 0546 C0F20003 		movt	r3, #:upper16:armingTimer
 563 054a 4FF00002 		mov	r2, #0
 564 054e 1A70     		strb	r2, [r3, #0]
 152:../src/flightCommand.c **** 			if ( armingTimer > 50 )
 565              		.loc 1 152 0
 566 0550 06E0     		b	.L12
 567              	.L15:
 158:../src/flightCommand.c **** 			}
 159:../src/flightCommand.c **** 		}
 160:../src/flightCommand.c **** 		else
 161:../src/flightCommand.c **** 		{
 162:../src/flightCommand.c **** 			armingTimer = 0;
 568              		.loc 1 162 0
 569 0552 40F20003 		movw	r3, #:lower16:armingTimer
 570 0556 C0F20003 		movt	r3, #:upper16:armingTimer
 571 055a 4FF00002 		mov	r2, #0
 572 055e 1A70     		strb	r2, [r3, #0]
 573              	.L12:
 163:../src/flightCommand.c **** 		}
 164:../src/flightCommand.c **** 	}
 165:../src/flightCommand.c **** 
 166:../src/flightCommand.c **** 	///////////////////////////////////
 167:../src/flightCommand.c **** 
 168:../src/flightCommand.c **** 	// Check for armed true and throttle command > minThrottle
 169:../src/flightCommand.c ****     if ((armed == true) && (rxCommand[THROTTLE] > eepromConfig.minThrottle))
 574              		.loc 1 169 0
 575 0560 40F20003 		movw	r3, #:lower16:armed
 576 0564 C0F20003 		movt	r3, #:upper16:armed
 577 0568 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 578 056a 012B     		cmp	r3, #1
 579 056c 1DD1     		bne	.L17
 580              		.loc 1 169 0 is_stmt 0 discriminator 1
 581 056e 40F20003 		movw	r3, #:lower16:rxCommand
 582 0572 C0F20003 		movt	r3, #:upper16:rxCommand
 583 0576 93ED037A 		flds	s14, [r3, #12]
 584 057a 40F20003 		movw	r3, #:lower16:eepromConfig
 585 057e C0F20003 		movt	r3, #:upper16:eepromConfig
 586 0582 D3ED247A 		flds	s15, [r3, #144]
 587 0586 B4EEE77A 		fcmpes	s14, s15
 588 058a F1EE10FA 		fmstat
 589 058e D4BF     		ite	le
 590 0590 0023     		movle	r3, #0
 591 0592 0123     		movgt	r3, #1
 592 0594 DBB2     		uxtb	r3, r3
 593 0596 002B     		cmp	r3, #0
 594 0598 07D0     		beq	.L17
 170:../src/flightCommand.c ****     	holdIntegrators = false;
 595              		.loc 1 170 0 is_stmt 1
 596 059a 40F20003 		movw	r3, #:lower16:holdIntegrators
 597 059e C0F20003 		movt	r3, #:upper16:holdIntegrators
 598 05a2 4FF00002 		mov	r2, #0
 599 05a6 1A70     		strb	r2, [r3, #0]
 600 05a8 06E0     		b	.L18
 601              	.L17:
 171:../src/flightCommand.c ****     else
 172:../src/flightCommand.c ****     	holdIntegrators = true;
 602              		.loc 1 172 0
 603 05aa 40F20003 		movw	r3, #:lower16:holdIntegrators
 604 05ae C0F20003 		movt	r3, #:upper16:holdIntegrators
 605 05b2 4FF00102 		mov	r2, #1
 606 05b6 1A70     		strb	r2, [r3, #0]
 607              	.L18:
 173:../src/flightCommand.c **** 
 174:../src/flightCommand.c ****     ///////////////////////////////////
 175:../src/flightCommand.c **** 
 176:../src/flightCommand.c ****     // Check AUX1 for rate, attitude, or GPS mode (3 Position Switch) NOT COMPLETE YET....
 177:../src/flightCommand.c **** 
 178:../src/flightCommand.c **** 	if ((rxCommand[AUX1] > MIDCOMMAND) && (flightMode == RATE))
 608              		.loc 1 178 0
 609 05b8 40F20003 		movw	r3, #:lower16:rxCommand
 610 05bc C0F20003 		movt	r3, #:upper16:rxCommand
 611 05c0 93ED047A 		flds	s14, [r3, #16]
 612 05c4 5FEDA77A 		flds	s15, .L25+12
 613 05c8 B4EEE77A 		fcmpes	s14, s15
 614 05cc F1EE10FA 		fmstat
 615 05d0 D4BF     		ite	le
 616 05d2 0023     		movle	r3, #0
 617 05d4 0123     		movgt	r3, #1
 618 05d6 DBB2     		uxtb	r3, r3
 619 05d8 002B     		cmp	r3, #0
 620 05da 2CD0     		beq	.L19
 621              		.loc 1 178 0 is_stmt 0 discriminator 1
 622 05dc 40F20003 		movw	r3, #:lower16:flightMode
 623 05e0 C0F20003 		movt	r3, #:upper16:flightMode
 624 05e4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 625 05e6 002B     		cmp	r3, #0
 626 05e8 25D1     		bne	.L19
 179:../src/flightCommand.c **** 	{
 180:../src/flightCommand.c **** 		flightMode = ATTITUDE;
 627              		.loc 1 180 0 is_stmt 1
 628 05ea 40F20003 		movw	r3, #:lower16:flightMode
 629 05ee C0F20003 		movt	r3, #:upper16:flightMode
 630 05f2 4FF00102 		mov	r2, #1
 631 05f6 1A70     		strb	r2, [r3, #0]
 181:../src/flightCommand.c **** 		setPIDintegralError(ROLL_ATT_PID,  0.0f);
 632              		.loc 1 181 0
 633 05f8 4FF00300 		mov	r0, #3
 634 05fc 6D49     		ldr	r1, .L27+4	@ float
 635 05fe FFF7FEFF 		bl	setPIDintegralError
 182:../src/flightCommand.c **** 		setPIDintegralError(PITCH_ATT_PID, 0.0f);
 636              		.loc 1 182 0
 637 0602 4FF00400 		mov	r0, #4
 638 0606 6B49     		ldr	r1, .L27+4	@ float
 639 0608 FFF7FEFF 		bl	setPIDintegralError
 183:../src/flightCommand.c **** 		setPIDintegralError(HEADING_PID,   0.0f);
 640              		.loc 1 183 0
 641 060c 4FF00500 		mov	r0, #5
 642 0610 6849     		ldr	r1, .L27+4	@ float
 643 0612 FFF7FEFF 		bl	setPIDintegralError
 184:../src/flightCommand.c **** 		setPIDstates(ROLL_ATT_PID,  0.0f);
 644              		.loc 1 184 0
 645 0616 4FF00300 		mov	r0, #3
 646 061a 6649     		ldr	r1, .L27+4	@ float
 647 061c FFF7FEFF 		bl	setPIDstates
 185:../src/flightCommand.c **** 		setPIDstates(PITCH_ATT_PID, 0.0f);
 648              		.loc 1 185 0
 649 0620 4FF00400 		mov	r0, #4
 650 0624 6349     		ldr	r1, .L27+4	@ float
 651 0626 FFF7FEFF 		bl	setPIDstates
 186:../src/flightCommand.c **** 		setPIDstates(HEADING_PID,   0.0f);
 652              		.loc 1 186 0
 653 062a 4FF00500 		mov	r0, #5
 654 062e 6149     		ldr	r1, .L27+4	@ float
 655 0630 FFF7FEFF 		bl	setPIDstates
 656 0634 3DE0     		b	.L20
 657              	.L19:
 187:../src/flightCommand.c **** 	}
 188:../src/flightCommand.c **** 	else if ((rxCommand[AUX1] <= MIDCOMMAND) && (flightMode == ATTITUDE))
 658              		.loc 1 188 0
 659 0636 40F20003 		movw	r3, #:lower16:rxCommand
 660 063a C0F20003 		movt	r3, #:upper16:rxCommand
 661 063e 93ED047A 		flds	s14, [r3, #16]
 662 0642 DFED5B7A 		flds	s15, .L27
 663 0646 B4EEE77A 		fcmpes	s14, s15
 664 064a F1EE10FA 		fmstat
 665 064e 8CBF     		ite	hi
 666 0650 0023     		movhi	r3, #0
 667 0652 0123     		movls	r3, #1
 668 0654 DBB2     		uxtb	r3, r3
 669 0656 002B     		cmp	r3, #0
 670 0658 2BD0     		beq	.L20
 671              		.loc 1 188 0 is_stmt 0 discriminator 1
 672 065a 40F20003 		movw	r3, #:lower16:flightMode
 673 065e C0F20003 		movt	r3, #:upper16:flightMode
 674 0662 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 675 0664 012B     		cmp	r3, #1
 676 0666 24D1     		bne	.L20
 189:../src/flightCommand.c **** 	{
 190:../src/flightCommand.c **** 		flightMode = RATE;
 677              		.loc 1 190 0 is_stmt 1
 678 0668 40F20003 		movw	r3, #:lower16:flightMode
 679 066c C0F20003 		movt	r3, #:upper16:flightMode
 680 0670 4FF00002 		mov	r2, #0
 681 0674 1A70     		strb	r2, [r3, #0]
 191:../src/flightCommand.c **** 		setPIDintegralError(ROLL_RATE_PID,  0.0f);
 682              		.loc 1 191 0
 683 0676 4FF00000 		mov	r0, #0
 684 067a 4E49     		ldr	r1, .L27+4	@ float
 685 067c FFF7FEFF 		bl	setPIDintegralError
 192:../src/flightCommand.c **** 		setPIDintegralError(PITCH_RATE_PID, 0.0f);
 686              		.loc 1 192 0
 687 0680 4FF00100 		mov	r0, #1
 688 0684 4B49     		ldr	r1, .L27+4	@ float
 689 0686 FFF7FEFF 		bl	setPIDintegralError
 193:../src/flightCommand.c **** 		setPIDintegralError(YAW_RATE_PID,   0.0f);
 690              		.loc 1 193 0
 691 068a 4FF00200 		mov	r0, #2
 692 068e 4949     		ldr	r1, .L27+4	@ float
 693 0690 FFF7FEFF 		bl	setPIDintegralError
 194:../src/flightCommand.c **** 		setPIDstates(ROLL_RATE_PID,  0.0f);
 694              		.loc 1 194 0
 695 0694 4FF00000 		mov	r0, #0
 696 0698 4649     		ldr	r1, .L27+4	@ float
 697 069a FFF7FEFF 		bl	setPIDstates
 195:../src/flightCommand.c **** 		setPIDstates(PITCH_RATE_PID, 0.0f);
 698              		.loc 1 195 0
 699 069e 4FF00100 		mov	r0, #1
 700 06a2 4449     		ldr	r1, .L27+4	@ float
 701 06a4 FFF7FEFF 		bl	setPIDstates
 196:../src/flightCommand.c **** 		setPIDstates(YAW_RATE_PID,   0.0f);
 702              		.loc 1 196 0
 703 06a8 4FF00200 		mov	r0, #2
 704 06ac 4149     		ldr	r1, .L27+4	@ float
 705 06ae FFF7FEFF 		bl	setPIDstates
 706              	.L20:
 197:../src/flightCommand.c **** 	}
 198:../src/flightCommand.c **** 
 199:../src/flightCommand.c **** 	///////////////////////////////////
 200:../src/flightCommand.c **** 
 201:../src/flightCommand.c **** 	if ((commandInDetent[YAW] == true) && (flightMode == ATTITUDE))
 707              		.loc 1 201 0
 708 06b2 40F20003 		movw	r3, #:lower16:commandInDetent
 709 06b6 C0F20003 		movt	r3, #:upper16:commandInDetent
 710 06ba 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 711 06bc 012B     		cmp	r3, #1
 712 06be 0ED1     		bne	.L21
 713              		.loc 1 201 0 is_stmt 0 discriminator 1
 714 06c0 40F20003 		movw	r3, #:lower16:flightMode
 715 06c4 C0F20003 		movt	r3, #:upper16:flightMode
 716 06c8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 717 06ca 012B     		cmp	r3, #1
 718 06cc 07D1     		bne	.L21
 202:../src/flightCommand.c **** 	    headingHoldEngaged = true;
 719              		.loc 1 202 0 is_stmt 1
 720 06ce 40F20003 		movw	r3, #:lower16:headingHoldEngaged
 721 06d2 C0F20003 		movt	r3, #:upper16:headingHoldEngaged
 722 06d6 4FF00102 		mov	r2, #1
 723 06da 1A70     		strb	r2, [r3, #0]
 724 06dc 06E0     		b	.L22
 725              	.L21:
 203:../src/flightCommand.c **** 	else
 204:../src/flightCommand.c **** 	    headingHoldEngaged = false;
 726              		.loc 1 204 0
 727 06de 40F20003 		movw	r3, #:lower16:headingHoldEngaged
 728 06e2 C0F20003 		movt	r3, #:upper16:headingHoldEngaged
 729 06e6 4FF00002 		mov	r2, #0
 730 06ea 1A70     		strb	r2, [r3, #0]
 731              	.L22:
 205:../src/flightCommand.c **** 
 206:../src/flightCommand.c **** 	///////////////////////////////////
 207:../src/flightCommand.c **** 
 208:../src/flightCommand.c **** 	// Check AUX2 for altitude hold mode (2 Position Switch)
 209:../src/flightCommand.c **** 
 210:../src/flightCommand.c **** 	if ((rxCommand[AUX2] > MIDCOMMAND) && (previousAUX2State <= MIDCOMMAND))      // Rising edge detec
 732              		.loc 1 210 0
 733 06ec 40F20003 		movw	r3, #:lower16:rxCommand
 734 06f0 C0F20003 		movt	r3, #:upper16:rxCommand
 735 06f4 93ED057A 		flds	s14, [r3, #20]
 736 06f8 DFED2D7A 		flds	s15, .L27
 737 06fc B4EEE77A 		fcmpes	s14, s15
 738 0700 F1EE10FA 		fmstat
 739 0704 D4BF     		ite	le
 740 0706 0023     		movle	r3, #0
 741 0708 0123     		movgt	r3, #1
 742 070a DBB2     		uxtb	r3, r3
 743 070c 002B     		cmp	r3, #0
 744 070e 1AD0     		beq	.L23
 745              		.loc 1 210 0 is_stmt 0 discriminator 1
 746 0710 40F20003 		movw	r3, #:lower16:previousAUX2State
 747 0714 C0F20003 		movt	r3, #:upper16:previousAUX2State
 748 0718 1A88     		ldrh	r2, [r3, #0]
 749 071a 40F6B833 		movw	r3, #3000
 750 071e 9A42     		cmp	r2, r3
 751 0720 11D8     		bhi	.L23
 211:../src/flightCommand.c **** 	{
 212:../src/flightCommand.c **** 		altitudeHoldState = ENGAGED;
 752              		.loc 1 212 0 is_stmt 1
 753 0722 40F20003 		movw	r3, #:lower16:altitudeHoldState
 754 0726 C0F20003 		movt	r3, #:upper16:altitudeHoldState
 755 072a 4FF00102 		mov	r2, #1
 756 072e 1A70     		strb	r2, [r3, #0]
 213:../src/flightCommand.c **** 		altitudeHoldThrottleValue = rxCommand[THROTTLE];
 757              		.loc 1 213 0
 758 0730 40F20003 		movw	r3, #:lower16:rxCommand
 759 0734 C0F20003 		movt	r3, #:upper16:rxCommand
 760 0738 DA68     		ldr	r2, [r3, #12]	@ float
 761 073a 40F20003 		movw	r3, #:lower16:altitudeHoldThrottleValue
 762 073e C0F20003 		movt	r3, #:upper16:altitudeHoldThrottleValue
 763 0742 1A60     		str	r2, [r3, #0]	@ float
 764 0744 21E0     		b	.L24
 765              	.L23:
 214:../src/flightCommand.c **** 	}
 215:../src/flightCommand.c **** 	else if ((rxCommand[AUX2] <= MIDCOMMAND) && (previousAUX2State > MIDCOMMAND)) // Falling edge dete
 766              		.loc 1 215 0
 767 0746 40F20003 		movw	r3, #:lower16:rxCommand
 768 074a C0F20003 		movt	r3, #:upper16:rxCommand
 769 074e 93ED057A 		flds	s14, [r3, #20]
 770 0752 DFED177A 		flds	s15, .L27
 771 0756 B4EEE77A 		fcmpes	s14, s15
 772 075a F1EE10FA 		fmstat
 773 075e 8CBF     		ite	hi
 774 0760 0023     		movhi	r3, #0
 775 0762 0123     		movls	r3, #1
 776 0764 DBB2     		uxtb	r3, r3
 777 0766 002B     		cmp	r3, #0
 778 0768 0FD0     		beq	.L24
 779              		.loc 1 215 0 is_stmt 0 discriminator 1
 780 076a 40F20003 		movw	r3, #:lower16:previousAUX2State
 781 076e C0F20003 		movt	r3, #:upper16:previousAUX2State
 782 0772 1A88     		ldrh	r2, [r3, #0]
 783 0774 40F6B833 		movw	r3, #3000
 784 0778 9A42     		cmp	r2, r3
 785 077a 06D9     		bls	.L24
 216:../src/flightCommand.c **** 	{
 217:../src/flightCommand.c **** 		altitudeHoldState = DISENGAGED;
 786              		.loc 1 217 0 is_stmt 1
 787 077c 40F20003 		movw	r3, #:lower16:altitudeHoldState
 788 0780 C0F20003 		movt	r3, #:upper16:altitudeHoldState
 789 0784 4FF00002 		mov	r2, #0
 790 0788 1A70     		strb	r2, [r3, #0]
 791              	.L24:
 218:../src/flightCommand.c **** 	}
 219:../src/flightCommand.c **** 
 220:../src/flightCommand.c **** 	previousAUX2State = rxCommand[AUX2];
 792              		.loc 1 220 0
 793 078a 40F20003 		movw	r3, #:lower16:rxCommand
 794 078e C0F20003 		movt	r3, #:upper16:rxCommand
 795 0792 D3ED057A 		flds	s15, [r3, #20]
 796 0796 FCEEE77A 		ftouizs	s15, s15
 797 079a 17EE903A 		fmrs	r3, s15	@ int
 798 079e 9AB2     		uxth	r2, r3
 799 07a0 40F20003 		movw	r3, #:lower16:previousAUX2State
 800 07a4 C0F20003 		movt	r3, #:upper16:previousAUX2State
 801 07a8 1A80     		strh	r2, [r3, #0]	@ movhi
 221:../src/flightCommand.c **** 
 222:../src/flightCommand.c **** 
 223:../src/flightCommand.c **** 	///////////////////////////////////
 224:../src/flightCommand.c **** }
 802              		.loc 1 224 0
 803 07aa 02B0     		add	sp, sp, #8
 804 07ac 10BD     		pop	{r4, pc}
 805              	.L28:
 806 07ae 00BF     		.align	2
 807              	.L27:
 808 07b0 00803B45 		.word	1161527296
 809 07b4 00000000 		.word	0
 810              		.cfi_endproc
 811              	.LFE111:
 813              	.Letext0:
 814              		.file 2 "c:\\program files\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 815              		.file 3 "../src/pid.h"
 816              		.file 4 "../src/aq32Plus_F3.h"
 817              		.file 5 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsMediaTe
 818              		.file 6 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsNMEA.h"
 819              		.file 7 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsUblox.h
 820              		.file 8 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\Libraries\\CMSIS\\I
 821              		.file 9 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\drv/drv_rx.h"
 822              		.file 10 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\drv/drv_syste
DEFINED SYMBOLS
                            *ABS*:00000000 flightCommand.c
                            *COM*:00000001 mtk19ProcessDataState
                            *COM*:00000001 nmeaProcessDataState
                            *COM*:00000001 ubloxProcessDataState
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc4ykleY.s:27     .data:00000000 rxCommand
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc4ykleY.s:24     .data:00000000 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc4ykleY.s:40     .data:00000020 commandInDetent
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc4ykleY.s:48     .data:00000024 previousCommandInDetent
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc4ykleY.s:56     .bss:00000000 flightMode
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc4ykleY.s:57     .bss:00000000 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc4ykleY.s:61     .bss:00000001 headingHoldEngaged
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc4ykleY.s:66     .bss:00000002 armed
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc4ykleY.s:71     .bss:00000003 armingTimer
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc4ykleY.s:76     .bss:00000004 altitudeHoldState
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc4ykleY.s:83     .data:00000028 previousAUX2State
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc4ykleY.s:90     .bss:00000008 altitudeHoldThrottleValue
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc4ykleY.s:93     .text:00000000 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc4ykleY.s:98     .text:00000000 processFlightCommands
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc4ykleY.s:369    .text:00000320 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc4ykleY.s:375    .text:00000330 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc4ykleY.s:808    .text:000007b0 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
rcActive
eepromConfig
rxRead
zeroPIDintegralError
zeroPIDstates
pulseMotors
execUp
holdIntegrators
setPIDintegralError
setPIDstates

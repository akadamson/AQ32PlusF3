   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"pid.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	mtk19ProcessDataState,1,1
  20              		.comm	nmeaProcessDataState,1,1
  21              		.comm	ubloxProcessDataState,1,1
  22              		.global	holdIntegrators
  23              		.data
  26              	holdIntegrators:
  27 0000 01       		.byte	1
  28              		.comm	rc,4,4
  29              		.text
  30              		.align	2
  31              		.global	initPID
  32              		.thumb
  33              		.thumb_func
  35              	initPID:
  36              	.LFB111:
  37              		.file 1 "../src/pid.c"
   1:../src/pid.c  **** /*
   2:../src/pid.c  ****   December 2012
   3:../src/pid.c  **** 
   4:../src/pid.c  ****   aq32Plus_F3 Rev -
   5:../src/pid.c  **** 
   6:../src/pid.c  ****   Copyright (c) 2012 John Ihlein.  All rights reserved.
   7:../src/pid.c  **** 
   8:../src/pid.c  ****   Open Source STM32 Based Multicopter Controller Software
   9:../src/pid.c  **** 
  10:../src/pid.c  ****   Includes code and/or ideas from:
  11:../src/pid.c  **** 
  12:../src/pid.c  ****   1)AeroQuad
  13:../src/pid.c  ****   2)BaseFlight
  14:../src/pid.c  ****   3)CH Robotics
  15:../src/pid.c  ****   4)MultiWii
  16:../src/pid.c  ****   5)S.O.H. Madgwick
  17:../src/pid.c  ****   6)UAVX
  18:../src/pid.c  ****   7)STM DiscoveryF3 demonstration software
  19:../src/pid.c  **** 
  20:../src/pid.c  ****   Designed to run on the DiscoveryF3 board
  21:../src/pid.c  **** 
  22:../src/pid.c  ****   This program is free software: you can redistribute it and/or modify
  23:../src/pid.c  ****   it under the terms of the GNU General Public License as published by
  24:../src/pid.c  ****   the Free Software Foundation, either version 3 of the License, or
  25:../src/pid.c  ****   (at your option) any later version.
  26:../src/pid.c  **** 
  27:../src/pid.c  ****   This program is distributed in the hope that it will be useful,
  28:../src/pid.c  ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
  29:../src/pid.c  ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  30:../src/pid.c  ****   GNU General Public License for more details.
  31:../src/pid.c  **** 
  32:../src/pid.c  ****   You should have received a copy of the GNU General Public License
  33:../src/pid.c  ****   along with this program. If not, see <http://www.gnu.org/licenses/>.
  34:../src/pid.c  **** */
  35:../src/pid.c  **** 
  36:../src/pid.c  **** ///////////////////////////////////////////////////////////////////////////////
  37:../src/pid.c  **** 
  38:../src/pid.c  **** #include "board.h"
  39:../src/pid.c  **** 
  40:../src/pid.c  **** ///////////////////////////////////////////////////////////////////////////////
  41:../src/pid.c  **** 
  42:../src/pid.c  **** uint8_t holdIntegrators = true;
  43:../src/pid.c  **** 
  44:../src/pid.c  **** #define F_CUT 20.0f
  45:../src/pid.c  **** float rc;
  46:../src/pid.c  **** 
  47:../src/pid.c  **** ///////////////////////////////////////////////////////////////////////////////
  48:../src/pid.c  **** 
  49:../src/pid.c  **** void initPID(void)
  50:../src/pid.c  **** {
  38              		.loc 1 50 0
  39              		.cfi_startproc
  40              		@ args = 0, pretend = 0, frame = 8
  41              		@ frame_needed = 0, uses_anonymous_args = 0
  42              		@ link register save eliminated.
  43 0000 82B0     		sub	sp, sp, #8
  44              	.LCFI0:
  45              		.cfi_def_cfa_offset 8
  51:../src/pid.c  ****     uint8_t index;
  52:../src/pid.c  **** 
  53:../src/pid.c  ****     rc = 1.0f / ( TWO_PI * F_CUT );
  46              		.loc 1 53 0
  47 0002 40F20003 		movw	r3, #:lower16:rc
  48 0006 C0F20003 		movt	r3, #:upper16:rc
  49 000a 2B4A     		ldr	r2, .L4	@ float
  50 000c 1A60     		str	r2, [r3, #0]	@ float
  54:../src/pid.c  **** 
  55:../src/pid.c  ****     for (index = 0; index < NUMBER_OF_PIDS; index++)
  51              		.loc 1 55 0
  52 000e 4FF00003 		mov	r3, #0
  53 0012 8DF80730 		strb	r3, [sp, #7]
  54 0016 49E0     		b	.L2
  55              	.L3:
  56:../src/pid.c  ****     {
  57:../src/pid.c  ****     	eepromConfig.PID[index].iTerm          = 0.0f;
  56              		.loc 1 57 0 discriminator 2
  57 0018 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
  58 001c 40F20002 		movw	r2, #:lower16:eepromConfig
  59 0020 C0F20002 		movt	r2, #:upper16:eepromConfig
  60 0024 0B46     		mov	r3, r1
  61 0026 4FEA8303 		lsl	r3, r3, #2
  62 002a 5B18     		adds	r3, r3, r1
  63 002c 4FEAC303 		lsl	r3, r3, #3
  64 0030 D318     		adds	r3, r2, r3
  65 0032 03F1A803 		add	r3, r3, #168
  66 0036 214A     		ldr	r2, .L4+4	@ float
  67 0038 1A60     		str	r2, [r3, #0]	@ float
  58:../src/pid.c  ****     	eepromConfig.PID[index].lastDcalcValue = 0.0f;
  68              		.loc 1 58 0 discriminator 2
  69 003a 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
  70 003e 40F20002 		movw	r2, #:lower16:eepromConfig
  71 0042 C0F20002 		movt	r2, #:upper16:eepromConfig
  72 0046 0B46     		mov	r3, r1
  73 0048 4FEA8303 		lsl	r3, r3, #2
  74 004c 5B18     		adds	r3, r3, r1
  75 004e 4FEAC303 		lsl	r3, r3, #3
  76 0052 D318     		adds	r3, r2, r3
  77 0054 03F1B003 		add	r3, r3, #176
  78 0058 184A     		ldr	r2, .L4+4	@ float
  79 005a 1A60     		str	r2, [r3, #0]	@ float
  59:../src/pid.c  ****     	eepromConfig.PID[index].lastDterm      = 0.0f;
  80              		.loc 1 59 0 discriminator 2
  81 005c 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
  82 0060 40F20002 		movw	r2, #:lower16:eepromConfig
  83 0064 C0F20002 		movt	r2, #:upper16:eepromConfig
  84 0068 0B46     		mov	r3, r1
  85 006a 4FEA8303 		lsl	r3, r3, #2
  86 006e 5B18     		adds	r3, r3, r1
  87 0070 4FEAC303 		lsl	r3, r3, #3
  88 0074 D318     		adds	r3, r2, r3
  89 0076 03F1B403 		add	r3, r3, #180
  90 007a 104A     		ldr	r2, .L4+4	@ float
  91 007c 1A60     		str	r2, [r3, #0]	@ float
  60:../src/pid.c  ****     	eepromConfig.PID[index].lastLastDterm  = 0.0f;
  92              		.loc 1 60 0 discriminator 2
  93 007e 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
  94 0082 40F20002 		movw	r2, #:lower16:eepromConfig
  95 0086 C0F20002 		movt	r2, #:upper16:eepromConfig
  96 008a 0B46     		mov	r3, r1
  97 008c 4FEA8303 		lsl	r3, r3, #2
  98 0090 5B18     		adds	r3, r3, r1
  99 0092 4FEAC303 		lsl	r3, r3, #3
 100 0096 D318     		adds	r3, r2, r3
 101 0098 03F1B803 		add	r3, r3, #184
 102 009c 074A     		ldr	r2, .L4+4	@ float
 103 009e 1A60     		str	r2, [r3, #0]	@ float
  55:../src/pid.c  ****     for (index = 0; index < NUMBER_OF_PIDS; index++)
 104              		.loc 1 55 0 discriminator 2
 105 00a0 9DF80730 		ldrb	r3, [sp, #7]
 106 00a4 03F10103 		add	r3, r3, #1
 107 00a8 8DF80730 		strb	r3, [sp, #7]
 108              	.L2:
  55:../src/pid.c  ****     for (index = 0; index < NUMBER_OF_PIDS; index++)
 109              		.loc 1 55 0 is_stmt 0 discriminator 1
 110 00ac 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 111 00b0 0B2B     		cmp	r3, #11
 112 00b2 B1D9     		bls	.L3
  61:../src/pid.c  **** 	}
  62:../src/pid.c  **** }
 113              		.loc 1 62 0 is_stmt 1
 114 00b4 02B0     		add	sp, sp, #8
 115 00b6 7047     		bx	lr
 116              	.L5:
 117              		.align	2
 118              	.L4:
 119 00b8 3661023C 		.word	1006788918
 120 00bc 00000000 		.word	0
 121              		.cfi_endproc
 122              	.LFE111:
 124              		.align	2
 125              		.global	updatePID
 126              		.thumb
 127              		.thumb_func
 129              	updatePID:
 130              	.LFB112:
  63:../src/pid.c  **** 
  64:../src/pid.c  **** ///////////////////////////////////////////////////////////////////////////////
  65:../src/pid.c  **** 
  66:../src/pid.c  **** float updatePID(float command, float state, float deltaT, uint8_t iHold, struct PIDdata *PIDparamet
  67:../src/pid.c  **** {
 131              		.loc 1 67 0
 132              		.cfi_startproc
 133              		@ args = 4, pretend = 0, frame = 32
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135 00c0 00B5     		push	{lr}
 136              	.LCFI1:
 137              		.cfi_def_cfa_offset 4
 138              		.cfi_offset 14, -4
 139 00c2 89B0     		sub	sp, sp, #36
 140              	.LCFI2:
 141              		.cfi_def_cfa_offset 40
 142 00c4 0390     		str	r0, [sp, #12]	@ float
 143 00c6 0291     		str	r1, [sp, #8]	@ float
 144 00c8 0192     		str	r2, [sp, #4]	@ float
 145 00ca 8DF80330 		strb	r3, [sp, #3]
  68:../src/pid.c  ****     float error;
  69:../src/pid.c  ****     float dTerm;
  70:../src/pid.c  ****     float dTermFiltered;
  71:../src/pid.c  ****     float dAverage;
  72:../src/pid.c  **** 
  73:../src/pid.c  ****     ///////////////////////////////////
  74:../src/pid.c  **** 
  75:../src/pid.c  ****     error = command - state;
 146              		.loc 1 75 0
 147 00ce 9DED037A 		flds	s14, [sp, #12]
 148 00d2 DDED027A 		flds	s15, [sp, #8]
 149 00d6 77EE677A 		fsubs	s15, s14, s15
 150 00da CDED077A 		fsts	s15, [sp, #28]
  76:../src/pid.c  **** 
  77:../src/pid.c  ****     if (PIDparameters->type == ANGULAR)
 151              		.loc 1 77 0
 152 00de 0A9B     		ldr	r3, [sp, #40]
 153 00e0 93F82530 		ldrb	r3, [r3, #37]	@ zero_extendqisi2
 154 00e4 012B     		cmp	r3, #1
 155 00e6 03D1     		bne	.L7
  78:../src/pid.c  ****         error = standardRadianFormat(error);
 156              		.loc 1 78 0
 157 00e8 0798     		ldr	r0, [sp, #28]	@ float
 158 00ea FFF7FEFF 		bl	standardRadianFormat
 159 00ee 0790     		str	r0, [sp, #28]	@ float
 160              	.L7:
  79:../src/pid.c  **** 
  80:../src/pid.c  ****     ///////////////////////////////////
  81:../src/pid.c  **** 
  82:../src/pid.c  ****     if ( iHold == false )
 161              		.loc 1 82 0
 162 00f0 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 163 00f4 002B     		cmp	r3, #0
 164 00f6 1FD1     		bne	.L8
  83:../src/pid.c  ****     {
  84:../src/pid.c  ****     	PIDparameters->iTerm += error * deltaT;
 165              		.loc 1 84 0
 166 00f8 0A9B     		ldr	r3, [sp, #40]
 167 00fa 93ED047A 		flds	s14, [r3, #16]
 168 00fe DDED076A 		flds	s13, [sp, #28]
 169 0102 DDED017A 		flds	s15, [sp, #4]
 170 0106 66EEA77A 		fmuls	s15, s13, s15
 171 010a 77EE277A 		fadds	s15, s14, s15
 172 010e 0A9B     		ldr	r3, [sp, #40]
 173 0110 C3ED047A 		fsts	s15, [r3, #16]
  85:../src/pid.c  ****     	PIDparameters->iTerm = constrain(PIDparameters->iTerm, -PIDparameters->windupGuard, PIDparamet
 174              		.loc 1 85 0
 175 0114 0A9B     		ldr	r3, [sp, #40]
 176 0116 1A69     		ldr	r2, [r3, #16]	@ float
 177 0118 0A9B     		ldr	r3, [sp, #40]
 178 011a D3ED057A 		flds	s15, [r3, #20]
 179 011e F1EE677A 		fnegs	s15, s15
 180 0122 17EE901A 		fmrs	r1, s15
 181 0126 0A9B     		ldr	r3, [sp, #40]
 182 0128 5B69     		ldr	r3, [r3, #20]	@ float
 183 012a 1046     		mov	r0, r2	@ float
 184 012c 1A46     		mov	r2, r3	@ float
 185 012e FFF7FEFF 		bl	constrain
 186 0132 0246     		mov	r2, r0	@ float
 187 0134 0A9B     		ldr	r3, [sp, #40]
 188 0136 1A61     		str	r2, [r3, #16]	@ float
 189              	.L8:
  86:../src/pid.c  ****     }
  87:../src/pid.c  **** 
  88:../src/pid.c  ****     ///////////////////////////////////
  89:../src/pid.c  **** 
  90:../src/pid.c  ****     if (PIDparameters->dErrorCalc == D_ERROR)  // Calculate D term from error change
 190              		.loc 1 90 0
 191 0138 0A9B     		ldr	r3, [sp, #40]
 192 013a 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 193 013e 012B     		cmp	r3, #1
 194 0140 10D1     		bne	.L9
  91:../src/pid.c  ****     {
  92:../src/pid.c  **** 		dTerm = (error - PIDparameters->lastDcalcValue) / deltaT;
 195              		.loc 1 92 0
 196 0142 0A9B     		ldr	r3, [sp, #40]
 197 0144 D3ED067A 		flds	s15, [r3, #24]
 198 0148 9DED077A 		flds	s14, [sp, #28]
 199 014c 37EE677A 		fsubs	s14, s14, s15
 200 0150 DDED017A 		flds	s15, [sp, #4]
 201 0154 C7EE277A 		fdivs	s15, s14, s15
 202 0158 CDED067A 		fsts	s15, [sp, #24]
  93:../src/pid.c  ****         PIDparameters->lastDcalcValue = error;
 203              		.loc 1 93 0
 204 015c 0A9B     		ldr	r3, [sp, #40]
 205 015e 079A     		ldr	r2, [sp, #28]	@ float
 206 0160 9A61     		str	r2, [r3, #24]	@ float
 207 0162 0FE0     		b	.L10
 208              	.L9:
  94:../src/pid.c  **** 	}
  95:../src/pid.c  **** 	else                                       // Calculate D term from state change
  96:../src/pid.c  **** 	{
  97:../src/pid.c  **** 		dTerm = (PIDparameters->lastDcalcValue - state) / deltaT;
 209              		.loc 1 97 0
 210 0164 0A9B     		ldr	r3, [sp, #40]
 211 0166 93ED067A 		flds	s14, [r3, #24]
 212 016a DDED027A 		flds	s15, [sp, #8]
 213 016e 37EE677A 		fsubs	s14, s14, s15
 214 0172 DDED017A 		flds	s15, [sp, #4]
 215 0176 C7EE277A 		fdivs	s15, s14, s15
 216 017a CDED067A 		fsts	s15, [sp, #24]
  98:../src/pid.c  **** 		PIDparameters->lastDcalcValue = state;
 217              		.loc 1 98 0
 218 017e 0A9B     		ldr	r3, [sp, #40]
 219 0180 029A     		ldr	r2, [sp, #8]	@ float
 220 0182 9A61     		str	r2, [r3, #24]	@ float
 221              	.L10:
  99:../src/pid.c  **** 	}
 100:../src/pid.c  **** 
 101:../src/pid.c  ****     ///////////////////////////////////
 102:../src/pid.c  **** 
 103:../src/pid.c  ****     dTermFiltered = PIDparameters->lastDterm + deltaT / (rc + deltaT) * (dTerm - PIDparameters->las
 222              		.loc 1 103 0
 223 0184 0A9B     		ldr	r3, [sp, #40]
 224 0186 93ED077A 		flds	s14, [r3, #28]
 225 018a 40F20003 		movw	r3, #:lower16:rc
 226 018e C0F20003 		movt	r3, #:upper16:rc
 227 0192 D3ED006A 		flds	s13, [r3, #0]
 228 0196 DDED017A 		flds	s15, [sp, #4]
 229 019a 76EEA77A 		fadds	s15, s13, s15
 230 019e DDED016A 		flds	s13, [sp, #4]
 231 01a2 C6EEA77A 		fdivs	s15, s13, s15
 232 01a6 0A9B     		ldr	r3, [sp, #40]
 233 01a8 D3ED076A 		flds	s13, [r3, #28]
 234 01ac 9DED066A 		flds	s12, [sp, #24]
 235 01b0 76EE666A 		fsubs	s13, s12, s13
 236 01b4 67EEA67A 		fmuls	s15, s15, s13
 237 01b8 77EE277A 		fadds	s15, s14, s15
 238 01bc CDED057A 		fsts	s15, [sp, #20]
 104:../src/pid.c  **** 
 105:../src/pid.c  ****     dAverage = (dTermFiltered + PIDparameters->lastDterm + PIDparameters->lastLastDterm) * 0.333333
 239              		.loc 1 105 0
 240 01c0 0A9B     		ldr	r3, [sp, #40]
 241 01c2 93ED077A 		flds	s14, [r3, #28]
 242 01c6 DDED057A 		flds	s15, [sp, #20]
 243 01ca 37EE277A 		fadds	s14, s14, s15
 244 01ce 0A9B     		ldr	r3, [sp, #40]
 245 01d0 D3ED087A 		flds	s15, [r3, #32]
 246 01d4 37EE277A 		fadds	s14, s14, s15
 247 01d8 DFED367A 		flds	s15, .L13
 248 01dc 67EE277A 		fmuls	s15, s14, s15
 249 01e0 CDED047A 		fsts	s15, [sp, #16]
 106:../src/pid.c  **** 
 107:../src/pid.c  ****     PIDparameters->lastLastDterm = PIDparameters->lastDterm;
 250              		.loc 1 107 0
 251 01e4 0A9B     		ldr	r3, [sp, #40]
 252 01e6 DA69     		ldr	r2, [r3, #28]	@ float
 253 01e8 0A9B     		ldr	r3, [sp, #40]
 254 01ea 1A62     		str	r2, [r3, #32]	@ float
 108:../src/pid.c  ****     PIDparameters->lastDterm = dTermFiltered;
 255              		.loc 1 108 0
 256 01ec 0A9B     		ldr	r3, [sp, #40]
 257 01ee 059A     		ldr	r2, [sp, #20]	@ float
 258 01f0 DA61     		str	r2, [r3, #28]	@ float
 109:../src/pid.c  **** 
 110:../src/pid.c  ****     ///////////////////////////////////
 111:../src/pid.c  **** 
 112:../src/pid.c  ****     if (PIDparameters->type == ANGULAR)
 259              		.loc 1 112 0
 260 01f2 0A9B     		ldr	r3, [sp, #40]
 261 01f4 93F82530 		ldrb	r3, [r3, #37]	@ zero_extendqisi2
 262 01f8 012B     		cmp	r3, #1
 263 01fa 2ED1     		bne	.L11
 113:../src/pid.c  ****         return(standardRadianFormat(PIDparameters->P * PIDparameters->B * command +
 264              		.loc 1 113 0
 265 01fc 0A9B     		ldr	r3, [sp, #40]
 266 01fe 93ED017A 		flds	s14, [r3, #4]
 267 0202 0A9B     		ldr	r3, [sp, #40]
 268 0204 D3ED007A 		flds	s15, [r3, #0]
 269 0208 67EE277A 		fmuls	s15, s14, s15
 270 020c 9DED037A 		flds	s14, [sp, #12]
 271 0210 27EE877A 		fmuls	s14, s15, s14
 114:../src/pid.c  ****                                     PIDparameters->I * PIDparameters->iTerm       +
 272              		.loc 1 114 0
 273 0214 0A9B     		ldr	r3, [sp, #40]
 274 0216 D3ED026A 		flds	s13, [r3, #8]
 275 021a 0A9B     		ldr	r3, [sp, #40]
 276 021c D3ED047A 		flds	s15, [r3, #16]
 277 0220 66EEA77A 		fmuls	s15, s13, s15
 113:../src/pid.c  ****         return(standardRadianFormat(PIDparameters->P * PIDparameters->B * command +
 278              		.loc 1 113 0
 279 0224 37EE277A 		fadds	s14, s14, s15
 115:../src/pid.c  ****                                     PIDparameters->D * dAverage                   -
 280              		.loc 1 115 0
 281 0228 0A9B     		ldr	r3, [sp, #40]
 282 022a D3ED036A 		flds	s13, [r3, #12]
 283 022e DDED047A 		flds	s15, [sp, #16]
 284 0232 66EEA77A 		fmuls	s15, s13, s15
 114:../src/pid.c  ****                                     PIDparameters->I * PIDparameters->iTerm       +
 285              		.loc 1 114 0
 286 0236 37EE277A 		fadds	s14, s14, s15
 116:../src/pid.c  ****                                     PIDparameters->P * state));
 287              		.loc 1 116 0
 288 023a 0A9B     		ldr	r3, [sp, #40]
 289 023c D3ED016A 		flds	s13, [r3, #4]
 290 0240 DDED027A 		flds	s15, [sp, #8]
 291 0244 66EEA77A 		fmuls	s15, s13, s15
 113:../src/pid.c  ****         return(standardRadianFormat(PIDparameters->P * PIDparameters->B * command +
 292              		.loc 1 113 0
 293 0248 77EE677A 		fsubs	s15, s14, s15
 294 024c 17EE900A 		fmrs	r0, s15
 295 0250 FFF7FEFF 		bl	standardRadianFormat
 296 0254 07EE900A 		fmsr	s15, r0
 297 0258 27E0     		b	.L12
 298              	.L11:
 117:../src/pid.c  ****     else
 118:../src/pid.c  ****         return(PIDparameters->P * PIDparameters->B * command +
 299              		.loc 1 118 0
 300 025a 0A9B     		ldr	r3, [sp, #40]
 301 025c 93ED017A 		flds	s14, [r3, #4]
 302 0260 0A9B     		ldr	r3, [sp, #40]
 303 0262 D3ED007A 		flds	s15, [r3, #0]
 304 0266 67EE277A 		fmuls	s15, s14, s15
 305 026a 9DED037A 		flds	s14, [sp, #12]
 306 026e 27EE877A 		fmuls	s14, s15, s14
 119:../src/pid.c  ****                PIDparameters->I * PIDparameters->iTerm       +
 307              		.loc 1 119 0
 308 0272 0A9B     		ldr	r3, [sp, #40]
 309 0274 D3ED026A 		flds	s13, [r3, #8]
 310 0278 0A9B     		ldr	r3, [sp, #40]
 311 027a D3ED047A 		flds	s15, [r3, #16]
 312 027e 66EEA77A 		fmuls	s15, s13, s15
 118:../src/pid.c  ****         return(PIDparameters->P * PIDparameters->B * command +
 313              		.loc 1 118 0
 314 0282 37EE277A 		fadds	s14, s14, s15
 120:../src/pid.c  ****                PIDparameters->D * dAverage                   -
 315              		.loc 1 120 0
 316 0286 0A9B     		ldr	r3, [sp, #40]
 317 0288 D3ED036A 		flds	s13, [r3, #12]
 318 028c DDED047A 		flds	s15, [sp, #16]
 319 0290 66EEA77A 		fmuls	s15, s13, s15
 119:../src/pid.c  ****                PIDparameters->I * PIDparameters->iTerm       +
 320              		.loc 1 119 0
 321 0294 37EE277A 		fadds	s14, s14, s15
 121:../src/pid.c  ****                PIDparameters->P * state);
 322              		.loc 1 121 0
 323 0298 0A9B     		ldr	r3, [sp, #40]
 324 029a D3ED016A 		flds	s13, [r3, #4]
 325 029e DDED027A 		flds	s15, [sp, #8]
 326 02a2 66EEA77A 		fmuls	s15, s13, s15
 118:../src/pid.c  ****         return(PIDparameters->P * PIDparameters->B * command +
 327              		.loc 1 118 0
 328 02a6 77EE677A 		fsubs	s15, s14, s15
 329              	.L12:
 330 02aa 17EE903A 		fmrs	r3, s15
 122:../src/pid.c  **** }
 331              		.loc 1 122 0
 332 02ae 1846     		mov	r0, r3	@ float
 333 02b0 09B0     		add	sp, sp, #36
 334 02b2 00BD     		pop	{pc}
 335              	.L14:
 336              		.align	2
 337              	.L13:
 338 02b4 9FAAAA3E 		.word	1051372191
 339              		.cfi_endproc
 340              	.LFE112:
 342              		.align	2
 343              		.global	setPIDintegralError
 344              		.thumb
 345              		.thumb_func
 347              	setPIDintegralError:
 348              	.LFB113:
 123:../src/pid.c  **** 
 124:../src/pid.c  **** ///////////////////////////////////////////////////////////////////////////////
 125:../src/pid.c  **** 
 126:../src/pid.c  **** void setPIDintegralError(uint8_t IDPid, float value)
 127:../src/pid.c  **** {
 349              		.loc 1 127 0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 8
 352              		@ frame_needed = 0, uses_anonymous_args = 0
 353              		@ link register save eliminated.
 354 02b8 82B0     		sub	sp, sp, #8
 355              	.LCFI3:
 356              		.cfi_def_cfa_offset 8
 357 02ba 0346     		mov	r3, r0
 358 02bc 0091     		str	r1, [sp, #0]	@ float
 359 02be 8DF80730 		strb	r3, [sp, #7]
 128:../src/pid.c  **** 	eepromConfig.PID[IDPid].iTerm = value;
 360              		.loc 1 128 0
 361 02c2 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 362 02c6 40F20002 		movw	r2, #:lower16:eepromConfig
 363 02ca C0F20002 		movt	r2, #:upper16:eepromConfig
 364 02ce 0B46     		mov	r3, r1
 365 02d0 4FEA8303 		lsl	r3, r3, #2
 366 02d4 5B18     		adds	r3, r3, r1
 367 02d6 4FEAC303 		lsl	r3, r3, #3
 368 02da D318     		adds	r3, r2, r3
 369 02dc 03F1A803 		add	r3, r3, #168
 370 02e0 009A     		ldr	r2, [sp, #0]	@ float
 371 02e2 1A60     		str	r2, [r3, #0]	@ float
 129:../src/pid.c  **** }
 372              		.loc 1 129 0
 373 02e4 02B0     		add	sp, sp, #8
 374 02e6 7047     		bx	lr
 375              		.cfi_endproc
 376              	.LFE113:
 378              		.align	2
 379              		.global	zeroPIDintegralError
 380              		.thumb
 381              		.thumb_func
 383              	zeroPIDintegralError:
 384              	.LFB114:
 130:../src/pid.c  **** 
 131:../src/pid.c  **** ///////////////////////////////////////////////////////////////////////////////
 132:../src/pid.c  **** 
 133:../src/pid.c  **** void zeroPIDintegralError(void)
 134:../src/pid.c  **** {
 385              		.loc 1 134 0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 8
 388              		@ frame_needed = 0, uses_anonymous_args = 0
 389 02e8 00B5     		push	{lr}
 390              	.LCFI4:
 391              		.cfi_def_cfa_offset 4
 392              		.cfi_offset 14, -4
 393 02ea 83B0     		sub	sp, sp, #12
 394              	.LCFI5:
 395              		.cfi_def_cfa_offset 16
 135:../src/pid.c  ****     uint8_t index;
 136:../src/pid.c  **** 
 137:../src/pid.c  ****     for (index = 0; index < NUMBER_OF_PIDS; index++)
 396              		.loc 1 137 0
 397 02ec 4FF00003 		mov	r3, #0
 398 02f0 8DF80730 		strb	r3, [sp, #7]
 399 02f4 0BE0     		b	.L17
 400              	.L18:
 138:../src/pid.c  ****          setPIDintegralError(index, 0.0f);
 401              		.loc 1 138 0 discriminator 2
 402 02f6 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 403 02fa 1846     		mov	r0, r3
 404 02fc 0749     		ldr	r1, .L19	@ float
 405 02fe FFF7FEFF 		bl	setPIDintegralError
 137:../src/pid.c  ****     for (index = 0; index < NUMBER_OF_PIDS; index++)
 406              		.loc 1 137 0 discriminator 2
 407 0302 9DF80730 		ldrb	r3, [sp, #7]
 408 0306 03F10103 		add	r3, r3, #1
 409 030a 8DF80730 		strb	r3, [sp, #7]
 410              	.L17:
 137:../src/pid.c  ****     for (index = 0; index < NUMBER_OF_PIDS; index++)
 411              		.loc 1 137 0 is_stmt 0 discriminator 1
 412 030e 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 413 0312 0B2B     		cmp	r3, #11
 414 0314 EFD9     		bls	.L18
 139:../src/pid.c  **** }
 415              		.loc 1 139 0 is_stmt 1
 416 0316 03B0     		add	sp, sp, #12
 417 0318 00BD     		pop	{pc}
 418              	.L20:
 419 031a 00BF     		.align	2
 420              	.L19:
 421 031c 00000000 		.word	0
 422              		.cfi_endproc
 423              	.LFE114:
 425              		.align	2
 426              		.global	setPIDstates
 427              		.thumb
 428              		.thumb_func
 430              	setPIDstates:
 431              	.LFB115:
 140:../src/pid.c  **** 
 141:../src/pid.c  **** ///////////////////////////////////////////////////////////////////////////////
 142:../src/pid.c  **** 
 143:../src/pid.c  **** void setPIDstates(uint8_t IDPid, float value)
 144:../src/pid.c  **** {
 432              		.loc 1 144 0
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 8
 435              		@ frame_needed = 0, uses_anonymous_args = 0
 436              		@ link register save eliminated.
 437 0320 82B0     		sub	sp, sp, #8
 438              	.LCFI6:
 439              		.cfi_def_cfa_offset 8
 440 0322 0346     		mov	r3, r0
 441 0324 0091     		str	r1, [sp, #0]	@ float
 442 0326 8DF80730 		strb	r3, [sp, #7]
 145:../src/pid.c  ****     eepromConfig.PID[IDPid].lastDcalcValue = value;
 443              		.loc 1 145 0
 444 032a 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 445 032e 40F20002 		movw	r2, #:lower16:eepromConfig
 446 0332 C0F20002 		movt	r2, #:upper16:eepromConfig
 447 0336 0B46     		mov	r3, r1
 448 0338 4FEA8303 		lsl	r3, r3, #2
 449 033c 5B18     		adds	r3, r3, r1
 450 033e 4FEAC303 		lsl	r3, r3, #3
 451 0342 D318     		adds	r3, r2, r3
 452 0344 03F1B003 		add	r3, r3, #176
 453 0348 009A     		ldr	r2, [sp, #0]	@ float
 454 034a 1A60     		str	r2, [r3, #0]	@ float
 146:../src/pid.c  ****     eepromConfig.PID[IDPid].lastDterm      = value;
 455              		.loc 1 146 0
 456 034c 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 457 0350 40F20002 		movw	r2, #:lower16:eepromConfig
 458 0354 C0F20002 		movt	r2, #:upper16:eepromConfig
 459 0358 0B46     		mov	r3, r1
 460 035a 4FEA8303 		lsl	r3, r3, #2
 461 035e 5B18     		adds	r3, r3, r1
 462 0360 4FEAC303 		lsl	r3, r3, #3
 463 0364 D318     		adds	r3, r2, r3
 464 0366 03F1B403 		add	r3, r3, #180
 465 036a 009A     		ldr	r2, [sp, #0]	@ float
 466 036c 1A60     		str	r2, [r3, #0]	@ float
 147:../src/pid.c  ****     eepromConfig.PID[IDPid].lastLastDterm  = value;
 467              		.loc 1 147 0
 468 036e 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 469 0372 40F20002 		movw	r2, #:lower16:eepromConfig
 470 0376 C0F20002 		movt	r2, #:upper16:eepromConfig
 471 037a 0B46     		mov	r3, r1
 472 037c 4FEA8303 		lsl	r3, r3, #2
 473 0380 5B18     		adds	r3, r3, r1
 474 0382 4FEAC303 		lsl	r3, r3, #3
 475 0386 D318     		adds	r3, r2, r3
 476 0388 03F1B803 		add	r3, r3, #184
 477 038c 009A     		ldr	r2, [sp, #0]	@ float
 478 038e 1A60     		str	r2, [r3, #0]	@ float
 148:../src/pid.c  **** }
 479              		.loc 1 148 0
 480 0390 02B0     		add	sp, sp, #8
 481 0392 7047     		bx	lr
 482              		.cfi_endproc
 483              	.LFE115:
 485              		.align	2
 486              		.global	zeroPIDstates
 487              		.thumb
 488              		.thumb_func
 490              	zeroPIDstates:
 491              	.LFB116:
 149:../src/pid.c  **** 
 150:../src/pid.c  **** ///////////////////////////////////////////////////////////////////////////////
 151:../src/pid.c  **** 
 152:../src/pid.c  **** void zeroPIDstates(void)
 153:../src/pid.c  **** {
 492              		.loc 1 153 0
 493              		.cfi_startproc
 494              		@ args = 0, pretend = 0, frame = 8
 495              		@ frame_needed = 0, uses_anonymous_args = 0
 496 0394 00B5     		push	{lr}
 497              	.LCFI7:
 498              		.cfi_def_cfa_offset 4
 499              		.cfi_offset 14, -4
 500 0396 83B0     		sub	sp, sp, #12
 501              	.LCFI8:
 502              		.cfi_def_cfa_offset 16
 154:../src/pid.c  ****     uint8_t index;
 155:../src/pid.c  **** 
 156:../src/pid.c  ****     for (index = 0; index < NUMBER_OF_PIDS; index++)
 503              		.loc 1 156 0
 504 0398 4FF00003 		mov	r3, #0
 505 039c 8DF80730 		strb	r3, [sp, #7]
 506 03a0 0BE0     		b	.L23
 507              	.L24:
 157:../src/pid.c  ****          setPIDstates(index, 0.0f);
 508              		.loc 1 157 0 discriminator 2
 509 03a2 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 510 03a6 1846     		mov	r0, r3
 511 03a8 0749     		ldr	r1, .L25	@ float
 512 03aa FFF7FEFF 		bl	setPIDstates
 156:../src/pid.c  ****     for (index = 0; index < NUMBER_OF_PIDS; index++)
 513              		.loc 1 156 0 discriminator 2
 514 03ae 9DF80730 		ldrb	r3, [sp, #7]
 515 03b2 03F10103 		add	r3, r3, #1
 516 03b6 8DF80730 		strb	r3, [sp, #7]
 517              	.L23:
 156:../src/pid.c  ****     for (index = 0; index < NUMBER_OF_PIDS; index++)
 518              		.loc 1 156 0 is_stmt 0 discriminator 1
 519 03ba 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 520 03be 0B2B     		cmp	r3, #11
 521 03c0 EFD9     		bls	.L24
 158:../src/pid.c  **** }
 522              		.loc 1 158 0 is_stmt 1
 523 03c2 03B0     		add	sp, sp, #12
 524 03c4 00BD     		pop	{pc}
 525              	.L26:
 526 03c6 00BF     		.align	2
 527              	.L25:
 528 03c8 00000000 		.word	0
 529              		.cfi_endproc
 530              	.LFE116:
 532              	.Letext0:
 533              		.file 2 "c:\\program files\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 534              		.file 3 "../src/pid.h"
 535              		.file 4 "../src/aq32Plus_F3.h"
 536              		.file 5 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsMediaTe
 537              		.file 6 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsNMEA.h"
 538              		.file 7 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsUblox.h
 539              		.file 8 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\Libraries\\CMSIS\\I
DEFINED SYMBOLS
                            *ABS*:00000000 pid.c
                            *COM*:00000001 mtk19ProcessDataState
                            *COM*:00000001 nmeaProcessDataState
                            *COM*:00000001 ubloxProcessDataState
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc8MVwrU.s:26     .data:00000000 holdIntegrators
                            *COM*:00000004 rc
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc8MVwrU.s:30     .text:00000000 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc8MVwrU.s:35     .text:00000000 initPID
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc8MVwrU.s:119    .text:000000b8 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc8MVwrU.s:124    .text:000000c0 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc8MVwrU.s:129    .text:000000c0 updatePID
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc8MVwrU.s:338    .text:000002b4 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc8MVwrU.s:342    .text:000002b8 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc8MVwrU.s:347    .text:000002b8 setPIDintegralError
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc8MVwrU.s:383    .text:000002e8 zeroPIDintegralError
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc8MVwrU.s:421    .text:0000031c $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc8MVwrU.s:425    .text:00000320 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc8MVwrU.s:430    .text:00000320 setPIDstates
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc8MVwrU.s:490    .text:00000394 zeroPIDstates
D:\DOCUME~1\e722209\LOCALS~1\Temp\cc8MVwrU.s:528    .text:000003c8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
eepromConfig
standardRadianFormat
constrain

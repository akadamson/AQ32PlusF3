   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"linearAlgebra.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	mtk19ProcessDataState,1,1
  20              		.comm	nmeaProcessDataState,1,1
  21              		.comm	ubloxProcessDataState,1,1
  22              		.align	2
  23              		.global	vectorDotProduct
  24              		.thumb
  25              		.thumb_func
  27              	vectorDotProduct:
  28              	.LFB111:
  29              		.file 1 "../src/linearAlgebra.c"
   1:../src/linearAlgebra.c **** /*
   2:../src/linearAlgebra.c ****   December 2012
   3:../src/linearAlgebra.c **** 
   4:../src/linearAlgebra.c ****   aq32Plus_F3 Rev -
   5:../src/linearAlgebra.c **** 
   6:../src/linearAlgebra.c ****   Copyright (c) 2012 John Ihlein.  All rights reserved.
   7:../src/linearAlgebra.c **** 
   8:../src/linearAlgebra.c ****   Open Source STM32 Based Multicopter Controller Software
   9:../src/linearAlgebra.c **** 
  10:../src/linearAlgebra.c ****   Includes code and/or ideas from:
  11:../src/linearAlgebra.c **** 
  12:../src/linearAlgebra.c ****   1)AeroQuad
  13:../src/linearAlgebra.c ****   2)BaseFlight
  14:../src/linearAlgebra.c ****   3)CH Robotics
  15:../src/linearAlgebra.c ****   4)MultiWii
  16:../src/linearAlgebra.c ****   5)S.O.H. Madgwick
  17:../src/linearAlgebra.c ****   6)UAVX
  18:../src/linearAlgebra.c ****   7)STM DiscoveryF3 demonstration software
  19:../src/linearAlgebra.c **** 
  20:../src/linearAlgebra.c ****   Designed to run on the DiscoveryF3 board
  21:../src/linearAlgebra.c **** 
  22:../src/linearAlgebra.c ****   This program is free software: you can redistribute it and/or modify
  23:../src/linearAlgebra.c ****   it under the terms of the GNU General Public License as published by
  24:../src/linearAlgebra.c ****   the Free Software Foundation, either version 3 of the License, or
  25:../src/linearAlgebra.c ****   (at your option) any later version.
  26:../src/linearAlgebra.c **** 
  27:../src/linearAlgebra.c ****   This program is distributed in the hope that it will be useful,
  28:../src/linearAlgebra.c ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
  29:../src/linearAlgebra.c ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  30:../src/linearAlgebra.c ****   GNU General Public License for more details.
  31:../src/linearAlgebra.c **** 
  32:../src/linearAlgebra.c ****   You should have received a copy of the GNU General Public License
  33:../src/linearAlgebra.c ****   along with this program. If not, see <http://www.gnu.org/licenses/>.
  34:../src/linearAlgebra.c **** */
  35:../src/linearAlgebra.c **** 
  36:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
  37:../src/linearAlgebra.c **** 
  38:../src/linearAlgebra.c **** #include "board.h"
  39:../src/linearAlgebra.c **** 
  40:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
  41:../src/linearAlgebra.c **** //  Vector Dot Product
  42:../src/linearAlgebra.c **** //  Return the Dot product of vectors a and b with length m
  43:../src/linearAlgebra.c **** //
  44:../src/linearAlgebra.c **** //  Call as: vectorDotProduct(m, a, b)
  45:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
  46:../src/linearAlgebra.c **** 
  47:../src/linearAlgebra.c **** float vectorDotProduct(int length, float vector1[], float vector2[])
  48:../src/linearAlgebra.c **** {
  30              		.loc 1 48 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 24
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35 0000 86B0     		sub	sp, sp, #24
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 24
  38 0002 0390     		str	r0, [sp, #12]
  39 0004 0291     		str	r1, [sp, #8]
  40 0006 0192     		str	r2, [sp, #4]
  49:../src/linearAlgebra.c ****   float dotProduct = 0;
  41              		.loc 1 49 0
  42 0008 164B     		ldr	r3, .L4	@ float
  43 000a 0593     		str	r3, [sp, #20]	@ float
  50:../src/linearAlgebra.c ****   uint8_t i;
  51:../src/linearAlgebra.c **** 
  52:../src/linearAlgebra.c ****   for (i = 0; i < length; i++)
  44              		.loc 1 52 0
  45 000c 4FF00003 		mov	r3, #0
  46 0010 8DF81330 		strb	r3, [sp, #19]
  47 0014 1DE0     		b	.L2
  48              	.L3:
  53:../src/linearAlgebra.c ****   {
  54:../src/linearAlgebra.c ****   dotProduct += vector1[i] * vector2[i];
  49              		.loc 1 54 0 discriminator 2
  50 0016 9DF81330 		ldrb	r3, [sp, #19]	@ zero_extendqisi2
  51 001a 4FEA8303 		lsl	r3, r3, #2
  52 001e 029A     		ldr	r2, [sp, #8]
  53 0020 D318     		adds	r3, r2, r3
  54 0022 93ED007A 		flds	s14, [r3, #0]
  55 0026 9DF81330 		ldrb	r3, [sp, #19]	@ zero_extendqisi2
  56 002a 4FEA8303 		lsl	r3, r3, #2
  57 002e 019A     		ldr	r2, [sp, #4]
  58 0030 D318     		adds	r3, r2, r3
  59 0032 D3ED007A 		flds	s15, [r3, #0]
  60 0036 67EE277A 		fmuls	s15, s14, s15
  61 003a 9DED057A 		flds	s14, [sp, #20]
  62 003e 77EE277A 		fadds	s15, s14, s15
  63 0042 CDED057A 		fsts	s15, [sp, #20]
  52:../src/linearAlgebra.c ****   for (i = 0; i < length; i++)
  64              		.loc 1 52 0 discriminator 2
  65 0046 9DF81330 		ldrb	r3, [sp, #19]
  66 004a 03F10103 		add	r3, r3, #1
  67 004e 8DF81330 		strb	r3, [sp, #19]
  68              	.L2:
  52:../src/linearAlgebra.c ****   for (i = 0; i < length; i++)
  69              		.loc 1 52 0 is_stmt 0 discriminator 1
  70 0052 9DF81320 		ldrb	r2, [sp, #19]	@ zero_extendqisi2
  71 0056 039B     		ldr	r3, [sp, #12]
  72 0058 9A42     		cmp	r2, r3
  73 005a DCDB     		blt	.L3
  55:../src/linearAlgebra.c ****   }
  56:../src/linearAlgebra.c **** 
  57:../src/linearAlgebra.c ****   return dotProduct;
  74              		.loc 1 57 0 is_stmt 1
  75 005c 059B     		ldr	r3, [sp, #20]	@ float
  58:../src/linearAlgebra.c **** }
  76              		.loc 1 58 0
  77 005e 1846     		mov	r0, r3	@ float
  78 0060 06B0     		add	sp, sp, #24
  79 0062 7047     		bx	lr
  80              	.L5:
  81              		.align	2
  82              	.L4:
  83 0064 00000000 		.word	0
  84              		.cfi_endproc
  85              	.LFE111:
  87              		.align	2
  88              		.global	vectorCrossProduct
  89              		.thumb
  90              		.thumb_func
  92              	vectorCrossProduct:
  93              	.LFB112:
  59:../src/linearAlgebra.c **** 
  60:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
  61:../src/linearAlgebra.c **** //  Vector Cross Product
  62:../src/linearAlgebra.c **** //  Compute the cross product of vectors a and b with length 3
  63:../src/linearAlgebra.c **** //  Place result in vector C
  64:../src/linearAlgebra.c **** //
  65:../src/linearAlgebra.c **** //  Call as: vectorDotProduct(c, a, b)
  66:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
  67:../src/linearAlgebra.c **** 
  68:../src/linearAlgebra.c **** void vectorCrossProduct(float vectorC[3], float vectorA[3], float vectorB[3])
  69:../src/linearAlgebra.c **** {
  94              		.loc 1 69 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 16
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              		@ link register save eliminated.
  99 0068 84B0     		sub	sp, sp, #16
 100              	.LCFI1:
 101              		.cfi_def_cfa_offset 16
 102 006a 0390     		str	r0, [sp, #12]
 103 006c 0291     		str	r1, [sp, #8]
 104 006e 0192     		str	r2, [sp, #4]
  70:../src/linearAlgebra.c ****   vectorC[0] = (vectorA[1] * vectorB[2]) - (vectorA[2] * vectorB[1]);
 105              		.loc 1 70 0
 106 0070 029B     		ldr	r3, [sp, #8]
 107 0072 03F10403 		add	r3, r3, #4
 108 0076 93ED007A 		flds	s14, [r3, #0]
 109 007a 019B     		ldr	r3, [sp, #4]
 110 007c 03F10803 		add	r3, r3, #8
 111 0080 D3ED007A 		flds	s15, [r3, #0]
 112 0084 27EE277A 		fmuls	s14, s14, s15
 113 0088 029B     		ldr	r3, [sp, #8]
 114 008a 03F10803 		add	r3, r3, #8
 115 008e D3ED006A 		flds	s13, [r3, #0]
 116 0092 019B     		ldr	r3, [sp, #4]
 117 0094 03F10403 		add	r3, r3, #4
 118 0098 D3ED007A 		flds	s15, [r3, #0]
 119 009c 66EEA77A 		fmuls	s15, s13, s15
 120 00a0 77EE677A 		fsubs	s15, s14, s15
 121 00a4 039B     		ldr	r3, [sp, #12]
 122 00a6 C3ED007A 		fsts	s15, [r3, #0]
  71:../src/linearAlgebra.c ****   vectorC[1] = (vectorA[2] * vectorB[0]) - (vectorA[0] * vectorB[2]);
 123              		.loc 1 71 0
 124 00aa 039B     		ldr	r3, [sp, #12]
 125 00ac 03F10403 		add	r3, r3, #4
 126 00b0 029A     		ldr	r2, [sp, #8]
 127 00b2 02F10802 		add	r2, r2, #8
 128 00b6 92ED007A 		flds	s14, [r2, #0]
 129 00ba 019A     		ldr	r2, [sp, #4]
 130 00bc D2ED007A 		flds	s15, [r2, #0]
 131 00c0 27EE277A 		fmuls	s14, s14, s15
 132 00c4 029A     		ldr	r2, [sp, #8]
 133 00c6 D2ED006A 		flds	s13, [r2, #0]
 134 00ca 019A     		ldr	r2, [sp, #4]
 135 00cc 02F10802 		add	r2, r2, #8
 136 00d0 D2ED007A 		flds	s15, [r2, #0]
 137 00d4 66EEA77A 		fmuls	s15, s13, s15
 138 00d8 77EE677A 		fsubs	s15, s14, s15
 139 00dc C3ED007A 		fsts	s15, [r3, #0]
  72:../src/linearAlgebra.c ****   vectorC[2] = (vectorA[0] * vectorB[1]) - (vectorA[1] * vectorB[0]);
 140              		.loc 1 72 0
 141 00e0 039B     		ldr	r3, [sp, #12]
 142 00e2 03F10803 		add	r3, r3, #8
 143 00e6 029A     		ldr	r2, [sp, #8]
 144 00e8 92ED007A 		flds	s14, [r2, #0]
 145 00ec 019A     		ldr	r2, [sp, #4]
 146 00ee 02F10402 		add	r2, r2, #4
 147 00f2 D2ED007A 		flds	s15, [r2, #0]
 148 00f6 27EE277A 		fmuls	s14, s14, s15
 149 00fa 029A     		ldr	r2, [sp, #8]
 150 00fc 02F10402 		add	r2, r2, #4
 151 0100 D2ED006A 		flds	s13, [r2, #0]
 152 0104 019A     		ldr	r2, [sp, #4]
 153 0106 D2ED007A 		flds	s15, [r2, #0]
 154 010a 66EEA77A 		fmuls	s15, s13, s15
 155 010e 77EE677A 		fsubs	s15, s14, s15
 156 0112 C3ED007A 		fsts	s15, [r3, #0]
  73:../src/linearAlgebra.c **** }
 157              		.loc 1 73 0
 158 0116 04B0     		add	sp, sp, #16
 159 0118 7047     		bx	lr
 160              		.cfi_endproc
 161              	.LFE112:
 163 011a 00BF     		.align	2
 164              		.global	vectorScale
 165              		.thumb
 166              		.thumb_func
 168              	vectorScale:
 169              	.LFB113:
  74:../src/linearAlgebra.c **** 
  75:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
  76:../src/linearAlgebra.c **** //  Multiply a vector by a scalar
  77:../src/linearAlgebra.c **** //  Mulitply vector a with length m by a scalar
  78:../src/linearAlgebra.c **** //  Place result in vector b
  79:../src/linearAlgebra.c **** //
  80:../src/linearAlgebra.c **** //  Call as: vectorScale(m, b, a, scalar)
  81:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
  82:../src/linearAlgebra.c **** 
  83:../src/linearAlgebra.c **** void vectorScale(int length, float scaledVector[], float inputVector[], float scalar)
  84:../src/linearAlgebra.c **** {
 170              		.loc 1 84 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 24
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              		@ link register save eliminated.
 175 011c 86B0     		sub	sp, sp, #24
 176              	.LCFI2:
 177              		.cfi_def_cfa_offset 24
 178 011e 0390     		str	r0, [sp, #12]
 179 0120 0291     		str	r1, [sp, #8]
 180 0122 0192     		str	r2, [sp, #4]
 181 0124 0093     		str	r3, [sp, #0]	@ float
  85:../src/linearAlgebra.c ****   uint8_t i;
  86:../src/linearAlgebra.c **** 
  87:../src/linearAlgebra.c ****   for (i = 0; i < length; i++)
 182              		.loc 1 87 0
 183 0126 4FF00003 		mov	r3, #0
 184 012a 8DF81730 		strb	r3, [sp, #23]
 185 012e 19E0     		b	.L8
 186              	.L9:
  88:../src/linearAlgebra.c ****   {
  89:../src/linearAlgebra.c ****    scaledVector[i] = inputVector[i] * scalar;
 187              		.loc 1 89 0 discriminator 2
 188 0130 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
 189 0134 4FEA8303 		lsl	r3, r3, #2
 190 0138 029A     		ldr	r2, [sp, #8]
 191 013a D318     		adds	r3, r2, r3
 192 013c 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 193 0140 4FEA8202 		lsl	r2, r2, #2
 194 0144 0199     		ldr	r1, [sp, #4]
 195 0146 8A18     		adds	r2, r1, r2
 196 0148 92ED007A 		flds	s14, [r2, #0]
 197 014c DDED007A 		flds	s15, [sp, #0]
 198 0150 67EE277A 		fmuls	s15, s14, s15
 199 0154 C3ED007A 		fsts	s15, [r3, #0]
  87:../src/linearAlgebra.c ****   for (i = 0; i < length; i++)
 200              		.loc 1 87 0 discriminator 2
 201 0158 9DF81730 		ldrb	r3, [sp, #23]
 202 015c 03F10103 		add	r3, r3, #1
 203 0160 8DF81730 		strb	r3, [sp, #23]
 204              	.L8:
  87:../src/linearAlgebra.c ****   for (i = 0; i < length; i++)
 205              		.loc 1 87 0 is_stmt 0 discriminator 1
 206 0164 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 207 0168 039B     		ldr	r3, [sp, #12]
 208 016a 9A42     		cmp	r2, r3
 209 016c E0DB     		blt	.L9
  90:../src/linearAlgebra.c ****   }
  91:../src/linearAlgebra.c **** }
 210              		.loc 1 91 0 is_stmt 1
 211 016e 06B0     		add	sp, sp, #24
 212 0170 7047     		bx	lr
 213              		.cfi_endproc
 214              	.LFE113:
 216 0172 00BF     		.align	2
 217              		.global	vectorAdd
 218              		.thumb
 219              		.thumb_func
 221              	vectorAdd:
 222              	.LFB114:
  92:../src/linearAlgebra.c **** 
  93:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
  94:../src/linearAlgebra.c **** //  Compute sum of 2 vectors
  95:../src/linearAlgebra.c **** //  Add vector a to vector b, both of length m
  96:../src/linearAlgebra.c **** //  Place result in vector c
  97:../src/linearAlgebra.c **** //
  98:../src/linearAlgebra.c **** //  Call as: vectorAdd(m, c, b, a)
  99:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
 100:../src/linearAlgebra.c **** 
 101:../src/linearAlgebra.c **** void vectorAdd(int length, float vectorC[], float vectorA[], float vectorB[])
 102:../src/linearAlgebra.c **** {
 223              		.loc 1 102 0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 24
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 228 0174 86B0     		sub	sp, sp, #24
 229              	.LCFI3:
 230              		.cfi_def_cfa_offset 24
 231 0176 0390     		str	r0, [sp, #12]
 232 0178 0291     		str	r1, [sp, #8]
 233 017a 0192     		str	r2, [sp, #4]
 234 017c 0093     		str	r3, [sp, #0]
 103:../src/linearAlgebra.c ****   uint8_t i;
 104:../src/linearAlgebra.c **** 
 105:../src/linearAlgebra.c ****   for(i = 0; i < length; i++)
 235              		.loc 1 105 0
 236 017e 4FF00003 		mov	r3, #0
 237 0182 8DF81730 		strb	r3, [sp, #23]
 238 0186 1FE0     		b	.L11
 239              	.L12:
 106:../src/linearAlgebra.c ****   {
 107:../src/linearAlgebra.c ****      vectorC[i] = vectorA[i] + vectorB[i];
 240              		.loc 1 107 0 discriminator 2
 241 0188 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
 242 018c 4FEA8303 		lsl	r3, r3, #2
 243 0190 029A     		ldr	r2, [sp, #8]
 244 0192 D318     		adds	r3, r2, r3
 245 0194 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 246 0198 4FEA8202 		lsl	r2, r2, #2
 247 019c 0199     		ldr	r1, [sp, #4]
 248 019e 8A18     		adds	r2, r1, r2
 249 01a0 92ED007A 		flds	s14, [r2, #0]
 250 01a4 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 251 01a8 4FEA8202 		lsl	r2, r2, #2
 252 01ac 0099     		ldr	r1, [sp, #0]
 253 01ae 8A18     		adds	r2, r1, r2
 254 01b0 D2ED007A 		flds	s15, [r2, #0]
 255 01b4 77EE277A 		fadds	s15, s14, s15
 256 01b8 C3ED007A 		fsts	s15, [r3, #0]
 105:../src/linearAlgebra.c ****   for(i = 0; i < length; i++)
 257              		.loc 1 105 0 discriminator 2
 258 01bc 9DF81730 		ldrb	r3, [sp, #23]
 259 01c0 03F10103 		add	r3, r3, #1
 260 01c4 8DF81730 		strb	r3, [sp, #23]
 261              	.L11:
 105:../src/linearAlgebra.c ****   for(i = 0; i < length; i++)
 262              		.loc 1 105 0 is_stmt 0 discriminator 1
 263 01c8 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 264 01cc 039B     		ldr	r3, [sp, #12]
 265 01ce 9A42     		cmp	r2, r3
 266 01d0 DADB     		blt	.L12
 108:../src/linearAlgebra.c ****   }
 109:../src/linearAlgebra.c **** }
 267              		.loc 1 109 0 is_stmt 1
 268 01d2 06B0     		add	sp, sp, #24
 269 01d4 7047     		bx	lr
 270              		.cfi_endproc
 271              	.LFE114:
 273 01d6 00BF     		.align	2
 274              		.global	vectorSubtract
 275              		.thumb
 276              		.thumb_func
 278              	vectorSubtract:
 279              	.LFB115:
 110:../src/linearAlgebra.c **** 
 111:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
 112:../src/linearAlgebra.c **** //  Compute difference of 2 vectors
 113:../src/linearAlgebra.c **** //  Subtract vector a from vector b, both of length m
 114:../src/linearAlgebra.c **** //  Place result in vector c
 115:../src/linearAlgebra.c **** //
 116:../src/linearAlgebra.c **** //  Call as: vectorSubtract(m, c, b, a)
 117:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
 118:../src/linearAlgebra.c **** 
 119:../src/linearAlgebra.c **** void vectorSubtract(int length, float vectorC[], float vectorA[], float vectorB[])
 120:../src/linearAlgebra.c **** {
 280              		.loc 1 120 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 24
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              		@ link register save eliminated.
 285 01d8 86B0     		sub	sp, sp, #24
 286              	.LCFI4:
 287              		.cfi_def_cfa_offset 24
 288 01da 0390     		str	r0, [sp, #12]
 289 01dc 0291     		str	r1, [sp, #8]
 290 01de 0192     		str	r2, [sp, #4]
 291 01e0 0093     		str	r3, [sp, #0]
 121:../src/linearAlgebra.c ****   uint8_t i;
 122:../src/linearAlgebra.c **** 
 123:../src/linearAlgebra.c ****   for(i = 0; i < length; i++)
 292              		.loc 1 123 0
 293 01e2 4FF00003 		mov	r3, #0
 294 01e6 8DF81730 		strb	r3, [sp, #23]
 295 01ea 1FE0     		b	.L14
 296              	.L15:
 124:../src/linearAlgebra.c ****   {
 125:../src/linearAlgebra.c ****      vectorC[i] = vectorA[i] - vectorB[i];
 297              		.loc 1 125 0 discriminator 2
 298 01ec 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
 299 01f0 4FEA8303 		lsl	r3, r3, #2
 300 01f4 029A     		ldr	r2, [sp, #8]
 301 01f6 D318     		adds	r3, r2, r3
 302 01f8 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 303 01fc 4FEA8202 		lsl	r2, r2, #2
 304 0200 0199     		ldr	r1, [sp, #4]
 305 0202 8A18     		adds	r2, r1, r2
 306 0204 92ED007A 		flds	s14, [r2, #0]
 307 0208 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 308 020c 4FEA8202 		lsl	r2, r2, #2
 309 0210 0099     		ldr	r1, [sp, #0]
 310 0212 8A18     		adds	r2, r1, r2
 311 0214 D2ED007A 		flds	s15, [r2, #0]
 312 0218 77EE677A 		fsubs	s15, s14, s15
 313 021c C3ED007A 		fsts	s15, [r3, #0]
 123:../src/linearAlgebra.c ****   for(i = 0; i < length; i++)
 314              		.loc 1 123 0 discriminator 2
 315 0220 9DF81730 		ldrb	r3, [sp, #23]
 316 0224 03F10103 		add	r3, r3, #1
 317 0228 8DF81730 		strb	r3, [sp, #23]
 318              	.L14:
 123:../src/linearAlgebra.c ****   for(i = 0; i < length; i++)
 319              		.loc 1 123 0 is_stmt 0 discriminator 1
 320 022c 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 321 0230 039B     		ldr	r3, [sp, #12]
 322 0232 9A42     		cmp	r2, r3
 323 0234 DADB     		blt	.L15
 126:../src/linearAlgebra.c ****   }
 127:../src/linearAlgebra.c **** }
 324              		.loc 1 127 0 is_stmt 1
 325 0236 06B0     		add	sp, sp, #24
 326 0238 7047     		bx	lr
 327              		.cfi_endproc
 328              	.LFE115:
 330 023a 00BF     		.align	2
 331              		.global	matrixMultiply
 332              		.thumb
 333              		.thumb_func
 335              	matrixMultiply:
 336              	.LFB116:
 128:../src/linearAlgebra.c **** 
 129:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
 130:../src/linearAlgebra.c **** //  Matrix Multiply
 131:../src/linearAlgebra.c **** //  Multiply matrix A times matrix B, matrix A dimension m x n, matrix B dimension n x p
 132:../src/linearAlgebra.c **** //  Result placed in matrix C, dimension m x p
 133:../src/linearAlgebra.c **** //
 134:../src/linearAlgebra.c **** //  Call as: matrixMultiply(m, n, p, C, A, B)
 135:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
 136:../src/linearAlgebra.c **** 
 137:../src/linearAlgebra.c **** void matrixMultiply(int aRows, int aCols_bRows, int bCols, float matrixC[], float matrixA[], float 
 138:../src/linearAlgebra.c **** {
 337              		.loc 1 138 0
 338              		.cfi_startproc
 339              		@ args = 8, pretend = 0, frame = 24
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341              		@ link register save eliminated.
 342 023c 86B0     		sub	sp, sp, #24
 343              	.LCFI5:
 344              		.cfi_def_cfa_offset 24
 345 023e 0390     		str	r0, [sp, #12]
 346 0240 0291     		str	r1, [sp, #8]
 347 0242 0192     		str	r2, [sp, #4]
 348 0244 0093     		str	r3, [sp, #0]
 139:../src/linearAlgebra.c ****   uint8_t i, j, k;
 140:../src/linearAlgebra.c **** 
 141:../src/linearAlgebra.c ****   for (i = 0; i < aRows * bCols; i++)
 349              		.loc 1 141 0
 350 0246 4FF00003 		mov	r3, #0
 351 024a 8DF81730 		strb	r3, [sp, #23]
 352 024e 0DE0     		b	.L17
 353              	.L18:
 142:../src/linearAlgebra.c ****   {
 143:../src/linearAlgebra.c ****     matrixC[i] = 0.0;
 354              		.loc 1 143 0 discriminator 2
 355 0250 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
 356 0254 4FEA8303 		lsl	r3, r3, #2
 357 0258 009A     		ldr	r2, [sp, #0]
 358 025a D318     		adds	r3, r2, r3
 359 025c 3E4A     		ldr	r2, .L25	@ float
 360 025e 1A60     		str	r2, [r3, #0]	@ float
 141:../src/linearAlgebra.c ****   for (i = 0; i < aRows * bCols; i++)
 361              		.loc 1 141 0 discriminator 2
 362 0260 9DF81730 		ldrb	r3, [sp, #23]
 363 0264 03F10103 		add	r3, r3, #1
 364 0268 8DF81730 		strb	r3, [sp, #23]
 365              	.L17:
 141:../src/linearAlgebra.c ****   for (i = 0; i < aRows * bCols; i++)
 366              		.loc 1 141 0 is_stmt 0 discriminator 1
 367 026c 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 368 0270 039B     		ldr	r3, [sp, #12]
 369 0272 0199     		ldr	r1, [sp, #4]
 370 0274 01FB03F3 		mul	r3, r1, r3
 371 0278 9A42     		cmp	r2, r3
 372 027a E9DB     		blt	.L18
 144:../src/linearAlgebra.c ****   }
 145:../src/linearAlgebra.c **** 
 146:../src/linearAlgebra.c ****   for (i = 0; i < aRows; i++)
 373              		.loc 1 146 0 is_stmt 1
 374 027c 4FF00003 		mov	r3, #0
 375 0280 8DF81730 		strb	r3, [sp, #23]
 376 0284 61E0     		b	.L19
 377              	.L24:
 147:../src/linearAlgebra.c ****   {
 148:../src/linearAlgebra.c ****     for(j = 0; j < aCols_bRows; j++)
 378              		.loc 1 148 0
 379 0286 4FF00003 		mov	r3, #0
 380 028a 8DF81630 		strb	r3, [sp, #22]
 381 028e 51E0     		b	.L20
 382              	.L23:
 149:../src/linearAlgebra.c ****     {
 150:../src/linearAlgebra.c ****       for(k = 0;  k < bCols; k++)
 383              		.loc 1 150 0
 384 0290 4FF00003 		mov	r3, #0
 385 0294 8DF81530 		strb	r3, [sp, #21]
 386 0298 41E0     		b	.L21
 387              	.L22:
 151:../src/linearAlgebra.c ****       {
 152:../src/linearAlgebra.c ****        matrixC[i * bCols + k] += matrixA[i * aCols_bRows + j] * matrixB[j * bCols + k];
 388              		.loc 1 152 0 discriminator 2
 389 029a 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
 390 029e 019A     		ldr	r2, [sp, #4]
 391 02a0 02FB03F2 		mul	r2, r2, r3
 392 02a4 9DF81530 		ldrb	r3, [sp, #21]	@ zero_extendqisi2
 393 02a8 D318     		adds	r3, r2, r3
 394 02aa 4FEA8303 		lsl	r3, r3, #2
 395 02ae 009A     		ldr	r2, [sp, #0]
 396 02b0 D318     		adds	r3, r2, r3
 397 02b2 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 398 02b6 0199     		ldr	r1, [sp, #4]
 399 02b8 01FB02F1 		mul	r1, r1, r2
 400 02bc 9DF81520 		ldrb	r2, [sp, #21]	@ zero_extendqisi2
 401 02c0 8A18     		adds	r2, r1, r2
 402 02c2 4FEA8202 		lsl	r2, r2, #2
 403 02c6 0099     		ldr	r1, [sp, #0]
 404 02c8 8A18     		adds	r2, r1, r2
 405 02ca 92ED007A 		flds	s14, [r2, #0]
 406 02ce 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 407 02d2 0299     		ldr	r1, [sp, #8]
 408 02d4 01FB02F1 		mul	r1, r1, r2
 409 02d8 9DF81620 		ldrb	r2, [sp, #22]	@ zero_extendqisi2
 410 02dc 8A18     		adds	r2, r1, r2
 411 02de 4FEA8202 		lsl	r2, r2, #2
 412 02e2 0699     		ldr	r1, [sp, #24]
 413 02e4 8A18     		adds	r2, r1, r2
 414 02e6 D2ED006A 		flds	s13, [r2, #0]
 415 02ea 9DF81620 		ldrb	r2, [sp, #22]	@ zero_extendqisi2
 416 02ee 0199     		ldr	r1, [sp, #4]
 417 02f0 01FB02F1 		mul	r1, r1, r2
 418 02f4 9DF81520 		ldrb	r2, [sp, #21]	@ zero_extendqisi2
 419 02f8 8A18     		adds	r2, r1, r2
 420 02fa 4FEA8202 		lsl	r2, r2, #2
 421 02fe 0799     		ldr	r1, [sp, #28]
 422 0300 8A18     		adds	r2, r1, r2
 423 0302 D2ED007A 		flds	s15, [r2, #0]
 424 0306 66EEA77A 		fmuls	s15, s13, s15
 425 030a 77EE277A 		fadds	s15, s14, s15
 426 030e C3ED007A 		fsts	s15, [r3, #0]
 150:../src/linearAlgebra.c ****       for(k = 0;  k < bCols; k++)
 427              		.loc 1 150 0 discriminator 2
 428 0312 9DF81530 		ldrb	r3, [sp, #21]
 429 0316 03F10103 		add	r3, r3, #1
 430 031a 8DF81530 		strb	r3, [sp, #21]
 431              	.L21:
 150:../src/linearAlgebra.c ****       for(k = 0;  k < bCols; k++)
 432              		.loc 1 150 0 is_stmt 0 discriminator 1
 433 031e 9DF81520 		ldrb	r2, [sp, #21]	@ zero_extendqisi2
 434 0322 019B     		ldr	r3, [sp, #4]
 435 0324 9A42     		cmp	r2, r3
 436 0326 B8DB     		blt	.L22
 148:../src/linearAlgebra.c ****     for(j = 0; j < aCols_bRows; j++)
 437              		.loc 1 148 0 is_stmt 1
 438 0328 9DF81630 		ldrb	r3, [sp, #22]
 439 032c 03F10103 		add	r3, r3, #1
 440 0330 8DF81630 		strb	r3, [sp, #22]
 441              	.L20:
 148:../src/linearAlgebra.c ****     for(j = 0; j < aCols_bRows; j++)
 442              		.loc 1 148 0 is_stmt 0 discriminator 1
 443 0334 9DF81620 		ldrb	r2, [sp, #22]	@ zero_extendqisi2
 444 0338 029B     		ldr	r3, [sp, #8]
 445 033a 9A42     		cmp	r2, r3
 446 033c A8DB     		blt	.L23
 146:../src/linearAlgebra.c ****   for (i = 0; i < aRows; i++)
 447              		.loc 1 146 0 is_stmt 1
 448 033e 9DF81730 		ldrb	r3, [sp, #23]
 449 0342 03F10103 		add	r3, r3, #1
 450 0346 8DF81730 		strb	r3, [sp, #23]
 451              	.L19:
 146:../src/linearAlgebra.c ****   for (i = 0; i < aRows; i++)
 452              		.loc 1 146 0 is_stmt 0 discriminator 1
 453 034a 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 454 034e 039B     		ldr	r3, [sp, #12]
 455 0350 9A42     		cmp	r2, r3
 456 0352 98DB     		blt	.L24
 153:../src/linearAlgebra.c ****       }
 154:../src/linearAlgebra.c ****     }
 155:../src/linearAlgebra.c ****   }
 156:../src/linearAlgebra.c **** }
 457              		.loc 1 156 0 is_stmt 1
 458 0354 06B0     		add	sp, sp, #24
 459 0356 7047     		bx	lr
 460              	.L26:
 461              		.align	2
 462              	.L25:
 463 0358 00000000 		.word	0
 464              		.cfi_endproc
 465              	.LFE116:
 467              		.align	2
 468              		.global	matrixAdd
 469              		.thumb
 470              		.thumb_func
 472              	matrixAdd:
 473              	.LFB117:
 157:../src/linearAlgebra.c **** 
 158:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
 159:../src/linearAlgebra.c **** //  Matrix Addition
 160:../src/linearAlgebra.c **** //  Add matrix A to matrix B, dimensions m x n
 161:../src/linearAlgebra.c **** //  Result placed in matrix C, dimension m x n
 162:../src/linearAlgebra.c **** //
 163:../src/linearAlgebra.c **** //  Call as: matrixAdd(m, n, C, A, B)
 164:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
 165:../src/linearAlgebra.c **** 
 166:../src/linearAlgebra.c **** void matrixAdd(int rows, int cols, float matrixC[], float matrixA[], float matrixB[])
 167:../src/linearAlgebra.c **** {
 474              		.loc 1 167 0
 475              		.cfi_startproc
 476              		@ args = 4, pretend = 0, frame = 24
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		@ link register save eliminated.
 479 035c 86B0     		sub	sp, sp, #24
 480              	.LCFI6:
 481              		.cfi_def_cfa_offset 24
 482 035e 0390     		str	r0, [sp, #12]
 483 0360 0291     		str	r1, [sp, #8]
 484 0362 0192     		str	r2, [sp, #4]
 485 0364 0093     		str	r3, [sp, #0]
 168:../src/linearAlgebra.c ****   uint8_t i;
 169:../src/linearAlgebra.c **** 
 170:../src/linearAlgebra.c ****   for (i = 0; i < rows * cols; i++)
 486              		.loc 1 170 0
 487 0366 4FF00003 		mov	r3, #0
 488 036a 8DF81730 		strb	r3, [sp, #23]
 489 036e 1FE0     		b	.L28
 490              	.L29:
 171:../src/linearAlgebra.c ****   {
 172:../src/linearAlgebra.c ****     matrixC[i] = matrixA[i] + matrixB[i];
 491              		.loc 1 172 0 discriminator 2
 492 0370 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
 493 0374 4FEA8303 		lsl	r3, r3, #2
 494 0378 019A     		ldr	r2, [sp, #4]
 495 037a D318     		adds	r3, r2, r3
 496 037c 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 497 0380 4FEA8202 		lsl	r2, r2, #2
 498 0384 0099     		ldr	r1, [sp, #0]
 499 0386 8A18     		adds	r2, r1, r2
 500 0388 92ED007A 		flds	s14, [r2, #0]
 501 038c 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 502 0390 4FEA8202 		lsl	r2, r2, #2
 503 0394 0699     		ldr	r1, [sp, #24]
 504 0396 8A18     		adds	r2, r1, r2
 505 0398 D2ED007A 		flds	s15, [r2, #0]
 506 039c 77EE277A 		fadds	s15, s14, s15
 507 03a0 C3ED007A 		fsts	s15, [r3, #0]
 170:../src/linearAlgebra.c ****   for (i = 0; i < rows * cols; i++)
 508              		.loc 1 170 0 discriminator 2
 509 03a4 9DF81730 		ldrb	r3, [sp, #23]
 510 03a8 03F10103 		add	r3, r3, #1
 511 03ac 8DF81730 		strb	r3, [sp, #23]
 512              	.L28:
 170:../src/linearAlgebra.c ****   for (i = 0; i < rows * cols; i++)
 513              		.loc 1 170 0 is_stmt 0 discriminator 1
 514 03b0 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 515 03b4 039B     		ldr	r3, [sp, #12]
 516 03b6 0299     		ldr	r1, [sp, #8]
 517 03b8 01FB03F3 		mul	r3, r1, r3
 518 03bc 9A42     		cmp	r2, r3
 519 03be D7DB     		blt	.L29
 173:../src/linearAlgebra.c ****   }
 174:../src/linearAlgebra.c **** }
 520              		.loc 1 174 0 is_stmt 1
 521 03c0 06B0     		add	sp, sp, #24
 522 03c2 7047     		bx	lr
 523              		.cfi_endproc
 524              	.LFE117:
 526              		.align	2
 527              		.global	matrixSubtract
 528              		.thumb
 529              		.thumb_func
 531              	matrixSubtract:
 532              	.LFB118:
 175:../src/linearAlgebra.c **** 
 176:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
 177:../src/linearAlgebra.c **** //  Matrix Subtraction
 178:../src/linearAlgebra.c **** //  Subtract matrix A from matrix B, dimensions m x n
 179:../src/linearAlgebra.c **** //  Result placed in matrix C, dimension m x n
 180:../src/linearAlgebra.c **** //
 181:../src/linearAlgebra.c **** //  Call as: matrixSubtract(m, n, C, A, B)
 182:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
 183:../src/linearAlgebra.c **** 
 184:../src/linearAlgebra.c **** void matrixSubtract(int rows, int cols, float matrixC[], float matrixA[], float matrixB[])
 185:../src/linearAlgebra.c **** {
 533              		.loc 1 185 0
 534              		.cfi_startproc
 535              		@ args = 4, pretend = 0, frame = 24
 536              		@ frame_needed = 0, uses_anonymous_args = 0
 537              		@ link register save eliminated.
 538 03c4 86B0     		sub	sp, sp, #24
 539              	.LCFI7:
 540              		.cfi_def_cfa_offset 24
 541 03c6 0390     		str	r0, [sp, #12]
 542 03c8 0291     		str	r1, [sp, #8]
 543 03ca 0192     		str	r2, [sp, #4]
 544 03cc 0093     		str	r3, [sp, #0]
 186:../src/linearAlgebra.c ****   uint8_t i;
 187:../src/linearAlgebra.c **** 
 188:../src/linearAlgebra.c ****   for (i = 0; i < rows * cols; i++)
 545              		.loc 1 188 0
 546 03ce 4FF00003 		mov	r3, #0
 547 03d2 8DF81730 		strb	r3, [sp, #23]
 548 03d6 1FE0     		b	.L31
 549              	.L32:
 189:../src/linearAlgebra.c ****   {
 190:../src/linearAlgebra.c ****     matrixC[i] = matrixA[i] - matrixB[i];
 550              		.loc 1 190 0 discriminator 2
 551 03d8 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
 552 03dc 4FEA8303 		lsl	r3, r3, #2
 553 03e0 019A     		ldr	r2, [sp, #4]
 554 03e2 D318     		adds	r3, r2, r3
 555 03e4 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 556 03e8 4FEA8202 		lsl	r2, r2, #2
 557 03ec 0099     		ldr	r1, [sp, #0]
 558 03ee 8A18     		adds	r2, r1, r2
 559 03f0 92ED007A 		flds	s14, [r2, #0]
 560 03f4 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 561 03f8 4FEA8202 		lsl	r2, r2, #2
 562 03fc 0699     		ldr	r1, [sp, #24]
 563 03fe 8A18     		adds	r2, r1, r2
 564 0400 D2ED007A 		flds	s15, [r2, #0]
 565 0404 77EE677A 		fsubs	s15, s14, s15
 566 0408 C3ED007A 		fsts	s15, [r3, #0]
 188:../src/linearAlgebra.c ****   for (i = 0; i < rows * cols; i++)
 567              		.loc 1 188 0 discriminator 2
 568 040c 9DF81730 		ldrb	r3, [sp, #23]
 569 0410 03F10103 		add	r3, r3, #1
 570 0414 8DF81730 		strb	r3, [sp, #23]
 571              	.L31:
 188:../src/linearAlgebra.c ****   for (i = 0; i < rows * cols; i++)
 572              		.loc 1 188 0 is_stmt 0 discriminator 1
 573 0418 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 574 041c 039B     		ldr	r3, [sp, #12]
 575 041e 0299     		ldr	r1, [sp, #8]
 576 0420 01FB03F3 		mul	r3, r1, r3
 577 0424 9A42     		cmp	r2, r3
 578 0426 D7DB     		blt	.L32
 191:../src/linearAlgebra.c ****   }
 192:../src/linearAlgebra.c **** }
 579              		.loc 1 192 0 is_stmt 1
 580 0428 06B0     		add	sp, sp, #24
 581 042a 7047     		bx	lr
 582              		.cfi_endproc
 583              	.LFE118:
 585              		.align	2
 586              		.global	matrixScale
 587              		.thumb
 588              		.thumb_func
 590              	matrixScale:
 591              	.LFB119:
 193:../src/linearAlgebra.c **** 
 194:../src/linearAlgebra.c **** 
 195:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
 196:../src/linearAlgebra.c **** //  Matrix Scaling
 197:../src/linearAlgebra.c **** //  Scale matrix A, dimensions m x n, by a scaler, S
 198:../src/linearAlgebra.c **** //  Result placed in matrix C, dimension m x n
 199:../src/linearAlgebra.c **** //
 200:../src/linearAlgebra.c **** //  Call as: matrixScale(m, n, C, S, B)
 201:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
 202:../src/linearAlgebra.c **** 
 203:../src/linearAlgebra.c **** void matrixScale(int rows, int cols, float matrixC[], float scaler, float matrixA[])
 204:../src/linearAlgebra.c **** {
 592              		.loc 1 204 0
 593              		.cfi_startproc
 594              		@ args = 4, pretend = 0, frame = 24
 595              		@ frame_needed = 0, uses_anonymous_args = 0
 596              		@ link register save eliminated.
 597 042c 86B0     		sub	sp, sp, #24
 598              	.LCFI8:
 599              		.cfi_def_cfa_offset 24
 600 042e 0390     		str	r0, [sp, #12]
 601 0430 0291     		str	r1, [sp, #8]
 602 0432 0192     		str	r2, [sp, #4]
 603 0434 0093     		str	r3, [sp, #0]	@ float
 205:../src/linearAlgebra.c ****   uint8_t i;
 206:../src/linearAlgebra.c **** 
 207:../src/linearAlgebra.c ****   for (i = 0; i < rows * cols; i++)
 604              		.loc 1 207 0
 605 0436 4FF00003 		mov	r3, #0
 606 043a 8DF81730 		strb	r3, [sp, #23]
 607 043e 19E0     		b	.L34
 608              	.L35:
 208:../src/linearAlgebra.c ****   {
 209:../src/linearAlgebra.c ****     matrixC[i] = scaler * matrixA[i];
 609              		.loc 1 209 0 discriminator 2
 610 0440 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
 611 0444 4FEA8303 		lsl	r3, r3, #2
 612 0448 019A     		ldr	r2, [sp, #4]
 613 044a D318     		adds	r3, r2, r3
 614 044c 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 615 0450 4FEA8202 		lsl	r2, r2, #2
 616 0454 0699     		ldr	r1, [sp, #24]
 617 0456 8A18     		adds	r2, r1, r2
 618 0458 92ED007A 		flds	s14, [r2, #0]
 619 045c DDED007A 		flds	s15, [sp, #0]
 620 0460 67EE277A 		fmuls	s15, s14, s15
 621 0464 C3ED007A 		fsts	s15, [r3, #0]
 207:../src/linearAlgebra.c ****   for (i = 0; i < rows * cols; i++)
 622              		.loc 1 207 0 discriminator 2
 623 0468 9DF81730 		ldrb	r3, [sp, #23]
 624 046c 03F10103 		add	r3, r3, #1
 625 0470 8DF81730 		strb	r3, [sp, #23]
 626              	.L34:
 207:../src/linearAlgebra.c ****   for (i = 0; i < rows * cols; i++)
 627              		.loc 1 207 0 is_stmt 0 discriminator 1
 628 0474 9DF81720 		ldrb	r2, [sp, #23]	@ zero_extendqisi2
 629 0478 039B     		ldr	r3, [sp, #12]
 630 047a 0299     		ldr	r1, [sp, #8]
 631 047c 01FB03F3 		mul	r3, r1, r3
 632 0480 9A42     		cmp	r2, r3
 633 0482 DDDB     		blt	.L35
 210:../src/linearAlgebra.c ****   }
 211:../src/linearAlgebra.c **** }
 634              		.loc 1 211 0 is_stmt 1
 635 0484 06B0     		add	sp, sp, #24
 636 0486 7047     		bx	lr
 637              		.cfi_endproc
 638              	.LFE119:
 640              		.align	2
 641              		.global	matrixTranspose3x3
 642              		.thumb
 643              		.thumb_func
 645              	matrixTranspose3x3:
 646              	.LFB120:
 212:../src/linearAlgebra.c **** 
 213:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
 214:../src/linearAlgebra.c **** //  3 x 3 Matrix Transpose
 215:../src/linearAlgebra.c **** //  Compute 3 x 3 Transpose of A
 216:../src/linearAlgebra.c **** //  Result placed in matrix C, dimension 3 x 3
 217:../src/linearAlgebra.c **** //
 218:../src/linearAlgebra.c **** //  Call as: Transpose3x3(C, A)
 219:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
 220:../src/linearAlgebra.c **** 
 221:../src/linearAlgebra.c **** void matrixTranspose3x3(float matrixC[9], float matrixA[9])
 222:../src/linearAlgebra.c **** {
 647              		.loc 1 222 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 8
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651              		@ link register save eliminated.
 652 0488 82B0     		sub	sp, sp, #8
 653              	.LCFI9:
 654              		.cfi_def_cfa_offset 8
 655 048a 0190     		str	r0, [sp, #4]
 656 048c 0091     		str	r1, [sp, #0]
 223:../src/linearAlgebra.c ****   matrixC[0] = matrixA[0];
 657              		.loc 1 223 0
 658 048e 009B     		ldr	r3, [sp, #0]
 659 0490 1A68     		ldr	r2, [r3, #0]	@ float
 660 0492 019B     		ldr	r3, [sp, #4]
 661 0494 1A60     		str	r2, [r3, #0]	@ float
 224:../src/linearAlgebra.c ****   matrixC[1] = matrixA[3];
 662              		.loc 1 224 0
 663 0496 019B     		ldr	r3, [sp, #4]
 664 0498 03F10403 		add	r3, r3, #4
 665 049c 009A     		ldr	r2, [sp, #0]
 666 049e D268     		ldr	r2, [r2, #12]	@ float
 667 04a0 1A60     		str	r2, [r3, #0]	@ float
 225:../src/linearAlgebra.c ****   matrixC[2] = matrixA[6];
 668              		.loc 1 225 0
 669 04a2 019B     		ldr	r3, [sp, #4]
 670 04a4 03F10803 		add	r3, r3, #8
 671 04a8 009A     		ldr	r2, [sp, #0]
 672 04aa 9269     		ldr	r2, [r2, #24]	@ float
 673 04ac 1A60     		str	r2, [r3, #0]	@ float
 226:../src/linearAlgebra.c ****   matrixC[3] = matrixA[1];
 674              		.loc 1 226 0
 675 04ae 019B     		ldr	r3, [sp, #4]
 676 04b0 03F10C03 		add	r3, r3, #12
 677 04b4 009A     		ldr	r2, [sp, #0]
 678 04b6 5268     		ldr	r2, [r2, #4]	@ float
 679 04b8 1A60     		str	r2, [r3, #0]	@ float
 227:../src/linearAlgebra.c ****   matrixC[4] = matrixA[4];
 680              		.loc 1 227 0
 681 04ba 019B     		ldr	r3, [sp, #4]
 682 04bc 03F11003 		add	r3, r3, #16
 683 04c0 009A     		ldr	r2, [sp, #0]
 684 04c2 1269     		ldr	r2, [r2, #16]	@ float
 685 04c4 1A60     		str	r2, [r3, #0]	@ float
 228:../src/linearAlgebra.c ****   matrixC[5] = matrixA[7];
 686              		.loc 1 228 0
 687 04c6 019B     		ldr	r3, [sp, #4]
 688 04c8 03F11403 		add	r3, r3, #20
 689 04cc 009A     		ldr	r2, [sp, #0]
 690 04ce D269     		ldr	r2, [r2, #28]	@ float
 691 04d0 1A60     		str	r2, [r3, #0]	@ float
 229:../src/linearAlgebra.c ****   matrixC[6] = matrixA[2];
 692              		.loc 1 229 0
 693 04d2 019B     		ldr	r3, [sp, #4]
 694 04d4 03F11803 		add	r3, r3, #24
 695 04d8 009A     		ldr	r2, [sp, #0]
 696 04da 9268     		ldr	r2, [r2, #8]	@ float
 697 04dc 1A60     		str	r2, [r3, #0]	@ float
 230:../src/linearAlgebra.c ****   matrixC[7] = matrixA[5];
 698              		.loc 1 230 0
 699 04de 019B     		ldr	r3, [sp, #4]
 700 04e0 03F11C03 		add	r3, r3, #28
 701 04e4 009A     		ldr	r2, [sp, #0]
 702 04e6 5269     		ldr	r2, [r2, #20]	@ float
 703 04e8 1A60     		str	r2, [r3, #0]	@ float
 231:../src/linearAlgebra.c ****   matrixC[8] = matrixA[8];
 704              		.loc 1 231 0
 705 04ea 019B     		ldr	r3, [sp, #4]
 706 04ec 03F12003 		add	r3, r3, #32
 707 04f0 009A     		ldr	r2, [sp, #0]
 708 04f2 126A     		ldr	r2, [r2, #32]	@ float
 709 04f4 1A60     		str	r2, [r3, #0]	@ float
 232:../src/linearAlgebra.c **** }
 710              		.loc 1 232 0
 711 04f6 02B0     		add	sp, sp, #8
 712 04f8 7047     		bx	lr
 713              		.cfi_endproc
 714              	.LFE120:
 716 04fa 00BF     		.align	2
 717              		.global	matrixInverse3x3
 718              		.thumb
 719              		.thumb_func
 721              	matrixInverse3x3:
 722              	.LFB121:
 233:../src/linearAlgebra.c **** 
 234:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
 235:../src/linearAlgebra.c **** //  3 x 3 Matrix Inverse
 236:../src/linearAlgebra.c **** //  Compute 3 x 3 Inverse of A
 237:../src/linearAlgebra.c **** //  Result placed in matrix C, dimension 3 x 3
 238:../src/linearAlgebra.c **** //
 239:../src/linearAlgebra.c **** //  Call as: Inverse3x3(C, A)
 240:../src/linearAlgebra.c **** ///////////////////////////////////////////////////////////////////////////////
 241:../src/linearAlgebra.c **** 
 242:../src/linearAlgebra.c **** void matrixInverse3x3(float matrixC[9], float matrixA[9])
 243:../src/linearAlgebra.c **** {
 723              		.loc 1 243 0
 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 120
 726              		@ frame_needed = 0, uses_anonymous_args = 0
 727 04fc 00B5     		push	{lr}
 728              	.LCFI10:
 729              		.cfi_def_cfa_offset 4
 730              		.cfi_offset 14, -4
 731 04fe A1B0     		sub	sp, sp, #132
 732              	.LCFI11:
 733              		.cfi_def_cfa_offset 136
 734 0500 0390     		str	r0, [sp, #12]
 735 0502 0291     		str	r1, [sp, #8]
 244:../src/linearAlgebra.c **** 
 245:../src/linearAlgebra.c ****   float det;
 246:../src/linearAlgebra.c ****   float transposeA[9];
 247:../src/linearAlgebra.c ****   float minors[9];
 248:../src/linearAlgebra.c ****   float transposeMinors[9];
 249:../src/linearAlgebra.c **** 
 250:../src/linearAlgebra.c ****   det = matrixA[0] * (matrixA[4] * matrixA[8] - matrixA[5] * matrixA[7]) -
 736              		.loc 1 250 0
 737 0504 029B     		ldr	r3, [sp, #8]
 738 0506 D3ED006A 		flds	s13, [r3, #0]
 739 050a 029B     		ldr	r3, [sp, #8]
 740 050c 03F11003 		add	r3, r3, #16
 741 0510 93ED007A 		flds	s14, [r3, #0]
 742 0514 029B     		ldr	r3, [sp, #8]
 743 0516 03F12003 		add	r3, r3, #32
 744 051a D3ED007A 		flds	s15, [r3, #0]
 745 051e 27EE277A 		fmuls	s14, s14, s15
 746 0522 029B     		ldr	r3, [sp, #8]
 747 0524 03F11403 		add	r3, r3, #20
 748 0528 93ED006A 		flds	s12, [r3, #0]
 749 052c 029B     		ldr	r3, [sp, #8]
 750 052e 03F11C03 		add	r3, r3, #28
 751 0532 D3ED007A 		flds	s15, [r3, #0]
 752 0536 66EE277A 		fmuls	s15, s12, s15
 753 053a 77EE677A 		fsubs	s15, s14, s15
 754 053e 26EEA77A 		fmuls	s14, s13, s15
 251:../src/linearAlgebra.c ****         matrixA[1] * (matrixA[3] * matrixA[8] - matrixA[5] * matrixA[6]) +
 755              		.loc 1 251 0
 756 0542 029B     		ldr	r3, [sp, #8]
 757 0544 03F10403 		add	r3, r3, #4
 758 0548 93ED006A 		flds	s12, [r3, #0]
 759 054c 029B     		ldr	r3, [sp, #8]
 760 054e 03F10C03 		add	r3, r3, #12
 761 0552 D3ED006A 		flds	s13, [r3, #0]
 762 0556 029B     		ldr	r3, [sp, #8]
 763 0558 03F12003 		add	r3, r3, #32
 764 055c D3ED007A 		flds	s15, [r3, #0]
 765 0560 66EEA76A 		fmuls	s13, s13, s15
 766 0564 029B     		ldr	r3, [sp, #8]
 767 0566 03F11403 		add	r3, r3, #20
 768 056a D3ED005A 		flds	s11, [r3, #0]
 769 056e 029B     		ldr	r3, [sp, #8]
 770 0570 03F11803 		add	r3, r3, #24
 771 0574 D3ED007A 		flds	s15, [r3, #0]
 772 0578 65EEA77A 		fmuls	s15, s11, s15
 773 057c 76EEE77A 		fsubs	s15, s13, s15
 774 0580 66EE277A 		fmuls	s15, s12, s15
 250:../src/linearAlgebra.c ****   det = matrixA[0] * (matrixA[4] * matrixA[8] - matrixA[5] * matrixA[7]) -
 775              		.loc 1 250 0
 776 0584 77EE676A 		fsubs	s13, s14, s15
 252:../src/linearAlgebra.c ****         matrixA[2] * (matrixA[3] * matrixA[7] - matrixA[4] * matrixA[6]);
 777              		.loc 1 252 0
 778 0588 029B     		ldr	r3, [sp, #8]
 779 058a 03F10803 		add	r3, r3, #8
 780 058e 93ED006A 		flds	s12, [r3, #0]
 781 0592 029B     		ldr	r3, [sp, #8]
 782 0594 03F10C03 		add	r3, r3, #12
 783 0598 93ED007A 		flds	s14, [r3, #0]
 784 059c 029B     		ldr	r3, [sp, #8]
 785 059e 03F11C03 		add	r3, r3, #28
 786 05a2 D3ED007A 		flds	s15, [r3, #0]
 787 05a6 27EE277A 		fmuls	s14, s14, s15
 788 05aa 029B     		ldr	r3, [sp, #8]
 789 05ac 03F11003 		add	r3, r3, #16
 790 05b0 D3ED005A 		flds	s11, [r3, #0]
 791 05b4 029B     		ldr	r3, [sp, #8]
 792 05b6 03F11803 		add	r3, r3, #24
 793 05ba D3ED007A 		flds	s15, [r3, #0]
 794 05be 65EEA77A 		fmuls	s15, s11, s15
 795 05c2 77EE677A 		fsubs	s15, s14, s15
 796 05c6 66EE277A 		fmuls	s15, s12, s15
 250:../src/linearAlgebra.c ****   det = matrixA[0] * (matrixA[4] * matrixA[8] - matrixA[5] * matrixA[7]) -
 797              		.loc 1 250 0
 798 05ca 76EEA77A 		fadds	s15, s13, s15
 799 05ce CDED1F7A 		fsts	s15, [sp, #124]
 253:../src/linearAlgebra.c **** 
 254:../src/linearAlgebra.c ****   matrixTranspose3x3(transposeA, matrixA);
 800              		.loc 1 254 0
 801 05d2 16AB     		add	r3, sp, #88
 802 05d4 1846     		mov	r0, r3
 803 05d6 0299     		ldr	r1, [sp, #8]
 804 05d8 FFF7FEFF 		bl	matrixTranspose3x3
 255:../src/linearAlgebra.c **** 
 256:../src/linearAlgebra.c ****   minors[0] = matrixA[4] * matrixA[8] - matrixA[5] * matrixA[7];
 805              		.loc 1 256 0
 806 05dc 029B     		ldr	r3, [sp, #8]
 807 05de 03F11003 		add	r3, r3, #16
 808 05e2 93ED007A 		flds	s14, [r3, #0]
 809 05e6 029B     		ldr	r3, [sp, #8]
 810 05e8 03F12003 		add	r3, r3, #32
 811 05ec D3ED007A 		flds	s15, [r3, #0]
 812 05f0 27EE277A 		fmuls	s14, s14, s15
 813 05f4 029B     		ldr	r3, [sp, #8]
 814 05f6 03F11403 		add	r3, r3, #20
 815 05fa D3ED006A 		flds	s13, [r3, #0]
 816 05fe 029B     		ldr	r3, [sp, #8]
 817 0600 03F11C03 		add	r3, r3, #28
 818 0604 D3ED007A 		flds	s15, [r3, #0]
 819 0608 66EEA77A 		fmuls	s15, s13, s15
 820 060c 77EE677A 		fsubs	s15, s14, s15
 821 0610 CDED0D7A 		fsts	s15, [sp, #52]
 257:../src/linearAlgebra.c ****   minors[1] = matrixA[5] * matrixA[6] - matrixA[3] * matrixA[8];
 822              		.loc 1 257 0
 823 0614 029B     		ldr	r3, [sp, #8]
 824 0616 03F11403 		add	r3, r3, #20
 825 061a 93ED007A 		flds	s14, [r3, #0]
 826 061e 029B     		ldr	r3, [sp, #8]
 827 0620 03F11803 		add	r3, r3, #24
 828 0624 D3ED007A 		flds	s15, [r3, #0]
 829 0628 27EE277A 		fmuls	s14, s14, s15
 830 062c 029B     		ldr	r3, [sp, #8]
 831 062e 03F10C03 		add	r3, r3, #12
 832 0632 D3ED006A 		flds	s13, [r3, #0]
 833 0636 029B     		ldr	r3, [sp, #8]
 834 0638 03F12003 		add	r3, r3, #32
 835 063c D3ED007A 		flds	s15, [r3, #0]
 836 0640 66EEA77A 		fmuls	s15, s13, s15
 837 0644 77EE677A 		fsubs	s15, s14, s15
 838 0648 CDED0E7A 		fsts	s15, [sp, #56]
 258:../src/linearAlgebra.c ****   minors[2] = matrixA[3] * matrixA[7] - matrixA[4] * matrixA[6];
 839              		.loc 1 258 0
 840 064c 029B     		ldr	r3, [sp, #8]
 841 064e 03F10C03 		add	r3, r3, #12
 842 0652 93ED007A 		flds	s14, [r3, #0]
 843 0656 029B     		ldr	r3, [sp, #8]
 844 0658 03F11C03 		add	r3, r3, #28
 845 065c D3ED007A 		flds	s15, [r3, #0]
 846 0660 27EE277A 		fmuls	s14, s14, s15
 847 0664 029B     		ldr	r3, [sp, #8]
 848 0666 03F11003 		add	r3, r3, #16
 849 066a D3ED006A 		flds	s13, [r3, #0]
 850 066e 029B     		ldr	r3, [sp, #8]
 851 0670 03F11803 		add	r3, r3, #24
 852 0674 D3ED007A 		flds	s15, [r3, #0]
 853 0678 66EEA77A 		fmuls	s15, s13, s15
 854 067c 77EE677A 		fsubs	s15, s14, s15
 855 0680 CDED0F7A 		fsts	s15, [sp, #60]
 259:../src/linearAlgebra.c ****   minors[3] = matrixA[2] * matrixA[7] - matrixA[1] * matrixA[8];
 856              		.loc 1 259 0
 857 0684 029B     		ldr	r3, [sp, #8]
 858 0686 03F10803 		add	r3, r3, #8
 859 068a 93ED007A 		flds	s14, [r3, #0]
 860 068e 029B     		ldr	r3, [sp, #8]
 861 0690 03F11C03 		add	r3, r3, #28
 862 0694 D3ED007A 		flds	s15, [r3, #0]
 863 0698 27EE277A 		fmuls	s14, s14, s15
 864 069c 029B     		ldr	r3, [sp, #8]
 865 069e 03F10403 		add	r3, r3, #4
 866 06a2 D3ED006A 		flds	s13, [r3, #0]
 867 06a6 029B     		ldr	r3, [sp, #8]
 868 06a8 03F12003 		add	r3, r3, #32
 869 06ac D3ED007A 		flds	s15, [r3, #0]
 870 06b0 66EEA77A 		fmuls	s15, s13, s15
 871 06b4 77EE677A 		fsubs	s15, s14, s15
 872 06b8 CDED107A 		fsts	s15, [sp, #64]
 260:../src/linearAlgebra.c ****   minors[4] = matrixA[0] * matrixA[8] - matrixA[2] * matrixA[6];
 873              		.loc 1 260 0
 874 06bc 029B     		ldr	r3, [sp, #8]
 875 06be 93ED007A 		flds	s14, [r3, #0]
 876 06c2 029B     		ldr	r3, [sp, #8]
 877 06c4 03F12003 		add	r3, r3, #32
 878 06c8 D3ED007A 		flds	s15, [r3, #0]
 879 06cc 27EE277A 		fmuls	s14, s14, s15
 880 06d0 029B     		ldr	r3, [sp, #8]
 881 06d2 03F10803 		add	r3, r3, #8
 882 06d6 D3ED006A 		flds	s13, [r3, #0]
 883 06da 029B     		ldr	r3, [sp, #8]
 884 06dc 03F11803 		add	r3, r3, #24
 885 06e0 D3ED007A 		flds	s15, [r3, #0]
 886 06e4 66EEA77A 		fmuls	s15, s13, s15
 887 06e8 77EE677A 		fsubs	s15, s14, s15
 888 06ec CDED117A 		fsts	s15, [sp, #68]
 261:../src/linearAlgebra.c ****   minors[5] = matrixA[1] * matrixA[6] - matrixA[0] * matrixA[7];
 889              		.loc 1 261 0
 890 06f0 029B     		ldr	r3, [sp, #8]
 891 06f2 03F10403 		add	r3, r3, #4
 892 06f6 93ED007A 		flds	s14, [r3, #0]
 893 06fa 029B     		ldr	r3, [sp, #8]
 894 06fc 03F11803 		add	r3, r3, #24
 895 0700 D3ED007A 		flds	s15, [r3, #0]
 896 0704 27EE277A 		fmuls	s14, s14, s15
 897 0708 029B     		ldr	r3, [sp, #8]
 898 070a D3ED006A 		flds	s13, [r3, #0]
 899 070e 029B     		ldr	r3, [sp, #8]
 900 0710 03F11C03 		add	r3, r3, #28
 901 0714 D3ED007A 		flds	s15, [r3, #0]
 902 0718 66EEA77A 		fmuls	s15, s13, s15
 903 071c 77EE677A 		fsubs	s15, s14, s15
 904 0720 CDED127A 		fsts	s15, [sp, #72]
 262:../src/linearAlgebra.c ****   minors[6] = matrixA[1] * matrixA[5] - matrixA[2] * matrixA[4];
 905              		.loc 1 262 0
 906 0724 029B     		ldr	r3, [sp, #8]
 907 0726 03F10403 		add	r3, r3, #4
 908 072a 93ED007A 		flds	s14, [r3, #0]
 909 072e 029B     		ldr	r3, [sp, #8]
 910 0730 03F11403 		add	r3, r3, #20
 911 0734 D3ED007A 		flds	s15, [r3, #0]
 912 0738 27EE277A 		fmuls	s14, s14, s15
 913 073c 029B     		ldr	r3, [sp, #8]
 914 073e 03F10803 		add	r3, r3, #8
 915 0742 D3ED006A 		flds	s13, [r3, #0]
 916 0746 029B     		ldr	r3, [sp, #8]
 917 0748 03F11003 		add	r3, r3, #16
 918 074c D3ED007A 		flds	s15, [r3, #0]
 919 0750 66EEA77A 		fmuls	s15, s13, s15
 920 0754 77EE677A 		fsubs	s15, s14, s15
 921 0758 CDED137A 		fsts	s15, [sp, #76]
 263:../src/linearAlgebra.c ****   minors[7] = matrixA[2] * matrixA[3] - matrixA[0] * matrixA[5];
 922              		.loc 1 263 0
 923 075c 029B     		ldr	r3, [sp, #8]
 924 075e 03F10803 		add	r3, r3, #8
 925 0762 93ED007A 		flds	s14, [r3, #0]
 926 0766 029B     		ldr	r3, [sp, #8]
 927 0768 03F10C03 		add	r3, r3, #12
 928 076c D3ED007A 		flds	s15, [r3, #0]
 929 0770 27EE277A 		fmuls	s14, s14, s15
 930 0774 029B     		ldr	r3, [sp, #8]
 931 0776 D3ED006A 		flds	s13, [r3, #0]
 932 077a 029B     		ldr	r3, [sp, #8]
 933 077c 03F11403 		add	r3, r3, #20
 934 0780 D3ED007A 		flds	s15, [r3, #0]
 935 0784 66EEA77A 		fmuls	s15, s13, s15
 936 0788 77EE677A 		fsubs	s15, s14, s15
 937 078c CDED147A 		fsts	s15, [sp, #80]
 264:../src/linearAlgebra.c ****   minors[8] = matrixA[0] * matrixA[4] - matrixA[1] * matrixA[3];
 938              		.loc 1 264 0
 939 0790 029B     		ldr	r3, [sp, #8]
 940 0792 93ED007A 		flds	s14, [r3, #0]
 941 0796 029B     		ldr	r3, [sp, #8]
 942 0798 03F11003 		add	r3, r3, #16
 943 079c D3ED007A 		flds	s15, [r3, #0]
 944 07a0 27EE277A 		fmuls	s14, s14, s15
 945 07a4 029B     		ldr	r3, [sp, #8]
 946 07a6 03F10403 		add	r3, r3, #4
 947 07aa D3ED006A 		flds	s13, [r3, #0]
 948 07ae 029B     		ldr	r3, [sp, #8]
 949 07b0 03F10C03 		add	r3, r3, #12
 950 07b4 D3ED007A 		flds	s15, [r3, #0]
 951 07b8 66EEA77A 		fmuls	s15, s13, s15
 952 07bc 77EE677A 		fsubs	s15, s14, s15
 953 07c0 CDED157A 		fsts	s15, [sp, #84]
 265:../src/linearAlgebra.c **** 
 266:../src/linearAlgebra.c ****   matrixTranspose3x3(transposeMinors, minors);
 954              		.loc 1 266 0
 955 07c4 04AB     		add	r3, sp, #16
 956 07c6 1846     		mov	r0, r3
 957 07c8 0DAB     		add	r3, sp, #52
 958 07ca 1946     		mov	r1, r3
 959 07cc FFF7FEFF 		bl	matrixTranspose3x3
 267:../src/linearAlgebra.c **** 
 268:../src/linearAlgebra.c ****   det = 1/det;
 960              		.loc 1 268 0
 961 07d0 0A4B     		ldr	r3, .L38	@ float
 962 07d2 DDED1F7A 		flds	s15, [sp, #124]
 963 07d6 07EE103A 		fmsr	s14, r3
 964 07da C7EE277A 		fdivs	s15, s14, s15
 965 07de CDED1F7A 		fsts	s15, [sp, #124]
 269:../src/linearAlgebra.c **** 
 270:../src/linearAlgebra.c ****   matrixScale(3,3, matrixC, det, transposeMinors);
 966              		.loc 1 270 0
 967 07e2 04AB     		add	r3, sp, #16
 968 07e4 0093     		str	r3, [sp, #0]
 969 07e6 4FF00300 		mov	r0, #3
 970 07ea 4FF00301 		mov	r1, #3
 971 07ee 039A     		ldr	r2, [sp, #12]
 972 07f0 1F9B     		ldr	r3, [sp, #124]	@ float
 973 07f2 FFF7FEFF 		bl	matrixScale
 271:../src/linearAlgebra.c **** }
 974              		.loc 1 271 0
 975 07f6 21B0     		add	sp, sp, #132
 976 07f8 00BD     		pop	{pc}
 977              	.L39:
 978 07fa 00BF     		.align	2
 979              	.L38:
 980 07fc 0000803F 		.word	1065353216
 981              		.cfi_endproc
 982              	.LFE121:
 984              	.Letext0:
 985              		.file 2 "c:\\program files\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 986              		.file 3 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsMediaTe
 987              		.file 4 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsNMEA.h"
 988              		.file 5 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsUblox.h
 989              		.file 6 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\Libraries\\CMSIS\\I
DEFINED SYMBOLS
                            *ABS*:00000000 linearAlgebra.c
                            *COM*:00000001 mtk19ProcessDataState
                            *COM*:00000001 nmeaProcessDataState
                            *COM*:00000001 ubloxProcessDataState
D:\DOCUME~1\e722209\LOCALS~1\Temp\cclzCuKA.s:22     .text:00000000 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\cclzCuKA.s:27     .text:00000000 vectorDotProduct
D:\DOCUME~1\e722209\LOCALS~1\Temp\cclzCuKA.s:83     .text:00000064 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\cclzCuKA.s:87     .text:00000068 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\cclzCuKA.s:92     .text:00000068 vectorCrossProduct
D:\DOCUME~1\e722209\LOCALS~1\Temp\cclzCuKA.s:168    .text:0000011c vectorScale
D:\DOCUME~1\e722209\LOCALS~1\Temp\cclzCuKA.s:221    .text:00000174 vectorAdd
D:\DOCUME~1\e722209\LOCALS~1\Temp\cclzCuKA.s:278    .text:000001d8 vectorSubtract
D:\DOCUME~1\e722209\LOCALS~1\Temp\cclzCuKA.s:335    .text:0000023c matrixMultiply
D:\DOCUME~1\e722209\LOCALS~1\Temp\cclzCuKA.s:463    .text:00000358 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\cclzCuKA.s:467    .text:0000035c $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\cclzCuKA.s:472    .text:0000035c matrixAdd
D:\DOCUME~1\e722209\LOCALS~1\Temp\cclzCuKA.s:531    .text:000003c4 matrixSubtract
D:\DOCUME~1\e722209\LOCALS~1\Temp\cclzCuKA.s:590    .text:0000042c matrixScale
D:\DOCUME~1\e722209\LOCALS~1\Temp\cclzCuKA.s:645    .text:00000488 matrixTranspose3x3
D:\DOCUME~1\e722209\LOCALS~1\Temp\cclzCuKA.s:721    .text:000004fc matrixInverse3x3
D:\DOCUME~1\e722209\LOCALS~1\Temp\cclzCuKA.s:980    .text:000007fc $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS

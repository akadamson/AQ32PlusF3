   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"accelCalibration.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	mtk19ProcessDataState,1,1
  20              		.comm	nmeaProcessDataState,1,1
  21              		.comm	ubloxProcessDataState,1,1
  22              		.section	.rodata
  23              		.align	2
  24              	.LC0:
  25 0000 0A416363 		.ascii	"\012Accelerometer Calibration:\012\012\000"
  25      656C6572 
  25      6F6D6574 
  25      65722043 
  25      616C6962 
  26 001e 0000     		.align	2
  27              	.LC1:
  28 0020 506C6163 		.ascii	"Place accelerometer right side up\012\000"
  28      65206163 
  28      63656C65 
  28      726F6D65 
  28      74657220 
  29 0043 00       		.align	2
  30              	.LC2:
  31 0044 20205365 		.ascii	"  Send a character when ready to proceed\012\012\000"
  31      6E642061 
  31      20636861 
  31      72616374 
  31      65722077 
  32 006f 00       		.align	2
  33              	.LC3:
  34 0070 20204761 		.ascii	"  Gathering Data...\012\012\000"
  34      74686572 
  34      696E6720 
  34      44617461 
  34      2E2E2E0A 
  35 0086 0000     		.align	2
  36              	.LC4:
  37 0088 0A0A00   		.ascii	"\012\012\000"
  38 008b 00       		.align	2
  39              	.LC5:
  40 008c 506C6163 		.ascii	"Place accelerometer up side down\012\000"
  40      65206163 
  40      63656C65 
  40      726F6D65 
  40      74657220 
  41              		.global	__aeabi_f2d
  42              		.global	__aeabi_dadd
  43              		.global	__aeabi_ddiv
  44              		.global	__aeabi_d2f
  45 00ae 0000     		.align	2
  46              	.LC6:
  47 00b0 506C6163 		.ascii	"Place accelerometer left edge down\012\000"
  47      65206163 
  47      63656C65 
  47      726F6D65 
  47      74657220 
  48              		.align	2
  49              	.LC7:
  50 00d4 506C6163 		.ascii	"Place accelerometer right edge down\012\000"
  50      65206163 
  50      63656C65 
  50      726F6D65 
  50      74657220 
  51 00f9 000000   		.align	2
  52              	.LC8:
  53 00fc 506C6163 		.ascii	"Place accelerometer rear edge down\012\000"
  53      65206163 
  53      63656C65 
  53      726F6D65 
  53      74657220 
  54              		.align	2
  55              	.LC9:
  56 0120 506C6163 		.ascii	"Place accelerometer front edge down\012\000"
  56      65206163 
  56      63656C65 
  56      726F6D65 
  56      74657220 
  57 0145 000000   		.align	2
  58              	.LC10:
  59 0148 2C2000   		.ascii	", \000"
  60 014b 00       		.align	2
  61              	.LC11:
  62 014c 0A00     		.ascii	"\012\000"
  63 014e 0000     		.align	2
  64              	.LC12:
  65 0150 0A416363 		.ascii	"\012Accel Calibration Complete.\012\000"
  65      656C2043 
  65      616C6962 
  65      72617469 
  65      6F6E2043 
  66 016e 0000     		.text
  67              		.align	2
  68              		.global	accelCalibration
  69              		.thumb
  70              		.thumb_func
  72              	accelCalibration:
  73              	.LFB111:
  74              		.file 1 "../src/calibration/accelCalibration.c"
   1:../src/calibration/accelCalibration.c **** /*
   2:../src/calibration/accelCalibration.c ****   December 2012
   3:../src/calibration/accelCalibration.c **** 
   4:../src/calibration/accelCalibration.c ****   aq32Plus_F3 Rev -
   5:../src/calibration/accelCalibration.c **** 
   6:../src/calibration/accelCalibration.c ****   Copyright (c) 2012 John Ihlein.  All rights reserved.
   7:../src/calibration/accelCalibration.c **** 
   8:../src/calibration/accelCalibration.c ****   Open Source STM32 Based Multicopter Controller Software
   9:../src/calibration/accelCalibration.c **** 
  10:../src/calibration/accelCalibration.c ****   Includes code and/or ideas from:
  11:../src/calibration/accelCalibration.c **** 
  12:../src/calibration/accelCalibration.c ****   1)AeroQuad
  13:../src/calibration/accelCalibration.c ****   2)BaseFlight
  14:../src/calibration/accelCalibration.c ****   3)CH Robotics
  15:../src/calibration/accelCalibration.c ****   4)MultiWii
  16:../src/calibration/accelCalibration.c ****   5)S.O.H. Madgwick
  17:../src/calibration/accelCalibration.c ****   6)UAVX
  18:../src/calibration/accelCalibration.c ****   7)STM DiscoveryF3 demonstration software
  19:../src/calibration/accelCalibration.c **** 
  20:../src/calibration/accelCalibration.c ****   Designed to run on the DiscoveryF3 board
  21:../src/calibration/accelCalibration.c **** 
  22:../src/calibration/accelCalibration.c ****   This program is free software: you can redistribute it and/or modify
  23:../src/calibration/accelCalibration.c ****   it under the terms of the GNU General Public License as published by
  24:../src/calibration/accelCalibration.c ****   the Free Software Foundation, either version 3 of the License, or
  25:../src/calibration/accelCalibration.c ****   (at your option) any later version.
  26:../src/calibration/accelCalibration.c **** 
  27:../src/calibration/accelCalibration.c ****   This program is distributed in the hope that it will be useful,
  28:../src/calibration/accelCalibration.c ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
  29:../src/calibration/accelCalibration.c ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  30:../src/calibration/accelCalibration.c ****   GNU General Public License for more details.
  31:../src/calibration/accelCalibration.c **** 
  32:../src/calibration/accelCalibration.c ****   You should have received a copy of the GNU General Public License
  33:../src/calibration/accelCalibration.c ****   along with this program. If not, see <http://www.gnu.org/licenses/>.
  34:../src/calibration/accelCalibration.c **** */
  35:../src/calibration/accelCalibration.c **** 
  36:../src/calibration/accelCalibration.c **** ///////////////////////////////////////////////////////////////////////////////
  37:../src/calibration/accelCalibration.c **** 
  38:../src/calibration/accelCalibration.c **** #include "board.h"
  39:../src/calibration/accelCalibration.c **** 
  40:../src/calibration/accelCalibration.c **** ///////////////////////////////////////////////////////////////////////////////
  41:../src/calibration/accelCalibration.c **** // Accelerometer Calibration
  42:../src/calibration/accelCalibration.c **** ///////////////////////////////////////////////////////////////////////////////
  43:../src/calibration/accelCalibration.c **** 
  44:../src/calibration/accelCalibration.c **** void accelCalibration(void)
  45:../src/calibration/accelCalibration.c **** {
  75              		.loc 1 45 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 32
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79 0000 30B5     		push	{r4, r5, lr}
  80              	.LCFI0:
  81              		.cfi_def_cfa_offset 12
  82              		.cfi_offset 14, -4
  83              		.cfi_offset 5, -8
  84              		.cfi_offset 4, -12
  85 0002 89B0     		sub	sp, sp, #36
  86              	.LCFI1:
  87              		.cfi_def_cfa_offset 48
  46:../src/calibration/accelCalibration.c ****     float noseUp        = 0.0f;
  88              		.loc 1 46 0
  89 0004 C64B     		ldr	r3, .L20+8	@ float
  90 0006 0793     		str	r3, [sp, #28]	@ float
  47:../src/calibration/accelCalibration.c ****     float noseDown      = 0.0f;
  91              		.loc 1 47 0
  92 0008 C54B     		ldr	r3, .L20+8	@ float
  93 000a 0693     		str	r3, [sp, #24]	@ float
  48:../src/calibration/accelCalibration.c ****     float leftWingDown  = 0.0f;
  94              		.loc 1 48 0
  95 000c C44B     		ldr	r3, .L20+8	@ float
  96 000e 0593     		str	r3, [sp, #20]	@ float
  49:../src/calibration/accelCalibration.c ****     float rightWingDown = 0.0f;
  97              		.loc 1 49 0
  98 0010 C34B     		ldr	r3, .L20+8	@ float
  99 0012 0493     		str	r3, [sp, #16]	@ float
  50:../src/calibration/accelCalibration.c ****     float upSideDown    = 0.0f;
 100              		.loc 1 50 0
 101 0014 C24B     		ldr	r3, .L20+8	@ float
 102 0016 0393     		str	r3, [sp, #12]	@ float
  51:../src/calibration/accelCalibration.c ****     float rightSideUp   = 0.0f;
 103              		.loc 1 51 0
 104 0018 C14B     		ldr	r3, .L20+8	@ float
 105 001a 0293     		str	r3, [sp, #8]	@ float
  52:../src/calibration/accelCalibration.c **** 
  53:../src/calibration/accelCalibration.c ****     int16_t index;
  54:../src/calibration/accelCalibration.c **** 
  55:../src/calibration/accelCalibration.c ****     accelCalibrating = true;
 106              		.loc 1 55 0
 107 001c 40F20003 		movw	r3, #:lower16:accelCalibrating
 108 0020 C0F20003 		movt	r3, #:upper16:accelCalibrating
 109 0024 4FF00102 		mov	r2, #1
 110 0028 1A70     		strb	r2, [r3, #0]
  56:../src/calibration/accelCalibration.c **** 
  57:../src/calibration/accelCalibration.c ****     uart1Print("\nAccelerometer Calibration:\n\n");
 111              		.loc 1 57 0
 112 002a 40F20000 		movw	r0, #:lower16:.LC0
 113 002e C0F20000 		movt	r0, #:upper16:.LC0
 114 0032 FFF7FEFF 		bl	uart1Print
  58:../src/calibration/accelCalibration.c **** 
  59:../src/calibration/accelCalibration.c ****     ///////////////////////////////////
  60:../src/calibration/accelCalibration.c **** 
  61:../src/calibration/accelCalibration.c ****     uart1Print("Place accelerometer right side up\n");
 115              		.loc 1 61 0
 116 0036 40F20000 		movw	r0, #:lower16:.LC1
 117 003a C0F20000 		movt	r0, #:upper16:.LC1
 118 003e FFF7FEFF 		bl	uart1Print
  62:../src/calibration/accelCalibration.c ****     uart1Print("  Send a character when ready to proceed\n\n");
 119              		.loc 1 62 0
 120 0042 40F20000 		movw	r0, #:lower16:.LC2
 121 0046 C0F20000 		movt	r0, #:upper16:.LC2
 122 004a FFF7FEFF 		bl	uart1Print
  63:../src/calibration/accelCalibration.c **** 
  64:../src/calibration/accelCalibration.c ****     while (uart1Available() == false);
 123              		.loc 1 64 0
 124 004e 00BF     		nop
 125              	.L2:
 126              		.loc 1 64 0 is_stmt 0 discriminator 1
 127 0050 FFF7FEFF 		bl	uart1Available
 128 0054 0346     		mov	r3, r0
 129 0056 002B     		cmp	r3, #0
 130 0058 FAD0     		beq	.L2
  65:../src/calibration/accelCalibration.c ****     uart1Read();
 131              		.loc 1 65 0 is_stmt 1
 132 005a FFF7FEFF 		bl	uart1Read
  66:../src/calibration/accelCalibration.c **** 
  67:../src/calibration/accelCalibration.c ****     uart1Print("  Gathering Data...\n\n");
 133              		.loc 1 67 0
 134 005e 40F20000 		movw	r0, #:lower16:.LC3
 135 0062 C0F20000 		movt	r0, #:upper16:.LC3
 136 0066 FFF7FEFF 		bl	uart1Print
  68:../src/calibration/accelCalibration.c **** 
  69:../src/calibration/accelCalibration.c ****     for (index = 0; index < 5000; index++) {
 137              		.loc 1 69 0
 138 006a 4FF00003 		mov	r3, #0
 139 006e ADF80630 		strh	r3, [sp, #6]	@ movhi
 140 0072 1BE0     		b	.L3
 141              	.L4:
  70:../src/calibration/accelCalibration.c ****         readAccel();
 142              		.loc 1 70 0 discriminator 2
 143 0074 FFF7FEFF 		bl	readAccel
  71:../src/calibration/accelCalibration.c ****         rightSideUp += (float) rawAccel[ZAXIS].value;
 144              		.loc 1 71 0 discriminator 2
 145 0078 40F20003 		movw	r3, #:lower16:rawAccel
 146 007c C0F20003 		movt	r3, #:upper16:rawAccel
 147 0080 9B88     		ldrh	r3, [r3, #4]
 148 0082 1BB2     		sxth	r3, r3
 149 0084 07EE103A 		fmsr	s14, r3	@ int
 150 0088 F8EEC77A 		fsitos	s15, s14
 151 008c 9DED027A 		flds	s14, [sp, #8]
 152 0090 77EE277A 		fadds	s15, s14, s15
 153 0094 CDED027A 		fsts	s15, [sp, #8]
  72:../src/calibration/accelCalibration.c ****         delayMicroseconds(1000);
 154              		.loc 1 72 0 discriminator 2
 155 0098 4FF47A70 		mov	r0, #1000
 156 009c FFF7FEFF 		bl	delayMicroseconds
  69:../src/calibration/accelCalibration.c ****     for (index = 0; index < 5000; index++) {
 157              		.loc 1 69 0 discriminator 2
 158 00a0 BDF80630 		ldrh	r3, [sp, #6]	@ movhi
 159 00a4 03F10103 		add	r3, r3, #1
 160 00a8 ADF80630 		strh	r3, [sp, #6]	@ movhi
 161              	.L3:
  69:../src/calibration/accelCalibration.c ****     for (index = 0; index < 5000; index++) {
 162              		.loc 1 69 0 is_stmt 0 discriminator 1
 163 00ac BDF90620 		ldrsh	r2, [sp, #6]
 164 00b0 41F28733 		movw	r3, #4999
 165 00b4 9A42     		cmp	r2, r3
 166 00b6 DDDD     		ble	.L4
  73:../src/calibration/accelCalibration.c ****     }
  74:../src/calibration/accelCalibration.c **** 
  75:../src/calibration/accelCalibration.c ****     rightSideUp /= 5000.0f;
 167              		.loc 1 75 0 is_stmt 1
 168 00b8 9DED027A 		flds	s14, [sp, #8]
 169 00bc DFED997A 		flds	s15, .L20+12
 170 00c0 C7EE277A 		fdivs	s15, s14, s15
 171 00c4 CDED027A 		fsts	s15, [sp, #8]
  76:../src/calibration/accelCalibration.c **** 
  77:../src/calibration/accelCalibration.c ****     ftoa(rightSideUp, numberString);
 172              		.loc 1 77 0
 173 00c8 0298     		ldr	r0, [sp, #8]	@ float
 174 00ca 40F20001 		movw	r1, #:lower16:numberString
 175 00ce C0F20001 		movt	r1, #:upper16:numberString
 176 00d2 FFF7FEFF 		bl	ftoa
  78:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 177              		.loc 1 78 0
 178 00d6 40F20000 		movw	r0, #:lower16:numberString
 179 00da C0F20000 		movt	r0, #:upper16:numberString
 180 00de FFF7FEFF 		bl	uart1Print
  79:../src/calibration/accelCalibration.c ****     uart1Print("\n\n");
 181              		.loc 1 79 0
 182 00e2 40F20000 		movw	r0, #:lower16:.LC4
 183 00e6 C0F20000 		movt	r0, #:upper16:.LC4
 184 00ea FFF7FEFF 		bl	uart1Print
  80:../src/calibration/accelCalibration.c **** 
  81:../src/calibration/accelCalibration.c ****     uart1Print("Place accelerometer up side down\n");
 185              		.loc 1 81 0
 186 00ee 40F20000 		movw	r0, #:lower16:.LC5
 187 00f2 C0F20000 		movt	r0, #:upper16:.LC5
 188 00f6 FFF7FEFF 		bl	uart1Print
  82:../src/calibration/accelCalibration.c ****     uart1Print("  Send a character when ready to proceed\n\n");
 189              		.loc 1 82 0
 190 00fa 40F20000 		movw	r0, #:lower16:.LC2
 191 00fe C0F20000 		movt	r0, #:upper16:.LC2
 192 0102 FFF7FEFF 		bl	uart1Print
  83:../src/calibration/accelCalibration.c **** 
  84:../src/calibration/accelCalibration.c ****     while (uart1Available() == false);
 193              		.loc 1 84 0
 194 0106 00BF     		nop
 195              	.L5:
 196              		.loc 1 84 0 is_stmt 0 discriminator 1
 197 0108 FFF7FEFF 		bl	uart1Available
 198 010c 0346     		mov	r3, r0
 199 010e 002B     		cmp	r3, #0
 200 0110 FAD0     		beq	.L5
  85:../src/calibration/accelCalibration.c ****     uart1Read();
 201              		.loc 1 85 0 is_stmt 1
 202 0112 FFF7FEFF 		bl	uart1Read
  86:../src/calibration/accelCalibration.c **** 
  87:../src/calibration/accelCalibration.c ****     uart1Print("  Gathering Data...\n\n");
 203              		.loc 1 87 0
 204 0116 40F20000 		movw	r0, #:lower16:.LC3
 205 011a C0F20000 		movt	r0, #:upper16:.LC3
 206 011e FFF7FEFF 		bl	uart1Print
  88:../src/calibration/accelCalibration.c **** 
  89:../src/calibration/accelCalibration.c ****     for (index = 0; index < 5000; index++) {
 207              		.loc 1 89 0
 208 0122 4FF00003 		mov	r3, #0
 209 0126 ADF80630 		strh	r3, [sp, #6]	@ movhi
 210 012a 1BE0     		b	.L6
 211              	.L7:
  90:../src/calibration/accelCalibration.c ****         readAccel();
 212              		.loc 1 90 0 discriminator 2
 213 012c FFF7FEFF 		bl	readAccel
  91:../src/calibration/accelCalibration.c ****         upSideDown += (float) rawAccel[ZAXIS].value;
 214              		.loc 1 91 0 discriminator 2
 215 0130 40F20003 		movw	r3, #:lower16:rawAccel
 216 0134 C0F20003 		movt	r3, #:upper16:rawAccel
 217 0138 9B88     		ldrh	r3, [r3, #4]
 218 013a 1BB2     		sxth	r3, r3
 219 013c 07EE103A 		fmsr	s14, r3	@ int
 220 0140 F8EEC77A 		fsitos	s15, s14
 221 0144 9DED037A 		flds	s14, [sp, #12]
 222 0148 77EE277A 		fadds	s15, s14, s15
 223 014c CDED037A 		fsts	s15, [sp, #12]
  92:../src/calibration/accelCalibration.c ****         delayMicroseconds(1000);
 224              		.loc 1 92 0 discriminator 2
 225 0150 4FF47A70 		mov	r0, #1000
 226 0154 FFF7FEFF 		bl	delayMicroseconds
  89:../src/calibration/accelCalibration.c ****     for (index = 0; index < 5000; index++) {
 227              		.loc 1 89 0 discriminator 2
 228 0158 BDF80630 		ldrh	r3, [sp, #6]	@ movhi
 229 015c 03F10103 		add	r3, r3, #1
 230 0160 ADF80630 		strh	r3, [sp, #6]	@ movhi
 231              	.L6:
  89:../src/calibration/accelCalibration.c ****     for (index = 0; index < 5000; index++) {
 232              		.loc 1 89 0 is_stmt 0 discriminator 1
 233 0164 BDF90620 		ldrsh	r2, [sp, #6]
 234 0168 41F28733 		movw	r3, #4999
 235 016c 9A42     		cmp	r2, r3
 236 016e DDDD     		ble	.L7
  93:../src/calibration/accelCalibration.c ****     }
  94:../src/calibration/accelCalibration.c **** 
  95:../src/calibration/accelCalibration.c ****     upSideDown /= 5000.0f;
 237              		.loc 1 95 0 is_stmt 1
 238 0170 9DED037A 		flds	s14, [sp, #12]
 239 0174 DFED6B7A 		flds	s15, .L20+12
 240 0178 C7EE277A 		fdivs	s15, s14, s15
 241 017c CDED037A 		fsts	s15, [sp, #12]
  96:../src/calibration/accelCalibration.c **** 
  97:../src/calibration/accelCalibration.c ****     ftoa(upSideDown, numberString);
 242              		.loc 1 97 0
 243 0180 0398     		ldr	r0, [sp, #12]	@ float
 244 0182 40F20001 		movw	r1, #:lower16:numberString
 245 0186 C0F20001 		movt	r1, #:upper16:numberString
 246 018a FFF7FEFF 		bl	ftoa
  98:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 247              		.loc 1 98 0
 248 018e 40F20000 		movw	r0, #:lower16:numberString
 249 0192 C0F20000 		movt	r0, #:upper16:numberString
 250 0196 FFF7FEFF 		bl	uart1Print
  99:../src/calibration/accelCalibration.c ****     uart1Print("\n\n");
 251              		.loc 1 99 0
 252 019a 40F20000 		movw	r0, #:lower16:.LC4
 253 019e C0F20000 		movt	r0, #:upper16:.LC4
 254 01a2 FFF7FEFF 		bl	uart1Print
 100:../src/calibration/accelCalibration.c **** 
 101:../src/calibration/accelCalibration.c ****     eepromConfig.accelBias[ZAXIS] = (rightSideUp + upSideDown) / 2.0f;
 255              		.loc 1 101 0
 256 01a6 9DED027A 		flds	s14, [sp, #8]
 257 01aa DDED037A 		flds	s15, [sp, #12]
 258 01ae 37EE277A 		fadds	s14, s14, s15
 259 01b2 F0EE007A 		fconsts	s15, #0
 260 01b6 C7EE277A 		fdivs	s15, s14, s15
 261 01ba 40F20003 		movw	r3, #:lower16:eepromConfig
 262 01be C0F20003 		movt	r3, #:upper16:eepromConfig
 263 01c2 C3ED037A 		fsts	s15, [r3, #12]
 102:../src/calibration/accelCalibration.c **** 
 103:../src/calibration/accelCalibration.c ****     eepromConfig.accelScaleFactor[ZAXIS] = (2.0f * 9.8065f) / (fabs(rightSideUp) + fabs(upSideDown)
 264              		.loc 1 103 0
 265 01c6 DDED027A 		flds	s15, [sp, #8]
 266 01ca F0EEE77A 		fabss	s15, s15
 267 01ce 17EE900A 		fmrs	r0, s15
 268 01d2 FFF7FEFF 		bl	__aeabi_f2d
 269 01d6 0446     		mov	r4, r0
 270 01d8 0D46     		mov	r5, r1
 271 01da DDED037A 		flds	s15, [sp, #12]
 272 01de F0EEE77A 		fabss	s15, s15
 273 01e2 17EE900A 		fmrs	r0, s15
 274 01e6 FFF7FEFF 		bl	__aeabi_f2d
 275 01ea 0246     		mov	r2, r0
 276 01ec 0B46     		mov	r3, r1
 277 01ee 2046     		mov	r0, r4
 278 01f0 2946     		mov	r1, r5
 279 01f2 FFF7FEFF 		bl	__aeabi_dadd
 280 01f6 0246     		mov	r2, r0
 281 01f8 0B46     		mov	r3, r1
 282 01fa 47A1     		adr	r1, .L20
 283 01fc D1E90001 		ldrd	r0, [r1]
 284 0200 FFF7FEFF 		bl	__aeabi_ddiv
 285 0204 0246     		mov	r2, r0
 286 0206 0B46     		mov	r3, r1
 287 0208 1046     		mov	r0, r2
 288 020a 1946     		mov	r1, r3
 289 020c FFF7FEFF 		bl	__aeabi_d2f
 290 0210 0246     		mov	r2, r0	@ float
 291 0212 40F20003 		movw	r3, #:lower16:eepromConfig
 292 0216 C0F20003 		movt	r3, #:upper16:eepromConfig
 293 021a 9A61     		str	r2, [r3, #24]	@ float
 104:../src/calibration/accelCalibration.c **** 
 105:../src/calibration/accelCalibration.c ****     ///////////////////////////////////
 106:../src/calibration/accelCalibration.c **** 
 107:../src/calibration/accelCalibration.c ****     uart1Print("Place accelerometer left edge down\n");
 294              		.loc 1 107 0
 295 021c 40F20000 		movw	r0, #:lower16:.LC6
 296 0220 C0F20000 		movt	r0, #:upper16:.LC6
 297 0224 FFF7FEFF 		bl	uart1Print
 108:../src/calibration/accelCalibration.c ****     uart1Print("  Send a character when ready to proceed\n\n");
 298              		.loc 1 108 0
 299 0228 40F20000 		movw	r0, #:lower16:.LC2
 300 022c C0F20000 		movt	r0, #:upper16:.LC2
 301 0230 FFF7FEFF 		bl	uart1Print
 109:../src/calibration/accelCalibration.c **** 
 110:../src/calibration/accelCalibration.c ****     while (uart1Available() == false);
 302              		.loc 1 110 0
 303 0234 00BF     		nop
 304              	.L8:
 305              		.loc 1 110 0 is_stmt 0 discriminator 1
 306 0236 FFF7FEFF 		bl	uart1Available
 307 023a 0346     		mov	r3, r0
 308 023c 002B     		cmp	r3, #0
 309 023e FAD0     		beq	.L8
 111:../src/calibration/accelCalibration.c ****     uart1Read();
 310              		.loc 1 111 0 is_stmt 1
 311 0240 FFF7FEFF 		bl	uart1Read
 112:../src/calibration/accelCalibration.c **** 
 113:../src/calibration/accelCalibration.c ****     uart1Print("  Gathering Data...\n\n");
 312              		.loc 1 113 0
 313 0244 40F20000 		movw	r0, #:lower16:.LC3
 314 0248 C0F20000 		movt	r0, #:upper16:.LC3
 315 024c FFF7FEFF 		bl	uart1Print
 114:../src/calibration/accelCalibration.c **** 
 115:../src/calibration/accelCalibration.c ****     for (index = 0; index < 5000; index++) {
 316              		.loc 1 115 0
 317 0250 4FF00003 		mov	r3, #0
 318 0254 ADF80630 		strh	r3, [sp, #6]	@ movhi
 319 0258 1BE0     		b	.L9
 320              	.L10:
 116:../src/calibration/accelCalibration.c ****         readAccel();
 321              		.loc 1 116 0 discriminator 2
 322 025a FFF7FEFF 		bl	readAccel
 117:../src/calibration/accelCalibration.c ****         leftWingDown += (float) rawAccel[YAXIS].value;
 323              		.loc 1 117 0 discriminator 2
 324 025e 40F20003 		movw	r3, #:lower16:rawAccel
 325 0262 C0F20003 		movt	r3, #:upper16:rawAccel
 326 0266 5B88     		ldrh	r3, [r3, #2]
 327 0268 1BB2     		sxth	r3, r3
 328 026a 07EE103A 		fmsr	s14, r3	@ int
 329 026e F8EEC77A 		fsitos	s15, s14
 330 0272 9DED057A 		flds	s14, [sp, #20]
 331 0276 77EE277A 		fadds	s15, s14, s15
 332 027a CDED057A 		fsts	s15, [sp, #20]
 118:../src/calibration/accelCalibration.c ****         delayMicroseconds(1000);
 333              		.loc 1 118 0 discriminator 2
 334 027e 4FF47A70 		mov	r0, #1000
 335 0282 FFF7FEFF 		bl	delayMicroseconds
 115:../src/calibration/accelCalibration.c ****     for (index = 0; index < 5000; index++) {
 336              		.loc 1 115 0 discriminator 2
 337 0286 BDF80630 		ldrh	r3, [sp, #6]	@ movhi
 338 028a 03F10103 		add	r3, r3, #1
 339 028e ADF80630 		strh	r3, [sp, #6]	@ movhi
 340              	.L9:
 115:../src/calibration/accelCalibration.c ****     for (index = 0; index < 5000; index++) {
 341              		.loc 1 115 0 is_stmt 0 discriminator 1
 342 0292 BDF90620 		ldrsh	r2, [sp, #6]
 343 0296 41F28733 		movw	r3, #4999
 344 029a 9A42     		cmp	r2, r3
 345 029c DDDD     		ble	.L10
 119:../src/calibration/accelCalibration.c ****     }
 120:../src/calibration/accelCalibration.c **** 
 121:../src/calibration/accelCalibration.c ****     leftWingDown /= 5000.0f;
 346              		.loc 1 121 0 is_stmt 1
 347 029e 9DED057A 		flds	s14, [sp, #20]
 348 02a2 DFED207A 		flds	s15, .L20+12
 349 02a6 C7EE277A 		fdivs	s15, s14, s15
 350 02aa CDED057A 		fsts	s15, [sp, #20]
 122:../src/calibration/accelCalibration.c **** 
 123:../src/calibration/accelCalibration.c ****     ftoa(leftWingDown, numberString);
 351              		.loc 1 123 0
 352 02ae 0598     		ldr	r0, [sp, #20]	@ float
 353 02b0 40F20001 		movw	r1, #:lower16:numberString
 354 02b4 C0F20001 		movt	r1, #:upper16:numberString
 355 02b8 FFF7FEFF 		bl	ftoa
 124:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 356              		.loc 1 124 0
 357 02bc 40F20000 		movw	r0, #:lower16:numberString
 358 02c0 C0F20000 		movt	r0, #:upper16:numberString
 359 02c4 FFF7FEFF 		bl	uart1Print
 125:../src/calibration/accelCalibration.c ****     uart1Print("\n\n");
 360              		.loc 1 125 0
 361 02c8 40F20000 		movw	r0, #:lower16:.LC4
 362 02cc C0F20000 		movt	r0, #:upper16:.LC4
 363 02d0 FFF7FEFF 		bl	uart1Print
 126:../src/calibration/accelCalibration.c **** 
 127:../src/calibration/accelCalibration.c ****     uart1Print("Place accelerometer right edge down\n");
 364              		.loc 1 127 0
 365 02d4 40F20000 		movw	r0, #:lower16:.LC7
 366 02d8 C0F20000 		movt	r0, #:upper16:.LC7
 367 02dc FFF7FEFF 		bl	uart1Print
 128:../src/calibration/accelCalibration.c ****     uart1Print("  Send a character when ready to proceed\n\n");
 368              		.loc 1 128 0
 369 02e0 40F20000 		movw	r0, #:lower16:.LC2
 370 02e4 C0F20000 		movt	r0, #:upper16:.LC2
 371 02e8 FFF7FEFF 		bl	uart1Print
 129:../src/calibration/accelCalibration.c **** 
 130:../src/calibration/accelCalibration.c ****     while (uart1Available() == false);
 372              		.loc 1 130 0
 373 02ec 00BF     		nop
 374              	.L11:
 375              		.loc 1 130 0 is_stmt 0 discriminator 1
 376 02ee FFF7FEFF 		bl	uart1Available
 377 02f2 0346     		mov	r3, r0
 378 02f4 002B     		cmp	r3, #0
 379 02f6 FAD0     		beq	.L11
 131:../src/calibration/accelCalibration.c ****     uart1Read();
 380              		.loc 1 131 0 is_stmt 1
 381 02f8 FFF7FEFF 		bl	uart1Read
 132:../src/calibration/accelCalibration.c **** 
 133:../src/calibration/accelCalibration.c ****     uart1Print("  Gathering Data...\n\n");
 382              		.loc 1 133 0
 383 02fc 40F20000 		movw	r0, #:lower16:.LC3
 384 0300 C0F20000 		movt	r0, #:upper16:.LC3
 385 0304 FFF7FEFF 		bl	uart1Print
 134:../src/calibration/accelCalibration.c **** 
 135:../src/calibration/accelCalibration.c ****     for (index = 0; index < 5000; index++) {
 386              		.loc 1 135 0
 387 0308 4FF00003 		mov	r3, #0
 388 030c ADF80630 		strh	r3, [sp, #6]	@ movhi
 389 0310 26E0     		b	.L12
 390              	.L21:
 391 0312 00BFAFF3 		.align	3
 391      0080
 392              	.L20:
 393 0318 000000A0 		.word	-1610612736
 394 031c ED9C3340 		.word	1077124333
 395 0320 00000000 		.word	0
 396 0324 00409C45 		.word	1167867904
 397              	.L13:
 136:../src/calibration/accelCalibration.c ****         readAccel();
 398              		.loc 1 136 0 discriminator 2
 399 0328 FFF7FEFF 		bl	readAccel
 137:../src/calibration/accelCalibration.c ****         rightWingDown += (float) rawAccel[YAXIS].value;
 400              		.loc 1 137 0 discriminator 2
 401 032c 40F20003 		movw	r3, #:lower16:rawAccel
 402 0330 C0F20003 		movt	r3, #:upper16:rawAccel
 403 0334 5B88     		ldrh	r3, [r3, #2]
 404 0336 1BB2     		sxth	r3, r3
 405 0338 07EE103A 		fmsr	s14, r3	@ int
 406 033c F8EEC77A 		fsitos	s15, s14
 407 0340 9DED047A 		flds	s14, [sp, #16]
 408 0344 77EE277A 		fadds	s15, s14, s15
 409 0348 CDED047A 		fsts	s15, [sp, #16]
 138:../src/calibration/accelCalibration.c ****         delayMicroseconds(1000);
 410              		.loc 1 138 0 discriminator 2
 411 034c 4FF47A70 		mov	r0, #1000
 412 0350 FFF7FEFF 		bl	delayMicroseconds
 135:../src/calibration/accelCalibration.c ****     for (index = 0; index < 5000; index++) {
 413              		.loc 1 135 0 discriminator 2
 414 0354 BDF80630 		ldrh	r3, [sp, #6]	@ movhi
 415 0358 03F10103 		add	r3, r3, #1
 416 035c ADF80630 		strh	r3, [sp, #6]	@ movhi
 417              	.L12:
 135:../src/calibration/accelCalibration.c ****     for (index = 0; index < 5000; index++) {
 418              		.loc 1 135 0 is_stmt 0 discriminator 1
 419 0360 BDF90620 		ldrsh	r2, [sp, #6]
 420 0364 41F28733 		movw	r3, #4999
 421 0368 9A42     		cmp	r2, r3
 422 036a DDDD     		ble	.L13
 139:../src/calibration/accelCalibration.c ****     }
 140:../src/calibration/accelCalibration.c **** 
 141:../src/calibration/accelCalibration.c ****     rightWingDown /= 5000.0f;
 423              		.loc 1 141 0 is_stmt 1
 424 036c 9DED047A 		flds	s14, [sp, #16]
 425 0370 5FED147A 		flds	s15, .L20+12
 426 0374 C7EE277A 		fdivs	s15, s14, s15
 427 0378 CDED047A 		fsts	s15, [sp, #16]
 142:../src/calibration/accelCalibration.c **** 
 143:../src/calibration/accelCalibration.c ****     ftoa(rightWingDown, numberString);
 428              		.loc 1 143 0
 429 037c 0498     		ldr	r0, [sp, #16]	@ float
 430 037e 40F20001 		movw	r1, #:lower16:numberString
 431 0382 C0F20001 		movt	r1, #:upper16:numberString
 432 0386 FFF7FEFF 		bl	ftoa
 144:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 433              		.loc 1 144 0
 434 038a 40F20000 		movw	r0, #:lower16:numberString
 435 038e C0F20000 		movt	r0, #:upper16:numberString
 436 0392 FFF7FEFF 		bl	uart1Print
 145:../src/calibration/accelCalibration.c ****     uart1Print("\n\n");
 437              		.loc 1 145 0
 438 0396 40F20000 		movw	r0, #:lower16:.LC4
 439 039a C0F20000 		movt	r0, #:upper16:.LC4
 440 039e FFF7FEFF 		bl	uart1Print
 146:../src/calibration/accelCalibration.c **** 
 147:../src/calibration/accelCalibration.c ****     eepromConfig.accelBias[YAXIS] = (leftWingDown + rightWingDown) / 2.0f;
 441              		.loc 1 147 0
 442 03a2 9DED057A 		flds	s14, [sp, #20]
 443 03a6 DDED047A 		flds	s15, [sp, #16]
 444 03aa 37EE277A 		fadds	s14, s14, s15
 445 03ae F0EE007A 		fconsts	s15, #0
 446 03b2 C7EE277A 		fdivs	s15, s14, s15
 447 03b6 40F20003 		movw	r3, #:lower16:eepromConfig
 448 03ba C0F20003 		movt	r3, #:upper16:eepromConfig
 449 03be C3ED027A 		fsts	s15, [r3, #8]
 148:../src/calibration/accelCalibration.c **** 
 149:../src/calibration/accelCalibration.c ****     eepromConfig.accelScaleFactor[YAXIS] = (2.0f * 9.8065f) / (fabs(leftWingDown) + fabs(rightWingD
 450              		.loc 1 149 0
 451 03c2 DDED057A 		flds	s15, [sp, #20]
 452 03c6 F0EEE77A 		fabss	s15, s15
 453 03ca 17EE900A 		fmrs	r0, s15
 454 03ce FFF7FEFF 		bl	__aeabi_f2d
 455 03d2 0446     		mov	r4, r0
 456 03d4 0D46     		mov	r5, r1
 457 03d6 DDED047A 		flds	s15, [sp, #16]
 458 03da F0EEE77A 		fabss	s15, s15
 459 03de 17EE900A 		fmrs	r0, s15
 460 03e2 FFF7FEFF 		bl	__aeabi_f2d
 461 03e6 0246     		mov	r2, r0
 462 03e8 0B46     		mov	r3, r1
 463 03ea 2046     		mov	r0, r4
 464 03ec 2946     		mov	r1, r5
 465 03ee FFF7FEFF 		bl	__aeabi_dadd
 466 03f2 0246     		mov	r2, r0
 467 03f4 0B46     		mov	r3, r1
 468 03f6 46A1     		adr	r1, .L22
 469 03f8 D1E90001 		ldrd	r0, [r1]
 470 03fc FFF7FEFF 		bl	__aeabi_ddiv
 471 0400 0246     		mov	r2, r0
 472 0402 0B46     		mov	r3, r1
 473 0404 1046     		mov	r0, r2
 474 0406 1946     		mov	r1, r3
 475 0408 FFF7FEFF 		bl	__aeabi_d2f
 476 040c 0246     		mov	r2, r0	@ float
 477 040e 40F20003 		movw	r3, #:lower16:eepromConfig
 478 0412 C0F20003 		movt	r3, #:upper16:eepromConfig
 479 0416 5A61     		str	r2, [r3, #20]	@ float
 150:../src/calibration/accelCalibration.c **** 
 151:../src/calibration/accelCalibration.c ****     ///////////////////////////////////
 152:../src/calibration/accelCalibration.c **** 
 153:../src/calibration/accelCalibration.c ****     uart1Print("Place accelerometer rear edge down\n");
 480              		.loc 1 153 0
 481 0418 40F20000 		movw	r0, #:lower16:.LC8
 482 041c C0F20000 		movt	r0, #:upper16:.LC8
 483 0420 FFF7FEFF 		bl	uart1Print
 154:../src/calibration/accelCalibration.c ****     uart1Print("  Send a character when ready to proceed\n\n");
 484              		.loc 1 154 0
 485 0424 40F20000 		movw	r0, #:lower16:.LC2
 486 0428 C0F20000 		movt	r0, #:upper16:.LC2
 487 042c FFF7FEFF 		bl	uart1Print
 155:../src/calibration/accelCalibration.c **** 
 156:../src/calibration/accelCalibration.c ****     while (uart1Available() == false);
 488              		.loc 1 156 0
 489 0430 00BF     		nop
 490              	.L14:
 491              		.loc 1 156 0 is_stmt 0 discriminator 1
 492 0432 FFF7FEFF 		bl	uart1Available
 493 0436 0346     		mov	r3, r0
 494 0438 002B     		cmp	r3, #0
 495 043a FAD0     		beq	.L14
 157:../src/calibration/accelCalibration.c ****     uart1Read();
 496              		.loc 1 157 0 is_stmt 1
 497 043c FFF7FEFF 		bl	uart1Read
 158:../src/calibration/accelCalibration.c **** 
 159:../src/calibration/accelCalibration.c ****     uart1Print("  Gathering Data...\n\n");
 498              		.loc 1 159 0
 499 0440 40F20000 		movw	r0, #:lower16:.LC3
 500 0444 C0F20000 		movt	r0, #:upper16:.LC3
 501 0448 FFF7FEFF 		bl	uart1Print
 160:../src/calibration/accelCalibration.c **** 
 161:../src/calibration/accelCalibration.c ****     for (index = 0; index < 5000; index++) {
 502              		.loc 1 161 0
 503 044c 4FF00003 		mov	r3, #0
 504 0450 ADF80630 		strh	r3, [sp, #6]	@ movhi
 505 0454 1BE0     		b	.L15
 506              	.L16:
 162:../src/calibration/accelCalibration.c ****         readAccel();
 507              		.loc 1 162 0 discriminator 2
 508 0456 FFF7FEFF 		bl	readAccel
 163:../src/calibration/accelCalibration.c ****         noseUp += (float) rawAccel[XAXIS].value;
 509              		.loc 1 163 0 discriminator 2
 510 045a 40F20003 		movw	r3, #:lower16:rawAccel
 511 045e C0F20003 		movt	r3, #:upper16:rawAccel
 512 0462 1B88     		ldrh	r3, [r3, #0]
 513 0464 1BB2     		sxth	r3, r3
 514 0466 07EE103A 		fmsr	s14, r3	@ int
 515 046a F8EEC77A 		fsitos	s15, s14
 516 046e 9DED077A 		flds	s14, [sp, #28]
 517 0472 77EE277A 		fadds	s15, s14, s15
 518 0476 CDED077A 		fsts	s15, [sp, #28]
 164:../src/calibration/accelCalibration.c ****         delayMicroseconds(1000);
 519              		.loc 1 164 0 discriminator 2
 520 047a 4FF47A70 		mov	r0, #1000
 521 047e FFF7FEFF 		bl	delayMicroseconds
 161:../src/calibration/accelCalibration.c ****     for (index = 0; index < 5000; index++) {
 522              		.loc 1 161 0 discriminator 2
 523 0482 BDF80630 		ldrh	r3, [sp, #6]	@ movhi
 524 0486 03F10103 		add	r3, r3, #1
 525 048a ADF80630 		strh	r3, [sp, #6]	@ movhi
 526              	.L15:
 161:../src/calibration/accelCalibration.c ****     for (index = 0; index < 5000; index++) {
 527              		.loc 1 161 0 is_stmt 0 discriminator 1
 528 048e BDF90620 		ldrsh	r2, [sp, #6]
 529 0492 41F28733 		movw	r3, #4999
 530 0496 9A42     		cmp	r2, r3
 531 0498 DDDD     		ble	.L16
 165:../src/calibration/accelCalibration.c ****     }
 166:../src/calibration/accelCalibration.c **** 
 167:../src/calibration/accelCalibration.c ****     noseUp /= 5000.0f;
 532              		.loc 1 167 0 is_stmt 1
 533 049a 9DED077A 		flds	s14, [sp, #28]
 534 049e DFED1E7A 		flds	s15, .L22+8
 535 04a2 C7EE277A 		fdivs	s15, s14, s15
 536 04a6 CDED077A 		fsts	s15, [sp, #28]
 168:../src/calibration/accelCalibration.c **** 
 169:../src/calibration/accelCalibration.c ****     ftoa(noseUp, numberString);
 537              		.loc 1 169 0
 538 04aa 0798     		ldr	r0, [sp, #28]	@ float
 539 04ac 40F20001 		movw	r1, #:lower16:numberString
 540 04b0 C0F20001 		movt	r1, #:upper16:numberString
 541 04b4 FFF7FEFF 		bl	ftoa
 170:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 542              		.loc 1 170 0
 543 04b8 40F20000 		movw	r0, #:lower16:numberString
 544 04bc C0F20000 		movt	r0, #:upper16:numberString
 545 04c0 FFF7FEFF 		bl	uart1Print
 171:../src/calibration/accelCalibration.c ****     uart1Print("\n\n");
 546              		.loc 1 171 0
 547 04c4 40F20000 		movw	r0, #:lower16:.LC4
 548 04c8 C0F20000 		movt	r0, #:upper16:.LC4
 549 04cc FFF7FEFF 		bl	uart1Print
 172:../src/calibration/accelCalibration.c **** 
 173:../src/calibration/accelCalibration.c ****     uart1Print("Place accelerometer front edge down\n");
 550              		.loc 1 173 0
 551 04d0 40F20000 		movw	r0, #:lower16:.LC9
 552 04d4 C0F20000 		movt	r0, #:upper16:.LC9
 553 04d8 FFF7FEFF 		bl	uart1Print
 174:../src/calibration/accelCalibration.c ****     uart1Print("  Send a character when ready to proceed\n\n");
 554              		.loc 1 174 0
 555 04dc 40F20000 		movw	r0, #:lower16:.LC2
 556 04e0 C0F20000 		movt	r0, #:upper16:.LC2
 557 04e4 FFF7FEFF 		bl	uart1Print
 175:../src/calibration/accelCalibration.c **** 
 176:../src/calibration/accelCalibration.c ****     while (uart1Available() == false);
 558              		.loc 1 176 0
 559 04e8 00BF     		nop
 560              	.L17:
 561              		.loc 1 176 0 is_stmt 0 discriminator 1
 562 04ea FFF7FEFF 		bl	uart1Available
 563 04ee 0346     		mov	r3, r0
 564 04f0 002B     		cmp	r3, #0
 565 04f2 FAD0     		beq	.L17
 177:../src/calibration/accelCalibration.c ****     uart1Read();
 566              		.loc 1 177 0 is_stmt 1
 567 04f4 FFF7FEFF 		bl	uart1Read
 178:../src/calibration/accelCalibration.c **** 
 179:../src/calibration/accelCalibration.c ****     uart1Print("  Gathering Data...\n\n");
 568              		.loc 1 179 0
 569 04f8 40F20000 		movw	r0, #:lower16:.LC3
 570 04fc C0F20000 		movt	r0, #:upper16:.LC3
 571 0500 FFF7FEFF 		bl	uart1Print
 180:../src/calibration/accelCalibration.c **** 
 181:../src/calibration/accelCalibration.c ****     for (index = 0; index < 5000; index++) {
 572              		.loc 1 181 0
 573 0504 4FF00003 		mov	r3, #0
 574 0508 ADF80630 		strh	r3, [sp, #6]	@ movhi
 575 050c 22E0     		b	.L18
 576              	.L23:
 577 050e 00BF     		.align	3
 578              	.L22:
 579 0510 000000A0 		.word	-1610612736
 580 0514 ED9C3340 		.word	1077124333
 581 0518 00409C45 		.word	1167867904
 582              	.L19:
 182:../src/calibration/accelCalibration.c ****         readAccel();
 583              		.loc 1 182 0 discriminator 2
 584 051c FFF7FEFF 		bl	readAccel
 183:../src/calibration/accelCalibration.c ****         noseDown += (float) rawAccel[XAXIS].value;
 585              		.loc 1 183 0 discriminator 2
 586 0520 40F20003 		movw	r3, #:lower16:rawAccel
 587 0524 C0F20003 		movt	r3, #:upper16:rawAccel
 588 0528 1B88     		ldrh	r3, [r3, #0]
 589 052a 1BB2     		sxth	r3, r3
 590 052c 07EE103A 		fmsr	s14, r3	@ int
 591 0530 F8EEC77A 		fsitos	s15, s14
 592 0534 9DED067A 		flds	s14, [sp, #24]
 593 0538 77EE277A 		fadds	s15, s14, s15
 594 053c CDED067A 		fsts	s15, [sp, #24]
 184:../src/calibration/accelCalibration.c ****         delayMicroseconds(1000);
 595              		.loc 1 184 0 discriminator 2
 596 0540 4FF47A70 		mov	r0, #1000
 597 0544 FFF7FEFF 		bl	delayMicroseconds
 181:../src/calibration/accelCalibration.c ****     for (index = 0; index < 5000; index++) {
 598              		.loc 1 181 0 discriminator 2
 599 0548 BDF80630 		ldrh	r3, [sp, #6]	@ movhi
 600 054c 03F10103 		add	r3, r3, #1
 601 0550 ADF80630 		strh	r3, [sp, #6]	@ movhi
 602              	.L18:
 181:../src/calibration/accelCalibration.c ****     for (index = 0; index < 5000; index++) {
 603              		.loc 1 181 0 is_stmt 0 discriminator 1
 604 0554 BDF90620 		ldrsh	r2, [sp, #6]
 605 0558 41F28733 		movw	r3, #4999
 606 055c 9A42     		cmp	r2, r3
 607 055e DDDD     		ble	.L19
 185:../src/calibration/accelCalibration.c ****     }
 186:../src/calibration/accelCalibration.c **** 
 187:../src/calibration/accelCalibration.c ****     noseDown /= 5000.0f;
 608              		.loc 1 187 0 is_stmt 1
 609 0560 9DED067A 		flds	s14, [sp, #24]
 610 0564 5FED147A 		flds	s15, .L22+8
 611 0568 C7EE277A 		fdivs	s15, s14, s15
 612 056c CDED067A 		fsts	s15, [sp, #24]
 188:../src/calibration/accelCalibration.c **** 
 189:../src/calibration/accelCalibration.c ****     ftoa(noseDown, numberString);
 613              		.loc 1 189 0
 614 0570 0698     		ldr	r0, [sp, #24]	@ float
 615 0572 40F20001 		movw	r1, #:lower16:numberString
 616 0576 C0F20001 		movt	r1, #:upper16:numberString
 617 057a FFF7FEFF 		bl	ftoa
 190:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 618              		.loc 1 190 0
 619 057e 40F20000 		movw	r0, #:lower16:numberString
 620 0582 C0F20000 		movt	r0, #:upper16:numberString
 621 0586 FFF7FEFF 		bl	uart1Print
 191:../src/calibration/accelCalibration.c ****     uart1Print("\n\n");
 622              		.loc 1 191 0
 623 058a 40F20000 		movw	r0, #:lower16:.LC4
 624 058e C0F20000 		movt	r0, #:upper16:.LC4
 625 0592 FFF7FEFF 		bl	uart1Print
 192:../src/calibration/accelCalibration.c **** 
 193:../src/calibration/accelCalibration.c ****     eepromConfig.accelBias[XAXIS] = (noseUp + noseDown) / 2.0f;
 626              		.loc 1 193 0
 627 0596 9DED077A 		flds	s14, [sp, #28]
 628 059a DDED067A 		flds	s15, [sp, #24]
 629 059e 37EE277A 		fadds	s14, s14, s15
 630 05a2 F0EE007A 		fconsts	s15, #0
 631 05a6 C7EE277A 		fdivs	s15, s14, s15
 632 05aa 40F20003 		movw	r3, #:lower16:eepromConfig
 633 05ae C0F20003 		movt	r3, #:upper16:eepromConfig
 634 05b2 C3ED017A 		fsts	s15, [r3, #4]
 194:../src/calibration/accelCalibration.c **** 
 195:../src/calibration/accelCalibration.c ****     eepromConfig.accelScaleFactor[XAXIS] = (2.0f * 9.8065f) / (fabs(noseUp) + fabs(noseDown));
 635              		.loc 1 195 0
 636 05b6 DDED077A 		flds	s15, [sp, #28]
 637 05ba F0EEE77A 		fabss	s15, s15
 638 05be 17EE900A 		fmrs	r0, s15
 639 05c2 FFF7FEFF 		bl	__aeabi_f2d
 640 05c6 0446     		mov	r4, r0
 641 05c8 0D46     		mov	r5, r1
 642 05ca DDED067A 		flds	s15, [sp, #24]
 643 05ce F0EEE77A 		fabss	s15, s15
 644 05d2 17EE900A 		fmrs	r0, s15
 645 05d6 FFF7FEFF 		bl	__aeabi_f2d
 646 05da 0246     		mov	r2, r0
 647 05dc 0B46     		mov	r3, r1
 648 05de 2046     		mov	r0, r4
 649 05e0 2946     		mov	r1, r5
 650 05e2 FFF7FEFF 		bl	__aeabi_dadd
 651 05e6 0246     		mov	r2, r0
 652 05e8 0B46     		mov	r3, r1
 653 05ea 0FF20C41 		adr	r1, .L24
 654 05ee D1E90001 		ldrd	r0, [r1]
 655 05f2 FFF7FEFF 		bl	__aeabi_ddiv
 656 05f6 0246     		mov	r2, r0
 657 05f8 0B46     		mov	r3, r1
 658 05fa 1046     		mov	r0, r2
 659 05fc 1946     		mov	r1, r3
 660 05fe FFF7FEFF 		bl	__aeabi_d2f
 661 0602 0246     		mov	r2, r0	@ float
 662 0604 40F20003 		movw	r3, #:lower16:eepromConfig
 663 0608 C0F20003 		movt	r3, #:upper16:eepromConfig
 664 060c 1A61     		str	r2, [r3, #16]	@ float
 196:../src/calibration/accelCalibration.c **** 
 197:../src/calibration/accelCalibration.c ****     ///////////////////////////////////
 198:../src/calibration/accelCalibration.c **** 
 199:../src/calibration/accelCalibration.c ****     ftoa(noseUp, numberString);
 665              		.loc 1 199 0
 666 060e 0798     		ldr	r0, [sp, #28]	@ float
 667 0610 40F20001 		movw	r1, #:lower16:numberString
 668 0614 C0F20001 		movt	r1, #:upper16:numberString
 669 0618 FFF7FEFF 		bl	ftoa
 200:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 670              		.loc 1 200 0
 671 061c 40F20000 		movw	r0, #:lower16:numberString
 672 0620 C0F20000 		movt	r0, #:upper16:numberString
 673 0624 FFF7FEFF 		bl	uart1Print
 201:../src/calibration/accelCalibration.c ****     uart1Print(", ");
 674              		.loc 1 201 0
 675 0628 40F20000 		movw	r0, #:lower16:.LC10
 676 062c C0F20000 		movt	r0, #:upper16:.LC10
 677 0630 FFF7FEFF 		bl	uart1Print
 202:../src/calibration/accelCalibration.c **** 
 203:../src/calibration/accelCalibration.c ****     ftoa(noseDown, numberString);
 678              		.loc 1 203 0
 679 0634 0698     		ldr	r0, [sp, #24]	@ float
 680 0636 40F20001 		movw	r1, #:lower16:numberString
 681 063a C0F20001 		movt	r1, #:upper16:numberString
 682 063e FFF7FEFF 		bl	ftoa
 204:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 683              		.loc 1 204 0
 684 0642 40F20000 		movw	r0, #:lower16:numberString
 685 0646 C0F20000 		movt	r0, #:upper16:numberString
 686 064a FFF7FEFF 		bl	uart1Print
 205:../src/calibration/accelCalibration.c ****     uart1Print(", ");
 687              		.loc 1 205 0
 688 064e 40F20000 		movw	r0, #:lower16:.LC10
 689 0652 C0F20000 		movt	r0, #:upper16:.LC10
 690 0656 FFF7FEFF 		bl	uart1Print
 206:../src/calibration/accelCalibration.c ****     ftoa(eepromConfig.accelScaleFactor[XAXIS], numberString);
 691              		.loc 1 206 0
 692 065a 40F20003 		movw	r3, #:lower16:eepromConfig
 693 065e C0F20003 		movt	r3, #:upper16:eepromConfig
 694 0662 1B69     		ldr	r3, [r3, #16]	@ float
 695 0664 1846     		mov	r0, r3	@ float
 696 0666 40F20001 		movw	r1, #:lower16:numberString
 697 066a C0F20001 		movt	r1, #:upper16:numberString
 698 066e FFF7FEFF 		bl	ftoa
 207:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 699              		.loc 1 207 0
 700 0672 40F20000 		movw	r0, #:lower16:numberString
 701 0676 C0F20000 		movt	r0, #:upper16:numberString
 702 067a FFF7FEFF 		bl	uart1Print
 208:../src/calibration/accelCalibration.c ****     uart1Print(", ");
 703              		.loc 1 208 0
 704 067e 40F20000 		movw	r0, #:lower16:.LC10
 705 0682 C0F20000 		movt	r0, #:upper16:.LC10
 706 0686 FFF7FEFF 		bl	uart1Print
 209:../src/calibration/accelCalibration.c ****     ftoa(eepromConfig.accelBias[XAXIS], numberString);
 707              		.loc 1 209 0
 708 068a 40F20003 		movw	r3, #:lower16:eepromConfig
 709 068e C0F20003 		movt	r3, #:upper16:eepromConfig
 710 0692 5B68     		ldr	r3, [r3, #4]	@ float
 711 0694 1846     		mov	r0, r3	@ float
 712 0696 40F20001 		movw	r1, #:lower16:numberString
 713 069a C0F20001 		movt	r1, #:upper16:numberString
 714 069e FFF7FEFF 		bl	ftoa
 210:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 715              		.loc 1 210 0
 716 06a2 40F20000 		movw	r0, #:lower16:numberString
 717 06a6 C0F20000 		movt	r0, #:upper16:numberString
 718 06aa FFF7FEFF 		bl	uart1Print
 211:../src/calibration/accelCalibration.c ****     uart1Print(", ");
 719              		.loc 1 211 0
 720 06ae 40F20000 		movw	r0, #:lower16:.LC10
 721 06b2 C0F20000 		movt	r0, #:upper16:.LC10
 722 06b6 FFF7FEFF 		bl	uart1Print
 212:../src/calibration/accelCalibration.c ****     ftoa((noseUp - eepromConfig.accelBias[XAXIS]) * eepromConfig.accelScaleFactor[XAXIS], numberStr
 723              		.loc 1 212 0
 724 06ba 40F20003 		movw	r3, #:lower16:eepromConfig
 725 06be C0F20003 		movt	r3, #:upper16:eepromConfig
 726 06c2 D3ED017A 		flds	s15, [r3, #4]
 727 06c6 9DED077A 		flds	s14, [sp, #28]
 728 06ca 37EE677A 		fsubs	s14, s14, s15
 729 06ce 40F20003 		movw	r3, #:lower16:eepromConfig
 730 06d2 C0F20003 		movt	r3, #:upper16:eepromConfig
 731 06d6 D3ED047A 		flds	s15, [r3, #16]
 732 06da 67EE277A 		fmuls	s15, s14, s15
 733 06de 17EE900A 		fmrs	r0, s15
 734 06e2 40F20001 		movw	r1, #:lower16:numberString
 735 06e6 C0F20001 		movt	r1, #:upper16:numberString
 736 06ea FFF7FEFF 		bl	ftoa
 213:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 737              		.loc 1 213 0
 738 06ee 40F20000 		movw	r0, #:lower16:numberString
 739 06f2 C0F20000 		movt	r0, #:upper16:numberString
 740 06f6 FFF7FEFF 		bl	uart1Print
 214:../src/calibration/accelCalibration.c ****     uart1Print(", ");
 741              		.loc 1 214 0
 742 06fa 40F20000 		movw	r0, #:lower16:.LC10
 743 06fe C0F20000 		movt	r0, #:upper16:.LC10
 744 0702 FFF7FEFF 		bl	uart1Print
 215:../src/calibration/accelCalibration.c ****     ftoa((noseDown - eepromConfig.accelBias[XAXIS]) * eepromConfig.accelScaleFactor[XAXIS], numberS
 745              		.loc 1 215 0
 746 0706 40F20003 		movw	r3, #:lower16:eepromConfig
 747 070a C0F20003 		movt	r3, #:upper16:eepromConfig
 748 070e D3ED017A 		flds	s15, [r3, #4]
 749 0712 9DED067A 		flds	s14, [sp, #24]
 750 0716 37EE677A 		fsubs	s14, s14, s15
 751 071a 40F20003 		movw	r3, #:lower16:eepromConfig
 752 071e C0F20003 		movt	r3, #:upper16:eepromConfig
 753 0722 D3ED047A 		flds	s15, [r3, #16]
 754 0726 67EE277A 		fmuls	s15, s14, s15
 755 072a 17EE900A 		fmrs	r0, s15
 756 072e 40F20001 		movw	r1, #:lower16:numberString
 757 0732 C0F20001 		movt	r1, #:upper16:numberString
 758 0736 FFF7FEFF 		bl	ftoa
 216:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 759              		.loc 1 216 0
 760 073a 40F20000 		movw	r0, #:lower16:numberString
 761 073e C0F20000 		movt	r0, #:upper16:numberString
 762 0742 FFF7FEFF 		bl	uart1Print
 217:../src/calibration/accelCalibration.c ****     uart1Print("\n\n");
 763              		.loc 1 217 0
 764 0746 40F20000 		movw	r0, #:lower16:.LC4
 765 074a C0F20000 		movt	r0, #:upper16:.LC4
 766 074e FFF7FEFF 		bl	uart1Print
 218:../src/calibration/accelCalibration.c **** 
 219:../src/calibration/accelCalibration.c ****     ftoa(leftWingDown, numberString);
 767              		.loc 1 219 0
 768 0752 0598     		ldr	r0, [sp, #20]	@ float
 769 0754 40F20001 		movw	r1, #:lower16:numberString
 770 0758 C0F20001 		movt	r1, #:upper16:numberString
 771 075c FFF7FEFF 		bl	ftoa
 220:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 772              		.loc 1 220 0
 773 0760 40F20000 		movw	r0, #:lower16:numberString
 774 0764 C0F20000 		movt	r0, #:upper16:numberString
 775 0768 FFF7FEFF 		bl	uart1Print
 221:../src/calibration/accelCalibration.c ****     uart1Print(", ");
 776              		.loc 1 221 0
 777 076c 40F20000 		movw	r0, #:lower16:.LC10
 778 0770 C0F20000 		movt	r0, #:upper16:.LC10
 779 0774 FFF7FEFF 		bl	uart1Print
 222:../src/calibration/accelCalibration.c ****     ftoa(rightWingDown, numberString);
 780              		.loc 1 222 0
 781 0778 0498     		ldr	r0, [sp, #16]	@ float
 782 077a 40F20001 		movw	r1, #:lower16:numberString
 783 077e C0F20001 		movt	r1, #:upper16:numberString
 784 0782 FFF7FEFF 		bl	ftoa
 223:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 785              		.loc 1 223 0
 786 0786 40F20000 		movw	r0, #:lower16:numberString
 787 078a C0F20000 		movt	r0, #:upper16:numberString
 788 078e FFF7FEFF 		bl	uart1Print
 224:../src/calibration/accelCalibration.c ****     uart1Print(", ");
 789              		.loc 1 224 0
 790 0792 40F20000 		movw	r0, #:lower16:.LC10
 791 0796 C0F20000 		movt	r0, #:upper16:.LC10
 792 079a FFF7FEFF 		bl	uart1Print
 225:../src/calibration/accelCalibration.c ****     ftoa(eepromConfig.accelScaleFactor[YAXIS], numberString);
 793              		.loc 1 225 0
 794 079e 40F20003 		movw	r3, #:lower16:eepromConfig
 795 07a2 C0F20003 		movt	r3, #:upper16:eepromConfig
 796 07a6 5B69     		ldr	r3, [r3, #20]	@ float
 797 07a8 1846     		mov	r0, r3	@ float
 798 07aa 40F20001 		movw	r1, #:lower16:numberString
 799 07ae C0F20001 		movt	r1, #:upper16:numberString
 800 07b2 FFF7FEFF 		bl	ftoa
 226:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 801              		.loc 1 226 0
 802 07b6 40F20000 		movw	r0, #:lower16:numberString
 803 07ba C0F20000 		movt	r0, #:upper16:numberString
 804 07be FFF7FEFF 		bl	uart1Print
 227:../src/calibration/accelCalibration.c ****     uart1Print(", ");
 805              		.loc 1 227 0
 806 07c2 40F20000 		movw	r0, #:lower16:.LC10
 807 07c6 C0F20000 		movt	r0, #:upper16:.LC10
 808 07ca FFF7FEFF 		bl	uart1Print
 228:../src/calibration/accelCalibration.c ****     ftoa(eepromConfig.accelBias[YAXIS], numberString);
 809              		.loc 1 228 0
 810 07ce 40F20003 		movw	r3, #:lower16:eepromConfig
 811 07d2 C0F20003 		movt	r3, #:upper16:eepromConfig
 812 07d6 9B68     		ldr	r3, [r3, #8]	@ float
 813 07d8 1846     		mov	r0, r3	@ float
 814 07da 40F20001 		movw	r1, #:lower16:numberString
 815 07de C0F20001 		movt	r1, #:upper16:numberString
 816 07e2 FFF7FEFF 		bl	ftoa
 229:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 817              		.loc 1 229 0
 818 07e6 40F20000 		movw	r0, #:lower16:numberString
 819 07ea C0F20000 		movt	r0, #:upper16:numberString
 820 07ee FFF7FEFF 		bl	uart1Print
 230:../src/calibration/accelCalibration.c ****     uart1Print(", ");
 821              		.loc 1 230 0
 822 07f2 40F20000 		movw	r0, #:lower16:.LC10
 823 07f6 C0F20000 		movt	r0, #:upper16:.LC10
 824 07fa FFF7FEFF 		bl	uart1Print
 231:../src/calibration/accelCalibration.c ****     ftoa((leftWingDown - eepromConfig.accelBias[YAXIS]) * eepromConfig.accelScaleFactor[YAXIS], num
 825              		.loc 1 231 0
 826 07fe 40F20003 		movw	r3, #:lower16:eepromConfig
 827 0802 C0F20003 		movt	r3, #:upper16:eepromConfig
 828 0806 D3ED027A 		flds	s15, [r3, #8]
 829 080a 9DED057A 		flds	s14, [sp, #20]
 830 080e 37EE677A 		fsubs	s14, s14, s15
 831 0812 40F20003 		movw	r3, #:lower16:eepromConfig
 832 0816 C0F20003 		movt	r3, #:upper16:eepromConfig
 833 081a D3ED057A 		flds	s15, [r3, #20]
 834 081e 67EE277A 		fmuls	s15, s14, s15
 835 0822 17EE900A 		fmrs	r0, s15
 836 0826 40F20001 		movw	r1, #:lower16:numberString
 837 082a C0F20001 		movt	r1, #:upper16:numberString
 838 082e FFF7FEFF 		bl	ftoa
 232:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 839              		.loc 1 232 0
 840 0832 40F20000 		movw	r0, #:lower16:numberString
 841 0836 C0F20000 		movt	r0, #:upper16:numberString
 842 083a FFF7FEFF 		bl	uart1Print
 233:../src/calibration/accelCalibration.c ****     uart1Print(", ");
 843              		.loc 1 233 0
 844 083e 40F20000 		movw	r0, #:lower16:.LC10
 845 0842 C0F20000 		movt	r0, #:upper16:.LC10
 846 0846 FFF7FEFF 		bl	uart1Print
 234:../src/calibration/accelCalibration.c ****     ftoa((rightWingDown - eepromConfig.accelBias[YAXIS]) * eepromConfig.accelScaleFactor[YAXIS], nu
 847              		.loc 1 234 0
 848 084a 40F20003 		movw	r3, #:lower16:eepromConfig
 849 084e C0F20003 		movt	r3, #:upper16:eepromConfig
 850 0852 D3ED027A 		flds	s15, [r3, #8]
 851 0856 9DED047A 		flds	s14, [sp, #16]
 852 085a 37EE677A 		fsubs	s14, s14, s15
 853 085e 40F20003 		movw	r3, #:lower16:eepromConfig
 854 0862 C0F20003 		movt	r3, #:upper16:eepromConfig
 855 0866 D3ED057A 		flds	s15, [r3, #20]
 856 086a 67EE277A 		fmuls	s15, s14, s15
 857 086e 17EE900A 		fmrs	r0, s15
 858 0872 40F20001 		movw	r1, #:lower16:numberString
 859 0876 C0F20001 		movt	r1, #:upper16:numberString
 860 087a FFF7FEFF 		bl	ftoa
 235:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 861              		.loc 1 235 0
 862 087e 40F20000 		movw	r0, #:lower16:numberString
 863 0882 C0F20000 		movt	r0, #:upper16:numberString
 864 0886 FFF7FEFF 		bl	uart1Print
 236:../src/calibration/accelCalibration.c ****     uart1Print("\n\n");
 865              		.loc 1 236 0
 866 088a 40F20000 		movw	r0, #:lower16:.LC4
 867 088e C0F20000 		movt	r0, #:upper16:.LC4
 868 0892 FFF7FEFF 		bl	uart1Print
 237:../src/calibration/accelCalibration.c **** 
 238:../src/calibration/accelCalibration.c ****     ftoa(upSideDown, numberString);
 869              		.loc 1 238 0
 870 0896 0398     		ldr	r0, [sp, #12]	@ float
 871 0898 40F20001 		movw	r1, #:lower16:numberString
 872 089c C0F20001 		movt	r1, #:upper16:numberString
 873 08a0 FFF7FEFF 		bl	ftoa
 239:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 874              		.loc 1 239 0
 875 08a4 40F20000 		movw	r0, #:lower16:numberString
 876 08a8 C0F20000 		movt	r0, #:upper16:numberString
 877 08ac FFF7FEFF 		bl	uart1Print
 240:../src/calibration/accelCalibration.c ****     uart1Print(", ");
 878              		.loc 1 240 0
 879 08b0 40F20000 		movw	r0, #:lower16:.LC10
 880 08b4 C0F20000 		movt	r0, #:upper16:.LC10
 881 08b8 FFF7FEFF 		bl	uart1Print
 241:../src/calibration/accelCalibration.c ****     ftoa(rightSideUp, numberString);
 882              		.loc 1 241 0
 883 08bc 0298     		ldr	r0, [sp, #8]	@ float
 884 08be 40F20001 		movw	r1, #:lower16:numberString
 885 08c2 C0F20001 		movt	r1, #:upper16:numberString
 886 08c6 FFF7FEFF 		bl	ftoa
 242:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 887              		.loc 1 242 0
 888 08ca 40F20000 		movw	r0, #:lower16:numberString
 889 08ce C0F20000 		movt	r0, #:upper16:numberString
 890 08d2 FFF7FEFF 		bl	uart1Print
 243:../src/calibration/accelCalibration.c ****     uart1Print(", ");
 891              		.loc 1 243 0
 892 08d6 40F20000 		movw	r0, #:lower16:.LC10
 893 08da C0F20000 		movt	r0, #:upper16:.LC10
 894 08de FFF7FEFF 		bl	uart1Print
 244:../src/calibration/accelCalibration.c ****     ftoa(eepromConfig.accelScaleFactor[ZAXIS], numberString);
 895              		.loc 1 244 0
 896 08e2 40F20003 		movw	r3, #:lower16:eepromConfig
 897 08e6 C0F20003 		movt	r3, #:upper16:eepromConfig
 898 08ea 9B69     		ldr	r3, [r3, #24]	@ float
 899 08ec 1846     		mov	r0, r3	@ float
 900 08ee 40F20001 		movw	r1, #:lower16:numberString
 901 08f2 C0F20001 		movt	r1, #:upper16:numberString
 902 08f6 FFF7FEFF 		bl	ftoa
 245:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 903              		.loc 1 245 0
 904 08fa 40F20000 		movw	r0, #:lower16:numberString
 905 08fe C0F20000 		movt	r0, #:upper16:numberString
 906 0902 FFF7FEFF 		bl	uart1Print
 246:../src/calibration/accelCalibration.c ****     uart1Print(", ");
 907              		.loc 1 246 0
 908 0906 40F20000 		movw	r0, #:lower16:.LC10
 909 090a C0F20000 		movt	r0, #:upper16:.LC10
 910 090e FFF7FEFF 		bl	uart1Print
 247:../src/calibration/accelCalibration.c ****     ftoa(eepromConfig.accelBias[ZAXIS], numberString);
 911              		.loc 1 247 0
 912 0912 40F20003 		movw	r3, #:lower16:eepromConfig
 913 0916 C0F20003 		movt	r3, #:upper16:eepromConfig
 914 091a DB68     		ldr	r3, [r3, #12]	@ float
 915 091c 1846     		mov	r0, r3	@ float
 916 091e 40F20001 		movw	r1, #:lower16:numberString
 917 0922 C0F20001 		movt	r1, #:upper16:numberString
 918 0926 FFF7FEFF 		bl	ftoa
 248:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 919              		.loc 1 248 0
 920 092a 40F20000 		movw	r0, #:lower16:numberString
 921 092e C0F20000 		movt	r0, #:upper16:numberString
 922 0932 FFF7FEFF 		bl	uart1Print
 249:../src/calibration/accelCalibration.c ****     uart1Print(", ");
 923              		.loc 1 249 0
 924 0936 40F20000 		movw	r0, #:lower16:.LC10
 925 093a C0F20000 		movt	r0, #:upper16:.LC10
 926 093e FFF7FEFF 		bl	uart1Print
 250:../src/calibration/accelCalibration.c ****     ftoa((upSideDown - eepromConfig.accelBias[ZAXIS]) * eepromConfig.accelScaleFactor[ZAXIS], numbe
 927              		.loc 1 250 0
 928 0942 40F20003 		movw	r3, #:lower16:eepromConfig
 929 0946 C0F20003 		movt	r3, #:upper16:eepromConfig
 930 094a D3ED037A 		flds	s15, [r3, #12]
 931 094e 9DED037A 		flds	s14, [sp, #12]
 932 0952 37EE677A 		fsubs	s14, s14, s15
 933 0956 40F20003 		movw	r3, #:lower16:eepromConfig
 934 095a C0F20003 		movt	r3, #:upper16:eepromConfig
 935 095e D3ED067A 		flds	s15, [r3, #24]
 936 0962 67EE277A 		fmuls	s15, s14, s15
 937 0966 17EE900A 		fmrs	r0, s15
 938 096a 40F20001 		movw	r1, #:lower16:numberString
 939 096e C0F20001 		movt	r1, #:upper16:numberString
 940 0972 FFF7FEFF 		bl	ftoa
 251:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 941              		.loc 1 251 0
 942 0976 40F20000 		movw	r0, #:lower16:numberString
 943 097a C0F20000 		movt	r0, #:upper16:numberString
 944 097e FFF7FEFF 		bl	uart1Print
 252:../src/calibration/accelCalibration.c ****     uart1Print(", ");
 945              		.loc 1 252 0
 946 0982 40F20000 		movw	r0, #:lower16:.LC10
 947 0986 C0F20000 		movt	r0, #:upper16:.LC10
 948 098a FFF7FEFF 		bl	uart1Print
 253:../src/calibration/accelCalibration.c ****     ftoa((rightSideUp - eepromConfig.accelBias[ZAXIS]) * eepromConfig.accelScaleFactor[ZAXIS], numb
 949              		.loc 1 253 0
 950 098e 40F20003 		movw	r3, #:lower16:eepromConfig
 951 0992 C0F20003 		movt	r3, #:upper16:eepromConfig
 952 0996 D3ED037A 		flds	s15, [r3, #12]
 953 099a 9DED027A 		flds	s14, [sp, #8]
 954 099e 37EE677A 		fsubs	s14, s14, s15
 955 09a2 40F20003 		movw	r3, #:lower16:eepromConfig
 956 09a6 C0F20003 		movt	r3, #:upper16:eepromConfig
 957 09aa D3ED067A 		flds	s15, [r3, #24]
 958 09ae 67EE277A 		fmuls	s15, s14, s15
 959 09b2 17EE900A 		fmrs	r0, s15
 960 09b6 40F20001 		movw	r1, #:lower16:numberString
 961 09ba C0F20001 		movt	r1, #:upper16:numberString
 962 09be FFF7FEFF 		bl	ftoa
 254:../src/calibration/accelCalibration.c ****     uart1Print(numberString);
 963              		.loc 1 254 0
 964 09c2 40F20000 		movw	r0, #:lower16:numberString
 965 09c6 C0F20000 		movt	r0, #:upper16:numberString
 966 09ca FFF7FEFF 		bl	uart1Print
 255:../src/calibration/accelCalibration.c ****     uart1Print("\n");
 967              		.loc 1 255 0
 968 09ce 40F20000 		movw	r0, #:lower16:.LC11
 969 09d2 C0F20000 		movt	r0, #:upper16:.LC11
 970 09d6 FFF7FEFF 		bl	uart1Print
 256:../src/calibration/accelCalibration.c **** 
 257:../src/calibration/accelCalibration.c ****     uart1Print("\nAccel Calibration Complete.\n");
 971              		.loc 1 257 0
 972 09da 40F20000 		movw	r0, #:lower16:.LC12
 973 09de C0F20000 		movt	r0, #:upper16:.LC12
 974 09e2 FFF7FEFF 		bl	uart1Print
 258:../src/calibration/accelCalibration.c **** 
 259:../src/calibration/accelCalibration.c ****     accelCalibrating = false;
 975              		.loc 1 259 0
 976 09e6 40F20003 		movw	r3, #:lower16:accelCalibrating
 977 09ea C0F20003 		movt	r3, #:upper16:accelCalibrating
 978 09ee 4FF00002 		mov	r2, #0
 979 09f2 1A70     		strb	r2, [r3, #0]
 260:../src/calibration/accelCalibration.c **** }
 980              		.loc 1 260 0
 981 09f4 09B0     		add	sp, sp, #36
 982 09f6 30BD     		pop	{r4, r5, pc}
 983              	.L25:
 984              		.align	3
 985              	.L24:
 986 09f8 000000A0 		.word	-1610612736
 987 09fc ED9C3340 		.word	1077124333
 988              		.cfi_endproc
 989              	.LFE111:
 991              	.Letext0:
 992              		.file 2 "c:\\program files\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 993              		.file 3 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src/pid.h"
 994              		.file 4 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src/aq32Plus_F3.h"
 995              		.file 5 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsMediaTe
 996              		.file 6 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsNMEA.h"
 997              		.file 7 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsUblox.h
 998              		.file 8 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\Libraries\\CMSIS\\I
 999              		.file 9 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\sensors/lsm303
DEFINED SYMBOLS
                            *ABS*:00000000 accelCalibration.c
                            *COM*:00000001 mtk19ProcessDataState
                            *COM*:00000001 nmeaProcessDataState
                            *COM*:00000001 ubloxProcessDataState
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:23     .rodata:00000000 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:24     .rodata:00000000 .LC0
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:27     .rodata:00000020 .LC1
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:30     .rodata:00000044 .LC2
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:33     .rodata:00000070 .LC3
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:36     .rodata:00000088 .LC4
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:39     .rodata:0000008c .LC5
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:46     .rodata:000000b0 .LC6
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:49     .rodata:000000d4 .LC7
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:52     .rodata:000000fc .LC8
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:55     .rodata:00000120 .LC9
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:58     .rodata:00000148 .LC10
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:61     .rodata:0000014c .LC11
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:64     .rodata:00000150 .LC12
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:67     .text:00000000 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:72     .text:00000000 accelCalibration
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:393    .text:00000318 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:399    .text:00000328 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:579    .text:00000510 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:584    .text:0000051c $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXfDPgJ.s:986    .text:000009f8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_dadd
__aeabi_ddiv
__aeabi_d2f
accelCalibrating
uart1Print
uart1Available
uart1Read
readAccel
rawAccel
delayMicroseconds
numberString
ftoa
eepromConfig

   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"computeAxisCommands.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	mtk19ProcessDataState,1,1
  20              		.comm	nmeaProcessDataState,1,1
  21              		.comm	ubloxProcessDataState,1,1
  22              		.comm	attCmd,12,4
  23              		.comm	attPID,12,4
  24              		.comm	axisPID,12,4
  25              		.comm	rateCmd,12,4
  26              		.comm	headingReference,4,4
  27              		.global	previousHeadingHoldEngaged
  28              		.bss
  31              	previousHeadingHoldEngaged:
  32 0000 00       		.space	1
  33              		.text
  34              		.align	2
  35              		.global	computeAxisCommands
  36              		.thumb
  37              		.thumb_func
  39              	computeAxisCommands:
  40              	.LFB111:
  41              		.file 1 "../src/computeAxisCommands.c"
   1:../src/computeAxisCommands.c **** /*
   2:../src/computeAxisCommands.c ****   December 2012
   3:../src/computeAxisCommands.c **** 
   4:../src/computeAxisCommands.c ****   aq32Plus_F3 Rev -
   5:../src/computeAxisCommands.c **** 
   6:../src/computeAxisCommands.c ****   Copyright (c) 2012 John Ihlein.  All rights reserved.
   7:../src/computeAxisCommands.c **** 
   8:../src/computeAxisCommands.c ****   Open Source STM32 Based Multicopter Controller Software
   9:../src/computeAxisCommands.c **** 
  10:../src/computeAxisCommands.c ****   Includes code and/or ideas from:
  11:../src/computeAxisCommands.c **** 
  12:../src/computeAxisCommands.c ****   1)AeroQuad
  13:../src/computeAxisCommands.c ****   2)BaseFlight
  14:../src/computeAxisCommands.c ****   3)CH Robotics
  15:../src/computeAxisCommands.c ****   4)MultiWii
  16:../src/computeAxisCommands.c ****   5)S.O.H. Madgwick
  17:../src/computeAxisCommands.c ****   6)UAVX
  18:../src/computeAxisCommands.c ****   7)STM DiscoveryF3 demonstration software
  19:../src/computeAxisCommands.c **** 
  20:../src/computeAxisCommands.c ****   Designed to run on the DiscoveryF3 board
  21:../src/computeAxisCommands.c **** 
  22:../src/computeAxisCommands.c ****   This program is free software: you can redistribute it and/or modify
  23:../src/computeAxisCommands.c ****   it under the terms of the GNU General Public License as published by
  24:../src/computeAxisCommands.c ****   the Free Software Foundation, either version 3 of the License, or
  25:../src/computeAxisCommands.c ****   (at your option) any later version.
  26:../src/computeAxisCommands.c **** 
  27:../src/computeAxisCommands.c ****   This program is distributed in the hope that it will be useful,
  28:../src/computeAxisCommands.c ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
  29:../src/computeAxisCommands.c ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  30:../src/computeAxisCommands.c ****   GNU General Public License for more details.
  31:../src/computeAxisCommands.c **** 
  32:../src/computeAxisCommands.c ****   You should have received a copy of the GNU General Public License
  33:../src/computeAxisCommands.c ****   along with this program. If not, see <http://www.gnu.org/licenses/>.
  34:../src/computeAxisCommands.c **** */
  35:../src/computeAxisCommands.c **** 
  36:../src/computeAxisCommands.c **** ///////////////////////////////////////////////////////////////////////////////
  37:../src/computeAxisCommands.c **** 
  38:../src/computeAxisCommands.c **** #include "board.h"
  39:../src/computeAxisCommands.c **** 
  40:../src/computeAxisCommands.c **** ///////////////////////////////////////////////////////////////////////////////
  41:../src/computeAxisCommands.c **** 
  42:../src/computeAxisCommands.c **** float   attCmd[3];
  43:../src/computeAxisCommands.c **** 
  44:../src/computeAxisCommands.c **** float   attPID[3];
  45:../src/computeAxisCommands.c **** 
  46:../src/computeAxisCommands.c **** float   axisPID[3];
  47:../src/computeAxisCommands.c **** 
  48:../src/computeAxisCommands.c **** float   rateCmd[3];
  49:../src/computeAxisCommands.c **** 
  50:../src/computeAxisCommands.c **** float   headingReference;
  51:../src/computeAxisCommands.c **** 
  52:../src/computeAxisCommands.c **** uint8_t previousHeadingHoldEngaged = false;
  53:../src/computeAxisCommands.c **** 
  54:../src/computeAxisCommands.c **** ///////////////////////////////////////////////////////////////////////////////
  55:../src/computeAxisCommands.c **** // Compute Axis Commands
  56:../src/computeAxisCommands.c **** ///////////////////////////////////////////////////////////////////////////////
  57:../src/computeAxisCommands.c **** 
  58:../src/computeAxisCommands.c **** void computeAxisCommands(float dt)
  59:../src/computeAxisCommands.c **** {
  42              		.loc 1 59 0
  43              		.cfi_startproc
  44              		@ args = 0, pretend = 0, frame = 8
  45              		@ frame_needed = 0, uses_anonymous_args = 0
  46 0000 10B5     		push	{r4, lr}
  47              	.LCFI0:
  48              		.cfi_def_cfa_offset 8
  49              		.cfi_offset 14, -4
  50              		.cfi_offset 4, -8
  51 0002 84B0     		sub	sp, sp, #16
  52              	.LCFI1:
  53              		.cfi_def_cfa_offset 24
  54 0004 0390     		str	r0, [sp, #12]	@ float
  60:../src/computeAxisCommands.c ****     if (flightMode == ATTITUDE)
  55              		.loc 1 60 0
  56 0006 40F20003 		movw	r3, #:lower16:flightMode
  57 000a C0F20003 		movt	r3, #:upper16:flightMode
  58 000e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  59 0010 012B     		cmp	r3, #1
  60 0012 27D1     		bne	.L2
  61:../src/computeAxisCommands.c ****     {
  62:../src/computeAxisCommands.c ****         attCmd[ROLL ] = rxCommand[ROLL ] * eepromConfig.attitudeScaling;
  61              		.loc 1 62 0
  62 0014 40F20003 		movw	r3, #:lower16:rxCommand
  63 0018 C0F20003 		movt	r3, #:upper16:rxCommand
  64 001c 93ED007A 		flds	s14, [r3, #0]
  65 0020 40F20003 		movw	r3, #:lower16:eepromConfig
  66 0024 C0F20003 		movt	r3, #:upper16:eepromConfig
  67 0028 D3ED187A 		flds	s15, [r3, #96]
  68 002c 67EE277A 		fmuls	s15, s14, s15
  69 0030 40F20003 		movw	r3, #:lower16:attCmd
  70 0034 C0F20003 		movt	r3, #:upper16:attCmd
  71 0038 C3ED007A 		fsts	s15, [r3, #0]
  63:../src/computeAxisCommands.c ****         attCmd[PITCH] = rxCommand[PITCH] * eepromConfig.attitudeScaling;
  72              		.loc 1 63 0
  73 003c 40F20003 		movw	r3, #:lower16:rxCommand
  74 0040 C0F20003 		movt	r3, #:upper16:rxCommand
  75 0044 93ED017A 		flds	s14, [r3, #4]
  76 0048 40F20003 		movw	r3, #:lower16:eepromConfig
  77 004c C0F20003 		movt	r3, #:upper16:eepromConfig
  78 0050 D3ED187A 		flds	s15, [r3, #96]
  79 0054 67EE277A 		fmuls	s15, s14, s15
  80 0058 40F20003 		movw	r3, #:lower16:attCmd
  81 005c C0F20003 		movt	r3, #:upper16:attCmd
  82 0060 C3ED017A 		fsts	s15, [r3, #4]
  83              	.L2:
  64:../src/computeAxisCommands.c ****     }
  65:../src/computeAxisCommands.c **** 
  66:../src/computeAxisCommands.c ****     if (flightMode >= ATTITUDE)
  84              		.loc 1 66 0
  85 0064 40F20003 		movw	r3, #:lower16:flightMode
  86 0068 C0F20003 		movt	r3, #:upper16:flightMode
  87 006c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  88 006e 002B     		cmp	r3, #0
  89 0070 3CD0     		beq	.L3
  67:../src/computeAxisCommands.c ****     {
  68:../src/computeAxisCommands.c ****         attPID[ROLL]  = updatePID( attCmd[ROLL ],  sensors.attitude500Hz[ROLL ], dt, holdIntegrator
  90              		.loc 1 68 0
  91 0072 40F20003 		movw	r3, #:lower16:attCmd
  92 0076 C0F20003 		movt	r3, #:upper16:attCmd
  93 007a 1968     		ldr	r1, [r3, #0]	@ float
  94 007c 40F20003 		movw	r3, #:lower16:sensors
  95 0080 C0F20003 		movt	r3, #:upper16:sensors
  96 0084 9A69     		ldr	r2, [r3, #24]	@ float
  97 0086 40F20003 		movw	r3, #:lower16:holdIntegrators
  98 008a C0F20003 		movt	r3, #:upper16:holdIntegrators
  99 008e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 100 0090 9248     		ldr	r0, .L9
 101 0092 0090     		str	r0, [sp, #0]
 102 0094 0846     		mov	r0, r1	@ float
 103 0096 1146     		mov	r1, r2	@ float
 104 0098 039A     		ldr	r2, [sp, #12]	@ float
 105 009a FFF7FEFF 		bl	updatePID
 106 009e 0246     		mov	r2, r0	@ float
 107 00a0 40F20003 		movw	r3, #:lower16:attPID
 108 00a4 C0F20003 		movt	r3, #:upper16:attPID
 109 00a8 1A60     		str	r2, [r3, #0]	@ float
  69:../src/computeAxisCommands.c ****         attPID[PITCH] = updatePID( attCmd[PITCH], -sensors.attitude500Hz[PITCH], dt, holdIntegrator
 110              		.loc 1 69 0
 111 00aa 40F20003 		movw	r3, #:lower16:attCmd
 112 00ae C0F20003 		movt	r3, #:upper16:attCmd
 113 00b2 5A68     		ldr	r2, [r3, #4]	@ float
 114 00b4 40F20003 		movw	r3, #:lower16:sensors
 115 00b8 C0F20003 		movt	r3, #:upper16:sensors
 116 00bc D3ED077A 		flds	s15, [r3, #28]
 117 00c0 F1EE677A 		fnegs	s15, s15
 118 00c4 17EE904A 		fmrs	r4, s15
 119 00c8 40F20003 		movw	r3, #:lower16:holdIntegrators
 120 00cc C0F20003 		movt	r3, #:upper16:holdIntegrators
 121 00d0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 122 00d2 8349     		ldr	r1, .L9+4
 123 00d4 0091     		str	r1, [sp, #0]
 124 00d6 1046     		mov	r0, r2	@ float
 125 00d8 2146     		mov	r1, r4	@ float
 126 00da 039A     		ldr	r2, [sp, #12]	@ float
 127 00dc FFF7FEFF 		bl	updatePID
 128 00e0 0246     		mov	r2, r0	@ float
 129 00e2 40F20003 		movw	r3, #:lower16:attPID
 130 00e6 C0F20003 		movt	r3, #:upper16:attPID
 131 00ea 5A60     		str	r2, [r3, #4]	@ float
 132              	.L3:
  70:../src/computeAxisCommands.c ****     }
  71:../src/computeAxisCommands.c **** 
  72:../src/computeAxisCommands.c ****     if (flightMode == RATE)
 133              		.loc 1 72 0
 134 00ec 40F20003 		movw	r3, #:lower16:flightMode
 135 00f0 C0F20003 		movt	r3, #:upper16:flightMode
 136 00f4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 137 00f6 002B     		cmp	r3, #0
 138 00f8 28D1     		bne	.L4
  73:../src/computeAxisCommands.c ****     {
  74:../src/computeAxisCommands.c ****         rateCmd[ROLL ] = rxCommand[ROLL ] * eepromConfig.rateScaling;
 139              		.loc 1 74 0
 140 00fa 40F20003 		movw	r3, #:lower16:rxCommand
 141 00fe C0F20003 		movt	r3, #:upper16:rxCommand
 142 0102 93ED007A 		flds	s14, [r3, #0]
 143 0106 40F20003 		movw	r3, #:lower16:eepromConfig
 144 010a C0F20003 		movt	r3, #:upper16:eepromConfig
 145 010e D3ED177A 		flds	s15, [r3, #92]
 146 0112 67EE277A 		fmuls	s15, s14, s15
 147 0116 40F20003 		movw	r3, #:lower16:rateCmd
 148 011a C0F20003 		movt	r3, #:upper16:rateCmd
 149 011e C3ED007A 		fsts	s15, [r3, #0]
  75:../src/computeAxisCommands.c ****         rateCmd[PITCH] = rxCommand[PITCH] * eepromConfig.rateScaling;
 150              		.loc 1 75 0
 151 0122 40F20003 		movw	r3, #:lower16:rxCommand
 152 0126 C0F20003 		movt	r3, #:upper16:rxCommand
 153 012a 93ED017A 		flds	s14, [r3, #4]
 154 012e 40F20003 		movw	r3, #:lower16:eepromConfig
 155 0132 C0F20003 		movt	r3, #:upper16:eepromConfig
 156 0136 D3ED177A 		flds	s15, [r3, #92]
 157 013a 67EE277A 		fmuls	s15, s14, s15
 158 013e 40F20003 		movw	r3, #:lower16:rateCmd
 159 0142 C0F20003 		movt	r3, #:upper16:rateCmd
 160 0146 C3ED017A 		fsts	s15, [r3, #4]
 161 014a 13E0     		b	.L5
 162              	.L4:
  76:../src/computeAxisCommands.c ****     }
  77:../src/computeAxisCommands.c ****     else
  78:../src/computeAxisCommands.c ****     {
  79:../src/computeAxisCommands.c ****         rateCmd[ROLL ] = attPID[ROLL ];
 163              		.loc 1 79 0
 164 014c 40F20003 		movw	r3, #:lower16:attPID
 165 0150 C0F20003 		movt	r3, #:upper16:attPID
 166 0154 1A68     		ldr	r2, [r3, #0]	@ float
 167 0156 40F20003 		movw	r3, #:lower16:rateCmd
 168 015a C0F20003 		movt	r3, #:upper16:rateCmd
 169 015e 1A60     		str	r2, [r3, #0]	@ float
  80:../src/computeAxisCommands.c ****         rateCmd[PITCH] = attPID[PITCH];
 170              		.loc 1 80 0
 171 0160 40F20003 		movw	r3, #:lower16:attPID
 172 0164 C0F20003 		movt	r3, #:upper16:attPID
 173 0168 5A68     		ldr	r2, [r3, #4]	@ float
 174 016a 40F20003 		movw	r3, #:lower16:rateCmd
 175 016e C0F20003 		movt	r3, #:upper16:rateCmd
 176 0172 5A60     		str	r2, [r3, #4]	@ float
 177              	.L5:
  81:../src/computeAxisCommands.c ****     }
  82:../src/computeAxisCommands.c **** 
  83:../src/computeAxisCommands.c ****     if (headingHoldEngaged == true)  // Heading Hold is ON
 178              		.loc 1 83 0
 179 0174 40F20003 		movw	r3, #:lower16:headingHoldEngaged
 180 0178 C0F20003 		movt	r3, #:upper16:headingHoldEngaged
 181 017c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 182 017e 012B     		cmp	r3, #1
 183 0180 28D1     		bne	.L6
  84:../src/computeAxisCommands.c ****     {
  85:../src/computeAxisCommands.c ****         if (previousHeadingHoldEngaged == false)
 184              		.loc 1 85 0
 185 0182 40F20003 		movw	r3, #:lower16:previousHeadingHoldEngaged
 186 0186 C0F20003 		movt	r3, #:upper16:previousHeadingHoldEngaged
 187 018a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 188 018c 002B     		cmp	r3, #0
 189 018e 04D1     		bne	.L7
  86:../src/computeAxisCommands.c ****         {
  87:../src/computeAxisCommands.c ****             setPIDintegralError(HEADING_PID, 0.0f);  // First pass in heading hold with new referen
 190              		.loc 1 87 0
 191 0190 4FF00500 		mov	r0, #5
 192 0194 5749     		ldr	r1, .L9+24	@ float
 193 0196 FFF7FEFF 		bl	setPIDintegralError
 194              	.L7:
  88:../src/computeAxisCommands.c ****         }
  89:../src/computeAxisCommands.c ****         rateCmd[YAW] = updatePID( headingReference, sensors.attitude500Hz[YAW], dt, holdIntegrators
 195              		.loc 1 89 0
 196 019a 40F20003 		movw	r3, #:lower16:headingReference
 197 019e C0F20003 		movt	r3, #:upper16:headingReference
 198 01a2 1968     		ldr	r1, [r3, #0]	@ float
 199 01a4 40F20003 		movw	r3, #:lower16:sensors
 200 01a8 C0F20003 		movt	r3, #:upper16:sensors
 201 01ac 1A6A     		ldr	r2, [r3, #32]	@ float
 202 01ae 40F20003 		movw	r3, #:lower16:holdIntegrators
 203 01b2 C0F20003 		movt	r3, #:upper16:holdIntegrators
 204 01b6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 205 01b8 4A48     		ldr	r0, .L9+8
 206 01ba 0090     		str	r0, [sp, #0]
 207 01bc 0846     		mov	r0, r1	@ float
 208 01be 1146     		mov	r1, r2	@ float
 209 01c0 039A     		ldr	r2, [sp, #12]	@ float
 210 01c2 FFF7FEFF 		bl	updatePID
 211 01c6 0246     		mov	r2, r0	@ float
 212 01c8 40F20003 		movw	r3, #:lower16:rateCmd
 213 01cc C0F20003 		movt	r3, #:upper16:rateCmd
 214 01d0 9A60     		str	r2, [r3, #8]	@ float
 215 01d2 1DE0     		b	.L8
 216              	.L6:
  90:../src/computeAxisCommands.c ****     }
  91:../src/computeAxisCommands.c ****     else  // Heading Hold is OFF
  92:../src/computeAxisCommands.c ****     {
  93:../src/computeAxisCommands.c ****         rateCmd[YAW] = rxCommand[YAW] * eepromConfig.rateScaling;
 217              		.loc 1 93 0
 218 01d4 40F20003 		movw	r3, #:lower16:rxCommand
 219 01d8 C0F20003 		movt	r3, #:upper16:rxCommand
 220 01dc 93ED027A 		flds	s14, [r3, #8]
 221 01e0 40F20003 		movw	r3, #:lower16:eepromConfig
 222 01e4 C0F20003 		movt	r3, #:upper16:eepromConfig
 223 01e8 D3ED177A 		flds	s15, [r3, #92]
 224 01ec 67EE277A 		fmuls	s15, s14, s15
 225 01f0 40F20003 		movw	r3, #:lower16:rateCmd
 226 01f4 C0F20003 		movt	r3, #:upper16:rateCmd
 227 01f8 C3ED027A 		fsts	s15, [r3, #8]
  94:../src/computeAxisCommands.c ****         headingReference = sensors.attitude500Hz[YAW];
 228              		.loc 1 94 0
 229 01fc 40F20003 		movw	r3, #:lower16:sensors
 230 0200 C0F20003 		movt	r3, #:upper16:sensors
 231 0204 1A6A     		ldr	r2, [r3, #32]	@ float
 232 0206 40F20003 		movw	r3, #:lower16:headingReference
 233 020a C0F20003 		movt	r3, #:upper16:headingReference
 234 020e 1A60     		str	r2, [r3, #0]	@ float
 235              	.L8:
  95:../src/computeAxisCommands.c ****     }
  96:../src/computeAxisCommands.c **** 
  97:../src/computeAxisCommands.c ****     previousHeadingHoldEngaged = headingHoldEngaged;
 236              		.loc 1 97 0
 237 0210 40F20003 		movw	r3, #:lower16:headingHoldEngaged
 238 0214 C0F20003 		movt	r3, #:upper16:headingHoldEngaged
 239 0218 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 240 021a 40F20003 		movw	r3, #:lower16:previousHeadingHoldEngaged
 241 021e C0F20003 		movt	r3, #:upper16:previousHeadingHoldEngaged
 242 0222 1A70     		strb	r2, [r3, #0]
  98:../src/computeAxisCommands.c **** 
  99:../src/computeAxisCommands.c ****     axisPID[ROLL ] = updatePID( rateCmd[ROLL ],  sensors.gyro500Hz[ROLL ], dt, holdIntegrators, &ee
 243              		.loc 1 99 0
 244 0224 40F20003 		movw	r3, #:lower16:rateCmd
 245 0228 C0F20003 		movt	r3, #:upper16:rateCmd
 246 022c 1968     		ldr	r1, [r3, #0]	@ float
 247 022e 40F20003 		movw	r3, #:lower16:sensors
 248 0232 C0F20003 		movt	r3, #:upper16:sensors
 249 0236 5A6A     		ldr	r2, [r3, #36]	@ float
 250 0238 40F20003 		movw	r3, #:lower16:holdIntegrators
 251 023c C0F20003 		movt	r3, #:upper16:holdIntegrators
 252 0240 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 253 0242 2948     		ldr	r0, .L9+12
 254 0244 0090     		str	r0, [sp, #0]
 255 0246 0846     		mov	r0, r1	@ float
 256 0248 1146     		mov	r1, r2	@ float
 257 024a 039A     		ldr	r2, [sp, #12]	@ float
 258 024c FFF7FEFF 		bl	updatePID
 259 0250 0246     		mov	r2, r0	@ float
 260 0252 40F20003 		movw	r3, #:lower16:axisPID
 261 0256 C0F20003 		movt	r3, #:upper16:axisPID
 262 025a 1A60     		str	r2, [r3, #0]	@ float
 100:../src/computeAxisCommands.c ****     axisPID[PITCH] = updatePID( rateCmd[PITCH], -sensors.gyro500Hz[PITCH], dt, holdIntegrators, &ee
 263              		.loc 1 100 0
 264 025c 40F20003 		movw	r3, #:lower16:rateCmd
 265 0260 C0F20003 		movt	r3, #:upper16:rateCmd
 266 0264 5A68     		ldr	r2, [r3, #4]	@ float
 267 0266 40F20003 		movw	r3, #:lower16:sensors
 268 026a C0F20003 		movt	r3, #:upper16:sensors
 269 026e D3ED0A7A 		flds	s15, [r3, #40]
 270 0272 F1EE677A 		fnegs	s15, s15
 271 0276 17EE904A 		fmrs	r4, s15
 272 027a 40F20003 		movw	r3, #:lower16:holdIntegrators
 273 027e C0F20003 		movt	r3, #:upper16:holdIntegrators
 274 0282 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 275 0284 1949     		ldr	r1, .L9+16
 276 0286 0091     		str	r1, [sp, #0]
 277 0288 1046     		mov	r0, r2	@ float
 278 028a 2146     		mov	r1, r4	@ float
 279 028c 039A     		ldr	r2, [sp, #12]	@ float
 280 028e FFF7FEFF 		bl	updatePID
 281 0292 0246     		mov	r2, r0	@ float
 282 0294 40F20003 		movw	r3, #:lower16:axisPID
 283 0298 C0F20003 		movt	r3, #:upper16:axisPID
 284 029c 5A60     		str	r2, [r3, #4]	@ float
 101:../src/computeAxisCommands.c ****     axisPID[YAW  ] = updatePID( rateCmd[YAW  ],  sensors.gyro500Hz[YAW  ], dt, holdIntegrators, &ee
 285              		.loc 1 101 0
 286 029e 40F20003 		movw	r3, #:lower16:rateCmd
 287 02a2 C0F20003 		movt	r3, #:upper16:rateCmd
 288 02a6 9968     		ldr	r1, [r3, #8]	@ float
 289 02a8 40F20003 		movw	r3, #:lower16:sensors
 290 02ac C0F20003 		movt	r3, #:upper16:sensors
 291 02b0 DA6A     		ldr	r2, [r3, #44]	@ float
 292 02b2 40F20003 		movw	r3, #:lower16:holdIntegrators
 293 02b6 C0F20003 		movt	r3, #:upper16:holdIntegrators
 294 02ba 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 295 02bc 0C48     		ldr	r0, .L9+20
 296 02be 0090     		str	r0, [sp, #0]
 297 02c0 0846     		mov	r0, r1	@ float
 298 02c2 1146     		mov	r1, r2	@ float
 299 02c4 039A     		ldr	r2, [sp, #12]	@ float
 300 02c6 FFF7FEFF 		bl	updatePID
 301 02ca 0246     		mov	r2, r0	@ float
 302 02cc 40F20003 		movw	r3, #:lower16:axisPID
 303 02d0 C0F20003 		movt	r3, #:upper16:axisPID
 304 02d4 9A60     		str	r2, [r3, #8]	@ float
 102:../src/computeAxisCommands.c **** }
 305              		.loc 1 102 0
 306 02d6 04B0     		add	sp, sp, #16
 307 02d8 10BD     		pop	{r4, pc}
 308              	.L10:
 309 02da 00BF     		.align	2
 310              	.L9:
 311 02dc 10010000 		.word	eepromConfig+272
 312 02e0 38010000 		.word	eepromConfig+312
 313 02e4 60010000 		.word	eepromConfig+352
 314 02e8 98000000 		.word	eepromConfig+152
 315 02ec C0000000 		.word	eepromConfig+192
 316 02f0 E8000000 		.word	eepromConfig+232
 317 02f4 00000000 		.word	0
 318              		.cfi_endproc
 319              	.LFE111:
 321              	.Letext0:
 322              		.file 2 "c:\\program files\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 323              		.file 3 "../src/pid.h"
 324              		.file 4 "../src/aq32Plus_F3.h"
 325              		.file 5 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsMediaTe
 326              		.file 6 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsNMEA.h"
 327              		.file 7 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\src\\gps/gpsUblox.h
 328              		.file 8 "D:\\Documents and Settings\\e722209\\Desktop\\workspace\\aq32Plus_F3\\Libraries\\CMSIS\\I
 329              		.file 9 "../src/flightCommand.h"
DEFINED SYMBOLS
                            *ABS*:00000000 computeAxisCommands.c
                            *COM*:00000001 mtk19ProcessDataState
                            *COM*:00000001 nmeaProcessDataState
                            *COM*:00000001 ubloxProcessDataState
                            *COM*:0000000c attCmd
                            *COM*:0000000c attPID
                            *COM*:0000000c axisPID
                            *COM*:0000000c rateCmd
                            *COM*:00000004 headingReference
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXkrT7N.s:31     .bss:00000000 previousHeadingHoldEngaged
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXkrT7N.s:32     .bss:00000000 $d
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXkrT7N.s:34     .text:00000000 $t
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXkrT7N.s:39     .text:00000000 computeAxisCommands
D:\DOCUME~1\e722209\LOCALS~1\Temp\ccXkrT7N.s:311    .text:000002dc $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
flightMode
rxCommand
eepromConfig
sensors
holdIntegrators
updatePID
headingHoldEngaged
setPIDintegralError

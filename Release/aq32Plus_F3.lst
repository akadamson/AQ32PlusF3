
aq32Plus_F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002eae4  08000188  08000188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  0802ec6c  0802ec6c  00036c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0802ec74  0802ec74  00036c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0802ec78  0802ec78  00036c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000006a4  20000000  0802ec7c  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000038b8  200006a4  0802f320  000386a4  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20003f5c  0802f320  0003bf5c  2**0
                  ALLOC
  8 .ARM.attributes 00000035  00000000  00000000  000386a4  2**0
                  CONTENTS, READONLY
  9 .debug_line   0001dd01  00000000  00000000  000386d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001b960  00000000  00000000  000563da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000042f2  00000000  00000000  00071d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000628  00000000  00000000  00076030  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  00076658  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000041d4  00000000  00000000  00076690  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macinfo 00e5061f  00000000  00000000  0007a864  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005d31  00000000  00000000  00ecae83  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      00000030  00000000  00000000  00ed0bb4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003ca0  00000000  00000000  00ed0be4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	f240 64a4 	movw	r4, #1700	; 0x6a4
 800018e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000192:	7823      	ldrb	r3, [r4, #0]
 8000194:	b963      	cbnz	r3, 80001b0 <__do_global_dtors_aux+0x28>
 8000196:	f240 0000 	movw	r0, #0
 800019a:	f2c0 0000 	movt	r0, #0
 800019e:	b128      	cbz	r0, 80001ac <__do_global_dtors_aux+0x24>
 80001a0:	f64e 4054 	movw	r0, #60500	; 0xec54
 80001a4:	f6c0 0002 	movt	r0, #2050	; 0x802
 80001a8:	f3af 8000 	nop.w
 80001ac:	2101      	movs	r1, #1
 80001ae:	7021      	strb	r1, [r4, #0]
 80001b0:	bd10      	pop	{r4, pc}
 80001b2:	bf00      	nop

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	f240 0300 	movw	r3, #0
 80001ba:	f2c0 0300 	movt	r3, #0
 80001be:	b14b      	cbz	r3, 80001d4 <frame_dummy+0x20>
 80001c0:	f64e 4054 	movw	r0, #60500	; 0xec54
 80001c4:	f240 61a8 	movw	r1, #1704	; 0x6a8
 80001c8:	f6c0 0002 	movt	r0, #2050	; 0x802
 80001cc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80001d0:	f3af 8000 	nop.w
 80001d4:	f240 60a4 	movw	r0, #1700	; 0x6a4
 80001d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001dc:	6801      	ldr	r1, [r0, #0]
 80001de:	b129      	cbz	r1, 80001ec <frame_dummy+0x38>
 80001e0:	f240 0300 	movw	r3, #0
 80001e4:	f2c0 0300 	movt	r3, #0
 80001e8:	b103      	cbz	r3, 80001ec <frame_dummy+0x38>
 80001ea:	4798      	blx	r3
 80001ec:	bd08      	pop	{r3, pc}
 80001ee:	bf00      	nop

080001f0 <initGyro>:
///////////////////////////////////////////////////////////////////////////////
// Gyro Initialization
///////////////////////////////////////////////////////////////////////////////

void initGyro(void)
{
 80001f0:	b508      	push	{r3, lr}
    ///////////////////////////////////

	GPIO_ResetBits(L3GD20_CS_GPIO, L3GD20_CS_PIN);
 80001f2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80001f6:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80001fa:	f04f 0108 	mov.w	r1, #8
 80001fe:	f019 f903 	bl	8019408 <GPIO_ResetBits>

	spiTransfer(L3GD20_SPI, CTRL_REG5_ADDR);
 8000202:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8000206:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800020a:	f04f 0124 	mov.w	r1, #36	; 0x24
 800020e:	f005 fa21 	bl	8005654 <spiTransfer>
	spiTransfer(L3GD20_SPI, BOOT);
 8000212:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8000216:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800021a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800021e:	f005 fa19 	bl	8005654 <spiTransfer>

	GPIO_SetBits(L3GD20_CS_GPIO, L3GD20_CS_PIN);
 8000222:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000226:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800022a:	f04f 0108 	mov.w	r1, #8
 800022e:	f019 f8df 	bl	80193f0 <GPIO_SetBits>

	delayMicroseconds(100);
 8000232:	f04f 0064 	mov.w	r0, #100	; 0x64
 8000236:	f005 ff23 	bl	8006080 <delayMicroseconds>

	GPIO_ResetBits(L3GD20_CS_GPIO, L3GD20_CS_PIN);
 800023a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800023e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000242:	f04f 0108 	mov.w	r1, #8
 8000246:	f019 f8df 	bl	8019408 <GPIO_ResetBits>

    spiTransfer(L3GD20_SPI, CTRL_REG1_ADDR);
 800024a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800024e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000252:	f04f 0120 	mov.w	r1, #32
 8000256:	f005 f9fd 	bl	8005654 <spiTransfer>
    spiTransfer(L3GD20_SPI, MODE_ACTIVE | OUTPUT_DATARATE_4 | AXES_ENABLE | BANDWIDTH_4);
 800025a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800025e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000262:	f04f 01ff 	mov.w	r1, #255	; 0xff
 8000266:	f005 f9f5 	bl	8005654 <spiTransfer>

    GPIO_SetBits(L3GD20_CS_GPIO, L3GD20_CS_PIN);
 800026a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800026e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000272:	f04f 0108 	mov.w	r1, #8
 8000276:	f019 f8bb 	bl	80193f0 <GPIO_SetBits>

    delayMicroseconds(1);
 800027a:	f04f 0001 	mov.w	r0, #1
 800027e:	f005 feff 	bl	8006080 <delayMicroseconds>

    GPIO_ResetBits(L3GD20_CS_GPIO, L3GD20_CS_PIN);
 8000282:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000286:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800028a:	f04f 0108 	mov.w	r1, #8
 800028e:	f019 f8bb 	bl	8019408 <GPIO_ResetBits>

    spiTransfer(L3GD20_SPI, CTRL_REG4_ADDR);
 8000292:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8000296:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800029a:	f04f 0123 	mov.w	r1, #35	; 0x23
 800029e:	f005 f9d9 	bl	8005654 <spiTransfer>
    spiTransfer(L3GD20_SPI, BLOCK_DATA_UPDATE_CONTINUOUS | BLE_MSB | FULLSCALE_500);
 80002a2:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80002a6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80002aa:	f04f 0150 	mov.w	r1, #80	; 0x50
 80002ae:	f005 f9d1 	bl	8005654 <spiTransfer>

    GPIO_SetBits(L3GD20_CS_GPIO, L3GD20_CS_PIN);
 80002b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80002b6:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80002ba:	f04f 0108 	mov.w	r1, #8
 80002be:	f019 f897 	bl	80193f0 <GPIO_SetBits>

    ///////////////////////////////////

    delay(100);
 80002c2:	f04f 0064 	mov.w	r0, #100	; 0x64
 80002c6:	f005 ff15 	bl	80060f4 <delay>

    computeGyroRTData();
 80002ca:	f000 f875 	bl	80003b8 <computeGyroRTData>
}
 80002ce:	bd08      	pop	{r3, pc}

080002d0 <readGyro>:
///////////////////////////////////////////////////////////////////////////////
// Read Gyro
///////////////////////////////////////////////////////////////////////////////

void readGyro(void)
{
 80002d0:	b508      	push	{r3, lr}
	GPIO_ResetBits(L3GD20_CS_GPIO, L3GD20_CS_PIN);
 80002d2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80002d6:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80002da:	f04f 0108 	mov.w	r1, #8
 80002de:	f019 f893 	bl	8019408 <GPIO_ResetBits>

	                          //spiTransfer(L3GD20_SPI, OUT_TEMP_ADDR | READ_CMD);

	//rawGyroTemperature      = spiTransfer(L3GD20_SPI, DUMMY_BYTE);

	                          spiTransfer(L3GD20_SPI, OUT_X_L_ADDR | READ_CMD |MULTIPLEBYTE_CMD);
 80002e2:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80002e6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80002ea:	f04f 01e8 	mov.w	r1, #232	; 0xe8
 80002ee:	f005 f9b1 	bl	8005654 <spiTransfer>

    rawGyro[PITCH].bytes[1] = spiTransfer(L3GD20_SPI, DUMMY_BYTE);
 80002f2:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80002f6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80002fa:	f04f 0100 	mov.w	r1, #0
 80002fe:	f005 f9a9 	bl	8005654 <spiTransfer>
 8000302:	4603      	mov	r3, r0
 8000304:	461a      	mov	r2, r3
 8000306:	f640 036c 	movw	r3, #2156	; 0x86c
 800030a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800030e:	70da      	strb	r2, [r3, #3]
    rawGyro[PITCH].bytes[0] = spiTransfer(L3GD20_SPI, DUMMY_BYTE);
 8000310:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8000314:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000318:	f04f 0100 	mov.w	r1, #0
 800031c:	f005 f99a 	bl	8005654 <spiTransfer>
 8000320:	4603      	mov	r3, r0
 8000322:	461a      	mov	r2, r3
 8000324:	f640 036c 	movw	r3, #2156	; 0x86c
 8000328:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800032c:	709a      	strb	r2, [r3, #2]
    rawGyro[ROLL ].bytes[1] = spiTransfer(L3GD20_SPI, DUMMY_BYTE);
 800032e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8000332:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000336:	f04f 0100 	mov.w	r1, #0
 800033a:	f005 f98b 	bl	8005654 <spiTransfer>
 800033e:	4603      	mov	r3, r0
 8000340:	461a      	mov	r2, r3
 8000342:	f640 036c 	movw	r3, #2156	; 0x86c
 8000346:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800034a:	705a      	strb	r2, [r3, #1]
    rawGyro[ROLL ].bytes[0] = spiTransfer(L3GD20_SPI, DUMMY_BYTE);
 800034c:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8000350:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000354:	f04f 0100 	mov.w	r1, #0
 8000358:	f005 f97c 	bl	8005654 <spiTransfer>
 800035c:	4603      	mov	r3, r0
 800035e:	461a      	mov	r2, r3
 8000360:	f640 036c 	movw	r3, #2156	; 0x86c
 8000364:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000368:	701a      	strb	r2, [r3, #0]
    rawGyro[YAW  ].bytes[1] = spiTransfer(L3GD20_SPI, DUMMY_BYTE);
 800036a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800036e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000372:	f04f 0100 	mov.w	r1, #0
 8000376:	f005 f96d 	bl	8005654 <spiTransfer>
 800037a:	4603      	mov	r3, r0
 800037c:	461a      	mov	r2, r3
 800037e:	f640 036c 	movw	r3, #2156	; 0x86c
 8000382:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000386:	715a      	strb	r2, [r3, #5]
    rawGyro[YAW  ].bytes[0] = spiTransfer(L3GD20_SPI, DUMMY_BYTE);
 8000388:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800038c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000390:	f04f 0100 	mov.w	r1, #0
 8000394:	f005 f95e 	bl	8005654 <spiTransfer>
 8000398:	4603      	mov	r3, r0
 800039a:	461a      	mov	r2, r3
 800039c:	f640 036c 	movw	r3, #2156	; 0x86c
 80003a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003a4:	711a      	strb	r2, [r3, #4]

    GPIO_SetBits(L3GD20_CS_GPIO, L3GD20_CS_PIN);
 80003a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80003aa:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80003ae:	f04f 0108 	mov.w	r1, #8
 80003b2:	f019 f81d 	bl	80193f0 <GPIO_SetBits>
}
 80003b6:	bd08      	pop	{r3, pc}

080003b8 <computeGyroRTData>:
///////////////////////////////////////////////////////////////////////////////
// Compute Gyro Runtime Data
///////////////////////////////////////////////////////////////////////////////

void computeGyroRTData(void)
{
 80003b8:	b500      	push	{lr}
 80003ba:	b085      	sub	sp, #20
    uint8_t  axis;
    uint16_t samples;

    float gyroSum[3]  = { 0.0f, 0.0f, 0.0f };
 80003bc:	4b42      	ldr	r3, [pc, #264]	; (80004c8 <computeGyroRTData+0x110>)
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	4b41      	ldr	r3, [pc, #260]	; (80004c8 <computeGyroRTData+0x110>)
 80003c2:	9301      	str	r3, [sp, #4]
 80003c4:	4b40      	ldr	r3, [pc, #256]	; (80004c8 <computeGyroRTData+0x110>)
 80003c6:	9302      	str	r3, [sp, #8]

    gyroCalibrating = true;
 80003c8:	f240 63cc 	movw	r3, #1740	; 0x6cc
 80003cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003d0:	f04f 0201 	mov.w	r2, #1
 80003d4:	701a      	strb	r2, [r3, #0]

    for (samples = 0; samples < 2000; samples++)
 80003d6:	f04f 0300 	mov.w	r3, #0
 80003da:	f8ad 300c 	strh.w	r3, [sp, #12]
 80003de:	e03b      	b.n	8000458 <computeGyroRTData+0xa0>
    {
        readGyro();
 80003e0:	f7ff ff76 	bl	80002d0 <readGyro>

        gyroSum[ROLL ]  += (float)rawGyro[ROLL ].value;
 80003e4:	ed9d 7a00 	vldr	s14, [sp]
 80003e8:	f640 036c 	movw	r3, #2156	; 0x86c
 80003ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003f0:	881b      	ldrh	r3, [r3, #0]
 80003f2:	b21b      	sxth	r3, r3
 80003f4:	ee06 3a90 	vmov	s13, r3
 80003f8:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 80003fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000400:	edcd 7a00 	vstr	s15, [sp]
        gyroSum[PITCH]  += (float)rawGyro[PITCH].value;
 8000404:	ed9d 7a01 	vldr	s14, [sp, #4]
 8000408:	f640 036c 	movw	r3, #2156	; 0x86c
 800040c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000410:	885b      	ldrh	r3, [r3, #2]
 8000412:	b21b      	sxth	r3, r3
 8000414:	ee06 3a90 	vmov	s13, r3
 8000418:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 800041c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000420:	edcd 7a01 	vstr	s15, [sp, #4]
        gyroSum[YAW  ]  += (float)rawGyro[YAW  ].value;
 8000424:	ed9d 7a02 	vldr	s14, [sp, #8]
 8000428:	f640 036c 	movw	r3, #2156	; 0x86c
 800042c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000430:	889b      	ldrh	r3, [r3, #4]
 8000432:	b21b      	sxth	r3, r3
 8000434:	ee06 3a90 	vmov	s13, r3
 8000438:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 800043c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000440:	edcd 7a02 	vstr	s15, [sp, #8]

        delayMicroseconds(1000);
 8000444:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000448:	f005 fe1a 	bl	8006080 <delayMicroseconds>

    float gyroSum[3]  = { 0.0f, 0.0f, 0.0f };

    gyroCalibrating = true;

    for (samples = 0; samples < 2000; samples++)
 800044c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8000450:	f103 0301 	add.w	r3, r3, #1
 8000454:	f8ad 300c 	strh.w	r3, [sp, #12]
 8000458:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800045c:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8000460:	429a      	cmp	r2, r3
 8000462:	d9bd      	bls.n	80003e0 <computeGyroRTData+0x28>
        gyroSum[YAW  ]  += (float)rawGyro[YAW  ].value;

        delayMicroseconds(1000);
    }

    for (axis = 0; axis < 3; axis++)
 8000464:	f04f 0300 	mov.w	r3, #0
 8000468:	f88d 300f 	strb.w	r3, [sp, #15]
 800046c:	e01c      	b.n	80004a8 <computeGyroRTData+0xf0>
    {
        gyroRTBias[axis] = gyroSum[axis]  / 2000.0f;
 800046e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000472:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000476:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800047a:	a904      	add	r1, sp, #16
 800047c:	18cb      	adds	r3, r1, r3
 800047e:	ed13 7a04 	vldr	s14, [r3, #-16]
 8000482:	eddf 7a10 	vldr	s15, [pc, #64]	; 80004c4 <computeGyroRTData+0x10c>
 8000486:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800048a:	f640 035c 	movw	r3, #2140	; 0x85c
 800048e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000492:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8000496:	189b      	adds	r3, r3, r2
 8000498:	edc3 7a00 	vstr	s15, [r3]
        gyroSum[YAW  ]  += (float)rawGyro[YAW  ].value;

        delayMicroseconds(1000);
    }

    for (axis = 0; axis < 3; axis++)
 800049c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80004a0:	f103 0301 	add.w	r3, r3, #1
 80004a4:	f88d 300f 	strb.w	r3, [sp, #15]
 80004a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80004ac:	2b02      	cmp	r3, #2
 80004ae:	d9de      	bls.n	800046e <computeGyroRTData+0xb6>
    {
        gyroRTBias[axis] = gyroSum[axis]  / 2000.0f;
    }

    gyroCalibrating = false;
 80004b0:	f240 63cc 	movw	r3, #1740	; 0x6cc
 80004b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004b8:	f04f 0200 	mov.w	r2, #0
 80004bc:	701a      	strb	r2, [r3, #0]
}
 80004be:	b005      	add	sp, #20
 80004c0:	bd00      	pop	{pc}
 80004c2:	bf00      	nop
 80004c4:	44fa0000 	.word	0x44fa0000
 80004c8:	00000000 	.word	0x00000000

080004cc <readAccel>:
///////////////////////////////////////////////////////////////////////////////
// Read Accel
///////////////////////////////////////////////////////////////////////////////

void readAccel(void)
{
 80004cc:	b500      	push	{lr}
 80004ce:	b085      	sub	sp, #20
    uint8_t buffer[6];

    i2cRead(I2C1, LSM303DLHC_ACCEL_ADDRESS, OUT_X_L_A, 6, buffer);
 80004d0:	ab02      	add	r3, sp, #8
 80004d2:	9300      	str	r3, [sp, #0]
 80004d4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80004d8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80004dc:	f04f 0132 	mov.w	r1, #50	; 0x32
 80004e0:	f04f 0228 	mov.w	r2, #40	; 0x28
 80004e4:	f04f 0306 	mov.w	r3, #6
 80004e8:	f002 fe78 	bl	80031dc <i2cRead>

    rawAccel[XAXIS].bytes[0] = buffer[0];
 80004ec:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80004f0:	f640 037c 	movw	r3, #2172	; 0x87c
 80004f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004f8:	701a      	strb	r2, [r3, #0]
    rawAccel[XAXIS].bytes[1] = buffer[1];
 80004fa:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80004fe:	f640 037c 	movw	r3, #2172	; 0x87c
 8000502:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000506:	705a      	strb	r2, [r3, #1]
    rawAccel[YAXIS].bytes[0] = buffer[2];
 8000508:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800050c:	f640 037c 	movw	r3, #2172	; 0x87c
 8000510:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000514:	709a      	strb	r2, [r3, #2]
    rawAccel[YAXIS].bytes[1] = buffer[3];
 8000516:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800051a:	f640 037c 	movw	r3, #2172	; 0x87c
 800051e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000522:	70da      	strb	r2, [r3, #3]
    rawAccel[ZAXIS].bytes[0] = buffer[4];
 8000524:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000528:	f640 037c 	movw	r3, #2172	; 0x87c
 800052c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000530:	711a      	strb	r2, [r3, #4]
    rawAccel[ZAXIS].bytes[1] = buffer[5];
 8000532:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8000536:	f640 037c 	movw	r3, #2172	; 0x87c
 800053a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800053e:	715a      	strb	r2, [r3, #5]
}
 8000540:	b005      	add	sp, #20
 8000542:	bd00      	pop	{pc}

08000544 <initAccel>:
///////////////////////////////////////////////////////////////////////////////
// Accel Initialization
///////////////////////////////////////////////////////////////////////////////

void initAccel(void)
{
 8000544:	b508      	push	{r3, lr}
	i2cWrite(I2C1, LSM303DLHC_ACCEL_ADDRESS, CTRL_REG5_A, BOOT);
 8000546:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800054a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800054e:	f04f 0132 	mov.w	r1, #50	; 0x32
 8000552:	f04f 0224 	mov.w	r2, #36	; 0x24
 8000556:	f04f 0380 	mov.w	r3, #128	; 0x80
 800055a:	f002 fd37 	bl	8002fcc <i2cWrite>

	delay(100);
 800055e:	f04f 0064 	mov.w	r0, #100	; 0x64
 8000562:	f005 fdc7 	bl	80060f4 <delay>

	i2cWrite(I2C1, LSM303DLHC_ACCEL_ADDRESS, CTRL_REG1_A, ODR_1344_HZ | AXES_ENABLE);
 8000566:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800056a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800056e:	f04f 0132 	mov.w	r1, #50	; 0x32
 8000572:	f04f 0220 	mov.w	r2, #32
 8000576:	f04f 0397 	mov.w	r3, #151	; 0x97
 800057a:	f002 fd27 	bl	8002fcc <i2cWrite>

    delay(10);
 800057e:	f04f 000a 	mov.w	r0, #10
 8000582:	f005 fdb7 	bl	80060f4 <delay>

    i2cWrite(I2C1, LSM303DLHC_ACCEL_ADDRESS, CTRL_REG4_A, FULLSCALE_4G);
 8000586:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800058a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800058e:	f04f 0132 	mov.w	r1, #50	; 0x32
 8000592:	f04f 0223 	mov.w	r2, #35	; 0x23
 8000596:	f04f 0310 	mov.w	r3, #16
 800059a:	f002 fd17 	bl	8002fcc <i2cWrite>

    delay(100);
 800059e:	f04f 0064 	mov.w	r0, #100	; 0x64
 80005a2:	f005 fda7 	bl	80060f4 <delay>

    computeAccelRTData();
 80005a6:	f000 f801 	bl	80005ac <computeAccelRTData>
}
 80005aa:	bd08      	pop	{r3, pc}

080005ac <computeAccelRTData>:
///////////////////////////////////////////////////////////////////////////////
// Compute Accel Runtime Data
///////////////////////////////////////////////////////////////////////////////

void computeAccelRTData(void)
{
 80005ac:	b500      	push	{lr}
 80005ae:	b085      	sub	sp, #20
    uint8_t  axis;
    uint16_t samples;

    float accelSum[3]  = { 0.0f, 0.0f, 0.0f };
 80005b0:	4b6e      	ldr	r3, [pc, #440]	; (800076c <computeAccelRTData+0x1c0>)
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	4b6d      	ldr	r3, [pc, #436]	; (800076c <computeAccelRTData+0x1c0>)
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	4b6c      	ldr	r3, [pc, #432]	; (800076c <computeAccelRTData+0x1c0>)
 80005ba:	9302      	str	r3, [sp, #8]

    accelCalibrating = true;
 80005bc:	f240 63d0 	movw	r3, #1744	; 0x6d0
 80005c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005c4:	f04f 0201 	mov.w	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]

    for (samples = 0; samples < 2000; samples++)
 80005ca:	f04f 0300 	mov.w	r3, #0
 80005ce:	f8ad 300c 	strh.w	r3, [sp, #12]
 80005d2:	e06b      	b.n	80006ac <computeAccelRTData+0x100>
    {
        readAccel();
 80005d4:	f7ff ff7a 	bl	80004cc <readAccel>

        accelSum[XAXIS]  += ((float)rawAccel[XAXIS].value - eepromConfig.accelBias[XAXIS]) * eepromConfig.accelScaleFactor[XAXIS];
 80005d8:	ed9d 7a00 	vldr	s14, [sp]
 80005dc:	f640 037c 	movw	r3, #2172	; 0x87c
 80005e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	b21b      	sxth	r3, r3
 80005e8:	ee07 3a90 	vmov	s15, r3
 80005ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80005f0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80005f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80005fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000600:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8000604:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000608:	edd3 7a04 	vldr	s15, [r3, #16]
 800060c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000614:	edcd 7a00 	vstr	s15, [sp]
        accelSum[YAXIS]  += ((float)rawAccel[YAXIS].value - eepromConfig.accelBias[YAXIS]) * eepromConfig.accelScaleFactor[YAXIS];
 8000618:	ed9d 7a01 	vldr	s14, [sp, #4]
 800061c:	f640 037c 	movw	r3, #2172	; 0x87c
 8000620:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000624:	885b      	ldrh	r3, [r3, #2]
 8000626:	b21b      	sxth	r3, r3
 8000628:	ee07 3a90 	vmov	s15, r3
 800062c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000630:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8000634:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000638:	edd3 7a02 	vldr	s15, [r3, #8]
 800063c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000640:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8000644:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000648:	edd3 7a05 	vldr	s15, [r3, #20]
 800064c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000654:	edcd 7a01 	vstr	s15, [sp, #4]
        accelSum[ZAXIS]  += ((float)rawAccel[ZAXIS].value - eepromConfig.accelBias[ZAXIS]) * eepromConfig.accelScaleFactor[ZAXIS];
 8000658:	ed9d 7a02 	vldr	s14, [sp, #8]
 800065c:	f640 037c 	movw	r3, #2172	; 0x87c
 8000660:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000664:	889b      	ldrh	r3, [r3, #4]
 8000666:	b21b      	sxth	r3, r3
 8000668:	ee07 3a90 	vmov	s15, r3
 800066c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000670:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8000674:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000678:	edd3 7a03 	vldr	s15, [r3, #12]
 800067c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000680:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8000684:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000688:	edd3 7a06 	vldr	s15, [r3, #24]
 800068c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000694:	edcd 7a02 	vstr	s15, [sp, #8]

        delayMicroseconds(1000);
 8000698:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800069c:	f005 fcf0 	bl	8006080 <delayMicroseconds>

    float accelSum[3]  = { 0.0f, 0.0f, 0.0f };

    accelCalibrating = true;

    for (samples = 0; samples < 2000; samples++)
 80006a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80006a4:	f103 0301 	add.w	r3, r3, #1
 80006a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80006ac:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80006b0:	f240 73cf 	movw	r3, #1999	; 0x7cf
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d98d      	bls.n	80005d4 <computeAccelRTData+0x28>
        accelSum[ZAXIS]  += ((float)rawAccel[ZAXIS].value - eepromConfig.accelBias[ZAXIS]) * eepromConfig.accelScaleFactor[ZAXIS];

        delayMicroseconds(1000);
    }

    for (axis = 0; axis < 3; axis++)
 80006b8:	f04f 0300 	mov.w	r3, #0
 80006bc:	f88d 300f 	strb.w	r3, [sp, #15]
 80006c0:	e019      	b.n	80006f6 <computeAccelRTData+0x14a>
    {
        accelSum[axis] = accelSum[axis]  / 2000.0f;
 80006c2:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80006c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80006ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80006ce:	a904      	add	r1, sp, #16
 80006d0:	18cb      	adds	r3, r1, r3
 80006d2:	ed13 7a04 	vldr	s14, [r3, #-16]
 80006d6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8000768 <computeAccelRTData+0x1bc>
 80006da:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80006de:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80006e2:	aa04      	add	r2, sp, #16
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	ed43 7a04 	vstr	s15, [r3, #-16]
        accelSum[ZAXIS]  += ((float)rawAccel[ZAXIS].value - eepromConfig.accelBias[ZAXIS]) * eepromConfig.accelScaleFactor[ZAXIS];

        delayMicroseconds(1000);
    }

    for (axis = 0; axis < 3; axis++)
 80006ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80006ee:	f103 0301 	add.w	r3, r3, #1
 80006f2:	f88d 300f 	strb.w	r3, [sp, #15]
 80006f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d9e1      	bls.n	80006c2 <computeAccelRTData+0x116>
    {
        accelSum[axis] = accelSum[axis]  / 2000.0f;
    }

    accelOneG = sqrt(accelSum[XAXIS] * accelSum[XAXIS] +
 80006fe:	ed9d 7a00 	vldr	s14, [sp]
 8000702:	eddd 7a00 	vldr	s15, [sp]
 8000706:	ee27 7a27 	vmul.f32	s14, s14, s15
    		         accelSum[YAXIS] * accelSum[YAXIS] +
 800070a:	eddd 6a01 	vldr	s13, [sp, #4]
 800070e:	eddd 7a01 	vldr	s15, [sp, #4]
 8000712:	ee66 7aa7 	vmul.f32	s15, s13, s15
    for (axis = 0; axis < 3; axis++)
    {
        accelSum[axis] = accelSum[axis]  / 2000.0f;
    }

    accelOneG = sqrt(accelSum[XAXIS] * accelSum[XAXIS] +
 8000716:	ee37 7a27 	vadd.f32	s14, s14, s15
    		         accelSum[YAXIS] * accelSum[YAXIS] +
    		         accelSum[ZAXIS] * accelSum[ZAXIS]);
 800071a:	eddd 6a02 	vldr	s13, [sp, #8]
 800071e:	eddd 7a02 	vldr	s15, [sp, #8]
 8000722:	ee66 7aa7 	vmul.f32	s15, s13, s15
    {
        accelSum[axis] = accelSum[axis]  / 2000.0f;
    }

    accelOneG = sqrt(accelSum[XAXIS] * accelSum[XAXIS] +
    		         accelSum[YAXIS] * accelSum[YAXIS] +
 8000726:	ee77 7a27 	vadd.f32	s15, s14, s15
    for (axis = 0; axis < 3; axis++)
    {
        accelSum[axis] = accelSum[axis]  / 2000.0f;
    }

    accelOneG = sqrt(accelSum[XAXIS] * accelSum[XAXIS] +
 800072a:	ee17 0a90 	vmov	r0, s15
 800072e:	f01f fffd 	bl	802072c <__aeabi_f2d>
 8000732:	4602      	mov	r2, r0
 8000734:	460b      	mov	r3, r1
 8000736:	4610      	mov	r0, r2
 8000738:	4619      	mov	r1, r3
 800073a:	f01d ff37 	bl	801e5ac <sqrt>
 800073e:	4602      	mov	r2, r0
 8000740:	460b      	mov	r3, r1
 8000742:	4610      	mov	r0, r2
 8000744:	4619      	mov	r1, r3
 8000746:	f020 fadf 	bl	8020d08 <__aeabi_d2f>
 800074a:	4602      	mov	r2, r0
 800074c:	f240 0300 	movw	r3, #0
 8000750:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000754:	601a      	str	r2, [r3, #0]
    		         accelSum[YAXIS] * accelSum[YAXIS] +
    		         accelSum[ZAXIS] * accelSum[ZAXIS]);

    accelCalibrating = false;
 8000756:	f240 63d0 	movw	r3, #1744	; 0x6d0
 800075a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800075e:	f04f 0200 	mov.w	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
}
 8000764:	b005      	add	sp, #20
 8000766:	bd00      	pop	{pc}
 8000768:	44fa0000 	.word	0x44fa0000
 800076c:	00000000 	.word	0x00000000

08000770 <readMag>:
///////////////////////////////////////////////////////////////////////////////
// Read Mag
///////////////////////////////////////////////////////////////////////////////

uint8_t readMag(void)
{
 8000770:	b500      	push	{lr}
 8000772:	b085      	sub	sp, #20
    uint8_t I2C_Buffer_Rx[6];

    i2cRead(I2C1, LSM303DLHC_MAG_ADDRESS, OUT_X_H_M, 6, I2C_Buffer_Rx);
 8000774:	ab02      	add	r3, sp, #8
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800077c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000780:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8000784:	f04f 0203 	mov.w	r2, #3
 8000788:	f04f 0306 	mov.w	r3, #6
 800078c:	f002 fd26 	bl	80031dc <i2cRead>

    rawMag[XAXIS].bytes[1] = I2C_Buffer_Rx[0];
 8000790:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8000794:	f640 0374 	movw	r3, #2164	; 0x874
 8000798:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800079c:	705a      	strb	r2, [r3, #1]
    rawMag[XAXIS].bytes[0] = I2C_Buffer_Rx[1];
 800079e:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80007a2:	f640 0374 	movw	r3, #2164	; 0x874
 80007a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007aa:	701a      	strb	r2, [r3, #0]
    rawMag[ZAXIS].bytes[1] = I2C_Buffer_Rx[2];
 80007ac:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80007b0:	f640 0374 	movw	r3, #2164	; 0x874
 80007b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007b8:	715a      	strb	r2, [r3, #5]
    rawMag[ZAXIS].bytes[0] = I2C_Buffer_Rx[3];
 80007ba:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80007be:	f640 0374 	movw	r3, #2164	; 0x874
 80007c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007c6:	711a      	strb	r2, [r3, #4]
    rawMag[YAXIS].bytes[1] = I2C_Buffer_Rx[4];
 80007c8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80007cc:	f640 0374 	movw	r3, #2164	; 0x874
 80007d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007d4:	70da      	strb	r2, [r3, #3]
    rawMag[YAXIS].bytes[0] = I2C_Buffer_Rx[5];
 80007d6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80007da:	f640 0374 	movw	r3, #2164	; 0x874
 80007de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007e2:	709a      	strb	r2, [r3, #2]

    return true;
 80007e4:	f04f 0301 	mov.w	r3, #1
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	b005      	add	sp, #20
 80007ec:	bd00      	pop	{pc}
 80007ee:	bf00      	nop

080007f0 <initMag>:
///////////////////////////////////////////////////////////////////////////////
// Mag Initialization
///////////////////////////////////////////////////////////////////////////////

void initMag(void)
{
 80007f0:	b508      	push	{r3, lr}
    magScaleFactor[XAXIS] = 1.0f;
 80007f2:	f640 0384 	movw	r3, #2180	; 0x884
 80007f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007fa:	4a22      	ldr	r2, [pc, #136]	; (8000884 <initMag+0x94>)
 80007fc:	601a      	str	r2, [r3, #0]
    magScaleFactor[YAXIS] = 1.0f;
 80007fe:	f640 0384 	movw	r3, #2180	; 0x884
 8000802:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000806:	4a1f      	ldr	r2, [pc, #124]	; (8000884 <initMag+0x94>)
 8000808:	605a      	str	r2, [r3, #4]
    magScaleFactor[ZAXIS] = 1.0f;
 800080a:	f640 0384 	movw	r3, #2180	; 0x884
 800080e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000812:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <initMag+0x94>)
 8000814:	609a      	str	r2, [r3, #8]

    i2cWrite(I2C1, LSM303DLHC_MAG_ADDRESS, CRA_REG_M, ODR_15_HZ);
 8000816:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800081a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800081e:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8000822:	f04f 0200 	mov.w	r2, #0
 8000826:	f04f 0310 	mov.w	r3, #16
 800082a:	f002 fbcf 	bl	8002fcc <i2cWrite>
    delay(20);
 800082e:	f04f 0014 	mov.w	r0, #20
 8000832:	f005 fc5f 	bl	80060f4 <delay>

    i2cWrite(I2C1, LSM303DLHC_MAG_ADDRESS, CRB_REG_M, FS_2P5_GA);
 8000836:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800083a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800083e:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8000842:	f04f 0201 	mov.w	r2, #1
 8000846:	f04f 0360 	mov.w	r3, #96	; 0x60
 800084a:	f002 fbbf 	bl	8002fcc <i2cWrite>
    delay(20);
 800084e:	f04f 0014 	mov.w	r0, #20
 8000852:	f005 fc4f 	bl	80060f4 <delay>

    i2cWrite(I2C1, LSM303DLHC_MAG_ADDRESS, MR_REG_M, CONTINUOUS_CONVERSION);
 8000856:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800085a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800085e:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8000862:	f04f 0202 	mov.w	r2, #2
 8000866:	f04f 0300 	mov.w	r3, #0
 800086a:	f002 fbaf 	bl	8002fcc <i2cWrite>
    delay(20);
 800086e:	f04f 0014 	mov.w	r0, #20
 8000872:	f005 fc3f 	bl	80060f4 <delay>

    readMag();
 8000876:	f7ff ff7b 	bl	8000770 <readMag>

    delay(20);
 800087a:	f04f 0014 	mov.w	r0, #20
 800087e:	f005 fc39 	bl	80060f4 <delay>
}
 8000882:	bd08      	pop	{r3, pc}
 8000884:	3f800000 	.word	0x3f800000

08000888 <displayAltitude>:
uint8_t lastHoldState    = 6;
int16_t lastAltitude     = 12345;     // bogus value to force update
int16_t lastHoldAltitude = 12345;     // bogus value to force update

void displayAltitude(float pressureAltitude, float altitudeReference, uint8_t altHoldState)
{
 8000888:	b510      	push	{r4, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	9005      	str	r0, [sp, #20]
 800088e:	9104      	str	r1, [sp, #16]
 8000890:	4613      	mov	r3, r2
 8000892:	f88d 300f 	strb.w	r3, [sp, #15]
    bool    isWriteNeeded = false;
 8000896:	f04f 0300 	mov.w	r3, #0
 800089a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    char    buf[7];
    int16_t currentAltitude;
    int16_t currentHoldAltitude;

    if (eepromConfig.metricUnits)
 800089e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80008a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008a6:	f893 3346 	ldrb.w	r3, [r3, #838]	; 0x346
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d018      	beq.n	80008e0 <displayAltitude+0x58>
    {
		currentAltitude     = (int16_t)(pressureAltitude  * 10.0f);
 80008ae:	ed9d 7a05 	vldr	s14, [sp, #20]
 80008b2:	eef2 7a04 	vmov.f32	s15, #36	; 0x24
 80008b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008be:	ee17 3a90 	vmov	r3, s15
 80008c2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		currentHoldAltitude = (int16_t)(altitudeReference * 10.0f);
 80008c6:	ed9d 7a04 	vldr	s14, [sp, #16]
 80008ca:	eef2 7a04 	vmov.f32	s15, #36	; 0x24
 80008ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008d6:	ee17 3a90 	vmov	r3, s15
 80008da:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80008de:	e017      	b.n	8000910 <displayAltitude+0x88>
	}
	else
	{
		currentAltitude     = (int16_t)(pressureAltitude  * 3.281f);
 80008e0:	ed9d 7a05 	vldr	s14, [sp, #20]
 80008e4:	eddf 7ab9 	vldr	s15, [pc, #740]	; 8000bcc <displayAltitude+0x344>
 80008e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008f0:	ee17 3a90 	vmov	r3, s15
 80008f4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        currentHoldAltitude = (int16_t)(altitudeReference * 3.281f);
 80008f8:	ed9d 7a04 	vldr	s14, [sp, #16]
 80008fc:	eddf 7ab3 	vldr	s15, [pc, #716]	; 8000bcc <displayAltitude+0x344>
 8000900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000908:	ee17 3a90 	vmov	r3, s15
 800090c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	}

    if ( lastAltitude != currentAltitude )
 8000910:	f240 0306 	movw	r3, #6
 8000914:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 800091e:	b21b      	sxth	r3, r3
 8000920:	429a      	cmp	r2, r3
 8000922:	f000 808e 	beq.w	8000a42 <displayAltitude+0x1ba>
    {
        if (eepromConfig.metricUnits)
 8000926:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800092a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800092e:	f893 3346 	ldrb.w	r3, [r3, #838]	; 0x346
 8000932:	2b00      	cmp	r3, #0
 8000934:	d065      	beq.n	8000a02 <displayAltitude+0x17a>
        {
		    if (abs(currentAltitude) < 100)
 8000936:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 800093a:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800093e:	db46      	blt.n	80009ce <displayAltitude+0x146>
 8000940:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8000944:	2b63      	cmp	r3, #99	; 0x63
 8000946:	dc42      	bgt.n	80009ce <displayAltitude+0x146>
		    {
                snprintf(buf,7,"\011%c%1d.%1dm",currentAltitude < 0 ? '-' : ' ', abs(currentAltitude/10),abs(currentAltitude%10));
 8000948:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 800094c:	2b00      	cmp	r3, #0
 800094e:	da02      	bge.n	8000956 <displayAltitude+0xce>
 8000950:	f04f 042d 	mov.w	r4, #45	; 0x2d
 8000954:	e001      	b.n	800095a <displayAltitude+0xd2>
 8000956:	f04f 0420 	mov.w	r4, #32
 800095a:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 800095e:	f246 6367 	movw	r3, #26215	; 0x6667
 8000962:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8000966:	fb83 1302 	smull	r1, r3, r3, r2
 800096a:	ea4f 01a3 	mov.w	r1, r3, asr #2
 800096e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000972:	1acb      	subs	r3, r1, r3
 8000974:	b29b      	uxth	r3, r3
 8000976:	b21b      	sxth	r3, r3
 8000978:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 800097c:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8000980:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8000984:	f246 6367 	movw	r3, #26215	; 0x6667
 8000988:	f2c6 6366 	movt	r3, #26214	; 0x6666
 800098c:	fb83 1302 	smull	r1, r3, r3, r2
 8000990:	ea4f 01a3 	mov.w	r1, r3, asr #2
 8000994:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000998:	1ac9      	subs	r1, r1, r3
 800099a:	460b      	mov	r3, r1
 800099c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80009a0:	185b      	adds	r3, r3, r1
 80009a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	bfb8      	it	lt
 80009b0:	425b      	neglt	r3, r3
 80009b2:	9000      	str	r0, [sp, #0]
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	ab06      	add	r3, sp, #24
 80009b8:	4618      	mov	r0, r3
 80009ba:	f04f 0107 	mov.w	r1, #7
 80009be:	f646 52e8 	movw	r2, #28136	; 0x6de8
 80009c2:	f6c0 0202 	movt	r2, #2050	; 0x802
 80009c6:	4623      	mov	r3, r4
 80009c8:	f020 fdbe 	bl	8021548 <snprintf>
 80009cc:	e025      	b.n	8000a1a <displayAltitude+0x192>
            }
            else
            {
                snprintf(buf,7,"\011%4dm",currentAltitude / 10);
 80009ce:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 80009d2:	f246 6367 	movw	r3, #26215	; 0x6667
 80009d6:	f2c6 6366 	movt	r3, #26214	; 0x6666
 80009da:	fb83 1302 	smull	r1, r3, r3, r2
 80009de:	ea4f 01a3 	mov.w	r1, r3, asr #2
 80009e2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80009e6:	1acb      	subs	r3, r1, r3
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	aa06      	add	r2, sp, #24
 80009ee:	4610      	mov	r0, r2
 80009f0:	f04f 0107 	mov.w	r1, #7
 80009f4:	f646 52f4 	movw	r2, #28148	; 0x6df4
 80009f8:	f6c0 0202 	movt	r2, #2050	; 0x802
 80009fc:	f020 fda4 	bl	8021548 <snprintf>
 8000a00:	e00b      	b.n	8000a1a <displayAltitude+0x192>
            }
        }
        else
        {
		    snprintf(buf,7,"\011%4df",currentAltitude);
 8000a02:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8000a06:	aa06      	add	r2, sp, #24
 8000a08:	4610      	mov	r0, r2
 8000a0a:	f04f 0107 	mov.w	r1, #7
 8000a0e:	f646 52fc 	movw	r2, #28156	; 0x6dfc
 8000a12:	f6c0 0202 	movt	r2, #2050	; 0x802
 8000a16:	f020 fd97 	bl	8021548 <snprintf>
	    }

        writeMax7456Chars(buf, 6, 0, ALTITUDE_ROW, ALTITUDE_COL);
 8000a1a:	f04f 0301 	mov.w	r3, #1
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	ab06      	add	r3, sp, #24
 8000a22:	4618      	mov	r0, r3
 8000a24:	f04f 0106 	mov.w	r1, #6
 8000a28:	f04f 0200 	mov.w	r2, #0
 8000a2c:	f04f 0301 	mov.w	r3, #1
 8000a30:	f003 f868 	bl	8003b04 <writeMax7456Chars>

        lastAltitude = currentAltitude;
 8000a34:	f240 0306 	movw	r3, #6
 8000a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a3c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8000a40:	801a      	strh	r2, [r3, #0]

    // AltitudeHold handling:
    // - show hold altitude when it is active
    // - show "panic" if 'paniced' out

    switch (altHoldState)
 8000a42:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d020      	beq.n	8000a8c <displayAltitude+0x204>
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	f000 80c0 	beq.w	8000bd0 <displayAltitude+0x348>
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	f040 80df 	bne.w	8000c14 <displayAltitude+0x38c>
    {
        case DISENGAGED:
            if (lastHoldState != DISENGAGED)
 8000a56:	f240 0304 	movw	r3, #4
 8000a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f000 80d2 	beq.w	8000c0a <displayAltitude+0x382>
            {
                lastHoldState = DISENGAGED;
 8000a66:	f240 0304 	movw	r3, #4
 8000a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a6e:	f04f 0200 	mov.w	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
                memset(buf,0,6);
 8000a74:	f04f 0200 	mov.w	r2, #0
 8000a78:	ab06      	add	r3, sp, #24
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	f04f 0200 	mov.w	r2, #0
 8000a80:	809a      	strh	r2, [r3, #4]
                isWriteNeeded = true;
 8000a82:	f04f 0301 	mov.w	r3, #1
 8000a86:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            }
            break;
 8000a8a:	e0be      	b.n	8000c0a <displayAltitude+0x382>

        case ENGAGED:
            if ((lastHoldState != ENGAGED) || (lastHoldAltitude != currentHoldAltitude))
 8000a8c:	f240 0304 	movw	r3, #4
 8000a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d10a      	bne.n	8000ab0 <displayAltitude+0x228>
 8000a9a:	f240 0308 	movw	r3, #8
 8000a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8000aa8:	b21b      	sxth	r3, r3
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	f000 80af 	beq.w	8000c0e <displayAltitude+0x386>
            {
                lastHoldState = ENGAGED;
 8000ab0:	f240 0304 	movw	r3, #4
 8000ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ab8:	f04f 0201 	mov.w	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
                lastHoldAltitude = currentHoldAltitude;
 8000abe:	f240 0308 	movw	r3, #8
 8000ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ac6:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8000aca:	801a      	strh	r2, [r3, #0]

                if (eepromConfig.metricUnits)
 8000acc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8000ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ad4:	f893 3346 	ldrb.w	r3, [r3, #838]	; 0x346
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d065      	beq.n	8000ba8 <displayAltitude+0x320>
			    {
				    if (abs(currentHoldAltitude)<100)
 8000adc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8000ae0:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8000ae4:	db46      	blt.n	8000b74 <displayAltitude+0x2ec>
 8000ae6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8000aea:	2b63      	cmp	r3, #99	; 0x63
 8000aec:	dc42      	bgt.n	8000b74 <displayAltitude+0x2ec>
				    {
					    snprintf(buf,7,"\012%c%1d.%1dm", currentHoldAltitude < 0 ? '-' : ' ',abs(currentHoldAltitude/10),abs(currentHoldAltitude%10));
 8000aee:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	da02      	bge.n	8000afc <displayAltitude+0x274>
 8000af6:	f04f 042d 	mov.w	r4, #45	; 0x2d
 8000afa:	e001      	b.n	8000b00 <displayAltitude+0x278>
 8000afc:	f04f 0420 	mov.w	r4, #32
 8000b00:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8000b04:	f246 6367 	movw	r3, #26215	; 0x6667
 8000b08:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8000b0c:	fb83 1302 	smull	r1, r3, r3, r2
 8000b10:	ea4f 01a3 	mov.w	r1, r3, asr #2
 8000b14:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000b18:	1acb      	subs	r3, r1, r3
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	b21b      	sxth	r3, r3
 8000b1e:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8000b22:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8000b26:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8000b2a:	f246 6367 	movw	r3, #26215	; 0x6667
 8000b2e:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8000b32:	fb83 1302 	smull	r1, r3, r3, r2
 8000b36:	ea4f 01a3 	mov.w	r1, r3, asr #2
 8000b3a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000b3e:	1ac9      	subs	r1, r1, r3
 8000b40:	460b      	mov	r3, r1
 8000b42:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000b46:	185b      	adds	r3, r3, r1
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	bfb8      	it	lt
 8000b56:	425b      	neglt	r3, r3
 8000b58:	9000      	str	r0, [sp, #0]
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	ab06      	add	r3, sp, #24
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f04f 0107 	mov.w	r1, #7
 8000b64:	f646 6204 	movw	r2, #28164	; 0x6e04
 8000b68:	f6c0 0202 	movt	r2, #2050	; 0x802
 8000b6c:	4623      	mov	r3, r4
 8000b6e:	f020 fceb 	bl	8021548 <snprintf>
 8000b72:	e025      	b.n	8000bc0 <displayAltitude+0x338>
					}
					else
					{
					    snprintf(buf,7,"\012%4dm",currentHoldAltitude/10);
 8000b74:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8000b78:	f246 6367 	movw	r3, #26215	; 0x6667
 8000b7c:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8000b80:	fb83 1302 	smull	r1, r3, r3, r2
 8000b84:	ea4f 01a3 	mov.w	r1, r3, asr #2
 8000b88:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000b8c:	1acb      	subs	r3, r1, r3
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	b21b      	sxth	r3, r3
 8000b92:	aa06      	add	r2, sp, #24
 8000b94:	4610      	mov	r0, r2
 8000b96:	f04f 0107 	mov.w	r1, #7
 8000b9a:	f646 6210 	movw	r2, #28176	; 0x6e10
 8000b9e:	f6c0 0202 	movt	r2, #2050	; 0x802
 8000ba2:	f020 fcd1 	bl	8021548 <snprintf>
 8000ba6:	e00b      	b.n	8000bc0 <displayAltitude+0x338>
					}
				}
				else
				{
					snprintf(buf,7,"\12%4df",currentHoldAltitude);
 8000ba8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8000bac:	aa06      	add	r2, sp, #24
 8000bae:	4610      	mov	r0, r2
 8000bb0:	f04f 0107 	mov.w	r1, #7
 8000bb4:	f646 6218 	movw	r2, #28184	; 0x6e18
 8000bb8:	f6c0 0202 	movt	r2, #2050	; 0x802
 8000bbc:	f020 fcc4 	bl	8021548 <snprintf>
				}

				isWriteNeeded = true;
 8000bc0:	f04f 0301 	mov.w	r3, #1
 8000bc4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            }
            break;
 8000bc8:	e021      	b.n	8000c0e <displayAltitude+0x386>
 8000bca:	bf00      	nop
 8000bcc:	4051fbe7 	.word	0x4051fbe7

        case PANIC:
            if (lastHoldState != PANIC)
 8000bd0:	f240 0304 	movw	r3, #4
 8000bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d019      	beq.n	8000c12 <displayAltitude+0x38a>
            {
                lastHoldState = PANIC;
 8000bde:	f240 0304 	movw	r3, #4
 8000be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000be6:	f04f 0202 	mov.w	r2, #2
 8000bea:	701a      	strb	r2, [r3, #0]
                snprintf(buf,7,"\12panic");
 8000bec:	ab06      	add	r3, sp, #24
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f04f 0107 	mov.w	r1, #7
 8000bf4:	f646 6220 	movw	r2, #28192	; 0x6e20
 8000bf8:	f6c0 0202 	movt	r2, #2050	; 0x802
 8000bfc:	f020 fca4 	bl	8021548 <snprintf>
                isWriteNeeded = true;
 8000c00:	f04f 0301 	mov.w	r3, #1
 8000c04:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            }
            break;
 8000c08:	e003      	b.n	8000c12 <displayAltitude+0x38a>
            {
                lastHoldState = DISENGAGED;
                memset(buf,0,6);
                isWriteNeeded = true;
            }
            break;
 8000c0a:	bf00      	nop
 8000c0c:	e002      	b.n	8000c14 <displayAltitude+0x38c>
					snprintf(buf,7,"\12%4df",currentHoldAltitude);
				}

				isWriteNeeded = true;
            }
            break;
 8000c0e:	bf00      	nop
 8000c10:	e000      	b.n	8000c14 <displayAltitude+0x38c>
            {
                lastHoldState = PANIC;
                snprintf(buf,7,"\12panic");
                isWriteNeeded = true;
            }
            break;
 8000c12:	bf00      	nop
    }

    if (isWriteNeeded)
 8000c14:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d00c      	beq.n	8000c36 <displayAltitude+0x3ae>
        writeMax7456Chars(buf, 6, 0, ALTITUDE_ROW, ALTITUDE_COL+6);
 8000c1c:	f04f 0307 	mov.w	r3, #7
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	ab06      	add	r3, sp, #24
 8000c24:	4618      	mov	r0, r3
 8000c26:	f04f 0106 	mov.w	r1, #6
 8000c2a:	f04f 0200 	mov.w	r2, #0
 8000c2e:	f04f 0301 	mov.w	r3, #1
 8000c32:	f002 ff67 	bl	8003b04 <writeMax7456Chars>
}
 8000c36:	b00a      	add	sp, #40	; 0x28
 8000c38:	bd10      	pop	{r4, pc}
 8000c3a:	bf00      	nop

08000c3c <displayArtificialHorizon>:

uint8_t ahOldLine[6]   = {0,0,0,0,0,0};
uint8_t lastAHflightMode = 25;

void displayArtificialHorizon(float roll, float pitch, uint8_t flightMode)
{
 8000c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	9005      	str	r0, [sp, #20]
 8000c42:	9104      	str	r1, [sp, #16]
 8000c44:	4613      	mov	r3, r2
 8000c46:	f88d 300f 	strb.w	r3, [sp, #15]
	char    reticle[2];
	char    rollLine;
    uint8_t i;
    uint8_t row;

    for (i = 0; i < 6; i++)
 8000c4a:	f04f 0300 	mov.w	r3, #0
 8000c4e:	f88d 301f 	strb.w	r3, [sp, #31]
 8000c52:	e106      	b.n	8000e62 <displayArtificialHorizon+0x226>
    {
        row = constrain(ahCenter +
 8000c54:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f01f fd52 	bl	8020708 <__aeabi_i2d>
 8000c64:	4604      	mov	r4, r0
 8000c66:	460d      	mov	r5, r1
			           (14.5 - (float)ahColumns[i]) * 12 * 1.4 * roll +
 8000c68:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8000c6c:	f646 6328 	movw	r3, #28200	; 0x6e28
 8000c70:	f6c0 0302 	movt	r3, #2050	; 0x802
 8000c74:	5c9b      	ldrb	r3, [r3, r2]
 8000c76:	ee06 3a90 	vmov	s13, r3
 8000c7a:	eef8 7a66 	vcvt.f32.u32	s15, s13
 8000c7e:	ee17 0a90 	vmov	r0, s15
 8000c82:	f01f fd53 	bl	802072c <__aeabi_f2d>
 8000c86:	4602      	mov	r2, r0
 8000c88:	460b      	mov	r3, r1
 8000c8a:	a194      	add	r1, pc, #592	; (adr r1, 8000edc <displayArtificialHorizon+0x2a0>)
 8000c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c90:	f01f fbec 	bl	802046c <__aeabi_dsub>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4610      	mov	r0, r2
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	a391      	add	r3, pc, #580	; (adr r3, 8000ee4 <displayArtificialHorizon+0x2a8>)
 8000c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca2:	f01f fd97 	bl	80207d4 <__aeabi_dmul>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	460b      	mov	r3, r1
 8000caa:	4610      	mov	r0, r2
 8000cac:	4619      	mov	r1, r3
 8000cae:	a38f      	add	r3, pc, #572	; (adr r3, 8000eec <displayArtificialHorizon+0x2b0>)
 8000cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb4:	f01f fd8e 	bl	80207d4 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4616      	mov	r6, r2
 8000cbe:	461f      	mov	r7, r3
 8000cc0:	9805      	ldr	r0, [sp, #20]
 8000cc2:	f01f fd33 	bl	802072c <__aeabi_f2d>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	460b      	mov	r3, r1
 8000cca:	4630      	mov	r0, r6
 8000ccc:	4639      	mov	r1, r7
 8000cce:	f01f fd81 	bl	80207d4 <__aeabi_dmul>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	460b      	mov	r3, r1
    uint8_t i;
    uint8_t row;

    for (i = 0; i < 6; i++)
    {
        row = constrain(ahCenter +
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	4629      	mov	r1, r5
 8000cda:	f01f fbc9 	bl	8020470 <__adddf3>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	4614      	mov	r4, r2
 8000ce4:	461d      	mov	r5, r3
			           (14.5 - (float)ahColumns[i]) * 12 * 1.4 * roll +
			           (pitch/AH_MAX_PITCH_ANGLE*(ahCenter - ahTopPixel)),
 8000ce6:	ed9d 7a04 	vldr	s14, [sp, #16]
 8000cea:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8000ed8 <displayArtificialHorizon+0x29c>
 8000cee:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000cf2:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	f640 03a9 	movw	r3, #2217	; 0x8a9
 8000d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	ee06 3a90 	vmov	s13, r3
 8000d0e:	eeb8 7ae6 	vcvt.f32.s32	s14, s13
 8000d12:	ee67 7a87 	vmul.f32	s15, s15, s14
    uint8_t row;

    for (i = 0; i < 6; i++)
    {
        row = constrain(ahCenter +
			           (14.5 - (float)ahColumns[i]) * 12 * 1.4 * roll +
 8000d16:	ee17 0a90 	vmov	r0, s15
 8000d1a:	f01f fd07 	bl	802072c <__aeabi_f2d>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4620      	mov	r0, r4
 8000d24:	4629      	mov	r1, r5
 8000d26:	f01f fba3 	bl	8020470 <__adddf3>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	460b      	mov	r3, r1
    uint8_t i;
    uint8_t row;

    for (i = 0; i < 6; i++)
    {
        row = constrain(ahCenter +
 8000d2e:	4610      	mov	r0, r2
 8000d30:	4619      	mov	r1, r3
 8000d32:	f01f ffe9 	bl	8020d08 <__aeabi_d2f>
 8000d36:	4602      	mov	r2, r0
 8000d38:	f640 03a9 	movw	r3, #2217	; 0x8a9
 8000d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	ee07 3a90 	vmov	s15, r3
 8000d46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d4a:	f640 03ab 	movw	r3, #2219	; 0x8ab
 8000d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	ee06 3a90 	vmov	s13, r3
 8000d58:	eef8 7a66 	vcvt.f32.u32	s15, s13
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	ee17 1a10 	vmov	r1, s14
 8000d62:	ee17 2a90 	vmov	r2, s15
 8000d66:	f015 fed3 	bl	8016b10 <constrain>
 8000d6a:	ee07 0a90 	vmov	s15, r0
 8000d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d72:	ee17 3a90 	vmov	r3, s15
 8000d76:	f88d 301e 	strb.w	r3, [sp, #30]
			           (14.5 - (float)ahColumns[i]) * 12 * 1.4 * roll +
			           (pitch/AH_MAX_PITCH_ANGLE*(ahCenter - ahTopPixel)),
			            ahTopPixel, ahBottomPixel);

        if ((row/18) != ahOldLine[i])
 8000d7a:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8000d7e:	f648 6339 	movw	r3, #36409	; 0x8e39
 8000d82:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8000d86:	fba3 0302 	umull	r0, r3, r3, r2
 8000d8a:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	f89d 101f 	ldrb.w	r1, [sp, #31]
 8000d94:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8000d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d9c:	5c5b      	ldrb	r3, [r3, r1]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d029      	beq.n	8000df6 <displayArtificialHorizon+0x1ba>
        {
            writeMax7456Chars(NULL, 1, 0, ahOldLine[i], ahColumns[i]);
 8000da2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8000da6:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8000daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dae:	5c9c      	ldrb	r4, [r3, r2]
 8000db0:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8000db4:	f646 6328 	movw	r3, #28200	; 0x6e28
 8000db8:	f6c0 0302 	movt	r3, #2050	; 0x802
 8000dbc:	5c9b      	ldrb	r3, [r3, r2]
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	f04f 0000 	mov.w	r0, #0
 8000dc4:	f04f 0101 	mov.w	r1, #1
 8000dc8:	f04f 0200 	mov.w	r2, #0
 8000dcc:	4623      	mov	r3, r4
 8000dce:	f002 fe99 	bl	8003b04 <writeMax7456Chars>
            ahOldLine[i] = row/18;
 8000dd2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8000dd6:	f89d 101e 	ldrb.w	r1, [sp, #30]
 8000dda:	f648 6339 	movw	r3, #36409	; 0x8e39
 8000dde:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8000de2:	fba3 0301 	umull	r0, r3, r3, r1
 8000de6:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8000dea:	b2d9      	uxtb	r1, r3
 8000dec:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8000df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000df4:	5499      	strb	r1, [r3, r2]
        }

        rollLine = LINE_ROW_0 + (row % 18);
 8000df6:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8000dfa:	f648 6339 	movw	r3, #36409	; 0x8e39
 8000dfe:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8000e02:	fba3 1302 	umull	r1, r3, r3, r2
 8000e06:	ea4f 0193 	mov.w	r1, r3, lsr #2
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000e10:	185b      	adds	r3, r3, r1
 8000e12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	f88d 301b 	strb.w	r3, [sp, #27]
        writeMax7456Chars(&rollLine, 1, 0, ahOldLine[i], ahColumns[i]);
 8000e24:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8000e28:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8000e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e30:	5c9c      	ldrb	r4, [r3, r2]
 8000e32:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8000e36:	f646 6328 	movw	r3, #28200	; 0x6e28
 8000e3a:	f6c0 0302 	movt	r3, #2050	; 0x802
 8000e3e:	5c9b      	ldrb	r3, [r3, r2]
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	f10d 031b 	add.w	r3, sp, #27
 8000e46:	4618      	mov	r0, r3
 8000e48:	f04f 0101 	mov.w	r1, #1
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	4623      	mov	r3, r4
 8000e52:	f002 fe57 	bl	8003b04 <writeMax7456Chars>
	char    reticle[2];
	char    rollLine;
    uint8_t i;
    uint8_t row;

    for (i = 0; i < 6; i++)
 8000e56:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8000e5a:	f103 0301 	add.w	r3, r3, #1
 8000e5e:	f88d 301f 	strb.w	r3, [sp, #31]
 8000e62:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8000e66:	2b05      	cmp	r3, #5
 8000e68:	f67f aef4 	bls.w	8000c54 <displayArtificialHorizon+0x18>
    // 0 - rate mode (no letter)
    // 1 - Attitude 'S'
    // 2 - GPS position hold 'P'
    // 3 - GPS navigation 'N'

    if (lastAHflightMode != flightMode)
 8000e6c:	f240 030a 	movw	r3, #10
 8000e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d027      	beq.n	8000ece <displayArtificialHorizon+0x292>
    {
        reticle[0] = flightMode * 2 + 1;
 8000e7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000e82:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	f103 0301 	add.w	r3, r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	f88d 301c 	strb.w	r3, [sp, #28]
        reticle[1] = reticle[0] + 1;
 8000e92:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8000e96:	f103 0301 	add.w	r3, r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	f88d 301d 	strb.w	r3, [sp, #29]

        //write 2 chars to row (middle), column 14
        writeMax7456Chars(reticle, 2, 0, reticleRow, RETICLE_COL);
 8000ea0:	f640 03ae 	movw	r3, #2222	; 0x8ae
 8000ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	f04f 020e 	mov.w	r2, #14
 8000eae:	9200      	str	r2, [sp, #0]
 8000eb0:	aa07      	add	r2, sp, #28
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	f04f 0102 	mov.w	r1, #2
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	f002 fe22 	bl	8003b04 <writeMax7456Chars>

        lastAHflightMode = flightMode;
 8000ec0:	f240 030a 	movw	r3, #10
 8000ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ec8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000ecc:	701a      	strb	r2, [r3, #0]
    }
}
 8000ece:	b009      	add	sp, #36	; 0x24
 8000ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	f3af 8000 	nop.w
 8000ed8:	3ec90fdb 	.word	0x3ec90fdb
 8000edc:	00000000 	.word	0x00000000
 8000ee0:	402d0000 	.word	0x402d0000
 8000ee4:	00000000 	.word	0x00000000
 8000ee8:	40280000 	.word	0x40280000
 8000eec:	66666666 	.word	0x66666666
 8000ef0:	3ff66666 	.word	0x3ff66666

08000ef4 <displayAttitude>:

uint8_t aiOldline[5] = {0,0,0,0,0};
uint8_t lastATTflightMode = 9;

void displayAttitude(float roll, float pitch, uint8_t flightMode)
{
 8000ef4:	b510      	push	{r4, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	9005      	str	r0, [sp, #20]
 8000efa:	9104      	str	r1, [sp, #16]
 8000efc:	4613      	mov	r3, r2
 8000efe:	f88d 300f 	strb.w	r3, [sp, #15]
	char     pitchLine;
	char     reticle[2];
	char     rollLine;
	float    gradient;
	uint8_t  aiRows[5] = {0,0,0,0,0};  //Holds the row, in pixels, of AI elements: pitch then roll from left to right.
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	f88d 3018 	strb.w	r3, [sp, #24]
 8000f0a:	f04f 0300 	mov.w	r3, #0
 8000f0e:	f88d 3019 	strb.w	r3, [sp, #25]
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	f88d 301a 	strb.w	r3, [sp, #26]
 8000f1a:	f04f 0300 	mov.w	r3, #0
 8000f1e:	f88d 301b 	strb.w	r3, [sp, #27]
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	f88d 301c 	strb.w	r3, [sp, #28]
    uint8_t  i;
    uint16_t distFar;
    uint16_t distNear;

    //Calculate row of new pitch lines
    aiRows[0] = constrain((int)aiCenter +
 8000f2a:	f640 03aa 	movw	r3, #2218	; 0x8aa
 8000f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
    		              (int)((pitch / AI_MAX_PITCH_ANGLE) * (aiCenter - aiTopPixel)),
 8000f36:	ed9d 7a04 	vldr	s14, [sp, #16]
 8000f3a:	eddf 7ad2 	vldr	s15, [pc, #840]	; 8001284 <displayAttitude+0x390>
 8000f3e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000f42:	f640 03aa 	movw	r3, #2218	; 0x8aa
 8000f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f640 03ac 	movw	r3, #2220	; 0x8ac
 8000f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	1acb      	subs	r3, r1, r3
 8000f5a:	ee06 3a10 	vmov	s12, r3
 8000f5e:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 8000f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f6a:	ee17 3a90 	vmov	r3, s15
    uint8_t  i;
    uint16_t distFar;
    uint16_t distNear;

    //Calculate row of new pitch lines
    aiRows[0] = constrain((int)aiCenter +
 8000f6e:	18d3      	adds	r3, r2, r3
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f78:	f640 03ac 	movw	r3, #2220	; 0x8ac
 8000f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	ee06 3a10 	vmov	s12, r3
 8000f86:	eeb8 7a46 	vcvt.f32.u32	s14, s12
 8000f8a:	f640 03ad 	movw	r3, #2221	; 0x8ad
 8000f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	ee06 3a10 	vmov	s12, r3
 8000f98:	eef8 7a46 	vcvt.f32.u32	s15, s12
 8000f9c:	ee16 0a90 	vmov	r0, s13
 8000fa0:	ee17 1a10 	vmov	r1, s14
 8000fa4:	ee17 2a90 	vmov	r2, s15
 8000fa8:	f015 fdb2 	bl	8016b10 <constrain>
 8000fac:	ee07 0a90 	vmov	s15, r0
 8000fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb4:	ee17 3a90 	vmov	r3, s15
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	f88d 3018 	strb.w	r3, [sp, #24]
    		              (int)((pitch / AI_MAX_PITCH_ANGLE) * (aiCenter - aiTopPixel)),
    		               aiTopPixel, aiBottomPixel);

    pitchLine = LINE_ROW_0 + (aiRows[0] % 18);
 8000fbe:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8000fc2:	f648 6339 	movw	r3, #36409	; 0x8e39
 8000fc6:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8000fca:	fba3 0302 	umull	r0, r3, r3, r2
 8000fce:	ea4f 0193 	mov.w	r1, r3, lsr #2
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000fd8:	185b      	adds	r3, r3, r1
 8000fda:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    if (aiOldline[0] != aiRows[0] / 18)
 8000fec:	f240 63f8 	movw	r3, #1784	; 0x6f8
 8000ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ff4:	781a      	ldrb	r2, [r3, #0]
 8000ff6:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8000ffa:	f648 6339 	movw	r3, #36409	; 0x8e39
 8000ffe:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8001002:	fba3 0301 	umull	r0, r3, r3, r1
 8001006:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800100a:	b2db      	uxtb	r3, r3
 800100c:	429a      	cmp	r2, r3
 800100e:	d02f      	beq.n	8001070 <displayAttitude+0x17c>
    {
        //Remove old pitch lines if not overwritten by new ones
        writeMax7456Chars(NULL, 1, 0, aiOldline[0], PITCH_L_COL);
 8001010:	f240 63f8 	movw	r3, #1784	; 0x6f8
 8001014:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	f04f 0207 	mov.w	r2, #7
 800101e:	9200      	str	r2, [sp, #0]
 8001020:	f04f 0000 	mov.w	r0, #0
 8001024:	f04f 0101 	mov.w	r1, #1
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	f002 fd6a 	bl	8003b04 <writeMax7456Chars>
        writeMax7456Chars(NULL, 1, 0, aiOldline[0], PITCH_R_COL);
 8001030:	f240 63f8 	movw	r3, #1784	; 0x6f8
 8001034:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	f04f 0216 	mov.w	r2, #22
 800103e:	9200      	str	r2, [sp, #0]
 8001040:	f04f 0000 	mov.w	r0, #0
 8001044:	f04f 0101 	mov.w	r1, #1
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f002 fd5a 	bl	8003b04 <writeMax7456Chars>
        aiOldline[0] = aiRows[0] / 18;
 8001050:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8001054:	f648 6339 	movw	r3, #36409	; 0x8e39
 8001058:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 800105c:	fba3 1302 	umull	r1, r3, r3, r2
 8001060:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8001064:	b2da      	uxtb	r2, r3
 8001066:	f240 63f8 	movw	r3, #1784	; 0x6f8
 800106a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800106e:	701a      	strb	r2, [r3, #0]
    }

    //Write new pitch lines
    writeMax7456Chars(&pitchLine, 1, 0, aiOldline[0], PITCH_L_COL);
 8001070:	f240 63f8 	movw	r3, #1784	; 0x6f8
 8001074:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	f04f 0207 	mov.w	r2, #7
 800107e:	9200      	str	r2, [sp, #0]
 8001080:	f10d 0223 	add.w	r2, sp, #35	; 0x23
 8001084:	4610      	mov	r0, r2
 8001086:	f04f 0101 	mov.w	r1, #1
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	f002 fd39 	bl	8003b04 <writeMax7456Chars>
    writeMax7456Chars(&pitchLine, 1, 0, aiOldline[0], PITCH_R_COL);
 8001092:	f240 63f8 	movw	r3, #1784	; 0x6f8
 8001096:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	f04f 0216 	mov.w	r2, #22
 80010a0:	9200      	str	r2, [sp, #0]
 80010a2:	f10d 0223 	add.w	r2, sp, #35	; 0x23
 80010a6:	4610      	mov	r0, r2
 80010a8:	f04f 0101 	mov.w	r1, #1
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f002 fd28 	bl	8003b04 <writeMax7456Chars>

    //Calculate row (in pixels) of new roll lines
    distFar  = (ROLL_COLUMNS[3] - (RETICLE_COL + 1))*12 + 6; //horizontal pixels between centre of reticle and centre of far angle line
 80010b4:	f646 6330 	movw	r3, #28208	; 0x6e30
 80010b8:	f6c0 0302 	movt	r3, #2050	; 0x802
 80010bc:	78db      	ldrb	r3, [r3, #3]
 80010be:	461a      	mov	r2, r3
 80010c0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80010c4:	18d3      	adds	r3, r2, r3
 80010c6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f1a3 03ae 	sub.w	r3, r3, #174	; 0xae
 80010d0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    distNear = (ROLL_COLUMNS[2] - (RETICLE_COL + 1))*12 + 6;
 80010d4:	f646 6330 	movw	r3, #28208	; 0x6e30
 80010d8:	f6c0 0302 	movt	r3, #2050	; 0x802
 80010dc:	789b      	ldrb	r3, [r3, #2]
 80010de:	461a      	mov	r2, r3
 80010e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80010e4:	18d3      	adds	r3, r2, r3
 80010e6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	f1a3 03ae 	sub.w	r3, r3, #174	; 0xae
 80010f0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    gradient = 1.4f * roll; // was "tan(roll)", yes rude but damn fast !!
 80010f4:	ed9d 7a05 	vldr	s14, [sp, #20]
 80010f8:	eddf 7a63 	vldr	s15, [pc, #396]	; 8001288 <displayAttitude+0x394>
 80010fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001100:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24

    aiRows[1] = constrain( 2 * aiCenter - aiRows[4], aiTopPixel, aiBottomPixel);
 8001104:	f640 03aa 	movw	r3, #2218	; 0x8aa
 8001108:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8001112:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	ee06 3a10 	vmov	s12, r3
 800111c:	eef8 6ac6 	vcvt.f32.s32	s13, s12
 8001120:	f640 03ac 	movw	r3, #2220	; 0x8ac
 8001124:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001132:	f640 03ad 	movw	r3, #2221	; 0x8ad
 8001136:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	ee06 3a10 	vmov	s12, r3
 8001140:	eef8 7a46 	vcvt.f32.u32	s15, s12
 8001144:	ee16 0a90 	vmov	r0, s13
 8001148:	ee17 1a10 	vmov	r1, s14
 800114c:	ee17 2a90 	vmov	r2, s15
 8001150:	f015 fcde 	bl	8016b10 <constrain>
 8001154:	ee07 0a90 	vmov	s15, r0
 8001158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800115c:	ee17 3a90 	vmov	r3, s15
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f88d 3019 	strb.w	r3, [sp, #25]
    aiRows[2] = constrain( 2 * aiCenter - aiRows[3], aiTopPixel, aiBottomPixel);
 8001166:	f640 03aa 	movw	r3, #2218	; 0x8aa
 800116a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8001174:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	ee07 3a90 	vmov	s15, r3
 800117e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001182:	f640 03ac 	movw	r3, #2220	; 0x8ac
 8001186:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	ee06 3a10 	vmov	s12, r3
 8001190:	eeb8 7a46 	vcvt.f32.u32	s14, s12
 8001194:	f640 03ad 	movw	r3, #2221	; 0x8ad
 8001198:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	ee06 3a10 	vmov	s12, r3
 80011a2:	eef8 7a46 	vcvt.f32.u32	s15, s12
 80011a6:	ee16 0a90 	vmov	r0, s13
 80011aa:	ee17 1a10 	vmov	r1, s14
 80011ae:	ee17 2a90 	vmov	r2, s15
 80011b2:	f015 fcad 	bl	8016b10 <constrain>
 80011b6:	ee07 0a90 	vmov	s15, r0
 80011ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011be:	ee17 3a90 	vmov	r3, s15
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	f88d 301a 	strb.w	r3, [sp, #26]
    aiRows[3] = constrain(aiCenter - (int)(((float)distNear) * gradient), aiTopPixel, aiBottomPixel);
 80011c8:	f640 03aa 	movw	r3, #2218	; 0x8aa
 80011cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80011d6:	ee06 2a90 	vmov	s13, r2
 80011da:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 80011de:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80011e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ea:	ee17 2a90 	vmov	r2, s15
 80011ee:	1a9b      	subs	r3, r3, r2
 80011f0:	ee07 3a90 	vmov	s15, r3
 80011f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011f8:	f640 03ac 	movw	r3, #2220	; 0x8ac
 80011fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	ee06 3a10 	vmov	s12, r3
 8001206:	eeb8 7a46 	vcvt.f32.u32	s14, s12
 800120a:	f640 03ad 	movw	r3, #2221	; 0x8ad
 800120e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	ee06 3a10 	vmov	s12, r3
 8001218:	eef8 7a46 	vcvt.f32.u32	s15, s12
 800121c:	ee16 0a90 	vmov	r0, s13
 8001220:	ee17 1a10 	vmov	r1, s14
 8001224:	ee17 2a90 	vmov	r2, s15
 8001228:	f015 fc72 	bl	8016b10 <constrain>
 800122c:	ee07 0a90 	vmov	s15, r0
 8001230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001234:	ee17 3a90 	vmov	r3, s15
 8001238:	b2db      	uxtb	r3, r3
 800123a:	f88d 301b 	strb.w	r3, [sp, #27]
    aiRows[4] = constrain(aiCenter - (int)(((float)distFar)  * gradient), aiTopPixel, aiBottomPixel);
 800123e:	f640 03aa 	movw	r3, #2218	; 0x8aa
 8001242:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800124c:	ee06 2a90 	vmov	s13, r2
 8001250:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 8001254:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8001258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001260:	ee17 2a90 	vmov	r2, s15
 8001264:	1a9b      	subs	r3, r3, r2
 8001266:	ee07 3a90 	vmov	s15, r3
 800126a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800126e:	f640 03ac 	movw	r3, #2220	; 0x8ac
 8001272:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	ee06 3a10 	vmov	s12, r3
 800127c:	eeb8 7a46 	vcvt.f32.u32	s14, s12
 8001280:	e004      	b.n	800128c <displayAttitude+0x398>
 8001282:	bf00      	nop
 8001284:	3f490fdb 	.word	0x3f490fdb
 8001288:	3fb33333 	.word	0x3fb33333
 800128c:	f640 03ad 	movw	r3, #2221	; 0x8ad
 8001290:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	ee06 3a10 	vmov	s12, r3
 800129a:	eef8 7a46 	vcvt.f32.u32	s15, s12
 800129e:	ee16 0a90 	vmov	r0, s13
 80012a2:	ee17 1a10 	vmov	r1, s14
 80012a6:	ee17 2a90 	vmov	r2, s15
 80012aa:	f015 fc31 	bl	8016b10 <constrain>
 80012ae:	ee07 0a90 	vmov	s15, r0
 80012b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b6:	ee17 3a90 	vmov	r3, s15
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f88d 301c 	strb.w	r3, [sp, #28]

    //writing new roll lines to screen
    for (i = 1; i < 5; i++ )
 80012c0:	f04f 0301 	mov.w	r3, #1
 80012c4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80012c8:	e083      	b.n	80013d2 <displayAttitude+0x4de>
    {
        // clear previous roll lines if not going to overwrite
        if (aiOldline[i] != aiRows[i] / 18)
 80012ca:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80012ce:	f240 63f8 	movw	r3, #1784	; 0x6f8
 80012d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012d6:	5c9a      	ldrb	r2, [r3, r2]
 80012d8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80012dc:	a80c      	add	r0, sp, #48	; 0x30
 80012de:	18c3      	adds	r3, r0, r3
 80012e0:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 80012e4:	f648 6339 	movw	r3, #36409	; 0x8e39
 80012e8:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 80012ec:	fba3 0301 	umull	r0, r3, r3, r1
 80012f0:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d02f      	beq.n	800135a <displayAttitude+0x466>
        {
            writeMax7456Chars(NULL, 1, 0, aiOldline[i], ROLL_COLUMNS[i-1]);
 80012fa:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80012fe:	f240 63f8 	movw	r3, #1784	; 0x6f8
 8001302:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001306:	5c9c      	ldrb	r4, [r3, r2]
 8001308:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800130c:	f103 32ff 	add.w	r2, r3, #4294967295
 8001310:	f646 6330 	movw	r3, #28208	; 0x6e30
 8001314:	f6c0 0302 	movt	r3, #2050	; 0x802
 8001318:	5c9b      	ldrb	r3, [r3, r2]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	f04f 0000 	mov.w	r0, #0
 8001320:	f04f 0101 	mov.w	r1, #1
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4623      	mov	r3, r4
 800132a:	f002 fbeb 	bl	8003b04 <writeMax7456Chars>
            aiOldline[i] = aiRows[i]/18;
 800132e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8001332:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8001336:	a90c      	add	r1, sp, #48	; 0x30
 8001338:	18cb      	adds	r3, r1, r3
 800133a:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800133e:	f648 6339 	movw	r3, #36409	; 0x8e39
 8001342:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8001346:	fba3 0301 	umull	r0, r3, r3, r1
 800134a:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800134e:	b2d9      	uxtb	r1, r3
 8001350:	f240 63f8 	movw	r3, #1784	; 0x6f8
 8001354:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001358:	5499      	strb	r1, [r3, r2]
        }

        //converting rows (in pixels) to character addresses used for the 'lines'
        rollLine = LINE_ROW_0 + (aiRows[i] % 18);
 800135a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800135e:	a90c      	add	r1, sp, #48	; 0x30
 8001360:	18cb      	adds	r3, r1, r3
 8001362:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001366:	f648 6339 	movw	r3, #36409	; 0x8e39
 800136a:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 800136e:	fba3 0302 	umull	r0, r3, r3, r2
 8001372:	ea4f 0193 	mov.w	r1, r3, lsr #2
 8001376:	460b      	mov	r3, r1
 8001378:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800137c:	185b      	adds	r3, r3, r1
 800137e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	b2db      	uxtb	r3, r3
 8001386:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800138a:	b2db      	uxtb	r3, r3
 800138c:	f88d 301f 	strb.w	r3, [sp, #31]
        writeMax7456Chars(&rollLine, 1, 0, aiOldline[i], ROLL_COLUMNS[i-1]);
 8001390:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8001394:	f240 63f8 	movw	r3, #1784	; 0x6f8
 8001398:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800139c:	5c9c      	ldrb	r4, [r3, r2]
 800139e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80013a2:	f103 32ff 	add.w	r2, r3, #4294967295
 80013a6:	f646 6330 	movw	r3, #28208	; 0x6e30
 80013aa:	f6c0 0302 	movt	r3, #2050	; 0x802
 80013ae:	5c9b      	ldrb	r3, [r3, r2]
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	f10d 031f 	add.w	r3, sp, #31
 80013b6:	4618      	mov	r0, r3
 80013b8:	f04f 0101 	mov.w	r1, #1
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	4623      	mov	r3, r4
 80013c2:	f002 fb9f 	bl	8003b04 <writeMax7456Chars>
    aiRows[2] = constrain( 2 * aiCenter - aiRows[3], aiTopPixel, aiBottomPixel);
    aiRows[3] = constrain(aiCenter - (int)(((float)distNear) * gradient), aiTopPixel, aiBottomPixel);
    aiRows[4] = constrain(aiCenter - (int)(((float)distFar)  * gradient), aiTopPixel, aiBottomPixel);

    //writing new roll lines to screen
    for (i = 1; i < 5; i++ )
 80013c6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80013ca:	f103 0301 	add.w	r3, r3, #1
 80013ce:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80013d2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	f67f af77 	bls.w	80012ca <displayAttitude+0x3d6>
    // 0 - rate mode (no letter)
    // 1 - Attitude 'S'
    // 2 - GPS position hold 'P'
    // 3 - GPS navigation 'N'

    if (lastATTflightMode != flightMode)
 80013dc:	f240 030b 	movw	r3, #11
 80013e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d027      	beq.n	800143e <displayAttitude+0x54a>
    {
        reticle[0] = flightMode * 2 + 1;
 80013ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80013f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	f103 0301 	add.w	r3, r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	f88d 3020 	strb.w	r3, [sp, #32]
        reticle[1] = reticle[0] + 1;
 8001402:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001406:	f103 0301 	add.w	r3, r3, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        writeMax7456Chars(reticle, 2, 0, reticleRow, RETICLE_COL); //write 2 chars to row (middle), column 14
 8001410:	f640 03ae 	movw	r3, #2222	; 0x8ae
 8001414:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	f04f 020e 	mov.w	r2, #14
 800141e:	9200      	str	r2, [sp, #0]
 8001420:	aa08      	add	r2, sp, #32
 8001422:	4610      	mov	r0, r2
 8001424:	f04f 0102 	mov.w	r1, #2
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f002 fb6a 	bl	8003b04 <writeMax7456Chars>
        lastATTflightMode = flightMode;
 8001430:	f240 030b 	movw	r3, #11
 8001434:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001438:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800143c:	701a      	strb	r2, [r3, #0]
    }
}
 800143e:	b00c      	add	sp, #48	; 0x30
 8001440:	bd10      	pop	{r4, pc}
 8001442:	bf00      	nop

08001444 <displayHeading>:
#define COMPASS_COL 13

int16_t lastOSDheading = 361; // bogus value to force update

void displayHeading(float currentHeading)
{
 8001444:	b500      	push	{lr}
 8001446:	b087      	sub	sp, #28
 8001448:	9003      	str	r0, [sp, #12]
	char buf[6];
    int16_t currentHeadingDeg;

    currentHeadingDeg = (int16_t)((currentHeading * 180.0f / PI) + 360.0f) % 360;
 800144a:	ed9d 7a03 	vldr	s14, [sp, #12]
 800144e:	eddf 7a28 	vldr	s15, [pc, #160]	; 80014f0 <displayHeading+0xac>
 8001452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001456:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80014f4 <displayHeading+0xb0>
 800145a:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800145e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80014f8 <displayHeading+0xb4>
 8001462:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146a:	ee17 3a90 	vmov	r3, s15
 800146e:	b29b      	uxth	r3, r3
 8001470:	b21b      	sxth	r3, r3
 8001472:	f246 02b7 	movw	r2, #24759	; 0x60b7
 8001476:	f2cb 620b 	movt	r2, #46603	; 0xb60b
 800147a:	fb82 1203 	smull	r1, r2, r2, r3
 800147e:	18d2      	adds	r2, r2, r3
 8001480:	ea4f 2122 	mov.w	r1, r2, asr #8
 8001484:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8001488:	1a8a      	subs	r2, r1, r2
 800148a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800148e:	fb01 f202 	mul.w	r2, r1, r2
 8001492:	1a9b      	subs	r3, r3, r2
 8001494:	f8ad 3016 	strh.w	r3, [sp, #22]

    if (currentHeadingDeg != lastOSDheading)
 8001498:	f240 030c 	movw	r3, #12
 800149c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d01f      	beq.n	80014ec <displayHeading+0xa8>
    {
    	snprintf(buf ,6, "\026%3d\027", currentHeadingDeg); // \026 is compass \027 is degree symbol
 80014ac:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80014b0:	aa04      	add	r2, sp, #16
 80014b2:	4610      	mov	r0, r2
 80014b4:	f04f 0106 	mov.w	r1, #6
 80014b8:	f646 6234 	movw	r2, #28212	; 0x6e34
 80014bc:	f6c0 0202 	movt	r2, #2050	; 0x802
 80014c0:	f020 f842 	bl	8021548 <snprintf>

    	writeMax7456Chars(buf, 5, 0, COMPASS_ROW, COMPASS_COL);
 80014c4:	f04f 030d 	mov.w	r3, #13
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	ab04      	add	r3, sp, #16
 80014cc:	4618      	mov	r0, r3
 80014ce:	f04f 0105 	mov.w	r1, #5
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	f04f 0301 	mov.w	r3, #1
 80014da:	f002 fb13 	bl	8003b04 <writeMax7456Chars>

        lastOSDheading = currentHeadingDeg;
 80014de:	f240 030c 	movw	r3, #12
 80014e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014e6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80014ea:	801a      	strh	r2, [r3, #0]
    }
}
 80014ec:	b007      	add	sp, #28
 80014ee:	bd00      	pop	{pc}
 80014f0:	43340000 	.word	0x43340000
 80014f4:	40490fdb 	.word	0x40490fdb
 80014f8:	43b40000 	.word	0x43b40000
 80014fc:	f3af 8000 	nop.w

08001500 <initGPS>:
///////////////////////////////////////////////////////////////////////////////
// Initialize GPS Receiver
///////////////////////////////////////////////////////////////////////////////

void initGPS(void)
{
 8001500:	b500      	push	{lr}
 8001502:	b083      	sub	sp, #12
    uint8_t i;

    switch(eepromConfig.gpsType)
 8001504:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8001508:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800150c:	f893 334b 	ldrb.w	r3, [r3, #843]	; 0x34b
 8001510:	2b03      	cmp	r3, #3
 8001512:	d87e      	bhi.n	8001612 <initGPS+0x112>
 8001514:	a201      	add	r2, pc, #4	; (adr r2, 800151c <initGPS+0x1c>)
 8001516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151a:	bf00      	nop
 800151c:	08001613 	.word	0x08001613
 8001520:	0800152d 	.word	0x0800152d
 8001524:	08001579 	.word	0x08001579
 8001528:	080015c5 	.word	0x080015c5
		    break;

		///////////////////////////////

		case MEDIATEK_3329_BINARY:     // MediaTek 3329 in binary mode
		    gpsPrint("$PGCMD,16,0,0,0,0,0*6A\r\n");  // Set Binary Output
 800152c:	f646 604c 	movw	r0, #28236	; 0x6e4c
 8001530:	f6c0 0002 	movt	r0, #2050	; 0x802
 8001534:	f001 fcf8 	bl	8002f28 <gpsPrint>
            gpsPrint("$PMTK220,200*2C\r\n");         // Set 5 Hz Output
 8001538:	f646 6068 	movw	r0, #28264	; 0x6e68
 800153c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8001540:	f001 fcf2 	bl	8002f28 <gpsPrint>
            gpsPrint("$PMTK313,1*2E\r\n");           // Set SBAS On - Not sure if this does anything on MTK16 software
 8001544:	f646 607c 	movw	r0, #28284	; 0x6e7c
 8001548:	f6c0 0002 	movt	r0, #2050	; 0x802
 800154c:	f001 fcec 	bl	8002f28 <gpsPrint>
            gpsPrint("$PMTK301,2*2E\r\n");           // Set WAAS On - Not sure if this does anything on MTK16 software
 8001550:	f646 608c 	movw	r0, #28300	; 0x6e8c
 8001554:	f6c0 0002 	movt	r0, #2050	; 0x802
 8001558:	f001 fce6 	bl	8002f28 <gpsPrint>
            gpsPrint("$PMTK397,0*23\r\n");           // Set Nav Speed Threshold to 0
 800155c:	f646 609c 	movw	r0, #28316	; 0x6e9c
 8001560:	f6c0 0002 	movt	r0, #2050	; 0x802
 8001564:	f001 fce0 	bl	8002f28 <gpsPrint>

            mtk19ProcessDataState = MTK19_WAIT_SYNC1;
 8001568:	f640 034d 	movw	r3, #2125	; 0x84d
 800156c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
            break;
 8001576:	e04c      	b.n	8001612 <initGPS+0x112>

        ///////////////////////////////

        case MEDIATEK_3329_NMEA:       // MediaTek 3329 in NMEA mode
            gpsPrint("$PMTK314,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n");  // GPRMC, GPGGA and GPGSA
 8001578:	f646 60ac 	movw	r0, #28332	; 0x6eac
 800157c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8001580:	f001 fcd2 	bl	8002f28 <gpsPrint>
			gpsPrint("$PMTK220,200*2C\r\n");                                    // Set 5 Hz Update Rate
 8001584:	f646 6068 	movw	r0, #28264	; 0x6e68
 8001588:	f6c0 0002 	movt	r0, #2050	; 0x802
 800158c:	f001 fccc 	bl	8002f28 <gpsPrint>
			gpsPrint("$PMTK313,1*2E\r\n");                                      // Set SBAS On
 8001590:	f646 607c 	movw	r0, #28284	; 0x6e7c
 8001594:	f6c0 0002 	movt	r0, #2050	; 0x802
 8001598:	f001 fcc6 	bl	8002f28 <gpsPrint>
            gpsPrint("$PMTK301,2*2E\r\n");                                      // Set WAAS On
 800159c:	f646 608c 	movw	r0, #28300	; 0x6e8c
 80015a0:	f6c0 0002 	movt	r0, #2050	; 0x802
 80015a4:	f001 fcc0 	bl	8002f28 <gpsPrint>
            gpsPrint("$PMTK397,0*23\r\n");                                      // Set Nav Speed Threshold to 0
 80015a8:	f646 609c 	movw	r0, #28316	; 0x6e9c
 80015ac:	f6c0 0002 	movt	r0, #2050	; 0x802
 80015b0:	f001 fcba 	bl	8002f28 <gpsPrint>

            nmeaProcessDataState = WAIT_START;
 80015b4:	f640 034c 	movw	r3, #2124	; 0x84c
 80015b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
            break;
 80015c2:	e026      	b.n	8001612 <initGPS+0x112>

        ///////////////////////////////

        case UBLOX:             // UBLOX in binary mode
        	for (i = 0; i < sizeof(ubx5Hz); i++)                // Set 5 Hz Update Rate
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	f88d 3007 	strb.w	r3, [sp, #7]
 80015cc:	e00f      	b.n	80015ee <initGPS+0xee>
        	   gpsWrite(ubx5Hz[i]);
 80015ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80015d2:	f646 633c 	movw	r3, #28220	; 0x6e3c
 80015d6:	f6c0 0302 	movt	r3, #2050	; 0x802
 80015da:	5c9b      	ldrb	r3, [r3, r2]
 80015dc:	4618      	mov	r0, r3
 80015de:	f001 fc6d 	bl	8002ebc <gpsWrite>
            break;

        ///////////////////////////////

        case UBLOX:             // UBLOX in binary mode
        	for (i = 0; i < sizeof(ubx5Hz); i++)                // Set 5 Hz Update Rate
 80015e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80015e6:	f103 0301 	add.w	r3, r3, #1
 80015ea:	f88d 3007 	strb.w	r3, [sp, #7]
 80015ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80015f2:	2b0d      	cmp	r3, #13
 80015f4:	d9eb      	bls.n	80015ce <initGPS+0xce>
        	   gpsWrite(ubx5Hz[i]);

        	gpsPrint("$PUBX,41,1,0003,0001,38400,0*26\r\n");  // Set Binary Output
 80015f6:	f646 60e0 	movw	r0, #28384	; 0x6ee0
 80015fa:	f6c0 0002 	movt	r0, #2050	; 0x802
 80015fe:	f001 fc93 	bl	8002f28 <gpsPrint>

        	ubloxProcessDataState = WAIT_SYNC1;
 8001602:	f640 0368 	movw	r3, #2152	; 0x868
 8001606:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
        	break;
 8001610:	bf00      	nop

        ///////////////////////////////
	}

	sensors.gpsLatitude    = GPS_INVALID_ANGLE;
 8001612:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001616:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800161a:	4a20      	ldr	r2, [pc, #128]	; (800169c <initGPS+0x19c>)
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
	sensors.gpsLongitude   = GPS_INVALID_ANGLE;
 800161e:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001622:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001626:	4a1d      	ldr	r2, [pc, #116]	; (800169c <initGPS+0x19c>)
 8001628:	645a      	str	r2, [r3, #68]	; 0x44
	sensors.gpsAltitude	   = GPS_INVALID_ALTITUDE;
 800162a:	f643 3398 	movw	r3, #15256	; 0x3b98
 800162e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001632:	4a1b      	ldr	r2, [pc, #108]	; (80016a0 <initGPS+0x1a0>)
 8001634:	649a      	str	r2, [r3, #72]	; 0x48
	sensors.gpsGroundSpeed = GPS_INVALID_SPEED;
 8001636:	f643 3398 	movw	r3, #15256	; 0x3b98
 800163a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800163e:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <initGPS+0x1a0>)
 8001640:	64da      	str	r2, [r3, #76]	; 0x4c
	sensors.gpsGroundTrack = GPS_INVALID_ANGLE;
 8001642:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001646:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800164a:	4a14      	ldr	r2, [pc, #80]	; (800169c <initGPS+0x19c>)
 800164c:	651a      	str	r2, [r3, #80]	; 0x50
	sensors.gpsNumSats     = GPS_INVALID_SATS;
 800164e:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001652:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	sensors.gpsFix         = GPS_INVALID_FIX;
 800165e:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001662:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	sensors.gpsDate        = GPS_INVALID_DATE;
 800166e:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001672:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001676:	f242 720f 	movw	r2, #9999	; 0x270f
 800167a:	659a      	str	r2, [r3, #88]	; 0x58
	sensors.gpsTime        = GPS_INVALID_TIME;
 800167c:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001680:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001684:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <initGPS+0x1a4>)
 8001686:	65da      	str	r2, [r3, #92]	; 0x5c
	sensors.gpsHdop        = GPS_INVALID_HDOP;
 8001688:	f643 3398 	movw	r3, #15256	; 0x3b98
 800168c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001690:	4a03      	ldr	r2, [pc, #12]	; (80016a0 <initGPS+0x1a0>)
 8001692:	661a      	str	r2, [r3, #96]	; 0x60

	gpsClearBuffer();
 8001694:	f001 fbaa 	bl	8002dec <gpsClearBuffer>
}
 8001698:	b003      	add	sp, #12
 800169a:	bd00      	pop	{pc}
 800169c:	432e83f6 	.word	0x432e83f6
 80016a0:	461c3c00 	.word	0x461c3c00
 80016a4:	00000000 	.word	0x00000000

080016a8 <decodeMediaTek3329BinaryMsg>:
///////////////////////////////////////////////////////////////////////////////
// Decode MediaTek 3329 Binary Message (DIY Drones Binary Protocol)
///////////////////////////////////////////////////////////////////////////////

uint8_t decodeMediaTek3329BinaryMsg(void)
{
 80016a8:	b500      	push	{lr}
 80016aa:	b083      	sub	sp, #12
    uint8_t 	data;
    uint8_t 	parsed = false;
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint16_t    i;
    uint16_t    numberOfChars;

    numberOfChars = gpsNumCharsAvailable();
 80016b4:	f001 fbaa 	bl	8002e0c <gpsNumCharsAvailable>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f8ad 3002 	strh.w	r3, [sp, #2]

    if (numberOfChars == 0) return false;
 80016be:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d102      	bne.n	80016cc <decodeMediaTek3329BinaryMsg+0x24>
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e269      	b.n	8001ba0 <decodeMediaTek3329BinaryMsg+0x4f8>

    for (i = 0; i < numberOfChars; i++)
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	f8ad 3004 	strh.w	r3, [sp, #4]
 80016d4:	e25b      	b.n	8001b8e <decodeMediaTek3329BinaryMsg+0x4e6>
    {
		data = gpsRead();
 80016d6:	f001 fbb7 	bl	8002e48 <gpsRead>
 80016da:	4603      	mov	r3, r0
 80016dc:	f88d 3001 	strb.w	r3, [sp, #1]

        switch(mtk19ProcessDataState)
 80016e0:	f640 034d 	movw	r3, #2125	; 0x84d
 80016e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b05      	cmp	r3, #5
 80016ec:	f200 8249 	bhi.w	8001b82 <decodeMediaTek3329BinaryMsg+0x4da>
 80016f0:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <decodeMediaTek3329BinaryMsg+0x50>)
 80016f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f6:	bf00      	nop
 80016f8:	08001711 	.word	0x08001711
 80016fc:	0800175f 	.word	0x0800175f
 8001700:	08001795 	.word	0x08001795
 8001704:	08001801 	.word	0x08001801
 8001708:	080018a1 	.word	0x080018a1
 800170c:	080018d3 	.word	0x080018d3
        {
            ///////////////////////////

            case MTK19_WAIT_SYNC1:
                if (data == SYNC1_V16)
 8001710:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001714:	2bd0      	cmp	r3, #208	; 0xd0
 8001716:	d10e      	bne.n	8001736 <decodeMediaTek3329BinaryMsg+0x8e>
                {
                	mtkRevision = MTK_GPS_REVISION_V16;
 8001718:	f640 03d4 	movw	r3, #2260	; 0x8d4
 800171c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001720:	f04f 0210 	mov.w	r2, #16
 8001724:	701a      	strb	r2, [r3, #0]
                	mtk19ProcessDataState = MTK19_WAIT_SYNC2;
 8001726:	f640 034d 	movw	r3, #2125	; 0x84d
 800172a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800172e:	f04f 0201 	mov.w	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
                {
					mtkRevision = MTK_GPS_REVISION_V19;
					mtk19ProcessDataState = MTK19_WAIT_SYNC2;
				}

                break;
 8001734:	e222      	b.n	8001b7c <decodeMediaTek3329BinaryMsg+0x4d4>
                if (data == SYNC1_V16)
                {
                	mtkRevision = MTK_GPS_REVISION_V16;
                	mtk19ProcessDataState = MTK19_WAIT_SYNC2;
                }
                else if (data == SYNC1_V19)
 8001736:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800173a:	2bd1      	cmp	r3, #209	; 0xd1
 800173c:	f040 821e 	bne.w	8001b7c <decodeMediaTek3329BinaryMsg+0x4d4>
                {
					mtkRevision = MTK_GPS_REVISION_V19;
 8001740:	f640 03d4 	movw	r3, #2260	; 0x8d4
 8001744:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001748:	f04f 0213 	mov.w	r2, #19
 800174c:	701a      	strb	r2, [r3, #0]
					mtk19ProcessDataState = MTK19_WAIT_SYNC2;
 800174e:	f640 034d 	movw	r3, #2125	; 0x84d
 8001752:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001756:	f04f 0201 	mov.w	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
				}

                break;
 800175c:	e20e      	b.n	8001b7c <decodeMediaTek3329BinaryMsg+0x4d4>

            ///////////////////////////

            case MTK19_WAIT_SYNC2:
                if (data == SYNC2)
 800175e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001762:	2bdd      	cmp	r3, #221	; 0xdd
 8001764:	d107      	bne.n	8001776 <decodeMediaTek3329BinaryMsg+0xce>
                    mtk19ProcessDataState = MTK19_GET_LEN;
 8001766:	f640 034d 	movw	r3, #2125	; 0x84d
 800176a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800176e:	f04f 0202 	mov.w	r2, #2
 8001772:	701a      	strb	r2, [r3, #0]
 8001774:	e006      	b.n	8001784 <decodeMediaTek3329BinaryMsg+0xdc>
                else
                    mtk19ProcessDataState = MTK19_WAIT_SYNC1;
 8001776:	f640 034d 	movw	r3, #2125	; 0x84d
 800177a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]

                mtk19ExpectedDataLength = 0;
 8001784:	f640 03d6 	movw	r3, #2262	; 0x8d6
 8001788:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]

                break;
 8001792:	e1f6      	b.n	8001b82 <decodeMediaTek3329BinaryMsg+0x4da>

            ///////////////////////////

            case MTK19_GET_LEN:
                mtk19ExpectedDataLength = data;
 8001794:	f640 03d6 	movw	r3, #2262	; 0x8d6
 8001798:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800179c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80017a0:	701a      	strb	r2, [r3, #0]

                if (mtk19ExpectedDataLength == sizeof(mtk19Message))
 80017a2:	f640 03d6 	movw	r3, #2262	; 0x8d6
 80017a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b20      	cmp	r3, #32
 80017ae:	d11f      	bne.n	80017f0 <decodeMediaTek3329BinaryMsg+0x148>
                {
                    mtk19ProcessDataState = MTK19_GET_DATA;
 80017b0:	f640 034d 	movw	r3, #2125	; 0x84d
 80017b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017b8:	f04f 0203 	mov.w	r2, #3
 80017bc:	701a      	strb	r2, [r3, #0]
                    mtk19CkA = data;
 80017be:	f640 03b0 	movw	r3, #2224	; 0x8b0
 80017c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017c6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80017ca:	701a      	strb	r2, [r3, #0]
                    mtk19CkB = mtk19CkA;
 80017cc:	f640 03b0 	movw	r3, #2224	; 0x8b0
 80017d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	f640 03d5 	movw	r3, #2261	; 0x8d5
 80017da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017de:	701a      	strb	r2, [r3, #0]
                    mtk19DataLength = 0;
 80017e0:	f640 03b1 	movw	r3, #2225	; 0x8b1
 80017e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
                }
                else
                    mtk19ProcessDataState = MTK19_WAIT_SYNC1;

                break;
 80017ee:	e1c8      	b.n	8001b82 <decodeMediaTek3329BinaryMsg+0x4da>
                    mtk19CkA = data;
                    mtk19CkB = mtk19CkA;
                    mtk19DataLength = 0;
                }
                else
                    mtk19ProcessDataState = MTK19_WAIT_SYNC1;
 80017f0:	f640 034d 	movw	r3, #2125	; 0x84d
 80017f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]

                break;
 80017fe:	e1c0      	b.n	8001b82 <decodeMediaTek3329BinaryMsg+0x4da>

            ///////////////////////////

            case MTK19_GET_DATA:
                mtk19CkA += data;
 8001800:	f640 03b0 	movw	r3, #2224	; 0x8b0
 8001804:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001808:	781a      	ldrb	r2, [r3, #0]
 800180a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800180e:	18d3      	adds	r3, r2, r3
 8001810:	b2da      	uxtb	r2, r3
 8001812:	f640 03b0 	movw	r3, #2224	; 0x8b0
 8001816:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800181a:	701a      	strb	r2, [r3, #0]
                mtk19CkB += mtk19CkA;
 800181c:	f640 03d5 	movw	r3, #2261	; 0x8d5
 8001820:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001824:	781a      	ldrb	r2, [r3, #0]
 8001826:	f640 03b0 	movw	r3, #2224	; 0x8b0
 800182a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	18d3      	adds	r3, r2, r3
 8001832:	b2da      	uxtb	r2, r3
 8001834:	f640 03d5 	movw	r3, #2261	; 0x8d5
 8001838:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800183c:	701a      	strb	r2, [r3, #0]

                if (mtk19DataLength < sizeof(mtk19Message))
 800183e:	f640 03b1 	movw	r3, #2225	; 0x8b1
 8001842:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b1f      	cmp	r3, #31
 800184a:	d814      	bhi.n	8001876 <decodeMediaTek3329BinaryMsg+0x1ce>
                    mtk19Message.bytes[mtk19DataLength++] = data;
 800184c:	f640 03b1 	movw	r3, #2225	; 0x8b1
 8001850:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001854:	781a      	ldrb	r2, [r3, #0]
 8001856:	4611      	mov	r1, r2
 8001858:	f640 03b4 	movw	r3, #2228	; 0x8b4
 800185c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001860:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8001864:	5458      	strb	r0, [r3, r1]
 8001866:	f102 0301 	add.w	r3, r2, #1
 800186a:	b2da      	uxtb	r2, r3
 800186c:	f640 03b1 	movw	r3, #2225	; 0x8b1
 8001870:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001874:	701a      	strb	r2, [r3, #0]

                if (mtk19DataLength >= mtk19ExpectedDataLength)
 8001876:	f640 03b1 	movw	r3, #2225	; 0x8b1
 800187a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800187e:	781a      	ldrb	r2, [r3, #0]
 8001880:	f640 03d6 	movw	r3, #2262	; 0x8d6
 8001884:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	f0c0 8178 	bcc.w	8001b80 <decodeMediaTek3329BinaryMsg+0x4d8>
                    mtk19ProcessDataState = MTK19_GET_CKA;
 8001890:	f640 034d 	movw	r3, #2125	; 0x84d
 8001894:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001898:	f04f 0204 	mov.w	r2, #4
 800189c:	701a      	strb	r2, [r3, #0]

                break;
 800189e:	e16f      	b.n	8001b80 <decodeMediaTek3329BinaryMsg+0x4d8>

            ///////////////////////////

            case MTK19_GET_CKA:
                if (mtk19CkA == data)
 80018a0:	f640 03b0 	movw	r3, #2224	; 0x8b0
 80018a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d107      	bne.n	80018c2 <decodeMediaTek3329BinaryMsg+0x21a>
                    mtk19ProcessDataState = MTK19_GET_CKB;
 80018b2:	f640 034d 	movw	r3, #2125	; 0x84d
 80018b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018ba:	f04f 0205 	mov.w	r2, #5
 80018be:	701a      	strb	r2, [r3, #0]
                else
                    mtk19ProcessDataState = MTK19_WAIT_SYNC1;

			    break;
 80018c0:	e15f      	b.n	8001b82 <decodeMediaTek3329BinaryMsg+0x4da>

            case MTK19_GET_CKA:
                if (mtk19CkA == data)
                    mtk19ProcessDataState = MTK19_GET_CKB;
                else
                    mtk19ProcessDataState = MTK19_WAIT_SYNC1;
 80018c2:	f640 034d 	movw	r3, #2125	; 0x84d
 80018c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]

			    break;
 80018d0:	e157      	b.n	8001b82 <decodeMediaTek3329BinaryMsg+0x4da>

            ///////////////////////////

            case MTK19_GET_CKB:
                if (mtk19CkB == data)
 80018d2:	f640 03d5 	movw	r3, #2261	; 0x8d5
 80018d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	f040 8102 	bne.w	8001aea <decodeMediaTek3329BinaryMsg+0x442>
                {
				    if (mtkRevision == MTK_GPS_REVISION_V16)
 80018e6:	f640 03d4 	movw	r3, #2260	; 0x8d4
 80018ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b10      	cmp	r3, #16
 80018f2:	d136      	bne.n	8001962 <decodeMediaTek3329BinaryMsg+0x2ba>
                    {
				    	sensors.gpsLatitude  = (float)mtk19Message.data.latitude  * 0.000001f  * D2R; // Radians
 80018f4:	f640 03b4 	movw	r3, #2228	; 0x8b4
 80018f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	ee07 3a90 	vmov	s15, r3
 8001902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001906:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8001ba8 <decodeMediaTek3329BinaryMsg+0x500>
 800190a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800190e:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001bac <decodeMediaTek3329BinaryMsg+0x504>
 8001912:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001916:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001bb0 <decodeMediaTek3329BinaryMsg+0x508>
 800191a:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800191e:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001922:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001926:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
                        sensors.gpsLongitude = (float)mtk19Message.data.longitude * 0.000001f  * D2R; // Radians
 800192a:	f640 03b4 	movw	r3, #2228	; 0x8b4
 800192e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	ee07 3a90 	vmov	s15, r3
 8001938:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800193c:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8001ba8 <decodeMediaTek3329BinaryMsg+0x500>
 8001940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001944:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8001bac <decodeMediaTek3329BinaryMsg+0x504>
 8001948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800194c:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8001bb0 <decodeMediaTek3329BinaryMsg+0x508>
 8001950:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8001954:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001958:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800195c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8001960:	e035      	b.n	80019ce <decodeMediaTek3329BinaryMsg+0x326>
			        }
				    else
				    {
				    	sensors.gpsLatitude  = (float)mtk19Message.data.latitude  * 0.0000001f * D2R; // Radians
 8001962:	f640 03b4 	movw	r3, #2228	; 0x8b4
 8001966:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001974:	eddf 7a8f 	vldr	s15, [pc, #572]	; 8001bb4 <decodeMediaTek3329BinaryMsg+0x50c>
 8001978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197c:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001bac <decodeMediaTek3329BinaryMsg+0x504>
 8001980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001984:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001bb0 <decodeMediaTek3329BinaryMsg+0x508>
 8001988:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800198c:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001990:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001994:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
                        sensors.gpsLongitude = (float)mtk19Message.data.longitude * 0.0000001f * D2R; // Radians
 8001998:	f640 03b4 	movw	r3, #2228	; 0x8b4
 800199c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019aa:	eddf 7a82 	vldr	s15, [pc, #520]	; 8001bb4 <decodeMediaTek3329BinaryMsg+0x50c>
 80019ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b2:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001bac <decodeMediaTek3329BinaryMsg+0x504>
 80019b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ba:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001bb0 <decodeMediaTek3329BinaryMsg+0x508>
 80019be:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80019c2:	f643 3398 	movw	r3, #15256	; 0x3b98
 80019c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019ca:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
				    }

                    sensors.gpsAltitude		 = (float)mtk19Message.data.altitude    * 0.01f;          // Meters
 80019ce:	f640 03b4 	movw	r3, #2228	; 0x8b4
 80019d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e0:	eddf 7a75 	vldr	s15, [pc, #468]	; 8001bb8 <decodeMediaTek3329BinaryMsg+0x510>
 80019e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e8:	f643 3398 	movw	r3, #15256	; 0x3b98
 80019ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019f0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
                    sensors.gpsGroundSpeed	 = (float)mtk19Message.data.groundSpeed * 0.01f;          // Meters/Sec
 80019f4:	f640 03b4 	movw	r3, #2228	; 0x8b4
 80019f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a06:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8001bb8 <decodeMediaTek3329BinaryMsg+0x510>
 8001a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0e:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a16:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
                    sensors.gpsGroundTrack	 = (float)mtk19Message.data.groundTrack * 0.01f * D2R;    // Radians
 8001a1a:	f640 03b4 	movw	r3, #2228	; 0x8b4
 8001a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2c:	eddf 7a62 	vldr	s15, [pc, #392]	; 8001bb8 <decodeMediaTek3329BinaryMsg+0x510>
 8001a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a34:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001bac <decodeMediaTek3329BinaryMsg+0x504>
 8001a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3c:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8001bb0 <decodeMediaTek3329BinaryMsg+0x508>
 8001a40:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8001a44:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a4c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

                    sensors.gpsNumSats		 = mtk19Message.data.satellites;
 8001a50:	f640 03b4 	movw	r3, #2228	; 0x8b4
 8001a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a58:	7d1a      	ldrb	r2, [r3, #20]
 8001a5a:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a62:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
                    sensors.gpsFix			 = mtk19Message.data.fixType;
 8001a66:	f640 03b4 	movw	r3, #2228	; 0x8b4
 8001a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a6e:	7d5a      	ldrb	r2, [r3, #21]
 8001a70:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a78:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
                    sensors.gpsDate			 = mtk19Message.data.date;
 8001a7c:	f640 03b4 	movw	r3, #2228	; 0x8b4
 8001a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a84:	f8d3 2016 	ldr.w	r2, [r3, #22]
 8001a88:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a90:	659a      	str	r2, [r3, #88]	; 0x58
                    sensors.gpsTime          = (float)mtk19Message.data.time * 0.001f;
 8001a92:	f640 03b4 	movw	r3, #2228	; 0x8b4
 8001a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a9a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aa6:	eddf 7a45 	vldr	s15, [pc, #276]	; 8001bbc <decodeMediaTek3329BinaryMsg+0x514>
 8001aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aae:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ab6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
                    sensors.gpsHdop			 = (float)mtk19Message.data.hdop * 0.01f;
 8001aba:	f640 03b4 	movw	r3, #2228	; 0x8b4
 8001abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ac2:	8bdb      	ldrh	r3, [r3, #30]
 8001ac4:	ee07 3a90 	vmov	s15, r3
 8001ac8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001acc:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8001bb8 <decodeMediaTek3329BinaryMsg+0x510>
 8001ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad4:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001adc:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

                    parsed = true;
 8001ae0:	f04f 0301 	mov.w	r3, #1
 8001ae4:	f88d 3007 	strb.w	r3, [sp, #7]
 8001ae8:	e040      	b.n	8001b6c <decodeMediaTek3329BinaryMsg+0x4c4>
			    }
			    else
			    {
					sensors.gpsLatitude    = GPS_INVALID_ANGLE;
 8001aea:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001af2:	4a33      	ldr	r2, [pc, #204]	; (8001bc0 <decodeMediaTek3329BinaryMsg+0x518>)
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40
					sensors.gpsLongitude   = GPS_INVALID_ANGLE;
 8001af6:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001afe:	4a30      	ldr	r2, [pc, #192]	; (8001bc0 <decodeMediaTek3329BinaryMsg+0x518>)
 8001b00:	645a      	str	r2, [r3, #68]	; 0x44
					sensors.gpsAltitude	   = GPS_INVALID_ALTITUDE;
 8001b02:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b0a:	4a2e      	ldr	r2, [pc, #184]	; (8001bc4 <decodeMediaTek3329BinaryMsg+0x51c>)
 8001b0c:	649a      	str	r2, [r3, #72]	; 0x48
					sensors.gpsGroundSpeed = GPS_INVALID_SPEED;
 8001b0e:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b16:	4a2b      	ldr	r2, [pc, #172]	; (8001bc4 <decodeMediaTek3329BinaryMsg+0x51c>)
 8001b18:	64da      	str	r2, [r3, #76]	; 0x4c
					sensors.gpsGroundTrack = GPS_INVALID_ANGLE;
 8001b1a:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b22:	4a27      	ldr	r2, [pc, #156]	; (8001bc0 <decodeMediaTek3329BinaryMsg+0x518>)
 8001b24:	651a      	str	r2, [r3, #80]	; 0x50
					sensors.gpsNumSats     = GPS_INVALID_SATS;
 8001b26:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
					sensors.gpsFix         = GPS_INVALID_FIX;
 8001b36:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
					sensors.gpsDate        = GPS_INVALID_DATE;
 8001b46:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b4e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b52:	659a      	str	r2, [r3, #88]	; 0x58
					sensors.gpsTime        = GPS_INVALID_TIME;
 8001b54:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b5c:	4a1a      	ldr	r2, [pc, #104]	; (8001bc8 <decodeMediaTek3329BinaryMsg+0x520>)
 8001b5e:	65da      	str	r2, [r3, #92]	; 0x5c
					sensors.gpsHdop        = GPS_INVALID_HDOP;
 8001b60:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b68:	4a16      	ldr	r2, [pc, #88]	; (8001bc4 <decodeMediaTek3329BinaryMsg+0x51c>)
 8001b6a:	661a      	str	r2, [r3, #96]	; 0x60
				}

                mtk19ProcessDataState = MTK19_WAIT_SYNC1;
 8001b6c:	f640 034d 	movw	r3, #2125	; 0x84d
 8001b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]

                break;
 8001b7a:	e002      	b.n	8001b82 <decodeMediaTek3329BinaryMsg+0x4da>
                {
					mtkRevision = MTK_GPS_REVISION_V19;
					mtk19ProcessDataState = MTK19_WAIT_SYNC2;
				}

                break;
 8001b7c:	bf00      	nop
 8001b7e:	e000      	b.n	8001b82 <decodeMediaTek3329BinaryMsg+0x4da>
                    mtk19Message.bytes[mtk19DataLength++] = data;

                if (mtk19DataLength >= mtk19ExpectedDataLength)
                    mtk19ProcessDataState = MTK19_GET_CKA;

                break;
 8001b80:	bf00      	nop

    numberOfChars = gpsNumCharsAvailable();

    if (numberOfChars == 0) return false;

    for (i = 0; i < numberOfChars; i++)
 8001b82:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001b86:	f103 0301 	add.w	r3, r3, #1
 8001b8a:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001b8e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8001b92:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	f4ff ad9d 	bcc.w	80016d6 <decodeMediaTek3329BinaryMsg+0x2e>
                mtk19ProcessDataState = MTK19_WAIT_SYNC1;

                break;
        }
    }
    return parsed;
 8001b9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	b003      	add	sp, #12
 8001ba4:	bd00      	pop	{pc}
 8001ba6:	bf00      	nop
 8001ba8:	358637bd 	.word	0x358637bd
 8001bac:	40490fdb 	.word	0x40490fdb
 8001bb0:	43340000 	.word	0x43340000
 8001bb4:	33d6bf95 	.word	0x33d6bf95
 8001bb8:	3c23d70a 	.word	0x3c23d70a
 8001bbc:	3a83126f 	.word	0x3a83126f
 8001bc0:	432e83f6 	.word	0x432e83f6
 8001bc4:	461c3c00 	.word	0x461c3c00
 8001bc8:	00000000 	.word	0x00000000

08001bcc <nmeaGetScaledInt>:
// - value returned is always integer as multiplied to include wanted decimal count
// - this will also consume the leading comma (required)
// - out can be NULL to ignore read value

uint8_t nmeaGetScaledInt(char **s, long *out, uint8_t decimals)
{
 8001bcc:	b086      	sub	sp, #24
 8001bce:	9003      	str	r0, [sp, #12]
 8001bd0:	9102      	str	r1, [sp, #8]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t ret = 0;
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	f88d 3017 	strb.w	r3, [sp, #23]
    int32_t val = 0;
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	9304      	str	r3, [sp, #16]

    // read whole numbers (prior to dot)
    while (((**s)>='0') && ((**s) <= '9'))
 8001be6:	e017      	b.n	8001c18 <nmeaGetScaledInt+0x4c>
    {
        val *= 10;
 8001be8:	9a04      	ldr	r2, [sp, #16]
 8001bea:	4613      	mov	r3, r2
 8001bec:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001bf0:	189b      	adds	r3, r3, r2
 8001bf2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001bf6:	9304      	str	r3, [sp, #16]
        val = val + (*((*s)++) - '0');
 8001bf8:	9b03      	ldr	r3, [sp, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	781a      	ldrb	r2, [r3, #0]
 8001bfe:	f1a2 0230 	sub.w	r2, r2, #48	; 0x30
 8001c02:	9904      	ldr	r1, [sp, #16]
 8001c04:	188a      	adds	r2, r1, r2
 8001c06:	9204      	str	r2, [sp, #16]
 8001c08:	f103 0201 	add.w	r2, r3, #1
 8001c0c:	9b03      	ldr	r3, [sp, #12]
 8001c0e:	601a      	str	r2, [r3, #0]
        ret = 1;
 8001c10:	f04f 0301 	mov.w	r3, #1
 8001c14:	f88d 3017 	strb.w	r3, [sp, #23]
{
    uint8_t ret = 0;
    int32_t val = 0;

    // read whole numbers (prior to dot)
    while (((**s)>='0') && ((**s) <= '9'))
 8001c18:	9b03      	ldr	r3, [sp, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b2f      	cmp	r3, #47	; 0x2f
 8001c20:	d904      	bls.n	8001c2c <nmeaGetScaledInt+0x60>
 8001c22:	9b03      	ldr	r3, [sp, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b39      	cmp	r3, #57	; 0x39
 8001c2a:	d9dd      	bls.n	8001be8 <nmeaGetScaledInt+0x1c>
        val *= 10;
        val = val + (*((*s)++) - '0');
        ret = 1;
    }

    if ((**s)=='.')
 8001c2c:	9b03      	ldr	r3, [sp, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b2e      	cmp	r3, #46	; 0x2e
 8001c34:	d141      	bne.n	8001cba <nmeaGetScaledInt+0xee>
    {
        // we have decimals
        (*s)++;
 8001c36:	9b03      	ldr	r3, [sp, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f103 0201 	add.w	r2, r3, #1
 8001c3e:	9b03      	ldr	r3, [sp, #12]
 8001c40:	601a      	str	r2, [r3, #0]

        while  (decimals--)
 8001c42:	e021      	b.n	8001c88 <nmeaGetScaledInt+0xbc>
        {
            val *= 10;
 8001c44:	9a04      	ldr	r2, [sp, #16]
 8001c46:	4613      	mov	r3, r2
 8001c48:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001c4c:	189b      	adds	r3, r3, r2
 8001c4e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001c52:	9304      	str	r3, [sp, #16]
            if (((**s)>='0') && ((**s) <= '9'))
 8001c54:	9b03      	ldr	r3, [sp, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b2f      	cmp	r3, #47	; 0x2f
 8001c5c:	d914      	bls.n	8001c88 <nmeaGetScaledInt+0xbc>
 8001c5e:	9b03      	ldr	r3, [sp, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b39      	cmp	r3, #57	; 0x39
 8001c66:	d80f      	bhi.n	8001c88 <nmeaGetScaledInt+0xbc>
            {
                val += (*((*s)++) - '0');
 8001c68:	9b03      	ldr	r3, [sp, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	781a      	ldrb	r2, [r3, #0]
 8001c6e:	f1a2 0230 	sub.w	r2, r2, #48	; 0x30
 8001c72:	9904      	ldr	r1, [sp, #16]
 8001c74:	188a      	adds	r2, r1, r2
 8001c76:	9204      	str	r2, [sp, #16]
 8001c78:	f103 0201 	add.w	r2, r3, #1
 8001c7c:	9b03      	ldr	r3, [sp, #12]
 8001c7e:	601a      	str	r2, [r3, #0]
                ret = 1;
 8001c80:	f04f 0301 	mov.w	r3, #1
 8001c84:	f88d 3017 	strb.w	r3, [sp, #23]
    if ((**s)=='.')
    {
        // we have decimals
        (*s)++;

        while  (decimals--)
 8001c88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf0c      	ite	eq
 8001c90:	2300      	moveq	r3, #0
 8001c92:	2301      	movne	r3, #1
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001c9a:	f102 32ff 	add.w	r2, r2, #4294967295
 8001c9e:	f88d 2007 	strb.w	r2, [sp, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ce      	bne.n	8001c44 <nmeaGetScaledInt+0x78>
 8001ca6:	e019      	b.n	8001cdc <nmeaGetScaledInt+0x110>
        }
    }
    else
    {
        while  (decimals--)
          val *= 10;
 8001ca8:	9a04      	ldr	r2, [sp, #16]
 8001caa:	4613      	mov	r3, r2
 8001cac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001cb0:	189b      	adds	r3, r3, r2
 8001cb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001cb6:	9304      	str	r3, [sp, #16]
 8001cb8:	e000      	b.n	8001cbc <nmeaGetScaledInt+0xf0>
            }
        }
    }
    else
    {
        while  (decimals--)
 8001cba:	bf00      	nop
 8001cbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bf0c      	ite	eq
 8001cc4:	2300      	moveq	r3, #0
 8001cc6:	2301      	movne	r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001cce:	f102 32ff 	add.w	r2, r2, #4294967295
 8001cd2:	f88d 2007 	strb.w	r2, [sp, #7]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1e6      	bne.n	8001ca8 <nmeaGetScaledInt+0xdc>
          val *= 10;
    }

    // take off the decimals we did not care about
    while (((**s)>='0') && ((**s) <= '9'))
 8001cda:	e006      	b.n	8001cea <nmeaGetScaledInt+0x11e>
 8001cdc:	e005      	b.n	8001cea <nmeaGetScaledInt+0x11e>
        (*s)++;
 8001cde:	9b03      	ldr	r3, [sp, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f103 0201 	add.w	r2, r3, #1
 8001ce6:	9b03      	ldr	r3, [sp, #12]
 8001ce8:	601a      	str	r2, [r3, #0]
        while  (decimals--)
          val *= 10;
    }

    // take off the decimals we did not care about
    while (((**s)>='0') && ((**s) <= '9'))
 8001cea:	9b03      	ldr	r3, [sp, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b2f      	cmp	r3, #47	; 0x2f
 8001cf2:	d904      	bls.n	8001cfe <nmeaGetScaledInt+0x132>
 8001cf4:	9b03      	ldr	r3, [sp, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b39      	cmp	r3, #57	; 0x39
 8001cfc:	d9ef      	bls.n	8001cde <nmeaGetScaledInt+0x112>
        (*s)++;

    if ((**s) == ',')
 8001cfe:	9b03      	ldr	r3, [sp, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b2c      	cmp	r3, #44	; 0x2c
 8001d06:	d106      	bne.n	8001d16 <nmeaGetScaledInt+0x14a>
        (*s)++;
 8001d08:	9b03      	ldr	r3, [sp, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f103 0201 	add.w	r2, r3, #1
 8001d10:	9b03      	ldr	r3, [sp, #12]
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	e003      	b.n	8001d1e <nmeaGetScaledInt+0x152>
    else
        ret = 0; // no comma -> fail
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	f88d 3017 	strb.w	r3, [sp, #23]

    if (ret && out)
 8001d1e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <nmeaGetScaledInt+0x166>
 8001d26:	9b02      	ldr	r3, [sp, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <nmeaGetScaledInt+0x166>
        *out=val;
 8001d2c:	9b02      	ldr	r3, [sp, #8]
 8001d2e:	9a04      	ldr	r2, [sp, #16]
 8001d30:	601a      	str	r2, [r3, #0]

    return ret;
 8001d32:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	b006      	add	sp, #24
 8001d3a:	4770      	bx	lr

08001d3c <nmeaGetLatLong>:
///////////////////////////////////////////////////////////////////////////////

// input: string "[d]ddmm.mmmm,[NESW],"

uint8_t nmeaGetLatLong(char **s, long *outp, uint8_t decimals)
{
 8001d3c:	b500      	push	{lr}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	9003      	str	r0, [sp, #12]
 8001d42:	9102      	str	r1, [sp, #8]
 8001d44:	4613      	mov	r3, r2
 8001d46:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t raw, deg;

    if (nmeaGetScaledInt(s, &raw, decimals))
 8001d4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001d4e:	9803      	ldr	r0, [sp, #12]
 8001d50:	aa04      	add	r2, sp, #16
 8001d52:	4611      	mov	r1, r2
 8001d54:	461a      	mov	r2, r3
 8001d56:	f7ff ff39 	bl	8001bcc <nmeaGetScaledInt>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 8084 	beq.w	8001e6a <nmeaGetLatLong+0x12e>
    {
        deg = raw / 10000000 * 10000000; // whole degrees
 8001d62:	9a04      	ldr	r2, [sp, #16]
 8001d64:	f64c 236b 	movw	r3, #51819	; 0xca6b
 8001d68:	f6c6 335f 	movt	r3, #27487	; 0x6b5f
 8001d6c:	fb83 1302 	smull	r1, r3, r3, r2
 8001d70:	ea4f 51a3 	mov.w	r1, r3, asr #22
 8001d74:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d78:	1aca      	subs	r2, r1, r3
 8001d7a:	f249 6380 	movw	r3, #38528	; 0x9680
 8001d7e:	f2c0 0398 	movt	r3, #152	; 0x98
 8001d82:	fb03 f302 	mul.w	r3, r3, r2
 8001d86:	9305      	str	r3, [sp, #20]
        raw = raw - deg;                 // minutes
 8001d88:	9a04      	ldr	r2, [sp, #16]
 8001d8a:	9b05      	ldr	r3, [sp, #20]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	9304      	str	r3, [sp, #16]
        raw = raw * 100 / 60;            // minutes to fractional degrees
 8001d90:	9b04      	ldr	r3, [sp, #16]
 8001d92:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001d96:	fb02 f303 	mul.w	r3, r2, r3
 8001d9a:	f648 0289 	movw	r2, #34953	; 0x8889
 8001d9e:	f6c8 0288 	movt	r2, #34952	; 0x8888
 8001da2:	fb82 1203 	smull	r1, r2, r2, r3
 8001da6:	18d2      	adds	r2, r2, r3
 8001da8:	ea4f 1262 	mov.w	r2, r2, asr #5
 8001dac:	ea4f 73e3 	mov.w	r3, r3, asr #31
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	9304      	str	r3, [sp, #16]
        deg = deg + raw;
 8001db4:	9b04      	ldr	r3, [sp, #16]
 8001db6:	9a05      	ldr	r2, [sp, #20]
 8001db8:	18d3      	adds	r3, r2, r3
 8001dba:	9305      	str	r3, [sp, #20]

        switch (**s)
 8001dbc:	9b03      	ldr	r3, [sp, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	f1a3 0345 	sub.w	r3, r3, #69	; 0x45
 8001dc6:	2b12      	cmp	r3, #18
 8001dc8:	d83a      	bhi.n	8001e40 <nmeaGetLatLong+0x104>
 8001dca:	a201      	add	r2, pc, #4	; (adr r2, 8001dd0 <nmeaGetLatLong+0x94>)
 8001dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd0:	08001e33 	.word	0x08001e33
 8001dd4:	08001e41 	.word	0x08001e41
 8001dd8:	08001e41 	.word	0x08001e41
 8001ddc:	08001e41 	.word	0x08001e41
 8001de0:	08001e41 	.word	0x08001e41
 8001de4:	08001e41 	.word	0x08001e41
 8001de8:	08001e41 	.word	0x08001e41
 8001dec:	08001e41 	.word	0x08001e41
 8001df0:	08001e41 	.word	0x08001e41
 8001df4:	08001e33 	.word	0x08001e33
 8001df8:	08001e41 	.word	0x08001e41
 8001dfc:	08001e41 	.word	0x08001e41
 8001e00:	08001e41 	.word	0x08001e41
 8001e04:	08001e41 	.word	0x08001e41
 8001e08:	08001e1d 	.word	0x08001e1d
 8001e0c:	08001e41 	.word	0x08001e41
 8001e10:	08001e41 	.word	0x08001e41
 8001e14:	08001e41 	.word	0x08001e41
 8001e18:	08001e1d 	.word	0x08001e1d
        {
            case 'S':
            case 'W':
                deg = -deg;
 8001e1c:	9b05      	ldr	r3, [sp, #20]
 8001e1e:	f1c3 0300 	rsb	r3, r3, #0
 8001e22:	9305      	str	r3, [sp, #20]
                (*s)++;
 8001e24:	9b03      	ldr	r3, [sp, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f103 0201 	add.w	r2, r3, #1
 8001e2c:	9b03      	ldr	r3, [sp, #12]
 8001e2e:	601a      	str	r2, [r3, #0]
                break;
 8001e30:	e007      	b.n	8001e42 <nmeaGetLatLong+0x106>

            case 'N':
            case 'E':
                (*s)++;
 8001e32:	9b03      	ldr	r3, [sp, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f103 0201 	add.w	r2, r3, #1
 8001e3a:	9b03      	ldr	r3, [sp, #12]
 8001e3c:	601a      	str	r2, [r3, #0]
                break;
 8001e3e:	e000      	b.n	8001e42 <nmeaGetLatLong+0x106>

            default:
                break;
 8001e40:	bf00      	nop
        }

        if ((**s) == ',')
 8001e42:	9b03      	ldr	r3, [sp, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b2c      	cmp	r3, #44	; 0x2c
 8001e4a:	d10e      	bne.n	8001e6a <nmeaGetLatLong+0x12e>
        {
            (*s)++;
 8001e4c:	9b03      	ldr	r3, [sp, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f103 0201 	add.w	r2, r3, #1
 8001e54:	9b03      	ldr	r3, [sp, #12]
 8001e56:	601a      	str	r2, [r3, #0]
            if (outp) *outp = deg;
 8001e58:	9b02      	ldr	r3, [sp, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <nmeaGetLatLong+0x128>
 8001e5e:	9b02      	ldr	r3, [sp, #8]
 8001e60:	9a05      	ldr	r2, [sp, #20]
 8001e62:	601a      	str	r2, [r3, #0]
            return 1;
 8001e64:	f04f 0301 	mov.w	r3, #1
 8001e68:	e00c      	b.n	8001e84 <nmeaGetLatLong+0x148>
        }
    }

    if ((**s) == ',') (*s)++; // consume the second comma if no number parsed
 8001e6a:	9b03      	ldr	r3, [sp, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b2c      	cmp	r3, #44	; 0x2c
 8001e72:	d105      	bne.n	8001e80 <nmeaGetLatLong+0x144>
 8001e74:	9b03      	ldr	r3, [sp, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f103 0201 	add.w	r2, r3, #1
 8001e7c:	9b03      	ldr	r3, [sp, #12]
 8001e7e:	601a      	str	r2, [r3, #0]

    return 0;
 8001e80:	f04f 0300 	mov.w	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	b007      	add	sp, #28
 8001e88:	bd00      	pop	{pc}
 8001e8a:	bf00      	nop

08001e8c <nmeaProcessSentence>:
///////////////////////////////////////////////////////////////////////////////
// Process NMEA Sentence
///////////////////////////////////////////////////////////////////////////////

void nmeaProcessSentence()
{
 8001e8c:	b500      	push	{lr}
 8001e8e:	b083      	sub	sp, #12
    char *p = sentenceBuffer;
 8001e90:	f640 03dc 	movw	r3, #2268	; 0x8dc
 8001e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e98:	9301      	str	r3, [sp, #4]
    int32_t work;

    ///////////////////////////////////

    if (!strncmp(p,"GPGGA,",6))
 8001e9a:	9b01      	ldr	r3, [sp, #4]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f646 7114 	movw	r1, #28436	; 0x6f14
 8001ea2:	f6c0 0102 	movt	r1, #2050	; 0x802
 8001ea6:	f04f 0206 	mov.w	r2, #6
 8001eaa:	f01f fcad 	bl	8021808 <strncmp>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f040 80c0 	bne.w	8002036 <nmeaProcessSentence+0x1aa>
    {
        // MediaTek Example: $GPGGA,064951.000,2307.1256,N,12016.4438,E,1,8,0.95,39.9,M,17.8,M,,*65
        // Ublox Example   : $GPGGA,092725.00,4717.11399,N,00833.91590,E,1,08,1.01,499.6,M,48.0,M,,*5B

        p += 6;  // Skip over 'GPGGA,'
 8001eb6:	9b01      	ldr	r3, [sp, #4]
 8001eb8:	f103 0306 	add.w	r3, r3, #6
 8001ebc:	9301      	str	r3, [sp, #4]

        sensors.gpsTime        = (nmeaGetScaledInt(&p, &work, 3)) ? (float)work * 0.001f             : GPS_INVALID_TIME;
 8001ebe:	ab01      	add	r3, sp, #4
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	466b      	mov	r3, sp
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f04f 0203 	mov.w	r2, #3
 8001eca:	f7ff fe7f 	bl	8001bcc <nmeaGetScaledInt>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d009      	beq.n	8001ee8 <nmeaProcessSentence+0x5c>
 8001ed4:	9b00      	ldr	r3, [sp, #0]
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ede:	eddf 7ab7 	vldr	s15, [pc, #732]	; 80021bc <nmeaProcessSentence+0x330>
 8001ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee6:	e001      	b.n	8001eec <nmeaProcessSentence+0x60>
 8001ee8:	eddf 7ab5 	vldr	s15, [pc, #724]	; 80021c0 <nmeaProcessSentence+0x334>
 8001eec:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ef4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

        sensors.gpsLatitude    = (nmeaGetLatLong(&p,   &work, 5)) ? (float)work * 0.0000001f * D2R   : GPS_INVALID_ANGLE;
 8001ef8:	ab01      	add	r3, sp, #4
 8001efa:	4618      	mov	r0, r3
 8001efc:	466b      	mov	r3, sp
 8001efe:	4619      	mov	r1, r3
 8001f00:	f04f 0205 	mov.w	r2, #5
 8001f04:	f7ff ff1a 	bl	8001d3c <nmeaGetLatLong>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d011      	beq.n	8001f32 <nmeaProcessSentence+0xa6>
 8001f0e:	9b00      	ldr	r3, [sp, #0]
 8001f10:	ee07 3a90 	vmov	s15, r3
 8001f14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f18:	eddf 7aaa 	vldr	s15, [pc, #680]	; 80021c4 <nmeaProcessSentence+0x338>
 8001f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f20:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80021d4 <nmeaProcessSentence+0x348>
 8001f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f28:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80021d8 <nmeaProcessSentence+0x34c>
 8001f2c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8001f30:	e001      	b.n	8001f36 <nmeaProcessSentence+0xaa>
 8001f32:	eddf 7aaa 	vldr	s15, [pc, #680]	; 80021dc <nmeaProcessSentence+0x350>
 8001f36:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f3e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
        sensors.gpsLongitude   = (nmeaGetLatLong(&p,   &work, 5)) ? (float)work * 0.0000001f * D2R   : GPS_INVALID_ANGLE;
 8001f42:	ab01      	add	r3, sp, #4
 8001f44:	4618      	mov	r0, r3
 8001f46:	466b      	mov	r3, sp
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f04f 0205 	mov.w	r2, #5
 8001f4e:	f7ff fef5 	bl	8001d3c <nmeaGetLatLong>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d011      	beq.n	8001f7c <nmeaProcessSentence+0xf0>
 8001f58:	9b00      	ldr	r3, [sp, #0]
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f62:	eddf 7a98 	vldr	s15, [pc, #608]	; 80021c4 <nmeaProcessSentence+0x338>
 8001f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6a:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80021d4 <nmeaProcessSentence+0x348>
 8001f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f72:	ed9f 7a99 	vldr	s14, [pc, #612]	; 80021d8 <nmeaProcessSentence+0x34c>
 8001f76:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8001f7a:	e001      	b.n	8001f80 <nmeaProcessSentence+0xf4>
 8001f7c:	eddf 7a97 	vldr	s15, [pc, #604]	; 80021dc <nmeaProcessSentence+0x350>
 8001f80:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f88:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

        p += 2;  // Skip Quality (1 character and ',')  //nmeaGetScaledInt(&p, NULL,  0); // Position Fix Indicator - Not Used
 8001f8c:	9b01      	ldr	r3, [sp, #4]
 8001f8e:	f103 0302 	add.w	r3, r3, #2
 8001f92:	9301      	str	r3, [sp, #4]

        sensors.gpsNumSats     = (nmeaGetScaledInt(&p, &work, 0)) ? work                             : GPS_INVALID_SATS;
 8001f94:	ab01      	add	r3, sp, #4
 8001f96:	4618      	mov	r0, r3
 8001f98:	466b      	mov	r3, sp
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	f7ff fe14 	bl	8001bcc <nmeaGetScaledInt>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <nmeaProcessSentence+0x124>
 8001faa:	9b00      	ldr	r3, [sp, #0]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	e001      	b.n	8001fb4 <nmeaProcessSentence+0x128>
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001fbc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        sensors.gpsHdop        = (nmeaGetScaledInt(&p, &work, 3)) ? (float)work * 0.001f             : GPS_INVALID_HDOP;
 8001fc0:	ab01      	add	r3, sp, #4
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	466b      	mov	r3, sp
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f04f 0203 	mov.w	r2, #3
 8001fcc:	f7ff fdfe 	bl	8001bcc <nmeaGetScaledInt>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d009      	beq.n	8001fea <nmeaProcessSentence+0x15e>
 8001fd6:	9b00      	ldr	r3, [sp, #0]
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe0:	eddf 7a76 	vldr	s15, [pc, #472]	; 80021bc <nmeaProcessSentence+0x330>
 8001fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe8:	e001      	b.n	8001fee <nmeaProcessSentence+0x162>
 8001fea:	eddf 7a78 	vldr	s15, [pc, #480]	; 80021cc <nmeaProcessSentence+0x340>
 8001fee:	f643 3398 	movw	r3, #15256	; 0x3b98
 8001ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ff6:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
        sensors.gpsAltitude    = (nmeaGetScaledInt(&p, &work, 3)) ? (float)work * 0.001f             : GPS_INVALID_ALTITUDE;
 8001ffa:	ab01      	add	r3, sp, #4
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	466b      	mov	r3, sp
 8002000:	4619      	mov	r1, r3
 8002002:	f04f 0203 	mov.w	r2, #3
 8002006:	f7ff fde1 	bl	8001bcc <nmeaGetScaledInt>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d009      	beq.n	8002024 <nmeaProcessSentence+0x198>
 8002010:	9b00      	ldr	r3, [sp, #0]
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800201a:	eddf 7a68 	vldr	s15, [pc, #416]	; 80021bc <nmeaProcessSentence+0x330>
 800201e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002022:	e001      	b.n	8002028 <nmeaProcessSentence+0x19c>
 8002024:	eddf 7a69 	vldr	s15, [pc, #420]	; 80021cc <nmeaProcessSentence+0x340>
 8002028:	f643 3398 	movw	r3, #15256	; 0x3b98
 800202c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002030:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 8002034:	e116      	b.n	8002264 <nmeaProcessSentence+0x3d8>
    }

    ///////////////////////////////////

    else if (!strncmp(p,"GPGSA,",6))
 8002036:	9b01      	ldr	r3, [sp, #4]
 8002038:	4618      	mov	r0, r3
 800203a:	f646 711c 	movw	r1, #28444	; 0x6f1c
 800203e:	f6c0 0102 	movt	r1, #2050	; 0x802
 8002042:	f04f 0206 	mov.w	r2, #6
 8002046:	f01f fbdf 	bl	8021808 <strncmp>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d11e      	bne.n	800208e <nmeaProcessSentence+0x202>
    {
        // MediaTek Example: $GPGSA,A,3,29,21,26,15,18,09,06,10,,,,,2.32,0.95,2.11*00
        // Ublox Example   : $GPGSA,A,3,23,29,07,08,09,18,26,28,,,,,1.94,1.18,1.54*0D

        p += 6;  // Skip over 'GPGSA,'
 8002050:	9b01      	ldr	r3, [sp, #4]
 8002052:	f103 0306 	add.w	r3, r3, #6
 8002056:	9301      	str	r3, [sp, #4]

        p += 2;  // Skip opMode (1 character and ',')
 8002058:	9b01      	ldr	r3, [sp, #4]
 800205a:	f103 0302 	add.w	r3, r3, #2
 800205e:	9301      	str	r3, [sp, #4]

        sensors.gpsFix         = (nmeaGetScaledInt(&p, &work, 0)) ? work                             : GPS_INVALID_FIX;
 8002060:	ab01      	add	r3, sp, #4
 8002062:	4618      	mov	r0, r3
 8002064:	466b      	mov	r3, sp
 8002066:	4619      	mov	r1, r3
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	f7ff fdae 	bl	8001bcc <nmeaGetScaledInt>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <nmeaProcessSentence+0x1f0>
 8002076:	9b00      	ldr	r3, [sp, #0]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	e001      	b.n	8002080 <nmeaProcessSentence+0x1f4>
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	f643 3398 	movw	r3, #15256	; 0x3b98
 8002084:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002088:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 800208c:	e0ea      	b.n	8002264 <nmeaProcessSentence+0x3d8>
    }

    ///////////////////////////////////

    else if (!strncmp(p,"GPRMC,",6))
 800208e:	9b01      	ldr	r3, [sp, #4]
 8002090:	4618      	mov	r0, r3
 8002092:	f646 7124 	movw	r1, #28452	; 0x6f24
 8002096:	f6c0 0102 	movt	r1, #2050	; 0x802
 800209a:	f04f 0206 	mov.w	r2, #6
 800209e:	f01f fbb3 	bl	8021808 <strncmp>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f040 80dd 	bne.w	8002264 <nmeaProcessSentence+0x3d8>
    {
        // MediaTek Example: $GPRMC,064951.000,A,2307.1256,N,12016.4438,E,0.03,165.48,260406,3.05,W,A*2C
        // Ublox Example   : $GPRMC,083559.00,A,4717.11437,N,00833.91522,E,0.004,77.52,091202,,,A*57

        p += 6;  // Skip over 'GPRMC,'
 80020aa:	9b01      	ldr	r3, [sp, #4]
 80020ac:	f103 0306 	add.w	r3, r3, #6
 80020b0:	9301      	str	r3, [sp, #4]

        sensors.gpsTime        = (nmeaGetScaledInt(&p, &work, 3)) ? (float)work * 0.001f             : GPS_INVALID_TIME;
 80020b2:	ab01      	add	r3, sp, #4
 80020b4:	4618      	mov	r0, r3
 80020b6:	466b      	mov	r3, sp
 80020b8:	4619      	mov	r1, r3
 80020ba:	f04f 0203 	mov.w	r2, #3
 80020be:	f7ff fd85 	bl	8001bcc <nmeaGetScaledInt>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d009      	beq.n	80020dc <nmeaProcessSentence+0x250>
 80020c8:	9b00      	ldr	r3, [sp, #0]
 80020ca:	ee07 3a90 	vmov	s15, r3
 80020ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d2:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80021bc <nmeaProcessSentence+0x330>
 80020d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020da:	e001      	b.n	80020e0 <nmeaProcessSentence+0x254>
 80020dc:	eddf 7a38 	vldr	s15, [pc, #224]	; 80021c0 <nmeaProcessSentence+0x334>
 80020e0:	f643 3398 	movw	r3, #15256	; 0x3b98
 80020e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020e8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

        p += 2;  // Skip Status (1 character and ',')
 80020ec:	9b01      	ldr	r3, [sp, #4]
 80020ee:	f103 0302 	add.w	r3, r3, #2
 80020f2:	9301      	str	r3, [sp, #4]

        sensors.gpsLatitude    = (nmeaGetLatLong(&p,   &work, 5)) ? (float)work * 0.0000001f * D2R   : GPS_INVALID_ANGLE;
 80020f4:	ab01      	add	r3, sp, #4
 80020f6:	4618      	mov	r0, r3
 80020f8:	466b      	mov	r3, sp
 80020fa:	4619      	mov	r1, r3
 80020fc:	f04f 0205 	mov.w	r2, #5
 8002100:	f7ff fe1c 	bl	8001d3c <nmeaGetLatLong>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d011      	beq.n	800212e <nmeaProcessSentence+0x2a2>
 800210a:	9b00      	ldr	r3, [sp, #0]
 800210c:	ee07 3a90 	vmov	s15, r3
 8002110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002114:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80021c4 <nmeaProcessSentence+0x338>
 8002118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80021d4 <nmeaProcessSentence+0x348>
 8002120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002124:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80021d8 <nmeaProcessSentence+0x34c>
 8002128:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800212c:	e001      	b.n	8002132 <nmeaProcessSentence+0x2a6>
 800212e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80021dc <nmeaProcessSentence+0x350>
 8002132:	f643 3398 	movw	r3, #15256	; 0x3b98
 8002136:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800213a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
        sensors.gpsLongitude   = (nmeaGetLatLong(&p,   &work, 5)) ? (float)work * 0.0000001f * D2R   : GPS_INVALID_ANGLE;
 800213e:	ab01      	add	r3, sp, #4
 8002140:	4618      	mov	r0, r3
 8002142:	466b      	mov	r3, sp
 8002144:	4619      	mov	r1, r3
 8002146:	f04f 0205 	mov.w	r2, #5
 800214a:	f7ff fdf7 	bl	8001d3c <nmeaGetLatLong>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d011      	beq.n	8002178 <nmeaProcessSentence+0x2ec>
 8002154:	9b00      	ldr	r3, [sp, #0]
 8002156:	ee07 3a90 	vmov	s15, r3
 800215a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800215e:	eddf 7a19 	vldr	s15, [pc, #100]	; 80021c4 <nmeaProcessSentence+0x338>
 8002162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002166:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80021d4 <nmeaProcessSentence+0x348>
 800216a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800216e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80021d8 <nmeaProcessSentence+0x34c>
 8002172:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002176:	e001      	b.n	800217c <nmeaProcessSentence+0x2f0>
 8002178:	eddf 7a18 	vldr	s15, [pc, #96]	; 80021dc <nmeaProcessSentence+0x350>
 800217c:	f643 3398 	movw	r3, #15256	; 0x3b98
 8002180:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002184:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
        sensors.gpsGroundSpeed = (nmeaGetScaledInt(&p, &work, 3)) ? (float)work * 0.001f * KNOTS2MPS : GPS_INVALID_SPEED;
 8002188:	ab01      	add	r3, sp, #4
 800218a:	4618      	mov	r0, r3
 800218c:	466b      	mov	r3, sp
 800218e:	4619      	mov	r1, r3
 8002190:	f04f 0203 	mov.w	r2, #3
 8002194:	f7ff fd1a 	bl	8001bcc <nmeaGetScaledInt>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d020      	beq.n	80021e0 <nmeaProcessSentence+0x354>
 800219e:	9b00      	ldr	r3, [sp, #0]
 80021a0:	ee07 3a90 	vmov	s15, r3
 80021a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021a8:	eddf 7a04 	vldr	s15, [pc, #16]	; 80021bc <nmeaProcessSentence+0x330>
 80021ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80021c8 <nmeaProcessSentence+0x33c>
 80021b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021b8:	e014      	b.n	80021e4 <nmeaProcessSentence+0x358>
 80021ba:	bf00      	nop
 80021bc:	3a83126f 	.word	0x3a83126f
 80021c0:	00000000 	.word	0x00000000
 80021c4:	33d6bf95 	.word	0x33d6bf95
 80021c8:	3f03b2a1 	.word	0x3f03b2a1
 80021cc:	461c3c00 	.word	0x461c3c00
 80021d0:	3a83126f 	.word	0x3a83126f
 80021d4:	40490fdb 	.word	0x40490fdb
 80021d8:	43340000 	.word	0x43340000
 80021dc:	432e83f6 	.word	0x432e83f6
 80021e0:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 80021cc <nmeaProcessSentence+0x340>
 80021e4:	f643 3398 	movw	r3, #15256	; 0x3b98
 80021e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021ec:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
        sensors.gpsGroundTrack = (nmeaGetScaledInt(&p, &work, 3)) ? (float)work * 0.001f * D2R       : GPS_INVALID_ANGLE;
 80021f0:	ab01      	add	r3, sp, #4
 80021f2:	4618      	mov	r0, r3
 80021f4:	466b      	mov	r3, sp
 80021f6:	4619      	mov	r1, r3
 80021f8:	f04f 0203 	mov.w	r2, #3
 80021fc:	f7ff fce6 	bl	8001bcc <nmeaGetScaledInt>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d011      	beq.n	800222a <nmeaProcessSentence+0x39e>
 8002206:	9b00      	ldr	r3, [sp, #0]
 8002208:	ee07 3a90 	vmov	s15, r3
 800220c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002210:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 80021d0 <nmeaProcessSentence+0x344>
 8002214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002218:	ed1f 7a12 	vldr	s14, [pc, #-72]	; 80021d4 <nmeaProcessSentence+0x348>
 800221c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002220:	ed1f 7a13 	vldr	s14, [pc, #-76]	; 80021d8 <nmeaProcessSentence+0x34c>
 8002224:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002228:	e001      	b.n	800222e <nmeaProcessSentence+0x3a2>
 800222a:	ed5f 7a14 	vldr	s15, [pc, #-80]	; 80021dc <nmeaProcessSentence+0x350>
 800222e:	f643 3398 	movw	r3, #15256	; 0x3b98
 8002232:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002236:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
        sensors.gpsDate        = (nmeaGetScaledInt(&p, &work, 0)) ? work                             : GPS_INVALID_DATE;
 800223a:	ab01      	add	r3, sp, #4
 800223c:	4618      	mov	r0, r3
 800223e:	466b      	mov	r3, sp
 8002240:	4619      	mov	r1, r3
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f7ff fcc1 	bl	8001bcc <nmeaGetScaledInt>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <nmeaProcessSentence+0x3ca>
 8002250:	9b00      	ldr	r3, [sp, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	e001      	b.n	800225a <nmeaProcessSentence+0x3ce>
 8002256:	f242 720f 	movw	r2, #9999	; 0x270f
 800225a:	f643 3398 	movw	r3, #15256	; 0x3b98
 800225e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002262:	659a      	str	r2, [r3, #88]	; 0x58
    }

    ///////////////////////////////////
}
 8002264:	b003      	add	sp, #12
 8002266:	bd00      	pop	{pc}

08002268 <decodeNMEAsentence>:
///////////////////////////////////////////////////////////////////////////////
// Decode a NMEA Sentence
///////////////////////////////////////////////////////////////////////////////

uint8_t decodeNMEAsentence(void)
{
 8002268:	b500      	push	{lr}
 800226a:	b083      	sub	sp, #12
    char     data;
    uint8_t  parsed = false;
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	f88d 3007 	strb.w	r3, [sp, #7]
    uint16_t i;
    uint16_t numberOfChars;

    numberOfChars = gpsNumCharsAvailable();
 8002274:	f000 fdca 	bl	8002e0c <gpsNumCharsAvailable>
 8002278:	4603      	mov	r3, r0
 800227a:	f8ad 3002 	strh.w	r3, [sp, #2]

    for (i = 0; i < numberOfChars; i++)
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002286:	e0c5      	b.n	8002414 <decodeNMEAsentence+0x1ac>
    {
		data = gpsRead();
 8002288:	f000 fdde 	bl	8002e48 <gpsRead>
 800228c:	4603      	mov	r3, r0
 800228e:	f88d 3001 	strb.w	r3, [sp, #1]

        switch (nmeaProcessDataState)
 8002292:	f640 034c 	movw	r3, #2124	; 0x84c
 8002296:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b03      	cmp	r3, #3
 800229e:	f200 80b3 	bhi.w	8002408 <decodeNMEAsentence+0x1a0>
 80022a2:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <decodeNMEAsentence+0x40>)
 80022a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a8:	080022b9 	.word	0x080022b9
 80022ac:	080022ef 	.word	0x080022ef
 80022b0:	08002387 	.word	0x08002387
 80022b4:	080023cb 	.word	0x080023cb
        {
            case WAIT_START:
                if (data == '$')
 80022b8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80022bc:	2b24      	cmp	r3, #36	; 0x24
 80022be:	f040 80a2 	bne.w	8002406 <decodeNMEAsentence+0x19e>
                {
                    nmeaProcessDataState  = READ;
 80022c2:	f640 034c 	movw	r3, #2124	; 0x84c
 80022c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022ca:	f04f 0201 	mov.w	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
                    sentenceLength        = 0;
 80022d0:	f240 7300 	movw	r3, #1792	; 0x700
 80022d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
                    sentenceCalculatedXOR = 0;
 80022de:	f640 03d8 	movw	r3, #2264	; 0x8d8
 80022e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
                }
                break;
 80022ec:	e08b      	b.n	8002406 <decodeNMEAsentence+0x19e>

            case READ:
                if (data == '*')
 80022ee:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80022f2:	2b2a      	cmp	r3, #42	; 0x2a
 80022f4:	d114      	bne.n	8002320 <decodeNMEAsentence+0xb8>
                {
                    sentenceBuffer[sentenceLength] = 0; // ensure NUL at end
 80022f6:	f240 7300 	movw	r3, #1792	; 0x700
 80022fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	f640 03dc 	movw	r3, #2268	; 0x8dc
 8002306:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800230a:	f04f 0100 	mov.w	r1, #0
 800230e:	5499      	strb	r1, [r3, r2]
                    nmeaProcessDataState           = READ_CS1;
 8002310:	f640 034c 	movw	r3, #2124	; 0x84c
 8002314:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002318:	f04f 0202 	mov.w	r2, #2
 800231c:	701a      	strb	r2, [r3, #0]
                else
                {
                    // overrun !!
                    nmeaProcessDataState = WAIT_START;
                }
                break;
 800231e:	e073      	b.n	8002408 <decodeNMEAsentence+0x1a0>
                if (data == '*')
                {
                    sentenceBuffer[sentenceLength] = 0; // ensure NUL at end
                    nmeaProcessDataState           = READ_CS1;
                }
                else if (sentenceLength < SENTENCE_SIZE)
 8002320:	f240 7300 	movw	r3, #1792	; 0x700
 8002324:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b4f      	cmp	r3, #79	; 0x4f
 800232c:	d823      	bhi.n	8002376 <decodeNMEAsentence+0x10e>
                {
                    sentenceBuffer[sentenceLength++] = data;
 800232e:	f240 7300 	movw	r3, #1792	; 0x700
 8002332:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	4611      	mov	r1, r2
 800233a:	f640 03dc 	movw	r3, #2268	; 0x8dc
 800233e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002342:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8002346:	5458      	strb	r0, [r3, r1]
 8002348:	f102 0301 	add.w	r3, r2, #1
 800234c:	b2da      	uxtb	r2, r3
 800234e:	f240 7300 	movw	r3, #1792	; 0x700
 8002352:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002356:	701a      	strb	r2, [r3, #0]
                    sentenceCalculatedXOR ^= data;
 8002358:	f640 03d8 	movw	r3, #2264	; 0x8d8
 800235c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002360:	781a      	ldrb	r2, [r3, #0]
 8002362:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002366:	4053      	eors	r3, r2
 8002368:	b2da      	uxtb	r2, r3
 800236a:	f640 03d8 	movw	r3, #2264	; 0x8d8
 800236e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002372:	701a      	strb	r2, [r3, #0]
                else
                {
                    // overrun !!
                    nmeaProcessDataState = WAIT_START;
                }
                break;
 8002374:	e048      	b.n	8002408 <decodeNMEAsentence+0x1a0>
                    sentenceCalculatedXOR ^= data;
                }
                else
                {
                    // overrun !!
                    nmeaProcessDataState = WAIT_START;
 8002376:	f640 034c 	movw	r3, #2124	; 0x84c
 800237a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
                }
                break;
 8002384:	e040      	b.n	8002408 <decodeNMEAsentence+0x1a0>

            case READ_CS1:
                if (data == nib2hex[sentenceCalculatedXOR>>4])
 8002386:	f640 03d8 	movw	r3, #2264	; 0x8d8
 800238a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8002394:	b2db      	uxtb	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	f646 7304 	movw	r3, #28420	; 0x6f04
 800239c:	f6c0 0302 	movt	r3, #2050	; 0x802
 80023a0:	5c9b      	ldrb	r3, [r3, r2]
 80023a2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d107      	bne.n	80023ba <decodeNMEAsentence+0x152>
                    nmeaProcessDataState = READ_CS2;
 80023aa:	f640 034c 	movw	r3, #2124	; 0x84c
 80023ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023b2:	f04f 0203 	mov.w	r2, #3
 80023b6:	701a      	strb	r2, [r3, #0]
                else
                    nmeaProcessDataState = WAIT_START;

                break;
 80023b8:	e026      	b.n	8002408 <decodeNMEAsentence+0x1a0>

            case READ_CS1:
                if (data == nib2hex[sentenceCalculatedXOR>>4])
                    nmeaProcessDataState = READ_CS2;
                else
                    nmeaProcessDataState = WAIT_START;
 80023ba:	f640 034c 	movw	r3, #2124	; 0x84c
 80023be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]

                break;
 80023c8:	e01e      	b.n	8002408 <decodeNMEAsentence+0x1a0>

            case READ_CS2:
                if (data == nib2hex[sentenceCalculatedXOR & 0xf])
 80023ca:	f640 03d8 	movw	r3, #2264	; 0x8d8
 80023ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	f003 020f 	and.w	r2, r3, #15
 80023d8:	f646 7304 	movw	r3, #28420	; 0x6f04
 80023dc:	f6c0 0302 	movt	r3, #2050	; 0x802
 80023e0:	5c9b      	ldrb	r3, [r3, r2]
 80023e2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d105      	bne.n	80023f6 <decodeNMEAsentence+0x18e>
                {
                    parsed = true;
 80023ea:	f04f 0301 	mov.w	r3, #1
 80023ee:	f88d 3007 	strb.w	r3, [sp, #7]
                    nmeaProcessSentence();
 80023f2:	f7ff fd4b 	bl	8001e8c <nmeaProcessSentence>
                }

                nmeaProcessDataState = WAIT_START;
 80023f6:	f640 034c 	movw	r3, #2124	; 0x84c
 80023fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
                break;
 8002404:	e000      	b.n	8002408 <decodeNMEAsentence+0x1a0>
                {
                    nmeaProcessDataState  = READ;
                    sentenceLength        = 0;
                    sentenceCalculatedXOR = 0;
                }
                break;
 8002406:	bf00      	nop
    uint16_t i;
    uint16_t numberOfChars;

    numberOfChars = gpsNumCharsAvailable();

    for (i = 0; i < numberOfChars; i++)
 8002408:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800240c:	f103 0301 	add.w	r3, r3, #1
 8002410:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002414:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8002418:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800241c:	429a      	cmp	r2, r3
 800241e:	f4ff af33 	bcc.w	8002288 <decodeNMEAsentence+0x20>
                break;
        }

    }

    return parsed;
 8002422:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
 8002426:	4618      	mov	r0, r3
 8002428:	b003      	add	sp, #12
 800242a:	bd00      	pop	{pc}

0800242c <ubloxParseData>:
// Decode Data Parse
///////////////////////////////////////////////////////////////////////////////

void ubloxParseData()
{
    if (ubloxClass == 1)         // NAV
 800242c:	f640 1368 	movw	r3, #2408	; 0x968
 8002430:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b01      	cmp	r3, #1
 8002438:	f040 813d 	bne.w	80026b6 <ubloxParseData+0x28a>
    {
        if (ubloxId == 2)        // NAV:POSLLH
 800243c:	f640 136a 	movw	r3, #2410	; 0x96a
 8002440:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d149      	bne.n	80024de <ubloxParseData+0xb2>
        {
            sensors.gpsLatitude  = (float)ubloxMessage.nav_posllh.lat    * 0.0000001f * D2R; // Radians;
 800244a:	f640 1334 	movw	r3, #2356	; 0x934
 800244e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	ee07 3a90 	vmov	s15, r3
 8002458:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800245c:	eddf 7a96 	vldr	s15, [pc, #600]	; 80026b8 <ubloxParseData+0x28c>
 8002460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002464:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80026bc <ubloxParseData+0x290>
 8002468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246c:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80026c0 <ubloxParseData+0x294>
 8002470:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002474:	f643 3398 	movw	r3, #15256	; 0x3b98
 8002478:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800247c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
            sensors.gpsLongitude = (float)ubloxMessage.nav_posllh.lon    * 0.0000001f * D2R; // Radians;
 8002480:	f640 1334 	movw	r3, #2356	; 0x934
 8002484:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002492:	eddf 7a89 	vldr	s15, [pc, #548]	; 80026b8 <ubloxParseData+0x28c>
 8002496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80026bc <ubloxParseData+0x290>
 800249e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024a2:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80026c0 <ubloxParseData+0x294>
 80024a6:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80024aa:	f643 3398 	movw	r3, #15256	; 0x3b98
 80024ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024b2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
            sensors.gpsAltitude  = (float)ubloxMessage.nav_posllh.height * 0.01f;            // Meters
 80024b6:	f640 1334 	movw	r3, #2356	; 0x934
 80024ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	ee07 3a90 	vmov	s15, r3
 80024c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c8:	eddf 7a7e 	vldr	s15, [pc, #504]	; 80026c4 <ubloxParseData+0x298>
 80024cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d0:	f643 3398 	movw	r3, #15256	; 0x3b98
 80024d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024d8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 80024dc:	e0eb      	b.n	80026b6 <ubloxParseData+0x28a>
        }
        else if (ubloxId == 3)   // NAV:STATUS
 80024de:	f640 136a 	movw	r3, #2410	; 0x96a
 80024e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d125      	bne.n	8002538 <ubloxParseData+0x10c>
        {
            switch (ubloxMessage.nav_status.gpsFix)
 80024ec:	f640 1334 	movw	r3, #2356	; 0x934
 80024f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024f4:	791b      	ldrb	r3, [r3, #4]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d002      	beq.n	8002500 <ubloxParseData+0xd4>
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d009      	beq.n	8002512 <ubloxParseData+0xe6>
 80024fe:	e012      	b.n	8002526 <ubloxParseData+0xfa>
            {
                case 2:
                    sensors.gpsFix = FIX_2D;
 8002500:	f643 3398 	movw	r3, #15256	; 0x3b98
 8002504:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002508:	f04f 0202 	mov.w	r2, #2
 800250c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
                    break;
 8002510:	e0d1      	b.n	80026b6 <ubloxParseData+0x28a>

                case 3:
                    sensors.gpsFix = FIX_3D;
 8002512:	f643 3398 	movw	r3, #15256	; 0x3b98
 8002516:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800251a:	f04f 0203 	mov.w	r2, #3
 800251e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
                    break;
 8002522:	bf00      	nop
 8002524:	e0c7      	b.n	80026b6 <ubloxParseData+0x28a>

                default:
                    sensors.gpsFix = FIX_NONE;
 8002526:	f643 3398 	movw	r3, #15256	; 0x3b98
 800252a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800252e:	f04f 0201 	mov.w	r2, #1
 8002532:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
                    break;
 8002536:	e0be      	b.n	80026b6 <ubloxParseData+0x28a>
            }
        }
        else if (ubloxId == 4)   // NAV:DOP
 8002538:	f640 136a 	movw	r3, #2410	; 0x96a
 800253c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b04      	cmp	r3, #4
 8002544:	d113      	bne.n	800256e <ubloxParseData+0x142>
        {
		    sensors.gpsHdop    = (float)ubloxMessage.nav_dop.hDOP * 0.01f;
 8002546:	f640 1334 	movw	r3, #2356	; 0x934
 800254a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800254e:	899b      	ldrh	r3, [r3, #12]
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002558:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80026c4 <ubloxParseData+0x298>
 800255c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002560:	f643 3398 	movw	r3, #15256	; 0x3b98
 8002564:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002568:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
 800256c:	e0a3      	b.n	80026b6 <ubloxParseData+0x28a>
		}
		else if (ubloxId == 6)   // NAV:SOL
 800256e:	f640 136a 	movw	r3, #2410	; 0x96a
 8002572:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b06      	cmp	r3, #6
 800257a:	d10c      	bne.n	8002596 <ubloxParseData+0x16a>
        {
            sensors.gpsNumSats = ubloxMessage.nav_sol.numSV;
 800257c:	f640 1334 	movw	r3, #2356	; 0x934
 8002580:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002584:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8002588:	f643 3398 	movw	r3, #15256	; 0x3b98
 800258c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002590:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002594:	e08f      	b.n	80026b6 <ubloxParseData+0x28a>
        }
        else if (ubloxId == 18)  // NAV:VELNED
 8002596:	f640 136a 	movw	r3, #2410	; 0x96a
 800259a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b12      	cmp	r3, #18
 80025a2:	d12e      	bne.n	8002602 <ubloxParseData+0x1d6>
        {
            sensors.gpsGroundTrack = (float)ubloxMessage.nav_velned.heading * 0.01f * D2R;    // Radians
 80025a4:	f640 1334 	movw	r3, #2356	; 0x934
 80025a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025b6:	eddf 7a43 	vldr	s15, [pc, #268]	; 80026c4 <ubloxParseData+0x298>
 80025ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025be:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80026bc <ubloxParseData+0x290>
 80025c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c6:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80026c0 <ubloxParseData+0x294>
 80025ca:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80025ce:	f643 3398 	movw	r3, #15256	; 0x3b98
 80025d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025d6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            sensors.gpsGroundSpeed = (float)ubloxMessage.nav_velned.gSpeed  * 0.01f;          // Meters/Sec
 80025da:	f640 1334 	movw	r3, #2356	; 0x934
 80025de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	ee07 3a90 	vmov	s15, r3
 80025e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025ec:	eddf 7a35 	vldr	s15, [pc, #212]	; 80026c4 <ubloxParseData+0x298>
 80025f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f4:	f643 3398 	movw	r3, #15256	; 0x3b98
 80025f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025fc:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 8002600:	e059      	b.n	80026b6 <ubloxParseData+0x28a>
        }
        else if (ubloxId == 33)  // NAV:TIMEUTC
 8002602:	f640 136a 	movw	r3, #2410	; 0x96a
 8002606:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b21      	cmp	r3, #33	; 0x21
 800260e:	d152      	bne.n	80026b6 <ubloxParseData+0x28a>
        {
			sensors.gpsTime = (float)(ubloxMessage.nav_timeutc.hour * 10000 +
 8002610:	f640 1334 	movw	r3, #2356	; 0x934
 8002614:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002618:	7c1b      	ldrb	r3, [r3, #16]
 800261a:	f242 7210 	movw	r2, #10000	; 0x2710
 800261e:	fb02 f203 	mul.w	r2, r2, r3
			                          ubloxMessage.nav_timeutc.min  * 100   +
 8002622:	f640 1334 	movw	r3, #2356	; 0x934
 8002626:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800262a:	7c5b      	ldrb	r3, [r3, #17]
 800262c:	f04f 0164 	mov.w	r1, #100	; 0x64
 8002630:	fb01 f303 	mul.w	r3, r1, r3
            sensors.gpsGroundTrack = (float)ubloxMessage.nav_velned.heading * 0.01f * D2R;    // Radians
            sensors.gpsGroundSpeed = (float)ubloxMessage.nav_velned.gSpeed  * 0.01f;          // Meters/Sec
        }
        else if (ubloxId == 33)  // NAV:TIMEUTC
        {
			sensors.gpsTime = (float)(ubloxMessage.nav_timeutc.hour * 10000 +
 8002634:	18d2      	adds	r2, r2, r3
			                          ubloxMessage.nav_timeutc.min  * 100   +
			                          ubloxMessage.nav_timeutc.sec        ) +
 8002636:	f640 1334 	movw	r3, #2356	; 0x934
 800263a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800263e:	7c9b      	ldrb	r3, [r3, #18]
            sensors.gpsGroundSpeed = (float)ubloxMessage.nav_velned.gSpeed  * 0.01f;          // Meters/Sec
        }
        else if (ubloxId == 33)  // NAV:TIMEUTC
        {
			sensors.gpsTime = (float)(ubloxMessage.nav_timeutc.hour * 10000 +
			                          ubloxMessage.nav_timeutc.min  * 100   +
 8002640:	18d3      	adds	r3, r2, r3
            sensors.gpsGroundTrack = (float)ubloxMessage.nav_velned.heading * 0.01f * D2R;    // Radians
            sensors.gpsGroundSpeed = (float)ubloxMessage.nav_velned.gSpeed  * 0.01f;          // Meters/Sec
        }
        else if (ubloxId == 33)  // NAV:TIMEUTC
        {
			sensors.gpsTime = (float)(ubloxMessage.nav_timeutc.hour * 10000 +
 8002642:	ee07 3a90 	vmov	s15, r3
 8002646:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			                          ubloxMessage.nav_timeutc.min  * 100   +
			                          ubloxMessage.nav_timeutc.sec        ) +
			                  (float)(ubloxMessage.nav_timeutc.nano) * 0.000000001f;
 800264a:	f640 1334 	movw	r3, #2356	; 0x934
 800264e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	ee07 3a90 	vmov	s15, r3
 8002658:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800265c:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80026c8 <ubloxParseData+0x29c>
 8002660:	ee66 7aa7 	vmul.f32	s15, s13, s15
        }
        else if (ubloxId == 33)  // NAV:TIMEUTC
        {
			sensors.gpsTime = (float)(ubloxMessage.nav_timeutc.hour * 10000 +
			                          ubloxMessage.nav_timeutc.min  * 100   +
			                          ubloxMessage.nav_timeutc.sec        ) +
 8002664:	ee77 7a27 	vadd.f32	s15, s14, s15
            sensors.gpsGroundTrack = (float)ubloxMessage.nav_velned.heading * 0.01f * D2R;    // Radians
            sensors.gpsGroundSpeed = (float)ubloxMessage.nav_velned.gSpeed  * 0.01f;          // Meters/Sec
        }
        else if (ubloxId == 33)  // NAV:TIMEUTC
        {
			sensors.gpsTime = (float)(ubloxMessage.nav_timeutc.hour * 10000 +
 8002668:	f643 3398 	movw	r3, #15256	; 0x3b98
 800266c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002670:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			                          ubloxMessage.nav_timeutc.min  * 100   +
			                          ubloxMessage.nav_timeutc.sec        ) +
			                  (float)(ubloxMessage.nav_timeutc.nano) * 0.000000001f;

			sensors.gpsDate = ubloxMessage.nav_timeutc.day   * 10000 +
 8002674:	f640 1334 	movw	r3, #2356	; 0x934
 8002678:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800267c:	7bdb      	ldrb	r3, [r3, #15]
 800267e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002682:	fb02 f203 	mul.w	r2, r2, r3
			                  ubloxMessage.nav_timeutc.month * 100   +
 8002686:	f640 1334 	movw	r3, #2356	; 0x934
 800268a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800268e:	7b9b      	ldrb	r3, [r3, #14]
 8002690:	f04f 0164 	mov.w	r1, #100	; 0x64
 8002694:	fb01 f303 	mul.w	r3, r1, r3
			sensors.gpsTime = (float)(ubloxMessage.nav_timeutc.hour * 10000 +
			                          ubloxMessage.nav_timeutc.min  * 100   +
			                          ubloxMessage.nav_timeutc.sec        ) +
			                  (float)(ubloxMessage.nav_timeutc.nano) * 0.000000001f;

			sensors.gpsDate = ubloxMessage.nav_timeutc.day   * 10000 +
 8002698:	18d2      	adds	r2, r2, r3
			                  ubloxMessage.nav_timeutc.month * 100   +
			                  ubloxMessage.nav_timeutc.year  - 2000;
 800269a:	f640 1334 	movw	r3, #2356	; 0x934
 800269e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026a2:	899b      	ldrh	r3, [r3, #12]
			                          ubloxMessage.nav_timeutc.min  * 100   +
			                          ubloxMessage.nav_timeutc.sec        ) +
			                  (float)(ubloxMessage.nav_timeutc.nano) * 0.000000001f;

			sensors.gpsDate = ubloxMessage.nav_timeutc.day   * 10000 +
			                  ubloxMessage.nav_timeutc.month * 100   +
 80026a4:	18d3      	adds	r3, r2, r3
			                  ubloxMessage.nav_timeutc.year  - 2000;
 80026a6:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
			sensors.gpsTime = (float)(ubloxMessage.nav_timeutc.hour * 10000 +
			                          ubloxMessage.nav_timeutc.min  * 100   +
			                          ubloxMessage.nav_timeutc.sec        ) +
			                  (float)(ubloxMessage.nav_timeutc.nano) * 0.000000001f;

			sensors.gpsDate = ubloxMessage.nav_timeutc.day   * 10000 +
 80026aa:	461a      	mov	r2, r3
 80026ac:	f643 3398 	movw	r3, #15256	; 0x3b98
 80026b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026b4:	659a      	str	r2, [r3, #88]	; 0x58
			                  ubloxMessage.nav_timeutc.month * 100   +
			                  ubloxMessage.nav_timeutc.year  - 2000;
		}
    }
}
 80026b6:	4770      	bx	lr
 80026b8:	33d6bf95 	.word	0x33d6bf95
 80026bc:	40490fdb 	.word	0x40490fdb
 80026c0:	43340000 	.word	0x43340000
 80026c4:	3c23d70a 	.word	0x3c23d70a
 80026c8:	3089705f 	.word	0x3089705f

080026cc <decodeUbloxMsg>:
///////////////////////////////////////////////////////////////////////////////
// Decode UBLOX Message
///////////////////////////////////////////////////////////////////////////////

uint8_t decodeUbloxMsg(void)
{
 80026cc:	b500      	push	{lr}
 80026ce:	b083      	sub	sp, #12
    char     data;
    uint8_t  parsed = false;
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint16_t i;
    uint16_t numberOfChars;

    numberOfChars = gpsNumCharsAvailable();
 80026d8:	f000 fb98 	bl	8002e0c <gpsNumCharsAvailable>
 80026dc:	4603      	mov	r3, r0
 80026de:	f8ad 3002 	strh.w	r3, [sp, #2]

    for (i = 0; i < numberOfChars; i++)
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	f8ad 3004 	strh.w	r3, [sp, #4]
 80026ea:	e1cc      	b.n	8002a86 <decodeUbloxMsg+0x3ba>
    {
		data = gpsRead();
 80026ec:	f000 fbac 	bl	8002e48 <gpsRead>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f88d 3001 	strb.w	r3, [sp, #1]

        switch (ubloxProcessDataState)
 80026f6:	f640 0368 	movw	r3, #2152	; 0x868
 80026fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b08      	cmp	r3, #8
 8002702:	f200 81ba 	bhi.w	8002a7a <decodeUbloxMsg+0x3ae>
 8002706:	a201      	add	r2, pc, #4	; (adr r2, 800270c <decodeUbloxMsg+0x40>)
 8002708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270c:	08002731 	.word	0x08002731
 8002710:	0800274b 	.word	0x0800274b
 8002714:	08002773 	.word	0x08002773
 8002718:	080027ad 	.word	0x080027ad
 800271c:	08002809 	.word	0x08002809
 8002720:	08002865 	.word	0x08002865
 8002724:	080028f3 	.word	0x080028f3
 8002728:	08002991 	.word	0x08002991
 800272c:	080029c3 	.word	0x080029c3
        {
            ///////////////////////////

            case WAIT_SYNC1:
                if (data == 0xb5)
 8002730:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002734:	2bb5      	cmp	r3, #181	; 0xb5
 8002736:	f040 819d 	bne.w	8002a74 <decodeUbloxMsg+0x3a8>
                    ubloxProcessDataState = WAIT_SYNC2;
 800273a:	f640 0368 	movw	r3, #2152	; 0x868
 800273e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002742:	f04f 0201 	mov.w	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]

                break;
 8002748:	e194      	b.n	8002a74 <decodeUbloxMsg+0x3a8>

            ///////////////////////////

            case WAIT_SYNC2:
                if (data == 0x62)
 800274a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800274e:	2b62      	cmp	r3, #98	; 0x62
 8002750:	d107      	bne.n	8002762 <decodeUbloxMsg+0x96>
                    ubloxProcessDataState = GET_CLASS;
 8002752:	f640 0368 	movw	r3, #2152	; 0x868
 8002756:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800275a:	f04f 0202 	mov.w	r2, #2
 800275e:	701a      	strb	r2, [r3, #0]
                else
                    ubloxProcessDataState = WAIT_SYNC1;

                break;
 8002760:	e18b      	b.n	8002a7a <decodeUbloxMsg+0x3ae>

            case WAIT_SYNC2:
                if (data == 0x62)
                    ubloxProcessDataState = GET_CLASS;
                else
                    ubloxProcessDataState = WAIT_SYNC1;
 8002762:	f640 0368 	movw	r3, #2152	; 0x868
 8002766:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]

                break;
 8002770:	e183      	b.n	8002a7a <decodeUbloxMsg+0x3ae>

            ///////////////////////////

            case GET_CLASS:
                ubloxClass            = data;
 8002772:	f640 1368 	movw	r3, #2408	; 0x968
 8002776:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800277a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800277e:	701a      	strb	r2, [r3, #0]
                ubloxCKA              = data;
 8002780:	f640 1369 	movw	r3, #2409	; 0x969
 8002784:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002788:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800278c:	701a      	strb	r2, [r3, #0]
                ubloxCKB              = data;
 800278e:	f640 136b 	movw	r3, #2411	; 0x96b
 8002792:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002796:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800279a:	701a      	strb	r2, [r3, #0]
                ubloxProcessDataState = GET_ID;
 800279c:	f640 0368 	movw	r3, #2152	; 0x868
 80027a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027a4:	f04f 0203 	mov.w	r2, #3
 80027a8:	701a      	strb	r2, [r3, #0]

                break;
 80027aa:	e166      	b.n	8002a7a <decodeUbloxMsg+0x3ae>

            ///////////////////////////

            case GET_ID:
                ubloxId               = data;
 80027ac:	f640 136a 	movw	r3, #2410	; 0x96a
 80027b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027b4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80027b8:	701a      	strb	r2, [r3, #0]
                ubloxCKA             += data;
 80027ba:	f640 1369 	movw	r3, #2409	; 0x969
 80027be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027c2:	781a      	ldrb	r2, [r3, #0]
 80027c4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80027c8:	18d3      	adds	r3, r2, r3
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	f640 1369 	movw	r3, #2409	; 0x969
 80027d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027d4:	701a      	strb	r2, [r3, #0]
                ubloxCKB             += ubloxCKA;
 80027d6:	f640 136b 	movw	r3, #2411	; 0x96b
 80027da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027de:	781a      	ldrb	r2, [r3, #0]
 80027e0:	f640 1369 	movw	r3, #2409	; 0x969
 80027e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	18d3      	adds	r3, r2, r3
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	f640 136b 	movw	r3, #2411	; 0x96b
 80027f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027f6:	701a      	strb	r2, [r3, #0]
                ubloxProcessDataState = GET_LL;
 80027f8:	f640 0368 	movw	r3, #2152	; 0x868
 80027fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002800:	f04f 0204 	mov.w	r2, #4
 8002804:	701a      	strb	r2, [r3, #0]

                break;
 8002806:	e138      	b.n	8002a7a <decodeUbloxMsg+0x3ae>

            ///////////////////////////

            case GET_LL:
                ubloxExpectedDataLength = data;
 8002808:	f640 1330 	movw	r3, #2352	; 0x930
 800280c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002810:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002814:	701a      	strb	r2, [r3, #0]
                ubloxCKA               += data;
 8002816:	f640 1369 	movw	r3, #2409	; 0x969
 800281a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800281e:	781a      	ldrb	r2, [r3, #0]
 8002820:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002824:	18d3      	adds	r3, r2, r3
 8002826:	b2da      	uxtb	r2, r3
 8002828:	f640 1369 	movw	r3, #2409	; 0x969
 800282c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002830:	701a      	strb	r2, [r3, #0]
                ubloxCKB               += ubloxCKA;
 8002832:	f640 136b 	movw	r3, #2411	; 0x96b
 8002836:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800283a:	781a      	ldrb	r2, [r3, #0]
 800283c:	f640 1369 	movw	r3, #2409	; 0x969
 8002840:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	18d3      	adds	r3, r2, r3
 8002848:	b2da      	uxtb	r2, r3
 800284a:	f640 136b 	movw	r3, #2411	; 0x96b
 800284e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002852:	701a      	strb	r2, [r3, #0]
                ubloxProcessDataState   = GET_LH;
 8002854:	f640 0368 	movw	r3, #2152	; 0x868
 8002858:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800285c:	f04f 0205 	mov.w	r2, #5
 8002860:	701a      	strb	r2, [r3, #0]

                break;
 8002862:	e10a      	b.n	8002a7a <decodeUbloxMsg+0x3ae>

            ///////////////////////////

            case GET_LH:
                ubloxExpectedDataLength += data << 8;
 8002864:	f640 1330 	movw	r3, #2352	; 0x930
 8002868:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800286c:	781a      	ldrb	r2, [r3, #0]
 800286e:	f640 1330 	movw	r3, #2352	; 0x930
 8002872:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002876:	701a      	strb	r2, [r3, #0]
                ubloxDataLength          = 0;
 8002878:	f640 136c 	movw	r3, #2412	; 0x96c
 800287c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
                ubloxCKA                += data;
 8002886:	f640 1369 	movw	r3, #2409	; 0x969
 800288a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800288e:	781a      	ldrb	r2, [r3, #0]
 8002890:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002894:	18d3      	adds	r3, r2, r3
 8002896:	b2da      	uxtb	r2, r3
 8002898:	f640 1369 	movw	r3, #2409	; 0x969
 800289c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028a0:	701a      	strb	r2, [r3, #0]
                ubloxCKB                += ubloxCKA;
 80028a2:	f640 136b 	movw	r3, #2411	; 0x96b
 80028a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028aa:	781a      	ldrb	r2, [r3, #0]
 80028ac:	f640 1369 	movw	r3, #2409	; 0x969
 80028b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	18d3      	adds	r3, r2, r3
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	f640 136b 	movw	r3, #2411	; 0x96b
 80028be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028c2:	701a      	strb	r2, [r3, #0]

                if (ubloxExpectedDataLength <= sizeof(ubloxMessage))
 80028c4:	f640 1330 	movw	r3, #2352	; 0x930
 80028c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b34      	cmp	r3, #52	; 0x34
 80028d0:	d807      	bhi.n	80028e2 <decodeUbloxMsg+0x216>
                    ubloxProcessDataState = GET_DATA;
 80028d2:	f640 0368 	movw	r3, #2152	; 0x868
 80028d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028da:	f04f 0206 	mov.w	r2, #6
 80028de:	701a      	strb	r2, [r3, #0]
                else
                    // discard overlong message
                    ubloxProcessDataState = WAIT_SYNC1;

                break;
 80028e0:	e0cb      	b.n	8002a7a <decodeUbloxMsg+0x3ae>

                if (ubloxExpectedDataLength <= sizeof(ubloxMessage))
                    ubloxProcessDataState = GET_DATA;
                else
                    // discard overlong message
                    ubloxProcessDataState = WAIT_SYNC1;
 80028e2:	f640 0368 	movw	r3, #2152	; 0x868
 80028e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]

                break;
 80028f0:	e0c3      	b.n	8002a7a <decodeUbloxMsg+0x3ae>

            ///////////////////////////

            case GET_DATA:
                ubloxCKA += data;
 80028f2:	f640 1369 	movw	r3, #2409	; 0x969
 80028f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028fa:	781a      	ldrb	r2, [r3, #0]
 80028fc:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002900:	18d3      	adds	r3, r2, r3
 8002902:	b2da      	uxtb	r2, r3
 8002904:	f640 1369 	movw	r3, #2409	; 0x969
 8002908:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800290c:	701a      	strb	r2, [r3, #0]
                ubloxCKB += ubloxCKA;
 800290e:	f640 136b 	movw	r3, #2411	; 0x96b
 8002912:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	f640 1369 	movw	r3, #2409	; 0x969
 800291c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	18d3      	adds	r3, r2, r3
 8002924:	b2da      	uxtb	r2, r3
 8002926:	f640 136b 	movw	r3, #2411	; 0x96b
 800292a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800292e:	701a      	strb	r2, [r3, #0]

                // next will discard data if it exceeds our biggest known msg
                if (ubloxDataLength < sizeof(ubloxMessage))
 8002930:	f640 136c 	movw	r3, #2412	; 0x96c
 8002934:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b33      	cmp	r3, #51	; 0x33
 800293c:	d814      	bhi.n	8002968 <decodeUbloxMsg+0x29c>
                    ubloxMessage.raw[ubloxDataLength++] = data;
 800293e:	f640 136c 	movw	r3, #2412	; 0x96c
 8002942:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002946:	781a      	ldrb	r2, [r3, #0]
 8002948:	4611      	mov	r1, r2
 800294a:	f640 1334 	movw	r3, #2356	; 0x934
 800294e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002952:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8002956:	5458      	strb	r0, [r3, r1]
 8002958:	f102 0301 	add.w	r3, r2, #1
 800295c:	b2da      	uxtb	r2, r3
 800295e:	f640 136c 	movw	r3, #2412	; 0x96c
 8002962:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002966:	701a      	strb	r2, [r3, #0]

                if (ubloxDataLength >= ubloxExpectedDataLength)
 8002968:	f640 136c 	movw	r3, #2412	; 0x96c
 800296c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002970:	781a      	ldrb	r2, [r3, #0]
 8002972:	f640 1330 	movw	r3, #2352	; 0x930
 8002976:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d37b      	bcc.n	8002a78 <decodeUbloxMsg+0x3ac>
                    ubloxProcessDataState = GET_CKA;
 8002980:	f640 0368 	movw	r3, #2152	; 0x868
 8002984:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002988:	f04f 0207 	mov.w	r2, #7
 800298c:	701a      	strb	r2, [r3, #0]

                break;
 800298e:	e073      	b.n	8002a78 <decodeUbloxMsg+0x3ac>

            ///////////////////////////

            case GET_CKA:
                if (ubloxCKA != data)
 8002990:	f640 1369 	movw	r3, #2409	; 0x969
 8002994:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d007      	beq.n	80029b2 <decodeUbloxMsg+0x2e6>
                    ubloxProcessDataState = WAIT_SYNC1;
 80029a2:	f640 0368 	movw	r3, #2152	; 0x868
 80029a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
	            else
                    ubloxProcessDataState = GET_CKB;

                break;
 80029b0:	e063      	b.n	8002a7a <decodeUbloxMsg+0x3ae>

            case GET_CKA:
                if (ubloxCKA != data)
                    ubloxProcessDataState = WAIT_SYNC1;
	            else
                    ubloxProcessDataState = GET_CKB;
 80029b2:	f640 0368 	movw	r3, #2152	; 0x868
 80029b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029ba:	f04f 0208 	mov.w	r2, #8
 80029be:	701a      	strb	r2, [r3, #0]

                break;
 80029c0:	e05b      	b.n	8002a7a <decodeUbloxMsg+0x3ae>

            ///////////////////////////

            case GET_CKB:
                if (ubloxCKB == data)
 80029c2:	f640 136b 	movw	r3, #2411	; 0x96b
 80029c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d106      	bne.n	80029e2 <decodeUbloxMsg+0x316>
                {
                    parsed = 1;
 80029d4:	f04f 0301 	mov.w	r3, #1
 80029d8:	f88d 3007 	strb.w	r3, [sp, #7]
                    ubloxParseData();
 80029dc:	f7ff fd26 	bl	800242c <ubloxParseData>
 80029e0:	e040      	b.n	8002a64 <decodeUbloxMsg+0x398>
                }
			    else
			    {
					sensors.gpsLatitude    = GPS_INVALID_ANGLE;
 80029e2:	f643 3398 	movw	r3, #15256	; 0x3b98
 80029e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029ea:	4a2d      	ldr	r2, [pc, #180]	; (8002aa0 <decodeUbloxMsg+0x3d4>)
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
					sensors.gpsLongitude   = GPS_INVALID_ANGLE;
 80029ee:	f643 3398 	movw	r3, #15256	; 0x3b98
 80029f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029f6:	4a2a      	ldr	r2, [pc, #168]	; (8002aa0 <decodeUbloxMsg+0x3d4>)
 80029f8:	645a      	str	r2, [r3, #68]	; 0x44
					sensors.gpsAltitude	   = GPS_INVALID_ALTITUDE;
 80029fa:	f643 3398 	movw	r3, #15256	; 0x3b98
 80029fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a02:	4a28      	ldr	r2, [pc, #160]	; (8002aa4 <decodeUbloxMsg+0x3d8>)
 8002a04:	649a      	str	r2, [r3, #72]	; 0x48
					sensors.gpsGroundSpeed = GPS_INVALID_SPEED;
 8002a06:	f643 3398 	movw	r3, #15256	; 0x3b98
 8002a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a0e:	4a25      	ldr	r2, [pc, #148]	; (8002aa4 <decodeUbloxMsg+0x3d8>)
 8002a10:	64da      	str	r2, [r3, #76]	; 0x4c
					sensors.gpsGroundTrack = GPS_INVALID_ANGLE;
 8002a12:	f643 3398 	movw	r3, #15256	; 0x3b98
 8002a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a1a:	4a21      	ldr	r2, [pc, #132]	; (8002aa0 <decodeUbloxMsg+0x3d4>)
 8002a1c:	651a      	str	r2, [r3, #80]	; 0x50
					sensors.gpsNumSats     = GPS_INVALID_SATS;
 8002a1e:	f643 3398 	movw	r3, #15256	; 0x3b98
 8002a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
					sensors.gpsFix         = GPS_INVALID_FIX;
 8002a2e:	f643 3398 	movw	r3, #15256	; 0x3b98
 8002a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
					sensors.gpsDate        = GPS_INVALID_DATE;
 8002a3e:	f643 3398 	movw	r3, #15256	; 0x3b98
 8002a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a46:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a4a:	659a      	str	r2, [r3, #88]	; 0x58
					sensors.gpsTime        = GPS_INVALID_TIME;
 8002a4c:	f643 3398 	movw	r3, #15256	; 0x3b98
 8002a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a54:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <decodeUbloxMsg+0x3dc>)
 8002a56:	65da      	str	r2, [r3, #92]	; 0x5c
					sensors.gpsHdop        = GPS_INVALID_HDOP;
 8002a58:	f643 3398 	movw	r3, #15256	; 0x3b98
 8002a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a60:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <decodeUbloxMsg+0x3d8>)
 8002a62:	661a      	str	r2, [r3, #96]	; 0x60
				}

                ubloxProcessDataState = WAIT_SYNC1;
 8002a64:	f640 0368 	movw	r3, #2152	; 0x868
 8002a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]

                break;
 8002a72:	e002      	b.n	8002a7a <decodeUbloxMsg+0x3ae>

            case WAIT_SYNC1:
                if (data == 0xb5)
                    ubloxProcessDataState = WAIT_SYNC2;

                break;
 8002a74:	bf00      	nop
 8002a76:	e000      	b.n	8002a7a <decodeUbloxMsg+0x3ae>
                    ubloxMessage.raw[ubloxDataLength++] = data;

                if (ubloxDataLength >= ubloxExpectedDataLength)
                    ubloxProcessDataState = GET_CKA;

                break;
 8002a78:	bf00      	nop
    uint16_t i;
    uint16_t numberOfChars;

    numberOfChars = gpsNumCharsAvailable();

    for (i = 0; i < numberOfChars; i++)
 8002a7a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002a7e:	f103 0301 	add.w	r3, r3, #1
 8002a82:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002a86:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8002a8a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	f4ff ae2c 	bcc.w	80026ec <decodeUbloxMsg+0x20>
                ubloxProcessDataState = WAIT_SYNC1;

                break;
        }
    }
    return parsed;
 8002a94:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	b003      	add	sp, #12
 8002a9c:	bd00      	pop	{pc}
 8002a9e:	bf00      	nop
 8002aa0:	432e83f6 	.word	0x432e83f6
 8002aa4:	461c3c00 	.word	0x461c3c00
 8002aa8:	00000000 	.word	0x00000000

08002aac <uart2TxDMA>:
///////////////////////////////////////////////////////////////////////////////
// UART2 Transmit via DMA
///////////////////////////////////////////////////////////////////////////////

static void uart2TxDMA(void)
{
 8002aac:	b508      	push	{r3, lr}
    DMA1_Channel7->CMAR = (uint32_t)&tx2Buffer[tx2BufferTail];
 8002aae:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002ab2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ab6:	f240 7208 	movw	r2, #1800	; 0x708
 8002aba:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002abe:	8812      	ldrh	r2, [r2, #0]
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	f241 1270 	movw	r2, #4464	; 0x1170
 8002ac6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002aca:	188a      	adds	r2, r1, r2
 8002acc:	60da      	str	r2, [r3, #12]
    if (tx2BufferHead > tx2BufferTail)
 8002ace:	f240 730a 	movw	r3, #1802	; 0x70a
 8002ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ad6:	881a      	ldrh	r2, [r3, #0]
 8002ad8:	f240 7308 	movw	r3, #1800	; 0x708
 8002adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d91b      	bls.n	8002b1e <uart2TxDMA+0x72>
    {
    	DMA1_Channel7->CNDTR = tx2BufferHead - tx2BufferTail;
 8002ae6:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002aea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002aee:	f240 720a 	movw	r2, #1802	; 0x70a
 8002af2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002af6:	8812      	ldrh	r2, [r2, #0]
 8002af8:	4611      	mov	r1, r2
 8002afa:	f240 7208 	movw	r2, #1800	; 0x708
 8002afe:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002b02:	8812      	ldrh	r2, [r2, #0]
 8002b04:	1a8a      	subs	r2, r1, r2
 8002b06:	605a      	str	r2, [r3, #4]
	    tx2BufferTail = tx2BufferHead;
 8002b08:	f240 730a 	movw	r3, #1802	; 0x70a
 8002b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b10:	881a      	ldrh	r2, [r3, #0]
 8002b12:	f240 7308 	movw	r3, #1800	; 0x708
 8002b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b1a:	801a      	strh	r2, [r3, #0]
 8002b1c:	e012      	b.n	8002b44 <uart2TxDMA+0x98>
    }
    else
    {
    	DMA1_Channel7->CNDTR = UART2_BUFFER_SIZE - tx2BufferTail;
 8002b1e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002b22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b26:	f240 7208 	movw	r2, #1800	; 0x708
 8002b2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002b2e:	8812      	ldrh	r2, [r2, #0]
 8002b30:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8002b34:	605a      	str	r2, [r3, #4]
	    tx2BufferTail = 0;
 8002b36:	f240 7308 	movw	r3, #1800	; 0x708
 8002b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	801a      	strh	r2, [r3, #0]
    }

    DMA_Cmd(DMA1_Channel7, ENABLE);
 8002b44:	f04f 0080 	mov.w	r0, #128	; 0x80
 8002b48:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002b4c:	f04f 0101 	mov.w	r1, #1
 8002b50:	f015 fb8a 	bl	8018268 <DMA_Cmd>
}
 8002b54:	bd08      	pop	{r3, pc}
 8002b56:	bf00      	nop

08002b58 <DMA1_Channel7_IRQHandler>:
///////////////////////////////////////////////////////////////////////////////
// UART2 TX Complete Interrupt Handler
///////////////////////////////////////////////////////////////////////////////

void DMA1_Channel7_IRQHandler(void)
{
 8002b58:	b508      	push	{r3, lr}
	DMA_ClearITPendingBit(DMA1_IT_TC7);
 8002b5a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8002b5e:	f015 fc3f 	bl	80183e0 <DMA_ClearITPendingBit>
    DMA_Cmd(DMA1_Channel7, DISABLE);
 8002b62:	f04f 0080 	mov.w	r0, #128	; 0x80
 8002b66:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002b6a:	f04f 0100 	mov.w	r1, #0
 8002b6e:	f015 fb7b 	bl	8018268 <DMA_Cmd>

    if (tx2BufferHead != tx2BufferTail)
 8002b72:	f240 730a 	movw	r3, #1802	; 0x70a
 8002b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b7a:	881a      	ldrh	r2, [r3, #0]
 8002b7c:	f240 7308 	movw	r3, #1800	; 0x708
 8002b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d001      	beq.n	8002b8e <DMA1_Channel7_IRQHandler+0x36>
	    uart2TxDMA();
 8002b8a:	f7ff ff8f 	bl	8002aac <uart2TxDMA>
}
 8002b8e:	bd08      	pop	{r3, pc}

08002b90 <gpsInit>:
///////////////////////////////////////////////////////////////////////////////
// GPS Initialization
///////////////////////////////////////////////////////////////////////////////

void gpsInit(void)
{
 8002b90:	b500      	push	{lr}
 8002b92:	b095      	sub	sp, #84	; 0x54
    GPIO_InitTypeDef  GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    DMA_InitTypeDef   DMA_InitStructure;
    NVIC_InitTypeDef  NVIC_InitStructure;

    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,    ENABLE);
 8002b94:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b98:	f04f 0101 	mov.w	r1, #1
 8002b9c:	f018 f810 	bl	801abc0 <RCC_AHBPeriphClockCmd>
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,     ENABLE);
 8002ba0:	f04f 0001 	mov.w	r0, #1
 8002ba4:	f04f 0101 	mov.w	r1, #1
 8002ba8:	f018 f80a 	bl	801abc0 <RCC_AHBPeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8002bac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002bb0:	f04f 0101 	mov.w	r1, #1
 8002bb4:	f018 f850 	bl	801ac58 <RCC_APB1PeriphClockCmd>

    GPIO_InitStructure.GPIO_Pin   = UART2_TX_PIN | UART2_RX_PIN;
 8002bb8:	f04f 030c 	mov.w	r3, #12
 8002bbc:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8002bbe:	f04f 0302 	mov.w	r3, #2
 8002bc2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002bc6:	f04f 0303 	mov.w	r3, #3
 8002bca:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8002bd6:	f04f 0301 	mov.w	r3, #1
 8002bda:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f

    GPIO_PinAFConfig(UART2_GPIO, UART2_TX_PINSOURCE, GPIO_AF_7);
 8002bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be2:	f04f 0102 	mov.w	r1, #2
 8002be6:	f04f 0207 	mov.w	r2, #7
 8002bea:	f016 fc3d 	bl	8019468 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(UART2_GPIO, UART2_RX_PINSOURCE, GPIO_AF_7);
 8002bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf2:	f04f 0103 	mov.w	r1, #3
 8002bf6:	f04f 0207 	mov.w	r2, #7
 8002bfa:	f016 fc35 	bl	8019468 <GPIO_PinAFConfig>

    GPIO_Init(UART2_GPIO, &GPIO_InitStructure);
 8002bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c02:	ab12      	add	r3, sp, #72	; 0x48
 8002c04:	4619      	mov	r1, r3
 8002c06:	f016 fac7 	bl	8019198 <GPIO_Init>

    // DMA TX Interrupt
    NVIC_InitStructure.NVIC_IRQChannel                   = DMA1_Channel7_IRQn;
 8002c0a:	f04f 0311 	mov.w	r3, #17
 8002c0e:	f88d 3000 	strb.w	r3, [sp]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8002c12:	f04f 0301 	mov.w	r3, #1
 8002c16:	f88d 3001 	strb.w	r3, [sp, #1]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 0;
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	f88d 3002 	strb.w	r3, [sp, #2]
    NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
 8002c22:	f04f 0301 	mov.w	r3, #1
 8002c26:	f88d 3003 	strb.w	r3, [sp, #3]

    NVIC_Init(&NVIC_InitStructure);
 8002c2a:	466b      	mov	r3, sp
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f017 f8ff 	bl	8019e30 <NVIC_Init>

    USART_InitStructure.USART_BaudRate            = 115200;
 8002c32:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002c36:	930c      	str	r3, [sp, #48]	; 0x30
    USART_InitStructure.USART_WordLength          = USART_WordLength_8b;
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	930d      	str	r3, [sp, #52]	; 0x34
    USART_InitStructure.USART_StopBits            = USART_StopBits_1;
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	930e      	str	r3, [sp, #56]	; 0x38
    USART_InitStructure.USART_Parity              = USART_Parity_No;
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	930f      	str	r3, [sp, #60]	; 0x3c
    USART_InitStructure.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
 8002c4a:	f04f 030c 	mov.w	r3, #12
 8002c4e:	9310      	str	r3, [sp, #64]	; 0x40
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	9311      	str	r3, [sp, #68]	; 0x44

    USART_Init(USART2, &USART_InitStructure);
 8002c56:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8002c5a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002c5e:	ab0c      	add	r3, sp, #48	; 0x30
 8002c60:	4619      	mov	r1, r3
 8002c62:	f01a fed5 	bl	801da10 <USART_Init>

    // Receive DMA into a circular buffer

    DMA_DeInit(DMA1_Channel6);
 8002c66:	f04f 006c 	mov.w	r0, #108	; 0x6c
 8002c6a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002c6e:	f015 f985 	bl	8017f7c <DMA_DeInit>

    DMA_InitStructure.DMA_BufferSize         = UART2_BUFFER_SIZE;
 8002c72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c76:	f8ad 3010 	strh.w	r3, [sp, #16]
    DMA_InitStructure.DMA_DIR                = DMA_DIR_PeripheralSRC;
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	9303      	str	r3, [sp, #12]
    DMA_InitStructure.DMA_M2M                = DMA_M2M_Disable;
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	930b      	str	r3, [sp, #44]	; 0x2c
    DMA_InitStructure.DMA_MemoryBaseAddr     = (uint32_t)rx2Buffer;
 8002c86:	f640 1370 	movw	r3, #2416	; 0x970
 8002c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c8e:	9302      	str	r3, [sp, #8]
    DMA_InitStructure.DMA_MemoryDataSize     = DMA_MemoryDataSize_Byte;
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	9308      	str	r3, [sp, #32]
    DMA_InitStructure.DMA_MemoryInc          = DMA_MemoryInc_Enable;
 8002c96:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002c9a:	9306      	str	r3, [sp, #24]
    DMA_InitStructure.DMA_Mode               = DMA_Mode_Circular;
 8002c9c:	f04f 0320 	mov.w	r3, #32
 8002ca0:	9309      	str	r3, [sp, #36]	; 0x24
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&USART2->RDR;
 8002ca2:	f244 4324 	movw	r3, #17444	; 0x4424
 8002ca6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002caa:	9301      	str	r3, [sp, #4]
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	9307      	str	r3, [sp, #28]
    DMA_InitStructure.DMA_PeripheralInc      = DMA_PeripheralInc_Disable;
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	9305      	str	r3, [sp, #20]
    DMA_InitStructure.DMA_Priority           = DMA_Priority_Medium;
 8002cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cbc:	930a      	str	r3, [sp, #40]	; 0x28

    DMA_Init(DMA1_Channel6, &DMA_InitStructure);
 8002cbe:	f04f 006c 	mov.w	r0, #108	; 0x6c
 8002cc2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002cc6:	ab01      	add	r3, sp, #4
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f015 fa61 	bl	8018190 <DMA_Init>

    DMA_Cmd(DMA1_Channel6, ENABLE);
 8002cce:	f04f 006c 	mov.w	r0, #108	; 0x6c
 8002cd2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002cd6:	f04f 0101 	mov.w	r1, #1
 8002cda:	f015 fac5 	bl	8018268 <DMA_Cmd>

    USART_DMACmd(USART2, USART_DMAReq_Rx, ENABLE);
 8002cde:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8002ce2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002ce6:	f04f 0140 	mov.w	r1, #64	; 0x40
 8002cea:	f04f 0201 	mov.w	r2, #1
 8002cee:	f01b faa9 	bl	801e244 <USART_DMACmd>

    rx2DMAPos = DMA_GetCurrDataCounter(DMA1_Channel6);
 8002cf2:	f04f 006c 	mov.w	r0, #108	; 0x6c
 8002cf6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002cfa:	f015 fadb 	bl	80182b4 <DMA_GetCurrDataCounter>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461a      	mov	r2, r3
 8002d02:	f240 7304 	movw	r3, #1796	; 0x704
 8002d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d0a:	601a      	str	r2, [r3, #0]

    // Transmit DMA
    DMA_DeInit(DMA1_Channel7);
 8002d0c:	f04f 0080 	mov.w	r0, #128	; 0x80
 8002d10:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002d14:	f015 f932 	bl	8017f7c <DMA_DeInit>

    DMA_InitStructure.DMA_BufferSize         = UART2_BUFFER_SIZE;
 8002d18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d1c:	f8ad 3010 	strh.w	r3, [sp, #16]
    DMA_InitStructure.DMA_DIR                = DMA_DIR_PeripheralDST;
 8002d20:	f04f 0310 	mov.w	r3, #16
 8002d24:	9303      	str	r3, [sp, #12]
    DMA_InitStructure.DMA_M2M                = DMA_M2M_Disable;
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	930b      	str	r3, [sp, #44]	; 0x2c
    DMA_InitStructure.DMA_MemoryBaseAddr     = (uint32_t)tx2Buffer;
 8002d2c:	f241 1370 	movw	r3, #4464	; 0x1170
 8002d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d34:	9302      	str	r3, [sp, #8]
    DMA_InitStructure.DMA_MemoryDataSize     = DMA_MemoryDataSize_Byte;
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	9308      	str	r3, [sp, #32]
    DMA_InitStructure.DMA_MemoryInc          = DMA_MemoryInc_Enable;
 8002d3c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002d40:	9306      	str	r3, [sp, #24]
    DMA_InitStructure.DMA_Mode               = DMA_Mode_Normal;
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	9309      	str	r3, [sp, #36]	; 0x24
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) &USART2->TDR;
 8002d48:	f244 4328 	movw	r3, #17448	; 0x4428
 8002d4c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002d50:	9301      	str	r3, [sp, #4]
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	9307      	str	r3, [sp, #28]
    DMA_InitStructure.DMA_PeripheralInc      = DMA_PeripheralInc_Disable;
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	9305      	str	r3, [sp, #20]
    DMA_InitStructure.DMA_Priority           = DMA_Priority_Medium;
 8002d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d62:	930a      	str	r3, [sp, #40]	; 0x28

    DMA_Init(DMA1_Channel7, &DMA_InitStructure);
 8002d64:	f04f 0080 	mov.w	r0, #128	; 0x80
 8002d68:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002d6c:	ab01      	add	r3, sp, #4
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f015 fa0e 	bl	8018190 <DMA_Init>

    DMA_ITConfig(DMA1_Channel7, DMA_IT_TC, ENABLE);
 8002d74:	f04f 0080 	mov.w	r0, #128	; 0x80
 8002d78:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002d7c:	f04f 0102 	mov.w	r1, #2
 8002d80:	f04f 0201 	mov.w	r2, #1
 8002d84:	f015 fa9e 	bl	80182c4 <DMA_ITConfig>

    DMA1_Channel7->CNDTR = 0;
 8002d88:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002d8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	605a      	str	r2, [r3, #4]

    USART_DMACmd(USART2, USART_DMAReq_Tx, ENABLE);
 8002d96:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8002d9a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002d9e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002da2:	f04f 0201 	mov.w	r2, #1
 8002da6:	f01b fa4d 	bl	801e244 <USART_DMACmd>

    USART_Cmd(USART2, ENABLE);
 8002daa:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8002dae:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002db2:	f04f 0101 	mov.w	r1, #1
 8002db6:	f01a ff3f 	bl	801dc38 <USART_Cmd>
}
 8002dba:	b015      	add	sp, #84	; 0x54
 8002dbc:	bd00      	pop	{pc}
 8002dbe:	bf00      	nop

08002dc0 <gpsAvailable>:
///////////////////////////////////////////////////////////////////////////////
// GPS Available
///////////////////////////////////////////////////////////////////////////////

uint16_t gpsAvailable(void)
{
 8002dc0:	b508      	push	{r3, lr}
    return (DMA_GetCurrDataCounter(DMA1_Channel6) != rx2DMAPos) ? true : false;
 8002dc2:	f04f 006c 	mov.w	r0, #108	; 0x6c
 8002dc6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002dca:	f015 fa73 	bl	80182b4 <DMA_GetCurrDataCounter>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f240 7304 	movw	r3, #1796	; 0x704
 8002dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	bf0c      	ite	eq
 8002de0:	2300      	moveq	r3, #0
 8002de2:	2301      	movne	r3, #1
 8002de4:	b29b      	uxth	r3, r3
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	bd08      	pop	{r3, pc}
 8002dea:	bf00      	nop

08002dec <gpsClearBuffer>:
///////////////////////////////////////////////////////////////////////////////
// GPS Clear Buffer
///////////////////////////////////////////////////////////////////////////////

void gpsClearBuffer(void)
{
 8002dec:	b508      	push	{r3, lr}
    rx2DMAPos = DMA_GetCurrDataCounter(DMA1_Channel6);
 8002dee:	f04f 006c 	mov.w	r0, #108	; 0x6c
 8002df2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002df6:	f015 fa5d 	bl	80182b4 <DMA_GetCurrDataCounter>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f240 7304 	movw	r3, #1796	; 0x704
 8002e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e06:	601a      	str	r2, [r3, #0]
}
 8002e08:	bd08      	pop	{r3, pc}
 8002e0a:	bf00      	nop

08002e0c <gpsNumCharsAvailable>:
///////////////////////////////////////////////////////////////////////////////
// GPS Number of Characters Available
///////////////////////////////////////////////////////////////////////////////

uint16_t gpsNumCharsAvailable(void)
{
 8002e0c:	b510      	push	{r4, lr}
 8002e0e:	b082      	sub	sp, #8
	int32_t number;

	number = rx2DMAPos - DMA_GetCurrDataCounter(DMA1_Channel6);
 8002e10:	f240 7304 	movw	r3, #1796	; 0x704
 8002e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e18:	681c      	ldr	r4, [r3, #0]
 8002e1a:	f04f 006c 	mov.w	r0, #108	; 0x6c
 8002e1e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002e22:	f015 fa47 	bl	80182b4 <DMA_GetCurrDataCounter>
 8002e26:	4603      	mov	r3, r0
 8002e28:	1ae3      	subs	r3, r4, r3
 8002e2a:	9301      	str	r3, [sp, #4]

	if (number >= 0)
 8002e2c:	9b01      	ldr	r3, [sp, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	db02      	blt.n	8002e38 <gpsNumCharsAvailable+0x2c>
	    return (uint16_t)number;
 8002e32:	9b01      	ldr	r3, [sp, #4]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	e004      	b.n	8002e42 <gpsNumCharsAvailable+0x36>
	else
	    return (uint16_t)(UART2_BUFFER_SIZE + number);
 8002e38:	9b01      	ldr	r3, [sp, #4]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e40:	b29b      	uxth	r3, r3
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	b002      	add	sp, #8
 8002e46:	bd10      	pop	{r4, pc}

08002e48 <gpsRead>:
///////////////////////////////////////////////////////////////////////////////
// GPS Read
///////////////////////////////////////////////////////////////////////////////

uint8_t gpsRead(void)
{
 8002e48:	b082      	sub	sp, #8
    uint8_t ch;

    ch = rx2Buffer[UART2_BUFFER_SIZE - rx2DMAPos];
 8002e4a:	f240 7304 	movw	r3, #1796	; 0x704
 8002e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8002e58:	f640 1370 	movw	r3, #2416	; 0x970
 8002e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e60:	5c9b      	ldrb	r3, [r3, r2]
 8002e62:	f88d 3007 	strb.w	r3, [sp, #7]
    // go back around the buffer
    if (--rx2DMAPos == 0)
 8002e66:	f240 7304 	movw	r3, #1796	; 0x704
 8002e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f103 32ff 	add.w	r2, r3, #4294967295
 8002e74:	f240 7304 	movw	r3, #1796	; 0x704
 8002e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	f240 7304 	movw	r3, #1796	; 0x704
 8002e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d106      	bne.n	8002e9a <gpsRead+0x52>
	    rx2DMAPos = UART2_BUFFER_SIZE;
 8002e8c:	f240 7304 	movw	r3, #1796	; 0x704
 8002e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e98:	601a      	str	r2, [r3, #0]

    return ch;
 8002e9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	b002      	add	sp, #8
 8002ea2:	4770      	bx	lr

08002ea4 <gpsReadPoll>:
///////////////////////////////////////////////////////////////////////////////
// GPS Read Poll
///////////////////////////////////////////////////////////////////////////////

uint8_t gpsReadPoll(void)
{
 8002ea4:	b508      	push	{r3, lr}
    while (!gpsAvailable()); // wait for some bytes
 8002ea6:	bf00      	nop
 8002ea8:	f7ff ff8a 	bl	8002dc0 <gpsAvailable>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0fa      	beq.n	8002ea8 <gpsReadPoll+0x4>
    return gpsRead();
 8002eb2:	f7ff ffc9 	bl	8002e48 <gpsRead>
 8002eb6:	4603      	mov	r3, r0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	bd08      	pop	{r3, pc}

08002ebc <gpsWrite>:
///////////////////////////////////////////////////////////////////////////////
// GPS Write
///////////////////////////////////////////////////////////////////////////////

void gpsWrite(uint8_t ch)
{
 8002ebc:	b500      	push	{lr}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f88d 3007 	strb.w	r3, [sp, #7]
    tx2Buffer[tx2BufferHead] = ch;
 8002ec6:	f240 730a 	movw	r3, #1802	; 0x70a
 8002eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	f241 1370 	movw	r3, #4464	; 0x1170
 8002ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002eda:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002ede:	5499      	strb	r1, [r3, r2]
    tx2BufferHead = (tx2BufferHead + 1) % UART2_BUFFER_SIZE;
 8002ee0:	f240 730a 	movw	r3, #1802	; 0x70a
 8002ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	f103 0301 	add.w	r3, r3, #1
 8002eee:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8002ef2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8002ef6:	189b      	adds	r3, r3, r2
 8002ef8:	ea4f 5343 	mov.w	r3, r3, lsl #21
 8002efc:	ea4f 5353 	mov.w	r3, r3, lsr #21
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	f240 730a 	movw	r3, #1802	; 0x70a
 8002f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f0c:	801a      	strh	r2, [r3, #0]

    // if DMA wasn't enabled, fire it up
    if (!(DMA1_Channel7->CCR & 1))
 8002f0e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002f12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <gpsWrite+0x68>
        uart2TxDMA();
 8002f20:	f7ff fdc4 	bl	8002aac <uart2TxDMA>
}
 8002f24:	b003      	add	sp, #12
 8002f26:	bd00      	pop	{pc}

08002f28 <gpsPrint>:
///////////////////////////////////////////////////////////////////////////////
// GPS Print
///////////////////////////////////////////////////////////////////////////////

void gpsPrint(char *str)
{
 8002f28:	b500      	push	{lr}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	9001      	str	r0, [sp, #4]
    while (*str)
 8002f2e:	e008      	b.n	8002f42 <gpsPrint+0x1a>
	    gpsWrite(*(str++));
 8002f30:	9b01      	ldr	r3, [sp, #4]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	9a01      	ldr	r2, [sp, #4]
 8002f36:	f102 0201 	add.w	r2, r2, #1
 8002f3a:	9201      	str	r2, [sp, #4]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ffbd 	bl	8002ebc <gpsWrite>
// GPS Print
///////////////////////////////////////////////////////////////////////////////

void gpsPrint(char *str)
{
    while (*str)
 8002f42:	9b01      	ldr	r3, [sp, #4]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f2      	bne.n	8002f30 <gpsPrint+0x8>
	    gpsWrite(*(str++));
}
 8002f4a:	b003      	add	sp, #12
 8002f4c:	bd00      	pop	{pc}
 8002f4e:	bf00      	nop

08002f50 <i2cTimeoutUserCallback>:
///////////////////////////////////////////////////////////////////////////////
// I2C TimeoutUserCallback
///////////////////////////////////////////////////////////////////////////////

uint32_t i2cTimeoutUserCallback(I2C_TypeDef *I2Cx)
{
 8002f50:	b500      	push	{lr}
 8002f52:	b083      	sub	sp, #12
 8002f54:	9001      	str	r0, [sp, #4]
	GPIO_SetBits(RED_N_LED_GPIO, RED_N_LED_PIN);
 8002f56:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002f5a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8002f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f62:	f016 fa45 	bl	80193f0 <GPIO_SetBits>

	if (I2Cx == I2C1)
 8002f66:	9a01      	ldr	r2, [sp, #4]
 8002f68:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8002f6c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d114      	bne.n	8002f9e <i2cTimeoutUserCallback+0x4e>
	{
		i2c1ErrorCount++;
 8002f74:	f240 730c 	movw	r3, #1804	; 0x70c
 8002f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	f103 0301 	add.w	r3, r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	f240 730c 	movw	r3, #1804	; 0x70c
 8002f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f8e:	801a      	strh	r2, [r3, #0]
		return i2c1ErrorCount;
 8002f90:	f240 730c 	movw	r3, #1804	; 0x70c
 8002f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	e013      	b.n	8002fc6 <i2cTimeoutUserCallback+0x76>
	}
	else
	{
		i2c2ErrorCount++;
 8002f9e:	f240 730e 	movw	r3, #1806	; 0x70e
 8002fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	f103 0301 	add.w	r3, r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	f240 730e 	movw	r3, #1806	; 0x70e
 8002fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fb8:	801a      	strh	r2, [r3, #0]
		return i2c2ErrorCount;
 8002fba:	f240 730e 	movw	r3, #1806	; 0x70e
 8002fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	b29b      	uxth	r3, r3
	}
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	b003      	add	sp, #12
 8002fca:	bd00      	pop	{pc}

08002fcc <i2cWrite>:
///////////////////////////////////////////////////////////////////////////////
// I2C Write
///////////////////////////////////////////////////////////////////////////////

uint16_t i2cWrite(I2C_TypeDef *I2Cx, uint8_t addr_, uint8_t reg, uint8_t data)
{
 8002fcc:	b500      	push	{lr}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	9003      	str	r0, [sp, #12]
 8002fd2:	f88d 100b 	strb.w	r1, [sp, #11]
 8002fd6:	f88d 200a 	strb.w	r2, [sp, #10]
 8002fda:	f88d 3009 	strb.w	r3, [sp, #9]
	/* Test on BUSY Flag */
    i2cTimeout = I2C_LONG_TIMEOUT;
 8002fde:	f641 1370 	movw	r3, #6512	; 0x1970
 8002fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fe6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8002fea:	601a      	str	r2, [r3, #0]
    while(I2C_GetFlagStatus(I2Cx, I2C_ISR_BUSY) != RESET)
 8002fec:	e018      	b.n	8003020 <i2cWrite+0x54>
    {
        if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
 8002fee:	f641 1370 	movw	r3, #6512	; 0x1970
 8002ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf14      	ite	ne
 8002ffc:	2200      	movne	r2, #0
 8002ffe:	2201      	moveq	r2, #1
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	f103 31ff 	add.w	r1, r3, #4294967295
 8003006:	f641 1370 	movw	r3, #6512	; 0x1970
 800300a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800300e:	6019      	str	r1, [r3, #0]
 8003010:	2a00      	cmp	r2, #0
 8003012:	d005      	beq.n	8003020 <i2cWrite+0x54>
 8003014:	9803      	ldr	r0, [sp, #12]
 8003016:	f7ff ff9b 	bl	8002f50 <i2cTimeoutUserCallback>
 800301a:	4603      	mov	r3, r0
 800301c:	b29b      	uxth	r3, r3
 800301e:	e0da      	b.n	80031d6 <i2cWrite+0x20a>

uint16_t i2cWrite(I2C_TypeDef *I2Cx, uint8_t addr_, uint8_t reg, uint8_t data)
{
	/* Test on BUSY Flag */
    i2cTimeout = I2C_LONG_TIMEOUT;
    while(I2C_GetFlagStatus(I2Cx, I2C_ISR_BUSY) != RESET)
 8003020:	9803      	ldr	r0, [sp, #12]
 8003022:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003026:	f016 fe7f 	bl	8019d28 <I2C_GetFlagStatus>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1de      	bne.n	8002fee <i2cWrite+0x22>
    {
        if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
    }

    /* Configure slave address, nbytes, reload, end mode and start or stop generation */
    I2C_TransferHandling(I2Cx, addr_, 1, I2C_Reload_Mode, I2C_Generate_Start_Write);
 8003030:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003034:	b29b      	uxth	r3, r3
 8003036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800303a:	9200      	str	r2, [sp, #0]
 800303c:	9803      	ldr	r0, [sp, #12]
 800303e:	4619      	mov	r1, r3
 8003040:	f04f 0201 	mov.w	r2, #1
 8003044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003048:	f016 fd20 	bl	8019a8c <I2C_TransferHandling>

    /* Wait until TXIS flag is set */
    i2cTimeout = I2C_LONG_TIMEOUT;
 800304c:	f641 1370 	movw	r3, #6512	; 0x1970
 8003050:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003054:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8003058:	601a      	str	r2, [r3, #0]
    while(I2C_GetFlagStatus(I2Cx, I2C_ISR_TXIS) == RESET)
 800305a:	e018      	b.n	800308e <i2cWrite+0xc2>
    {
        if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
 800305c:	f641 1370 	movw	r3, #6512	; 0x1970
 8003060:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	bf14      	ite	ne
 800306a:	2200      	movne	r2, #0
 800306c:	2201      	moveq	r2, #1
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	f103 31ff 	add.w	r1, r3, #4294967295
 8003074:	f641 1370 	movw	r3, #6512	; 0x1970
 8003078:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800307c:	6019      	str	r1, [r3, #0]
 800307e:	2a00      	cmp	r2, #0
 8003080:	d005      	beq.n	800308e <i2cWrite+0xc2>
 8003082:	9803      	ldr	r0, [sp, #12]
 8003084:	f7ff ff64 	bl	8002f50 <i2cTimeoutUserCallback>
 8003088:	4603      	mov	r3, r0
 800308a:	b29b      	uxth	r3, r3
 800308c:	e0a3      	b.n	80031d6 <i2cWrite+0x20a>
    /* Configure slave address, nbytes, reload, end mode and start or stop generation */
    I2C_TransferHandling(I2Cx, addr_, 1, I2C_Reload_Mode, I2C_Generate_Start_Write);

    /* Wait until TXIS flag is set */
    i2cTimeout = I2C_LONG_TIMEOUT;
    while(I2C_GetFlagStatus(I2Cx, I2C_ISR_TXIS) == RESET)
 800308e:	9803      	ldr	r0, [sp, #12]
 8003090:	f04f 0102 	mov.w	r1, #2
 8003094:	f016 fe48 	bl	8019d28 <I2C_GetFlagStatus>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0de      	beq.n	800305c <i2cWrite+0x90>
    {
        if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
    }

    /* Send Register address */
    I2C_SendData(I2Cx, (uint8_t) reg);
 800309e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80030a2:	9803      	ldr	r0, [sp, #12]
 80030a4:	4619      	mov	r1, r3
 80030a6:	f016 fe0f 	bl	8019cc8 <I2C_SendData>

    /* Wait until TCR flag is set */
    i2cTimeout = I2C_LONG_TIMEOUT;
 80030aa:	f641 1370 	movw	r3, #6512	; 0x1970
 80030ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030b2:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80030b6:	601a      	str	r2, [r3, #0]
    while(I2C_GetFlagStatus(I2Cx, I2C_ISR_TCR) == RESET)
 80030b8:	e018      	b.n	80030ec <i2cWrite+0x120>
    {
        if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
 80030ba:	f641 1370 	movw	r3, #6512	; 0x1970
 80030be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf14      	ite	ne
 80030c8:	2200      	movne	r2, #0
 80030ca:	2201      	moveq	r2, #1
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	f103 31ff 	add.w	r1, r3, #4294967295
 80030d2:	f641 1370 	movw	r3, #6512	; 0x1970
 80030d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030da:	6019      	str	r1, [r3, #0]
 80030dc:	2a00      	cmp	r2, #0
 80030de:	d005      	beq.n	80030ec <i2cWrite+0x120>
 80030e0:	9803      	ldr	r0, [sp, #12]
 80030e2:	f7ff ff35 	bl	8002f50 <i2cTimeoutUserCallback>
 80030e6:	4603      	mov	r3, r0
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	e074      	b.n	80031d6 <i2cWrite+0x20a>
    /* Send Register address */
    I2C_SendData(I2Cx, (uint8_t) reg);

    /* Wait until TCR flag is set */
    i2cTimeout = I2C_LONG_TIMEOUT;
    while(I2C_GetFlagStatus(I2Cx, I2C_ISR_TCR) == RESET)
 80030ec:	9803      	ldr	r0, [sp, #12]
 80030ee:	f04f 0180 	mov.w	r1, #128	; 0x80
 80030f2:	f016 fe19 	bl	8019d28 <I2C_GetFlagStatus>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0de      	beq.n	80030ba <i2cWrite+0xee>
    {
        if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
    }

    /* Configure slave address, nbytes, reload, end mode and start or stop generation */
    I2C_TransferHandling(I2Cx, addr_, 1, I2C_AutoEnd_Mode, I2C_No_StartStop);
 80030fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003100:	b29b      	uxth	r3, r3
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	9200      	str	r2, [sp, #0]
 8003108:	9803      	ldr	r0, [sp, #12]
 800310a:	4619      	mov	r1, r3
 800310c:	f04f 0201 	mov.w	r2, #1
 8003110:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003114:	f016 fcba 	bl	8019a8c <I2C_TransferHandling>

    /* Wait until TXIS flag is set */
    i2cTimeout = I2C_LONG_TIMEOUT;
 8003118:	f641 1370 	movw	r3, #6512	; 0x1970
 800311c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003120:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8003124:	601a      	str	r2, [r3, #0]
    while(I2C_GetFlagStatus(I2Cx, I2C_ISR_TXIS) == RESET)
 8003126:	e018      	b.n	800315a <i2cWrite+0x18e>
    {
        if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
 8003128:	f641 1370 	movw	r3, #6512	; 0x1970
 800312c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	bf14      	ite	ne
 8003136:	2200      	movne	r2, #0
 8003138:	2201      	moveq	r2, #1
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	f103 31ff 	add.w	r1, r3, #4294967295
 8003140:	f641 1370 	movw	r3, #6512	; 0x1970
 8003144:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003148:	6019      	str	r1, [r3, #0]
 800314a:	2a00      	cmp	r2, #0
 800314c:	d005      	beq.n	800315a <i2cWrite+0x18e>
 800314e:	9803      	ldr	r0, [sp, #12]
 8003150:	f7ff fefe 	bl	8002f50 <i2cTimeoutUserCallback>
 8003154:	4603      	mov	r3, r0
 8003156:	b29b      	uxth	r3, r3
 8003158:	e03d      	b.n	80031d6 <i2cWrite+0x20a>
    /* Configure slave address, nbytes, reload, end mode and start or stop generation */
    I2C_TransferHandling(I2Cx, addr_, 1, I2C_AutoEnd_Mode, I2C_No_StartStop);

    /* Wait until TXIS flag is set */
    i2cTimeout = I2C_LONG_TIMEOUT;
    while(I2C_GetFlagStatus(I2Cx, I2C_ISR_TXIS) == RESET)
 800315a:	9803      	ldr	r0, [sp, #12]
 800315c:	f04f 0102 	mov.w	r1, #2
 8003160:	f016 fde2 	bl	8019d28 <I2C_GetFlagStatus>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0de      	beq.n	8003128 <i2cWrite+0x15c>
    {
        if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
    }

    /* Write data to TXDR */
    I2C_SendData(I2Cx, data);
 800316a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800316e:	9803      	ldr	r0, [sp, #12]
 8003170:	4619      	mov	r1, r3
 8003172:	f016 fda9 	bl	8019cc8 <I2C_SendData>

    /* Wait until STOPF flag is set */
    i2cTimeout = I2C_LONG_TIMEOUT;
 8003176:	f641 1370 	movw	r3, #6512	; 0x1970
 800317a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800317e:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8003182:	601a      	str	r2, [r3, #0]
    while(I2C_GetFlagStatus(I2Cx, I2C_ISR_STOPF) == RESET)
 8003184:	e018      	b.n	80031b8 <i2cWrite+0x1ec>
    {
        if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
 8003186:	f641 1370 	movw	r3, #6512	; 0x1970
 800318a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf14      	ite	ne
 8003194:	2200      	movne	r2, #0
 8003196:	2201      	moveq	r2, #1
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	f103 31ff 	add.w	r1, r3, #4294967295
 800319e:	f641 1370 	movw	r3, #6512	; 0x1970
 80031a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031a6:	6019      	str	r1, [r3, #0]
 80031a8:	2a00      	cmp	r2, #0
 80031aa:	d005      	beq.n	80031b8 <i2cWrite+0x1ec>
 80031ac:	9803      	ldr	r0, [sp, #12]
 80031ae:	f7ff fecf 	bl	8002f50 <i2cTimeoutUserCallback>
 80031b2:	4603      	mov	r3, r0
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	e00e      	b.n	80031d6 <i2cWrite+0x20a>
    /* Write data to TXDR */
    I2C_SendData(I2Cx, data);

    /* Wait until STOPF flag is set */
    i2cTimeout = I2C_LONG_TIMEOUT;
    while(I2C_GetFlagStatus(I2Cx, I2C_ISR_STOPF) == RESET)
 80031b8:	9803      	ldr	r0, [sp, #12]
 80031ba:	f04f 0120 	mov.w	r1, #32
 80031be:	f016 fdb3 	bl	8019d28 <I2C_GetFlagStatus>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0de      	beq.n	8003186 <i2cWrite+0x1ba>
    {
        if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
    }

    /* Clear STOPF flag */
    I2C_ClearFlag(I2Cx, I2C_ICR_STOPCF);
 80031c8:	9803      	ldr	r0, [sp, #12]
 80031ca:	f04f 0120 	mov.w	r1, #32
 80031ce:	f016 fdcd 	bl	8019d6c <I2C_ClearFlag>

    return I2C_OK;
 80031d2:	f04f 0300 	mov.w	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	b005      	add	sp, #20
 80031da:	bd00      	pop	{pc}

080031dc <i2cRead>:
///////////////////////////////////////////////////////////////////////////////
// I2C Read
///////////////////////////////////////////////////////////////////////////////

uint16_t i2cRead(I2C_TypeDef *I2Cx, uint8_t addr_, uint8_t reg, uint16_t len, uint8_t* buf)
{
 80031dc:	b500      	push	{lr}
 80031de:	b085      	sub	sp, #20
 80031e0:	9003      	str	r0, [sp, #12]
 80031e2:	f88d 100b 	strb.w	r1, [sp, #11]
 80031e6:	f88d 200a 	strb.w	r2, [sp, #10]
 80031ea:	f8ad 3008 	strh.w	r3, [sp, #8]
	/* Test on BUSY Flag */
    i2cTimeout = I2C_LONG_TIMEOUT;
 80031ee:	f641 1370 	movw	r3, #6512	; 0x1970
 80031f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031f6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80031fa:	601a      	str	r2, [r3, #0]
    while(I2C_GetFlagStatus(I2Cx, I2C_ISR_BUSY) != RESET)
 80031fc:	e018      	b.n	8003230 <i2cRead+0x54>
    {
        if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
 80031fe:	f641 1370 	movw	r3, #6512	; 0x1970
 8003202:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf14      	ite	ne
 800320c:	2200      	movne	r2, #0
 800320e:	2201      	moveq	r2, #1
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	f103 31ff 	add.w	r1, r3, #4294967295
 8003216:	f641 1370 	movw	r3, #6512	; 0x1970
 800321a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800321e:	6019      	str	r1, [r3, #0]
 8003220:	2a00      	cmp	r2, #0
 8003222:	d005      	beq.n	8003230 <i2cRead+0x54>
 8003224:	9803      	ldr	r0, [sp, #12]
 8003226:	f7ff fe93 	bl	8002f50 <i2cTimeoutUserCallback>
 800322a:	4603      	mov	r3, r0
 800322c:	b29b      	uxth	r3, r3
 800322e:	e0f6      	b.n	800341e <i2cRead+0x242>

uint16_t i2cRead(I2C_TypeDef *I2Cx, uint8_t addr_, uint8_t reg, uint16_t len, uint8_t* buf)
{
	/* Test on BUSY Flag */
    i2cTimeout = I2C_LONG_TIMEOUT;
    while(I2C_GetFlagStatus(I2Cx, I2C_ISR_BUSY) != RESET)
 8003230:	9803      	ldr	r0, [sp, #12]
 8003232:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003236:	f016 fd77 	bl	8019d28 <I2C_GetFlagStatus>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1de      	bne.n	80031fe <i2cRead+0x22>
    {
        if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
    }

    /* Configure slave address, nbytes, reload, end mode and start or stop generation */
    I2C_TransferHandling(I2Cx, addr_, 1, I2C_SoftEnd_Mode, I2C_Generate_Start_Write);
 8003240:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003244:	b29b      	uxth	r3, r3
 8003246:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800324a:	9200      	str	r2, [sp, #0]
 800324c:	9803      	ldr	r0, [sp, #12]
 800324e:	4619      	mov	r1, r3
 8003250:	f04f 0201 	mov.w	r2, #1
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	f016 fc18 	bl	8019a8c <I2C_TransferHandling>

    /* Wait until TXIS flag is set */
    i2cTimeout = I2C_LONG_TIMEOUT;
 800325c:	f641 1370 	movw	r3, #6512	; 0x1970
 8003260:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003264:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8003268:	601a      	str	r2, [r3, #0]
    while(I2C_GetFlagStatus(I2Cx, I2C_ISR_TXIS) == RESET)
 800326a:	e018      	b.n	800329e <i2cRead+0xc2>
    {
        if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
 800326c:	f641 1370 	movw	r3, #6512	; 0x1970
 8003270:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	bf14      	ite	ne
 800327a:	2200      	movne	r2, #0
 800327c:	2201      	moveq	r2, #1
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	f103 31ff 	add.w	r1, r3, #4294967295
 8003284:	f641 1370 	movw	r3, #6512	; 0x1970
 8003288:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800328c:	6019      	str	r1, [r3, #0]
 800328e:	2a00      	cmp	r2, #0
 8003290:	d005      	beq.n	800329e <i2cRead+0xc2>
 8003292:	9803      	ldr	r0, [sp, #12]
 8003294:	f7ff fe5c 	bl	8002f50 <i2cTimeoutUserCallback>
 8003298:	4603      	mov	r3, r0
 800329a:	b29b      	uxth	r3, r3
 800329c:	e0bf      	b.n	800341e <i2cRead+0x242>
    /* Configure slave address, nbytes, reload, end mode and start or stop generation */
    I2C_TransferHandling(I2Cx, addr_, 1, I2C_SoftEnd_Mode, I2C_Generate_Start_Write);

    /* Wait until TXIS flag is set */
    i2cTimeout = I2C_LONG_TIMEOUT;
    while(I2C_GetFlagStatus(I2Cx, I2C_ISR_TXIS) == RESET)
 800329e:	9803      	ldr	r0, [sp, #12]
 80032a0:	f04f 0102 	mov.w	r1, #2
 80032a4:	f016 fd40 	bl	8019d28 <I2C_GetFlagStatus>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0de      	beq.n	800326c <i2cRead+0x90>
    {
        if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
    }

    if(len > 1)
 80032ae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d905      	bls.n	80032c2 <i2cRead+0xe6>
        reg |= 0x80;
 80032b6:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80032ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032be:	f88d 300a 	strb.w	r3, [sp, #10]

    /* Send Register address */
    I2C_SendData(I2Cx, (uint8_t)reg);
 80032c2:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80032c6:	9803      	ldr	r0, [sp, #12]
 80032c8:	4619      	mov	r1, r3
 80032ca:	f016 fcfd 	bl	8019cc8 <I2C_SendData>

    /* Wait until TC flag is set */
    i2cTimeout = I2C_LONG_TIMEOUT;
 80032ce:	f641 1370 	movw	r3, #6512	; 0x1970
 80032d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032d6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80032da:	601a      	str	r2, [r3, #0]
    while(I2C_GetFlagStatus(I2Cx, I2C_ISR_TC) == RESET)
 80032dc:	e018      	b.n	8003310 <i2cRead+0x134>
    {
        if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
 80032de:	f641 1370 	movw	r3, #6512	; 0x1970
 80032e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bf14      	ite	ne
 80032ec:	2200      	movne	r2, #0
 80032ee:	2201      	moveq	r2, #1
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	f103 31ff 	add.w	r1, r3, #4294967295
 80032f6:	f641 1370 	movw	r3, #6512	; 0x1970
 80032fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032fe:	6019      	str	r1, [r3, #0]
 8003300:	2a00      	cmp	r2, #0
 8003302:	d005      	beq.n	8003310 <i2cRead+0x134>
 8003304:	9803      	ldr	r0, [sp, #12]
 8003306:	f7ff fe23 	bl	8002f50 <i2cTimeoutUserCallback>
 800330a:	4603      	mov	r3, r0
 800330c:	b29b      	uxth	r3, r3
 800330e:	e086      	b.n	800341e <i2cRead+0x242>
    /* Send Register address */
    I2C_SendData(I2Cx, (uint8_t)reg);

    /* Wait until TC flag is set */
    i2cTimeout = I2C_LONG_TIMEOUT;
    while(I2C_GetFlagStatus(I2Cx, I2C_ISR_TC) == RESET)
 8003310:	9803      	ldr	r0, [sp, #12]
 8003312:	f04f 0140 	mov.w	r1, #64	; 0x40
 8003316:	f016 fd07 	bl	8019d28 <I2C_GetFlagStatus>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0de      	beq.n	80032de <i2cRead+0x102>
    {
        if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
    }

    /* Configure slave address, nbytes, reload, end mode and start or stop generation */
    I2C_TransferHandling(I2Cx, addr_, len, I2C_AutoEnd_Mode, I2C_Generate_Start_Read);
 8003320:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003324:	b29a      	uxth	r2, r3
 8003326:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8003330:	9100      	str	r1, [sp, #0]
 8003332:	9803      	ldr	r0, [sp, #12]
 8003334:	4611      	mov	r1, r2
 8003336:	461a      	mov	r2, r3
 8003338:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800333c:	f016 fba6 	bl	8019a8c <I2C_TransferHandling>

    /* Wait until all data are received */
    while (len)
 8003340:	e039      	b.n	80033b6 <i2cRead+0x1da>
    {
        /* Wait until RXNE flag is set */
        i2cTimeout = I2C_LONG_TIMEOUT;
 8003342:	f641 1370 	movw	r3, #6512	; 0x1970
 8003346:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800334a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800334e:	601a      	str	r2, [r3, #0]
        while(I2C_GetFlagStatus(I2Cx, I2C_ISR_RXNE) == RESET)
 8003350:	e018      	b.n	8003384 <i2cRead+0x1a8>
        {
            if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
 8003352:	f641 1370 	movw	r3, #6512	; 0x1970
 8003356:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf14      	ite	ne
 8003360:	2200      	movne	r2, #0
 8003362:	2201      	moveq	r2, #1
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	f103 31ff 	add.w	r1, r3, #4294967295
 800336a:	f641 1370 	movw	r3, #6512	; 0x1970
 800336e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003372:	6019      	str	r1, [r3, #0]
 8003374:	2a00      	cmp	r2, #0
 8003376:	d005      	beq.n	8003384 <i2cRead+0x1a8>
 8003378:	9803      	ldr	r0, [sp, #12]
 800337a:	f7ff fde9 	bl	8002f50 <i2cTimeoutUserCallback>
 800337e:	4603      	mov	r3, r0
 8003380:	b29b      	uxth	r3, r3
 8003382:	e04c      	b.n	800341e <i2cRead+0x242>
    /* Wait until all data are received */
    while (len)
    {
        /* Wait until RXNE flag is set */
        i2cTimeout = I2C_LONG_TIMEOUT;
        while(I2C_GetFlagStatus(I2Cx, I2C_ISR_RXNE) == RESET)
 8003384:	9803      	ldr	r0, [sp, #12]
 8003386:	f04f 0104 	mov.w	r1, #4
 800338a:	f016 fccd 	bl	8019d28 <I2C_GetFlagStatus>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0de      	beq.n	8003352 <i2cRead+0x176>
        {
            if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
        }

        /* Read data from RXDR */
        *buf = I2C_ReceiveData(I2Cx);
 8003394:	9803      	ldr	r0, [sp, #12]
 8003396:	f016 fca3 	bl	8019ce0 <I2C_ReceiveData>
 800339a:	4603      	mov	r3, r0
 800339c:	461a      	mov	r2, r3
 800339e:	9b06      	ldr	r3, [sp, #24]
 80033a0:	701a      	strb	r2, [r3, #0]
        /* Point to the next location where the byte read will be saved */
        buf++;
 80033a2:	9b06      	ldr	r3, [sp, #24]
 80033a4:	f103 0301 	add.w	r3, r3, #1
 80033a8:	9306      	str	r3, [sp, #24]

        /* Decrement the read bytes counter */
        len--;
 80033aa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80033ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80033b2:	f8ad 3008 	strh.w	r3, [sp, #8]

    /* Configure slave address, nbytes, reload, end mode and start or stop generation */
    I2C_TransferHandling(I2Cx, addr_, len, I2C_AutoEnd_Mode, I2C_Generate_Start_Read);

    /* Wait until all data are received */
    while (len)
 80033b6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1c1      	bne.n	8003342 <i2cRead+0x166>
        /* Decrement the read bytes counter */
        len--;
    }

    /* Wait until STOPF flag is set */
    i2cTimeout = I2C_LONG_TIMEOUT;
 80033be:	f641 1370 	movw	r3, #6512	; 0x1970
 80033c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033c6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80033ca:	601a      	str	r2, [r3, #0]
    while(I2C_GetFlagStatus(I2Cx, I2C_ISR_STOPF) == RESET)
 80033cc:	e018      	b.n	8003400 <i2cRead+0x224>
    {
        if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
 80033ce:	f641 1370 	movw	r3, #6512	; 0x1970
 80033d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf14      	ite	ne
 80033dc:	2200      	movne	r2, #0
 80033de:	2201      	moveq	r2, #1
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	f103 31ff 	add.w	r1, r3, #4294967295
 80033e6:	f641 1370 	movw	r3, #6512	; 0x1970
 80033ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033ee:	6019      	str	r1, [r3, #0]
 80033f0:	2a00      	cmp	r2, #0
 80033f2:	d005      	beq.n	8003400 <i2cRead+0x224>
 80033f4:	9803      	ldr	r0, [sp, #12]
 80033f6:	f7ff fdab 	bl	8002f50 <i2cTimeoutUserCallback>
 80033fa:	4603      	mov	r3, r0
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	e00e      	b.n	800341e <i2cRead+0x242>
        len--;
    }

    /* Wait until STOPF flag is set */
    i2cTimeout = I2C_LONG_TIMEOUT;
    while(I2C_GetFlagStatus(I2Cx, I2C_ISR_STOPF) == RESET)
 8003400:	9803      	ldr	r0, [sp, #12]
 8003402:	f04f 0120 	mov.w	r1, #32
 8003406:	f016 fc8f 	bl	8019d28 <I2C_GetFlagStatus>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0de      	beq.n	80033ce <i2cRead+0x1f2>
    {
        if((i2cTimeout--) == 0) return i2cTimeoutUserCallback(I2Cx);
    }

    /* Clear STOPF flag */
    I2C_ClearFlag(I2Cx, I2C_ICR_STOPCF);
 8003410:	9803      	ldr	r0, [sp, #12]
 8003412:	f04f 0120 	mov.w	r1, #32
 8003416:	f016 fca9 	bl	8019d6c <I2C_ClearFlag>

    /* If all operations OK */
    return I2C_OK;
 800341a:	f04f 0300 	mov.w	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	b005      	add	sp, #20
 8003422:	bd00      	pop	{pc}

08003424 <i2cUnstick>:
///////////////////////////////////////////////////////////////////////////////
// I2C Unstick
///////////////////////////////////////////////////////////////////////////////

static void i2cUnstick(I2C_TypeDef *I2Cx)
{
 8003424:	b500      	push	{lr}
 8003426:	b087      	sub	sp, #28
 8003428:	9001      	str	r0, [sp, #4]

    uint8_t i;

    ///////////////////////////////////

    if (I2Cx == I2C1)
 800342a:	9a01      	ldr	r2, [sp, #4]
 800342c:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8003430:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003434:	429a      	cmp	r2, r3
 8003436:	f040 809e 	bne.w	8003576 <i2cUnstick+0x152>
    {
	    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 800343a:	f04f 0301 	mov.w	r3, #1
 800343e:	f88d 3010 	strb.w	r3, [sp, #16]
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003442:	f04f 0303 	mov.w	r3, #3
 8003446:	f88d 3011 	strb.w	r3, [sp, #17]
        GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800344a:	f04f 0301 	mov.w	r3, #1
 800344e:	f88d 3012 	strb.w	r3, [sp, #18]
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	f88d 3013 	strb.w	r3, [sp, #19]

        GPIO_InitStructure.GPIO_Pin   = I2C1_SCL_PIN;
 800345a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800345e:	9303      	str	r3, [sp, #12]
        GPIO_Init(I2C1_SCL_GPIO, &GPIO_InitStructure);
 8003460:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003464:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003468:	ab03      	add	r3, sp, #12
 800346a:	4619      	mov	r1, r3
 800346c:	f015 fe94 	bl	8019198 <GPIO_Init>

        GPIO_InitStructure.GPIO_Pin   = I2C1_SDA_PIN;
 8003470:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003474:	9303      	str	r3, [sp, #12]
        GPIO_Init(I2C1_SDA_GPIO, &GPIO_InitStructure);
 8003476:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800347a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800347e:	ab03      	add	r3, sp, #12
 8003480:	4619      	mov	r1, r3
 8003482:	f015 fe89 	bl	8019198 <GPIO_Init>

        GPIO_SetBits(I2C1_SCL_GPIO, I2C1_SCL_PIN);
 8003486:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800348a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800348e:	f04f 0140 	mov.w	r1, #64	; 0x40
 8003492:	f015 ffad 	bl	80193f0 <GPIO_SetBits>
        GPIO_SetBits(I2C1_SDA_GPIO, I2C1_SDA_PIN);
 8003496:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800349a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800349e:	f04f 0180 	mov.w	r1, #128	; 0x80
 80034a2:	f015 ffa5 	bl	80193f0 <GPIO_SetBits>

        for (i = 0; i < 8; i++)
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	f88d 3017 	strb.w	r3, [sp, #23]
 80034ae:	e02e      	b.n	800350e <i2cUnstick+0xea>
        {
            while (!GPIO_ReadInputDataBit(I2C1_SCL_GPIO, I2C1_SCL_PIN))  // Wait for any clock stretching to finish
                delayMicroseconds(3);                                    // 2.5 would be 400 kHz, 3 is 333.33333 kHz
 80034b0:	f04f 0003 	mov.w	r0, #3
 80034b4:	f002 fde4 	bl	8006080 <delayMicroseconds>
 80034b8:	e000      	b.n	80034bc <i2cUnstick+0x98>
        GPIO_SetBits(I2C1_SCL_GPIO, I2C1_SCL_PIN);
        GPIO_SetBits(I2C1_SDA_GPIO, I2C1_SDA_PIN);

        for (i = 0; i < 8; i++)
        {
            while (!GPIO_ReadInputDataBit(I2C1_SCL_GPIO, I2C1_SCL_PIN))  // Wait for any clock stretching to finish
 80034ba:	bf00      	nop
 80034bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80034c0:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80034c4:	f04f 0140 	mov.w	r1, #64	; 0x40
 80034c8:	f015 ff42 	bl	8019350 <GPIO_ReadInputDataBit>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0ee      	beq.n	80034b0 <i2cUnstick+0x8c>
                delayMicroseconds(3);                                    // 2.5 would be 400 kHz, 3 is 333.33333 kHz

            // Pull low
            GPIO_ResetBits(I2C1_SCL_GPIO, I2C1_SCL_PIN);                 // Set bus low
 80034d2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80034d6:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80034da:	f04f 0140 	mov.w	r1, #64	; 0x40
 80034de:	f015 ff93 	bl	8019408 <GPIO_ResetBits>
            delayMicroseconds(3);                                        // 2.5 would be 400 kHz, 3 is 333.33333 kHz
 80034e2:	f04f 0003 	mov.w	r0, #3
 80034e6:	f002 fdcb 	bl	8006080 <delayMicroseconds>
            // Release high again
            GPIO_SetBits(I2C1_SCL_GPIO, I2C1_SCL_PIN);                   // Set bus high
 80034ea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80034ee:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80034f2:	f04f 0140 	mov.w	r1, #64	; 0x40
 80034f6:	f015 ff7b 	bl	80193f0 <GPIO_SetBits>
            delayMicroseconds(3);                                        // 2.5 would be 400 kHz, 3 is 333.33333 kHz
 80034fa:	f04f 0003 	mov.w	r0, #3
 80034fe:	f002 fdbf 	bl	8006080 <delayMicroseconds>
        GPIO_Init(I2C1_SDA_GPIO, &GPIO_InitStructure);

        GPIO_SetBits(I2C1_SCL_GPIO, I2C1_SCL_PIN);
        GPIO_SetBits(I2C1_SDA_GPIO, I2C1_SDA_PIN);

        for (i = 0; i < 8; i++)
 8003502:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003506:	f103 0301 	add.w	r3, r3, #1
 800350a:	f88d 3017 	strb.w	r3, [sp, #23]
 800350e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003512:	2b07      	cmp	r3, #7
 8003514:	d9d1      	bls.n	80034ba <i2cUnstick+0x96>
            delayMicroseconds(3);                                        // 2.5 would be 400 kHz, 3 is 333.33333 kHz
        }

        // Generate a start then stop condition

        GPIO_ResetBits(I2C1_SDA_GPIO, I2C1_SDA_PIN);                     // Set bus data low
 8003516:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800351a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800351e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8003522:	f015 ff71 	bl	8019408 <GPIO_ResetBits>
        delayMicroseconds(3);                                            // 2.5 would be 400 kHz, 3 is 333.33333 kHz
 8003526:	f04f 0003 	mov.w	r0, #3
 800352a:	f002 fda9 	bl	8006080 <delayMicroseconds>
        GPIO_ResetBits(I2C1_SCL_GPIO, I2C1_SCL_PIN);                     // Set bus scl low
 800352e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003532:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003536:	f04f 0140 	mov.w	r1, #64	; 0x40
 800353a:	f015 ff65 	bl	8019408 <GPIO_ResetBits>
        delayMicroseconds(3);                                            // 2.5 would be 400 kHz, 3 is 333.33333 kHz
 800353e:	f04f 0003 	mov.w	r0, #3
 8003542:	f002 fd9d 	bl	8006080 <delayMicroseconds>
        GPIO_SetBits(I2C1_SCL_GPIO, I2C1_SCL_PIN);                       // Set bus scl high
 8003546:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800354a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800354e:	f04f 0140 	mov.w	r1, #64	; 0x40
 8003552:	f015 ff4d 	bl	80193f0 <GPIO_SetBits>
        delayMicroseconds(3);                                            // 2.5 would be 400 kHz, 3 is 333.33333 kHz
 8003556:	f04f 0003 	mov.w	r0, #3
 800355a:	f002 fd91 	bl	8006080 <delayMicroseconds>
        GPIO_SetBits(I2C1_SDA_GPIO, I2C1_SDA_PIN);                       // Set bus sda high
 800355e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003562:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003566:	f04f 0180 	mov.w	r1, #128	; 0x80
 800356a:	f015 ff41 	bl	80193f0 <GPIO_SetBits>
        delayMicroseconds(3);                                            // 2.5 would be 400 kHz, 3 is 333.33333 kHz
 800356e:	f04f 0003 	mov.w	r0, #3
 8003572:	f002 fd85 	bl	8006080 <delayMicroseconds>
	}

	///////////////////////////////////

	if (I2Cx == I2C2)
 8003576:	9a01      	ldr	r2, [sp, #4]
 8003578:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 800357c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003580:	429a      	cmp	r2, r3
 8003582:	f040 8096 	bne.w	80036b2 <i2cUnstick+0x28e>
	{
        GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 8003586:	f04f 0301 	mov.w	r3, #1
 800358a:	f88d 3010 	strb.w	r3, [sp, #16]
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800358e:	f04f 0303 	mov.w	r3, #3
 8003592:	f88d 3011 	strb.w	r3, [sp, #17]
        GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8003596:	f04f 0301 	mov.w	r3, #1
 800359a:	f88d 3012 	strb.w	r3, [sp, #18]
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	f88d 3013 	strb.w	r3, [sp, #19]

        GPIO_InitStructure.GPIO_Pin   = I2C2_SCL_PIN;
 80035a6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80035aa:	9303      	str	r3, [sp, #12]
        GPIO_Init(I2C2_SCL_GPIO, &GPIO_InitStructure);
 80035ac:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80035b0:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80035b4:	ab03      	add	r3, sp, #12
 80035b6:	4619      	mov	r1, r3
 80035b8:	f015 fdee 	bl	8019198 <GPIO_Init>

        GPIO_InitStructure.GPIO_Pin   = I2C2_SDA_PIN;
 80035bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035c0:	9303      	str	r3, [sp, #12]
        GPIO_Init(I2C2_SDA_GPIO, &GPIO_InitStructure);
 80035c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035c6:	ab03      	add	r3, sp, #12
 80035c8:	4619      	mov	r1, r3
 80035ca:	f015 fde5 	bl	8019198 <GPIO_Init>

        GPIO_SetBits(I2C2_SCL_GPIO, I2C2_SCL_PIN);
 80035ce:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80035d2:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80035d6:	f04f 0140 	mov.w	r1, #64	; 0x40
 80035da:	f015 ff09 	bl	80193f0 <GPIO_SetBits>
        GPIO_SetBits(I2C2_SDA_GPIO, I2C2_SDA_PIN);
 80035de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035e6:	f015 ff03 	bl	80193f0 <GPIO_SetBits>

        for (i = 0; i < 8; i++)
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	f88d 3017 	strb.w	r3, [sp, #23]
 80035f2:	e02e      	b.n	8003652 <i2cUnstick+0x22e>
        {
            while (!GPIO_ReadInputDataBit(I2C2_SCL_GPIO, I2C2_SCL_PIN))  // Wait for any clock stretching to finish
                delayMicroseconds(3);                                    // 2.5 would be 400 kHz, 3 is 333.33333 kHz
 80035f4:	f04f 0003 	mov.w	r0, #3
 80035f8:	f002 fd42 	bl	8006080 <delayMicroseconds>
 80035fc:	e000      	b.n	8003600 <i2cUnstick+0x1dc>
        GPIO_SetBits(I2C2_SCL_GPIO, I2C2_SCL_PIN);
        GPIO_SetBits(I2C2_SDA_GPIO, I2C2_SDA_PIN);

        for (i = 0; i < 8; i++)
        {
            while (!GPIO_ReadInputDataBit(I2C2_SCL_GPIO, I2C2_SCL_PIN))  // Wait for any clock stretching to finish
 80035fe:	bf00      	nop
 8003600:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003604:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003608:	f04f 0140 	mov.w	r1, #64	; 0x40
 800360c:	f015 fea0 	bl	8019350 <GPIO_ReadInputDataBit>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0ee      	beq.n	80035f4 <i2cUnstick+0x1d0>
                delayMicroseconds(3);                                    // 2.5 would be 400 kHz, 3 is 333.33333 kHz

            // Pull low
            GPIO_ResetBits(I2C2_SCL_GPIO, I2C2_SCL_PIN);                 // Set bus low
 8003616:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800361a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800361e:	f04f 0140 	mov.w	r1, #64	; 0x40
 8003622:	f015 fef1 	bl	8019408 <GPIO_ResetBits>
            delayMicroseconds(3);                                        // 2.5 would be 400 kHz, 3 is 333.33333 kHz
 8003626:	f04f 0003 	mov.w	r0, #3
 800362a:	f002 fd29 	bl	8006080 <delayMicroseconds>
            // Release high again
            GPIO_SetBits(I2C2_SCL_GPIO, I2C2_SCL_PIN);                   // Set bus high
 800362e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003632:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003636:	f04f 0140 	mov.w	r1, #64	; 0x40
 800363a:	f015 fed9 	bl	80193f0 <GPIO_SetBits>
            delayMicroseconds(3);                                        // 2.5 would be 400 kHz, 3 is 333.33333 kHz
 800363e:	f04f 0003 	mov.w	r0, #3
 8003642:	f002 fd1d 	bl	8006080 <delayMicroseconds>
        GPIO_Init(I2C2_SDA_GPIO, &GPIO_InitStructure);

        GPIO_SetBits(I2C2_SCL_GPIO, I2C2_SCL_PIN);
        GPIO_SetBits(I2C2_SDA_GPIO, I2C2_SDA_PIN);

        for (i = 0; i < 8; i++)
 8003646:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800364a:	f103 0301 	add.w	r3, r3, #1
 800364e:	f88d 3017 	strb.w	r3, [sp, #23]
 8003652:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003656:	2b07      	cmp	r3, #7
 8003658:	d9d1      	bls.n	80035fe <i2cUnstick+0x1da>
            delayMicroseconds(3);                                        // 2.5 would be 400 kHz, 3 is 333.33333 kHz
        }

        // Generate a start then stop condition

        GPIO_ResetBits(I2C2_SDA_GPIO, I2C2_SDA_PIN);                     // Set bus data low
 800365a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800365e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003662:	f015 fed1 	bl	8019408 <GPIO_ResetBits>
        delayMicroseconds(3);                                            // 2.5 would be 400 kHz, 3 is 333.33333 kHz
 8003666:	f04f 0003 	mov.w	r0, #3
 800366a:	f002 fd09 	bl	8006080 <delayMicroseconds>
        GPIO_ResetBits(I2C2_SCL_GPIO, I2C2_SCL_PIN);                     // Set bus scl low
 800366e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003672:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003676:	f04f 0140 	mov.w	r1, #64	; 0x40
 800367a:	f015 fec5 	bl	8019408 <GPIO_ResetBits>
        delayMicroseconds(3);                                            // 2.5 would be 400 kHz, 3 is 333.33333 kHz
 800367e:	f04f 0003 	mov.w	r0, #3
 8003682:	f002 fcfd 	bl	8006080 <delayMicroseconds>
        GPIO_SetBits(I2C2_SCL_GPIO, I2C2_SCL_PIN);                       // Set bus scl high
 8003686:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800368a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800368e:	f04f 0140 	mov.w	r1, #64	; 0x40
 8003692:	f015 fead 	bl	80193f0 <GPIO_SetBits>
        delayMicroseconds(3);                                            // 2.5 would be 400 kHz, 3 is 333.33333 kHz
 8003696:	f04f 0003 	mov.w	r0, #3
 800369a:	f002 fcf1 	bl	8006080 <delayMicroseconds>
        GPIO_SetBits(I2C2_SDA_GPIO, I2C2_SDA_PIN);                       // Set bus sda high
 800369e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036a6:	f015 fea3 	bl	80193f0 <GPIO_SetBits>
        delayMicroseconds(3);                                            // 2.5 would be 400 kHz, 3 is 333.33333 kHz
 80036aa:	f04f 0003 	mov.w	r0, #3
 80036ae:	f002 fce7 	bl	8006080 <delayMicroseconds>
    }

    ///////////////////////////////////
}
 80036b2:	b007      	add	sp, #28
 80036b4:	bd00      	pop	{pc}
 80036b6:	bf00      	nop

080036b8 <i2cInit>:
///////////////////////////////////////////////////////////////////////////////
// I2C Initialize
///////////////////////////////////////////////////////////////////////////////

void i2cInit(I2C_TypeDef *I2Cx)
{
 80036b8:	b500      	push	{lr}
 80036ba:	b08d      	sub	sp, #52	; 0x34
 80036bc:	9001      	str	r0, [sp, #4]
    GPIO_InitTypeDef GPIO_InitStructure;
    I2C_InitTypeDef  I2C_InitStructure;

    ///////////////////////////////////

    if (I2Cx == I2C1)
 80036be:	9a01      	ldr	r2, [sp, #4]
 80036c0:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80036c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80036c8:	429a      	cmp	r2, r3
 80036ca:	f040 8086 	bne.w	80037da <i2cInit+0x122>
    {
    	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,  ENABLE);
 80036ce:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80036d2:	f04f 0101 	mov.w	r1, #1
 80036d6:	f017 fa73 	bl	801abc0 <RCC_AHBPeriphClockCmd>
    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 80036da:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80036de:	f04f 0101 	mov.w	r1, #1
 80036e2:	f017 fab9 	bl	801ac58 <RCC_APB1PeriphClockCmd>
    	RCC_AHBPeriphClockCmd(I2C1_SCL_CLK_SOURCE | I2C1_SDA_CLK_SOURCE, ENABLE);
 80036e6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80036ea:	f04f 0101 	mov.w	r1, #1
 80036ee:	f017 fa67 	bl	801abc0 <RCC_AHBPeriphClockCmd>
    	RCC_I2CCLKConfig(RCC_I2C1CLK_SYSCLK);
 80036f2:	f04f 0010 	mov.w	r0, #16
 80036f6:	f017 f94f 	bl	801a998 <RCC_I2CCLKConfig>

    	i2cUnstick(I2Cx);                                         // Clock out stuff to make sure slaves arent stuck
 80036fa:	9801      	ldr	r0, [sp, #4]
 80036fc:	f7ff fe92 	bl	8003424 <i2cUnstick>

    	GPIO_PinAFConfig(I2C1_SCL_GPIO, I2C1_SCL_PIN_SOURCE, GPIO_AF_4);
 8003700:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003704:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003708:	f04f 0106 	mov.w	r1, #6
 800370c:	f04f 0204 	mov.w	r2, #4
 8003710:	f015 feaa 	bl	8019468 <GPIO_PinAFConfig>
    	GPIO_PinAFConfig(I2C1_SDA_GPIO, I2C1_SDA_PIN_SOURCE, GPIO_AF_4);
 8003714:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003718:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800371c:	f04f 0107 	mov.w	r1, #7
 8003720:	f04f 0204 	mov.w	r2, #4
 8003724:	f015 fea0 	bl	8019468 <GPIO_PinAFConfig>

    	GPIO_StructInit(&GPIO_InitStructure);
 8003728:	ab0a      	add	r3, sp, #40	; 0x28
 800372a:	4618      	mov	r0, r3
 800372c:	f015 fdd8 	bl	80192e0 <GPIO_StructInit>
        I2C_StructInit(&I2C_InitStructure);
 8003730:	ab03      	add	r3, sp, #12
 8003732:	4618      	mov	r0, r3
 8003734:	f015 ff7a 	bl	801962c <I2C_StructInit>

        // Init pins

        GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8003738:	f04f 0302 	mov.w	r3, #2
 800373c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003740:	f04f 0303 	mov.w	r3, #3
 8003744:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
        GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8003748:	f04f 0301 	mov.w	r3, #1
 800374c:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

        GPIO_InitStructure.GPIO_Pin   = I2C1_SCL_PIN;
 8003758:	f04f 0340 	mov.w	r3, #64	; 0x40
 800375c:	930a      	str	r3, [sp, #40]	; 0x28
        GPIO_Init(I2C1_SCL_GPIO, &GPIO_InitStructure);
 800375e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003762:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003766:	ab0a      	add	r3, sp, #40	; 0x28
 8003768:	4619      	mov	r1, r3
 800376a:	f015 fd15 	bl	8019198 <GPIO_Init>

        GPIO_InitStructure.GPIO_Pin   = I2C1_SDA_PIN;
 800376e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003772:	930a      	str	r3, [sp, #40]	; 0x28
        GPIO_Init(I2C1_SDA_GPIO, &GPIO_InitStructure);
 8003774:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003778:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800377c:	ab0a      	add	r3, sp, #40	; 0x28
 800377e:	4619      	mov	r1, r3
 8003780:	f015 fd0a 	bl	8019198 <GPIO_Init>

        I2C_StructInit(&I2C_InitStructure);
 8003784:	ab03      	add	r3, sp, #12
 8003786:	4618      	mov	r0, r3
 8003788:	f015 ff50 	bl	801962c <I2C_StructInit>

        I2C_InitStructure.I2C_Mode                = I2C_Mode_I2C;
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	9306      	str	r3, [sp, #24]
        I2C_InitStructure.I2C_AnalogFilter        = I2C_AnalogFilter_Enable;
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	9304      	str	r3, [sp, #16]
        I2C_InitStructure.I2C_DigitalFilter       = 0x00;
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	9305      	str	r3, [sp, #20]
        I2C_InitStructure.I2C_OwnAddress1         = 0x00;
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	9307      	str	r3, [sp, #28]
        I2C_InitStructure.I2C_Ack                 = I2C_Ack_Enable;
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	9308      	str	r3, [sp, #32]
        I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	9309      	str	r3, [sp, #36]	; 0x24
      //I2C_InitStructure.I2C_Timing              = 0x00902025;
        I2C_InitStructure.I2C_Timing              = 0x8000050B;
 80037b0:	f240 530b 	movw	r3, #1291	; 0x50b
 80037b4:	f2c8 0300 	movt	r3, #32768	; 0x8000
 80037b8:	9303      	str	r3, [sp, #12]

        I2C_Init(I2C1, &I2C_InitStructure);
 80037ba:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80037be:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80037c2:	ab03      	add	r3, sp, #12
 80037c4:	4619      	mov	r1, r3
 80037c6:	f015 fecd 	bl	8019564 <I2C_Init>

        I2C_Cmd(I2C1, ENABLE);
 80037ca:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80037ce:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80037d2:	f04f 0101 	mov.w	r1, #1
 80037d6:	f015 ff49 	bl	801966c <I2C_Cmd>
    }

    ///////////////////////////////////

    if (I2Cx == I2C2)
 80037da:	9a01      	ldr	r2, [sp, #4]
 80037dc:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 80037e0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80037e4:	429a      	cmp	r2, r3
 80037e6:	f040 8084 	bne.w	80038f2 <i2cInit+0x23a>
    {
    	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,  ENABLE);
 80037ea:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80037ee:	f04f 0101 	mov.w	r1, #1
 80037f2:	f017 f9e5 	bl	801abc0 <RCC_AHBPeriphClockCmd>
    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 80037f6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80037fa:	f04f 0101 	mov.w	r1, #1
 80037fe:	f017 fa2b 	bl	801ac58 <RCC_APB1PeriphClockCmd>
    	RCC_AHBPeriphClockCmd(I2C2_SCL_CLK_SOURCE |I2C2_SDA_CLK_SOURCE, ENABLE);
 8003802:	f44f 0084 	mov.w	r0, #4325376	; 0x420000
 8003806:	f04f 0101 	mov.w	r1, #1
 800380a:	f017 f9d9 	bl	801abc0 <RCC_AHBPeriphClockCmd>
    	RCC_I2CCLKConfig(RCC_I2C2CLK_SYSCLK);
 800380e:	f04f 0020 	mov.w	r0, #32
 8003812:	f2c1 0000 	movt	r0, #4096	; 0x1000
 8003816:	f017 f8bf 	bl	801a998 <RCC_I2CCLKConfig>

    	i2cUnstick(I2Cx);                                         // Clock out stuff to make sure slaves arent stuck
 800381a:	9801      	ldr	r0, [sp, #4]
 800381c:	f7ff fe02 	bl	8003424 <i2cUnstick>

    	GPIO_PinAFConfig(I2C2_SCL_GPIO, I2C2_SCL_PIN_SOURCE, GPIO_AF_4);
 8003820:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003824:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003828:	f04f 0106 	mov.w	r1, #6
 800382c:	f04f 0204 	mov.w	r2, #4
 8003830:	f015 fe1a 	bl	8019468 <GPIO_PinAFConfig>
    	GPIO_PinAFConfig(I2C2_SDA_GPIO, I2C2_SDA_PIN_SOURCE, GPIO_AF_4);
 8003834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003838:	f04f 010a 	mov.w	r1, #10
 800383c:	f04f 0204 	mov.w	r2, #4
 8003840:	f015 fe12 	bl	8019468 <GPIO_PinAFConfig>

    	GPIO_StructInit(&GPIO_InitStructure);
 8003844:	ab0a      	add	r3, sp, #40	; 0x28
 8003846:	4618      	mov	r0, r3
 8003848:	f015 fd4a 	bl	80192e0 <GPIO_StructInit>
        I2C_StructInit(&I2C_InitStructure);
 800384c:	ab03      	add	r3, sp, #12
 800384e:	4618      	mov	r0, r3
 8003850:	f015 feec 	bl	801962c <I2C_StructInit>

        // Init pins
        GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8003854:	f04f 0302 	mov.w	r3, #2
 8003858:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800385c:	f04f 0303 	mov.w	r3, #3
 8003860:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
        GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8003864:	f04f 0301 	mov.w	r3, #1
 8003868:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

        GPIO_InitStructure.GPIO_Pin   = I2C2_SCL_PIN;
 8003874:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003878:	930a      	str	r3, [sp, #40]	; 0x28
        GPIO_Init(I2C2_SCL_GPIO, &GPIO_InitStructure);
 800387a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800387e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003882:	ab0a      	add	r3, sp, #40	; 0x28
 8003884:	4619      	mov	r1, r3
 8003886:	f015 fc87 	bl	8019198 <GPIO_Init>

        GPIO_InitStructure.GPIO_Pin   = I2C2_SDA_PIN;
 800388a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800388e:	930a      	str	r3, [sp, #40]	; 0x28
        GPIO_Init(I2C2_SDA_GPIO, &GPIO_InitStructure);
 8003890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003894:	ab0a      	add	r3, sp, #40	; 0x28
 8003896:	4619      	mov	r1, r3
 8003898:	f015 fc7e 	bl	8019198 <GPIO_Init>

        I2C_StructInit(&I2C_InitStructure);
 800389c:	ab03      	add	r3, sp, #12
 800389e:	4618      	mov	r0, r3
 80038a0:	f015 fec4 	bl	801962c <I2C_StructInit>

        I2C_InitStructure.I2C_Mode                = I2C_Mode_I2C;
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	9306      	str	r3, [sp, #24]
        I2C_InitStructure.I2C_AnalogFilter        = I2C_AnalogFilter_Enable;
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	9304      	str	r3, [sp, #16]
        I2C_InitStructure.I2C_DigitalFilter       = 0x00;
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	9305      	str	r3, [sp, #20]
        I2C_InitStructure.I2C_OwnAddress1         = 0x00;
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	9307      	str	r3, [sp, #28]
        I2C_InitStructure.I2C_Ack                 = I2C_Ack_Enable;
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	9308      	str	r3, [sp, #32]
        I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	9309      	str	r3, [sp, #36]	; 0x24
      //I2C_InitStructure.I2C_Timing              = 0x00902025;
        I2C_InitStructure.I2C_Timing              = 0x8000050B;
 80038c8:	f240 530b 	movw	r3, #1291	; 0x50b
 80038cc:	f2c8 0300 	movt	r3, #32768	; 0x8000
 80038d0:	9303      	str	r3, [sp, #12]

        I2C_Init(I2C2, &I2C_InitStructure);
 80038d2:	f44f 40b0 	mov.w	r0, #22528	; 0x5800
 80038d6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80038da:	ab03      	add	r3, sp, #12
 80038dc:	4619      	mov	r1, r3
 80038de:	f015 fe41 	bl	8019564 <I2C_Init>

        I2C_Cmd(I2C2, ENABLE);
 80038e2:	f44f 40b0 	mov.w	r0, #22528	; 0x5800
 80038e6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80038ea:	f04f 0101 	mov.w	r1, #1
 80038ee:	f015 febd 	bl	801966c <I2C_Cmd>
    }

    ///////////////////////////////////
}
 80038f2:	b00d      	add	sp, #52	; 0x34
 80038f4:	bd00      	pop	{pc}
 80038f6:	bf00      	nop

080038f8 <i2cGetErrorCounter>:
///////////////////////////////////////////////////////////////////////////////
// Get I2C Error Count
///////////////////////////////////////////////////////////////////////////////

uint16_t i2cGetErrorCounter(I2C_TypeDef *I2Cx)
{
 80038f8:	b082      	sub	sp, #8
 80038fa:	9001      	str	r0, [sp, #4]
    if (I2Cx == I2C1)
 80038fc:	9a01      	ldr	r2, [sp, #4]
 80038fe:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8003902:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003906:	429a      	cmp	r2, r3
 8003908:	d106      	bne.n	8003918 <i2cGetErrorCounter+0x20>
    	return i2c1ErrorCount;
 800390a:	f240 730c 	movw	r3, #1804	; 0x70c
 800390e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	b29b      	uxth	r3, r3
 8003916:	e005      	b.n	8003924 <i2cGetErrorCounter+0x2c>
    else
    	return i2c2ErrorCount;
 8003918:	f240 730e 	movw	r3, #1806	; 0x70e
 800391c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	b29b      	uxth	r3, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	b002      	add	sp, #8
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop

0800392c <ledInit>:
///////////////////////////////////////////////////////////////////////////////
// LED Initialization
///////////////////////////////////////////////////////////////////////////////

void ledInit(void)
{
 800392c:	b500      	push	{lr}
 800392e:	b083      	sub	sp, #12
    GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 8003930:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003934:	f04f 0101 	mov.w	r1, #1
 8003938:	f017 f942 	bl	801abc0 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin   = RED_N_LED_PIN | ORANGE_NE_LED_PIN | GREEN_E_LED_PIN | BLUE_SE_LED_PIN;
 800393c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8003940:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Pin  |= RED_S_LED_PIN | ORANGE_SW_LED_PIN | GREEN_W_LED_PIN | BLUE_NW_LED_PIN;	                          ;
 8003942:	9b00      	ldr	r3, [sp, #0]
 8003944:	f443 4361 	orr.w	r3, r3, #57600	; 0xe100
 8003948:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 800394a:	f04f 0301 	mov.w	r3, #1
 800394e:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003952:	f04f 0303 	mov.w	r3, #3
 8003956:	f88d 3005 	strb.w	r3, [sp, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	f88d 3007 	strb.w	r3, [sp, #7]

	GPIO_Init(GPIOE, &GPIO_InitStructure);
 800396a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800396e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003972:	466b      	mov	r3, sp
 8003974:	4619      	mov	r1, r3
 8003976:	f015 fc0f 	bl	8019198 <GPIO_Init>

	GPIO_ResetBits(RED_N_LED_GPIO,     RED_N_LED_PIN    );
 800397a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800397e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003982:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003986:	f015 fd3f 	bl	8019408 <GPIO_ResetBits>
	GPIO_ResetBits(ORANGE_NE_LED_GPIO, ORANGE_NE_LED_PIN);
 800398a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800398e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003992:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003996:	f015 fd37 	bl	8019408 <GPIO_ResetBits>
	GPIO_ResetBits(GREEN_E_LED_GPIO,   GREEN_E_LED_PIN  );
 800399a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800399e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80039a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80039a6:	f015 fd2f 	bl	8019408 <GPIO_ResetBits>
	GPIO_ResetBits(BLUE_SE_LED_GPIO,   BLUE_SE_LED_PIN  );
 80039aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80039ae:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80039b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039b6:	f015 fd27 	bl	8019408 <GPIO_ResetBits>
	GPIO_ResetBits(RED_S_LED_GPIO,     RED_S_LED_PIN    );
 80039ba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80039be:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80039c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039c6:	f015 fd1f 	bl	8019408 <GPIO_ResetBits>
	GPIO_ResetBits(ORANGE_SW_LED_GPIO, ORANGE_SW_LED_PIN);
 80039ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80039ce:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80039d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039d6:	f015 fd17 	bl	8019408 <GPIO_ResetBits>
	GPIO_ResetBits(GREEN_W_LED_GPIO,   GREEN_W_LED_PIN  );
 80039da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80039de:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80039e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039e6:	f015 fd0f 	bl	8019408 <GPIO_ResetBits>
	GPIO_ResetBits(BLUE_NW_LED_GPIO,   BLUE_NW_LED_PIN  );
 80039ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80039ee:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80039f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039f6:	f015 fd07 	bl	8019408 <GPIO_ResetBits>
}
 80039fa:	b003      	add	sp, #12
 80039fc:	bd00      	pop	{pc}
 80039fe:	bf00      	nop

08003a00 <spiReadMax7456Register>:
////////////////////////////////////////////////////////////////////////////////
// SPI Read MAX7456 Register
///////////////////////////////////////////////////////////////////////////////

uint8_t spiReadMax7456Register(uint8_t r)
{
 8003a00:	b500      	push	{lr}
 8003a02:	b083      	sub	sp, #12
 8003a04:	4603      	mov	r3, r0
 8003a06:	f88d 3007 	strb.w	r3, [sp, #7]
    spiTransfer(MAX7456_SPI, r);
 8003a0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a0e:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003a12:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8003a16:	4619      	mov	r1, r3
 8003a18:	f001 fe1c 	bl	8005654 <spiTransfer>
    return spiTransfer(MAX7456_SPI, 0x00);
 8003a1c:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003a20:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8003a24:	f04f 0100 	mov.w	r1, #0
 8003a28:	f001 fe14 	bl	8005654 <spiTransfer>
 8003a2c:	4603      	mov	r3, r0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	b003      	add	sp, #12
 8003a32:	bd00      	pop	{pc}

08003a34 <spiWriteMax7456Register>:
///////////////////////////////////////////////////////////////////////////////
// SPI Write MAX7456 Register
///////////////////////////////////////////////////////////////////////////////

void spiWriteMax7456Register(uint8_t r, uint8_t d)
{
 8003a34:	b500      	push	{lr}
 8003a36:	b083      	sub	sp, #12
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	f88d 2007 	strb.w	r2, [sp, #7]
 8003a40:	f88d 3006 	strb.w	r3, [sp, #6]
    spiTransfer(MAX7456_SPI, r);
 8003a44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a48:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003a4c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8003a50:	4619      	mov	r1, r3
 8003a52:	f001 fdff 	bl	8005654 <spiTransfer>
    spiTransfer(MAX7456_SPI, d);
 8003a56:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003a5a:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003a5e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8003a62:	4619      	mov	r1, r3
 8003a64:	f001 fdf6 	bl	8005654 <spiTransfer>
}
 8003a68:	b003      	add	sp, #12
 8003a6a:	bd00      	pop	{pc}

08003a6c <hideOSD>:
///////////////////////////////////////////////////////////////////////////////
// Hide OSD Display
///////////////////////////////////////////////////////////////////////////////

void hideOSD()
{
 8003a6c:	b508      	push	{r3, lr}
  if (!osdDisabled)
 8003a6e:	f240 7310 	movw	r3, #1808	; 0x710
 8003a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d11c      	bne.n	8003ab6 <hideOSD+0x4a>
  {
    GPIO_ResetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8003a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a80:	f04f 0108 	mov.w	r1, #8
 8003a84:	f015 fcc0 	bl	8019408 <GPIO_ResetBits>

    spiWriteMax7456Register(VM0_REG, disableDisplay);
 8003a88:	f240 7319 	movw	r3, #1817	; 0x719
 8003a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	f04f 0000 	mov.w	r0, #0
 8003a96:	4619      	mov	r1, r3
 8003a98:	f7ff ffcc 	bl	8003a34 <spiWriteMax7456Register>

    GPIO_SetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8003a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aa0:	f04f 0108 	mov.w	r1, #8
 8003aa4:	f015 fca4 	bl	80193f0 <GPIO_SetBits>

    osdDisabled = true;
 8003aa8:	f240 7310 	movw	r3, #1808	; 0x710
 8003aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ab0:	f04f 0201 	mov.w	r2, #1
 8003ab4:	701a      	strb	r2, [r3, #0]
  }
}
 8003ab6:	bd08      	pop	{r3, pc}

08003ab8 <unhideOSD>:
///////////////////////////////////////////////////////////////////////////////
// Unhide OSD Display
///////////////////////////////////////////////////////////////////////////////

void unhideOSD()
{
 8003ab8:	b508      	push	{r3, lr}
  if (osdDisabled)
 8003aba:	f240 7310 	movw	r3, #1808	; 0x710
 8003abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01c      	beq.n	8003b02 <unhideOSD+0x4a>
  {
    GPIO_ResetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8003ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003acc:	f04f 0108 	mov.w	r1, #8
 8003ad0:	f015 fc9a 	bl	8019408 <GPIO_ResetBits>

    spiWriteMax7456Register(VM0_REG, enableDisplay);
 8003ad4:	f240 7316 	movw	r3, #1814	; 0x716
 8003ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	f04f 0000 	mov.w	r0, #0
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f7ff ffa6 	bl	8003a34 <spiWriteMax7456Register>

    GPIO_SetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8003ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aec:	f04f 0108 	mov.w	r1, #8
 8003af0:	f015 fc7e 	bl	80193f0 <GPIO_SetBits>

    osdDisabled = false;
 8003af4:	f240 7310 	movw	r3, #1808	; 0x710
 8003af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]
  }
}
 8003b02:	bd08      	pop	{r3, pc}

08003b04 <writeMax7456Chars>:
// - will wrap around to next row if 'len' is greater than the remaining cols in row y
// - buf=NULL or len>strlen(buf) can be used to write zeroes (clear)
// - flags: 0x01 blink, 0x02 invert (can be combined)

void writeMax7456Chars( const char* buf, uint8_t len, uint8_t flags, uint8_t y, uint8_t x)
{
 8003b04:	b500      	push	{lr}
 8003b06:	b085      	sub	sp, #20
 8003b08:	9001      	str	r0, [sp, #4]
 8003b0a:	f88d 1003 	strb.w	r1, [sp, #3]
 8003b0e:	f88d 2002 	strb.w	r2, [sp, #2]
 8003b12:	f88d 3001 	strb.w	r3, [sp, #1]
    uint8_t  i;
    uint16_t offset = y * 30 + x;
 8003b16:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	18d3      	adds	r3, r2, r3
 8003b32:	f8ad 300c 	strh.w	r3, [sp, #12]

    if (flags)
 8003b36:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <writeMax7456Chars+0x3e>
        unhideOSD(); // make sure OSD is visible in case of alarms etc.
 8003b3e:	f7ff ffbb 	bl	8003ab8 <unhideOSD>

    GPIO_ResetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8003b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b46:	f04f 0108 	mov.w	r1, #8
 8003b4a:	f015 fc5d 	bl	8019408 <GPIO_ResetBits>

    // 16bit transfer, transparent BG, autoincrement mode (if len!=1)
    spiWriteMax7456Register(DMM_REG, ((flags & 1) ? 0x10 : 0x00) | ((flags & 2) ? 0x08 : 0x00) | ((len != 1) ? 0x01 : 0x00));
 8003b4e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <writeMax7456Chars+0x5e>
 8003b5c:	f04f 0210 	mov.w	r2, #16
 8003b60:	e001      	b.n	8003b66 <writeMax7456Chars+0x62>
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <writeMax7456Chars+0x74>
 8003b72:	f04f 0308 	mov.w	r3, #8
 8003b76:	e001      	b.n	8003b7c <writeMax7456Chars+0x78>
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	bf0c      	ite	eq
 8003b88:	2300      	moveq	r3, #0
 8003b8a:	2301      	movne	r3, #1
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f04f 0004 	mov.w	r0, #4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f7ff ff4b 	bl	8003a34 <spiWriteMax7456Register>

    // send starting display memory address (position of text)
    spiWriteMax7456Register(DMAH_REG, offset >> 8 );
 8003b9e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8003ba2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f04f 0005 	mov.w	r0, #5
 8003bae:	4619      	mov	r1, r3
 8003bb0:	f7ff ff40 	bl	8003a34 <spiWriteMax7456Register>
    spiWriteMax7456Register(DMAL_REG, offset & 0xFF );
 8003bb4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f04f 0006 	mov.w	r0, #6
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	f7ff ff38 	bl	8003a34 <spiWriteMax7456Register>

    // write out data
    for (i = 0; i < len; i++)
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	f88d 300f 	strb.w	r3, [sp, #15]
 8003bcc:	e01e      	b.n	8003c0c <writeMax7456Chars+0x108>
        spiWriteMax7456Register(DMDI_REG, (!buf || strlen(buf) < i) ? 0 : buf[i]);
 8003bce:	9b01      	ldr	r3, [sp, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00e      	beq.n	8003bf2 <writeMax7456Chars+0xee>
 8003bd4:	9801      	ldr	r0, [sp, #4]
 8003bd6:	f01d fde7 	bl	80217a8 <strlen>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d305      	bcc.n	8003bf2 <writeMax7456Chars+0xee>
 8003be6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003bea:	9a01      	ldr	r2, [sp, #4]
 8003bec:	18d3      	adds	r3, r2, r3
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	e001      	b.n	8003bf6 <writeMax7456Chars+0xf2>
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	f04f 0007 	mov.w	r0, #7
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	f7ff ff1a 	bl	8003a34 <spiWriteMax7456Register>
    // send starting display memory address (position of text)
    spiWriteMax7456Register(DMAH_REG, offset >> 8 );
    spiWriteMax7456Register(DMAL_REG, offset & 0xFF );

    // write out data
    for (i = 0; i < len; i++)
 8003c00:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003c04:	f103 0301 	add.w	r3, r3, #1
 8003c08:	f88d 300f 	strb.w	r3, [sp, #15]
 8003c0c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003c10:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d3da      	bcc.n	8003bce <writeMax7456Chars+0xca>
        spiWriteMax7456Register(DMDI_REG, (!buf || strlen(buf) < i) ? 0 : buf[i]);


    // Send escape 11111111 to exit autoincrement mode
    if (len != 1)
 8003c18:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d005      	beq.n	8003c2c <writeMax7456Chars+0x128>
        spiWriteMax7456Register(DMDI_REG, END_STRING);
 8003c20:	f04f 0007 	mov.w	r0, #7
 8003c24:	f04f 01ff 	mov.w	r1, #255	; 0xff
 8003c28:	f7ff ff04 	bl	8003a34 <spiWriteMax7456Register>

    // finished writing

    GPIO_SetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8003c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c30:	f04f 0108 	mov.w	r1, #8
 8003c34:	f015 fbdc 	bl	80193f0 <GPIO_SetBits>
}
 8003c38:	b005      	add	sp, #20
 8003c3a:	bd00      	pop	{pc}

08003c3c <detectVideoStandard>:
///////////////////////////////////////////////////////////////////////////////
// Detect Video Standard
///////////////////////////////////////////////////////////////////////////////

void detectVideoStandard()
{
 8003c3c:	b500      	push	{lr}
 8003c3e:	b083      	sub	sp, #12
    // First set the default
    uint8_t pal = false;
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t stat;

    pal = eepromConfig.defaultVideoStandard;
 8003c48:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8003c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c50:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 8003c54:	f88d 3007 	strb.w	r3, [sp, #7]

    // if autodetect enabled modify the default if signal is present on either standard
    // otherwise default is preserved

    GPIO_ResetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8003c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c5c:	f04f 0108 	mov.w	r1, #8
 8003c60:	f015 fbd2 	bl	8019408 <GPIO_ResetBits>

    stat = spiReadMax7456Register(STAT_REG);
 8003c64:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 8003c68:	f7ff feca 	bl	8003a00 <spiReadMax7456Register>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f88d 3006 	strb.w	r3, [sp, #6]

    GPIO_SetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8003c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c76:	f04f 0108 	mov.w	r1, #8
 8003c7a:	f015 fbb9 	bl	80193f0 <GPIO_SetBits>

    if (stat & 0x01)
 8003c7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <detectVideoStandard+0x58>
        pal = PAL;
 8003c8c:	f04f 0301 	mov.w	r3, #1
 8003c90:	f88d 3007 	strb.w	r3, [sp, #7]

    if (stat & 0x02)
 8003c94:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <detectVideoStandard+0x6c>
        pal = NTSC;
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	f88d 3007 	strb.w	r3, [sp, #7]

    if (pal)
 8003ca8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d02a      	beq.n	8003d06 <detectVideoStandard+0xca>
    {
        maxScreenSize     = 480;
 8003cb0:	f240 7312 	movw	r3, #1810	; 0x712
 8003cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003cb8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003cbc:	801a      	strh	r2, [r3, #0]
        maxScreenRows     = 16;
 8003cbe:	f240 7314 	movw	r3, #1812	; 0x714
 8003cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003cc6:	f04f 0210 	mov.w	r2, #16
 8003cca:	801a      	strh	r2, [r3, #0]
        enableDisplay     = 0x48;
 8003ccc:	f240 7316 	movw	r3, #1814	; 0x716
 8003cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003cd4:	f04f 0248 	mov.w	r2, #72	; 0x48
 8003cd8:	701a      	strb	r2, [r3, #0]
        enableDisplayVert = 0x4C;
 8003cda:	f240 7317 	movw	r3, #1815	; 0x717
 8003cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ce2:	f04f 024c 	mov.w	r2, #76	; 0x4c
 8003ce6:	701a      	strb	r2, [r3, #0]
        max7456Reset      = 0x42;
 8003ce8:	f240 7318 	movw	r3, #1816	; 0x718
 8003cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003cf0:	f04f 0242 	mov.w	r2, #66	; 0x42
 8003cf4:	701a      	strb	r2, [r3, #0]
        disableDisplay    = 0x40;
 8003cf6:	f240 7319 	movw	r3, #1817	; 0x719
 8003cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003cfe:	f04f 0240 	mov.w	r2, #64	; 0x40
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	e029      	b.n	8003d5a <detectVideoStandard+0x11e>
    }
    else
    {
        maxScreenSize     = 390;
 8003d06:	f240 7312 	movw	r3, #1810	; 0x712
 8003d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d0e:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8003d12:	801a      	strh	r2, [r3, #0]
        maxScreenRows     = 13;
 8003d14:	f240 7314 	movw	r3, #1812	; 0x714
 8003d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d1c:	f04f 020d 	mov.w	r2, #13
 8003d20:	801a      	strh	r2, [r3, #0]
        enableDisplay     = 0x08;
 8003d22:	f240 7316 	movw	r3, #1814	; 0x716
 8003d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d2a:	f04f 0208 	mov.w	r2, #8
 8003d2e:	701a      	strb	r2, [r3, #0]
        enableDisplayVert = 0x0C;
 8003d30:	f240 7317 	movw	r3, #1815	; 0x717
 8003d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d38:	f04f 020c 	mov.w	r2, #12
 8003d3c:	701a      	strb	r2, [r3, #0]
        max7456Reset      = 0x02;
 8003d3e:	f240 7318 	movw	r3, #1816	; 0x718
 8003d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d46:	f04f 0202 	mov.w	r2, #2
 8003d4a:	701a      	strb	r2, [r3, #0]
        disableDisplay    = 0x00;
 8003d4c:	f240 7319 	movw	r3, #1817	; 0x719
 8003d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	701a      	strb	r2, [r3, #0]
    }

    // Artificial Horizon Display Parameters

    reticleRow    =  maxScreenRows / 2;
 8003d5a:	f240 7314 	movw	r3, #1812	; 0x714
 8003d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	f640 03ae 	movw	r3, #2222	; 0x8ae
 8003d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d74:	701a      	strb	r2, [r3, #0]
    ahTopPixel    = (reticleRow - AH_DISPLAY_RECT_HEIGHT / 2) * 18;
 8003d76:	f640 03ae 	movw	r3, #2222	; 0x8ae
 8003d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003d86:	18d3      	adds	r3, r2, r3
 8003d88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f1a3 0348 	sub.w	r3, r3, #72	; 0x48
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	f640 03a9 	movw	r3, #2217	; 0x8a9
 8003d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d9c:	701a      	strb	r2, [r3, #0]
    ahBottomPixel = (reticleRow + AH_DISPLAY_RECT_HEIGHT / 2) * 18;
 8003d9e:	f640 03ae 	movw	r3, #2222	; 0x8ae
 8003da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003dae:	18d3      	adds	r3, r2, r3
 8003db0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	f640 03ab 	movw	r3, #2219	; 0x8ab
 8003dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003dc4:	701a      	strb	r2, [r3, #0]
    ahCenter      =  reticleRow * 18 + 10;
 8003dc6:	f640 03ae 	movw	r3, #2222	; 0x8ae
 8003dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003dd6:	18d3      	adds	r3, r2, r3
 8003dd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f103 030a 	add.w	r3, r3, #10
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8003de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003dec:	701a      	strb	r2, [r3, #0]

    // Attitude Display Parameters

    aiTopPixel    = (reticleRow - AI_DISPLAY_RECT_HEIGHT / 2) * 18;
 8003dee:	f640 03ae 	movw	r3, #2222	; 0x8ae
 8003df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003dfe:	18d3      	adds	r3, r2, r3
 8003e00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f1a3 0348 	sub.w	r3, r3, #72	; 0x48
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	f640 03ac 	movw	r3, #2220	; 0x8ac
 8003e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e14:	701a      	strb	r2, [r3, #0]
    aiBottomPixel = (reticleRow + AI_DISPLAY_RECT_HEIGHT / 2) * 18;
 8003e16:	f640 03ae 	movw	r3, #2222	; 0x8ae
 8003e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003e26:	18d3      	adds	r3, r2, r3
 8003e28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	f640 03ad 	movw	r3, #2221	; 0x8ad
 8003e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e3c:	701a      	strb	r2, [r3, #0]
    aiCenter      =  reticleRow * 18 + 10;
 8003e3e:	f640 03ae 	movw	r3, #2222	; 0x8ae
 8003e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003e4e:	18d3      	adds	r3, r2, r3
 8003e50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f103 030a 	add.w	r3, r3, #10
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	f640 03aa 	movw	r3, #2218	; 0x8aa
 8003e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e64:	701a      	strb	r2, [r3, #0]
}
 8003e66:	b003      	add	sp, #12
 8003e68:	bd00      	pop	{pc}
 8003e6a:	bf00      	nop

08003e6c <initMax7456>:
///////////////////////////////////////////////////////////////////////////////
// Initialize MAX7456
///////////////////////////////////////////////////////////////////////////////

void initMax7456()
{
 8003e6c:	b500      	push	{lr}
 8003e6e:	b083      	sub	sp, #12
    uint8_t i;

    if (eepromConfig.osdEnabled == false) return;
 8003e70:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8003e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e78:	f893 3344 	ldrb.w	r3, [r3, #836]	; 0x344
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d055      	beq.n	8003f2c <initMax7456+0xc0>

    detectVideoStandard();
 8003e80:	f7ff fedc 	bl	8003c3c <detectVideoStandard>

    //Soft reset the MAX7456 - clear display memory
    GPIO_ResetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8003e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e88:	f04f 0108 	mov.w	r1, #8
 8003e8c:	f015 fabc 	bl	8019408 <GPIO_ResetBits>

    spiWriteMax7456Register(VM0_REG, max7456Reset);
 8003e90:	f240 7318 	movw	r3, #1816	; 0x718
 8003e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	f04f 0000 	mov.w	r0, #0
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	f7ff fdc8 	bl	8003a34 <spiWriteMax7456Register>

    GPIO_SetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8003ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ea8:	f04f 0108 	mov.w	r1, #8
 8003eac:	f015 faa0 	bl	80193f0 <GPIO_SetBits>

    delay(500);
 8003eb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003eb4:	f002 f91e 	bl	80060f4 <delay>

    //Set white level to 90% for all rows
    GPIO_ResetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8003eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ebc:	f04f 0108 	mov.w	r1, #8
 8003ec0:	f015 faa2 	bl	8019408 <GPIO_ResetBits>

    for(i = 0; i < maxScreenRows; i++ )
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	f88d 3007 	strb.w	r3, [sp, #7]
 8003ecc:	e00f      	b.n	8003eee <initMax7456+0x82>
        spiWriteMax7456Register(RB0_REG + i, WHITE_LEVEL_90 );
 8003ece:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ed2:	f103 0310 	add.w	r3, r3, #16
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f04f 0102 	mov.w	r1, #2
 8003ede:	f7ff fda9 	bl	8003a34 <spiWriteMax7456Register>
    delay(500);

    //Set white level to 90% for all rows
    GPIO_ResetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);

    for(i = 0; i < maxScreenRows; i++ )
 8003ee2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ee6:	f103 0301 	add.w	r3, r3, #1
 8003eea:	f88d 3007 	strb.w	r3, [sp, #7]
 8003eee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	f240 7314 	movw	r3, #1812	; 0x714
 8003ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d3e5      	bcc.n	8003ece <initMax7456+0x62>
        spiWriteMax7456Register(RB0_REG + i, WHITE_LEVEL_90 );

    //ensure device is enabled
    spiWriteMax7456Register(VM0_REG, enableDisplay);
 8003f02:	f240 7316 	movw	r3, #1814	; 0x716
 8003f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	f04f 0000 	mov.w	r0, #0
 8003f10:	4619      	mov	r1, r3
 8003f12:	f7ff fd8f 	bl	8003a34 <spiWriteMax7456Register>

    delay(100);
 8003f16:	f04f 0064 	mov.w	r0, #100	; 0x64
 8003f1a:	f002 f8eb 	bl	80060f4 <delay>

    //finished writing
    GPIO_SetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8003f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f22:	f04f 0108 	mov.w	r1, #8
 8003f26:	f015 fa63 	bl	80193f0 <GPIO_SetBits>
 8003f2a:	e000      	b.n	8003f2e <initMax7456+0xc2>

void initMax7456()
{
    uint8_t i;

    if (eepromConfig.osdEnabled == false) return;
 8003f2c:	bf00      	nop

    delay(100);

    //finished writing
    GPIO_SetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
}
 8003f2e:	b003      	add	sp, #12
 8003f30:	bd00      	pop	{pc}
 8003f32:	bf00      	nop

08003f34 <resetMax7456>:
//////////////////////////////////////////////////////////////////////////////
// Reset MAX7456
///////////////////////////////////////////////////////////////////////////////

void resetMax7456()
{
 8003f34:	b500      	push	{lr}
 8003f36:	b083      	sub	sp, #12
    uint8_t x;

    // force soft reset on Max7456
    GPIO_ResetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8003f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f3c:	f04f 0108 	mov.w	r1, #8
 8003f40:	f015 fa62 	bl	8019408 <GPIO_ResetBits>

    spiWriteMax7456Register(VM0_REG, max7456Reset);
 8003f44:	f240 7318 	movw	r3, #1816	; 0x718
 8003f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	f04f 0000 	mov.w	r0, #0
 8003f52:	4619      	mov	r1, r3
 8003f54:	f7ff fd6e 	bl	8003a34 <spiWriteMax7456Register>

    GPIO_SetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8003f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f5c:	f04f 0108 	mov.w	r1, #8
 8003f60:	f015 fa46 	bl	80193f0 <GPIO_SetBits>

    delay(500);
 8003f64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f68:	f002 f8c4 	bl	80060f4 <delay>

    // set all rows to same character white level, 90%
    GPIO_ResetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8003f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f70:	f04f 0108 	mov.w	r1, #8
 8003f74:	f015 fa48 	bl	8019408 <GPIO_ResetBits>

    for (x = 0; x < maxScreenRows; x++)
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	f88d 3007 	strb.w	r3, [sp, #7]
 8003f80:	e00f      	b.n	8003fa2 <resetMax7456+0x6e>
        spiWriteMax7456Register(RB0_REG + x, WHITE_LEVEL_90);
 8003f82:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f86:	f103 0310 	add.w	r3, r3, #16
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f04f 0102 	mov.w	r1, #2
 8003f92:	f7ff fd4f 	bl	8003a34 <spiWriteMax7456Register>
    delay(500);

    // set all rows to same character white level, 90%
    GPIO_ResetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);

    for (x = 0; x < maxScreenRows; x++)
 8003f96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f9a:	f103 0301 	add.w	r3, r3, #1
 8003f9e:	f88d 3007 	strb.w	r3, [sp, #7]
 8003fa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	f240 7314 	movw	r3, #1812	; 0x714
 8003fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d3e5      	bcc.n	8003f82 <resetMax7456+0x4e>
        spiWriteMax7456Register(RB0_REG + x, WHITE_LEVEL_90);

    // make sure the Max7456 is enabled
    spiWriteMax7456Register(VM0_REG, enableDisplay);
 8003fb6:	f240 7316 	movw	r3, #1814	; 0x716
 8003fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	f04f 0000 	mov.w	r0, #0
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	f7ff fd35 	bl	8003a34 <spiWriteMax7456Register>

    GPIO_SetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8003fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fce:	f04f 0108 	mov.w	r1, #8
 8003fd2:	f015 fa0d 	bl	80193f0 <GPIO_SetBits>
}
 8003fd6:	b003      	add	sp, #12
 8003fd8:	bd00      	pop	{pc}
 8003fda:	bf00      	nop

08003fdc <showMax7456Font>:
///////////////////////////////////////////////////////////////////////////////
// Show MAX7456 Font
///////////////////////////////////////////////////////////////////////////////

void showMax7456Font(void) //show all chars on 24 wide grid
{
 8003fdc:	b500      	push	{lr}
 8003fde:	b083      	sub	sp, #12
    uint8_t i, x;

    // clear the screen
    GPIO_ResetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8003fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fe4:	f04f 0108 	mov.w	r1, #8
 8003fe8:	f015 fa0e 	bl	8019408 <GPIO_ResetBits>

    spiWriteMax7456Register(DMM_REG, CLEAR_DISPLAY);
 8003fec:	f04f 0004 	mov.w	r0, #4
 8003ff0:	f04f 0104 	mov.w	r1, #4
 8003ff4:	f7ff fd1e 	bl	8003a34 <spiWriteMax7456Register>

    GPIO_SetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8003ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ffc:	f04f 0108 	mov.w	r1, #8
 8004000:	f015 f9f6 	bl	80193f0 <GPIO_SetBits>

    delay(1); // clearing display takes 20uS so wait some...
 8004004:	f04f 0001 	mov.w	r0, #1
 8004008:	f002 f874 	bl	80060f4 <delay>

    GPIO_ResetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 800400c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004010:	f04f 0108 	mov.w	r1, #8
 8004014:	f015 f9f8 	bl	8019408 <GPIO_ResetBits>

    // disable display
    //spiWriteRegister(VM0_REG, DISABLE_DISPLAY);

    spiWriteMax7456Register(DMM_REG,  0x01);  // 16 bit trans w/o background, autoincrement
 8004018:	f04f 0004 	mov.w	r0, #4
 800401c:	f04f 0101 	mov.w	r1, #1
 8004020:	f7ff fd08 	bl	8003a34 <spiWriteMax7456Register>
    spiWriteMax7456Register(DMAH_REG,    0);  // set start address high
 8004024:	f04f 0005 	mov.w	r0, #5
 8004028:	f04f 0100 	mov.w	r1, #0
 800402c:	f7ff fd02 	bl	8003a34 <spiWriteMax7456Register>
    spiWriteMax7456Register(DMAL_REG,   33);  // set start address low (line 1 col 3 (0 based)
 8004030:	f04f 0006 	mov.w	r0, #6
 8004034:	f04f 0121 	mov.w	r1, #33	; 0x21
 8004038:	f7ff fcfc 	bl	8003a34 <spiWriteMax7456Register>

    // show all characters on screen (actually 0-254)
    for (x = 0; x < 255; x++)
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	f88d 3006 	strb.w	r3, [sp, #6]
 8004044:	e035      	b.n	80040b2 <showMax7456Font+0xd6>
    {
        spiWriteMax7456Register(DMDI_REG, x);
 8004046:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800404a:	f04f 0007 	mov.w	r0, #7
 800404e:	4619      	mov	r1, r3
 8004050:	f7ff fcf0 	bl	8003a34 <spiWriteMax7456Register>

        if ((x%24)==23)
 8004054:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8004058:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 800405c:	f6ca 23aa 	movt	r3, #43690	; 0xaaaa
 8004060:	fba3 1302 	umull	r1, r3, r3, r2
 8004064:	ea4f 1113 	mov.w	r1, r3, lsr #4
 8004068:	460b      	mov	r3, r1
 800406a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800406e:	185b      	adds	r3, r3, r1
 8004070:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b17      	cmp	r3, #23
 800407a:	d114      	bne.n	80040a6 <showMax7456Font+0xca>
        {
            for (i = 0; i < 6; i++)
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	f88d 3007 	strb.w	r3, [sp, #7]
 8004084:	e00b      	b.n	800409e <showMax7456Font+0xc2>
                spiWriteMax7456Register(DMDI_REG, 0);
 8004086:	f04f 0007 	mov.w	r0, #7
 800408a:	f04f 0100 	mov.w	r1, #0
 800408e:	f7ff fcd1 	bl	8003a34 <spiWriteMax7456Register>
    {
        spiWriteMax7456Register(DMDI_REG, x);

        if ((x%24)==23)
        {
            for (i = 0; i < 6; i++)
 8004092:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004096:	f103 0301 	add.w	r3, r3, #1
 800409a:	f88d 3007 	strb.w	r3, [sp, #7]
 800409e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80040a2:	2b05      	cmp	r3, #5
 80040a4:	d9ef      	bls.n	8004086 <showMax7456Font+0xaa>
    spiWriteMax7456Register(DMM_REG,  0x01);  // 16 bit trans w/o background, autoincrement
    spiWriteMax7456Register(DMAH_REG,    0);  // set start address high
    spiWriteMax7456Register(DMAL_REG,   33);  // set start address low (line 1 col 3 (0 based)

    // show all characters on screen (actually 0-254)
    for (x = 0; x < 255; x++)
 80040a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80040aa:	f103 0301 	add.w	r3, r3, #1
 80040ae:	f88d 3006 	strb.w	r3, [sp, #6]
 80040b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80040b6:	2bff      	cmp	r3, #255	; 0xff
 80040b8:	d1c5      	bne.n	8004046 <showMax7456Font+0x6a>
            for (i = 0; i < 6; i++)
                spiWriteMax7456Register(DMDI_REG, 0);
		}
    }

    spiWriteMax7456Register(DMDI_REG, END_STRING);
 80040ba:	f04f 0007 	mov.w	r0, #7
 80040be:	f04f 01ff 	mov.w	r1, #255	; 0xff
 80040c2:	f7ff fcb7 	bl	8003a34 <spiWriteMax7456Register>

    //spiWriteMax7456Register(VM0_REG, ENABLE_DISPLAY_VERT);

    GPIO_SetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 80040c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040ca:	f04f 0108 	mov.w	r1, #8
 80040ce:	f015 f98f 	bl	80193f0 <GPIO_SetBits>
}
 80040d2:	b003      	add	sp, #12
 80040d4:	bd00      	pop	{pc}
 80040d6:	bf00      	nop

080040d8 <waitNVM>:
///////////////////////////////////////////////////////////////////////////////
// Wait for NVM
///////////////////////////////////////////////////////////////////////////////

void waitNVM()
{
 80040d8:	b508      	push	{r3, lr}
    while (spiReadMax7456Register(STAT_REG) & STATUS_REG_NVR_BUSY) ;
 80040da:	bf00      	nop
 80040dc:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 80040e0:	f7ff fc8e 	bl	8003a00 <spiReadMax7456Register>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f6      	bne.n	80040dc <waitNVM+0x4>
}
 80040ee:	bd08      	pop	{r3, pc}

080040f0 <writeNVMcharacter>:
///////////////////////////////////////////////////////////////////////////////
// Write NVM Character
///////////////////////////////////////////////////////////////////////////////

void writeNVMcharacter(uint8_t ch, const uint16_t index)
{
 80040f0:	b500      	push	{lr}
 80040f2:	b085      	sub	sp, #20
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	f88d 2007 	strb.w	r2, [sp, #7]
 80040fc:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint8_t x;

    // disable display
    GPIO_ResetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 8004100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004104:	f04f 0108 	mov.w	r1, #8
 8004108:	f015 f97e 	bl	8019408 <GPIO_ResetBits>

    spiWriteMax7456Register(VM0_REG, disableDisplay);
 800410c:	f240 7319 	movw	r3, #1817	; 0x719
 8004110:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	f04f 0000 	mov.w	r0, #0
 800411a:	4619      	mov	r1, r3
 800411c:	f7ff fc8a 	bl	8003a34 <spiWriteMax7456Register>

    spiWriteMax7456Register(CMAH_REG, ch);  // set start address high
 8004120:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004124:	f04f 0009 	mov.w	r0, #9
 8004128:	4619      	mov	r1, r3
 800412a:	f7ff fc83 	bl	8003a34 <spiWriteMax7456Register>

    for(x = 0; x < NVM_RAM_SIZE; x++) // write out 54 (out of 64) bytes of character to shadow ram
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	f88d 300f 	strb.w	r3, [sp, #15]
 8004136:	e01b      	b.n	8004170 <writeNVMcharacter+0x80>
    {
        spiWriteMax7456Register(CMAL_REG, x); // set start address low
 8004138:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800413c:	f04f 000a 	mov.w	r0, #10
 8004140:	4619      	mov	r1, r3
 8004142:	f7ff fc77 	bl	8003a34 <spiWriteMax7456Register>

        spiWriteMax7456Register(CMDI_REG, fontdata[index+x]);
 8004146:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800414a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800414e:	18d2      	adds	r2, r2, r3
 8004150:	f646 732c 	movw	r3, #28460	; 0x6f2c
 8004154:	f6c0 0302 	movt	r3, #2050	; 0x802
 8004158:	5c9b      	ldrb	r3, [r3, r2]
 800415a:	f04f 000b 	mov.w	r0, #11
 800415e:	4619      	mov	r1, r3
 8004160:	f7ff fc68 	bl	8003a34 <spiWriteMax7456Register>

    spiWriteMax7456Register(VM0_REG, disableDisplay);

    spiWriteMax7456Register(CMAH_REG, ch);  // set start address high

    for(x = 0; x < NVM_RAM_SIZE; x++) // write out 54 (out of 64) bytes of character to shadow ram
 8004164:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004168:	f103 0301 	add.w	r3, r3, #1
 800416c:	f88d 300f 	strb.w	r3, [sp, #15]
 8004170:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004174:	2b35      	cmp	r3, #53	; 0x35
 8004176:	d9df      	bls.n	8004138 <writeNVMcharacter+0x48>

        spiWriteMax7456Register(CMDI_REG, fontdata[index+x]);
    }

    // transfer a 54 bytes from shadow ram to NVM
    spiWriteMax7456Register(CMM_REG, WRITE_NVR);
 8004178:	f04f 0008 	mov.w	r0, #8
 800417c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 8004180:	f7ff fc58 	bl	8003a34 <spiWriteMax7456Register>

    waitNVM(); // NVM should be busy around 12ms
 8004184:	f7ff ffa8 	bl	80040d8 <waitNVM>

    spiWriteMax7456Register(VM0_REG, enableDisplayVert);
 8004188:	f240 7317 	movw	r3, #1815	; 0x717
 800418c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	4619      	mov	r1, r3
 8004198:	f7ff fc4c 	bl	8003a34 <spiWriteMax7456Register>

    GPIO_SetBits(MAX7456_CS_GPIO, MAX7456_CS_PIN);
 800419c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041a0:	f04f 0108 	mov.w	r1, #8
 80041a4:	f015 f924 	bl	80193f0 <GPIO_SetBits>
}
 80041a8:	b005      	add	sp, #20
 80041aa:	bd00      	pop	{pc}

080041ac <downloadMax7456Font>:
///////////////////////////////////////////////////////////////////////////////
// Download MAX7456 Font Data
///////////////////////////////////////////////////////////////////////////////

void downloadMax7456Font(void)
{
 80041ac:	b500      	push	{lr}
 80041ae:	b083      	sub	sp, #12
    {
        uart1Print("\nERROR: fontdata with invalid size, aborting!!!\n\n");
        return;
    }

    uart1Print("\nDownloading font to MAX7456 NVM, this may take a while...\n\n");
 80041b0:	f64a 702c 	movw	r0, #44844	; 0xaf2c
 80041b4:	f6c0 0002 	movt	r0, #2050	; 0x802
 80041b8:	f002 fc32 	bl	8006a20 <uart1Print>

    for (ch = 0; ch < 256; ch++)
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80041c4:	e02c      	b.n	8004220 <downloadMax7456Font+0x74>
    {
        itoa(ch, numberString, 10);
 80041c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f643 3178 	movw	r1, #15224	; 0x3b78
 80041d0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80041d4:	f04f 020a 	mov.w	r2, #10
 80041d8:	f012 fcfc 	bl	8016bd4 <itoa>
        uart1Print(numberString);
 80041dc:	f643 3078 	movw	r0, #15224	; 0x3b78
 80041e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80041e4:	f002 fc1c 	bl	8006a20 <uart1Print>
        writeNVMcharacter(ch, 64*ch);
 80041e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80041f2:	ea4f 1383 	mov.w	r3, r3, lsl #6
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	4610      	mov	r0, r2
 80041fa:	4619      	mov	r1, r3
 80041fc:	f7ff ff78 	bl	80040f0 <writeNVMcharacter>
        delay(30);
 8004200:	f04f 001e 	mov.w	r0, #30
 8004204:	f001 ff76 	bl	80060f4 <delay>
        uart1Print(" Done\n");
 8004208:	f64a 706c 	movw	r0, #44908	; 0xaf6c
 800420c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8004210:	f002 fc06 	bl	8006a20 <uart1Print>
        return;
    }

    uart1Print("\nDownloading font to MAX7456 NVM, this may take a while...\n\n");

    for (ch = 0; ch < 256; ch++)
 8004214:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004218:	f103 0301 	add.w	r3, r3, #1
 800421c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8004220:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004224:	2bff      	cmp	r3, #255	; 0xff
 8004226:	d9ce      	bls.n	80041c6 <downloadMax7456Font+0x1a>
        delay(30);
        uart1Print(" Done\n");
    }

    // force soft reset on Max7456
    resetMax7456();
 8004228:	f7ff fe84 	bl	8003f34 <resetMax7456>

    showMax7456Font();
 800422c:	f7ff fed6 	bl	8003fdc <showMax7456Font>

    uart1Print("\nDone with MAX7456 font download\n\n");
 8004230:	f64a 7074 	movw	r0, #44916	; 0xaf74
 8004234:	f6c0 0002 	movt	r0, #2050	; 0x802
 8004238:	f002 fbf2 	bl	8006a20 <uart1Print>
}
 800423c:	b003      	add	sp, #12
 800423e:	bd00      	pop	{pc}

08004240 <pwmEscInit>:
///////////////////////////////////////////////////////////////////////////////
// PWM ESC Initialization
///////////////////////////////////////////////////////////////////////////////

void pwmEscInit(uint16_t escPwmRate)
{
 8004240:	b500      	push	{lr}
 8004242:	b08d      	sub	sp, #52	; 0x34
 8004244:	4603      	mov	r3, r0
 8004246:	f8ad 3006 	strh.w	r3, [sp, #6]
    GPIO_InitTypeDef         GPIO_InitStructure;
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    TIM_OCInitTypeDef        TIM_OCInitStructure;

    GPIO_StructInit(&GPIO_InitStructure);
 800424a:	ab0a      	add	r3, sp, #40	; 0x28
 800424c:	4618      	mov	r0, r3
 800424e:	f015 f847 	bl	80192e0 <GPIO_StructInit>
    TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 8004252:	ab07      	add	r3, sp, #28
 8004254:	4618      	mov	r0, r3
 8004256:	f017 fca9 	bl	801bbac <TIM_TimeBaseStructInit>
    TIM_OCStructInit(&TIM_OCInitStructure);
 800425a:	ab02      	add	r3, sp, #8
 800425c:	4618      	mov	r0, r3
 800425e:	f018 f8c9 	bl	801c3f4 <TIM_OCStructInit>
    // ESC PWM5 TIM4_CH4  PD15
    // ESC PWM6 TIM8_CH1  PA15
    // ESC PWM7 TIM8_CH2  PC7
    // ESC PWM8 TIM8_CH3  PC8

    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8004262:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004266:	f04f 0101 	mov.w	r1, #1
 800426a:	f016 fca9 	bl	801abc0 <RCC_AHBPeriphClockCmd>
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 800426e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004272:	f04f 0101 	mov.w	r1, #1
 8004276:	f016 fca3 	bl	801abc0 <RCC_AHBPeriphClockCmd>
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 800427a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800427e:	f04f 0101 	mov.w	r1, #1
 8004282:	f016 fc9d 	bl	801abc0 <RCC_AHBPeriphClockCmd>
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 8004286:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800428a:	f04f 0101 	mov.w	r1, #1
 800428e:	f016 fc97 	bl	801abc0 <RCC_AHBPeriphClockCmd>

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4,  ENABLE);
 8004292:	f04f 0004 	mov.w	r0, #4
 8004296:	f04f 0101 	mov.w	r1, #1
 800429a:	f016 fcdd 	bl	801ac58 <RCC_APB1PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8,  ENABLE);
 800429e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80042a2:	f04f 0101 	mov.w	r1, #1
 80042a6:	f016 fcb1 	bl	801ac0c <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
 80042aa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80042ae:	f04f 0101 	mov.w	r1, #1
 80042b2:	f016 fcab 	bl	801ac0c <RCC_APB2PeriphClockCmd>

      GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_15;
 80042b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ba:	930a      	str	r3, [sp, #40]	; 0x28
      GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 80042bc:	f04f 0302 	mov.w	r3, #2
 80042c0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80042c4:	f04f 0303 	mov.w	r3, #3
 80042c8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    //GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 	//GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;

 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80042cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042d0:	ab0a      	add	r3, sp, #40	; 0x28
 80042d2:	4619      	mov	r1, r3
 80042d4:	f014 ff60 	bl	8019198 <GPIO_Init>

      GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_5;
 80042d8:	f04f 0320 	mov.w	r3, #32
 80042dc:	930a      	str	r3, [sp, #40]	; 0x28
    //GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    //GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    //GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 	//GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;

 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80042de:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80042e2:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80042e6:	ab0a      	add	r3, sp, #40	; 0x28
 80042e8:	4619      	mov	r1, r3
 80042ea:	f014 ff55 	bl	8019198 <GPIO_Init>

      GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_7 | GPIO_Pin_8;
 80042ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80042f2:	930a      	str	r3, [sp, #40]	; 0x28
    //GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    //GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    //GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 	//GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;

 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80042f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80042f8:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80042fc:	ab0a      	add	r3, sp, #40	; 0x28
 80042fe:	4619      	mov	r1, r3
 8004300:	f014 ff4a 	bl	8019198 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8004304:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004308:	930a      	str	r3, [sp, #40]	; 0x28
  //GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
  //GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  //GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	//GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;

	GPIO_Init(GPIOD, &GPIO_InitStructure);
 800430a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800430e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8004312:	ab0a      	add	r3, sp, #40	; 0x28
 8004314:	4619      	mov	r1, r3
 8004316:	f014 ff3f 	bl	8019198 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource15, GPIO_AF_2);
 800431a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800431e:	f04f 010f 	mov.w	r1, #15
 8004322:	f04f 0202 	mov.w	r2, #2
 8004326:	f015 f89f 	bl	8019468 <GPIO_PinAFConfig>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource5,  GPIO_AF_4);
 800432a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800432e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8004332:	f04f 0105 	mov.w	r1, #5
 8004336:	f04f 0204 	mov.w	r2, #4
 800433a:	f015 f895 	bl	8019468 <GPIO_PinAFConfig>

	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7,  GPIO_AF_2);
 800433e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004342:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8004346:	f04f 0107 	mov.w	r1, #7
 800434a:	f04f 0202 	mov.w	r2, #2
 800434e:	f015 f88b 	bl	8019468 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8,  GPIO_AF_2);
 8004352:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004356:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800435a:	f04f 0108 	mov.w	r1, #8
 800435e:	f04f 0202 	mov.w	r2, #2
 8004362:	f015 f881 	bl	8019468 <GPIO_PinAFConfig>

	GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_2);
 8004366:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800436a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800436e:	f04f 010c 	mov.w	r1, #12
 8004372:	f04f 0202 	mov.w	r2, #2
 8004376:	f015 f877 	bl	8019468 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_2);
 800437a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800437e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8004382:	f04f 010d 	mov.w	r1, #13
 8004386:	f04f 0202 	mov.w	r2, #2
 800438a:	f015 f86d 	bl	8019468 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_2);
 800438e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004392:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8004396:	f04f 010e 	mov.w	r1, #14
 800439a:	f04f 0202 	mov.w	r2, #2
 800439e:	f015 f863 	bl	8019468 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_2);
 80043a2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80043a6:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80043aa:	f04f 010f 	mov.w	r1, #15
 80043ae:	f04f 0202 	mov.w	r2, #2
 80043b2:	f015 f859 	bl	8019468 <GPIO_PinAFConfig>

    // Output timers

      TIM_TimeBaseStructure.TIM_Period            = (uint16_t)(2000000 / escPwmRate) - 1;
 80043b6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80043ba:	f248 4380 	movw	r3, #33920	; 0x8480
 80043be:	f2c0 031e 	movt	r3, #30
 80043c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80043cc:	9308      	str	r3, [sp, #32]
      TIM_TimeBaseStructure.TIM_Prescaler         = 36 - 1;
 80043ce:	f04f 0323 	mov.w	r3, #35	; 0x23
 80043d2:	f8ad 301c 	strh.w	r3, [sp, #28]
    //TIM_TimeBaseStructure.TIM_ClockDivision     = TIM_CKD_DIV1;
    //TIM_TimeBaseStructure.TIM_CounterMode       = TIM_CounterMode_Up;
    //TIM_TimeBaseStructure.TIM_RepititionCounter = 0x0000;

    TIM_TimeBaseInit(TIM4,  &TIM_TimeBaseStructure);
 80043d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80043da:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80043de:	ab07      	add	r3, sp, #28
 80043e0:	4619      	mov	r1, r3
 80043e2:	f017 fb55 	bl	801ba90 <TIM_TimeBaseInit>
    TIM_TimeBaseInit(TIM8,  &TIM_TimeBaseStructure);
 80043e6:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 80043ea:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80043ee:	ab07      	add	r3, sp, #28
 80043f0:	4619      	mov	r1, r3
 80043f2:	f017 fb4d 	bl	801ba90 <TIM_TimeBaseInit>
    TIM_TimeBaseInit(TIM17, &TIM_TimeBaseStructure);
 80043f6:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80043fa:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80043fe:	ab07      	add	r3, sp, #28
 8004400:	4619      	mov	r1, r3
 8004402:	f017 fb45 	bl	801ba90 <TIM_TimeBaseInit>

      TIM_OCInitStructure.TIM_OCMode       = TIM_OCMode_PWM2;
 8004406:	f04f 0370 	mov.w	r3, #112	; 0x70
 800440a:	9302      	str	r3, [sp, #8]
      TIM_OCInitStructure.TIM_OutputState  = TIM_OutputState_Enable;
 800440c:	f04f 0301 	mov.w	r3, #1
 8004410:	f8ad 300c 	strh.w	r3, [sp, #12]
    //TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Disable;
      TIM_OCInitStructure.TIM_Pulse        = ESC_PULSE_1MS;
 8004414:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004418:	9304      	str	r3, [sp, #16]
      TIM_OCInitStructure.TIM_OCPolarity   = TIM_OCPolarity_Low;
 800441a:	f04f 0302 	mov.w	r3, #2
 800441e:	f8ad 3014 	strh.w	r3, [sp, #20]
    //TIM_OCInitStructure.TIM_OCNPolarity  = TIM_OCPolarity_High;
      TIM_OCInitStructure.TIM_OCIdleState  = TIM_OCIdleState_Set;
 8004422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004426:	f8ad 3018 	strh.w	r3, [sp, #24]
    //TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Reset;

    TIM_OC1Init(TIM4,  &TIM_OCInitStructure);
 800442a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800442e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004432:	ab02      	add	r3, sp, #8
 8004434:	4619      	mov	r1, r3
 8004436:	f017 fcdf 	bl	801bdf8 <TIM_OC1Init>
    TIM_OC2Init(TIM4,  &TIM_OCInitStructure);
 800443a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800443e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004442:	ab02      	add	r3, sp, #8
 8004444:	4619      	mov	r1, r3
 8004446:	f017 fd65 	bl	801bf14 <TIM_OC2Init>
    TIM_OC3Init(TIM4,  &TIM_OCInitStructure);
 800444a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800444e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004452:	ab02      	add	r3, sp, #8
 8004454:	4619      	mov	r1, r3
 8004456:	f017 fde5 	bl	801c024 <TIM_OC3Init>
    TIM_OC4Init(TIM4,  &TIM_OCInitStructure);
 800445a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800445e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004462:	ab02      	add	r3, sp, #8
 8004464:	4619      	mov	r1, r3
 8004466:	f017 fe61 	bl	801c12c <TIM_OC4Init>

    TIM_OC1Init(TIM8,  &TIM_OCInitStructure);
 800446a:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 800446e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004472:	ab02      	add	r3, sp, #8
 8004474:	4619      	mov	r1, r3
 8004476:	f017 fcbf 	bl	801bdf8 <TIM_OC1Init>
    TIM_OC2Init(TIM8,  &TIM_OCInitStructure);
 800447a:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 800447e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004482:	ab02      	add	r3, sp, #8
 8004484:	4619      	mov	r1, r3
 8004486:	f017 fd45 	bl	801bf14 <TIM_OC2Init>
    TIM_OC3Init(TIM8,  &TIM_OCInitStructure);
 800448a:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 800448e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004492:	ab02      	add	r3, sp, #8
 8004494:	4619      	mov	r1, r3
 8004496:	f017 fdc5 	bl	801c024 <TIM_OC3Init>

    TIM_OC1Init(TIM17, &TIM_OCInitStructure);
 800449a:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800449e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80044a2:	ab02      	add	r3, sp, #8
 80044a4:	4619      	mov	r1, r3
 80044a6:	f017 fca7 	bl	801bdf8 <TIM_OC1Init>

    TIM_Cmd(TIM4,  ENABLE);
 80044aa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80044ae:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80044b2:	f04f 0101 	mov.w	r1, #1
 80044b6:	f017 fc83 	bl	801bdc0 <TIM_Cmd>
    TIM_Cmd(TIM8,  ENABLE);
 80044ba:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 80044be:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80044c2:	f04f 0101 	mov.w	r1, #1
 80044c6:	f017 fc7b 	bl	801bdc0 <TIM_Cmd>
    TIM_Cmd(TIM17, ENABLE);
 80044ca:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80044ce:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80044d2:	f04f 0101 	mov.w	r1, #1
 80044d6:	f017 fc73 	bl	801bdc0 <TIM_Cmd>

    TIM_CtrlPWMOutputs(TIM4,  ENABLE);
 80044da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80044de:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80044e2:	f04f 0101 	mov.w	r1, #1
 80044e6:	f018 fde1 	bl	801d0ac <TIM_CtrlPWMOutputs>
    TIM_CtrlPWMOutputs(TIM8,  ENABLE);
 80044ea:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 80044ee:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80044f2:	f04f 0101 	mov.w	r1, #1
 80044f6:	f018 fdd9 	bl	801d0ac <TIM_CtrlPWMOutputs>
    TIM_CtrlPWMOutputs(TIM17, ENABLE);
 80044fa:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80044fe:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004502:	f04f 0101 	mov.w	r1, #1
 8004506:	f018 fdd1 	bl	801d0ac <TIM_CtrlPWMOutputs>

}
 800450a:	b00d      	add	sp, #52	; 0x34
 800450c:	bd00      	pop	{pc}
 800450e:	bf00      	nop

08004510 <pwmEscWrite>:
///////////////////////////////////////////////////////////////////////////////
// PWM ESC Write
///////////////////////////////////////////////////////////////////////////////

void pwmEscWrite(uint8_t channel, uint16_t value)
{
 8004510:	b082      	sub	sp, #8
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	f88d 2007 	strb.w	r2, [sp, #7]
 800451a:	f8ad 3004 	strh.w	r3, [sp, #4]
    *OutputChannels[channel] = value;
 800451e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004522:	f240 0310 	movw	r3, #16
 8004526:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800452a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800452e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8004532:	601a      	str	r2, [r3, #0]
}
 8004534:	b002      	add	sp, #8
 8004536:	4770      	bx	lr

08004538 <pwmServoInit>:
///////////////////////////////////////////////////////////////////////////////
// PWM Servo Initialization
///////////////////////////////////////////////////////////////////////////////

void pwmServoInit(uint16_t servoPwmRate)
{
 8004538:	b500      	push	{lr}
 800453a:	b08d      	sub	sp, #52	; 0x34
 800453c:	4603      	mov	r3, r0
 800453e:	f8ad 3006 	strh.w	r3, [sp, #6]
    GPIO_InitTypeDef         GPIO_InitStructure;
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    TIM_OCInitTypeDef        TIM_OCInitStructure;

    GPIO_StructInit(&GPIO_InitStructure);
 8004542:	ab0a      	add	r3, sp, #40	; 0x28
 8004544:	4618      	mov	r0, r3
 8004546:	f014 fecb 	bl	80192e0 <GPIO_StructInit>
    TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 800454a:	ab07      	add	r3, sp, #28
 800454c:	4618      	mov	r0, r3
 800454e:	f017 fb2d 	bl	801bbac <TIM_TimeBaseStructInit>
    TIM_OCStructInit(&TIM_OCInitStructure);
 8004552:	ab02      	add	r3, sp, #8
 8004554:	4618      	mov	r0, r3
 8004556:	f017 ff4d 	bl	801c3f4 <TIM_OCStructInit>
    // Outputs
    // SERVO PWM0 TIM15 CH1 PF9
    // SERVO PWM1 TIM15 CH2 PF10


    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 800455a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800455e:	f04f 0101 	mov.w	r1, #1
 8004562:	f016 fb2d 	bl	801abc0 <RCC_AHBPeriphClockCmd>

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM15, ENABLE);
 8004566:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800456a:	f04f 0101 	mov.w	r1, #1
 800456e:	f016 fb4d 	bl	801ac0c <RCC_APB2PeriphClockCmd>

      GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_9 | GPIO_Pin_10;
 8004572:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004576:	930a      	str	r3, [sp, #40]	; 0x28
      GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8004578:	f04f 0302 	mov.w	r3, #2
 800457c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004580:	f04f 0303 	mov.w	r3, #3
 8004584:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    //GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	//GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;

	GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004588:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800458c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8004590:	ab0a      	add	r3, sp, #40	; 0x28
 8004592:	4619      	mov	r1, r3
 8004594:	f014 fe00 	bl	8019198 <GPIO_Init>

	GPIO_PinAFConfig(GPIOF, GPIO_PinSource9,  GPIO_AF_2);
 8004598:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800459c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80045a0:	f04f 0109 	mov.w	r1, #9
 80045a4:	f04f 0202 	mov.w	r2, #2
 80045a8:	f014 ff5e 	bl	8019468 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_2);
 80045ac:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80045b0:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80045b4:	f04f 010a 	mov.w	r1, #10
 80045b8:	f04f 0202 	mov.w	r2, #2
 80045bc:	f014 ff54 	bl	8019468 <GPIO_PinAFConfig>

    // Output timers

      TIM_TimeBaseStructure.TIM_Period            = (uint16_t)(2000000 / servoPwmRate) - 1;
 80045c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80045c4:	f248 4380 	movw	r3, #33920	; 0x8480
 80045c8:	f2c0 031e 	movt	r3, #30
 80045cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80045d6:	9308      	str	r3, [sp, #32]
      TIM_TimeBaseStructure.TIM_Prescaler         = 36 - 1;
 80045d8:	f04f 0323 	mov.w	r3, #35	; 0x23
 80045dc:	f8ad 301c 	strh.w	r3, [sp, #28]
    //TIM_TimeBaseStructure.TIM_ClockDivision     = TIM_CKD_DIV1;
    //TIM_TimeBaseStructure.TIM_CounterMode       = TIM_CounterMode_Up;
    //TIM_TimeBaseStructure.TIM_RepititionCounter = 0x0000;

    TIM_TimeBaseInit(TIM15, &TIM_TimeBaseStructure);
 80045e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80045e4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80045e8:	ab07      	add	r3, sp, #28
 80045ea:	4619      	mov	r1, r3
 80045ec:	f017 fa50 	bl	801ba90 <TIM_TimeBaseInit>

      TIM_OCInitStructure.TIM_OCMode       = TIM_OCMode_PWM2;
 80045f0:	f04f 0370 	mov.w	r3, #112	; 0x70
 80045f4:	9302      	str	r3, [sp, #8]
      TIM_OCInitStructure.TIM_OutputState  = TIM_OutputState_Enable;
 80045f6:	f04f 0301 	mov.w	r3, #1
 80045fa:	f8ad 300c 	strh.w	r3, [sp, #12]
    //TIM_OCInitStructure.TIMOutputNState  = TIM_OutputNState_Disable;
      TIM_OCInitStructure.TIM_Pulse        = SERVO_PULSE_1p5MS;
 80045fe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004602:	9304      	str	r3, [sp, #16]
      TIM_OCInitStructure.TIM_OCPolarity   = TIM_OCPolarity_Low;
 8004604:	f04f 0302 	mov.w	r3, #2
 8004608:	f8ad 3014 	strh.w	r3, [sp, #20]
    //TIM_OCInitStructure.TIM_OCNPolarity  = TIM_OCPolarity_High;
      TIM_OCInitStructure.TIM_OCIdleState  = TIM_OCIdleState_Set;
 800460c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004610:	f8ad 3018 	strh.w	r3, [sp, #24]
    //TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Reset;

    TIM_OC1Init(TIM15, &TIM_OCInitStructure);
 8004614:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004618:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800461c:	ab02      	add	r3, sp, #8
 800461e:	4619      	mov	r1, r3
 8004620:	f017 fbea 	bl	801bdf8 <TIM_OC1Init>
    TIM_OC2Init(TIM15, &TIM_OCInitStructure);
 8004624:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004628:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800462c:	ab02      	add	r3, sp, #8
 800462e:	4619      	mov	r1, r3
 8004630:	f017 fc70 	bl	801bf14 <TIM_OC2Init>

    TIM_Cmd(TIM15, ENABLE);
 8004634:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004638:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800463c:	f04f 0101 	mov.w	r1, #1
 8004640:	f017 fbbe 	bl	801bdc0 <TIM_Cmd>
    TIM_CtrlPWMOutputs(TIM15, ENABLE);
 8004644:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004648:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800464c:	f04f 0101 	mov.w	r1, #1
 8004650:	f018 fd2c 	bl	801d0ac <TIM_CtrlPWMOutputs>

}
 8004654:	b00d      	add	sp, #52	; 0x34
 8004656:	bd00      	pop	{pc}

08004658 <pwmServoWrite>:
///////////////////////////////////////////////////////////////////////////////
// PWM Servo Write
///////////////////////////////////////////////////////////////////////////////

void pwmServoWrite(uint8_t channel, uint16_t value)
{
 8004658:	b082      	sub	sp, #8
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	f88d 2007 	strb.w	r2, [sp, #7]
 8004662:	f8ad 3004 	strh.w	r3, [sp, #4]
    *OutputChannels[channel] = value;
 8004666:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800466a:	f240 0330 	movw	r3, #48	; 0x30
 800466e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004676:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800467a:	601a      	str	r2, [r3, #0]
}
 800467c:	b002      	add	sp, #8
 800467e:	4770      	bx	lr

08004680 <serialPWM_IRQHandler>:
///////////////////////////////////////////////////////////////////////////////
// Serial PWM Receiver Interrupt Handler
///////////////////////////////////////////////////////////////////////////////

static void serialPWM_IRQHandler(TIM_TypeDef *tim)
{
 8004680:	b500      	push	{lr}
 8004682:	b085      	sub	sp, #20
 8004684:	9001      	str	r0, [sp, #4]
    uint16_t diff;
    static uint16_t now;
    static uint16_t last = 0;
    static uint8_t  chan = 0;

    if (TIM_GetITStatus(tim, TIM_IT_CC4) == SET)
 8004686:	9801      	ldr	r0, [sp, #4]
 8004688:	f04f 0110 	mov.w	r1, #16
 800468c:	f018 fdb4 	bl	801d1f8 <TIM_GetITStatus>
 8004690:	4603      	mov	r3, r0
 8004692:	2b01      	cmp	r3, #1
 8004694:	d11a      	bne.n	80046cc <serialPWM_IRQHandler+0x4c>
    {
        last = now;
 8004696:	f240 735c 	movw	r3, #1884	; 0x75c
 800469a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800469e:	881a      	ldrh	r2, [r3, #0]
 80046a0:	f240 735e 	movw	r3, #1886	; 0x75e
 80046a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046a8:	801a      	strh	r2, [r3, #0]
        now = TIM_GetCapture4(tim);
 80046aa:	9801      	ldr	r0, [sp, #4]
 80046ac:	f018 fbf8 	bl	801cea0 <TIM_GetCapture4>
 80046b0:	4603      	mov	r3, r0
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	f240 735c 	movw	r3, #1884	; 0x75c
 80046b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046bc:	801a      	strh	r2, [r3, #0]
        rcActive = true;
 80046be:	f240 731c 	movw	r3, #1820	; 0x71c
 80046c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046c6:	f04f 0201 	mov.w	r2, #1
 80046ca:	701a      	strb	r2, [r3, #0]
    }

    TIM_ClearITPendingBit(tim, TIM_IT_CC4);
 80046cc:	9801      	ldr	r0, [sp, #4]
 80046ce:	f04f 0110 	mov.w	r1, #16
 80046d2:	f018 fdc9 	bl	801d268 <TIM_ClearITPendingBit>

    diff = now - last;
 80046d6:	f240 735c 	movw	r3, #1884	; 0x75c
 80046da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046de:	881a      	ldrh	r2, [r3, #0]
 80046e0:	f240 735e 	movw	r3, #1886	; 0x75e
 80046e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f8ad 300e 	strh.w	r3, [sp, #14]

    if (diff > 2700 * 2)   // Per http://www.rcgroups.com/forums/showpost.php?p=21996147&postcount=3960
 80046f0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80046f4:	f241 5318 	movw	r3, #5400	; 0x1518
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d907      	bls.n	800470c <serialPWM_IRQHandler+0x8c>
    {                      // "So, if you use 2.5ms or higher as being the reset for the PPM stream start,
        chan = 0;          // you will be fine. I use 2.7ms just to be safe."
 80046fc:	f240 7360 	movw	r3, #1888	; 0x760
 8004700:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	701a      	strb	r2, [r3, #0]
 800470a:	e033      	b.n	8004774 <serialPWM_IRQHandler+0xf4>
    }
    else
    {
        if (diff > 750 * 2 && diff < 2250 * 2 && chan < 8)    // 750 to 2250 ms is our 'valid' channel range
 800470c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8004710:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004714:	429a      	cmp	r2, r3
 8004716:	d920      	bls.n	800475a <serialPWM_IRQHandler+0xda>
 8004718:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800471c:	f241 1393 	movw	r3, #4499	; 0x1193
 8004720:	429a      	cmp	r2, r3
 8004722:	d81a      	bhi.n	800475a <serialPWM_IRQHandler+0xda>
 8004724:	f240 7360 	movw	r3, #1888	; 0x760
 8004728:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b07      	cmp	r3, #7
 8004730:	d813      	bhi.n	800475a <serialPWM_IRQHandler+0xda>
        {
            Inputs[chan].pulseWidth = diff;
 8004732:	f240 7360 	movw	r3, #1888	; 0x760
 8004736:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	4619      	mov	r1, r3
 800473e:	f240 7220 	movw	r2, #1824	; 0x720
 8004742:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004746:	460b      	mov	r3, r1
 8004748:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800474c:	185b      	adds	r3, r3, r1
 800474e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004752:	18d3      	adds	r3, r2, r3
 8004754:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8004758:	809a      	strh	r2, [r3, #4]
        }
        chan++;
 800475a:	f240 7360 	movw	r3, #1888	; 0x760
 800475e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	f103 0301 	add.w	r3, r3, #1
 8004768:	b2da      	uxtb	r2, r3
 800476a:	f240 7360 	movw	r3, #1888	; 0x760
 800476e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004772:	701a      	strb	r2, [r3, #0]
    }
}
 8004774:	b005      	add	sp, #20
 8004776:	bd00      	pop	{pc}

08004778 <parallelPWM_IRQHandler>:
///////////////////////////////////////////////////////////////////////////////
// Parallel PWM Receiver Interrupt Handler
///////////////////////////////////////////////////////////////////////////////

static void parallelPWM_IRQHandler(TIM_TypeDef *tim)
{
 8004778:	b500      	push	{lr}
 800477a:	b089      	sub	sp, #36	; 0x24
 800477c:	9001      	str	r0, [sp, #4]
    uint8_t i;
    uint32_t inputCaptureValue = 0;
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	9306      	str	r3, [sp, #24]

    for (i = 0; i < 8; i++) {
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	f88d 301f 	strb.w	r3, [sp, #31]
 800478c:	e0dd      	b.n	800494a <parallelPWM_IRQHandler+0x1d2>
        struct TIM_Channel channel = Channels[i];
 800478e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8004792:	f240 0238 	movw	r2, #56	; 0x38
 8004796:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800479a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800479e:	18d3      	adds	r3, r2, r3
 80047a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047a4:	ab03      	add	r3, sp, #12
 80047a6:	e883 0003 	stmia.w	r3, {r0, r1}
        struct PWM_State   *state  = &Inputs[i];
 80047aa:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80047ae:	4613      	mov	r3, r2
 80047b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80047b4:	189b      	adds	r3, r3, r2
 80047b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80047ba:	461a      	mov	r2, r3
 80047bc:	f240 7320 	movw	r3, #1824	; 0x720
 80047c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80047c4:	18d3      	adds	r3, r2, r3
 80047c6:	9305      	str	r3, [sp, #20]

        if (tim == channel.tim && (TIM_GetITStatus(channel.tim, channel.cc) == SET))
 80047c8:	9a03      	ldr	r2, [sp, #12]
 80047ca:	9b01      	ldr	r3, [sp, #4]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	f040 80b6 	bne.w	800493e <parallelPWM_IRQHandler+0x1c6>
 80047d2:	9a03      	ldr	r2, [sp, #12]
 80047d4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80047d8:	4610      	mov	r0, r2
 80047da:	4619      	mov	r1, r3
 80047dc:	f018 fd0c 	bl	801d1f8 <TIM_GetITStatus>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	f040 80ab 	bne.w	800493e <parallelPWM_IRQHandler+0x1c6>
        {
            TIM_ClearITPendingBit(channel.tim, channel.cc);
 80047e8:	9a03      	ldr	r2, [sp, #12]
 80047ea:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80047ee:	4610      	mov	r0, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	f018 fd39 	bl	801d268 <TIM_ClearITPendingBit>
            if (i == 0)
 80047f6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <parallelPWM_IRQHandler+0x94>
                rcActive = true;
 80047fe:	f240 731c 	movw	r3, #1820	; 0x71c
 8004802:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004806:	f04f 0201 	mov.w	r2, #1
 800480a:	701a      	strb	r2, [r3, #0]

            switch (channel.channel)
 800480c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8004810:	2b0c      	cmp	r3, #12
 8004812:	d83d      	bhi.n	8004890 <parallelPWM_IRQHandler+0x118>
 8004814:	a201      	add	r2, pc, #4	; (adr r2, 800481c <parallelPWM_IRQHandler+0xa4>)
 8004816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481a:	bf00      	nop
 800481c:	08004851 	.word	0x08004851
 8004820:	08004891 	.word	0x08004891
 8004824:	08004891 	.word	0x08004891
 8004828:	08004891 	.word	0x08004891
 800482c:	08004861 	.word	0x08004861
 8004830:	08004891 	.word	0x08004891
 8004834:	08004891 	.word	0x08004891
 8004838:	08004891 	.word	0x08004891
 800483c:	08004871 	.word	0x08004871
 8004840:	08004891 	.word	0x08004891
 8004844:	08004891 	.word	0x08004891
 8004848:	08004891 	.word	0x08004891
 800484c:	08004881 	.word	0x08004881
            {
                case TIM_Channel_1:
                    inputCaptureValue = (uint16_t)TIM_GetCapture1(channel.tim);
 8004850:	9b03      	ldr	r3, [sp, #12]
 8004852:	4618      	mov	r0, r3
 8004854:	f018 fb0c 	bl	801ce70 <TIM_GetCapture1>
 8004858:	4603      	mov	r3, r0
 800485a:	b29b      	uxth	r3, r3
 800485c:	9306      	str	r3, [sp, #24]
                    break;
 800485e:	e017      	b.n	8004890 <parallelPWM_IRQHandler+0x118>
                case TIM_Channel_2:
                    inputCaptureValue = (uint16_t)TIM_GetCapture2(channel.tim);
 8004860:	9b03      	ldr	r3, [sp, #12]
 8004862:	4618      	mov	r0, r3
 8004864:	f018 fb0c 	bl	801ce80 <TIM_GetCapture2>
 8004868:	4603      	mov	r3, r0
 800486a:	b29b      	uxth	r3, r3
 800486c:	9306      	str	r3, [sp, #24]
                    break;
 800486e:	e00f      	b.n	8004890 <parallelPWM_IRQHandler+0x118>
                case TIM_Channel_3:
                    inputCaptureValue = (uint16_t)TIM_GetCapture3(channel.tim);
 8004870:	9b03      	ldr	r3, [sp, #12]
 8004872:	4618      	mov	r0, r3
 8004874:	f018 fb0c 	bl	801ce90 <TIM_GetCapture3>
 8004878:	4603      	mov	r3, r0
 800487a:	b29b      	uxth	r3, r3
 800487c:	9306      	str	r3, [sp, #24]
                    break;
 800487e:	e007      	b.n	8004890 <parallelPWM_IRQHandler+0x118>
                case TIM_Channel_4:
                    inputCaptureValue = (uint16_t)TIM_GetCapture4(channel.tim);
 8004880:	9b03      	ldr	r3, [sp, #12]
 8004882:	4618      	mov	r0, r3
 8004884:	f018 fb0c 	bl	801cea0 <TIM_GetCapture4>
 8004888:	4603      	mov	r3, r0
 800488a:	b29b      	uxth	r3, r3
 800488c:	9306      	str	r3, [sp, #24]
                    break;
 800488e:	bf00      	nop
            }

            if (state->state == 0)
 8004890:	9b05      	ldr	r3, [sp, #20]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d11e      	bne.n	80048d6 <parallelPWM_IRQHandler+0x15e>
            {
                state->riseTime = inputCaptureValue;
 8004898:	9b06      	ldr	r3, [sp, #24]
 800489a:	b29a      	uxth	r2, r3
 800489c:	9b05      	ldr	r3, [sp, #20]
 800489e:	805a      	strh	r2, [r3, #2]

                // switch states
                state->state = 1;
 80048a0:	9b05      	ldr	r3, [sp, #20]
 80048a2:	f04f 0201 	mov.w	r2, #1
 80048a6:	701a      	strb	r2, [r3, #0]

                  TIM_ICInitStructure.TIM_Channel     = channel.channel;
 80048a8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80048ac:	f240 7350 	movw	r3, #1872	; 0x750
 80048b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048b4:	801a      	strh	r2, [r3, #0]
                  TIM_ICInitStructure.TIM_ICPolarity  = TIM_ICPolarity_Falling;
 80048b6:	f240 7350 	movw	r3, #1872	; 0x750
 80048ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048be:	f04f 0202 	mov.w	r2, #2
 80048c2:	805a      	strh	r2, [r3, #2]
                //TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
                //TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
                //TIM_ICInitStructure.TIM_ICFilter    = 0x00;

                TIM_ICInit(channel.tim, &TIM_ICInitStructure);
 80048c4:	9b03      	ldr	r3, [sp, #12]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f240 7150 	movw	r1, #1872	; 0x750
 80048cc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80048d0:	f018 f9fa 	bl	801ccc8 <TIM_ICInit>
 80048d4:	e033      	b.n	800493e <parallelPWM_IRQHandler+0x1c6>
            else
            {
                // inputCaptureValue has falling edge timer value

                // compute capture
                if (inputCaptureValue > state->riseTime)
 80048d6:	9b05      	ldr	r3, [sp, #20]
 80048d8:	885b      	ldrh	r3, [r3, #2]
 80048da:	461a      	mov	r2, r3
 80048dc:	9b06      	ldr	r3, [sp, #24]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d208      	bcs.n	80048f4 <parallelPWM_IRQHandler+0x17c>
                    state->pulseWidth = (inputCaptureValue - state->riseTime);
 80048e2:	9b06      	ldr	r3, [sp, #24]
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	9b05      	ldr	r3, [sp, #20]
 80048e8:	885b      	ldrh	r3, [r3, #2]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	9b05      	ldr	r3, [sp, #20]
 80048f0:	809a      	strh	r2, [r3, #4]
 80048f2:	e00a      	b.n	800490a <parallelPWM_IRQHandler+0x192>
                else
                    state->pulseWidth = ((0xFFFF - state->riseTime) + inputCaptureValue);
 80048f4:	9b06      	ldr	r3, [sp, #24]
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	9b05      	ldr	r3, [sp, #20]
 80048fa:	885b      	ldrh	r3, [r3, #2]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f103 33ff 	add.w	r3, r3, #4294967295
 8004904:	b29a      	uxth	r2, r3
 8004906:	9b05      	ldr	r3, [sp, #20]
 8004908:	809a      	strh	r2, [r3, #4]

                // switch state
                state->state = 0;
 800490a:	9b05      	ldr	r3, [sp, #20]
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	701a      	strb	r2, [r3, #0]

                  TIM_ICInitStructure.TIM_Channel     = channel.channel;
 8004912:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8004916:	f240 7350 	movw	r3, #1872	; 0x750
 800491a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800491e:	801a      	strh	r2, [r3, #0]
                  TIM_ICInitStructure.TIM_ICPolarity  = TIM_ICPolarity_Rising;
 8004920:	f240 7350 	movw	r3, #1872	; 0x750
 8004924:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	805a      	strh	r2, [r3, #2]
                //TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
                //TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
                //TIM_ICInitStructure.TIM_ICFilter    = 0x00;

                TIM_ICInit(channel.tim, &TIM_ICInitStructure);
 800492e:	9b03      	ldr	r3, [sp, #12]
 8004930:	4618      	mov	r0, r3
 8004932:	f240 7150 	movw	r1, #1872	; 0x750
 8004936:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800493a:	f018 f9c5 	bl	801ccc8 <TIM_ICInit>
static void parallelPWM_IRQHandler(TIM_TypeDef *tim)
{
    uint8_t i;
    uint32_t inputCaptureValue = 0;

    for (i = 0; i < 8; i++) {
 800493e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8004942:	f103 0301 	add.w	r3, r3, #1
 8004946:	f88d 301f 	strb.w	r3, [sp, #31]
 800494a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800494e:	2b07      	cmp	r3, #7
 8004950:	f67f af1d 	bls.w	800478e <parallelPWM_IRQHandler+0x16>

                TIM_ICInit(channel.tim, &TIM_ICInitStructure);
            }
        }
    }
}
 8004954:	b009      	add	sp, #36	; 0x24
 8004956:	bd00      	pop	{pc}

08004958 <TIM1_CC_IRQHandler>:
///////////////////////////////////////////////////////////////////////////////
// PWM Receiver Interrupt Handlers
///////////////////////////////////////////////////////////////////////////////

void TIM1_CC_IRQHandler(void)
{
 8004958:	b508      	push	{r3, lr}
    parallelPWM_IRQHandler(TIM1);
 800495a:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800495e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004962:	f7ff ff09 	bl	8004778 <parallelPWM_IRQHandler>
}
 8004966:	bd08      	pop	{r3, pc}

08004968 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8004968:	b508      	push	{r3, lr}
    parallelPWM_IRQHandler(TIM2);
 800496a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800496e:	f7ff ff03 	bl	8004778 <parallelPWM_IRQHandler>
}
 8004972:	bd08      	pop	{r3, pc}

08004974 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
 8004974:	b508      	push	{r3, lr}
    parallelPWM_IRQHandler(TIM3);
 8004976:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800497a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800497e:	f7ff fefb 	bl	8004778 <parallelPWM_IRQHandler>
}
 8004982:	bd08      	pop	{r3, pc}

08004984 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004984:	b508      	push	{r3, lr}
    if (eepromConfig.receiverType == SERIAL_PWM)
 8004986:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800498a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800498e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004992:	2b02      	cmp	r3, #2
 8004994:	d106      	bne.n	80049a4 <TIM1_UP_TIM16_IRQHandler+0x20>
        serialPWM_IRQHandler(TIM16);
 8004996:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800499a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800499e:	f7ff fe6f 	bl	8004680 <serialPWM_IRQHandler>
 80049a2:	e005      	b.n	80049b0 <TIM1_UP_TIM16_IRQHandler+0x2c>
    else
        parallelPWM_IRQHandler(TIM16);
 80049a4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 80049a8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80049ac:	f7ff fee4 	bl	8004778 <parallelPWM_IRQHandler>
}
 80049b0:	bd08      	pop	{r3, pc}
 80049b2:	bf00      	nop

080049b4 <USART3_IRQHandler>:
///////////////////////////////////////////////////////////////////////////////
//  Spektrum Satellite Receiver UART Interrupt Handler
///////////////////////////////////////////////////////////////////////////////

void USART3_IRQHandler(void)
{
 80049b4:	b510      	push	{r4, lr}
 80049b6:	b084      	sub	sp, #16
    uint8_t  b;
    uint8_t  spektrumChannel;
    uint32_t spektrumTime;

    if (USART_GetITStatus(USART3, USART_IT_RXNE) == SET)
 80049b8:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80049bc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80049c0:	f240 1105 	movw	r1, #261	; 0x105
 80049c4:	f2c0 0105 	movt	r1, #5
 80049c8:	f019 fd0a 	bl	801e3e0 <USART_GetITStatus>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	f040 80ba 	bne.w	8004b48 <USART3_IRQHandler+0x194>
    {
        rcActive             = true;
 80049d4:	f240 731c 	movw	r3, #1820	; 0x71c
 80049d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80049dc:	f04f 0201 	mov.w	r2, #1
 80049e0:	701a      	strb	r2, [r3, #0]
        spektrumTime         = micros();
 80049e2:	f001 fa19 	bl	8005e18 <micros>
 80049e6:	9002      	str	r0, [sp, #8]
        spektrumTimeInterval = spektrumTime - spektrumTimeLast;
 80049e8:	f641 137c 	movw	r3, #6524	; 0x197c
 80049ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	9a02      	ldr	r2, [sp, #8]
 80049f4:	1ad2      	subs	r2, r2, r3
 80049f6:	f641 1374 	movw	r3, #6516	; 0x1974
 80049fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80049fe:	601a      	str	r2, [r3, #0]
        spektrumTimeLast     = spektrumTime;
 8004a00:	f641 137c 	movw	r3, #6524	; 0x197c
 8004a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a08:	9a02      	ldr	r2, [sp, #8]
 8004a0a:	601a      	str	r2, [r3, #0]

        if (spektrumTimeInterval > 5000)
 8004a0c:	f641 1374 	movw	r3, #6516	; 0x1974
 8004a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d906      	bls.n	8004a2c <USART3_IRQHandler+0x78>
            spektrumFramePosition = 0;
 8004a1e:	f641 13c0 	movw	r3, #6592	; 0x19c0
 8004a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]

        spektrumFrame[spektrumFramePosition] = USART_ReceiveData(USART3);
 8004a2c:	f641 13c0 	movw	r3, #6592	; 0x19c0
 8004a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	461c      	mov	r4, r3
 8004a38:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8004a3c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004a40:	f019 fa6a 	bl	801df18 <USART_ReceiveData>
 8004a44:	4603      	mov	r3, r0
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	f641 1380 	movw	r3, #6528	; 0x1980
 8004a4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a50:	551a      	strb	r2, [r3, r4]

        if (spektrumFramePosition == SPEKTRUM_FRAME_SIZE - 1)
 8004a52:	f641 13c0 	movw	r3, #6592	; 0x19c0
 8004a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b0f      	cmp	r3, #15
 8004a5e:	d107      	bne.n	8004a70 <USART3_IRQHandler+0xbc>
        {
            spektrumFrameComplete = true;
 8004a60:	f240 735a 	movw	r3, #1882	; 0x75a
 8004a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a68:	f04f 0201 	mov.w	r2, #1
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	e00c      	b.n	8004a8a <USART3_IRQHandler+0xd6>
            //failsafeCnt = 0;
        }
        else
        {
            spektrumFramePosition++;
 8004a70:	f641 13c0 	movw	r3, #6592	; 0x19c0
 8004a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	f103 0301 	add.w	r3, r3, #1
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	f641 13c0 	movw	r3, #6592	; 0x19c0
 8004a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a88:	701a      	strb	r2, [r3, #0]
        }

        if (spektrumFrameComplete)
 8004a8a:	f240 735a 	movw	r3, #1882	; 0x75a
 8004a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d057      	beq.n	8004b48 <USART3_IRQHandler+0x194>
		{
		    for (b = 3; b < SPEKTRUM_FRAME_SIZE; b += 2)
 8004a98:	f04f 0303 	mov.w	r3, #3
 8004a9c:	f88d 300f 	strb.w	r3, [sp, #15]
 8004aa0:	e047      	b.n	8004b32 <USART3_IRQHandler+0x17e>
		    {
		        spektrumChannel = 0x0F & (spektrumFrame[b - 1] >> spektrumChannelShift);
 8004aa2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004aa6:	f103 32ff 	add.w	r2, r3, #4294967295
 8004aaa:	f641 1380 	movw	r3, #6528	; 0x1980
 8004aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ab2:	5c9b      	ldrb	r3, [r3, r2]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f641 137b 	movw	r3, #6523	; 0x197b
 8004aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	fa42 f303 	asr.w	r3, r2, r3
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	f88d 3007 	strb.w	r3, [sp, #7]
		        if (spektrumChannel < eepromConfig.spektrumChannels)
 8004ace:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8004ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ad6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8004ada:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d221      	bcs.n	8004b26 <USART3_IRQHandler+0x172>
		            spektrumChannelData[spektrumChannel] = ((uint32_t)(spektrumFrame[b - 1] & spektrumChannelMask) << 8) + spektrumFrame[b];
 8004ae2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004ae6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004aea:	f103 31ff 	add.w	r1, r3, #4294967295
 8004aee:	f641 1380 	movw	r3, #6528	; 0x1980
 8004af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004af6:	5c59      	ldrb	r1, [r3, r1]
 8004af8:	f641 1378 	movw	r3, #6520	; 0x1978
 8004afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	400b      	ands	r3, r1
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	ea4f 2103 	mov.w	r1, r3, lsl #8
 8004b0a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8004b0e:	f641 1380 	movw	r3, #6528	; 0x1980
 8004b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b16:	5c1b      	ldrb	r3, [r3, r0]
 8004b18:	18c9      	adds	r1, r1, r3
 8004b1a:	f641 1390 	movw	r3, #6544	; 0x1990
 8004b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            spektrumFramePosition++;
        }

        if (spektrumFrameComplete)
		{
		    for (b = 3; b < SPEKTRUM_FRAME_SIZE; b += 2)
 8004b26:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004b2a:	f103 0302 	add.w	r3, r3, #2
 8004b2e:	f88d 300f 	strb.w	r3, [sp, #15]
 8004b32:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004b36:	2b0f      	cmp	r3, #15
 8004b38:	d9b3      	bls.n	8004aa2 <USART3_IRQHandler+0xee>
		        spektrumChannel = 0x0F & (spektrumFrame[b - 1] >> spektrumChannelShift);
		        if (spektrumChannel < eepromConfig.spektrumChannels)
		            spektrumChannelData[spektrumChannel] = ((uint32_t)(spektrumFrame[b - 1] & spektrumChannelMask) << 8) + spektrumFrame[b];
		    }

		    spektrumFrameComplete = false;
 8004b3a:	f240 735a 	movw	r3, #1882	; 0x75a
 8004b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
		}
    }
}
 8004b48:	b004      	add	sp, #16
 8004b4a:	bd10      	pop	{r4, pc}

08004b4c <rxInit>:
///////////////////////////////////////////////////////////////////////////////
// Receiver Initialization
///////////////////////////////////////////////////////////////////////////////

void rxInit(void)
{
 8004b4c:	b500      	push	{lr}
 8004b4e:	b08d      	sub	sp, #52	; 0x34
    GPIO_InitTypeDef         GPIO_InitStructure;
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    NVIC_InitTypeDef         NVIC_InitStructure;
    USART_InitTypeDef        USART_InitStructure;

    TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 8004b50:	ab07      	add	r3, sp, #28
 8004b52:	4618      	mov	r0, r3
 8004b54:	f017 f82a 	bl	801bbac <TIM_TimeBaseStructInit>
    TIM_ICStructInit(&TIM_ICInitStructure);
 8004b58:	f240 7050 	movw	r0, #1872	; 0x750
 8004b5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004b60:	f018 f904 	bl	801cd6c <TIM_ICStructInit>

    ///////////////////////////////////

    if (eepromConfig.receiverType == SERIAL_PWM)
 8004b64:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8004b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b6c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	f040 80c4 	bne.w	8004cfe <rxInit+0x1b2>
    {
        // Serial PWM Input
    	// TIM16_CH1 PB8

        RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8004b76:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004b7a:	f04f 0101 	mov.w	r1, #1
 8004b7e:	f016 f81f 	bl	801abc0 <RCC_AHBPeriphClockCmd>

		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM16,  ENABLE);
 8004b82:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004b86:	f04f 0101 	mov.w	r1, #1
 8004b8a:	f016 f83f 	bl	801ac0c <RCC_APB2PeriphClockCmd>

		// preset channels to center
		for (i = 0; i < 8; i++)
 8004b8e:	f641 1379 	movw	r3, #6521	; 0x1979
 8004b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	701a      	strb	r2, [r3, #0]
 8004b9c:	e020      	b.n	8004be0 <rxInit+0x94>
		    Inputs[i].pulseWidth = RX_PULSE_1p5MS;
 8004b9e:	f641 1379 	movw	r3, #6521	; 0x1979
 8004ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	f240 7220 	movw	r2, #1824	; 0x720
 8004bae:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004bb8:	185b      	adds	r3, r3, r1
 8004bba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004bbe:	18d3      	adds	r3, r2, r3
 8004bc0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004bc4:	809a      	strh	r2, [r3, #4]
        RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);

		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM16,  ENABLE);

		// preset channels to center
		for (i = 0; i < 8; i++)
 8004bc6:	f641 1379 	movw	r3, #6521	; 0x1979
 8004bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	f103 0301 	add.w	r3, r3, #1
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	f641 1379 	movw	r3, #6521	; 0x1979
 8004bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004bde:	701a      	strb	r2, [r3, #0]
 8004be0:	f641 1379 	movw	r3, #6521	; 0x1979
 8004be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b07      	cmp	r3, #7
 8004bec:	d9d7      	bls.n	8004b9e <rxInit+0x52>
		    Inputs[i].pulseWidth = RX_PULSE_1p5MS;

        GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_8;
 8004bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bf2:	930a      	str	r3, [sp, #40]	; 0x28
        GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8004bf4:	f04f 0302 	mov.w	r3, #2
 8004bf8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004bfc:	f04f 0303 	mov.w	r3, #3
 8004c00:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

        GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004c14:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004c18:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8004c1c:	ab0a      	add	r3, sp, #40	; 0x28
 8004c1e:	4619      	mov	r1, r3
 8004c20:	f014 faba 	bl	8019198 <GPIO_Init>

        GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_4);
 8004c24:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004c28:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8004c2c:	f04f 0108 	mov.w	r1, #8
 8004c30:	f04f 0204 	mov.w	r2, #4
 8004c34:	f014 fc18 	bl	8019468 <GPIO_PinAFConfig>

        NVIC_InitStructure.NVIC_IRQChannel                   = TIM1_UP_TIM16_IRQn;
 8004c38:	f04f 0319 	mov.w	r3, #25
 8004c3c:	f88d 3018 	strb.w	r3, [sp, #24]
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 8004c40:	f04f 0302 	mov.w	r3, #2
 8004c44:	f88d 3019 	strb.w	r3, [sp, #25]
        NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 0;
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	f88d 301a 	strb.w	r3, [sp, #26]
        NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
 8004c50:	f04f 0301 	mov.w	r3, #1
 8004c54:	f88d 301b 	strb.w	r3, [sp, #27]

        NVIC_Init(&NVIC_InitStructure);
 8004c58:	ab06      	add	r3, sp, #24
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f015 f8e8 	bl	8019e30 <NVIC_Init>

          TIM_TimeBaseStructure.TIM_Prescaler         = 36 - 1;
 8004c60:	f04f 0323 	mov.w	r3, #35	; 0x23
 8004c64:	f8ad 301c 	strh.w	r3, [sp, #28]
		//TIM_TimeBaseStructure.TIM_CounterMode       = TIM_CounterMode_Up;
		  TIM_TimeBaseStructure.TIM_Period            = 0xFFFF;
 8004c68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c6c:	9308      	str	r3, [sp, #32]
		//TIM_TimeBaseStructure.TIM_ClockDivision     = TIM_CKD_DIV1;
		//TIM_TimeBaseStructure.TIM_RepetitionCounter = 0x0000;

		TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8004c6e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c72:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004c76:	ab07      	add	r3, sp, #28
 8004c78:	4619      	mov	r1, r3
 8004c7a:	f016 ff09 	bl	801ba90 <TIM_TimeBaseInit>

        TIM_ICInitStructure.TIM_Channel     = TIM_Channel_1;
 8004c7e:	f240 7350 	movw	r3, #1872	; 0x750
 8004c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c86:	f04f 0200 	mov.w	r2, #0
 8004c8a:	801a      	strh	r2, [r3, #0]
        TIM_ICInitStructure.TIM_ICPolarity  = TIM_ICPolarity_Rising;
 8004c8c:	f240 7350 	movw	r3, #1872	; 0x750
 8004c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	805a      	strh	r2, [r3, #2]
        TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 8004c9a:	f240 7350 	movw	r3, #1872	; 0x750
 8004c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ca2:	f04f 0201 	mov.w	r2, #1
 8004ca6:	809a      	strh	r2, [r3, #4]
        TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8004ca8:	f240 7350 	movw	r3, #1872	; 0x750
 8004cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	80da      	strh	r2, [r3, #6]
        TIM_ICInitStructure.TIM_ICFilter    = 0x0;
 8004cb6:	f240 7350 	movw	r3, #1872	; 0x750
 8004cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	811a      	strh	r2, [r3, #8]

        TIM_ICInit(TIM16, &TIM_ICInitStructure);
 8004cc4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8004cc8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004ccc:	f240 7150 	movw	r1, #1872	; 0x750
 8004cd0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004cd4:	f017 fff8 	bl	801ccc8 <TIM_ICInit>

        TIM_ITConfig(TIM16, TIM_IT_CC1, ENABLE);
 8004cd8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8004cdc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004ce0:	f04f 0102 	mov.w	r1, #2
 8004ce4:	f04f 0201 	mov.w	r2, #1
 8004ce8:	f018 fa2e 	bl	801d148 <TIM_ITConfig>
        TIM_Cmd(TIM16, ENABLE);
 8004cec:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8004cf0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004cf4:	f04f 0101 	mov.w	r1, #1
 8004cf8:	f017 f862 	bl	801bdc0 <TIM_Cmd>
 8004cfc:	e26d      	b.n	80051da <rxInit+0x68e>
    }

    ///////////////////////////////////

    else if (eepromConfig.receiverType == PARALLEL_PWM)
 8004cfe:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8004d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d06:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	f040 81c4 	bne.w	8005098 <rxInit+0x54c>
    	// RX5  TIM2_CH3  PB10
    	// RX6  TIM2_CH4  PB11
    	// RX7  TIM3_CH1  PC6
    	// RX8  TIM3_CH2  PA4

		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8004d10:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004d14:	f04f 0101 	mov.w	r1, #1
 8004d18:	f015 ff52 	bl	801abc0 <RCC_AHBPeriphClockCmd>
        RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8004d1c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004d20:	f04f 0101 	mov.w	r1, #1
 8004d24:	f015 ff4c 	bl	801abc0 <RCC_AHBPeriphClockCmd>
        RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8004d28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004d2c:	f04f 0101 	mov.w	r1, #1
 8004d30:	f015 ff46 	bl	801abc0 <RCC_AHBPeriphClockCmd>

        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,  ENABLE);
 8004d34:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004d38:	f04f 0101 	mov.w	r1, #1
 8004d3c:	f015 ff66 	bl	801ac0c <RCC_APB2PeriphClockCmd>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,  ENABLE);
 8004d40:	f04f 0001 	mov.w	r0, #1
 8004d44:	f04f 0101 	mov.w	r1, #1
 8004d48:	f015 ff86 	bl	801ac58 <RCC_APB1PeriphClockCmd>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,  ENABLE);
 8004d4c:	f04f 0002 	mov.w	r0, #2
 8004d50:	f04f 0101 	mov.w	r1, #1
 8004d54:	f015 ff80 	bl	801ac58 <RCC_APB1PeriphClockCmd>
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM16, ENABLE);
 8004d58:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004d5c:	f04f 0101 	mov.w	r1, #1
 8004d60:	f015 ff54 	bl	801ac0c <RCC_APB2PeriphClockCmd>

        // preset channels to center
        for (i = 0; i < 8; i++)
 8004d64:	f641 1379 	movw	r3, #6521	; 0x1979
 8004d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	e020      	b.n	8004db6 <rxInit+0x26a>
            Inputs[i].pulseWidth = RX_PULSE_1p5MS;
 8004d74:	f641 1379 	movw	r3, #6521	; 0x1979
 8004d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	f240 7220 	movw	r2, #1824	; 0x720
 8004d84:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004d88:	460b      	mov	r3, r1
 8004d8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d8e:	185b      	adds	r3, r3, r1
 8004d90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d94:	18d3      	adds	r3, r2, r3
 8004d96:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004d9a:	809a      	strh	r2, [r3, #4]
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,  ENABLE);
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,  ENABLE);
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM16, ENABLE);

        // preset channels to center
        for (i = 0; i < 8; i++)
 8004d9c:	f641 1379 	movw	r3, #6521	; 0x1979
 8004da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	f103 0301 	add.w	r3, r3, #1
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	f641 1379 	movw	r3, #6521	; 0x1979
 8004db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	f641 1379 	movw	r3, #6521	; 0x1979
 8004dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b07      	cmp	r3, #7
 8004dc2:	d9d7      	bls.n	8004d74 <rxInit+0x228>
            Inputs[i].pulseWidth = RX_PULSE_1p5MS;

        GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_1 | GPIO_Pin_4 | GPIO_Pin_8 | GPIO_Pin_9;
 8004dc4:	f240 3312 	movw	r3, #786	; 0x312
 8004dc8:	930a      	str	r3, [sp, #40]	; 0x28
        GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8004dca:	f04f 0302 	mov.w	r3, #2
 8004dce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004dd2:	f04f 0303 	mov.w	r3, #3
 8004dd6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 8004de2:	f04f 0302 	mov.w	r3, #2
 8004de6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

	    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dee:	ab0a      	add	r3, sp, #40	; 0x28
 8004df0:	4619      	mov	r1, r3
 8004df2:	f014 f9d1 	bl	8019198 <GPIO_Init>

        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_11;
 8004df6:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 8004dfa:	930a      	str	r3, [sp, #40]	; 0x28

        GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004dfc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004e00:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8004e04:	ab0a      	add	r3, sp, #40	; 0x28
 8004e06:	4619      	mov	r1, r3
 8004e08:	f014 f9c6 	bl	8019198 <GPIO_Init>

        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8004e0c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004e10:	930a      	str	r3, [sp, #40]	; 0x28

        GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004e12:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004e16:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8004e1a:	ab0a      	add	r3, sp, #40	; 0x28
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	f014 f9bb 	bl	8019198 <GPIO_Init>

    	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1,  GPIO_AF_1);
 8004e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e26:	f04f 0101 	mov.w	r1, #1
 8004e2a:	f04f 0201 	mov.w	r2, #1
 8004e2e:	f014 fb1b 	bl	8019468 <GPIO_PinAFConfig>
	    GPIO_PinAFConfig(GPIOA, GPIO_PinSource4,  GPIO_AF_2);
 8004e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e36:	f04f 0104 	mov.w	r1, #4
 8004e3a:	f04f 0202 	mov.w	r2, #2
 8004e3e:	f014 fb13 	bl	8019468 <GPIO_PinAFConfig>
	    GPIO_PinAFConfig(GPIOA, GPIO_PinSource8,  GPIO_AF_11);
 8004e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e46:	f04f 0108 	mov.w	r1, #8
 8004e4a:	f04f 020b 	mov.w	r2, #11
 8004e4e:	f014 fb0b 	bl	8019468 <GPIO_PinAFConfig>
	    GPIO_PinAFConfig(GPIOA, GPIO_PinSource9,  GPIO_AF_11);
 8004e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e56:	f04f 0109 	mov.w	r1, #9
 8004e5a:	f04f 020b 	mov.w	r2, #11
 8004e5e:	f014 fb03 	bl	8019468 <GPIO_PinAFConfig>

        GPIO_PinAFConfig(GPIOB, GPIO_PinSource8,  GPIO_AF_4);
 8004e62:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004e66:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8004e6a:	f04f 0108 	mov.w	r1, #8
 8004e6e:	f04f 0204 	mov.w	r2, #4
 8004e72:	f014 faf9 	bl	8019468 <GPIO_PinAFConfig>
        GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_1);
 8004e76:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004e7a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8004e7e:	f04f 010a 	mov.w	r1, #10
 8004e82:	f04f 0201 	mov.w	r2, #1
 8004e86:	f014 faef 	bl	8019468 <GPIO_PinAFConfig>
        GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_1);
 8004e8a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004e8e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8004e92:	f04f 010b 	mov.w	r1, #11
 8004e96:	f04f 0201 	mov.w	r2, #1
 8004e9a:	f014 fae5 	bl	8019468 <GPIO_PinAFConfig>

        GPIO_PinAFConfig(GPIOC, GPIO_PinSource6,  GPIO_AF_2);
 8004e9e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004ea2:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8004ea6:	f04f 0106 	mov.w	r1, #6
 8004eaa:	f04f 0202 	mov.w	r2, #2
 8004eae:	f014 fadb 	bl	8019468 <GPIO_PinAFConfig>

        // Input timers on TIM1, TIM2, TIM3, and TIM16 for PWM
          NVIC_InitStructure.NVIC_IRQChannel                   = TIM1_CC_IRQn;
 8004eb2:	f04f 031b 	mov.w	r3, #27
 8004eb6:	f88d 3018 	strb.w	r3, [sp, #24]
          NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 8004eba:	f04f 0302 	mov.w	r3, #2
 8004ebe:	f88d 3019 	strb.w	r3, [sp, #25]
	      NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 0;
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	f88d 301a 	strb.w	r3, [sp, #26]
          NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
 8004eca:	f04f 0301 	mov.w	r3, #1
 8004ece:	f88d 301b 	strb.w	r3, [sp, #27]

          NVIC_Init(&NVIC_InitStructure);
 8004ed2:	ab06      	add	r3, sp, #24
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f014 ffab 	bl	8019e30 <NVIC_Init>

          NVIC_InitStructure.NVIC_IRQChannel                   = TIM2_IRQn;
 8004eda:	f04f 031c 	mov.w	r3, #28
 8004ede:	f88d 3018 	strb.w	r3, [sp, #24]
        //NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
        //NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 0;
        //NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;

        NVIC_Init(&NVIC_InitStructure);
 8004ee2:	ab06      	add	r3, sp, #24
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f014 ffa3 	bl	8019e30 <NVIC_Init>

          NVIC_InitStructure.NVIC_IRQChannel                   = TIM3_IRQn;
 8004eea:	f04f 031d 	mov.w	r3, #29
 8004eee:	f88d 3018 	strb.w	r3, [sp, #24]
        //NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
	    //NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 0;
        //NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;

        NVIC_Init(&NVIC_InitStructure);
 8004ef2:	ab06      	add	r3, sp, #24
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f014 ff9b 	bl	8019e30 <NVIC_Init>

          NVIC_InitStructure.NVIC_IRQChannel                   = TIM1_UP_TIM16_IRQn;
 8004efa:	f04f 0319 	mov.w	r3, #25
 8004efe:	f88d 3018 	strb.w	r3, [sp, #24]
        //NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
	    //NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 0;
        //NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;

        NVIC_Init(&NVIC_InitStructure);
 8004f02:	ab06      	add	r3, sp, #24
 8004f04:	4618      	mov	r0, r3
 8004f06:	f014 ff93 	bl	8019e30 <NVIC_Init>

        // TIM1, TIM2, TIM3 and TIM16 timebase
          TIM_TimeBaseStructure.TIM_Prescaler         = 36 - 1;
 8004f0a:	f04f 0323 	mov.w	r3, #35	; 0x23
 8004f0e:	f8ad 301c 	strh.w	r3, [sp, #28]
        //TIM_TimeBaseStructure.TIM_CounterMode       = TIM_CounterMode_Up;
          TIM_TimeBaseStructure.TIM_Period            = 0xFFFF;
 8004f12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f16:	9308      	str	r3, [sp, #32]
        //TIM_TimeBaseStructure.TIM_ClockDivision     = TIM_CKD_DIV1;
        //TIM_TimeBaseStructure.TIM_RepetitionCounter = 0x0000;

        TIM_TimeBaseInit(TIM1,  &TIM_TimeBaseStructure);
 8004f18:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8004f1c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004f20:	ab07      	add	r3, sp, #28
 8004f22:	4619      	mov	r1, r3
 8004f24:	f016 fdb4 	bl	801ba90 <TIM_TimeBaseInit>
        TIM_TimeBaseInit(TIM2,  &TIM_TimeBaseStructure);
 8004f28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004f2c:	ab07      	add	r3, sp, #28
 8004f2e:	4619      	mov	r1, r3
 8004f30:	f016 fdae 	bl	801ba90 <TIM_TimeBaseInit>
        TIM_TimeBaseInit(TIM3,  &TIM_TimeBaseStructure);
 8004f34:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004f38:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004f3c:	ab07      	add	r3, sp, #28
 8004f3e:	4619      	mov	r1, r3
 8004f40:	f016 fda6 	bl	801ba90 <TIM_TimeBaseInit>
        TIM_TimeBaseInit(TIM16, &TIM_TimeBaseStructure);
 8004f44:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8004f48:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004f4c:	ab07      	add	r3, sp, #28
 8004f4e:	4619      	mov	r1, r3
 8004f50:	f016 fd9e 	bl	801ba90 <TIM_TimeBaseInit>

        // Parallel PWM Input capture
        //TIM_ICInitStructure.TIM_Channel     = TIM_Channel_1;
          TIM_ICInitStructure.TIM_ICPolarity  = TIM_ICPolarity_Rising;
 8004f54:	f240 7350 	movw	r3, #1872	; 0x750
 8004f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	805a      	strh	r2, [r3, #2]
          TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 8004f62:	f240 7350 	movw	r3, #1872	; 0x750
 8004f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f6a:	f04f 0201 	mov.w	r2, #1
 8004f6e:	809a      	strh	r2, [r3, #4]
          TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8004f70:	f240 7350 	movw	r3, #1872	; 0x750
 8004f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	80da      	strh	r2, [r3, #6]
          TIM_ICInitStructure.TIM_ICFilter    = 0x00;
 8004f7e:	f240 7350 	movw	r3, #1872	; 0x750
 8004f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	811a      	strh	r2, [r3, #8]

        for (i = 0; i < 8; i++)
 8004f8c:	f641 1379 	movw	r3, #6521	; 0x1979
 8004f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	e031      	b.n	8005000 <rxInit+0x4b4>
        {
            TIM_ICInitStructure.TIM_Channel = Channels[i].channel;
 8004f9c:	f641 1379 	movw	r3, #6521	; 0x1979
 8004fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	f240 0238 	movw	r2, #56	; 0x38
 8004faa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004fae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004fb2:	18d3      	adds	r3, r2, r3
 8004fb4:	889a      	ldrh	r2, [r3, #4]
 8004fb6:	f240 7350 	movw	r3, #1872	; 0x750
 8004fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004fbe:	801a      	strh	r2, [r3, #0]
            TIM_ICInit(Channels[i].tim, &TIM_ICInitStructure);
 8004fc0:	f641 1379 	movw	r3, #6521	; 0x1979
 8004fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f240 0338 	movw	r3, #56	; 0x38
 8004fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004fd4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f240 7150 	movw	r1, #1872	; 0x750
 8004fde:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004fe2:	f017 fe71 	bl	801ccc8 <TIM_ICInit>
          TIM_ICInitStructure.TIM_ICPolarity  = TIM_ICPolarity_Rising;
          TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
          TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
          TIM_ICInitStructure.TIM_ICFilter    = 0x00;

        for (i = 0; i < 8; i++)
 8004fe6:	f641 1379 	movw	r3, #6521	; 0x1979
 8004fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	f103 0301 	add.w	r3, r3, #1
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	f641 1379 	movw	r3, #6521	; 0x1979
 8004ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	f641 1379 	movw	r3, #6521	; 0x1979
 8005004:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b07      	cmp	r3, #7
 800500c:	d9c6      	bls.n	8004f9c <rxInit+0x450>
        {
            TIM_ICInitStructure.TIM_Channel = Channels[i].channel;
            TIM_ICInit(Channels[i].tim, &TIM_ICInitStructure);
        }

        TIM_ITConfig(TIM1,  TIM_IT_CC1 | TIM_IT_CC2, ENABLE);
 800500e:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8005012:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005016:	f04f 0106 	mov.w	r1, #6
 800501a:	f04f 0201 	mov.w	r2, #1
 800501e:	f018 f893 	bl	801d148 <TIM_ITConfig>
        TIM_ITConfig(TIM2,  TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4, ENABLE);
 8005022:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005026:	f04f 011c 	mov.w	r1, #28
 800502a:	f04f 0201 	mov.w	r2, #1
 800502e:	f018 f88b 	bl	801d148 <TIM_ITConfig>
        TIM_ITConfig(TIM3,  TIM_IT_CC1 | TIM_IT_CC2, ENABLE);
 8005032:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005036:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800503a:	f04f 0106 	mov.w	r1, #6
 800503e:	f04f 0201 	mov.w	r2, #1
 8005042:	f018 f881 	bl	801d148 <TIM_ITConfig>
        TIM_ITConfig(TIM16, TIM_IT_CC1, ENABLE);
 8005046:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800504a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800504e:	f04f 0102 	mov.w	r1, #2
 8005052:	f04f 0201 	mov.w	r2, #1
 8005056:	f018 f877 	bl	801d148 <TIM_ITConfig>

        TIM_Cmd(TIM1,  ENABLE);
 800505a:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800505e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005062:	f04f 0101 	mov.w	r1, #1
 8005066:	f016 feab 	bl	801bdc0 <TIM_Cmd>
        TIM_Cmd(TIM2,  ENABLE);
 800506a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800506e:	f04f 0101 	mov.w	r1, #1
 8005072:	f016 fea5 	bl	801bdc0 <TIM_Cmd>
        TIM_Cmd(TIM3,  ENABLE);
 8005076:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800507a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800507e:	f04f 0101 	mov.w	r1, #1
 8005082:	f016 fe9d 	bl	801bdc0 <TIM_Cmd>
        TIM_Cmd(TIM16, ENABLE);
 8005086:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800508a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800508e:	f04f 0101 	mov.w	r1, #1
 8005092:	f016 fe95 	bl	801bdc0 <TIM_Cmd>
 8005096:	e0a0      	b.n	80051da <rxInit+0x68e>
	}

	///////////////////////////////////

	else if (eepromConfig.receiverType == SPEKTRUM)
 8005098:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800509c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80050a0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	f040 8098 	bne.w	80051da <rxInit+0x68e>
	{
        // Spektrum Satellite RX Input
    	// USART3 RX PD9

        RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 80050aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80050ae:	f04f 0101 	mov.w	r1, #1
 80050b2:	f015 fd85 	bl	801abc0 <RCC_AHBPeriphClockCmd>

        RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 80050b6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80050ba:	f04f 0101 	mov.w	r1, #1
 80050be:	f015 fdcb 	bl	801ac58 <RCC_APB1PeriphClockCmd>

        NVIC_InitStructure.NVIC_IRQChannel                   = USART3_IRQn;
 80050c2:	f04f 0327 	mov.w	r3, #39	; 0x27
 80050c6:	f88d 3018 	strb.w	r3, [sp, #24]
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 80050ca:	f04f 0302 	mov.w	r3, #2
 80050ce:	f88d 3019 	strb.w	r3, [sp, #25]
        NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 0;
 80050d2:	f04f 0300 	mov.w	r3, #0
 80050d6:	f88d 301a 	strb.w	r3, [sp, #26]
        NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
 80050da:	f04f 0301 	mov.w	r3, #1
 80050de:	f88d 301b 	strb.w	r3, [sp, #27]
        NVIC_Init(&NVIC_InitStructure);
 80050e2:	ab06      	add	r3, sp, #24
 80050e4:	4618      	mov	r0, r3
 80050e6:	f014 fea3 	bl	8019e30 <NVIC_Init>

        GPIO_PinAFConfig(SPEKTRUM_UART_GPIO, SPEKTRUM_UART_PINSOURCE, GPIO_AF_7);
 80050ea:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80050ee:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80050f2:	f04f 0109 	mov.w	r1, #9
 80050f6:	f04f 0207 	mov.w	r2, #7
 80050fa:	f014 f9b5 	bl	8019468 <GPIO_PinAFConfig>

        GPIO_InitStructure.GPIO_Pin   = SPEKTRUM_UART_PIN;
 80050fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005102:	930a      	str	r3, [sp, #40]	; 0x28
        GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8005104:	f04f 0302 	mov.w	r3, #2
 8005108:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800510c:	f04f 0303 	mov.w	r3, #3
 8005110:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 800511c:	f04f 0301 	mov.w	r3, #1
 8005120:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

        GPIO_Init(SPEKTRUM_UART_GPIO, &GPIO_InitStructure);
 8005124:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005128:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800512c:	ab0a      	add	r3, sp, #40	; 0x28
 800512e:	4619      	mov	r1, r3
 8005130:	f014 f832 	bl	8019198 <GPIO_Init>

    	USART_InitStructure.USART_BaudRate            = 115200;
 8005134:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005138:	9300      	str	r3, [sp, #0]
        USART_InitStructure.USART_WordLength          = USART_WordLength_8b;
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	9301      	str	r3, [sp, #4]
        USART_InitStructure.USART_StopBits            = USART_StopBits_1;
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	9302      	str	r3, [sp, #8]
        USART_InitStructure.USART_Parity              = USART_Parity_No;
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	9303      	str	r3, [sp, #12]
        USART_InitStructure.USART_Mode                = USART_Mode_Rx;
 800514c:	f04f 0304 	mov.w	r3, #4
 8005150:	9304      	str	r3, [sp, #16]
        USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	9305      	str	r3, [sp, #20]

        USART_Init(USART3, &USART_InitStructure);
 8005158:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800515c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8005160:	466b      	mov	r3, sp
 8005162:	4619      	mov	r1, r3
 8005164:	f018 fc54 	bl	801da10 <USART_Init>

        USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 8005168:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800516c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8005170:	f240 1105 	movw	r1, #261	; 0x105
 8005174:	f2c0 0105 	movt	r1, #5
 8005178:	f04f 0201 	mov.w	r2, #1
 800517c:	f019 f890 	bl	801e2a0 <USART_ITConfig>
        USART_Cmd(USART3, ENABLE);
 8005180:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8005184:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8005188:	f04f 0101 	mov.w	r1, #1
 800518c:	f018 fd54 	bl	801dc38 <USART_Cmd>

        ///////////////////////////////

        if (eepromConfig.spektrumHires)
 8005190:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8005194:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005198:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00e      	beq.n	80051be <rxInit+0x672>
        {
		    // 11 bit frames
		    spektrumChannelShift = 3;
 80051a0:	f641 137b 	movw	r3, #6523	; 0x197b
 80051a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80051a8:	f04f 0203 	mov.w	r2, #3
 80051ac:	701a      	strb	r2, [r3, #0]
		    spektrumChannelMask  = 0x07;
 80051ae:	f641 1378 	movw	r3, #6520	; 0x1978
 80051b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80051b6:	f04f 0207 	mov.w	r2, #7
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	e00d      	b.n	80051da <rxInit+0x68e>
		}
		else
		{
		    // 10 bit frames
		    spektrumChannelShift = 2;
 80051be:	f641 137b 	movw	r3, #6523	; 0x197b
 80051c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80051c6:	f04f 0202 	mov.w	r2, #2
 80051ca:	701a      	strb	r2, [r3, #0]
		    spektrumChannelMask  = 0x03;
 80051cc:	f641 1378 	movw	r3, #6520	; 0x1978
 80051d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80051d4:	f04f 0203 	mov.w	r2, #3
 80051d8:	701a      	strb	r2, [r3, #0]

        ///////////////////////////////
	}

	///////////////////////////////////
}
 80051da:	b00d      	add	sp, #52	; 0x34
 80051dc:	bd00      	pop	{pc}
 80051de:	bf00      	nop

080051e0 <rxRead>:
///////////////////////////////////////////////////////////////////////////////
// Receiver Read
///////////////////////////////////////////////////////////////////////////////

uint16_t rxRead(uint8_t channel)
{
 80051e0:	b084      	sub	sp, #16
 80051e2:	4603      	mov	r3, r0
 80051e4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint16_t data;

    if (eepromConfig.receiverType == SPEKTRUM)
 80051e8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80051ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80051f0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d137      	bne.n	8005268 <rxRead+0x88>
    {
        if (channel >= eepromConfig.spektrumChannels)
 80051f8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80051fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005200:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8005204:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005208:	429a      	cmp	r2, r3
 800520a:	d304      	bcc.n	8005216 <rxRead+0x36>
    	{
    	    data = MINCOMMAND;
 800520c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005210:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005214:	e025      	b.n	8005262 <rxRead+0x82>
    	}
       	else
       	{
       	    if (eepromConfig.spektrumHires)
 8005216:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800521a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800521e:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00d      	beq.n	8005242 <rxRead+0x62>
       	        data = 1000 + spektrumChannelData[channel];         // 2048 mode
 8005226:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800522a:	f641 1390 	movw	r3, #6544	; 0x1990
 800522e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005236:	b29b      	uxth	r3, r3
 8005238:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800523c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005240:	e00f      	b.n	8005262 <rxRead+0x82>
       	    else
       	        data = (1000 + spektrumChannelData[channel]) << 1;  // 1024 mode
 8005242:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005246:	f641 1390 	movw	r3, #6544	; 0x1990
 800524a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800524e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8005258:	b29b      	uxth	r3, r3
 800525a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800525e:	f8ad 300e 	strh.w	r3, [sp, #14]
       	}
        return data;
 8005262:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8005266:	e00d      	b.n	8005284 <rxRead+0xa4>
    }
    else
    {
        return Inputs[channel].pulseWidth;
 8005268:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800526c:	f240 7220 	movw	r2, #1824	; 0x720
 8005270:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005274:	460b      	mov	r3, r1
 8005276:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800527a:	185b      	adds	r3, r3, r1
 800527c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005280:	18d3      	adds	r3, r2, r3
 8005282:	889b      	ldrh	r3, [r3, #4]
    }
}
 8005284:	4618      	mov	r0, r3
 8005286:	b004      	add	sp, #16
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop

0800528c <checkSpektrumBind>:
///////////////////////////////////////////////////////////////////////////////
// Check Spektrum Bind
///////////////////////////////////////////////////////////////////////////////

void checkSpektrumBind()
{
 800528c:	b500      	push	{lr}
 800528e:	b085      	sub	sp, #20

	GPIO_InitTypeDef  GPIO_InitStructure;

	uint8_t i;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8005290:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005294:	f04f 0101 	mov.w	r1, #1
 8005298:	f015 fc92 	bl	801abc0 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 800529c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80052a0:	f04f 0101 	mov.w	r1, #1
 80052a4:	f015 fc8c 	bl	801abc0 <RCC_AHBPeriphClockCmd>

    ///////////////////////////////

    // Configure bind pin as input
    GPIO_InitStructure.GPIO_Pin   = SPEKTRUM_BIND_PIN;
 80052a8:	f04f 0302 	mov.w	r3, #2
 80052ac:	9301      	str	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;
 80052ae:	f04f 0300 	mov.w	r3, #0
 80052b2:	f88d 3008 	strb.w	r3, [sp, #8]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80052b6:	f04f 0303 	mov.w	r3, #3
 80052ba:	f88d 3009 	strb.w	r3, [sp, #9]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	f88d 300a 	strb.w	r3, [sp, #10]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 80052c6:	f04f 0301 	mov.w	r3, #1
 80052ca:	f88d 300b 	strb.w	r3, [sp, #11]

    GPIO_Init(SPEKTRUM_BIND_GPIO, &GPIO_InitStructure);
 80052ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80052d2:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80052d6:	ab01      	add	r3, sp, #4
 80052d8:	4619      	mov	r1, r3
 80052da:	f013 ff5d 	bl	8019198 <GPIO_Init>

    // Check bind pin state, if high (true), return without binding
    if (GPIO_ReadInputDataBit(SPEKTRUM_BIND_GPIO, SPEKTRUM_BIND_PIN) == true)
 80052de:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80052e2:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80052e6:	f04f 0102 	mov.w	r1, #2
 80052ea:	f014 f831 	bl	8019350 <GPIO_ReadInputDataBit>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d06b      	beq.n	80053cc <checkSpektrumBind+0x140>
    	return;

    if (eepromConfig.spektrumChannels <= 7)
 80052f4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80052f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80052fc:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8005300:	2b07      	cmp	r3, #7
 8005302:	d807      	bhi.n	8005314 <checkSpektrumBind+0x88>
        spektrumBindCount = 3;  // Master receiver with 7 or less channels
 8005304:	f641 137a 	movw	r3, #6522	; 0x197a
 8005308:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800530c:	f04f 0203 	mov.w	r2, #3
 8005310:	701a      	strb	r2, [r3, #0]
 8005312:	e006      	b.n	8005322 <checkSpektrumBind+0x96>
    else
        spektrumBindCount = 5;  // Master receiver with 8 or more channels
 8005314:	f641 137a 	movw	r3, #6522	; 0x197a
 8005318:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800531c:	f04f 0205 	mov.w	r2, #5
 8005320:	701a      	strb	r2, [r3, #0]

    // Configure UART pin as output
    GPIO_InitStructure.GPIO_Pin   = SPEKTRUM_UART_PIN;
 8005322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005326:	9301      	str	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 8005328:	f04f 0301 	mov.w	r3, #1
 800532c:	f88d 3008 	strb.w	r3, [sp, #8]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005330:	f04f 0303 	mov.w	r3, #3
 8005334:	f88d 3009 	strb.w	r3, [sp, #9]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	f88d 300a 	strb.w	r3, [sp, #10]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	f88d 300b 	strb.w	r3, [sp, #11]

    GPIO_Init(SPEKTRUM_UART_GPIO, &GPIO_InitStructure);
 8005348:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800534c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8005350:	ab01      	add	r3, sp, #4
 8005352:	4619      	mov	r1, r3
 8005354:	f013 ff20 	bl	8019198 <GPIO_Init>

    GPIO_WriteBit(SPEKTRUM_UART_GPIO, SPEKTRUM_UART_PIN, Bit_SET);
 8005358:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800535c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8005360:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005364:	f04f 0201 	mov.w	r2, #1
 8005368:	f014 f85a 	bl	8019420 <GPIO_WriteBit>

    delay(60);
 800536c:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8005370:	f000 fec0 	bl	80060f4 <delay>

    for (i = 0; i < 3; i++)
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	f88d 300f 	strb.w	r3, [sp, #15]
 800537c:	e021      	b.n	80053c2 <checkSpektrumBind+0x136>
    {
	    GPIO_WriteBit(SPEKTRUM_UART_GPIO, SPEKTRUM_UART_PIN, Bit_RESET);
 800537e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005382:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8005386:	f44f 7100 	mov.w	r1, #512	; 0x200
 800538a:	f04f 0200 	mov.w	r2, #0
 800538e:	f014 f847 	bl	8019420 <GPIO_WriteBit>
	    delayMicroseconds(120);
 8005392:	f04f 0078 	mov.w	r0, #120	; 0x78
 8005396:	f000 fe73 	bl	8006080 <delayMicroseconds>
		GPIO_WriteBit(SPEKTRUM_UART_GPIO, SPEKTRUM_UART_PIN, Bit_SET  );
 800539a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800539e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80053a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053a6:	f04f 0201 	mov.w	r2, #1
 80053aa:	f014 f839 	bl	8019420 <GPIO_WriteBit>
        delayMicroseconds(120);
 80053ae:	f04f 0078 	mov.w	r0, #120	; 0x78
 80053b2:	f000 fe65 	bl	8006080 <delayMicroseconds>

    GPIO_WriteBit(SPEKTRUM_UART_GPIO, SPEKTRUM_UART_PIN, Bit_SET);

    delay(60);

    for (i = 0; i < 3; i++)
 80053b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80053ba:	f103 0301 	add.w	r3, r3, #1
 80053be:	f88d 300f 	strb.w	r3, [sp, #15]
 80053c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d9d9      	bls.n	800537e <checkSpektrumBind+0xf2>
 80053ca:	e000      	b.n	80053ce <checkSpektrumBind+0x142>

    GPIO_Init(SPEKTRUM_BIND_GPIO, &GPIO_InitStructure);

    // Check bind pin state, if high (true), return without binding
    if (GPIO_ReadInputDataBit(SPEKTRUM_BIND_GPIO, SPEKTRUM_BIND_PIN) == true)
    	return;
 80053cc:	bf00      	nop
	    GPIO_WriteBit(SPEKTRUM_UART_GPIO, SPEKTRUM_UART_PIN, Bit_RESET);
	    delayMicroseconds(120);
		GPIO_WriteBit(SPEKTRUM_UART_GPIO, SPEKTRUM_UART_PIN, Bit_SET  );
        delayMicroseconds(120);
	}
}
 80053ce:	b005      	add	sp, #20
 80053d0:	bd00      	pop	{pc}
 80053d2:	bf00      	nop

080053d4 <spiInit>:
///////////////////////////////////////////////////////////////////////////////
// SPI Initialize
///////////////////////////////////////////////////////////////////////////////

void spiInit(SPI_TypeDef *SPIx)
{
 80053d4:	b500      	push	{lr}
 80053d6:	b08b      	sub	sp, #44	; 0x2c
 80053d8:	9001      	str	r0, [sp, #4]
    GPIO_InitTypeDef GPIO_InitStructure;
    SPI_InitTypeDef  SPI_InitStructure;

    ///////////////////////////////////

    if (SPIx == SPI1)
 80053da:	9a01      	ldr	r2, [sp, #4]
 80053dc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80053e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80053e4:	429a      	cmp	r2, r3
 80053e6:	f040 80a8 	bne.w	800553a <spiInit+0x166>
    {
    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80053ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80053ee:	f04f 0101 	mov.w	r1, #1
 80053f2:	f015 fc0b 	bl	801ac0c <RCC_APB2PeriphClockCmd>
    	RCC_AHBPeriphClockCmd(SPI1_SCK_CLK | SPI1_MISO_CLK | SPI1_MOSI_CLK, ENABLE);
 80053f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80053fa:	f04f 0101 	mov.w	r1, #1
 80053fe:	f015 fbdf 	bl	801abc0 <RCC_AHBPeriphClockCmd>

    	GPIO_PinAFConfig(SPI1_GPIO, SPI1_SCK_PIN_SOURCE,  GPIO_AF_5);
 8005402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005406:	f04f 0105 	mov.w	r1, #5
 800540a:	f04f 0205 	mov.w	r2, #5
 800540e:	f014 f82b 	bl	8019468 <GPIO_PinAFConfig>
	    GPIO_PinAFConfig(SPI1_GPIO, SPI1_MISO_PIN_SOURCE, GPIO_AF_5);
 8005412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005416:	f04f 0106 	mov.w	r1, #6
 800541a:	f04f 0205 	mov.w	r2, #5
 800541e:	f014 f823 	bl	8019468 <GPIO_PinAFConfig>
	    GPIO_PinAFConfig(SPI1_GPIO, SPI1_MOSI_PIN_SOURCE, GPIO_AF_5);
 8005422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005426:	f04f 0107 	mov.w	r1, #7
 800542a:	f04f 0205 	mov.w	r2, #5
 800542e:	f014 f81b 	bl	8019468 <GPIO_PinAFConfig>

	    // Init pins
        GPIO_InitStructure.GPIO_Pin   = SPI1_SCK_PIN | SPI1_MISO_PIN | SPI1_MOSI_PIN;
 8005432:	f04f 03e0 	mov.w	r3, #224	; 0xe0
 8005436:	9308      	str	r3, [sp, #32]
        GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8005438:	f04f 0302 	mov.w	r3, #2
 800543c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005440:	f04f 0303 	mov.w	r3, #3
 8005444:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

        GPIO_Init(SPI1_GPIO, &GPIO_InitStructure);
 8005458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800545c:	ab08      	add	r3, sp, #32
 800545e:	4619      	mov	r1, r3
 8005460:	f013 fe9a 	bl	8019198 <GPIO_Init>

	    RCC_AHBPeriphClockCmd(L3GD20_CS_GPIO_CLK, ENABLE);
 8005464:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005468:	f04f 0101 	mov.w	r1, #1
 800546c:	f015 fba8 	bl	801abc0 <RCC_AHBPeriphClockCmd>

	    GPIO_InitStructure.GPIO_Pin   = L3GD20_CS_PIN;
 8005470:	f04f 0308 	mov.w	r3, #8
 8005474:	9308      	str	r3, [sp, #32]
		GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 8005476:	f04f 0301 	mov.w	r3, #1
 800547a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800547e:	f04f 0303 	mov.w	r3, #3
 8005482:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800548e:	f04f 0300 	mov.w	r3, #0
 8005492:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

		GPIO_Init(L3GD20_CS_GPIO, &GPIO_InitStructure);
 8005496:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800549a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800549e:	ab08      	add	r3, sp, #32
 80054a0:	4619      	mov	r1, r3
 80054a2:	f013 fe79 	bl	8019198 <GPIO_Init>

		GPIO_SetBits(L3GD20_CS_GPIO, L3GD20_CS_PIN);
 80054a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80054aa:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80054ae:	f04f 0108 	mov.w	r1, #8
 80054b2:	f013 ff9d 	bl	80193f0 <GPIO_SetBits>

		SPI_I2S_DeInit(SPI1);
 80054b6:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80054ba:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80054be:	f015 fd23 	bl	801af08 <SPI_I2S_DeInit>

        SPI_InitStructure.SPI_Direction         = SPI_Direction_2Lines_FullDuplex;
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	f8ad 300c 	strh.w	r3, [sp, #12]
        SPI_InitStructure.SPI_Mode              = SPI_Mode_Master;
 80054ca:	f44f 7382 	mov.w	r3, #260	; 0x104
 80054ce:	f8ad 300e 	strh.w	r3, [sp, #14]
        SPI_InitStructure.SPI_DataSize          = SPI_DataSize_8b;
 80054d2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80054d6:	f8ad 3010 	strh.w	r3, [sp, #16]
        SPI_InitStructure.SPI_CPOL              = SPI_CPOL_Low;
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	f8ad 3012 	strh.w	r3, [sp, #18]
        SPI_InitStructure.SPI_CPHA              = SPI_CPHA_1Edge;
 80054e2:	f04f 0300 	mov.w	r3, #0
 80054e6:	f8ad 3014 	strh.w	r3, [sp, #20]
        SPI_InitStructure.SPI_NSS               = SPI_NSS_Soft;
 80054ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054ee:	f8ad 3016 	strh.w	r3, [sp, #22]
        SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 80054f2:	f04f 0310 	mov.w	r3, #16
 80054f6:	f8ad 3018 	strh.w	r3, [sp, #24]
        SPI_InitStructure.SPI_FirstBit          = SPI_FirstBit_MSB;
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	f8ad 301a 	strh.w	r3, [sp, #26]
        SPI_InitStructure.SPI_CRCPolynomial     = 7;
 8005502:	f04f 0307 	mov.w	r3, #7
 8005506:	f8ad 301c 	strh.w	r3, [sp, #28]

        SPI_Init(SPI1, &SPI_InitStructure);
 800550a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800550e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005512:	ab03      	add	r3, sp, #12
 8005514:	4619      	mov	r1, r3
 8005516:	f015 fd5f 	bl	801afd8 <SPI_Init>

        SPI_RxFIFOThresholdConfig(L3GD20_SPI, SPI_RxFIFOThreshold_QF);
 800551a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800551e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005522:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005526:	f015 ff59 	bl	801b3dc <SPI_RxFIFOThresholdConfig>

        SPI_Cmd(SPI1, ENABLE);
 800552a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800552e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005532:	f04f 0101 	mov.w	r1, #1
 8005536:	f015 fedd 	bl	801b2f4 <SPI_Cmd>
    }

    ///////////////////////////////////

    if (SPIx == SPI2)
 800553a:	9a01      	ldr	r2, [sp, #4]
 800553c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005540:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005544:	429a      	cmp	r2, r3
 8005546:	d144      	bne.n	80055d2 <spiInit+0x1fe>
    {
    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8005548:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800554c:	f04f 0101 	mov.w	r1, #1
 8005550:	f015 fb82 	bl	801ac58 <RCC_APB1PeriphClockCmd>
    	RCC_AHBPeriphClockCmd(SPI2_SCK_CLK | SPI2_MISO_CLK | SPI2_MOSI_CLK, ENABLE);
 8005554:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005558:	f04f 0101 	mov.w	r1, #1
 800555c:	f015 fb30 	bl	801abc0 <RCC_AHBPeriphClockCmd>

        GPIO_PinAFConfig(SPI2_GPIO, SPI2_SCK_PIN_SOURCE,  GPIO_AF_6);
 8005560:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005564:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8005568:	f04f 010d 	mov.w	r1, #13
 800556c:	f04f 0206 	mov.w	r2, #6
 8005570:	f013 ff7a 	bl	8019468 <GPIO_PinAFConfig>
	    GPIO_PinAFConfig(SPI2_GPIO, SPI2_MISO_PIN_SOURCE, GPIO_AF_6);
 8005574:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005578:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800557c:	f04f 010e 	mov.w	r1, #14
 8005580:	f04f 0206 	mov.w	r2, #6
 8005584:	f013 ff70 	bl	8019468 <GPIO_PinAFConfig>
	    GPIO_PinAFConfig(SPI2_GPIO, SPI2_MOSI_PIN_SOURCE, GPIO_AF_6);
 8005588:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800558c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8005590:	f04f 010f 	mov.w	r1, #15
 8005594:	f04f 0206 	mov.w	r2, #6
 8005598:	f013 ff66 	bl	8019468 <GPIO_PinAFConfig>

	    // Init pins
        GPIO_InitStructure.GPIO_Pin   = SPI2_SCK_PIN | SPI2_MISO_PIN | SPI2_MOSI_PIN;
 800559c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80055a0:	9308      	str	r3, [sp, #32]
        GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 80055a2:	f04f 0302 	mov.w	r3, #2
 80055a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80055aa:	f04f 0303 	mov.w	r3, #3
 80055ae:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80055b2:	f04f 0300 	mov.w	r3, #0
 80055b6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80055ba:	f04f 0300 	mov.w	r3, #0
 80055be:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

        GPIO_Init(SPI2_GPIO, &GPIO_InitStructure);
 80055c2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80055c6:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80055ca:	ab08      	add	r3, sp, #32
 80055cc:	4619      	mov	r1, r3
 80055ce:	f013 fde3 	bl	8019198 <GPIO_Init>
    }

    ///////////////////////////////////
}
 80055d2:	b00b      	add	sp, #44	; 0x2c
 80055d4:	bd00      	pop	{pc}
 80055d6:	bf00      	nop

080055d8 <spiTimeoutUserCallback>:
///////////////////////////////////////////////////////////////////////////////
// SPI Timeout Callback
///////////////////////////////////////////////////////////////////////////////

uint32_t spiTimeoutUserCallback(SPI_TypeDef *SPIx)
{
 80055d8:	b500      	push	{lr}
 80055da:	b083      	sub	sp, #12
 80055dc:	9001      	str	r0, [sp, #4]
	GPIO_SetBits(RED_N_LED_GPIO, RED_N_LED_PIN);
 80055de:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80055e2:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80055e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055ea:	f013 ff01 	bl	80193f0 <GPIO_SetBits>

	if (SPIx == SPI1)
 80055ee:	9a01      	ldr	r2, [sp, #4]
 80055f0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80055f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d114      	bne.n	8005626 <spiTimeoutUserCallback+0x4e>
	{
		spi1ErrorCount++;
 80055fc:	f240 7364 	movw	r3, #1892	; 0x764
 8005600:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	b29b      	uxth	r3, r3
 8005608:	f103 0301 	add.w	r3, r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	f240 7364 	movw	r3, #1892	; 0x764
 8005612:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005616:	801a      	strh	r2, [r3, #0]
		return spi1ErrorCount;
 8005618:	f240 7364 	movw	r3, #1892	; 0x764
 800561c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	b29b      	uxth	r3, r3
 8005624:	e013      	b.n	800564e <spiTimeoutUserCallback+0x76>
	}
	else
	{
		spi2ErrorCount++;
 8005626:	f240 7366 	movw	r3, #1894	; 0x766
 800562a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	f103 0301 	add.w	r3, r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	f240 7366 	movw	r3, #1894	; 0x766
 800563c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005640:	801a      	strh	r2, [r3, #0]
		return spi2ErrorCount;
 8005642:	f240 7366 	movw	r3, #1894	; 0x766
 8005646:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	b29b      	uxth	r3, r3
	}
}
 800564e:	4618      	mov	r0, r3
 8005650:	b003      	add	sp, #12
 8005652:	bd00      	pop	{pc}

08005654 <spiTransfer>:
///////////////////////////////////////////////////////////////////////////////
// SPI Transfer
///////////////////////////////////////////////////////////////////////////////

uint8_t spiTransfer(SPI_TypeDef *SPIx, uint8_t data)
{
 8005654:	b500      	push	{lr}
 8005656:	b085      	sub	sp, #20
 8005658:	9001      	str	r0, [sp, #4]
 800565a:	460b      	mov	r3, r1
 800565c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint16_t spiTimeout;

    spiTimeout = 0x1000;
 8005660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005664:	f8ad 300e 	strh.w	r3, [sp, #14]
    while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET)
 8005668:	e014      	b.n	8005694 <spiTransfer+0x40>
      if ((spiTimeout--) == 0) return spiTimeoutUserCallback(SPIx);
 800566a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800566e:	2b00      	cmp	r3, #0
 8005670:	bf14      	ite	ne
 8005672:	2300      	movne	r3, #0
 8005674:	2301      	moveq	r3, #1
 8005676:	b2db      	uxtb	r3, r3
 8005678:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800567c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005680:	f8ad 200e 	strh.w	r2, [sp, #14]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d005      	beq.n	8005694 <spiTransfer+0x40>
 8005688:	9801      	ldr	r0, [sp, #4]
 800568a:	f7ff ffa5 	bl	80055d8 <spiTimeoutUserCallback>
 800568e:	4603      	mov	r3, r0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	e033      	b.n	80056fc <spiTransfer+0xa8>
uint8_t spiTransfer(SPI_TypeDef *SPIx, uint8_t data)
{
    uint16_t spiTimeout;

    spiTimeout = 0x1000;
    while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET)
 8005694:	9801      	ldr	r0, [sp, #4]
 8005696:	f04f 0102 	mov.w	r1, #2
 800569a:	f016 f8af 	bl	801b7fc <SPI_I2S_GetFlagStatus>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0e2      	beq.n	800566a <spiTransfer+0x16>
      if ((spiTimeout--) == 0) return spiTimeoutUserCallback(SPIx);

    SPI_SendData8(SPIx, data);
 80056a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80056a8:	9801      	ldr	r0, [sp, #4]
 80056aa:	4619      	mov	r1, r3
 80056ac:	f015 ff78 	bl	801b5a0 <SPI_SendData8>

    spiTimeout = 0x1000;
 80056b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056b4:	f8ad 300e 	strh.w	r3, [sp, #14]
    while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET)
 80056b8:	e014      	b.n	80056e4 <spiTransfer+0x90>
      if ((spiTimeout--) == 0) return spiTimeoutUserCallback(SPIx);
 80056ba:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	bf14      	ite	ne
 80056c2:	2300      	movne	r3, #0
 80056c4:	2301      	moveq	r3, #1
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80056cc:	f102 32ff 	add.w	r2, r2, #4294967295
 80056d0:	f8ad 200e 	strh.w	r2, [sp, #14]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d005      	beq.n	80056e4 <spiTransfer+0x90>
 80056d8:	9801      	ldr	r0, [sp, #4]
 80056da:	f7ff ff7d 	bl	80055d8 <spiTimeoutUserCallback>
 80056de:	4603      	mov	r3, r0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	e00b      	b.n	80056fc <spiTransfer+0xa8>
      if ((spiTimeout--) == 0) return spiTimeoutUserCallback(SPIx);

    SPI_SendData8(SPIx, data);

    spiTimeout = 0x1000;
    while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET)
 80056e4:	9801      	ldr	r0, [sp, #4]
 80056e6:	f04f 0101 	mov.w	r1, #1
 80056ea:	f016 f887 	bl	801b7fc <SPI_I2S_GetFlagStatus>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0e2      	beq.n	80056ba <spiTransfer+0x66>
      if ((spiTimeout--) == 0) return spiTimeoutUserCallback(SPIx);

    return((uint8_t)SPI_ReceiveData8(SPIx));
 80056f4:	9801      	ldr	r0, [sp, #4]
 80056f6:	f015 ff73 	bl	801b5e0 <SPI_ReceiveData8>
 80056fa:	4603      	mov	r3, r0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	b005      	add	sp, #20
 8005700:	bd00      	pop	{pc}
 8005702:	bf00      	nop

08005704 <setSPIdivisor>:
///////////////////////////////////////////////////////////////////////////////
// Set SPI Divisor
///////////////////////////////////////////////////////////////////////////////

void setSPIdivisor(SPI_TypeDef *SPIx, uint16_t data)
{
 8005704:	b500      	push	{lr}
 8005706:	b085      	sub	sp, #20
 8005708:	9001      	str	r0, [sp, #4]
 800570a:	460b      	mov	r3, r1
 800570c:	f8ad 3002 	strh.w	r3, [sp, #2]
    #define BR_CLEAR_MASK 0xFFC7

	uint16_t tempRegister;

    SPI_Cmd(SPIx, DISABLE);
 8005710:	9801      	ldr	r0, [sp, #4]
 8005712:	f04f 0100 	mov.w	r1, #0
 8005716:	f015 fded 	bl	801b2f4 <SPI_Cmd>

	tempRegister = SPIx->CR1;
 800571a:	9b01      	ldr	r3, [sp, #4]
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	f8ad 300e 	strh.w	r3, [sp, #14]

	switch (data)
 8005722:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005726:	2b10      	cmp	r3, #16
 8005728:	d036      	beq.n	8005798 <setSPIdivisor+0x94>
 800572a:	2b10      	cmp	r3, #16
 800572c:	dc06      	bgt.n	800573c <setSPIdivisor+0x38>
 800572e:	2b04      	cmp	r3, #4
 8005730:	d018      	beq.n	8005764 <setSPIdivisor+0x60>
 8005732:	2b08      	cmp	r3, #8
 8005734:	d023      	beq.n	800577e <setSPIdivisor+0x7a>
 8005736:	2b02      	cmp	r3, #2
 8005738:	d00d      	beq.n	8005756 <setSPIdivisor+0x52>
 800573a:	e06e      	b.n	800581a <setSPIdivisor+0x116>
 800573c:	2b40      	cmp	r3, #64	; 0x40
 800573e:	d045      	beq.n	80057cc <setSPIdivisor+0xc8>
 8005740:	2b40      	cmp	r3, #64	; 0x40
 8005742:	dc02      	bgt.n	800574a <setSPIdivisor+0x46>
 8005744:	2b20      	cmp	r3, #32
 8005746:	d034      	beq.n	80057b2 <setSPIdivisor+0xae>
 8005748:	e067      	b.n	800581a <setSPIdivisor+0x116>
 800574a:	2b80      	cmp	r3, #128	; 0x80
 800574c:	d04b      	beq.n	80057e6 <setSPIdivisor+0xe2>
 800574e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005752:	d055      	beq.n	8005800 <setSPIdivisor+0xfc>
 8005754:	e061      	b.n	800581a <setSPIdivisor+0x116>
	{
	case 2:
		tempRegister &= BR_CLEAR_MASK;
 8005756:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800575a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800575e:	f8ad 300e 	strh.w	r3, [sp, #14]
	    tempRegister |= SPI_BaudRatePrescaler_2;
	    break;
 8005762:	e05a      	b.n	800581a <setSPIdivisor+0x116>

	case 4:
		tempRegister &= BR_CLEAR_MASK;
 8005764:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8005768:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800576c:	f8ad 300e 	strh.w	r3, [sp, #14]
	    tempRegister |= SPI_BaudRatePrescaler_4;
 8005770:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8005774:	f043 0308 	orr.w	r3, r3, #8
 8005778:	f8ad 300e 	strh.w	r3, [sp, #14]
	    break;
 800577c:	e04d      	b.n	800581a <setSPIdivisor+0x116>

	case 8:
		tempRegister &= BR_CLEAR_MASK;
 800577e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8005782:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005786:	f8ad 300e 	strh.w	r3, [sp, #14]
	    tempRegister |= SPI_BaudRatePrescaler_8;
 800578a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800578e:	f043 0310 	orr.w	r3, r3, #16
 8005792:	f8ad 300e 	strh.w	r3, [sp, #14]
	    break;
 8005796:	e040      	b.n	800581a <setSPIdivisor+0x116>

	case 16:
		tempRegister &= BR_CLEAR_MASK;
 8005798:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800579c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80057a0:	f8ad 300e 	strh.w	r3, [sp, #14]
	    tempRegister |= SPI_BaudRatePrescaler_16;
 80057a4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80057a8:	f043 0318 	orr.w	r3, r3, #24
 80057ac:	f8ad 300e 	strh.w	r3, [sp, #14]
	    break;
 80057b0:	e033      	b.n	800581a <setSPIdivisor+0x116>

	case 32:
		tempRegister &= BR_CLEAR_MASK;
 80057b2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80057b6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80057ba:	f8ad 300e 	strh.w	r3, [sp, #14]
	    tempRegister |= SPI_BaudRatePrescaler_32;
 80057be:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80057c2:	f043 0320 	orr.w	r3, r3, #32
 80057c6:	f8ad 300e 	strh.w	r3, [sp, #14]
	    break;
 80057ca:	e026      	b.n	800581a <setSPIdivisor+0x116>

	case 64:
		tempRegister &= BR_CLEAR_MASK;
 80057cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80057d0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80057d4:	f8ad 300e 	strh.w	r3, [sp, #14]
	    tempRegister |= SPI_BaudRatePrescaler_64;
 80057d8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80057dc:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80057e0:	f8ad 300e 	strh.w	r3, [sp, #14]
	    break;
 80057e4:	e019      	b.n	800581a <setSPIdivisor+0x116>

	case 128:
		tempRegister &= BR_CLEAR_MASK;
 80057e6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80057ea:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80057ee:	f8ad 300e 	strh.w	r3, [sp, #14]
	    tempRegister |= SPI_BaudRatePrescaler_128;
 80057f2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80057f6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80057fa:	f8ad 300e 	strh.w	r3, [sp, #14]
	    break;
 80057fe:	e00c      	b.n	800581a <setSPIdivisor+0x116>

	case 256:
		tempRegister &= BR_CLEAR_MASK;
 8005800:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8005804:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005808:	f8ad 300e 	strh.w	r3, [sp, #14]
	    tempRegister |= SPI_BaudRatePrescaler_256;
 800580c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8005810:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8005814:	f8ad 300e 	strh.w	r3, [sp, #14]
	    break;
 8005818:	bf00      	nop
	}

	SPIx->CR1 = tempRegister;
 800581a:	9b01      	ldr	r3, [sp, #4]
 800581c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8005820:	801a      	strh	r2, [r3, #0]

	SPI_Cmd(SPIx, ENABLE);
 8005822:	9801      	ldr	r0, [sp, #4]
 8005824:	f04f 0101 	mov.w	r1, #1
 8005828:	f015 fd64 	bl	801b2f4 <SPI_Cmd>
}
 800582c:	b005      	add	sp, #20
 800582e:	bd00      	pop	{pc}

08005830 <spiGetErrorCounter>:
///////////////////////////////////////////////////////////////////////////////
// Get SPI Error Count
///////////////////////////////////////////////////////////////////////////////

uint16_t spiGetErrorCounter(SPI_TypeDef *SPIx)
{
 8005830:	b082      	sub	sp, #8
 8005832:	9001      	str	r0, [sp, #4]
    if (SPIx == SPI1)
 8005834:	9a01      	ldr	r2, [sp, #4]
 8005836:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800583a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800583e:	429a      	cmp	r2, r3
 8005840:	d106      	bne.n	8005850 <spiGetErrorCounter+0x20>
    	return spi1ErrorCount;
 8005842:	f240 7364 	movw	r3, #1892	; 0x764
 8005846:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b29b      	uxth	r3, r3
 800584e:	e005      	b.n	800585c <spiGetErrorCounter+0x2c>
    else
        return spi2ErrorCount;
 8005850:	f240 7366 	movw	r3, #1894	; 0x766
 8005854:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	b29b      	uxth	r3, r3
}
 800585c:	4618      	mov	r0, r3
 800585e:	b002      	add	sp, #8
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop

08005864 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005864:	b082      	sub	sp, #8
 8005866:	4603      	mov	r3, r0
 8005868:	9100      	str	r1, [sp, #0]
 800586a:	f88d 3007 	strb.w	r3, [sp, #7]
  if(IRQn < 0) {
 800586e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8005872:	2b00      	cmp	r3, #0
 8005874:	da11      	bge.n	800589a <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8005876:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800587a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800587e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005882:	f002 020f 	and.w	r2, r2, #15
 8005886:	f1a2 0104 	sub.w	r1, r2, #4
 800588a:	9a00      	ldr	r2, [sp, #0]
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	185b      	adds	r3, r3, r1
 8005896:	761a      	strb	r2, [r3, #24]
 8005898:	e00d      	b.n	80058b6 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800589a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800589e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80058a2:	f99d 1007 	ldrsb.w	r1, [sp, #7]
 80058a6:	9a00      	ldr	r2, [sp, #0]
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	185b      	adds	r3, r3, r1
 80058b2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80058b6:	b002      	add	sp, #8
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop

080058bc <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b> 
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058bc:	b500      	push	{lr}
 80058be:	b083      	sub	sp, #12
 80058c0:	9001      	str	r0, [sp, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80058c2:	9a01      	ldr	r2, [sp, #4]
 80058c4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d902      	bls.n	80058d2 <SysTick_Config+0x16>
 80058cc:	f04f 0301 	mov.w	r3, #1
 80058d0:	e01f      	b.n	8005912 <SysTick_Config+0x56>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80058d2:	f24e 0310 	movw	r3, #57360	; 0xe010
 80058d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80058da:	9a01      	ldr	r2, [sp, #4]
 80058dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80058e0:	f102 32ff 	add.w	r2, r2, #4294967295
 80058e4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80058e6:	f04f 30ff 	mov.w	r0, #4294967295
 80058ea:	f04f 010f 	mov.w	r1, #15
 80058ee:	f7ff ffb9 	bl	8005864 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80058f2:	f24e 0310 	movw	r3, #57360	; 0xe010
 80058f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005900:	f24e 0310 	movw	r3, #57360	; 0xe010
 8005904:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005908:	f04f 0207 	mov.w	r2, #7
 800590c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800590e:	f04f 0300 	mov.w	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	b003      	add	sp, #12
 8005916:	bd00      	pop	{pc}

08005918 <cycleCounterInit>:
///////////////////////////////////////////////////////////////////////////////
// Cycle Counter
///////////////////////////////////////////////////////////////////////////////

static void cycleCounterInit(void)
{
 8005918:	b500      	push	{lr}
 800591a:	b091      	sub	sp, #68	; 0x44
    RCC_ClocksTypeDef clocks;
    RCC_GetClocksFreq(&clocks);
 800591c:	ab01      	add	r3, sp, #4
 800591e:	4618      	mov	r0, r3
 8005920:	f014 fd64 	bl	801a3ec <RCC_GetClocksFreq>
    usTicks = clocks.SYSCLK_Frequency / 1000000;
 8005924:	9a01      	ldr	r2, [sp, #4]
 8005926:	f64d 6383 	movw	r3, #56963	; 0xde83
 800592a:	f2c4 331b 	movt	r3, #17179	; 0x431b
 800592e:	fba3 1302 	umull	r1, r3, r3, r2
 8005932:	ea4f 4293 	mov.w	r2, r3, lsr #18
 8005936:	f240 7368 	movw	r3, #1896	; 0x768
 800593a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800593e:	601a      	str	r2, [r3, #0]

    // enable DWT access
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005940:	f64e 53f0 	movw	r3, #60912	; 0xedf0
 8005944:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005948:	f64e 52f0 	movw	r2, #60912	; 0xedf0
 800594c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8005950:	68d2      	ldr	r2, [r2, #12]
 8005952:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005956:	60da      	str	r2, [r3, #12]
    // enable the CPU cycle counter
    DWT_CTRL |= CYCCNTENA;
 8005958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800595c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005960:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005964:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	f042 0201 	orr.w	r2, r2, #1
 800596e:	601a      	str	r2, [r3, #0]
}
 8005970:	b011      	add	sp, #68	; 0x44
 8005972:	bd00      	pop	{pc}

08005974 <SysTick_Handler>:
///////////////////////////////////////////////////////////////////////////////
// SysTick
///////////////////////////////////////////////////////////////////////////////

void SysTick_Handler(void)
{
 8005974:	b500      	push	{lr}
 8005976:	b083      	sub	sp, #12
    uint8_t index;
    uint32_t currentTime;

    sysTickCycleCounter = *DWT_CYCCNT;
 8005978:	f241 0304 	movw	r3, #4100	; 0x1004
 800597c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	f240 7370 	movw	r3, #1904	; 0x770
 8005986:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800598a:	601a      	str	r2, [r3, #0]
    sysTickUptime++;
 800598c:	f240 736c 	movw	r3, #1900	; 0x76c
 8005990:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f103 0201 	add.w	r2, r3, #1
 800599a:	f240 736c 	movw	r3, #1900	; 0x76c
 800599e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80059a2:	601a      	str	r2, [r3, #0]

    if ((systemReady       == true)  &&
 80059a4:	f240 737c 	movw	r3, #1916	; 0x77c
 80059a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	f040 822f 	bne.w	8005e12 <SysTick_Handler+0x49e>
        (cliBusy           == false) &&
 80059b4:	f240 73dc 	movw	r3, #2012	; 0x7dc
 80059b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80059bc:	781b      	ldrb	r3, [r3, #0]
    uint32_t currentTime;

    sysTickCycleCounter = *DWT_CYCCNT;
    sysTickUptime++;

    if ((systemReady       == true)  &&
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f040 8227 	bne.w	8005e12 <SysTick_Handler+0x49e>
        (cliBusy           == false) &&
        (accelCalibrating  == false) &&
 80059c4:	f240 63d0 	movw	r3, #1744	; 0x6d0
 80059c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80059cc:	781b      	ldrb	r3, [r3, #0]

    sysTickCycleCounter = *DWT_CYCCNT;
    sysTickUptime++;

    if ((systemReady       == true)  &&
        (cliBusy           == false) &&
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f040 821f 	bne.w	8005e12 <SysTick_Handler+0x49e>
        (accelCalibrating  == false) &&
        (escCalibrating    == false) &&
 80059d4:	f240 7394 	movw	r3, #1940	; 0x794
 80059d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80059dc:	781b      	ldrb	r3, [r3, #0]
    sysTickCycleCounter = *DWT_CYCCNT;
    sysTickUptime++;

    if ((systemReady       == true)  &&
        (cliBusy           == false) &&
        (accelCalibrating  == false) &&
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f040 8217 	bne.w	8005e12 <SysTick_Handler+0x49e>
        (escCalibrating    == false) &&
        (gyroCalibrating   == false) &&
 80059e4:	f240 63cc 	movw	r3, #1740	; 0x6cc
 80059e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80059ec:	781b      	ldrb	r3, [r3, #0]
    sysTickUptime++;

    if ((systemReady       == true)  &&
        (cliBusy           == false) &&
        (accelCalibrating  == false) &&
        (escCalibrating    == false) &&
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f040 820f 	bne.w	8005e12 <SysTick_Handler+0x49e>
        (gyroCalibrating   == false) &&
        (magCalibrating    == false))
 80059f4:	f240 7395 	movw	r3, #1941	; 0x795
 80059f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80059fc:	781b      	ldrb	r3, [r3, #0]

    if ((systemReady       == true)  &&
        (cliBusy           == false) &&
        (accelCalibrating  == false) &&
        (escCalibrating    == false) &&
        (gyroCalibrating   == false) &&
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f040 8207 	bne.w	8005e12 <SysTick_Handler+0x49e>
        (magCalibrating    == false))

    {
    	frameCounter++;
 8005a04:	f240 7374 	movw	r3, #1908	; 0x774
 8005a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	f103 0301 	add.w	r3, r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	f240 7374 	movw	r3, #1908	; 0x774
 8005a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a1c:	801a      	strh	r2, [r3, #0]
        if (frameCounter > FRAME_COUNT)
 8005a1e:	f240 7374 	movw	r3, #1908	; 0x774
 8005a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a2c:	d906      	bls.n	8005a3c <SysTick_Handler+0xc8>
            frameCounter = 1;
 8005a2e:	f240 7374 	movw	r3, #1908	; 0x774
 8005a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a36:	f04f 0201 	mov.w	r2, #1
 8005a3a:	801a      	strh	r2, [r3, #0]

        ///////////////////////////////

        currentTime = micros();
 8005a3c:	f000 f9ec 	bl	8005e18 <micros>
 8005a40:	9000      	str	r0, [sp, #0]
        deltaTime1000Hz = currentTime - previous1000HzTime;
 8005a42:	f641 13f8 	movw	r3, #6648	; 0x19f8
 8005a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	9a00      	ldr	r2, [sp, #0]
 8005a4e:	1ad2      	subs	r2, r2, r3
 8005a50:	f641 13d4 	movw	r3, #6612	; 0x19d4
 8005a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a58:	601a      	str	r2, [r3, #0]
        previous1000HzTime = currentTime;
 8005a5a:	f641 13f8 	movw	r3, #6648	; 0x19f8
 8005a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a62:	9a00      	ldr	r2, [sp, #0]
 8005a64:	601a      	str	r2, [r3, #0]

        readAccel();
 8005a66:	f7fa fd31 	bl	80004cc <readAccel>
        readGyro();
 8005a6a:	f7fa fc31 	bl	80002d0 <readGyro>

        accelSum500Hz[XAXIS] += rawAccel[XAXIS].value;
 8005a6e:	f240 63e0 	movw	r3, #1760	; 0x6e0
 8005a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	f640 037c 	movw	r3, #2172	; 0x87c
 8005a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b21b      	sxth	r3, r3
 8005a84:	18d2      	adds	r2, r2, r3
 8005a86:	f240 63e0 	movw	r3, #1760	; 0x6e0
 8005a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a8e:	601a      	str	r2, [r3, #0]
        accelSum500Hz[YAXIS] += rawAccel[YAXIS].value;
 8005a90:	f240 63e0 	movw	r3, #1760	; 0x6e0
 8005a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	f640 037c 	movw	r3, #2172	; 0x87c
 8005a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005aa2:	885b      	ldrh	r3, [r3, #2]
 8005aa4:	b21b      	sxth	r3, r3
 8005aa6:	18d2      	adds	r2, r2, r3
 8005aa8:	f240 63e0 	movw	r3, #1760	; 0x6e0
 8005aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ab0:	605a      	str	r2, [r3, #4]
        accelSum500Hz[ZAXIS] += rawAccel[ZAXIS].value;
 8005ab2:	f240 63e0 	movw	r3, #1760	; 0x6e0
 8005ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	f640 037c 	movw	r3, #2172	; 0x87c
 8005ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ac4:	889b      	ldrh	r3, [r3, #4]
 8005ac6:	b21b      	sxth	r3, r3
 8005ac8:	18d2      	adds	r2, r2, r3
 8005aca:	f240 63e0 	movw	r3, #1760	; 0x6e0
 8005ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ad2:	609a      	str	r2, [r3, #8]

        accelSum100Hz[XAXIS] += rawAccel[XAXIS].value;
 8005ad4:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8005ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	f640 037c 	movw	r3, #2172	; 0x87c
 8005ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b21b      	sxth	r3, r3
 8005aea:	18d2      	adds	r2, r2, r3
 8005aec:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8005af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005af4:	601a      	str	r2, [r3, #0]
        accelSum100Hz[YAXIS] += rawAccel[YAXIS].value;
 8005af6:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8005afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	f640 037c 	movw	r3, #2172	; 0x87c
 8005b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b08:	885b      	ldrh	r3, [r3, #2]
 8005b0a:	b21b      	sxth	r3, r3
 8005b0c:	18d2      	adds	r2, r2, r3
 8005b0e:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8005b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b16:	605a      	str	r2, [r3, #4]
        accelSum100Hz[ZAXIS] += rawAccel[ZAXIS].value;
 8005b18:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8005b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	f640 037c 	movw	r3, #2172	; 0x87c
 8005b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b2a:	889b      	ldrh	r3, [r3, #4]
 8005b2c:	b21b      	sxth	r3, r3
 8005b2e:	18d2      	adds	r2, r2, r3
 8005b30:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8005b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b38:	609a      	str	r2, [r3, #8]

        gyroSum500Hz[ROLL ] += rawGyro[ROLL ].value;
 8005b3a:	f240 63c0 	movw	r3, #1728	; 0x6c0
 8005b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	f640 036c 	movw	r3, #2156	; 0x86c
 8005b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	b21b      	sxth	r3, r3
 8005b50:	18d2      	adds	r2, r2, r3
 8005b52:	f240 63c0 	movw	r3, #1728	; 0x6c0
 8005b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b5a:	601a      	str	r2, [r3, #0]
        gyroSum500Hz[PITCH] += rawGyro[PITCH].value;
 8005b5c:	f240 63c0 	movw	r3, #1728	; 0x6c0
 8005b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	f640 036c 	movw	r3, #2156	; 0x86c
 8005b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b6e:	885b      	ldrh	r3, [r3, #2]
 8005b70:	b21b      	sxth	r3, r3
 8005b72:	18d2      	adds	r2, r2, r3
 8005b74:	f240 63c0 	movw	r3, #1728	; 0x6c0
 8005b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b7c:	605a      	str	r2, [r3, #4]
        gyroSum500Hz[YAW  ] += rawGyro[YAW  ].value;
 8005b7e:	f240 63c0 	movw	r3, #1728	; 0x6c0
 8005b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	f640 036c 	movw	r3, #2156	; 0x86c
 8005b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b90:	889b      	ldrh	r3, [r3, #4]
 8005b92:	b21b      	sxth	r3, r3
 8005b94:	18d2      	adds	r2, r2, r3
 8005b96:	f240 63c0 	movw	r3, #1728	; 0x6c0
 8005b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b9e:	609a      	str	r2, [r3, #8]

        ///////////////////////////////

        if ((frameCounter % COUNT_500HZ) == 0)
 8005ba0:	f240 7374 	movw	r3, #1908	; 0x774
 8005ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d149      	bne.n	8005c48 <SysTick_Handler+0x2d4>
        {
        	frame_500Hz = true;
 8005bb4:	f240 7376 	movw	r3, #1910	; 0x776
 8005bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005bbc:	f04f 0201 	mov.w	r2, #1
 8005bc0:	701a      	strb	r2, [r3, #0]

            for (index = 0; index < 3; index++)
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	f88d 3007 	strb.w	r3, [sp, #7]
 8005bca:	e039      	b.n	8005c40 <SysTick_Handler+0x2cc>
            {
            	accelSummedSamples500Hz[index] = accelSum500Hz[index];
 8005bcc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005bd0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005bd4:	f240 63e0 	movw	r3, #1760	; 0x6e0
 8005bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005bdc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005be0:	f640 039c 	movw	r3, #2204	; 0x89c
 8005be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            	accelSum500Hz[index] = 0.0f;
 8005bec:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005bf0:	f240 63e0 	movw	r3, #1760	; 0x6e0
 8005bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005bf8:	f04f 0100 	mov.w	r1, #0
 8005bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            	gyroSummedSamples500Hz[index] = gyroSum500Hz[index];
 8005c00:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005c04:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005c08:	f240 63c0 	movw	r3, #1728	; 0x6c0
 8005c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c10:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005c14:	f640 0350 	movw	r3, #2128	; 0x850
 8005c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                gyroSum500Hz[index] = 0.0f;
 8005c20:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005c24:	f240 63c0 	movw	r3, #1728	; 0x6c0
 8005c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c2c:	f04f 0100 	mov.w	r1, #0
 8005c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        if ((frameCounter % COUNT_500HZ) == 0)
        {
        	frame_500Hz = true;

            for (index = 0; index < 3; index++)
 8005c34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005c38:	f103 0301 	add.w	r3, r3, #1
 8005c3c:	f88d 3007 	strb.w	r3, [sp, #7]
 8005c40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d9c1      	bls.n	8005bcc <SysTick_Handler+0x258>
                gyroSum500Hz[index] = 0.0f;
            }
        }
        ///////////////////////////////

        if ((frameCounter % COUNT_100HZ) == 0)
 8005c48:	f240 7374 	movw	r3, #1908	; 0x774
 8005c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c50:	881a      	ldrh	r2, [r3, #0]
 8005c52:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 8005c56:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 8005c5a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c5e:	ea4f 01d3 	mov.w	r1, r3, lsr #3
 8005c62:	460b      	mov	r3, r1
 8005c64:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005c68:	185b      	adds	r3, r3, r1
 8005c6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d12f      	bne.n	8005cd6 <SysTick_Handler+0x362>
        {
        	frame_100Hz = true;
 8005c76:	f240 7377 	movw	r3, #1911	; 0x777
 8005c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c7e:	f04f 0201 	mov.w	r2, #1
 8005c82:	701a      	strb	r2, [r3, #0]

            for (index = 0; index < 3; index++)
 8005c84:	f04f 0300 	mov.w	r3, #0
 8005c88:	f88d 3007 	strb.w	r3, [sp, #7]
 8005c8c:	e01f      	b.n	8005cce <SysTick_Handler+0x35a>
            {
                accelSummedSamples100Hz[index] = accelSum100Hz[index];
 8005c8e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005c92:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005c96:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8005c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c9e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005ca2:	f640 0390 	movw	r3, #2192	; 0x890
 8005ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                accelSum100Hz[index] = 0.0f;
 8005cae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005cb2:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8005cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005cba:	f04f 0100 	mov.w	r1, #0
 8005cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        if ((frameCounter % COUNT_100HZ) == 0)
        {
        	frame_100Hz = true;

            for (index = 0; index < 3; index++)
 8005cc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005cc6:	f103 0301 	add.w	r3, r3, #1
 8005cca:	f88d 3007 	strb.w	r3, [sp, #7]
 8005cce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d9db      	bls.n	8005c8e <SysTick_Handler+0x31a>
            }
        }

        ///////////////////////////////

        if ((frameCounter % COUNT_50HZ) == 0)
 8005cd6:	f240 7374 	movw	r3, #1908	; 0x774
 8005cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005cde:	881a      	ldrh	r2, [r3, #0]
 8005ce0:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 8005ce4:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 8005ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cec:	ea4f 1113 	mov.w	r1, r3, lsr #4
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005cf6:	185b      	adds	r3, r3, r1
 8005cf8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d106      	bne.n	8005d12 <SysTick_Handler+0x39e>
        {
        	frame_50Hz = true;
 8005d04:	f240 7378 	movw	r3, #1912	; 0x778
 8005d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d0c:	f04f 0201 	mov.w	r2, #1
 8005d10:	701a      	strb	r2, [r3, #0]
        }

        ///////////////////////////////

        if (((frameCounter + 1) % COUNT_10HZ) == 0)
 8005d12:	f240 7374 	movw	r3, #1908	; 0x774
 8005d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	f103 0201 	add.w	r2, r3, #1
 8005d20:	f248 531f 	movw	r3, #34079	; 0x851f
 8005d24:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8005d28:	fb83 1302 	smull	r1, r3, r3, r2
 8005d2c:	ea4f 1163 	mov.w	r1, r3, asr #5
 8005d30:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005d34:	1acb      	subs	r3, r1, r3
 8005d36:	f04f 0164 	mov.w	r1, #100	; 0x64
 8005d3a:	fb01 f303 	mul.w	r3, r1, r3
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d108      	bne.n	8005d56 <SysTick_Handler+0x3e2>
            newMagData = readMag();
 8005d44:	f7fa fd14 	bl	8000770 <readMag>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f240 63ed 	movw	r3, #1773	; 0x6ed
 8005d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d54:	701a      	strb	r2, [r3, #0]

        if ((frameCounter % COUNT_10HZ) == 0)
 8005d56:	f240 7374 	movw	r3, #1908	; 0x774
 8005d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d5e:	881a      	ldrh	r2, [r3, #0]
 8005d60:	f248 531f 	movw	r3, #34079	; 0x851f
 8005d64:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8005d68:	fba3 1302 	umull	r1, r3, r3, r2
 8005d6c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005d70:	f04f 0164 	mov.w	r1, #100	; 0x64
 8005d74:	fb01 f303 	mul.w	r3, r1, r3
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d106      	bne.n	8005d8e <SysTick_Handler+0x41a>
        {
        	frame_10Hz = true;
 8005d80:	f240 7379 	movw	r3, #1913	; 0x779
 8005d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d88:	f04f 0201 	mov.w	r2, #1
 8005d8c:	701a      	strb	r2, [r3, #0]
        }

        ///////////////////////////////

        if ((frameCounter % COUNT_5HZ) == 0)
 8005d8e:	f240 7374 	movw	r3, #1908	; 0x774
 8005d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d96:	881a      	ldrh	r2, [r3, #0]
 8005d98:	f248 531f 	movw	r3, #34079	; 0x851f
 8005d9c:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8005da0:	fba3 1302 	umull	r1, r3, r3, r2
 8005da4:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8005da8:	f04f 01c8 	mov.w	r1, #200	; 0xc8
 8005dac:	fb01 f303 	mul.w	r3, r1, r3
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d106      	bne.n	8005dc6 <SysTick_Handler+0x452>
        {
        	frame_5Hz = true;
 8005db8:	f240 737a 	movw	r3, #1914	; 0x77a
 8005dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005dc0:	f04f 0201 	mov.w	r2, #1
 8005dc4:	701a      	strb	r2, [r3, #0]
        }

        ///////////////////////////////

        if ((frameCounter % COUNT_1HZ) == 0)
 8005dc6:	f240 7374 	movw	r3, #1908	; 0x774
 8005dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005dce:	881a      	ldrh	r2, [r3, #0]
 8005dd0:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8005dd4:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8005dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ddc:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8005de0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005de4:	fb01 f303 	mul.w	r3, r1, r3
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d106      	bne.n	8005dfe <SysTick_Handler+0x48a>
        {
        	frame_1Hz = true;
 8005df0:	f240 737b 	movw	r3, #1915	; 0x77b
 8005df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005df8:	f04f 0201 	mov.w	r2, #1
 8005dfc:	701a      	strb	r2, [r3, #0]
        }

        ///////////////////////////////////

        executionTime1000Hz = micros() - currentTime;
 8005dfe:	f000 f80b 	bl	8005e18 <micros>
 8005e02:	4602      	mov	r2, r0
 8005e04:	9b00      	ldr	r3, [sp, #0]
 8005e06:	1ad2      	subs	r2, r2, r3
 8005e08:	f641 13c4 	movw	r3, #6596	; 0x19c4
 8005e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e10:	601a      	str	r2, [r3, #0]

        ///////////////////////////////
    }
}
 8005e12:	b003      	add	sp, #12
 8005e14:	bd00      	pop	{pc}
 8005e16:	bf00      	nop

08005e18 <micros>:
///////////////////////////////////////////////////////////////////////////////
// System Time in Microseconds
///////////////////////////////////////////////////////////////////////////////

uint32_t micros(void)
{
 8005e18:	b470      	push	{r4, r5, r6}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 8005e1a:	b672      	cpsid	i
    register uint32_t oldCycle, cycle, timeMs;
    __disable_irq();
    cycle = *DWT_CYCCNT;
 8005e1c:	f241 0304 	movw	r3, #4100	; 0x1004
 8005e20:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005e24:	681d      	ldr	r5, [r3, #0]
    oldCycle = sysTickCycleCounter;
 8005e26:	f240 7370 	movw	r3, #1904	; 0x770
 8005e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e2e:	681c      	ldr	r4, [r3, #0]
    timeMs = sysTickUptime;
 8005e30:	f240 736c 	movw	r3, #1900	; 0x76c
 8005e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e38:	681e      	ldr	r6, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 8005e3a:	b662      	cpsie	i
    __enable_irq();
    return (timeMs * 1000) + (cycle - oldCycle) / usTicks;
 8005e3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e40:	fb03 f206 	mul.w	r2, r3, r6
 8005e44:	1b29      	subs	r1, r5, r4
 8005e46:	f240 7368 	movw	r3, #1896	; 0x768
 8005e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e54:	18d3      	adds	r3, r2, r3
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	bc70      	pop	{r4, r5, r6}
 8005e5a:	4770      	bx	lr

08005e5c <millis>:
// System Time in Milliseconds
///////////////////////////////////////////////////////////////////////////////

uint32_t millis(void)
{
    return sysTickUptime;
 8005e5c:	f240 736c 	movw	r3, #1900	; 0x76c
 8005e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e64:	681b      	ldr	r3, [r3, #0]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop

08005e6c <systemInit>:
///////////////////////////////////////////////////////////////////////////////
// System Initialization
///////////////////////////////////////////////////////////////////////////////

void systemInit(void)
{
 8005e6c:	b508      	push	{r3, lr}
	// Init cycle counter
    cycleCounterInit();
 8005e6e:	f7ff fd53 	bl	8005918 <cycleCounterInit>

    // SysTick
    SysTick_Config(SystemCoreClock / 1000);
 8005e72:	f240 03e0 	movw	r3, #224	; 0xe0
 8005e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8005e80:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8005e84:	fba3 1302 	umull	r1, r3, r3, r2
 8005e88:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff fd15 	bl	80058bc <SysTick_Config>

    checkFirstTime(false);
 8005e92:	f04f 0000 	mov.w	r0, #0
 8005e96:	f008 fd75 	bl	800e984 <checkFirstTime>
	readEEPROM();
 8005e9a:	f008 fcd7 	bl	800e84c <readEEPROM>

	if (eepromConfig.receiverType == SPEKTRUM)
 8005e9e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8005ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ea6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d101      	bne.n	8005eb2 <systemInit+0x46>
		checkSpektrumBind();
 8005eae:	f7ff f9ed 	bl	800528c <checkSpektrumBind>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);  // 2 bits for pre-emption priority, 2 bits for subpriority
 8005eb2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005eb6:	f013 ffad 	bl	8019e14 <NVIC_PriorityGroupConfig>

	initMixer();
 8005eba:	f00b fe1d 	bl	8011af8 <initMixer>

    ledInit();
 8005ebe:	f7fd fd35 	bl	800392c <ledInit>

    gpsInit();
 8005ec2:	f7fc fe65 	bl	8002b90 <gpsInit>
    i2cInit(I2C1);
 8005ec6:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8005eca:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8005ece:	f7fd fbf3 	bl	80036b8 <i2cInit>
    pwmEscInit(eepromConfig.escPwmRate);
 8005ed2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8005ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005eda:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fe f9ae 	bl	8004240 <pwmEscInit>
    pwmServoInit(eepromConfig.servoPwmRate);
 8005ee4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8005ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005eec:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fe fb21 	bl	8004538 <pwmServoInit>
    pwmServoInit(eepromConfig.servoPwmRate);
 8005ef6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8005efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005efe:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fe fb18 	bl	8004538 <pwmServoInit>
    rxInit();
 8005f08:	f7fe fe20 	bl	8004b4c <rxInit>
    spiInit(SPI1);
 8005f0c:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8005f10:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005f14:	f7ff fa5e 	bl	80053d4 <spiInit>
    telemetryInit();
 8005f18:	f000 f992 	bl	8006240 <telemetryInit>
    timingFunctionsInit();
 8005f1c:	f000 fb48 	bl	80065b0 <timingFunctionsInit>
    uart1Init();
 8005f20:	f000 fbe2 	bl	80066e8 <uart1Init>

    initPID();
 8005f24:	f00e fd9c 	bl	8014a60 <initPID>
    setupFourthOrder500Hz();
 8005f28:	f00a fec8 	bl	8010cbc <setupFourthOrder500Hz>
    setupFourthOrder100Hz();
 8005f2c:	f00a fdac 	bl	8010a88 <setupFourthOrder100Hz>

    RED_N_LED_ON;
 8005f30:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005f34:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8005f38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f3c:	f013 fa58 	bl	80193f0 <GPIO_SetBits>
    delay(1500);
 8005f40:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005f44:	f000 f8d6 	bl	80060f4 <delay>
    ORANGE_NE_LED_ON;
 8005f48:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005f4c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8005f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f54:	f013 fa4c 	bl	80193f0 <GPIO_SetBits>
    delay(1500);
 8005f58:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005f5c:	f000 f8ca 	bl	80060f4 <delay>
    GREEN_E_LED_ON;
 8005f60:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005f64:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8005f68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f6c:	f013 fa40 	bl	80193f0 <GPIO_SetBits>
    delay(1500);
 8005f70:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005f74:	f000 f8be 	bl	80060f4 <delay>

    initGPS();
 8005f78:	f7fb fac2 	bl	8001500 <initGPS>

    BLUE_SE_LED_ON;
 8005f7c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005f80:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8005f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f88:	f013 fa32 	bl	80193f0 <GPIO_SetBits>
    delay(1500);
 8005f8c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005f90:	f000 f8b0 	bl	80060f4 <delay>
    RED_S_LED_ON;
 8005f94:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005f98:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8005f9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fa0:	f013 fa26 	bl	80193f0 <GPIO_SetBits>
    delay(1500);
 8005fa4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005fa8:	f000 f8a4 	bl	80060f4 <delay>
    ORANGE_SW_LED_ON;
 8005fac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005fb0:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8005fb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fb8:	f013 fa1a 	bl	80193f0 <GPIO_SetBits>
    delay(1500);
 8005fbc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005fc0:	f000 f898 	bl	80060f4 <delay>
    GREEN_W_LED_ON;
 8005fc4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005fc8:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8005fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fd0:	f013 fa0e 	bl	80193f0 <GPIO_SetBits>
    delay(1500);
 8005fd4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005fd8:	f000 f88c 	bl	80060f4 <delay>
    BLUE_NW_LED_ON;
 8005fdc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005fe0:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8005fe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fe8:	f013 fa02 	bl	80193f0 <GPIO_SetBits>

    initAccel();
 8005fec:	f7fa faaa 	bl	8000544 <initAccel>
    initGyro();
 8005ff0:	f7fa f8fe 	bl	80001f0 <initGyro>
    initMag();
 8005ff4:	f7fa fbfc 	bl	80007f0 <initMag>

    initMax7456();
 8005ff8:	f7fd ff38 	bl	8003e6c <initMax7456>

    RED_N_LED_OFF;
 8005ffc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006000:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8006004:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006008:	f013 f9fe 	bl	8019408 <GPIO_ResetBits>
    ORANGE_NE_LED_OFF;
 800600c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006010:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8006014:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006018:	f013 f9f6 	bl	8019408 <GPIO_ResetBits>
    GREEN_E_LED_OFF;
 800601c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006020:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8006024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006028:	f013 f9ee 	bl	8019408 <GPIO_ResetBits>
    BLUE_SE_LED_OFF;
 800602c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006030:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8006034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006038:	f013 f9e6 	bl	8019408 <GPIO_ResetBits>
    RED_S_LED_OFF;
 800603c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006040:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8006044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006048:	f013 f9de 	bl	8019408 <GPIO_ResetBits>
    ORANGE_SW_LED_OFF;
 800604c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006050:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8006054:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006058:	f013 f9d6 	bl	8019408 <GPIO_ResetBits>
    GREEN_W_LED_OFF;
 800605c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006060:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8006064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006068:	f013 f9ce 	bl	8019408 <GPIO_ResetBits>
    BLUE_NW_LED_OFF;
 800606c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006070:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8006074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006078:	f013 f9c6 	bl	8019408 <GPIO_ResetBits>
}
 800607c:	bd08      	pop	{r3, pc}
 800607e:	bf00      	nop

08006080 <delayMicroseconds>:
///////////////////////////////////////////////////////////////////////////////
// Delay Microseconds
///////////////////////////////////////////////////////////////////////////////

void delayMicroseconds(uint32_t us)
{
 8006080:	b410      	push	{r4}
 8006082:	b087      	sub	sp, #28
 8006084:	9001      	str	r0, [sp, #4]
    uint32_t elapsed = 0;
 8006086:	f04f 0300 	mov.w	r3, #0
 800608a:	9305      	str	r3, [sp, #20]
    uint32_t lastCount = *DWT_CYCCNT;
 800608c:	f241 0304 	movw	r3, #4100	; 0x1004
 8006090:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	9304      	str	r3, [sp, #16]

    for (;;) {
        register uint32_t current_count = *DWT_CYCCNT;
 8006098:	f241 0304 	movw	r3, #4100	; 0x1004
 800609c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80060a0:	681c      	ldr	r4, [r3, #0]
        uint32_t elapsed_us;

        // measure the time elapsed since the last time we checked
        elapsed += current_count - lastCount;
 80060a2:	9b04      	ldr	r3, [sp, #16]
 80060a4:	1ae3      	subs	r3, r4, r3
 80060a6:	9a05      	ldr	r2, [sp, #20]
 80060a8:	18d3      	adds	r3, r2, r3
 80060aa:	9305      	str	r3, [sp, #20]
        lastCount = current_count;
 80060ac:	9404      	str	r4, [sp, #16]

        // convert to microseconds
        elapsed_us = elapsed / usTicks;
 80060ae:	f240 7368 	movw	r3, #1896	; 0x768
 80060b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	9a05      	ldr	r2, [sp, #20]
 80060ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80060be:	9303      	str	r3, [sp, #12]
        if (elapsed_us >= us)
 80060c0:	9a03      	ldr	r2, [sp, #12]
 80060c2:	9b01      	ldr	r3, [sp, #4]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d210      	bcs.n	80060ea <delayMicroseconds+0x6a>
            break;

        // reduce the delay by the elapsed time
        us -= elapsed_us;
 80060c8:	9a01      	ldr	r2, [sp, #4]
 80060ca:	9b03      	ldr	r3, [sp, #12]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	9301      	str	r3, [sp, #4]

        // keep fractional microseconds for the next iteration
        elapsed %= usTicks;
 80060d0:	f240 7368 	movw	r3, #1896	; 0x768
 80060d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	9b05      	ldr	r3, [sp, #20]
 80060dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80060e0:	fb02 f201 	mul.w	r2, r2, r1
 80060e4:	1a9b      	subs	r3, r3, r2
 80060e6:	9305      	str	r3, [sp, #20]
    }
 80060e8:	e7d6      	b.n	8006098 <delayMicroseconds+0x18>
        lastCount = current_count;

        // convert to microseconds
        elapsed_us = elapsed / usTicks;
        if (elapsed_us >= us)
            break;
 80060ea:	bf00      	nop
        us -= elapsed_us;

        // keep fractional microseconds for the next iteration
        elapsed %= usTicks;
    }
}
 80060ec:	b007      	add	sp, #28
 80060ee:	bc10      	pop	{r4}
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop

080060f4 <delay>:
///////////////////////////////////////////////////////////////////////////////
// Delay Milliseconds
///////////////////////////////////////////////////////////////////////////////

void delay(uint32_t ms)
{
 80060f4:	b500      	push	{lr}
 80060f6:	b083      	sub	sp, #12
 80060f8:	9001      	str	r0, [sp, #4]
    while (ms--)
 80060fa:	e003      	b.n	8006104 <delay+0x10>
        delayMicroseconds(1000);
 80060fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006100:	f7ff ffbe 	bl	8006080 <delayMicroseconds>
// Delay Milliseconds
///////////////////////////////////////////////////////////////////////////////

void delay(uint32_t ms)
{
    while (ms--)
 8006104:	9b01      	ldr	r3, [sp, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	bf0c      	ite	eq
 800610a:	2300      	moveq	r3, #0
 800610c:	2301      	movne	r3, #1
 800610e:	b2db      	uxtb	r3, r3
 8006110:	9a01      	ldr	r2, [sp, #4]
 8006112:	f102 32ff 	add.w	r2, r2, #4294967295
 8006116:	9201      	str	r2, [sp, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1ef      	bne.n	80060fc <delay+0x8>
        delayMicroseconds(1000);
}
 800611c:	b003      	add	sp, #12
 800611e:	bd00      	pop	{pc}

08006120 <systemReset>:
///////////////////////////////////////////////////////////////////////////////

#define AIRCR_VECTKEY_MASK    ((uint32_t)0x05FA0000)

void systemReset(bool toBootloader)
{
 8006120:	b082      	sub	sp, #8
 8006122:	4603      	mov	r3, r0
 8006124:	f88d 3007 	strb.w	r3, [sp, #7]
    if (toBootloader)
 8006128:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d008      	beq.n	8006142 <systemReset+0x22>
    {
        // 1FFFF000 -> 20000200 -> SP
        // 1FFFF004 -> 1FFFF021 -> PC
        *((uint32_t *)0x20009FFC) = 0xDEADBEEF; // 40KB SRAM STM32F30X
 8006130:	f649 73fc 	movw	r3, #40956	; 0x9ffc
 8006134:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006138:	f64b 62ef 	movw	r2, #48879	; 0xbeef
 800613c:	f6cd 62ad 	movt	r2, #57005	; 0xdead
 8006140:	601a      	str	r2, [r3, #0]
    }

    // Generate system reset
    SCB->AIRCR = AIRCR_VECTKEY_MASK | (uint32_t) 0x04;
 8006142:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8006146:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800614a:	f04f 0204 	mov.w	r2, #4
 800614e:	f2c0 52fa 	movt	r2, #1530	; 0x5fa
 8006152:	60da      	str	r2, [r3, #12]
}
 8006154:	b002      	add	sp, #8
 8006156:	4770      	bx	lr

08006158 <uart4TxDMA>:
///////////////////////////////////////////////////////////////////////////////
// UART4 Transmit via DMA
///////////////////////////////////////////////////////////////////////////////

static void uart4TxDMA(void)
{
 8006158:	b508      	push	{r3, lr}
    DMA2_Channel5->CMAR = (uint32_t)&tx4Buffer[tx4BufferTail];
 800615a:	f44f 638b 	mov.w	r3, #1112	; 0x458
 800615e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006162:	f240 7284 	movw	r2, #1924	; 0x784
 8006166:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800616a:	8812      	ldrh	r2, [r2, #0]
 800616c:	4611      	mov	r1, r2
 800616e:	f242 2220 	movw	r2, #8736	; 0x2220
 8006172:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8006176:	188a      	adds	r2, r1, r2
 8006178:	60da      	str	r2, [r3, #12]
    if (tx4BufferHead > tx4BufferTail)
 800617a:	f240 7386 	movw	r3, #1926	; 0x786
 800617e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006182:	881a      	ldrh	r2, [r3, #0]
 8006184:	f240 7384 	movw	r3, #1924	; 0x784
 8006188:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d91b      	bls.n	80061ca <uart4TxDMA+0x72>
    {
    	DMA2_Channel5->CNDTR = tx4BufferHead - tx4BufferTail;
 8006192:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8006196:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800619a:	f240 7286 	movw	r2, #1926	; 0x786
 800619e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80061a2:	8812      	ldrh	r2, [r2, #0]
 80061a4:	4611      	mov	r1, r2
 80061a6:	f240 7284 	movw	r2, #1924	; 0x784
 80061aa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80061ae:	8812      	ldrh	r2, [r2, #0]
 80061b0:	1a8a      	subs	r2, r1, r2
 80061b2:	605a      	str	r2, [r3, #4]
	    tx4BufferTail = tx4BufferHead;
 80061b4:	f240 7386 	movw	r3, #1926	; 0x786
 80061b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80061bc:	881a      	ldrh	r2, [r3, #0]
 80061be:	f240 7384 	movw	r3, #1924	; 0x784
 80061c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80061c6:	801a      	strh	r2, [r3, #0]
 80061c8:	e012      	b.n	80061f0 <uart4TxDMA+0x98>
    }
    else
    {
    	DMA2_Channel5->CNDTR = UART4_BUFFER_SIZE - tx4BufferTail;
 80061ca:	f44f 638b 	mov.w	r3, #1112	; 0x458
 80061ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80061d2:	f240 7284 	movw	r2, #1924	; 0x784
 80061d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80061da:	8812      	ldrh	r2, [r2, #0]
 80061dc:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 80061e0:	605a      	str	r2, [r3, #4]
	    tx4BufferTail = 0;
 80061e2:	f240 7384 	movw	r3, #1924	; 0x784
 80061e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80061ea:	f04f 0200 	mov.w	r2, #0
 80061ee:	801a      	strh	r2, [r3, #0]
    }

    DMA_Cmd(DMA2_Channel5, ENABLE);
 80061f0:	f44f 608b 	mov.w	r0, #1112	; 0x458
 80061f4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80061f8:	f04f 0101 	mov.w	r1, #1
 80061fc:	f012 f834 	bl	8018268 <DMA_Cmd>
}
 8006200:	bd08      	pop	{r3, pc}
 8006202:	bf00      	nop

08006204 <DMA2_Channel5_IRQHandler>:
///////////////////////////////////////////////////////////////////////////////
// UART4 TX Complete Interrupt Handler
///////////////////////////////////////////////////////////////////////////////

void DMA2_Channel5_IRQHandler(void)
{
 8006204:	b508      	push	{r3, lr}
	DMA_ClearITPendingBit(DMA2_IT_TC5);
 8006206:	f04f 0000 	mov.w	r0, #0
 800620a:	f2c1 0002 	movt	r0, #4098	; 0x1002
 800620e:	f012 f8e7 	bl	80183e0 <DMA_ClearITPendingBit>
    DMA_Cmd(DMA2_Channel5, DISABLE);
 8006212:	f44f 608b 	mov.w	r0, #1112	; 0x458
 8006216:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800621a:	f04f 0100 	mov.w	r1, #0
 800621e:	f012 f823 	bl	8018268 <DMA_Cmd>

    if (tx4BufferHead != tx4BufferTail)
 8006222:	f240 7386 	movw	r3, #1926	; 0x786
 8006226:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800622a:	881a      	ldrh	r2, [r3, #0]
 800622c:	f240 7384 	movw	r3, #1924	; 0x784
 8006230:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d001      	beq.n	800623e <DMA2_Channel5_IRQHandler+0x3a>
	    uart4TxDMA();
 800623a:	f7ff ff8d 	bl	8006158 <uart4TxDMA>
}
 800623e:	bd08      	pop	{r3, pc}

08006240 <telemetryInit>:
///////////////////////////////////////////////////////////////////////////////
// Telemetry Initialization
///////////////////////////////////////////////////////////////////////////////

void telemetryInit(void)
{
 8006240:	b500      	push	{lr}
 8006242:	b095      	sub	sp, #84	; 0x54
    GPIO_InitTypeDef  GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    DMA_InitTypeDef   DMA_InitStructure;
    NVIC_InitTypeDef  NVIC_InitStructure;

    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,    ENABLE);
 8006244:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006248:	f04f 0101 	mov.w	r1, #1
 800624c:	f014 fcb8 	bl	801abc0 <RCC_AHBPeriphClockCmd>
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2,     ENABLE);
 8006250:	f04f 0002 	mov.w	r0, #2
 8006254:	f04f 0101 	mov.w	r1, #1
 8006258:	f014 fcb2 	bl	801abc0 <RCC_AHBPeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4,  ENABLE);
 800625c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006260:	f04f 0101 	mov.w	r1, #1
 8006264:	f014 fcf8 	bl	801ac58 <RCC_APB1PeriphClockCmd>

    GPIO_InitStructure.GPIO_Pin   = UART4_TX_PIN | UART4_RX_PIN;
 8006268:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800626c:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 800626e:	f04f 0302 	mov.w	r3, #2
 8006272:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006276:	f04f 0303 	mov.w	r3, #3
 800627a:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800627e:	f04f 0300 	mov.w	r3, #0
 8006282:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8006286:	f04f 0301 	mov.w	r3, #1
 800628a:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f

    GPIO_PinAFConfig(UART4_GPIO, UART4_TX_PINSOURCE, GPIO_AF_5);
 800628e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006292:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8006296:	f04f 010a 	mov.w	r1, #10
 800629a:	f04f 0205 	mov.w	r2, #5
 800629e:	f013 f8e3 	bl	8019468 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(UART4_GPIO, UART4_RX_PINSOURCE, GPIO_AF_5);
 80062a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80062a6:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80062aa:	f04f 010b 	mov.w	r1, #11
 80062ae:	f04f 0205 	mov.w	r2, #5
 80062b2:	f013 f8d9 	bl	8019468 <GPIO_PinAFConfig>

    GPIO_Init(UART4_GPIO, &GPIO_InitStructure);
 80062b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80062ba:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80062be:	ab12      	add	r3, sp, #72	; 0x48
 80062c0:	4619      	mov	r1, r3
 80062c2:	f012 ff69 	bl	8019198 <GPIO_Init>

    // DMA TX Interrupt
    NVIC_InitStructure.NVIC_IRQChannel                   = DMA2_Channel5_IRQn;
 80062c6:	f04f 033c 	mov.w	r3, #60	; 0x3c
 80062ca:	f88d 3000 	strb.w	r3, [sp]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 80062ce:	f04f 0301 	mov.w	r3, #1
 80062d2:	f88d 3001 	strb.w	r3, [sp, #1]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 0;
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	f88d 3002 	strb.w	r3, [sp, #2]
    NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
 80062de:	f04f 0301 	mov.w	r3, #1
 80062e2:	f88d 3003 	strb.w	r3, [sp, #3]

    NVIC_Init(&NVIC_InitStructure);
 80062e6:	466b      	mov	r3, sp
 80062e8:	4618      	mov	r0, r3
 80062ea:	f013 fda1 	bl	8019e30 <NVIC_Init>

    USART_InitStructure.USART_BaudRate            = 115200;
 80062ee:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80062f2:	930c      	str	r3, [sp, #48]	; 0x30
    USART_InitStructure.USART_WordLength          = USART_WordLength_8b;
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	930d      	str	r3, [sp, #52]	; 0x34
    USART_InitStructure.USART_StopBits            = USART_StopBits_1;
 80062fa:	f04f 0300 	mov.w	r3, #0
 80062fe:	930e      	str	r3, [sp, #56]	; 0x38
    USART_InitStructure.USART_Parity              = USART_Parity_No;
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	930f      	str	r3, [sp, #60]	; 0x3c
    USART_InitStructure.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
 8006306:	f04f 030c 	mov.w	r3, #12
 800630a:	9310      	str	r3, [sp, #64]	; 0x40
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800630c:	f04f 0300 	mov.w	r3, #0
 8006310:	9311      	str	r3, [sp, #68]	; 0x44

    USART_Init(UART4, &USART_InitStructure);
 8006312:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8006316:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800631a:	ab0c      	add	r3, sp, #48	; 0x30
 800631c:	4619      	mov	r1, r3
 800631e:	f017 fb77 	bl	801da10 <USART_Init>

    // Receive DMA into a circular buffer

    DMA_DeInit(DMA2_Channel3);
 8006322:	f44f 6086 	mov.w	r0, #1072	; 0x430
 8006326:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800632a:	f011 fe27 	bl	8017f7c <DMA_DeInit>

    DMA_InitStructure.DMA_BufferSize         = UART4_BUFFER_SIZE;
 800632e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006332:	f8ad 3010 	strh.w	r3, [sp, #16]
    DMA_InitStructure.DMA_DIR                = DMA_DIR_PeripheralSRC;
 8006336:	f04f 0300 	mov.w	r3, #0
 800633a:	9303      	str	r3, [sp, #12]
    DMA_InitStructure.DMA_M2M                = DMA_M2M_Disable;
 800633c:	f04f 0300 	mov.w	r3, #0
 8006340:	930b      	str	r3, [sp, #44]	; 0x2c
    DMA_InitStructure.DMA_MemoryBaseAddr     = (uint32_t)rx4Buffer;
 8006342:	f641 2320 	movw	r3, #6688	; 0x1a20
 8006346:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800634a:	9302      	str	r3, [sp, #8]
    DMA_InitStructure.DMA_MemoryDataSize     = DMA_MemoryDataSize_Byte;
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	9308      	str	r3, [sp, #32]
    DMA_InitStructure.DMA_MemoryInc          = DMA_MemoryInc_Enable;
 8006352:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006356:	9306      	str	r3, [sp, #24]
    DMA_InitStructure.DMA_Mode               = DMA_Mode_Circular;
 8006358:	f04f 0320 	mov.w	r3, #32
 800635c:	9309      	str	r3, [sp, #36]	; 0x24
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&UART4->RDR;
 800635e:	f644 4324 	movw	r3, #19492	; 0x4c24
 8006362:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006366:	9301      	str	r3, [sp, #4]
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	9307      	str	r3, [sp, #28]
    DMA_InitStructure.DMA_PeripheralInc      = DMA_PeripheralInc_Disable;
 800636e:	f04f 0300 	mov.w	r3, #0
 8006372:	9305      	str	r3, [sp, #20]
    DMA_InitStructure.DMA_Priority           = DMA_Priority_Medium;
 8006374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006378:	930a      	str	r3, [sp, #40]	; 0x28

    DMA_Init(DMA2_Channel3, &DMA_InitStructure);
 800637a:	f44f 6086 	mov.w	r0, #1072	; 0x430
 800637e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8006382:	ab01      	add	r3, sp, #4
 8006384:	4619      	mov	r1, r3
 8006386:	f011 ff03 	bl	8018190 <DMA_Init>

    DMA_Cmd(DMA2_Channel3, ENABLE);
 800638a:	f44f 6086 	mov.w	r0, #1072	; 0x430
 800638e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8006392:	f04f 0101 	mov.w	r1, #1
 8006396:	f011 ff67 	bl	8018268 <DMA_Cmd>

    USART_DMACmd(UART4, USART_DMAReq_Rx, ENABLE);
 800639a:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 800639e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80063a2:	f04f 0140 	mov.w	r1, #64	; 0x40
 80063a6:	f04f 0201 	mov.w	r2, #1
 80063aa:	f017 ff4b 	bl	801e244 <USART_DMACmd>

    rx4DMAPos = DMA_GetCurrDataCounter(DMA2_Channel3);
 80063ae:	f44f 6086 	mov.w	r0, #1072	; 0x430
 80063b2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80063b6:	f011 ff7d 	bl	80182b4 <DMA_GetCurrDataCounter>
 80063ba:	4603      	mov	r3, r0
 80063bc:	461a      	mov	r2, r3
 80063be:	f240 7380 	movw	r3, #1920	; 0x780
 80063c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80063c6:	601a      	str	r2, [r3, #0]

    // Transmit DMA
    DMA_DeInit(DMA2_Channel5);
 80063c8:	f44f 608b 	mov.w	r0, #1112	; 0x458
 80063cc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80063d0:	f011 fdd4 	bl	8017f7c <DMA_DeInit>

    DMA_InitStructure.DMA_BufferSize         = UART4_BUFFER_SIZE;
 80063d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063d8:	f8ad 3010 	strh.w	r3, [sp, #16]
    DMA_InitStructure.DMA_DIR                = DMA_DIR_PeripheralDST;
 80063dc:	f04f 0310 	mov.w	r3, #16
 80063e0:	9303      	str	r3, [sp, #12]
    DMA_InitStructure.DMA_M2M                = DMA_M2M_Disable;
 80063e2:	f04f 0300 	mov.w	r3, #0
 80063e6:	930b      	str	r3, [sp, #44]	; 0x2c
    DMA_InitStructure.DMA_MemoryBaseAddr     = (uint32_t)tx4Buffer;
 80063e8:	f242 2320 	movw	r3, #8736	; 0x2220
 80063ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80063f0:	9302      	str	r3, [sp, #8]
    DMA_InitStructure.DMA_MemoryDataSize     = DMA_MemoryDataSize_Byte;
 80063f2:	f04f 0300 	mov.w	r3, #0
 80063f6:	9308      	str	r3, [sp, #32]
    DMA_InitStructure.DMA_MemoryInc          = DMA_MemoryInc_Enable;
 80063f8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80063fc:	9306      	str	r3, [sp, #24]
    DMA_InitStructure.DMA_Mode               = DMA_Mode_Normal;
 80063fe:	f04f 0300 	mov.w	r3, #0
 8006402:	9309      	str	r3, [sp, #36]	; 0x24
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) &UART4->TDR;
 8006404:	f644 4328 	movw	r3, #19496	; 0x4c28
 8006408:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800640c:	9301      	str	r3, [sp, #4]
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800640e:	f04f 0300 	mov.w	r3, #0
 8006412:	9307      	str	r3, [sp, #28]
    DMA_InitStructure.DMA_PeripheralInc      = DMA_PeripheralInc_Disable;
 8006414:	f04f 0300 	mov.w	r3, #0
 8006418:	9305      	str	r3, [sp, #20]
    DMA_InitStructure.DMA_Priority           = DMA_Priority_Medium;
 800641a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800641e:	930a      	str	r3, [sp, #40]	; 0x28

    DMA_Init(DMA2_Channel5, &DMA_InitStructure);
 8006420:	f44f 608b 	mov.w	r0, #1112	; 0x458
 8006424:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8006428:	ab01      	add	r3, sp, #4
 800642a:	4619      	mov	r1, r3
 800642c:	f011 feb0 	bl	8018190 <DMA_Init>

    DMA_ITConfig(DMA2_Channel5, DMA_IT_TC, ENABLE);
 8006430:	f44f 608b 	mov.w	r0, #1112	; 0x458
 8006434:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8006438:	f04f 0102 	mov.w	r1, #2
 800643c:	f04f 0201 	mov.w	r2, #1
 8006440:	f011 ff40 	bl	80182c4 <DMA_ITConfig>

    DMA2_Channel5->CNDTR = 0;
 8006444:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8006448:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800644c:	f04f 0200 	mov.w	r2, #0
 8006450:	605a      	str	r2, [r3, #4]

    USART_DMACmd(UART4, USART_DMAReq_Tx, ENABLE);
 8006452:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8006456:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800645a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800645e:	f04f 0201 	mov.w	r2, #1
 8006462:	f017 feef 	bl	801e244 <USART_DMACmd>

    USART_Cmd(UART4, ENABLE);
 8006466:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 800646a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800646e:	f04f 0101 	mov.w	r1, #1
 8006472:	f017 fbe1 	bl	801dc38 <USART_Cmd>
}
 8006476:	b015      	add	sp, #84	; 0x54
 8006478:	bd00      	pop	{pc}
 800647a:	bf00      	nop

0800647c <telemetryAvailable>:
///////////////////////////////////////////////////////////////////////////////
// Telemetry Available
///////////////////////////////////////////////////////////////////////////////

uint16_t telemetryAvailable(void)
{
 800647c:	b508      	push	{r3, lr}
    return (DMA_GetCurrDataCounter(DMA2_Channel3) != rx4DMAPos) ? true : false;
 800647e:	f44f 6086 	mov.w	r0, #1072	; 0x430
 8006482:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8006486:	f011 ff15 	bl	80182b4 <DMA_GetCurrDataCounter>
 800648a:	4603      	mov	r3, r0
 800648c:	461a      	mov	r2, r3
 800648e:	f240 7380 	movw	r3, #1920	; 0x780
 8006492:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	429a      	cmp	r2, r3
 800649a:	bf0c      	ite	eq
 800649c:	2300      	moveq	r3, #0
 800649e:	2301      	movne	r3, #1
 80064a0:	b29b      	uxth	r3, r3
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	bd08      	pop	{r3, pc}
 80064a6:	bf00      	nop

080064a8 <telemetryRead>:
///////////////////////////////////////////////////////////////////////////////
// Telemetry Read
///////////////////////////////////////////////////////////////////////////////

uint8_t telemetryRead(void)
{
 80064a8:	b082      	sub	sp, #8
    uint8_t ch;

    ch = rx4Buffer[UART4_BUFFER_SIZE - rx4DMAPos];
 80064aa:	f240 7380 	movw	r3, #1920	; 0x780
 80064ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 80064b8:	f641 2320 	movw	r3, #6688	; 0x1a20
 80064bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80064c0:	5c9b      	ldrb	r3, [r3, r2]
 80064c2:	f88d 3007 	strb.w	r3, [sp, #7]
    // go back around the buffer
    if (--rx4DMAPos == 0)
 80064c6:	f240 7380 	movw	r3, #1920	; 0x780
 80064ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f103 32ff 	add.w	r2, r3, #4294967295
 80064d4:	f240 7380 	movw	r3, #1920	; 0x780
 80064d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	f240 7380 	movw	r3, #1920	; 0x780
 80064e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d106      	bne.n	80064fa <telemetryRead+0x52>
	    rx4DMAPos = UART4_BUFFER_SIZE;
 80064ec:	f240 7380 	movw	r3, #1920	; 0x780
 80064f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80064f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064f8:	601a      	str	r2, [r3, #0]

    return ch;
 80064fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	b002      	add	sp, #8
 8006502:	4770      	bx	lr

08006504 <telemetryReadPoll>:
///////////////////////////////////////////////////////////////////////////////
// Telemetry Read Poll
///////////////////////////////////////////////////////////////////////////////

uint8_t telemetryReadPoll(void)
{
 8006504:	b508      	push	{r3, lr}
    while (!telemetryAvailable()); // wait for some bytes
 8006506:	bf00      	nop
 8006508:	f7ff ffb8 	bl	800647c <telemetryAvailable>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0fa      	beq.n	8006508 <telemetryReadPoll+0x4>
    return telemetryRead();
 8006512:	f7ff ffc9 	bl	80064a8 <telemetryRead>
 8006516:	4603      	mov	r3, r0
}
 8006518:	4618      	mov	r0, r3
 800651a:	bd08      	pop	{r3, pc}

0800651c <telemetryWrite>:
///////////////////////////////////////////////////////////////////////////////
// Telemetry Write
///////////////////////////////////////////////////////////////////////////////

void telemetryWrite(uint8_t ch)
{
 800651c:	b500      	push	{lr}
 800651e:	b083      	sub	sp, #12
 8006520:	4603      	mov	r3, r0
 8006522:	f88d 3007 	strb.w	r3, [sp, #7]
    tx4Buffer[tx4BufferHead] = ch;
 8006526:	f240 7386 	movw	r3, #1926	; 0x786
 800652a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	f242 2320 	movw	r3, #8736	; 0x2220
 8006536:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800653a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800653e:	5499      	strb	r1, [r3, r2]
    tx4BufferHead = (tx4BufferHead + 1) % UART4_BUFFER_SIZE;
 8006540:	f240 7386 	movw	r3, #1926	; 0x786
 8006544:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	f103 0301 	add.w	r3, r3, #1
 800654e:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8006552:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8006556:	189b      	adds	r3, r3, r2
 8006558:	ea4f 5343 	mov.w	r3, r3, lsl #21
 800655c:	ea4f 5353 	mov.w	r3, r3, lsr #21
 8006560:	1a9b      	subs	r3, r3, r2
 8006562:	b29a      	uxth	r2, r3
 8006564:	f240 7386 	movw	r3, #1926	; 0x786
 8006568:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800656c:	801a      	strh	r2, [r3, #0]

    // if DMA wasn't enabled, fire it up
    if (!(DMA2_Channel5->CCR & 1))
 800656e:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8006572:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <telemetryWrite+0x68>
        uart4TxDMA();
 8006580:	f7ff fdea 	bl	8006158 <uart4TxDMA>
}
 8006584:	b003      	add	sp, #12
 8006586:	bd00      	pop	{pc}

08006588 <telemetryPrint>:
///////////////////////////////////////////////////////////////////////////////
// Telemetry Print
///////////////////////////////////////////////////////////////////////////////

void telemetryPrint(char *str)
{
 8006588:	b500      	push	{lr}
 800658a:	b083      	sub	sp, #12
 800658c:	9001      	str	r0, [sp, #4]
    while (*str)
 800658e:	e008      	b.n	80065a2 <telemetryPrint+0x1a>
	    telemetryWrite(*(str++));
 8006590:	9b01      	ldr	r3, [sp, #4]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	9a01      	ldr	r2, [sp, #4]
 8006596:	f102 0201 	add.w	r2, r2, #1
 800659a:	9201      	str	r2, [sp, #4]
 800659c:	4618      	mov	r0, r3
 800659e:	f7ff ffbd 	bl	800651c <telemetryWrite>
// Telemetry Print
///////////////////////////////////////////////////////////////////////////////

void telemetryPrint(char *str)
{
    while (*str)
 80065a2:	9b01      	ldr	r3, [sp, #4]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1f2      	bne.n	8006590 <telemetryPrint+0x8>
	    telemetryWrite(*(str++));
}
 80065aa:	b003      	add	sp, #12
 80065ac:	bd00      	pop	{pc}
 80065ae:	bf00      	nop

080065b0 <timingFunctionsInit>:
///////////////////////////////////////////////////////////////////////////////
// Timing Functions Initialization
///////////////////////////////////////////////////////////////////////////////

void timingFunctionsInit(void)
{
 80065b0:	b500      	push	{lr}
 80065b2:	b085      	sub	sp, #20
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;

    TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 80065b4:	ab01      	add	r3, sp, #4
 80065b6:	4618      	mov	r0, r3
 80065b8:	f015 faf8 	bl	801bbac <TIM_TimeBaseStructInit>

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6,  ENABLE);
 80065bc:	f04f 0010 	mov.w	r0, #16
 80065c0:	f04f 0101 	mov.w	r1, #1
 80065c4:	f014 fb48 	bl	801ac58 <RCC_APB1PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7,  ENABLE);
 80065c8:	f04f 0020 	mov.w	r0, #32
 80065cc:	f04f 0101 	mov.w	r1, #1
 80065d0:	f014 fb42 	bl	801ac58 <RCC_APB1PeriphClockCmd>

    // Output timers

      TIM_TimeBaseStructure.TIM_Period            = 0xFFFF;              // Just roll over counter at max value
 80065d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065d8:	9302      	str	r3, [sp, #8]
      TIM_TimeBaseStructure.TIM_Prescaler         = 36 - 1;              // 72 MHz / 36 = 1 MHz = 0.5 uSec Tick
 80065da:	f04f 0323 	mov.w	r3, #35	; 0x23
 80065de:	f8ad 3004 	strh.w	r3, [sp, #4]
    //TIM_TimeBaseStructure.TIM_ClockDivision     = TIM_CKD_DIV1;
    //TIM_TimeBaseStructure.TIM_CounterMode       = TIM_CounterMode_Up;
    //TIM_TimeBaseStructure.TIM_RepititionCounter = 0x0000;

    TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 80065e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80065e6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80065ea:	ab01      	add	r3, sp, #4
 80065ec:	4619      	mov	r1, r3
 80065ee:	f015 fa4f 	bl	801ba90 <TIM_TimeBaseInit>

    TIM_Cmd(TIM6, ENABLE);
 80065f2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80065f6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80065fa:	f04f 0101 	mov.w	r1, #1
 80065fe:	f015 fbdf 	bl	801bdc0 <TIM_Cmd>
}
 8006602:	b005      	add	sp, #20
 8006604:	bd00      	pop	{pc}
 8006606:	bf00      	nop

08006608 <uart1TxDMA>:
///////////////////////////////////////////////////////////////////////////////
// UART1 Transmit via DMA
///////////////////////////////////////////////////////////////////////////////

static void uart1TxDMA(void)
{
 8006608:	b508      	push	{r3, lr}
    DMA1_Channel4->CMAR = (uint32_t) & tx1Buffer[tx1BufferTail];
 800660a:	f04f 0344 	mov.w	r3, #68	; 0x44
 800660e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006612:	f240 728c 	movw	r2, #1932	; 0x78c
 8006616:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800661a:	6811      	ldr	r1, [r2, #0]
 800661c:	f243 2220 	movw	r2, #12832	; 0x3220
 8006620:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8006624:	188a      	adds	r2, r1, r2
 8006626:	60da      	str	r2, [r3, #12]
    if (tx1BufferHead > tx1BufferTail)
 8006628:	f240 7390 	movw	r3, #1936	; 0x790
 800662c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	f240 738c 	movw	r3, #1932	; 0x78c
 8006636:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	429a      	cmp	r2, r3
 800663e:	d91a      	bls.n	8006676 <uart1TxDMA+0x6e>
    {
        DMA1_Channel4->CNDTR = tx1BufferHead - tx1BufferTail;
 8006640:	f04f 0344 	mov.w	r3, #68	; 0x44
 8006644:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006648:	f240 7290 	movw	r2, #1936	; 0x790
 800664c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8006650:	6811      	ldr	r1, [r2, #0]
 8006652:	f240 728c 	movw	r2, #1932	; 0x78c
 8006656:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800665a:	6812      	ldr	r2, [r2, #0]
 800665c:	1a8a      	subs	r2, r1, r2
 800665e:	605a      	str	r2, [r3, #4]
        tx1BufferTail = tx1BufferHead;
 8006660:	f240 7390 	movw	r3, #1936	; 0x790
 8006664:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	f240 738c 	movw	r3, #1932	; 0x78c
 800666e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	e012      	b.n	800669c <uart1TxDMA+0x94>
    }
    else
    {
        DMA1_Channel4->CNDTR = UART1_BUFFER_SIZE - tx1BufferTail;
 8006676:	f04f 0344 	mov.w	r3, #68	; 0x44
 800667a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800667e:	f240 728c 	movw	r2, #1932	; 0x78c
 8006682:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8006686:	6812      	ldr	r2, [r2, #0]
 8006688:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 800668c:	605a      	str	r2, [r3, #4]
        tx1BufferTail = 0;
 800668e:	f240 738c 	movw	r3, #1932	; 0x78c
 8006692:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006696:	f04f 0200 	mov.w	r2, #0
 800669a:	601a      	str	r2, [r3, #0]
    }

    DMA_Cmd(DMA1_Channel4, ENABLE);
 800669c:	f04f 0044 	mov.w	r0, #68	; 0x44
 80066a0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80066a4:	f04f 0101 	mov.w	r1, #1
 80066a8:	f011 fdde 	bl	8018268 <DMA_Cmd>
}
 80066ac:	bd08      	pop	{r3, pc}
 80066ae:	bf00      	nop

080066b0 <DMA1_Channel4_IRQHandler>:
///////////////////////////////////////////////////////////////////////////////
// UART1 TX Complete Interrupt Handler
///////////////////////////////////////////////////////////////////////////////

void DMA1_Channel4_IRQHandler(void)
{
 80066b0:	b508      	push	{r3, lr}
    DMA_ClearITPendingBit(DMA1_IT_TC4);
 80066b2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80066b6:	f011 fe93 	bl	80183e0 <DMA_ClearITPendingBit>
    DMA_Cmd(DMA1_Channel4, DISABLE);
 80066ba:	f04f 0044 	mov.w	r0, #68	; 0x44
 80066be:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80066c2:	f04f 0100 	mov.w	r1, #0
 80066c6:	f011 fdcf 	bl	8018268 <DMA_Cmd>

    if (tx1BufferHead != tx1BufferTail)
 80066ca:	f240 7390 	movw	r3, #1936	; 0x790
 80066ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	f240 738c 	movw	r3, #1932	; 0x78c
 80066d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d001      	beq.n	80066e6 <DMA1_Channel4_IRQHandler+0x36>
        uart1TxDMA();
 80066e2:	f7ff ff91 	bl	8006608 <uart1TxDMA>
}
 80066e6:	bd08      	pop	{r3, pc}

080066e8 <uart1Init>:
///////////////////////////////////////////////////////////////////////////////
// UART1 Initialization
///////////////////////////////////////////////////////////////////////////////

void uart1Init(void)
{
 80066e8:	b500      	push	{lr}
 80066ea:	b095      	sub	sp, #84	; 0x54
    GPIO_InitTypeDef  GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    DMA_InitTypeDef   DMA_InitStructure;
    NVIC_InitTypeDef  NVIC_InitStructure;

    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,    ENABLE);
 80066ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80066f0:	f04f 0101 	mov.w	r1, #1
 80066f4:	f014 fa64 	bl	801abc0 <RCC_AHBPeriphClockCmd>
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,     ENABLE);
 80066f8:	f04f 0001 	mov.w	r0, #1
 80066fc:	f04f 0101 	mov.w	r1, #1
 8006700:	f014 fa5e 	bl	801abc0 <RCC_AHBPeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8006704:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006708:	f04f 0101 	mov.w	r1, #1
 800670c:	f014 fa7e 	bl	801ac0c <RCC_APB2PeriphClockCmd>

    GPIO_InitStructure.GPIO_Pin   = UART1_TX_PIN | UART1_RX_PIN;
 8006710:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006714:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8006716:	f04f 0302 	mov.w	r3, #2
 800671a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800671e:	f04f 0303 	mov.w	r3, #3
 8006722:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006726:	f04f 0300 	mov.w	r3, #0
 800672a:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 800672e:	f04f 0301 	mov.w	r3, #1
 8006732:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f

    GPIO_PinAFConfig(UART1_GPIO, UART1_TX_PINSOURCE, GPIO_AF_7);
 8006736:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800673a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800673e:	f04f 0104 	mov.w	r1, #4
 8006742:	f04f 0207 	mov.w	r2, #7
 8006746:	f012 fe8f 	bl	8019468 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(UART1_GPIO, UART1_RX_PINSOURCE, GPIO_AF_7);
 800674a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800674e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8006752:	f04f 0105 	mov.w	r1, #5
 8006756:	f04f 0207 	mov.w	r2, #7
 800675a:	f012 fe85 	bl	8019468 <GPIO_PinAFConfig>

    GPIO_Init(UART1_GPIO, &GPIO_InitStructure);
 800675e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006762:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8006766:	ab12      	add	r3, sp, #72	; 0x48
 8006768:	4619      	mov	r1, r3
 800676a:	f012 fd15 	bl	8019198 <GPIO_Init>

    // DMA TX Interrupt
    NVIC_InitStructure.NVIC_IRQChannel                   = DMA1_Channel4_IRQn;
 800676e:	f04f 030e 	mov.w	r3, #14
 8006772:	f88d 3000 	strb.w	r3, [sp]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8006776:	f04f 0301 	mov.w	r3, #1
 800677a:	f88d 3001 	strb.w	r3, [sp, #1]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 1;
 800677e:	f04f 0301 	mov.w	r3, #1
 8006782:	f88d 3002 	strb.w	r3, [sp, #2]
    NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
 8006786:	f04f 0301 	mov.w	r3, #1
 800678a:	f88d 3003 	strb.w	r3, [sp, #3]

    NVIC_Init(&NVIC_InitStructure);
 800678e:	466b      	mov	r3, sp
 8006790:	4618      	mov	r0, r3
 8006792:	f013 fb4d 	bl	8019e30 <NVIC_Init>

    USART_InitStructure.USART_BaudRate            = 115200;
 8006796:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800679a:	930c      	str	r3, [sp, #48]	; 0x30
    USART_InitStructure.USART_WordLength          = USART_WordLength_8b;
 800679c:	f04f 0300 	mov.w	r3, #0
 80067a0:	930d      	str	r3, [sp, #52]	; 0x34
    USART_InitStructure.USART_StopBits            = USART_StopBits_1;
 80067a2:	f04f 0300 	mov.w	r3, #0
 80067a6:	930e      	str	r3, [sp, #56]	; 0x38
    USART_InitStructure.USART_Parity              = USART_Parity_No;
 80067a8:	f04f 0300 	mov.w	r3, #0
 80067ac:	930f      	str	r3, [sp, #60]	; 0x3c
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80067ae:	f04f 0300 	mov.w	r3, #0
 80067b2:	9311      	str	r3, [sp, #68]	; 0x44
    USART_InitStructure.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
 80067b4:	f04f 030c 	mov.w	r3, #12
 80067b8:	9310      	str	r3, [sp, #64]	; 0x40

    USART_Init(USART1, &USART_InitStructure);
 80067ba:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80067be:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80067c2:	ab0c      	add	r3, sp, #48	; 0x30
 80067c4:	4619      	mov	r1, r3
 80067c6:	f017 f923 	bl	801da10 <USART_Init>

    // Receive DMA into a circular buffer

    DMA_DeInit(DMA1_Channel5);
 80067ca:	f04f 0058 	mov.w	r0, #88	; 0x58
 80067ce:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80067d2:	f011 fbd3 	bl	8017f7c <DMA_DeInit>

    DMA_InitStructure.DMA_BufferSize         = UART1_BUFFER_SIZE;
 80067d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80067da:	f8ad 3010 	strh.w	r3, [sp, #16]
	DMA_InitStructure.DMA_DIR                = DMA_DIR_PeripheralSRC;
 80067de:	f04f 0300 	mov.w	r3, #0
 80067e2:	9303      	str	r3, [sp, #12]
	DMA_InitStructure.DMA_M2M                = DMA_M2M_Disable;
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	930b      	str	r3, [sp, #44]	; 0x2c
	DMA_InitStructure.DMA_MemoryBaseAddr     = (uint32_t)rx1Buffer;
 80067ea:	f642 2320 	movw	r3, #10784	; 0x2a20
 80067ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80067f2:	9302      	str	r3, [sp, #8]
	DMA_InitStructure.DMA_MemoryDataSize     = DMA_MemoryDataSize_Byte;
 80067f4:	f04f 0300 	mov.w	r3, #0
 80067f8:	9308      	str	r3, [sp, #32]
	DMA_InitStructure.DMA_MemoryInc          = DMA_MemoryInc_Enable;
 80067fa:	f04f 0380 	mov.w	r3, #128	; 0x80
 80067fe:	9306      	str	r3, [sp, #24]
	DMA_InitStructure.DMA_Mode               = DMA_Mode_Circular;
 8006800:	f04f 0320 	mov.w	r3, #32
 8006804:	9309      	str	r3, [sp, #36]	; 0x24
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&USART1->RDR;
 8006806:	f643 0324 	movw	r3, #14372	; 0x3824
 800680a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800680e:	9301      	str	r3, [sp, #4]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	9307      	str	r3, [sp, #28]
	DMA_InitStructure.DMA_PeripheralInc      = DMA_PeripheralInc_Disable;
 8006816:	f04f 0300 	mov.w	r3, #0
 800681a:	9305      	str	r3, [sp, #20]
    DMA_InitStructure.DMA_Priority           = DMA_Priority_Medium;
 800681c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006820:	930a      	str	r3, [sp, #40]	; 0x28

    DMA_Init(DMA1_Channel5, &DMA_InitStructure);
 8006822:	f04f 0058 	mov.w	r0, #88	; 0x58
 8006826:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800682a:	ab01      	add	r3, sp, #4
 800682c:	4619      	mov	r1, r3
 800682e:	f011 fcaf 	bl	8018190 <DMA_Init>

    DMA_Cmd(DMA1_Channel5, ENABLE);
 8006832:	f04f 0058 	mov.w	r0, #88	; 0x58
 8006836:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800683a:	f04f 0101 	mov.w	r1, #1
 800683e:	f011 fd13 	bl	8018268 <DMA_Cmd>

    USART_DMACmd(USART1, USART_DMAReq_Rx, ENABLE);
 8006842:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8006846:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800684a:	f04f 0140 	mov.w	r1, #64	; 0x40
 800684e:	f04f 0201 	mov.w	r2, #1
 8006852:	f017 fcf7 	bl	801e244 <USART_DMACmd>

    rx1DMAPos = DMA_GetCurrDataCounter(DMA1_Channel5);
 8006856:	f04f 0058 	mov.w	r0, #88	; 0x58
 800685a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800685e:	f011 fd29 	bl	80182b4 <DMA_GetCurrDataCounter>
 8006862:	4603      	mov	r3, r0
 8006864:	461a      	mov	r2, r3
 8006866:	f240 7388 	movw	r3, #1928	; 0x788
 800686a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800686e:	601a      	str	r2, [r3, #0]

    // Transmit DMA
    DMA_DeInit(DMA1_Channel4);
 8006870:	f04f 0044 	mov.w	r0, #68	; 0x44
 8006874:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8006878:	f011 fb80 	bl	8017f7c <DMA_DeInit>

    DMA_InitStructure.DMA_BufferSize         = UART1_BUFFER_SIZE;
 800687c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006880:	f8ad 3010 	strh.w	r3, [sp, #16]
	DMA_InitStructure.DMA_DIR                = DMA_DIR_PeripheralDST;
 8006884:	f04f 0310 	mov.w	r3, #16
 8006888:	9303      	str	r3, [sp, #12]
	DMA_InitStructure.DMA_M2M                = DMA_M2M_Disable;
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	930b      	str	r3, [sp, #44]	; 0x2c
	DMA_InitStructure.DMA_MemoryBaseAddr     = (uint32_t)tx1Buffer;
 8006890:	f243 2320 	movw	r3, #12832	; 0x3220
 8006894:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006898:	9302      	str	r3, [sp, #8]
	DMA_InitStructure.DMA_MemoryDataSize     = DMA_MemoryDataSize_Byte;
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	9308      	str	r3, [sp, #32]
	DMA_InitStructure.DMA_MemoryInc          = DMA_MemoryInc_Enable;
 80068a0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80068a4:	9306      	str	r3, [sp, #24]
	DMA_InitStructure.DMA_Mode               = DMA_Mode_Normal;
 80068a6:	f04f 0300 	mov.w	r3, #0
 80068aa:	9309      	str	r3, [sp, #36]	; 0x24
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) &USART1->TDR;
 80068ac:	f643 0328 	movw	r3, #14376	; 0x3828
 80068b0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80068b4:	9301      	str	r3, [sp, #4]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80068b6:	f04f 0300 	mov.w	r3, #0
 80068ba:	9307      	str	r3, [sp, #28]
	DMA_InitStructure.DMA_PeripheralInc      = DMA_PeripheralInc_Disable;
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	9305      	str	r3, [sp, #20]
    DMA_InitStructure.DMA_Priority           = DMA_Priority_Medium;
 80068c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068c6:	930a      	str	r3, [sp, #40]	; 0x28

    DMA_Init(DMA1_Channel4, &DMA_InitStructure);
 80068c8:	f04f 0044 	mov.w	r0, #68	; 0x44
 80068cc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80068d0:	ab01      	add	r3, sp, #4
 80068d2:	4619      	mov	r1, r3
 80068d4:	f011 fc5c 	bl	8018190 <DMA_Init>

    DMA_ITConfig(DMA1_Channel4, DMA_IT_TC, ENABLE);
 80068d8:	f04f 0044 	mov.w	r0, #68	; 0x44
 80068dc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80068e0:	f04f 0102 	mov.w	r1, #2
 80068e4:	f04f 0201 	mov.w	r2, #1
 80068e8:	f011 fcec 	bl	80182c4 <DMA_ITConfig>

    DMA1_Channel4->CNDTR = 0;
 80068ec:	f04f 0344 	mov.w	r3, #68	; 0x44
 80068f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	605a      	str	r2, [r3, #4]

    USART_DMACmd(USART1, USART_DMAReq_Tx, ENABLE);
 80068fa:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80068fe:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006902:	f04f 0180 	mov.w	r1, #128	; 0x80
 8006906:	f04f 0201 	mov.w	r2, #1
 800690a:	f017 fc9b 	bl	801e244 <USART_DMACmd>

    USART_Cmd(USART1, ENABLE);
 800690e:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8006912:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006916:	f04f 0101 	mov.w	r1, #1
 800691a:	f017 f98d 	bl	801dc38 <USART_Cmd>
}
 800691e:	b015      	add	sp, #84	; 0x54
 8006920:	bd00      	pop	{pc}
 8006922:	bf00      	nop

08006924 <uart1Available>:
///////////////////////////////////////////////////////////////////////////////
// UART1 Avaialble
///////////////////////////////////////////////////////////////////////////////

uint16_t uart1Available(void)
{
 8006924:	b508      	push	{r3, lr}
    return (DMA_GetCurrDataCounter(DMA1_Channel5) != rx1DMAPos) ? true : false;
 8006926:	f04f 0058 	mov.w	r0, #88	; 0x58
 800692a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800692e:	f011 fcc1 	bl	80182b4 <DMA_GetCurrDataCounter>
 8006932:	4603      	mov	r3, r0
 8006934:	461a      	mov	r2, r3
 8006936:	f240 7388 	movw	r3, #1928	; 0x788
 800693a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	bf0c      	ite	eq
 8006944:	2300      	moveq	r3, #0
 8006946:	2301      	movne	r3, #1
 8006948:	b29b      	uxth	r3, r3
}
 800694a:	4618      	mov	r0, r3
 800694c:	bd08      	pop	{r3, pc}
 800694e:	bf00      	nop

08006950 <uart1Read>:
///////////////////////////////////////////////////////////////////////////////
// UART1 Read
///////////////////////////////////////////////////////////////////////////////

uint8_t uart1Read(void)
{
 8006950:	b082      	sub	sp, #8
    uint8_t ch;

    ch = rx1Buffer[UART1_BUFFER_SIZE - rx1DMAPos];
 8006952:	f240 7388 	movw	r3, #1928	; 0x788
 8006956:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8006960:	f642 2320 	movw	r3, #10784	; 0x2a20
 8006964:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006968:	5c9b      	ldrb	r3, [r3, r2]
 800696a:	f88d 3007 	strb.w	r3, [sp, #7]
    // go back around the buffer
    if (--rx1DMAPos == 0)
 800696e:	f240 7388 	movw	r3, #1928	; 0x788
 8006972:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f103 32ff 	add.w	r2, r3, #4294967295
 800697c:	f240 7388 	movw	r3, #1928	; 0x788
 8006980:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	f240 7388 	movw	r3, #1928	; 0x788
 800698a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d106      	bne.n	80069a2 <uart1Read+0x52>
        rx1DMAPos = UART1_BUFFER_SIZE;
 8006994:	f240 7388 	movw	r3, #1928	; 0x788
 8006998:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800699c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069a0:	601a      	str	r2, [r3, #0]

    return ch;
 80069a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	b002      	add	sp, #8
 80069aa:	4770      	bx	lr

080069ac <uart1ReadPoll>:
///////////////////////////////////////////////////////////////////////////////
// UART1 Read Poll
///////////////////////////////////////////////////////////////////////////////

uint8_t uart1ReadPoll(void)
{
 80069ac:	b508      	push	{r3, lr}
    while (!uart1Available()); // wait for some bytes
 80069ae:	bf00      	nop
 80069b0:	f7ff ffb8 	bl	8006924 <uart1Available>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0fa      	beq.n	80069b0 <uart1ReadPoll+0x4>
    return uart1Read();
 80069ba:	f7ff ffc9 	bl	8006950 <uart1Read>
 80069be:	4603      	mov	r3, r0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	bd08      	pop	{r3, pc}

080069c4 <uart1Write>:
///////////////////////////////////////////////////////////////////////////////
// UART1 Write
///////////////////////////////////////////////////////////////////////////////

void uart1Write(uint8_t ch)
{
 80069c4:	b500      	push	{lr}
 80069c6:	b083      	sub	sp, #12
 80069c8:	4603      	mov	r3, r0
 80069ca:	f88d 3007 	strb.w	r3, [sp, #7]
    tx1Buffer[tx1BufferHead] = ch;
 80069ce:	f240 7390 	movw	r3, #1936	; 0x790
 80069d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	f243 2320 	movw	r3, #12832	; 0x3220
 80069dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80069e0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80069e4:	5499      	strb	r1, [r3, r2]
    tx1BufferHead = (tx1BufferHead + 1) % UART1_BUFFER_SIZE;
 80069e6:	f240 7390 	movw	r3, #1936	; 0x790
 80069ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f103 0301 	add.w	r3, r3, #1
 80069f4:	ea4f 5243 	mov.w	r2, r3, lsl #21
 80069f8:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80069fc:	f240 7390 	movw	r3, #1936	; 0x790
 8006a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006a04:	601a      	str	r2, [r3, #0]

    // if DMA wasn't enabled, fire it up
    if (!(DMA1_Channel4->CCR & 1))
 8006a06:	f04f 0344 	mov.w	r3, #68	; 0x44
 8006a0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <uart1Write+0x58>
        uart1TxDMA();
 8006a18:	f7ff fdf6 	bl	8006608 <uart1TxDMA>
}
 8006a1c:	b003      	add	sp, #12
 8006a1e:	bd00      	pop	{pc}

08006a20 <uart1Print>:
///////////////////////////////////////////////////////////////////////////////
// UART1 Print
///////////////////////////////////////////////////////////////////////////////

void uart1Print(char *str)
{
 8006a20:	b500      	push	{lr}
 8006a22:	b083      	sub	sp, #12
 8006a24:	9001      	str	r0, [sp, #4]
    while (*str)
 8006a26:	e008      	b.n	8006a3a <uart1Print+0x1a>
        uart1Write(*(str++));
 8006a28:	9b01      	ldr	r3, [sp, #4]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	9a01      	ldr	r2, [sp, #4]
 8006a2e:	f102 0201 	add.w	r2, r2, #1
 8006a32:	9201      	str	r2, [sp, #4]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7ff ffc5 	bl	80069c4 <uart1Write>
// UART1 Print
///////////////////////////////////////////////////////////////////////////////

void uart1Print(char *str)
{
    while (*str)
 8006a3a:	9b01      	ldr	r3, [sp, #4]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1f2      	bne.n	8006a28 <uart1Print+0x8>
        uart1Write(*(str++));
}
 8006a42:	b003      	add	sp, #12
 8006a44:	bd00      	pop	{pc}
 8006a46:	bf00      	nop

08006a48 <accelCalibration>:
///////////////////////////////////////////////////////////////////////////////
// Accelerometer Calibration
///////////////////////////////////////////////////////////////////////////////

void accelCalibration(void)
{
 8006a48:	b530      	push	{r4, r5, lr}
 8006a4a:	b089      	sub	sp, #36	; 0x24
    float noseUp        = 0.0f;
 8006a4c:	4bc6      	ldr	r3, [pc, #792]	; (8006d68 <accelCalibration+0x320>)
 8006a4e:	9307      	str	r3, [sp, #28]
    float noseDown      = 0.0f;
 8006a50:	4bc5      	ldr	r3, [pc, #788]	; (8006d68 <accelCalibration+0x320>)
 8006a52:	9306      	str	r3, [sp, #24]
    float leftWingDown  = 0.0f;
 8006a54:	4bc4      	ldr	r3, [pc, #784]	; (8006d68 <accelCalibration+0x320>)
 8006a56:	9305      	str	r3, [sp, #20]
    float rightWingDown = 0.0f;
 8006a58:	4bc3      	ldr	r3, [pc, #780]	; (8006d68 <accelCalibration+0x320>)
 8006a5a:	9304      	str	r3, [sp, #16]
    float upSideDown    = 0.0f;
 8006a5c:	4bc2      	ldr	r3, [pc, #776]	; (8006d68 <accelCalibration+0x320>)
 8006a5e:	9303      	str	r3, [sp, #12]
    float rightSideUp   = 0.0f;
 8006a60:	4bc1      	ldr	r3, [pc, #772]	; (8006d68 <accelCalibration+0x320>)
 8006a62:	9302      	str	r3, [sp, #8]

    int16_t index;

    accelCalibrating = true;
 8006a64:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8006a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006a6c:	f04f 0201 	mov.w	r2, #1
 8006a70:	701a      	strb	r2, [r3, #0]

    uart1Print("\nAccelerometer Calibration:\n\n");
 8006a72:	f64a 7098 	movw	r0, #44952	; 0xaf98
 8006a76:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006a7a:	f7ff ffd1 	bl	8006a20 <uart1Print>

    ///////////////////////////////////

    uart1Print("Place accelerometer right side up\n");
 8006a7e:	f64a 70b8 	movw	r0, #44984	; 0xafb8
 8006a82:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006a86:	f7ff ffcb 	bl	8006a20 <uart1Print>
    uart1Print("  Send a character when ready to proceed\n\n");
 8006a8a:	f64a 70dc 	movw	r0, #45020	; 0xafdc
 8006a8e:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006a92:	f7ff ffc5 	bl	8006a20 <uart1Print>

    while (uart1Available() == false);
 8006a96:	bf00      	nop
 8006a98:	f7ff ff44 	bl	8006924 <uart1Available>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0fa      	beq.n	8006a98 <accelCalibration+0x50>
    uart1Read();
 8006aa2:	f7ff ff55 	bl	8006950 <uart1Read>

    uart1Print("  Gathering Data...\n\n");
 8006aa6:	f24b 0008 	movw	r0, #45064	; 0xb008
 8006aaa:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006aae:	f7ff ffb7 	bl	8006a20 <uart1Print>

    for (index = 0; index < 5000; index++) {
 8006ab2:	f04f 0300 	mov.w	r3, #0
 8006ab6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8006aba:	e01b      	b.n	8006af4 <accelCalibration+0xac>
        readAccel();
 8006abc:	f7f9 fd06 	bl	80004cc <readAccel>
        rightSideUp += (float) rawAccel[ZAXIS].value;
 8006ac0:	f640 037c 	movw	r3, #2172	; 0x87c
 8006ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006ac8:	889b      	ldrh	r3, [r3, #4]
 8006aca:	b21b      	sxth	r3, r3
 8006acc:	ee07 3a10 	vmov	s14, r3
 8006ad0:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8006ad4:	ed9d 7a02 	vldr	s14, [sp, #8]
 8006ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006adc:	edcd 7a02 	vstr	s15, [sp, #8]
        delayMicroseconds(1000);
 8006ae0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ae4:	f7ff facc 	bl	8006080 <delayMicroseconds>
    while (uart1Available() == false);
    uart1Read();

    uart1Print("  Gathering Data...\n\n");

    for (index = 0; index < 5000; index++) {
 8006ae8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006aec:	f103 0301 	add.w	r3, r3, #1
 8006af0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8006af4:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8006af8:	f241 3387 	movw	r3, #4999	; 0x1387
 8006afc:	429a      	cmp	r2, r3
 8006afe:	dddd      	ble.n	8006abc <accelCalibration+0x74>
        readAccel();
        rightSideUp += (float) rawAccel[ZAXIS].value;
        delayMicroseconds(1000);
    }

    rightSideUp /= 5000.0f;
 8006b00:	ed9d 7a02 	vldr	s14, [sp, #8]
 8006b04:	eddf 7a99 	vldr	s15, [pc, #612]	; 8006d6c <accelCalibration+0x324>
 8006b08:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8006b0c:	edcd 7a02 	vstr	s15, [sp, #8]

    ftoa(rightSideUp, numberString);
 8006b10:	9802      	ldr	r0, [sp, #8]
 8006b12:	f643 3178 	movw	r1, #15224	; 0x3b78
 8006b16:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8006b1a:	f010 f891 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 8006b1e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8006b22:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006b26:	f7ff ff7b 	bl	8006a20 <uart1Print>
    uart1Print("\n\n");
 8006b2a:	f24b 0020 	movw	r0, #45088	; 0xb020
 8006b2e:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006b32:	f7ff ff75 	bl	8006a20 <uart1Print>

    uart1Print("Place accelerometer up side down\n");
 8006b36:	f24b 0024 	movw	r0, #45092	; 0xb024
 8006b3a:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006b3e:	f7ff ff6f 	bl	8006a20 <uart1Print>
    uart1Print("  Send a character when ready to proceed\n\n");
 8006b42:	f64a 70dc 	movw	r0, #45020	; 0xafdc
 8006b46:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006b4a:	f7ff ff69 	bl	8006a20 <uart1Print>

    while (uart1Available() == false);
 8006b4e:	bf00      	nop
 8006b50:	f7ff fee8 	bl	8006924 <uart1Available>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0fa      	beq.n	8006b50 <accelCalibration+0x108>
    uart1Read();
 8006b5a:	f7ff fef9 	bl	8006950 <uart1Read>

    uart1Print("  Gathering Data...\n\n");
 8006b5e:	f24b 0008 	movw	r0, #45064	; 0xb008
 8006b62:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006b66:	f7ff ff5b 	bl	8006a20 <uart1Print>

    for (index = 0; index < 5000; index++) {
 8006b6a:	f04f 0300 	mov.w	r3, #0
 8006b6e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8006b72:	e01b      	b.n	8006bac <accelCalibration+0x164>
        readAccel();
 8006b74:	f7f9 fcaa 	bl	80004cc <readAccel>
        upSideDown += (float) rawAccel[ZAXIS].value;
 8006b78:	f640 037c 	movw	r3, #2172	; 0x87c
 8006b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006b80:	889b      	ldrh	r3, [r3, #4]
 8006b82:	b21b      	sxth	r3, r3
 8006b84:	ee07 3a10 	vmov	s14, r3
 8006b88:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8006b8c:	ed9d 7a03 	vldr	s14, [sp, #12]
 8006b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b94:	edcd 7a03 	vstr	s15, [sp, #12]
        delayMicroseconds(1000);
 8006b98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b9c:	f7ff fa70 	bl	8006080 <delayMicroseconds>
    while (uart1Available() == false);
    uart1Read();

    uart1Print("  Gathering Data...\n\n");

    for (index = 0; index < 5000; index++) {
 8006ba0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006ba4:	f103 0301 	add.w	r3, r3, #1
 8006ba8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8006bac:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8006bb0:	f241 3387 	movw	r3, #4999	; 0x1387
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	dddd      	ble.n	8006b74 <accelCalibration+0x12c>
        readAccel();
        upSideDown += (float) rawAccel[ZAXIS].value;
        delayMicroseconds(1000);
    }

    upSideDown /= 5000.0f;
 8006bb8:	ed9d 7a03 	vldr	s14, [sp, #12]
 8006bbc:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8006d6c <accelCalibration+0x324>
 8006bc0:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8006bc4:	edcd 7a03 	vstr	s15, [sp, #12]

    ftoa(upSideDown, numberString);
 8006bc8:	9803      	ldr	r0, [sp, #12]
 8006bca:	f643 3178 	movw	r1, #15224	; 0x3b78
 8006bce:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8006bd2:	f010 f835 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 8006bd6:	f643 3078 	movw	r0, #15224	; 0x3b78
 8006bda:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006bde:	f7ff ff1f 	bl	8006a20 <uart1Print>
    uart1Print("\n\n");
 8006be2:	f24b 0020 	movw	r0, #45088	; 0xb020
 8006be6:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006bea:	f7ff ff19 	bl	8006a20 <uart1Print>

    eepromConfig.accelBias[ZAXIS] = (rightSideUp + upSideDown) / 2.0f;
 8006bee:	ed9d 7a02 	vldr	s14, [sp, #8]
 8006bf2:	eddd 7a03 	vldr	s15, [sp, #12]
 8006bf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006bfa:	eef0 7a00 	vmov.f32	s15, #0
 8006bfe:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8006c02:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8006c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006c0a:	edc3 7a03 	vstr	s15, [r3, #12]

    eepromConfig.accelScaleFactor[ZAXIS] = (2.0f * 9.8065f) / (fabs(rightSideUp) + fabs(upSideDown));
 8006c0e:	eddd 7a02 	vldr	s15, [sp, #8]
 8006c12:	eef0 7ae7 	vabs.f32	s15, s15
 8006c16:	ee17 0a90 	vmov	r0, s15
 8006c1a:	f019 fd87 	bl	802072c <__aeabi_f2d>
 8006c1e:	4604      	mov	r4, r0
 8006c20:	460d      	mov	r5, r1
 8006c22:	eddd 7a03 	vldr	s15, [sp, #12]
 8006c26:	eef0 7ae7 	vabs.f32	s15, s15
 8006c2a:	ee17 0a90 	vmov	r0, s15
 8006c2e:	f019 fd7d 	bl	802072c <__aeabi_f2d>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	4620      	mov	r0, r4
 8006c38:	4629      	mov	r1, r5
 8006c3a:	f019 fc19 	bl	8020470 <__adddf3>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	a147      	add	r1, pc, #284	; (adr r1, 8006d60 <accelCalibration+0x318>)
 8006c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c48:	f019 feee 	bl	8020a28 <__aeabi_ddiv>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4610      	mov	r0, r2
 8006c52:	4619      	mov	r1, r3
 8006c54:	f01a f858 	bl	8020d08 <__aeabi_d2f>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8006c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006c62:	619a      	str	r2, [r3, #24]

    ///////////////////////////////////

    uart1Print("Place accelerometer left edge down\n");
 8006c64:	f24b 0048 	movw	r0, #45128	; 0xb048
 8006c68:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006c6c:	f7ff fed8 	bl	8006a20 <uart1Print>
    uart1Print("  Send a character when ready to proceed\n\n");
 8006c70:	f64a 70dc 	movw	r0, #45020	; 0xafdc
 8006c74:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006c78:	f7ff fed2 	bl	8006a20 <uart1Print>

    while (uart1Available() == false);
 8006c7c:	bf00      	nop
 8006c7e:	f7ff fe51 	bl	8006924 <uart1Available>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0fa      	beq.n	8006c7e <accelCalibration+0x236>
    uart1Read();
 8006c88:	f7ff fe62 	bl	8006950 <uart1Read>

    uart1Print("  Gathering Data...\n\n");
 8006c8c:	f24b 0008 	movw	r0, #45064	; 0xb008
 8006c90:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006c94:	f7ff fec4 	bl	8006a20 <uart1Print>

    for (index = 0; index < 5000; index++) {
 8006c98:	f04f 0300 	mov.w	r3, #0
 8006c9c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8006ca0:	e01b      	b.n	8006cda <accelCalibration+0x292>
        readAccel();
 8006ca2:	f7f9 fc13 	bl	80004cc <readAccel>
        leftWingDown += (float) rawAccel[YAXIS].value;
 8006ca6:	f640 037c 	movw	r3, #2172	; 0x87c
 8006caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006cae:	885b      	ldrh	r3, [r3, #2]
 8006cb0:	b21b      	sxth	r3, r3
 8006cb2:	ee07 3a10 	vmov	s14, r3
 8006cb6:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8006cba:	ed9d 7a05 	vldr	s14, [sp, #20]
 8006cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cc2:	edcd 7a05 	vstr	s15, [sp, #20]
        delayMicroseconds(1000);
 8006cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cca:	f7ff f9d9 	bl	8006080 <delayMicroseconds>
    while (uart1Available() == false);
    uart1Read();

    uart1Print("  Gathering Data...\n\n");

    for (index = 0; index < 5000; index++) {
 8006cce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006cd2:	f103 0301 	add.w	r3, r3, #1
 8006cd6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8006cda:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8006cde:	f241 3387 	movw	r3, #4999	; 0x1387
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	dddd      	ble.n	8006ca2 <accelCalibration+0x25a>
        readAccel();
        leftWingDown += (float) rawAccel[YAXIS].value;
        delayMicroseconds(1000);
    }

    leftWingDown /= 5000.0f;
 8006ce6:	ed9d 7a05 	vldr	s14, [sp, #20]
 8006cea:	eddf 7a20 	vldr	s15, [pc, #128]	; 8006d6c <accelCalibration+0x324>
 8006cee:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8006cf2:	edcd 7a05 	vstr	s15, [sp, #20]

    ftoa(leftWingDown, numberString);
 8006cf6:	9805      	ldr	r0, [sp, #20]
 8006cf8:	f643 3178 	movw	r1, #15224	; 0x3b78
 8006cfc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8006d00:	f00f ff9e 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 8006d04:	f643 3078 	movw	r0, #15224	; 0x3b78
 8006d08:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006d0c:	f7ff fe88 	bl	8006a20 <uart1Print>
    uart1Print("\n\n");
 8006d10:	f24b 0020 	movw	r0, #45088	; 0xb020
 8006d14:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006d18:	f7ff fe82 	bl	8006a20 <uart1Print>

    uart1Print("Place accelerometer right edge down\n");
 8006d1c:	f24b 006c 	movw	r0, #45164	; 0xb06c
 8006d20:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006d24:	f7ff fe7c 	bl	8006a20 <uart1Print>
    uart1Print("  Send a character when ready to proceed\n\n");
 8006d28:	f64a 70dc 	movw	r0, #45020	; 0xafdc
 8006d2c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006d30:	f7ff fe76 	bl	8006a20 <uart1Print>

    while (uart1Available() == false);
 8006d34:	bf00      	nop
 8006d36:	f7ff fdf5 	bl	8006924 <uart1Available>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0fa      	beq.n	8006d36 <accelCalibration+0x2ee>
    uart1Read();
 8006d40:	f7ff fe06 	bl	8006950 <uart1Read>

    uart1Print("  Gathering Data...\n\n");
 8006d44:	f24b 0008 	movw	r0, #45064	; 0xb008
 8006d48:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006d4c:	f7ff fe68 	bl	8006a20 <uart1Print>

    for (index = 0; index < 5000; index++) {
 8006d50:	f04f 0300 	mov.w	r3, #0
 8006d54:	f8ad 3006 	strh.w	r3, [sp, #6]
 8006d58:	e026      	b.n	8006da8 <accelCalibration+0x360>
 8006d5a:	bf00      	nop
 8006d5c:	f3af 8000 	nop.w
 8006d60:	a0000000 	.word	0xa0000000
 8006d64:	40339ced 	.word	0x40339ced
 8006d68:	00000000 	.word	0x00000000
 8006d6c:	459c4000 	.word	0x459c4000
        readAccel();
 8006d70:	f7f9 fbac 	bl	80004cc <readAccel>
        rightWingDown += (float) rawAccel[YAXIS].value;
 8006d74:	f640 037c 	movw	r3, #2172	; 0x87c
 8006d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006d7c:	885b      	ldrh	r3, [r3, #2]
 8006d7e:	b21b      	sxth	r3, r3
 8006d80:	ee07 3a10 	vmov	s14, r3
 8006d84:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8006d88:	ed9d 7a04 	vldr	s14, [sp, #16]
 8006d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d90:	edcd 7a04 	vstr	s15, [sp, #16]
        delayMicroseconds(1000);
 8006d94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d98:	f7ff f972 	bl	8006080 <delayMicroseconds>
    while (uart1Available() == false);
    uart1Read();

    uart1Print("  Gathering Data...\n\n");

    for (index = 0; index < 5000; index++) {
 8006d9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006da0:	f103 0301 	add.w	r3, r3, #1
 8006da4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8006da8:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8006dac:	f241 3387 	movw	r3, #4999	; 0x1387
 8006db0:	429a      	cmp	r2, r3
 8006db2:	dddd      	ble.n	8006d70 <accelCalibration+0x328>
        readAccel();
        rightWingDown += (float) rawAccel[YAXIS].value;
        delayMicroseconds(1000);
    }

    rightWingDown /= 5000.0f;
 8006db4:	ed9d 7a04 	vldr	s14, [sp, #16]
 8006db8:	ed5f 7a14 	vldr	s15, [pc, #-80]	; 8006d6c <accelCalibration+0x324>
 8006dbc:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8006dc0:	edcd 7a04 	vstr	s15, [sp, #16]

    ftoa(rightWingDown, numberString);
 8006dc4:	9804      	ldr	r0, [sp, #16]
 8006dc6:	f643 3178 	movw	r1, #15224	; 0x3b78
 8006dca:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8006dce:	f00f ff37 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 8006dd2:	f643 3078 	movw	r0, #15224	; 0x3b78
 8006dd6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006dda:	f7ff fe21 	bl	8006a20 <uart1Print>
    uart1Print("\n\n");
 8006dde:	f24b 0020 	movw	r0, #45088	; 0xb020
 8006de2:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006de6:	f7ff fe1b 	bl	8006a20 <uart1Print>

    eepromConfig.accelBias[YAXIS] = (leftWingDown + rightWingDown) / 2.0f;
 8006dea:	ed9d 7a05 	vldr	s14, [sp, #20]
 8006dee:	eddd 7a04 	vldr	s15, [sp, #16]
 8006df2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006df6:	eef0 7a00 	vmov.f32	s15, #0
 8006dfa:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8006dfe:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8006e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006e06:	edc3 7a02 	vstr	s15, [r3, #8]

    eepromConfig.accelScaleFactor[YAXIS] = (2.0f * 9.8065f) / (fabs(leftWingDown) + fabs(rightWingDown));
 8006e0a:	eddd 7a05 	vldr	s15, [sp, #20]
 8006e0e:	eef0 7ae7 	vabs.f32	s15, s15
 8006e12:	ee17 0a90 	vmov	r0, s15
 8006e16:	f019 fc89 	bl	802072c <__aeabi_f2d>
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	460d      	mov	r5, r1
 8006e1e:	eddd 7a04 	vldr	s15, [sp, #16]
 8006e22:	eef0 7ae7 	vabs.f32	s15, s15
 8006e26:	ee17 0a90 	vmov	r0, s15
 8006e2a:	f019 fc7f 	bl	802072c <__aeabi_f2d>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4620      	mov	r0, r4
 8006e34:	4629      	mov	r1, r5
 8006e36:	f019 fb1b 	bl	8020470 <__adddf3>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	a146      	add	r1, pc, #280	; (adr r1, 8006f58 <accelCalibration+0x510>)
 8006e40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e44:	f019 fdf0 	bl	8020a28 <__aeabi_ddiv>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	4619      	mov	r1, r3
 8006e50:	f019 ff5a 	bl	8020d08 <__aeabi_d2f>
 8006e54:	4602      	mov	r2, r0
 8006e56:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8006e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006e5e:	615a      	str	r2, [r3, #20]

    ///////////////////////////////////

    uart1Print("Place accelerometer rear edge down\n");
 8006e60:	f24b 0094 	movw	r0, #45204	; 0xb094
 8006e64:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006e68:	f7ff fdda 	bl	8006a20 <uart1Print>
    uart1Print("  Send a character when ready to proceed\n\n");
 8006e6c:	f64a 70dc 	movw	r0, #45020	; 0xafdc
 8006e70:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006e74:	f7ff fdd4 	bl	8006a20 <uart1Print>

    while (uart1Available() == false);
 8006e78:	bf00      	nop
 8006e7a:	f7ff fd53 	bl	8006924 <uart1Available>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d0fa      	beq.n	8006e7a <accelCalibration+0x432>
    uart1Read();
 8006e84:	f7ff fd64 	bl	8006950 <uart1Read>

    uart1Print("  Gathering Data...\n\n");
 8006e88:	f24b 0008 	movw	r0, #45064	; 0xb008
 8006e8c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006e90:	f7ff fdc6 	bl	8006a20 <uart1Print>

    for (index = 0; index < 5000; index++) {
 8006e94:	f04f 0300 	mov.w	r3, #0
 8006e98:	f8ad 3006 	strh.w	r3, [sp, #6]
 8006e9c:	e01b      	b.n	8006ed6 <accelCalibration+0x48e>
        readAccel();
 8006e9e:	f7f9 fb15 	bl	80004cc <readAccel>
        noseUp += (float) rawAccel[XAXIS].value;
 8006ea2:	f640 037c 	movw	r3, #2172	; 0x87c
 8006ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b21b      	sxth	r3, r3
 8006eae:	ee07 3a10 	vmov	s14, r3
 8006eb2:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8006eb6:	ed9d 7a07 	vldr	s14, [sp, #28]
 8006eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ebe:	edcd 7a07 	vstr	s15, [sp, #28]
        delayMicroseconds(1000);
 8006ec2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ec6:	f7ff f8db 	bl	8006080 <delayMicroseconds>
    while (uart1Available() == false);
    uart1Read();

    uart1Print("  Gathering Data...\n\n");

    for (index = 0; index < 5000; index++) {
 8006eca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006ece:	f103 0301 	add.w	r3, r3, #1
 8006ed2:	f8ad 3006 	strh.w	r3, [sp, #6]
 8006ed6:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8006eda:	f241 3387 	movw	r3, #4999	; 0x1387
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	dddd      	ble.n	8006e9e <accelCalibration+0x456>
        readAccel();
        noseUp += (float) rawAccel[XAXIS].value;
        delayMicroseconds(1000);
    }

    noseUp /= 5000.0f;
 8006ee2:	ed9d 7a07 	vldr	s14, [sp, #28]
 8006ee6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8006f60 <accelCalibration+0x518>
 8006eea:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8006eee:	edcd 7a07 	vstr	s15, [sp, #28]

    ftoa(noseUp, numberString);
 8006ef2:	9807      	ldr	r0, [sp, #28]
 8006ef4:	f643 3178 	movw	r1, #15224	; 0x3b78
 8006ef8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8006efc:	f00f fea0 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 8006f00:	f643 3078 	movw	r0, #15224	; 0x3b78
 8006f04:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006f08:	f7ff fd8a 	bl	8006a20 <uart1Print>
    uart1Print("\n\n");
 8006f0c:	f24b 0020 	movw	r0, #45088	; 0xb020
 8006f10:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006f14:	f7ff fd84 	bl	8006a20 <uart1Print>

    uart1Print("Place accelerometer front edge down\n");
 8006f18:	f24b 00b8 	movw	r0, #45240	; 0xb0b8
 8006f1c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006f20:	f7ff fd7e 	bl	8006a20 <uart1Print>
    uart1Print("  Send a character when ready to proceed\n\n");
 8006f24:	f64a 70dc 	movw	r0, #45020	; 0xafdc
 8006f28:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006f2c:	f7ff fd78 	bl	8006a20 <uart1Print>

    while (uart1Available() == false);
 8006f30:	bf00      	nop
 8006f32:	f7ff fcf7 	bl	8006924 <uart1Available>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0fa      	beq.n	8006f32 <accelCalibration+0x4ea>
    uart1Read();
 8006f3c:	f7ff fd08 	bl	8006950 <uart1Read>

    uart1Print("  Gathering Data...\n\n");
 8006f40:	f24b 0008 	movw	r0, #45064	; 0xb008
 8006f44:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006f48:	f7ff fd6a 	bl	8006a20 <uart1Print>

    for (index = 0; index < 5000; index++) {
 8006f4c:	f04f 0300 	mov.w	r3, #0
 8006f50:	f8ad 3006 	strh.w	r3, [sp, #6]
 8006f54:	e022      	b.n	8006f9c <accelCalibration+0x554>
 8006f56:	bf00      	nop
 8006f58:	a0000000 	.word	0xa0000000
 8006f5c:	40339ced 	.word	0x40339ced
 8006f60:	459c4000 	.word	0x459c4000
        readAccel();
 8006f64:	f7f9 fab2 	bl	80004cc <readAccel>
        noseDown += (float) rawAccel[XAXIS].value;
 8006f68:	f640 037c 	movw	r3, #2172	; 0x87c
 8006f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	b21b      	sxth	r3, r3
 8006f74:	ee07 3a10 	vmov	s14, r3
 8006f78:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8006f7c:	ed9d 7a06 	vldr	s14, [sp, #24]
 8006f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f84:	edcd 7a06 	vstr	s15, [sp, #24]
        delayMicroseconds(1000);
 8006f88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f8c:	f7ff f878 	bl	8006080 <delayMicroseconds>
    while (uart1Available() == false);
    uart1Read();

    uart1Print("  Gathering Data...\n\n");

    for (index = 0; index < 5000; index++) {
 8006f90:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006f94:	f103 0301 	add.w	r3, r3, #1
 8006f98:	f8ad 3006 	strh.w	r3, [sp, #6]
 8006f9c:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8006fa0:	f241 3387 	movw	r3, #4999	; 0x1387
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	dddd      	ble.n	8006f64 <accelCalibration+0x51c>
        readAccel();
        noseDown += (float) rawAccel[XAXIS].value;
        delayMicroseconds(1000);
    }

    noseDown /= 5000.0f;
 8006fa8:	ed9d 7a06 	vldr	s14, [sp, #24]
 8006fac:	ed5f 7a14 	vldr	s15, [pc, #-80]	; 8006f60 <accelCalibration+0x518>
 8006fb0:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8006fb4:	edcd 7a06 	vstr	s15, [sp, #24]

    ftoa(noseDown, numberString);
 8006fb8:	9806      	ldr	r0, [sp, #24]
 8006fba:	f643 3178 	movw	r1, #15224	; 0x3b78
 8006fbe:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8006fc2:	f00f fe3d 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 8006fc6:	f643 3078 	movw	r0, #15224	; 0x3b78
 8006fca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006fce:	f7ff fd27 	bl	8006a20 <uart1Print>
    uart1Print("\n\n");
 8006fd2:	f24b 0020 	movw	r0, #45088	; 0xb020
 8006fd6:	f6c0 0002 	movt	r0, #2050	; 0x802
 8006fda:	f7ff fd21 	bl	8006a20 <uart1Print>

    eepromConfig.accelBias[XAXIS] = (noseUp + noseDown) / 2.0f;
 8006fde:	ed9d 7a07 	vldr	s14, [sp, #28]
 8006fe2:	eddd 7a06 	vldr	s15, [sp, #24]
 8006fe6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006fea:	eef0 7a00 	vmov.f32	s15, #0
 8006fee:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8006ff2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8006ff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006ffa:	edc3 7a01 	vstr	s15, [r3, #4]

    eepromConfig.accelScaleFactor[XAXIS] = (2.0f * 9.8065f) / (fabs(noseUp) + fabs(noseDown));
 8006ffe:	eddd 7a07 	vldr	s15, [sp, #28]
 8007002:	eef0 7ae7 	vabs.f32	s15, s15
 8007006:	ee17 0a90 	vmov	r0, s15
 800700a:	f019 fb8f 	bl	802072c <__aeabi_f2d>
 800700e:	4604      	mov	r4, r0
 8007010:	460d      	mov	r5, r1
 8007012:	eddd 7a06 	vldr	s15, [sp, #24]
 8007016:	eef0 7ae7 	vabs.f32	s15, s15
 800701a:	ee17 0a90 	vmov	r0, s15
 800701e:	f019 fb85 	bl	802072c <__aeabi_f2d>
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4620      	mov	r0, r4
 8007028:	4629      	mov	r1, r5
 800702a:	f019 fa21 	bl	8020470 <__adddf3>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	f20f 410c 	addw	r1, pc, #1036	; 0x40c
 8007036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800703a:	f019 fcf5 	bl	8020a28 <__aeabi_ddiv>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	4610      	mov	r0, r2
 8007044:	4619      	mov	r1, r3
 8007046:	f019 fe5f 	bl	8020d08 <__aeabi_d2f>
 800704a:	4602      	mov	r2, r0
 800704c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8007050:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007054:	611a      	str	r2, [r3, #16]

    ///////////////////////////////////

    ftoa(noseUp, numberString);
 8007056:	9807      	ldr	r0, [sp, #28]
 8007058:	f643 3178 	movw	r1, #15224	; 0x3b78
 800705c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007060:	f00f fdee 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 8007064:	f643 3078 	movw	r0, #15224	; 0x3b78
 8007068:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800706c:	f7ff fcd8 	bl	8006a20 <uart1Print>
    uart1Print(", ");
 8007070:	f24b 00e0 	movw	r0, #45280	; 0xb0e0
 8007074:	f6c0 0002 	movt	r0, #2050	; 0x802
 8007078:	f7ff fcd2 	bl	8006a20 <uart1Print>

    ftoa(noseDown, numberString);
 800707c:	9806      	ldr	r0, [sp, #24]
 800707e:	f643 3178 	movw	r1, #15224	; 0x3b78
 8007082:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007086:	f00f fddb 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 800708a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800708e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007092:	f7ff fcc5 	bl	8006a20 <uart1Print>
    uart1Print(", ");
 8007096:	f24b 00e0 	movw	r0, #45280	; 0xb0e0
 800709a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800709e:	f7ff fcbf 	bl	8006a20 <uart1Print>
    ftoa(eepromConfig.accelScaleFactor[XAXIS], numberString);
 80070a2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80070a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f643 3178 	movw	r1, #15224	; 0x3b78
 80070b2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80070b6:	f00f fdc3 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 80070ba:	f643 3078 	movw	r0, #15224	; 0x3b78
 80070be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80070c2:	f7ff fcad 	bl	8006a20 <uart1Print>
    uart1Print(", ");
 80070c6:	f24b 00e0 	movw	r0, #45280	; 0xb0e0
 80070ca:	f6c0 0002 	movt	r0, #2050	; 0x802
 80070ce:	f7ff fca7 	bl	8006a20 <uart1Print>
    ftoa(eepromConfig.accelBias[XAXIS], numberString);
 80070d2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80070d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	4618      	mov	r0, r3
 80070de:	f643 3178 	movw	r1, #15224	; 0x3b78
 80070e2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80070e6:	f00f fdab 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 80070ea:	f643 3078 	movw	r0, #15224	; 0x3b78
 80070ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80070f2:	f7ff fc95 	bl	8006a20 <uart1Print>
    uart1Print(", ");
 80070f6:	f24b 00e0 	movw	r0, #45280	; 0xb0e0
 80070fa:	f6c0 0002 	movt	r0, #2050	; 0x802
 80070fe:	f7ff fc8f 	bl	8006a20 <uart1Print>
    ftoa((noseUp - eepromConfig.accelBias[XAXIS]) * eepromConfig.accelScaleFactor[XAXIS], numberString);
 8007102:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8007106:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800710a:	edd3 7a01 	vldr	s15, [r3, #4]
 800710e:	ed9d 7a07 	vldr	s14, [sp, #28]
 8007112:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007116:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800711a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800711e:	edd3 7a04 	vldr	s15, [r3, #16]
 8007122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007126:	ee17 0a90 	vmov	r0, s15
 800712a:	f643 3178 	movw	r1, #15224	; 0x3b78
 800712e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007132:	f00f fd85 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 8007136:	f643 3078 	movw	r0, #15224	; 0x3b78
 800713a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800713e:	f7ff fc6f 	bl	8006a20 <uart1Print>
    uart1Print(", ");
 8007142:	f24b 00e0 	movw	r0, #45280	; 0xb0e0
 8007146:	f6c0 0002 	movt	r0, #2050	; 0x802
 800714a:	f7ff fc69 	bl	8006a20 <uart1Print>
    ftoa((noseDown - eepromConfig.accelBias[XAXIS]) * eepromConfig.accelScaleFactor[XAXIS], numberString);
 800714e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8007152:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007156:	edd3 7a01 	vldr	s15, [r3, #4]
 800715a:	ed9d 7a06 	vldr	s14, [sp, #24]
 800715e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007162:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8007166:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800716a:	edd3 7a04 	vldr	s15, [r3, #16]
 800716e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007172:	ee17 0a90 	vmov	r0, s15
 8007176:	f643 3178 	movw	r1, #15224	; 0x3b78
 800717a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800717e:	f00f fd5f 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 8007182:	f643 3078 	movw	r0, #15224	; 0x3b78
 8007186:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800718a:	f7ff fc49 	bl	8006a20 <uart1Print>
    uart1Print("\n\n");
 800718e:	f24b 0020 	movw	r0, #45088	; 0xb020
 8007192:	f6c0 0002 	movt	r0, #2050	; 0x802
 8007196:	f7ff fc43 	bl	8006a20 <uart1Print>

    ftoa(leftWingDown, numberString);
 800719a:	9805      	ldr	r0, [sp, #20]
 800719c:	f643 3178 	movw	r1, #15224	; 0x3b78
 80071a0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80071a4:	f00f fd4c 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 80071a8:	f643 3078 	movw	r0, #15224	; 0x3b78
 80071ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80071b0:	f7ff fc36 	bl	8006a20 <uart1Print>
    uart1Print(", ");
 80071b4:	f24b 00e0 	movw	r0, #45280	; 0xb0e0
 80071b8:	f6c0 0002 	movt	r0, #2050	; 0x802
 80071bc:	f7ff fc30 	bl	8006a20 <uart1Print>
    ftoa(rightWingDown, numberString);
 80071c0:	9804      	ldr	r0, [sp, #16]
 80071c2:	f643 3178 	movw	r1, #15224	; 0x3b78
 80071c6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80071ca:	f00f fd39 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 80071ce:	f643 3078 	movw	r0, #15224	; 0x3b78
 80071d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80071d6:	f7ff fc23 	bl	8006a20 <uart1Print>
    uart1Print(", ");
 80071da:	f24b 00e0 	movw	r0, #45280	; 0xb0e0
 80071de:	f6c0 0002 	movt	r0, #2050	; 0x802
 80071e2:	f7ff fc1d 	bl	8006a20 <uart1Print>
    ftoa(eepromConfig.accelScaleFactor[YAXIS], numberString);
 80071e6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80071ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f643 3178 	movw	r1, #15224	; 0x3b78
 80071f6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80071fa:	f00f fd21 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 80071fe:	f643 3078 	movw	r0, #15224	; 0x3b78
 8007202:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007206:	f7ff fc0b 	bl	8006a20 <uart1Print>
    uart1Print(", ");
 800720a:	f24b 00e0 	movw	r0, #45280	; 0xb0e0
 800720e:	f6c0 0002 	movt	r0, #2050	; 0x802
 8007212:	f7ff fc05 	bl	8006a20 <uart1Print>
    ftoa(eepromConfig.accelBias[YAXIS], numberString);
 8007216:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800721a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	4618      	mov	r0, r3
 8007222:	f643 3178 	movw	r1, #15224	; 0x3b78
 8007226:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800722a:	f00f fd09 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 800722e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8007232:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007236:	f7ff fbf3 	bl	8006a20 <uart1Print>
    uart1Print(", ");
 800723a:	f24b 00e0 	movw	r0, #45280	; 0xb0e0
 800723e:	f6c0 0002 	movt	r0, #2050	; 0x802
 8007242:	f7ff fbed 	bl	8006a20 <uart1Print>
    ftoa((leftWingDown - eepromConfig.accelBias[YAXIS]) * eepromConfig.accelScaleFactor[YAXIS], numberString);
 8007246:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800724a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800724e:	edd3 7a02 	vldr	s15, [r3, #8]
 8007252:	ed9d 7a05 	vldr	s14, [sp, #20]
 8007256:	ee37 7a67 	vsub.f32	s14, s14, s15
 800725a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800725e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007262:	edd3 7a05 	vldr	s15, [r3, #20]
 8007266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726a:	ee17 0a90 	vmov	r0, s15
 800726e:	f643 3178 	movw	r1, #15224	; 0x3b78
 8007272:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007276:	f00f fce3 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 800727a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800727e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007282:	f7ff fbcd 	bl	8006a20 <uart1Print>
    uart1Print(", ");
 8007286:	f24b 00e0 	movw	r0, #45280	; 0xb0e0
 800728a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800728e:	f7ff fbc7 	bl	8006a20 <uart1Print>
    ftoa((rightWingDown - eepromConfig.accelBias[YAXIS]) * eepromConfig.accelScaleFactor[YAXIS], numberString);
 8007292:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8007296:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800729a:	edd3 7a02 	vldr	s15, [r3, #8]
 800729e:	ed9d 7a04 	vldr	s14, [sp, #16]
 80072a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80072a6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80072aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80072ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80072b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b6:	ee17 0a90 	vmov	r0, s15
 80072ba:	f643 3178 	movw	r1, #15224	; 0x3b78
 80072be:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80072c2:	f00f fcbd 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 80072c6:	f643 3078 	movw	r0, #15224	; 0x3b78
 80072ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80072ce:	f7ff fba7 	bl	8006a20 <uart1Print>
    uart1Print("\n\n");
 80072d2:	f24b 0020 	movw	r0, #45088	; 0xb020
 80072d6:	f6c0 0002 	movt	r0, #2050	; 0x802
 80072da:	f7ff fba1 	bl	8006a20 <uart1Print>

    ftoa(upSideDown, numberString);
 80072de:	9803      	ldr	r0, [sp, #12]
 80072e0:	f643 3178 	movw	r1, #15224	; 0x3b78
 80072e4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80072e8:	f00f fcaa 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 80072ec:	f643 3078 	movw	r0, #15224	; 0x3b78
 80072f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80072f4:	f7ff fb94 	bl	8006a20 <uart1Print>
    uart1Print(", ");
 80072f8:	f24b 00e0 	movw	r0, #45280	; 0xb0e0
 80072fc:	f6c0 0002 	movt	r0, #2050	; 0x802
 8007300:	f7ff fb8e 	bl	8006a20 <uart1Print>
    ftoa(rightSideUp, numberString);
 8007304:	9802      	ldr	r0, [sp, #8]
 8007306:	f643 3178 	movw	r1, #15224	; 0x3b78
 800730a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800730e:	f00f fc97 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 8007312:	f643 3078 	movw	r0, #15224	; 0x3b78
 8007316:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800731a:	f7ff fb81 	bl	8006a20 <uart1Print>
    uart1Print(", ");
 800731e:	f24b 00e0 	movw	r0, #45280	; 0xb0e0
 8007322:	f6c0 0002 	movt	r0, #2050	; 0x802
 8007326:	f7ff fb7b 	bl	8006a20 <uart1Print>
    ftoa(eepromConfig.accelScaleFactor[ZAXIS], numberString);
 800732a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800732e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	4618      	mov	r0, r3
 8007336:	f643 3178 	movw	r1, #15224	; 0x3b78
 800733a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800733e:	f00f fc7f 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 8007342:	f643 3078 	movw	r0, #15224	; 0x3b78
 8007346:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800734a:	f7ff fb69 	bl	8006a20 <uart1Print>
    uart1Print(", ");
 800734e:	f24b 00e0 	movw	r0, #45280	; 0xb0e0
 8007352:	f6c0 0002 	movt	r0, #2050	; 0x802
 8007356:	f7ff fb63 	bl	8006a20 <uart1Print>
    ftoa(eepromConfig.accelBias[ZAXIS], numberString);
 800735a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800735e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	4618      	mov	r0, r3
 8007366:	f643 3178 	movw	r1, #15224	; 0x3b78
 800736a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800736e:	f00f fc67 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 8007372:	f643 3078 	movw	r0, #15224	; 0x3b78
 8007376:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800737a:	f7ff fb51 	bl	8006a20 <uart1Print>
    uart1Print(", ");
 800737e:	f24b 00e0 	movw	r0, #45280	; 0xb0e0
 8007382:	f6c0 0002 	movt	r0, #2050	; 0x802
 8007386:	f7ff fb4b 	bl	8006a20 <uart1Print>
    ftoa((upSideDown - eepromConfig.accelBias[ZAXIS]) * eepromConfig.accelScaleFactor[ZAXIS], numberString);
 800738a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800738e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007392:	edd3 7a03 	vldr	s15, [r3, #12]
 8007396:	ed9d 7a03 	vldr	s14, [sp, #12]
 800739a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800739e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80073a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80073a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80073aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ae:	ee17 0a90 	vmov	r0, s15
 80073b2:	f643 3178 	movw	r1, #15224	; 0x3b78
 80073b6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80073ba:	f00f fc41 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 80073be:	f643 3078 	movw	r0, #15224	; 0x3b78
 80073c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80073c6:	f7ff fb2b 	bl	8006a20 <uart1Print>
    uart1Print(", ");
 80073ca:	f24b 00e0 	movw	r0, #45280	; 0xb0e0
 80073ce:	f6c0 0002 	movt	r0, #2050	; 0x802
 80073d2:	f7ff fb25 	bl	8006a20 <uart1Print>
    ftoa((rightSideUp - eepromConfig.accelBias[ZAXIS]) * eepromConfig.accelScaleFactor[ZAXIS], numberString);
 80073d6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80073da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80073de:	edd3 7a03 	vldr	s15, [r3, #12]
 80073e2:	ed9d 7a02 	vldr	s14, [sp, #8]
 80073e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80073ea:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80073ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80073f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80073f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073fa:	ee17 0a90 	vmov	r0, s15
 80073fe:	f643 3178 	movw	r1, #15224	; 0x3b78
 8007402:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007406:	f00f fc1b 	bl	8016c40 <ftoa>
    uart1Print(numberString);
 800740a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800740e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007412:	f7ff fb05 	bl	8006a20 <uart1Print>
    uart1Print("\n");
 8007416:	f24b 00e4 	movw	r0, #45284	; 0xb0e4
 800741a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800741e:	f7ff faff 	bl	8006a20 <uart1Print>

    uart1Print("\nAccel Calibration Complete.\n");
 8007422:	f24b 00e8 	movw	r0, #45288	; 0xb0e8
 8007426:	f6c0 0002 	movt	r0, #2050	; 0x802
 800742a:	f7ff faf9 	bl	8006a20 <uart1Print>

    accelCalibrating = false;
 800742e:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8007432:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007436:	f04f 0200 	mov.w	r2, #0
 800743a:	701a      	strb	r2, [r3, #0]
}
 800743c:	b009      	add	sp, #36	; 0x24
 800743e:	bd30      	pop	{r4, r5, pc}
 8007440:	a0000000 	.word	0xa0000000
 8007444:	40339ced 	.word	0x40339ced

08007448 <escCalibration>:
///////////////////////////////////////////////////////////////////////////////
// ESC Calibration
///////////////////////////////////////////////////////////////////////////////

void escCalibration(void)
{
 8007448:	b508      	push	{r3, lr}
    escCalibrating = true;
 800744a:	f240 7394 	movw	r3, #1940	; 0x794
 800744e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007452:	f04f 0201 	mov.w	r2, #1
 8007456:	701a      	strb	r2, [r3, #0]

    armed = false;
 8007458:	f240 73fa 	movw	r3, #2042	; 0x7fa
 800745c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007460:	f04f 0200 	mov.w	r2, #0
 8007464:	701a      	strb	r2, [r3, #0]

    uart1Print("\nESC Calibration:\n\n");
 8007466:	f24b 1008 	movw	r0, #45320	; 0xb108
 800746a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800746e:	f7ff fad7 	bl	8006a20 <uart1Print>
    uart1Print("!!!! CAUTION - Remove all propellers and disconnect !!!!\n");
 8007472:	f24b 101c 	movw	r0, #45340	; 0xb11c
 8007476:	f6c0 0002 	movt	r0, #2050	; 0x802
 800747a:	f7ff fad1 	bl	8006a20 <uart1Print>
    uart1Print("!!!! flight battery before proceeding any further   !!!!\n\n");
 800747e:	f24b 1058 	movw	r0, #45400	; 0xb158
 8007482:	f6c0 0002 	movt	r0, #2050	; 0x802
 8007486:	f7ff facb 	bl	8006a20 <uart1Print>
    uart1Print("Type 'Y' to continue, anything other character exits\n\n");
 800748a:	f24b 1094 	movw	r0, #45460	; 0xb194
 800748e:	f6c0 0002 	movt	r0, #2050	; 0x802
 8007492:	f7ff fac5 	bl	8006a20 <uart1Print>

    while (uart1Available() == false);
 8007496:	bf00      	nop
 8007498:	f7ff fa44 	bl	8006924 <uart1Available>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0fa      	beq.n	8007498 <escCalibration+0x50>
    temp = uart1Read();
 80074a2:	f7ff fa55 	bl	8006950 <uart1Read>
 80074a6:	4603      	mov	r3, r0
 80074a8:	461a      	mov	r2, r3
 80074aa:	f643 2320 	movw	r3, #14880	; 0x3a20
 80074ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80074b2:	701a      	strb	r2, [r3, #0]
    if (temp != 'Y')
 80074b4:	f643 2320 	movw	r3, #14880	; 0x3a20
 80074b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b59      	cmp	r3, #89	; 0x59
 80074c0:	d00d      	beq.n	80074de <escCalibration+0x96>
    {
    	uart1Print("ESC Calibration Canceled!!\n\n");
 80074c2:	f24b 10cc 	movw	r0, #45516	; 0xb1cc
 80074c6:	f6c0 0002 	movt	r0, #2050	; 0x802
 80074ca:	f7ff faa9 	bl	8006a20 <uart1Print>
    	escCalibrating = false;
 80074ce:	f240 7394 	movw	r3, #1940	; 0x794
 80074d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80074d6:	f04f 0200 	mov.w	r2, #0
 80074da:	701a      	strb	r2, [r3, #0]
    	return;
 80074dc:	e093      	b.n	8007606 <escCalibration+0x1be>
    }

    ///////////////////////////////////

    uart1Print("Enter 'h' for Max Command....\n");
 80074de:	f24b 10ec 	movw	r0, #45548	; 0xb1ec
 80074e2:	f6c0 0002 	movt	r0, #2050	; 0x802
 80074e6:	f7ff fa9b 	bl	8006a20 <uart1Print>
    uart1Print("Enter 'm' for Mid Command....\n");
 80074ea:	f24b 200c 	movw	r0, #45580	; 0xb20c
 80074ee:	f6c0 0002 	movt	r0, #2050	; 0x802
 80074f2:	f7ff fa95 	bl	8006a20 <uart1Print>
    uart1Print("Enter 'l' for Min Command....\n");
 80074f6:	f24b 202c 	movw	r0, #45612	; 0xb22c
 80074fa:	f6c0 0002 	movt	r0, #2050	; 0x802
 80074fe:	f7ff fa8f 	bl	8006a20 <uart1Print>
    uart1Print("Enter 'x' to exit....\n\n");
 8007502:	f24b 204c 	movw	r0, #45644	; 0xb24c
 8007506:	f6c0 0002 	movt	r0, #2050	; 0x802
 800750a:	f7ff fa89 	bl	8006a20 <uart1Print>

    while(true)
    {
		while (uart1Available() == false);
 800750e:	e000      	b.n	8007512 <escCalibration+0xca>
			    writeAllMotors(MINCOMMAND);
			    escCalibrating = false;
			    return;
			    break;
		}
	}
 8007510:	bf00      	nop
    uart1Print("Enter 'l' for Min Command....\n");
    uart1Print("Enter 'x' to exit....\n\n");

    while(true)
    {
		while (uart1Available() == false);
 8007512:	bf00      	nop
 8007514:	f7ff fa06 	bl	8006924 <uart1Available>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d0fa      	beq.n	8007514 <escCalibration+0xcc>

		temp = uart1Read();
 800751e:	f7ff fa17 	bl	8006950 <uart1Read>
 8007522:	4603      	mov	r3, r0
 8007524:	461a      	mov	r2, r3
 8007526:	f643 2320 	movw	r3, #14880	; 0x3a20
 800752a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800752e:	701a      	strb	r2, [r3, #0]

		switch (temp)
 8007530:	f643 2320 	movw	r3, #14880	; 0x3a20
 8007534:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	f1a3 0368 	sub.w	r3, r3, #104	; 0x68
 800753e:	2b10      	cmp	r3, #16
 8007540:	d8e6      	bhi.n	8007510 <escCalibration+0xc8>
 8007542:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <escCalibration+0x100>)
 8007544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007548:	0800758d 	.word	0x0800758d
 800754c:	08007511 	.word	0x08007511
 8007550:	08007511 	.word	0x08007511
 8007554:	08007511 	.word	0x08007511
 8007558:	080075cd 	.word	0x080075cd
 800755c:	080075ad 	.word	0x080075ad
 8007560:	08007511 	.word	0x08007511
 8007564:	08007511 	.word	0x08007511
 8007568:	08007511 	.word	0x08007511
 800756c:	08007511 	.word	0x08007511
 8007570:	08007511 	.word	0x08007511
 8007574:	08007511 	.word	0x08007511
 8007578:	08007511 	.word	0x08007511
 800757c:	08007511 	.word	0x08007511
 8007580:	08007511 	.word	0x08007511
 8007584:	08007511 	.word	0x08007511
 8007588:	080075e1 	.word	0x080075e1
		{
			case 'h':
			    uart1Print("Applying Max Command....\n\n");
 800758c:	f24b 2064 	movw	r0, #45668	; 0xb264
 8007590:	f6c0 0002 	movt	r0, #2050	; 0x802
 8007594:	f7ff fa44 	bl	8006a20 <uart1Print>
			    writeAllMotors(eepromConfig.maxThrottle);
 8007598:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800759c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80075a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075a4:	4618      	mov	r0, r3
 80075a6:	f00a fb75 	bl	8011c94 <writeAllMotors>
			    break;
 80075aa:	e02b      	b.n	8007604 <escCalibration+0x1bc>

			case 'm':
			    uart1Print("Applying Mid Command....\n\n");
 80075ac:	f24b 2080 	movw	r0, #45696	; 0xb280
 80075b0:	f6c0 0002 	movt	r0, #2050	; 0x802
 80075b4:	f7ff fa34 	bl	8006a20 <uart1Print>
			    writeAllMotors(eepromConfig.midCommand);
 80075b8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80075bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80075c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075c4:	4618      	mov	r0, r3
 80075c6:	f00a fb65 	bl	8011c94 <writeAllMotors>
			    break;
 80075ca:	e01b      	b.n	8007604 <escCalibration+0x1bc>

			case 'l':
			    uart1Print("Applying Min Command....\n\n");
 80075cc:	f24b 209c 	movw	r0, #45724	; 0xb29c
 80075d0:	f6c0 0002 	movt	r0, #2050	; 0x802
 80075d4:	f7ff fa24 	bl	8006a20 <uart1Print>
			    writeAllMotors(MINCOMMAND);
 80075d8:	480b      	ldr	r0, [pc, #44]	; (8007608 <escCalibration+0x1c0>)
 80075da:	f00a fb5b 	bl	8011c94 <writeAllMotors>
			    break;
 80075de:	e011      	b.n	8007604 <escCalibration+0x1bc>

			case 'x':
			    uart1Print("Applying Min Command, Exiting Calibration....\n\n");
 80075e0:	f24b 20b8 	movw	r0, #45752	; 0xb2b8
 80075e4:	f6c0 0002 	movt	r0, #2050	; 0x802
 80075e8:	f7ff fa1a 	bl	8006a20 <uart1Print>
			    writeAllMotors(MINCOMMAND);
 80075ec:	4806      	ldr	r0, [pc, #24]	; (8007608 <escCalibration+0x1c0>)
 80075ee:	f00a fb51 	bl	8011c94 <writeAllMotors>
			    escCalibrating = false;
 80075f2:	f240 7394 	movw	r3, #1940	; 0x794
 80075f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80075fa:	f04f 0200 	mov.w	r2, #0
 80075fe:	701a      	strb	r2, [r3, #0]
			    return;
 8007600:	bf00      	nop
 8007602:	e000      	b.n	8007606 <escCalibration+0x1be>
			    break;
		}
	}
 8007604:	e784      	b.n	8007510 <escCalibration+0xc8>
}
 8007606:	bd08      	pop	{r3, pc}
 8007608:	44fa0000 	.word	0x44fa0000

0800760c <magCalibration>:
///////////////////////////////////////////////////////////////////////////////
// Mag Calibration
///////////////////////////////////////////////////////////////////////////////

void magCalibration()
{
 800760c:	b500      	push	{lr}
 800760e:	f5ad 4d0c 	sub.w	sp, sp, #35840	; 0x8c00
 8007612:	b0b5      	sub	sp, #212	; 0xd4
	uint16_t calibrationCounter = 0;
 8007614:	f04f 0300 	mov.w	r3, #0
 8007618:	f50d 420c 	add.w	r2, sp, #35840	; 0x8c00
 800761c:	f102 02ce 	add.w	r2, r2, #206	; 0xce
 8007620:	8013      	strh	r3, [r2, #0]

	float    d[3000][3];       // 3000 Samples = 60 seconds of data at 50 Hz
	float    sphereOrigin[3];
	float    sphereRadius;

	magCalibrating = true;
 8007622:	f240 7395 	movw	r3, #1941	; 0x795
 8007626:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800762a:	f04f 0201 	mov.w	r2, #1
 800762e:	701a      	strb	r2, [r3, #0]

	uart1Print("\n\nMagnetometer Calibration:\n\n");
 8007630:	f24b 20e8 	movw	r0, #45800	; 0xb2e8
 8007634:	f6c0 0002 	movt	r0, #2050	; 0x802
 8007638:	f7ff f9f2 	bl	8006a20 <uart1Print>

    uart1Print("Rotate magnetometer around all axes multiple times\n");
 800763c:	f24b 3008 	movw	r0, #45832	; 0xb308
 8007640:	f6c0 0002 	movt	r0, #2050	; 0x802
 8007644:	f7ff f9ec 	bl	8006a20 <uart1Print>
    uart1Print("Must complete within 60 seconds....\n\n");
 8007648:	f24b 303c 	movw	r0, #45884	; 0xb33c
 800764c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8007650:	f7ff f9e6 	bl	8006a20 <uart1Print>
    uart1Print("  Send a character when ready to begin and another when complete\n\n");
 8007654:	f24b 3064 	movw	r0, #45924	; 0xb364
 8007658:	f6c0 0002 	movt	r0, #2050	; 0x802
 800765c:	f7ff f9e0 	bl	8006a20 <uart1Print>

    while (uart1Available() == false);
 8007660:	bf00      	nop
 8007662:	f7ff f95f 	bl	8006924 <uart1Available>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d0fa      	beq.n	8007662 <magCalibration+0x56>

    uart1Print("  Start rotations.....\n\n");
 800766c:	f24b 30a8 	movw	r0, #45992	; 0xb3a8
 8007670:	f6c0 0002 	movt	r0, #2050	; 0x802
 8007674:	f7ff f9d4 	bl	8006a20 <uart1Print>

    uart1Read();
 8007678:	f7ff f96a 	bl	8006950 <uart1Read>

    while ((uart1Available() == false) && (calibrationCounter <= 3000))
 800767c:	e081      	b.n	8007782 <magCalibration+0x176>
	{
		if (readMag() == true)
 800767e:	f7f9 f877 	bl	8000770 <readMag>
 8007682:	4603      	mov	r3, r0
 8007684:	2b01      	cmp	r3, #1
 8007686:	d178      	bne.n	800777a <magCalibration+0x16e>
		{
			d[calibrationCounter][XAXIS] = (float)rawMag[XAXIS].value * magScaleFactor[XAXIS];
 8007688:	f50d 430c 	add.w	r3, sp, #35840	; 0x8c00
 800768c:	f103 03ce 	add.w	r3, r3, #206	; 0xce
 8007690:	8819      	ldrh	r1, [r3, #0]
 8007692:	f640 0374 	movw	r3, #2164	; 0x874
 8007696:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	b21b      	sxth	r3, r3
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076a6:	f640 0384 	movw	r3, #2180	; 0x884
 80076aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80076ae:	edd3 7a00 	vldr	s15, [r3]
 80076b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b6:	aa34      	add	r2, sp, #208	; 0xd0
 80076b8:	f1a2 02b0 	sub.w	r2, r2, #176	; 0xb0
 80076bc:	460b      	mov	r3, r1
 80076be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80076c2:	185b      	adds	r3, r3, r1
 80076c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80076c8:	18d3      	adds	r3, r2, r3
 80076ca:	edc3 7a00 	vstr	s15, [r3]
			d[calibrationCounter][YAXIS] = (float)rawMag[YAXIS].value * magScaleFactor[YAXIS];
 80076ce:	f50d 420c 	add.w	r2, sp, #35840	; 0x8c00
 80076d2:	f102 02ce 	add.w	r2, r2, #206	; 0xce
 80076d6:	8811      	ldrh	r1, [r2, #0]
 80076d8:	f640 0374 	movw	r3, #2164	; 0x874
 80076dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80076e0:	885b      	ldrh	r3, [r3, #2]
 80076e2:	b21b      	sxth	r3, r3
 80076e4:	ee07 3a90 	vmov	s15, r3
 80076e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076ec:	f640 0384 	movw	r3, #2180	; 0x884
 80076f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80076f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80076f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076fc:	aa34      	add	r2, sp, #208	; 0xd0
 80076fe:	f1a2 02b0 	sub.w	r2, r2, #176	; 0xb0
 8007702:	460b      	mov	r3, r1
 8007704:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007708:	185b      	adds	r3, r3, r1
 800770a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800770e:	18d3      	adds	r3, r2, r3
 8007710:	f103 0304 	add.w	r3, r3, #4
 8007714:	edc3 7a00 	vstr	s15, [r3]
			d[calibrationCounter][ZAXIS] = (float)rawMag[ZAXIS].value * magScaleFactor[ZAXIS];
 8007718:	f50d 420c 	add.w	r2, sp, #35840	; 0x8c00
 800771c:	f102 02ce 	add.w	r2, r2, #206	; 0xce
 8007720:	8811      	ldrh	r1, [r2, #0]
 8007722:	f640 0374 	movw	r3, #2164	; 0x874
 8007726:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800772a:	889b      	ldrh	r3, [r3, #4]
 800772c:	b21b      	sxth	r3, r3
 800772e:	ee07 3a90 	vmov	s15, r3
 8007732:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007736:	f640 0384 	movw	r3, #2180	; 0x884
 800773a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800773e:	edd3 7a02 	vldr	s15, [r3, #8]
 8007742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007746:	aa34      	add	r2, sp, #208	; 0xd0
 8007748:	f1a2 02b0 	sub.w	r2, r2, #176	; 0xb0
 800774c:	460b      	mov	r3, r1
 800774e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007752:	185b      	adds	r3, r3, r1
 8007754:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007758:	18d3      	adds	r3, r2, r3
 800775a:	f103 0308 	add.w	r3, r3, #8
 800775e:	edc3 7a00 	vstr	s15, [r3]

			calibrationCounter++;
 8007762:	f50d 420c 	add.w	r2, sp, #35840	; 0x8c00
 8007766:	f102 02ce 	add.w	r2, r2, #206	; 0xce
 800776a:	8813      	ldrh	r3, [r2, #0]
 800776c:	f103 0301 	add.w	r3, r3, #1
 8007770:	f50d 420c 	add.w	r2, sp, #35840	; 0x8c00
 8007774:	f102 02ce 	add.w	r2, r2, #206	; 0xce
 8007778:	8013      	strh	r3, [r2, #0]
		}

		delay(20);
 800777a:	f04f 0014 	mov.w	r0, #20
 800777e:	f7fe fcb9 	bl	80060f4 <delay>

    uart1Print("  Start rotations.....\n\n");

    uart1Read();

    while ((uart1Available() == false) && (calibrationCounter <= 3000))
 8007782:	f7ff f8cf 	bl	8006924 <uart1Available>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d109      	bne.n	80077a0 <magCalibration+0x194>
 800778c:	f50d 430c 	add.w	r3, sp, #35840	; 0x8c00
 8007790:	f103 03ce 	add.w	r3, r3, #206	; 0xce
 8007794:	881a      	ldrh	r2, [r3, #0]
 8007796:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800779a:	429a      	cmp	r2, r3
 800779c:	f67f af6f 	bls.w	800767e <magCalibration+0x72>
		}

		delay(20);
	}

	itoa(calibrationCounter, numberString, 10);
 80077a0:	f50d 420c 	add.w	r2, sp, #35840	; 0x8c00
 80077a4:	f102 02ce 	add.w	r2, r2, #206	; 0xce
 80077a8:	8813      	ldrh	r3, [r2, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f643 3178 	movw	r1, #15224	; 0x3b78
 80077b0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80077b4:	f04f 020a 	mov.w	r2, #10
 80077b8:	f00f fa0c 	bl	8016bd4 <itoa>
	uart1Print("\r\nMagnetometer Bias Calculation ("); uart1Print(numberString); uart1Print(" samples collected out of 3000 max)\n\n");
 80077bc:	f24b 30c4 	movw	r0, #46020	; 0xb3c4
 80077c0:	f6c0 0002 	movt	r0, #2050	; 0x802
 80077c4:	f7ff f92c 	bl	8006a20 <uart1Print>
 80077c8:	f643 3078 	movw	r0, #15224	; 0x3b78
 80077cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80077d0:	f7ff f926 	bl	8006a20 <uart1Print>
 80077d4:	f24b 30e8 	movw	r0, #46056	; 0xb3e8
 80077d8:	f6c0 0002 	movt	r0, #2050	; 0x802
 80077dc:	f7ff f920 	bl	8006a20 <uart1Print>

	sphereFit(d, calibrationCounter, 100, 0.0f, population, sphereOrigin, &sphereRadius);
 80077e0:	ab34      	add	r3, sp, #208	; 0xd0
 80077e2:	f1a3 03b0 	sub.w	r3, r3, #176	; 0xb0
 80077e6:	f50d 420c 	add.w	r2, sp, #35840	; 0x8c00
 80077ea:	f102 02ce 	add.w	r2, r2, #206	; 0xce
 80077ee:	8811      	ldrh	r1, [r2, #0]
 80077f0:	f50d 420c 	add.w	r2, sp, #35840	; 0x8c00
 80077f4:	f102 02c0 	add.w	r2, r2, #192	; 0xc0
 80077f8:	9200      	str	r2, [sp, #0]
 80077fa:	aa34      	add	r2, sp, #208	; 0xd0
 80077fc:	f1a2 02bc 	sub.w	r2, r2, #188	; 0xbc
 8007800:	9201      	str	r2, [sp, #4]
 8007802:	aa34      	add	r2, sp, #208	; 0xd0
 8007804:	f1a2 02c0 	sub.w	r2, r2, #192	; 0xc0
 8007808:	9202      	str	r2, [sp, #8]
 800780a:	4618      	mov	r0, r3
 800780c:	f04f 0264 	mov.w	r2, #100	; 0x64
 8007810:	4b3e      	ldr	r3, [pc, #248]	; (800790c <magCalibration+0x300>)
 8007812:	f00f fb1f 	bl	8016e54 <sphereFit>

	eepromConfig.magBias[XAXIS] = sphereOrigin[XAXIS];
 8007816:	ab34      	add	r3, sp, #208	; 0xd0
 8007818:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8007822:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007826:	635a      	str	r2, [r3, #52]	; 0x34
	eepromConfig.magBias[YAXIS] = sphereOrigin[YAXIS];
 8007828:	ab34      	add	r3, sp, #208	; 0xd0
 800782a:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8007834:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007838:	639a      	str	r2, [r3, #56]	; 0x38
	eepromConfig.magBias[ZAXIS] = sphereOrigin[ZAXIS];
 800783a:	ab34      	add	r3, sp, #208	; 0xd0
 800783c:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 8007840:	689a      	ldr	r2, [r3, #8]
 8007842:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8007846:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800784a:	63da      	str	r2, [r3, #60]	; 0x3c

    uart1Print("Magnetometer Bias Values: ");
 800784c:	f24b 4010 	movw	r0, #46096	; 0xb410
 8007850:	f6c0 0002 	movt	r0, #2050	; 0x802
 8007854:	f7ff f8e4 	bl	8006a20 <uart1Print>
    ftoa(eepromConfig.magBias[XAXIS], numberString); uart1Print(numberString); uart1Print(", ");
 8007858:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800785c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007862:	4618      	mov	r0, r3
 8007864:	f643 3178 	movw	r1, #15224	; 0x3b78
 8007868:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800786c:	f00f f9e8 	bl	8016c40 <ftoa>
 8007870:	f643 3078 	movw	r0, #15224	; 0x3b78
 8007874:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007878:	f7ff f8d2 	bl	8006a20 <uart1Print>
 800787c:	f24b 402c 	movw	r0, #46124	; 0xb42c
 8007880:	f6c0 0002 	movt	r0, #2050	; 0x802
 8007884:	f7ff f8cc 	bl	8006a20 <uart1Print>
    ftoa(eepromConfig.magBias[YAXIS], numberString); uart1Print(numberString); uart1Print(", ");
 8007888:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800788c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	4618      	mov	r0, r3
 8007894:	f643 3178 	movw	r1, #15224	; 0x3b78
 8007898:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800789c:	f00f f9d0 	bl	8016c40 <ftoa>
 80078a0:	f643 3078 	movw	r0, #15224	; 0x3b78
 80078a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80078a8:	f7ff f8ba 	bl	8006a20 <uart1Print>
 80078ac:	f24b 402c 	movw	r0, #46124	; 0xb42c
 80078b0:	f6c0 0002 	movt	r0, #2050	; 0x802
 80078b4:	f7ff f8b4 	bl	8006a20 <uart1Print>
    ftoa(eepromConfig.magBias[ZAXIS], numberString); uart1Print(numberString); uart1Print("\n");
 80078b8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80078bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80078c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c2:	4618      	mov	r0, r3
 80078c4:	f643 3178 	movw	r1, #15224	; 0x3b78
 80078c8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80078cc:	f00f f9b8 	bl	8016c40 <ftoa>
 80078d0:	f643 3078 	movw	r0, #15224	; 0x3b78
 80078d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80078d8:	f7ff f8a2 	bl	8006a20 <uart1Print>
 80078dc:	f24b 4030 	movw	r0, #46128	; 0xb430
 80078e0:	f6c0 0002 	movt	r0, #2050	; 0x802
 80078e4:	f7ff f89c 	bl	8006a20 <uart1Print>

	uart1Print("\n\nMagnetometer Calibration Complete.\n\n");
 80078e8:	f24b 4034 	movw	r0, #46132	; 0xb434
 80078ec:	f6c0 0002 	movt	r0, #2050	; 0x802
 80078f0:	f7ff f896 	bl	8006a20 <uart1Print>

	magCalibrating = false;
 80078f4:	f240 7395 	movw	r3, #1941	; 0x795
 80078f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80078fc:	f04f 0200 	mov.w	r2, #0
 8007900:	701a      	strb	r2, [r3, #0]
}
 8007902:	b035      	add	sp, #212	; 0xd4
 8007904:	f50d 4d0c 	add.w	sp, sp, #35840	; 0x8c00
 8007908:	bd00      	pop	{pc}
 800790a:	bf00      	nop
 800790c:	00000000 	.word	0x00000000

08007910 <calculateAccConfidence>:
float accConfidence      = 1.0f;

#define HardFilter(O,N)  (O*0.9f+N*0.1f)

void calculateAccConfidence(float accMag)
{
 8007910:	b530      	push	{r4, r5, lr}
 8007912:	b083      	sub	sp, #12
 8007914:	9001      	str	r0, [sp, #4]
	// G.K. Egan (C) computes confidence in accelerometers when
	// aircraft is being accelerated over and above that due to gravity

	static float accMagP = 1.0f;

	accMag /= accelOneG;  // HJI Added to convert MPS^2 to G's (0.101973 = 1 / 9.8065)
 8007916:	f240 0300 	movw	r3, #0
 800791a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800791e:	edd3 7a00 	vldr	s15, [r3]
 8007922:	ed9d 7a01 	vldr	s14, [sp, #4]
 8007926:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800792a:	edcd 7a01 	vstr	s15, [sp, #4]

	accMag  = HardFilter(accMagP, accMag );
 800792e:	f240 0380 	movw	r3, #128	; 0x80
 8007932:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007936:	ed93 7a00 	vldr	s14, [r3]
 800793a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80079e8 <calculateAccConfidence+0xd8>
 800793e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007942:	eddd 6a01 	vldr	s13, [sp, #4]
 8007946:	eddf 7a29 	vldr	s15, [pc, #164]	; 80079ec <calculateAccConfidence+0xdc>
 800794a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800794e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007952:	edcd 7a01 	vstr	s15, [sp, #4]
	accMagP = accMag;
 8007956:	f240 0380 	movw	r3, #128	; 0x80
 800795a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800795e:	9a01      	ldr	r2, [sp, #4]
 8007960:	601a      	str	r2, [r3, #0]

	accConfidence
			= constrain(1.0f - (accConfidenceDecay * sqrt(fabs(accMag - 1.0f))), 0.0f, 1.0f);
 8007962:	f240 73d8 	movw	r3, #2008	; 0x7d8
 8007966:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4618      	mov	r0, r3
 800796e:	f018 fedd 	bl	802072c <__aeabi_f2d>
 8007972:	4604      	mov	r4, r0
 8007974:	460d      	mov	r5, r1
 8007976:	ed9d 7a01 	vldr	s14, [sp, #4]
 800797a:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 800797e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007982:	eef0 7ae7 	vabs.f32	s15, s15
 8007986:	ee17 0a90 	vmov	r0, s15
 800798a:	f018 fecf 	bl	802072c <__aeabi_f2d>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4610      	mov	r0, r2
 8007994:	4619      	mov	r1, r3
 8007996:	f016 fe09 	bl	801e5ac <sqrt>
 800799a:	4602      	mov	r2, r0
 800799c:	460b      	mov	r3, r1
 800799e:	4620      	mov	r0, r4
 80079a0:	4629      	mov	r1, r5
 80079a2:	f018 ff17 	bl	80207d4 <__aeabi_dmul>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	a10d      	add	r1, pc, #52	; (adr r1, 80079e0 <calculateAccConfidence+0xd0>)
 80079ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079b0:	f018 fd5c 	bl	802046c <__aeabi_dsub>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4610      	mov	r0, r2
 80079ba:	4619      	mov	r1, r3
 80079bc:	f019 f9a4 	bl	8020d08 <__aeabi_d2f>
 80079c0:	4603      	mov	r3, r0
 80079c2:	4618      	mov	r0, r3
 80079c4:	490a      	ldr	r1, [pc, #40]	; (80079f0 <calculateAccConfidence+0xe0>)
 80079c6:	4a0b      	ldr	r2, [pc, #44]	; (80079f4 <calculateAccConfidence+0xe4>)
 80079c8:	f00f f8a2 	bl	8016b10 <constrain>
 80079cc:	4602      	mov	r2, r0
 80079ce:	f240 037c 	movw	r3, #124	; 0x7c
 80079d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80079d6:	601a      	str	r2, [r3, #0]

}
 80079d8:	b003      	add	sp, #12
 80079da:	bd30      	pop	{r4, r5, pc}
 80079dc:	f3af 8000 	nop.w
 80079e0:	00000000 	.word	0x00000000
 80079e4:	3ff00000 	.word	0x3ff00000
 80079e8:	3f666666 	.word	0x3f666666
 80079ec:	3dcccccd 	.word	0x3dcccccd
 80079f0:	00000000 	.word	0x00000000
 80079f4:	3f800000 	.word	0x3f800000

080079f8 <MargAHRSinit>:
//====================================================================================================
// Initialization
//====================================================================================================

void MargAHRSinit(float ax, float ay, float az, float mx, float my, float mz)
{
 80079f8:	b530      	push	{r4, r5, lr}
 80079fa:	b091      	sub	sp, #68	; 0x44
 80079fc:	9003      	str	r0, [sp, #12]
 80079fe:	9102      	str	r1, [sp, #8]
 8007a00:	9201      	str	r2, [sp, #4]
 8007a02:	9300      	str	r3, [sp, #0]
    float initialRoll, initialPitch;
    float cosRoll, sinRoll, cosPitch, sinPitch;
    float magX, magY;
    float initialHdg, cosHeading, sinHeading;

    initialRoll  = atan2(-ay, -az);
 8007a04:	eddd 7a02 	vldr	s15, [sp, #8]
 8007a08:	eef1 7a67 	vneg.f32	s15, s15
 8007a0c:	ee17 3a90 	vmov	r3, s15
 8007a10:	4618      	mov	r0, r3
 8007a12:	f018 fe8b 	bl	802072c <__aeabi_f2d>
 8007a16:	4604      	mov	r4, r0
 8007a18:	460d      	mov	r5, r1
 8007a1a:	eddd 7a01 	vldr	s15, [sp, #4]
 8007a1e:	eef1 7a67 	vneg.f32	s15, s15
 8007a22:	ee17 3a90 	vmov	r3, s15
 8007a26:	4618      	mov	r0, r3
 8007a28:	f018 fe80 	bl	802072c <__aeabi_f2d>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4620      	mov	r0, r4
 8007a32:	4629      	mov	r1, r5
 8007a34:	f016 fdb8 	bl	801e5a8 <atan2>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	4619      	mov	r1, r3
 8007a40:	f019 f962 	bl	8020d08 <__aeabi_d2f>
 8007a44:	4603      	mov	r3, r0
 8007a46:	930f      	str	r3, [sp, #60]	; 0x3c
    initialPitch = atan2( ax, -az);
 8007a48:	9803      	ldr	r0, [sp, #12]
 8007a4a:	f018 fe6f 	bl	802072c <__aeabi_f2d>
 8007a4e:	4604      	mov	r4, r0
 8007a50:	460d      	mov	r5, r1
 8007a52:	eddd 7a01 	vldr	s15, [sp, #4]
 8007a56:	eef1 7a67 	vneg.f32	s15, s15
 8007a5a:	ee17 3a90 	vmov	r3, s15
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f018 fe64 	bl	802072c <__aeabi_f2d>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4620      	mov	r0, r4
 8007a6a:	4629      	mov	r1, r5
 8007a6c:	f016 fd9c 	bl	801e5a8 <atan2>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	4610      	mov	r0, r2
 8007a76:	4619      	mov	r1, r3
 8007a78:	f019 f946 	bl	8020d08 <__aeabi_d2f>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	930e      	str	r3, [sp, #56]	; 0x38

    cosRoll  = cosf(initialRoll);
 8007a80:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007a82:	f016 fd1f 	bl	801e4c4 <cosf>
 8007a86:	900d      	str	r0, [sp, #52]	; 0x34
    sinRoll  = sinf(initialRoll);
 8007a88:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007a8a:	f016 fd51 	bl	801e530 <sinf>
 8007a8e:	900c      	str	r0, [sp, #48]	; 0x30
    cosPitch = cosf(initialPitch);
 8007a90:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007a92:	f016 fd17 	bl	801e4c4 <cosf>
 8007a96:	900b      	str	r0, [sp, #44]	; 0x2c
    sinPitch = sinf(initialPitch);
 8007a98:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007a9a:	f016 fd49 	bl	801e530 <sinf>
 8007a9e:	900a      	str	r0, [sp, #40]	; 0x28

    magX = mx * cosPitch + my * sinRoll * sinPitch + mz * cosRoll * sinPitch;
 8007aa0:	ed9d 7a00 	vldr	s14, [sp]
 8007aa4:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8007aa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007aac:	eddd 6a14 	vldr	s13, [sp, #80]	; 0x50
 8007ab0:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8007ab4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ab8:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
 8007abc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007ac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ac4:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 8007ac8:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8007acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ad0:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
 8007ad4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007adc:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24

    magY = my * cosRoll - mz * sinRoll;
 8007ae0:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 8007ae4:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8007ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007aec:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 8007af0:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8007af4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007af8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007afc:	edcd 7a08 	vstr	s15, [sp, #32]

    initialHdg = atan2f(-magY, magX);
 8007b00:	eddd 7a08 	vldr	s15, [sp, #32]
 8007b04:	eef1 7a67 	vneg.f32	s15, s15
 8007b08:	ee17 3a90 	vmov	r3, s15
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b10:	f016 fdf4 	bl	801e6fc <atan2f>
 8007b14:	9007      	str	r0, [sp, #28]

    cosRoll = cosf(initialRoll * 0.5f);
 8007b16:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 8007b1a:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8007b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b22:	ee17 0a90 	vmov	r0, s15
 8007b26:	f016 fccd 	bl	801e4c4 <cosf>
 8007b2a:	900d      	str	r0, [sp, #52]	; 0x34
    sinRoll = sinf(initialRoll * 0.5f);
 8007b2c:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 8007b30:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8007b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b38:	ee17 0a90 	vmov	r0, s15
 8007b3c:	f016 fcf8 	bl	801e530 <sinf>
 8007b40:	900c      	str	r0, [sp, #48]	; 0x30

    cosPitch = cosf(initialPitch * 0.5f);
 8007b42:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 8007b46:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8007b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b4e:	ee17 0a90 	vmov	r0, s15
 8007b52:	f016 fcb7 	bl	801e4c4 <cosf>
 8007b56:	900b      	str	r0, [sp, #44]	; 0x2c
    sinPitch = sinf(initialPitch * 0.5f);
 8007b58:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 8007b5c:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8007b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b64:	ee17 0a90 	vmov	r0, s15
 8007b68:	f016 fce2 	bl	801e530 <sinf>
 8007b6c:	900a      	str	r0, [sp, #40]	; 0x28

    cosHeading = cosf(initialHdg * 0.5f);
 8007b6e:	ed9d 7a07 	vldr	s14, [sp, #28]
 8007b72:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8007b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7a:	ee17 0a90 	vmov	r0, s15
 8007b7e:	f016 fca1 	bl	801e4c4 <cosf>
 8007b82:	9006      	str	r0, [sp, #24]
    sinHeading = sinf(initialHdg * 0.5f);
 8007b84:	ed9d 7a07 	vldr	s14, [sp, #28]
 8007b88:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8007b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b90:	ee17 0a90 	vmov	r0, s15
 8007b94:	f016 fccc 	bl	801e530 <sinf>
 8007b98:	9005      	str	r0, [sp, #20]

    q0 = cosRoll * cosPitch * cosHeading + sinRoll * sinPitch * sinHeading;
 8007b9a:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8007b9e:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8007ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba6:	ed9d 7a06 	vldr	s14, [sp, #24]
 8007baa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007bae:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
 8007bb2:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8007bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007bba:	eddd 6a05 	vldr	s13, [sp, #20]
 8007bbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bc6:	f240 0378 	movw	r3, #120	; 0x78
 8007bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007bce:	edc3 7a00 	vstr	s15, [r3]
    q1 = sinRoll * cosPitch * cosHeading - cosRoll * sinPitch * sinHeading;
 8007bd2:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 8007bd6:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8007bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bde:	ed9d 7a06 	vldr	s14, [sp, #24]
 8007be2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007be6:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
 8007bea:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8007bee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007bf2:	eddd 6a05 	vldr	s13, [sp, #20]
 8007bf6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bfe:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8007c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007c06:	edc3 7a00 	vstr	s15, [r3]
    q2 = cosRoll * sinPitch * cosHeading + sinRoll * cosPitch * sinHeading;
 8007c0a:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8007c0e:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8007c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c16:	ed9d 7a06 	vldr	s14, [sp, #24]
 8007c1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007c1e:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
 8007c22:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8007c26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c2a:	eddd 6a05 	vldr	s13, [sp, #20]
 8007c2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c36:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8007c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007c3e:	edc3 7a00 	vstr	s15, [r3]
    q3 = cosRoll * cosPitch * sinHeading - sinRoll * sinPitch * cosHeading;
 8007c42:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8007c46:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8007c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c4e:	ed9d 7a05 	vldr	s14, [sp, #20]
 8007c52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007c56:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
 8007c5a:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8007c5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c62:	eddd 6a06 	vldr	s13, [sp, #24]
 8007c66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007c6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c6e:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8007c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007c76:	edc3 7a00 	vstr	s15, [r3]

    // auxillary variables to reduce number of repeated operations, for 1st pass
    q0q0 = q0 * q0;
 8007c7a:	f240 0378 	movw	r3, #120	; 0x78
 8007c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007c82:	ed93 7a00 	vldr	s14, [r3]
 8007c86:	f240 0378 	movw	r3, #120	; 0x78
 8007c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007c8e:	edd3 7a00 	vldr	s15, [r3]
 8007c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c96:	f643 2334 	movw	r3, #14900	; 0x3a34
 8007c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007c9e:	edc3 7a00 	vstr	s15, [r3]
    q0q1 = q0 * q1;
 8007ca2:	f240 0378 	movw	r3, #120	; 0x78
 8007ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007caa:	ed93 7a00 	vldr	s14, [r3]
 8007cae:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8007cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007cb6:	edd3 7a00 	vldr	s15, [r3]
 8007cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cbe:	f643 2330 	movw	r3, #14896	; 0x3a30
 8007cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007cc6:	edc3 7a00 	vstr	s15, [r3]
    q0q2 = q0 * q2;
 8007cca:	f240 0378 	movw	r3, #120	; 0x78
 8007cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007cd2:	ed93 7a00 	vldr	s14, [r3]
 8007cd6:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8007cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007cde:	edd3 7a00 	vldr	s15, [r3]
 8007ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce6:	f643 234c 	movw	r3, #14924	; 0x3a4c
 8007cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007cee:	edc3 7a00 	vstr	s15, [r3]
    q0q3 = q0 * q3;
 8007cf2:	f240 0378 	movw	r3, #120	; 0x78
 8007cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007cfa:	ed93 7a00 	vldr	s14, [r3]
 8007cfe:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8007d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d06:	edd3 7a00 	vldr	s15, [r3]
 8007d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d0e:	f643 2348 	movw	r3, #14920	; 0x3a48
 8007d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d16:	edc3 7a00 	vstr	s15, [r3]
    q1q1 = q1 * q1;
 8007d1a:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8007d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d22:	ed93 7a00 	vldr	s14, [r3]
 8007d26:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8007d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d2e:	edd3 7a00 	vldr	s15, [r3]
 8007d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d36:	f643 2338 	movw	r3, #14904	; 0x3a38
 8007d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d3e:	edc3 7a00 	vstr	s15, [r3]
    q1q2 = q1 * q2;
 8007d42:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8007d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d4a:	ed93 7a00 	vldr	s14, [r3]
 8007d4e:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8007d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d56:	edd3 7a00 	vldr	s15, [r3]
 8007d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d5e:	f643 2328 	movw	r3, #14888	; 0x3a28
 8007d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d66:	edc3 7a00 	vstr	s15, [r3]
    q1q3 = q1 * q3;
 8007d6a:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8007d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d72:	ed93 7a00 	vldr	s14, [r3]
 8007d76:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8007d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d7e:	edd3 7a00 	vldr	s15, [r3]
 8007d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d86:	f643 2340 	movw	r3, #14912	; 0x3a40
 8007d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d8e:	edc3 7a00 	vstr	s15, [r3]
    q2q2 = q2 * q2;
 8007d92:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8007d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d9a:	ed93 7a00 	vldr	s14, [r3]
 8007d9e:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8007da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007da6:	edd3 7a00 	vldr	s15, [r3]
 8007daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dae:	f643 232c 	movw	r3, #14892	; 0x3a2c
 8007db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007db6:	edc3 7a00 	vstr	s15, [r3]
    q2q3 = q2 * q3;
 8007dba:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8007dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007dc2:	ed93 7a00 	vldr	s14, [r3]
 8007dc6:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8007dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007dce:	edd3 7a00 	vldr	s15, [r3]
 8007dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dd6:	f643 2344 	movw	r3, #14916	; 0x3a44
 8007dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007dde:	edc3 7a00 	vstr	s15, [r3]
    q3q3 = q3 * q3;
 8007de2:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8007de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007dea:	ed93 7a00 	vldr	s14, [r3]
 8007dee:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8007df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007df6:	edd3 7a00 	vldr	s15, [r3]
 8007dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dfe:	f643 233c 	movw	r3, #14908	; 0x3a3c
 8007e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e06:	edc3 7a00 	vstr	s15, [r3]
}
 8007e0a:	b011      	add	sp, #68	; 0x44
 8007e0c:	bd30      	pop	{r4, r5, pc}
 8007e0e:	bf00      	nop

08007e10 <MargAHRSupdate>:

void MargAHRSupdate(float gx, float gy, float gz,
                    float ax, float ay, float az,
                    float mx, float my, float mz,
                    float accelCutoff, uint8_t newMagData, float dt)
{
 8007e10:	b500      	push	{lr}
 8007e12:	b099      	sub	sp, #100	; 0x64
 8007e14:	9005      	str	r0, [sp, #20]
 8007e16:	9104      	str	r1, [sp, #16]
 8007e18:	9203      	str	r2, [sp, #12]
 8007e1a:	9302      	str	r3, [sp, #8]
    float vx, vy, vz, wx, wy, wz;
    float q0i, q1i, q2i, q3i;

    //-------------------------------------------

    if ((MargAHRSinitialized == false) && (newMagData == true))
 8007e1c:	f240 73d4 	movw	r3, #2004	; 0x7d4
 8007e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d114      	bne.n	8007e54 <MargAHRSupdate+0x44>
 8007e2a:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d110      	bne.n	8007e54 <MargAHRSupdate+0x44>
    {
        MargAHRSinit(ax, ay, az, mx, my, mz);
 8007e32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	9802      	ldr	r0, [sp, #8]
 8007e3c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007e3e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007e40:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007e42:	f7ff fdd9 	bl	80079f8 <MargAHRSinit>

        MargAHRSinitialized = true;
 8007e46:	f240 73d4 	movw	r3, #2004	; 0x7d4
 8007e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e4e:	f04f 0201 	mov.w	r2, #1
 8007e52:	701a      	strb	r2, [r3, #0]
    }

    //-------------------------------------------

    if (MargAHRSinitialized == true)
 8007e54:	f240 73d4 	movw	r3, #2004	; 0x7d4
 8007e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	f040 8771 	bne.w	8008d46 <MargAHRSupdate+0xf36>
    {
        halfT = dt * 0.5f;
 8007e64:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 8007e68:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8007e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e70:	f643 2354 	movw	r3, #14932	; 0x3a54
 8007e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e78:	edc3 7a00 	vstr	s15, [r3]

        norm = sqrt(SQR(ax) + SQR(ay) + SQR(az));
 8007e7c:	ed9d 7a02 	vldr	s14, [sp, #8]
 8007e80:	eddd 7a02 	vldr	s15, [sp, #8]
 8007e84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e88:	eddd 6a1a 	vldr	s13, [sp, #104]	; 0x68
 8007e8c:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8007e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007e98:	eddd 6a1b 	vldr	s13, [sp, #108]	; 0x6c
 8007e9c:	eddd 7a1b 	vldr	s15, [sp, #108]	; 0x6c
 8007ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ea8:	ee17 0a90 	vmov	r0, s15
 8007eac:	f018 fc3e 	bl	802072c <__aeabi_f2d>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	f016 fb78 	bl	801e5ac <sqrt>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	f018 ff20 	bl	8020d08 <__aeabi_d2f>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	9317      	str	r3, [sp, #92]	; 0x5c

        if (norm != 0.0f)
 8007ecc:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 8007ed0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ed8:	f000 8191 	beq.w	80081fe <MargAHRSupdate+0x3ee>
        {
			calculateAccConfidence(norm);
 8007edc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007ede:	f7ff fd17 	bl	8007910 <calculateAccConfidence>
            kpAcc = eepromConfig.KpAcc * accConfidence;
 8007ee2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8007ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007eea:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8007eee:	f240 037c 	movw	r3, #124	; 0x7c
 8007ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007ef6:	edd3 7a00 	vldr	s15, [r3]
 8007efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007efe:	f643 2350 	movw	r3, #14928	; 0x3a50
 8007f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007f06:	edc3 7a00 	vstr	s15, [r3]
            kiAcc = eepromConfig.KiAcc * accConfidence;
 8007f0a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8007f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007f12:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8007f16:	f240 037c 	movw	r3, #124	; 0x7c
 8007f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007f1e:	edd3 7a00 	vldr	s15, [r3]
 8007f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f26:	f643 2324 	movw	r3, #14884	; 0x3a24
 8007f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007f2e:	edc3 7a00 	vstr	s15, [r3]

            normR = 1.0f / norm;
 8007f32:	f8df 3e24 	ldr.w	r3, [pc, #3620]	; 8008d58 <MargAHRSupdate+0xf48>
 8007f36:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 8007f3a:	ee07 3a10 	vmov	s14, r3
 8007f3e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8007f42:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
            ax *= normR;
 8007f46:	ed9d 7a02 	vldr	s14, [sp, #8]
 8007f4a:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8007f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f52:	edcd 7a02 	vstr	s15, [sp, #8]
            ay *= normR;
 8007f56:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 8007f5a:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8007f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f62:	edcd 7a1a 	vstr	s15, [sp, #104]	; 0x68
            az *= normR;
 8007f66:	ed9d 7a1b 	vldr	s14, [sp, #108]	; 0x6c
 8007f6a:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8007f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f72:	edcd 7a1b 	vstr	s15, [sp, #108]	; 0x6c

            // estimated direction of gravity (v)
            vx = 2.0f * (q1q3 - q0q2);
 8007f76:	f643 2340 	movw	r3, #14912	; 0x3a40
 8007f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007f7e:	ed93 7a00 	vldr	s14, [r3]
 8007f82:	f643 234c 	movw	r3, #14924	; 0x3a4c
 8007f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007f8a:	edd3 7a00 	vldr	s15, [r3]
 8007f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007f96:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
            vy = 2.0f * (q0q1 + q2q3);
 8007f9a:	f643 2330 	movw	r3, #14896	; 0x3a30
 8007f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007fa2:	ed93 7a00 	vldr	s14, [r3]
 8007fa6:	f643 2344 	movw	r3, #14916	; 0x3a44
 8007faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007fae:	edd3 7a00 	vldr	s15, [r3]
 8007fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fb6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007fba:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
            vz = q0q0 - q1q1 - q2q2 + q3q3;
 8007fbe:	f643 2334 	movw	r3, #14900	; 0x3a34
 8007fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007fc6:	ed93 7a00 	vldr	s14, [r3]
 8007fca:	f643 2338 	movw	r3, #14904	; 0x3a38
 8007fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007fd2:	edd3 7a00 	vldr	s15, [r3]
 8007fd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007fda:	f643 232c 	movw	r3, #14892	; 0x3a2c
 8007fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007fe2:	edd3 7a00 	vldr	s15, [r3]
 8007fe6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007fea:	f643 233c 	movw	r3, #14908	; 0x3a3c
 8007fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007ff2:	edd3 7a00 	vldr	s15, [r3]
 8007ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ffa:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c

            // error is sum of cross product between reference direction
		    // of fields and direction measured by sensors
		    exAcc = vy * az - vz * ay;
 8007ffe:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 8008002:	eddd 7a1b 	vldr	s15, [sp, #108]	; 0x6c
 8008006:	ee27 7a27 	vmul.f32	s14, s14, s15
 800800a:	eddd 6a13 	vldr	s13, [sp, #76]	; 0x4c
 800800e:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8008012:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800801a:	f240 7398 	movw	r3, #1944	; 0x798
 800801e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008022:	edc3 7a00 	vstr	s15, [r3]
            eyAcc = vz * ax - vx * az;
 8008026:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
 800802a:	eddd 7a02 	vldr	s15, [sp, #8]
 800802e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008032:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 8008036:	eddd 7a1b 	vldr	s15, [sp, #108]	; 0x6c
 800803a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800803e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008042:	f240 739c 	movw	r3, #1948	; 0x79c
 8008046:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800804a:	edc3 7a00 	vstr	s15, [r3]
            ezAcc = vx * ay - vy * ax;
 800804e:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 8008052:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8008056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800805a:	eddd 6a14 	vldr	s13, [sp, #80]	; 0x50
 800805e:	eddd 7a02 	vldr	s15, [sp, #8]
 8008062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800806a:	f240 73a0 	movw	r3, #1952	; 0x7a0
 800806e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008072:	edc3 7a00 	vstr	s15, [r3]

            gx += exAcc * kpAcc;
 8008076:	f240 7398 	movw	r3, #1944	; 0x798
 800807a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800807e:	ed93 7a00 	vldr	s14, [r3]
 8008082:	f643 2350 	movw	r3, #14928	; 0x3a50
 8008086:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800808a:	edd3 7a00 	vldr	s15, [r3]
 800808e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008092:	ed9d 7a05 	vldr	s14, [sp, #20]
 8008096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800809a:	edcd 7a05 	vstr	s15, [sp, #20]
            gy += eyAcc * kpAcc;
 800809e:	f240 739c 	movw	r3, #1948	; 0x79c
 80080a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80080a6:	ed93 7a00 	vldr	s14, [r3]
 80080aa:	f643 2350 	movw	r3, #14928	; 0x3a50
 80080ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80080b2:	edd3 7a00 	vldr	s15, [r3]
 80080b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ba:	ed9d 7a04 	vldr	s14, [sp, #16]
 80080be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080c2:	edcd 7a04 	vstr	s15, [sp, #16]
            gz += ezAcc * kpAcc;
 80080c6:	f240 73a0 	movw	r3, #1952	; 0x7a0
 80080ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80080ce:	ed93 7a00 	vldr	s14, [r3]
 80080d2:	f643 2350 	movw	r3, #14928	; 0x3a50
 80080d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80080da:	edd3 7a00 	vldr	s15, [r3]
 80080de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080e2:	ed9d 7a03 	vldr	s14, [sp, #12]
 80080e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080ea:	edcd 7a03 	vstr	s15, [sp, #12]

            if (kiAcc > 0.0f)
 80080ee:	f643 2324 	movw	r3, #14884	; 0x3a24
 80080f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80080f6:	edd3 7a00 	vldr	s15, [r3]
 80080fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80080fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008102:	bfd4      	ite	le
 8008104:	2300      	movle	r3, #0
 8008106:	2301      	movgt	r3, #1
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d077      	beq.n	80081fe <MargAHRSupdate+0x3ee>
            {
		    	exAccInt += exAcc * kiAcc;
 800810e:	f240 7398 	movw	r3, #1944	; 0x798
 8008112:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008116:	ed93 7a00 	vldr	s14, [r3]
 800811a:	f643 2324 	movw	r3, #14884	; 0x3a24
 800811e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008122:	edd3 7a00 	vldr	s15, [r3]
 8008126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800812a:	f240 73a4 	movw	r3, #1956	; 0x7a4
 800812e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008132:	ed93 7a00 	vldr	s14, [r3]
 8008136:	ee77 7a87 	vadd.f32	s15, s15, s14
 800813a:	f240 73a4 	movw	r3, #1956	; 0x7a4
 800813e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008142:	edc3 7a00 	vstr	s15, [r3]
                eyAccInt += eyAcc * kiAcc;
 8008146:	f240 739c 	movw	r3, #1948	; 0x79c
 800814a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800814e:	ed93 7a00 	vldr	s14, [r3]
 8008152:	f643 2324 	movw	r3, #14884	; 0x3a24
 8008156:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800815a:	edd3 7a00 	vldr	s15, [r3]
 800815e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008162:	f240 73a8 	movw	r3, #1960	; 0x7a8
 8008166:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800816a:	ed93 7a00 	vldr	s14, [r3]
 800816e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008172:	f240 73a8 	movw	r3, #1960	; 0x7a8
 8008176:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800817a:	edc3 7a00 	vstr	s15, [r3]
                ezAccInt += ezAcc * kiAcc;
 800817e:	f240 73a0 	movw	r3, #1952	; 0x7a0
 8008182:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008186:	ed93 7a00 	vldr	s14, [r3]
 800818a:	f643 2324 	movw	r3, #14884	; 0x3a24
 800818e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008192:	edd3 7a00 	vldr	s15, [r3]
 8008196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800819a:	f240 73ac 	movw	r3, #1964	; 0x7ac
 800819e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80081a2:	ed93 7a00 	vldr	s14, [r3]
 80081a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80081aa:	f240 73ac 	movw	r3, #1964	; 0x7ac
 80081ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80081b2:	edc3 7a00 	vstr	s15, [r3]

                gx += exAccInt;
 80081b6:	f240 73a4 	movw	r3, #1956	; 0x7a4
 80081ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80081be:	edd3 7a00 	vldr	s15, [r3]
 80081c2:	ed9d 7a05 	vldr	s14, [sp, #20]
 80081c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081ca:	edcd 7a05 	vstr	s15, [sp, #20]
                gy += eyAccInt;
 80081ce:	f240 73a8 	movw	r3, #1960	; 0x7a8
 80081d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80081d6:	edd3 7a00 	vldr	s15, [r3]
 80081da:	ed9d 7a04 	vldr	s14, [sp, #16]
 80081de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081e2:	edcd 7a04 	vstr	s15, [sp, #16]
                gz += ezAccInt;
 80081e6:	f240 73ac 	movw	r3, #1964	; 0x7ac
 80081ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80081ee:	edd3 7a00 	vldr	s15, [r3]
 80081f2:	ed9d 7a03 	vldr	s14, [sp, #12]
 80081f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081fa:	edcd 7a03 	vstr	s15, [sp, #12]
		    }
	    }

        //-------------------------------------------

        norm = sqrt(SQR(mx) + SQR(my) + SQR(mz));
 80081fe:	ed9d 7a1c 	vldr	s14, [sp, #112]	; 0x70
 8008202:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8008206:	ee27 7a27 	vmul.f32	s14, s14, s15
 800820a:	eddd 6a1d 	vldr	s13, [sp, #116]	; 0x74
 800820e:	eddd 7a1d 	vldr	s15, [sp, #116]	; 0x74
 8008212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008216:	ee37 7a27 	vadd.f32	s14, s14, s15
 800821a:	eddd 6a1e 	vldr	s13, [sp, #120]	; 0x78
 800821e:	eddd 7a1e 	vldr	s15, [sp, #120]	; 0x78
 8008222:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800822a:	ee17 0a90 	vmov	r0, s15
 800822e:	f018 fa7d 	bl	802072c <__aeabi_f2d>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	4610      	mov	r0, r2
 8008238:	4619      	mov	r1, r3
 800823a:	f016 f9b7 	bl	801e5ac <sqrt>
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	4610      	mov	r0, r2
 8008244:	4619      	mov	r1, r3
 8008246:	f018 fd5f 	bl	8020d08 <__aeabi_d2f>
 800824a:	4603      	mov	r3, r0
 800824c:	9317      	str	r3, [sp, #92]	; 0x5c

        if ((newMagData == true) && (norm != 0.0f))
 800824e:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 8008252:	2b01      	cmp	r3, #1
 8008254:	f040 8298 	bne.w	8008788 <MargAHRSupdate+0x978>
 8008258:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 800825c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008264:	f000 8290 	beq.w	8008788 <MargAHRSupdate+0x978>
        {
            normR = 1.0f / norm;
 8008268:	f8df 3aec 	ldr.w	r3, [pc, #2796]	; 8008d58 <MargAHRSupdate+0xf48>
 800826c:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 8008270:	ee07 3a10 	vmov	s14, r3
 8008274:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008278:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
            mx *= normR;
 800827c:	ed9d 7a1c 	vldr	s14, [sp, #112]	; 0x70
 8008280:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8008284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008288:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
            my *= normR;
 800828c:	ed9d 7a1d 	vldr	s14, [sp, #116]	; 0x74
 8008290:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8008294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008298:	edcd 7a1d 	vstr	s15, [sp, #116]	; 0x74
            mz *= normR;
 800829c:	ed9d 7a1e 	vldr	s14, [sp, #120]	; 0x78
 80082a0:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 80082a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a8:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78

            // compute reference direction of flux
            hx = 2.0f * (mx * (0.5f - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
 80082ac:	f643 232c 	movw	r3, #14892	; 0x3a2c
 80082b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80082b4:	edd3 7a00 	vldr	s15, [r3]
 80082b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 80082bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80082c0:	f643 233c 	movw	r3, #14908	; 0x3a3c
 80082c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80082c8:	edd3 7a00 	vldr	s15, [r3]
 80082cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80082d0:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 80082d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082d8:	f643 2328 	movw	r3, #14888	; 0x3a28
 80082dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80082e0:	edd3 6a00 	vldr	s13, [r3]
 80082e4:	f643 2348 	movw	r3, #14920	; 0x3a48
 80082e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80082ec:	edd3 7a00 	vldr	s15, [r3]
 80082f0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80082f4:	eddd 7a1d 	vldr	s15, [sp, #116]	; 0x74
 80082f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80082fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008300:	f643 2340 	movw	r3, #14912	; 0x3a40
 8008304:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008308:	edd3 6a00 	vldr	s13, [r3]
 800830c:	f643 234c 	movw	r3, #14924	; 0x3a4c
 8008310:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008314:	edd3 7a00 	vldr	s15, [r3]
 8008318:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800831c:	eddd 7a1e 	vldr	s15, [sp, #120]	; 0x78
 8008320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008328:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800832c:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48

            hy = 2.0f * (mx * (q1q2 + q0q3) + my * (0.5f - q1q1 - q3q3) + mz * (q2q3 - q0q1));
 8008330:	f643 2328 	movw	r3, #14888	; 0x3a28
 8008334:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008338:	ed93 7a00 	vldr	s14, [r3]
 800833c:	f643 2348 	movw	r3, #14920	; 0x3a48
 8008340:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008344:	edd3 7a00 	vldr	s15, [r3]
 8008348:	ee37 7a27 	vadd.f32	s14, s14, s15
 800834c:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8008350:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008354:	f643 2338 	movw	r3, #14904	; 0x3a38
 8008358:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800835c:	edd3 7a00 	vldr	s15, [r3]
 8008360:	eef6 6a00 	vmov.f32	s13, #96	; 0x60
 8008364:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008368:	f643 233c 	movw	r3, #14908	; 0x3a3c
 800836c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008370:	edd3 7a00 	vldr	s15, [r3]
 8008374:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008378:	eddd 7a1d 	vldr	s15, [sp, #116]	; 0x74
 800837c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008380:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008384:	f643 2344 	movw	r3, #14916	; 0x3a44
 8008388:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800838c:	edd3 6a00 	vldr	s13, [r3]
 8008390:	f643 2330 	movw	r3, #14896	; 0x3a30
 8008394:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008398:	edd3 7a00 	vldr	s15, [r3]
 800839c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80083a0:	eddd 7a1e 	vldr	s15, [sp, #120]	; 0x78
 80083a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80083b0:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44

            hz = 2.0f * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5f - q1q1 - q2q2));
 80083b4:	f643 2340 	movw	r3, #14912	; 0x3a40
 80083b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80083bc:	ed93 7a00 	vldr	s14, [r3]
 80083c0:	f643 234c 	movw	r3, #14924	; 0x3a4c
 80083c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80083c8:	edd3 7a00 	vldr	s15, [r3]
 80083cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80083d0:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 80083d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80083d8:	f643 2344 	movw	r3, #14916	; 0x3a44
 80083dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80083e0:	edd3 6a00 	vldr	s13, [r3]
 80083e4:	f643 2330 	movw	r3, #14896	; 0x3a30
 80083e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80083ec:	edd3 7a00 	vldr	s15, [r3]
 80083f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80083f4:	eddd 7a1d 	vldr	s15, [sp, #116]	; 0x74
 80083f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008400:	f643 2338 	movw	r3, #14904	; 0x3a38
 8008404:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008408:	edd3 7a00 	vldr	s15, [r3]
 800840c:	eef6 6a00 	vmov.f32	s13, #96	; 0x60
 8008410:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008414:	f643 232c 	movw	r3, #14892	; 0x3a2c
 8008418:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800841c:	edd3 7a00 	vldr	s15, [r3]
 8008420:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008424:	eddd 7a1e 	vldr	s15, [sp, #120]	; 0x78
 8008428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800842c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008430:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008434:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40

            bx = sqrt((hx * hx) + (hy * hy));
 8008438:	ed9d 7a12 	vldr	s14, [sp, #72]	; 0x48
 800843c:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 8008440:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008444:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
 8008448:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 800844c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008454:	ee17 0a90 	vmov	r0, s15
 8008458:	f018 f968 	bl	802072c <__aeabi_f2d>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	4610      	mov	r0, r2
 8008462:	4619      	mov	r1, r3
 8008464:	f016 f8a2 	bl	801e5ac <sqrt>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4610      	mov	r0, r2
 800846e:	4619      	mov	r1, r3
 8008470:	f018 fc4a 	bl	8020d08 <__aeabi_d2f>
 8008474:	4603      	mov	r3, r0
 8008476:	930f      	str	r3, [sp, #60]	; 0x3c

            bz = hz;
 8008478:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800847a:	930e      	str	r3, [sp, #56]	; 0x38

            // estimated direction of flux (w)
            wx = 2.0f * (bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2));
 800847c:	f643 232c 	movw	r3, #14892	; 0x3a2c
 8008480:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008484:	edd3 7a00 	vldr	s15, [r3]
 8008488:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 800848c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008490:	f643 233c 	movw	r3, #14908	; 0x3a3c
 8008494:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008498:	edd3 7a00 	vldr	s15, [r3]
 800849c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80084a0:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80084a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80084a8:	f643 2340 	movw	r3, #14912	; 0x3a40
 80084ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084b0:	edd3 6a00 	vldr	s13, [r3]
 80084b4:	f643 234c 	movw	r3, #14924	; 0x3a4c
 80084b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084bc:	edd3 7a00 	vldr	s15, [r3]
 80084c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80084c4:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80084c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80084d4:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34

            wy = 2.0f * (bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3));
 80084d8:	f643 2328 	movw	r3, #14888	; 0x3a28
 80084dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084e0:	ed93 7a00 	vldr	s14, [r3]
 80084e4:	f643 2348 	movw	r3, #14920	; 0x3a48
 80084e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084ec:	edd3 7a00 	vldr	s15, [r3]
 80084f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80084f4:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80084f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80084fc:	f643 2330 	movw	r3, #14896	; 0x3a30
 8008500:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008504:	edd3 6a00 	vldr	s13, [r3]
 8008508:	f643 2344 	movw	r3, #14916	; 0x3a44
 800850c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008510:	edd3 7a00 	vldr	s15, [r3]
 8008514:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008518:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800851c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008524:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008528:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30

            wz = 2.0f * (bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2));
 800852c:	f643 234c 	movw	r3, #14924	; 0x3a4c
 8008530:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008534:	ed93 7a00 	vldr	s14, [r3]
 8008538:	f643 2340 	movw	r3, #14912	; 0x3a40
 800853c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008540:	edd3 7a00 	vldr	s15, [r3]
 8008544:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008548:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800854c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008550:	f643 2338 	movw	r3, #14904	; 0x3a38
 8008554:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008558:	edd3 7a00 	vldr	s15, [r3]
 800855c:	eef6 6a00 	vmov.f32	s13, #96	; 0x60
 8008560:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008564:	f643 232c 	movw	r3, #14892	; 0x3a2c
 8008568:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800856c:	edd3 7a00 	vldr	s15, [r3]
 8008570:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008574:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8008578:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800857c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008580:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008584:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c

            exMag = my * wz - mz * wy;
 8008588:	ed9d 7a1d 	vldr	s14, [sp, #116]	; 0x74
 800858c:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8008590:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008594:	eddd 6a1e 	vldr	s13, [sp, #120]	; 0x78
 8008598:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 800859c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085a4:	f240 73b0 	movw	r3, #1968	; 0x7b0
 80085a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80085ac:	edc3 7a00 	vstr	s15, [r3]
            eyMag = mz * wx - mx * wz;
 80085b0:	ed9d 7a1e 	vldr	s14, [sp, #120]	; 0x78
 80085b4:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80085b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80085bc:	eddd 6a1c 	vldr	s13, [sp, #112]	; 0x70
 80085c0:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 80085c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085cc:	f240 73b4 	movw	r3, #1972	; 0x7b4
 80085d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80085d4:	edc3 7a00 	vstr	s15, [r3]
            ezMag = mx * wy - my * wx;
 80085d8:	ed9d 7a1c 	vldr	s14, [sp, #112]	; 0x70
 80085dc:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 80085e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80085e4:	eddd 6a1d 	vldr	s13, [sp, #116]	; 0x74
 80085e8:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80085ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085f4:	f240 73b8 	movw	r3, #1976	; 0x7b8
 80085f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80085fc:	edc3 7a00 	vstr	s15, [r3]

			// use un-extrapolated old values between magnetometer updates
			// dubious as dT does not apply to the magnetometer calculation so
			// time scaling is embedded in KpMag and KiMag
			gx += exMag * eepromConfig.KpMag;
 8008600:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8008604:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008608:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800860c:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8008610:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008614:	edd3 7a00 	vldr	s15, [r3]
 8008618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800861c:	ed9d 7a05 	vldr	s14, [sp, #20]
 8008620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008624:	edcd 7a05 	vstr	s15, [sp, #20]
			gy += eyMag * eepromConfig.KpMag;
 8008628:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800862c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008630:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8008634:	f240 73b4 	movw	r3, #1972	; 0x7b4
 8008638:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800863c:	edd3 7a00 	vldr	s15, [r3]
 8008640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008644:	ed9d 7a04 	vldr	s14, [sp, #16]
 8008648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800864c:	edcd 7a04 	vstr	s15, [sp, #16]
			gz += ezMag * eepromConfig.KpMag;
 8008650:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8008654:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008658:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800865c:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8008660:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008664:	edd3 7a00 	vldr	s15, [r3]
 8008668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800866c:	ed9d 7a03 	vldr	s14, [sp, #12]
 8008670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008674:	edcd 7a03 	vstr	s15, [sp, #12]

			if (eepromConfig.KiMag > 0.0f)
 8008678:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800867c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008680:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008684:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800868c:	bfd4      	ite	le
 800868e:	2300      	movle	r3, #0
 8008690:	2301      	movgt	r3, #1
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b00      	cmp	r3, #0
 8008696:	d077      	beq.n	8008788 <MargAHRSupdate+0x978>
			{
				exMagInt += exMag * eepromConfig.KiMag;
 8008698:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800869c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80086a0:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80086a4:	f240 73b0 	movw	r3, #1968	; 0x7b0
 80086a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80086ac:	edd3 7a00 	vldr	s15, [r3]
 80086b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b4:	f240 73bc 	movw	r3, #1980	; 0x7bc
 80086b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80086bc:	ed93 7a00 	vldr	s14, [r3]
 80086c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086c4:	f240 73bc 	movw	r3, #1980	; 0x7bc
 80086c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80086cc:	edc3 7a00 	vstr	s15, [r3]
				eyMagInt += eyMag * eepromConfig.KiMag;
 80086d0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80086d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80086d8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80086dc:	f240 73b4 	movw	r3, #1972	; 0x7b4
 80086e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80086e4:	edd3 7a00 	vldr	s15, [r3]
 80086e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ec:	f240 73c0 	movw	r3, #1984	; 0x7c0
 80086f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80086f4:	ed93 7a00 	vldr	s14, [r3]
 80086f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086fc:	f240 73c0 	movw	r3, #1984	; 0x7c0
 8008700:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008704:	edc3 7a00 	vstr	s15, [r3]
				ezMagInt += ezMag * eepromConfig.KiMag;
 8008708:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800870c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008710:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8008714:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8008718:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800871c:	edd3 7a00 	vldr	s15, [r3]
 8008720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008724:	f240 73c4 	movw	r3, #1988	; 0x7c4
 8008728:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800872c:	ed93 7a00 	vldr	s14, [r3]
 8008730:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008734:	f240 73c4 	movw	r3, #1988	; 0x7c4
 8008738:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800873c:	edc3 7a00 	vstr	s15, [r3]

				gx += exMagInt;
 8008740:	f240 73bc 	movw	r3, #1980	; 0x7bc
 8008744:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008748:	edd3 7a00 	vldr	s15, [r3]
 800874c:	ed9d 7a05 	vldr	s14, [sp, #20]
 8008750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008754:	edcd 7a05 	vstr	s15, [sp, #20]
				gy += eyMagInt;
 8008758:	f240 73c0 	movw	r3, #1984	; 0x7c0
 800875c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008760:	edd3 7a00 	vldr	s15, [r3]
 8008764:	ed9d 7a04 	vldr	s14, [sp, #16]
 8008768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800876c:	edcd 7a04 	vstr	s15, [sp, #16]
				gz += ezMagInt;
 8008770:	f240 73c4 	movw	r3, #1988	; 0x7c4
 8008774:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008778:	edd3 7a00 	vldr	s15, [r3]
 800877c:	ed9d 7a03 	vldr	s14, [sp, #12]
 8008780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008784:	edcd 7a03 	vstr	s15, [sp, #12]
        }

        //-------------------------------------------

        // integrate quaternion rate
        q0i = (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 8008788:	f240 73c8 	movw	r3, #1992	; 0x7c8
 800878c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008790:	edd3 7a00 	vldr	s15, [r3]
 8008794:	eeb1 7a67 	vneg.f32	s14, s15
 8008798:	eddd 7a05 	vldr	s15, [sp, #20]
 800879c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80087a0:	f240 73cc 	movw	r3, #1996	; 0x7cc
 80087a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80087a8:	edd3 6a00 	vldr	s13, [r3]
 80087ac:	eddd 7a04 	vldr	s15, [sp, #16]
 80087b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80087b8:	f240 73d0 	movw	r3, #2000	; 0x7d0
 80087bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80087c0:	edd3 6a00 	vldr	s13, [r3]
 80087c4:	eddd 7a03 	vldr	s15, [sp, #12]
 80087c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80087d0:	f643 2354 	movw	r3, #14932	; 0x3a54
 80087d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80087d8:	edd3 7a00 	vldr	s15, [r3]
 80087dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e0:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
        q1i = ( q0 * gx + q2 * gz - q3 * gy) * halfT;
 80087e4:	f240 0378 	movw	r3, #120	; 0x78
 80087e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80087ec:	ed93 7a00 	vldr	s14, [r3]
 80087f0:	eddd 7a05 	vldr	s15, [sp, #20]
 80087f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80087f8:	f240 73cc 	movw	r3, #1996	; 0x7cc
 80087fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008800:	edd3 6a00 	vldr	s13, [r3]
 8008804:	eddd 7a03 	vldr	s15, [sp, #12]
 8008808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800880c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008810:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8008814:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008818:	edd3 6a00 	vldr	s13, [r3]
 800881c:	eddd 7a04 	vldr	s15, [sp, #16]
 8008820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008824:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008828:	f643 2354 	movw	r3, #14932	; 0x3a54
 800882c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008830:	edd3 7a00 	vldr	s15, [r3]
 8008834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008838:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
        q2i = ( q0 * gy - q1 * gz + q3 * gx) * halfT;
 800883c:	f240 0378 	movw	r3, #120	; 0x78
 8008840:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008844:	ed93 7a00 	vldr	s14, [r3]
 8008848:	eddd 7a04 	vldr	s15, [sp, #16]
 800884c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008850:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8008854:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008858:	edd3 6a00 	vldr	s13, [r3]
 800885c:	eddd 7a03 	vldr	s15, [sp, #12]
 8008860:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008864:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008868:	f240 73d0 	movw	r3, #2000	; 0x7d0
 800886c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008870:	edd3 6a00 	vldr	s13, [r3]
 8008874:	eddd 7a05 	vldr	s15, [sp, #20]
 8008878:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800887c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008880:	f643 2354 	movw	r3, #14932	; 0x3a54
 8008884:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008888:	edd3 7a00 	vldr	s15, [r3]
 800888c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008890:	edcd 7a08 	vstr	s15, [sp, #32]
        q3i = ( q0 * gz + q1 * gy - q2 * gx) * halfT;
 8008894:	f240 0378 	movw	r3, #120	; 0x78
 8008898:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800889c:	ed93 7a00 	vldr	s14, [r3]
 80088a0:	eddd 7a03 	vldr	s15, [sp, #12]
 80088a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80088a8:	f240 73c8 	movw	r3, #1992	; 0x7c8
 80088ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80088b0:	edd3 6a00 	vldr	s13, [r3]
 80088b4:	eddd 7a04 	vldr	s15, [sp, #16]
 80088b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088c0:	f240 73cc 	movw	r3, #1996	; 0x7cc
 80088c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80088c8:	edd3 6a00 	vldr	s13, [r3]
 80088cc:	eddd 7a05 	vldr	s15, [sp, #20]
 80088d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80088d8:	f643 2354 	movw	r3, #14932	; 0x3a54
 80088dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80088e0:	edd3 7a00 	vldr	s15, [r3]
 80088e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088e8:	edcd 7a07 	vstr	s15, [sp, #28]
        q0 += q0i;
 80088ec:	f240 0378 	movw	r3, #120	; 0x78
 80088f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80088f4:	ed93 7a00 	vldr	s14, [r3]
 80088f8:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80088fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008900:	f240 0378 	movw	r3, #120	; 0x78
 8008904:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008908:	edc3 7a00 	vstr	s15, [r3]
        q1 += q1i;
 800890c:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8008910:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008914:	ed93 7a00 	vldr	s14, [r3]
 8008918:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800891c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008920:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8008924:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008928:	edc3 7a00 	vstr	s15, [r3]
        q2 += q2i;
 800892c:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8008930:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008934:	ed93 7a00 	vldr	s14, [r3]
 8008938:	eddd 7a08 	vldr	s15, [sp, #32]
 800893c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008940:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8008944:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008948:	edc3 7a00 	vstr	s15, [r3]
        q3 += q3i;
 800894c:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8008950:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008954:	ed93 7a00 	vldr	s14, [r3]
 8008958:	eddd 7a07 	vldr	s15, [sp, #28]
 800895c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008960:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8008964:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008968:	edc3 7a00 	vstr	s15, [r3]

        // normalise quaternion
        normR = 1.0f / sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800896c:	f240 0378 	movw	r3, #120	; 0x78
 8008970:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008974:	ed93 7a00 	vldr	s14, [r3]
 8008978:	f240 0378 	movw	r3, #120	; 0x78
 800897c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008980:	edd3 7a00 	vldr	s15, [r3]
 8008984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008988:	f240 73c8 	movw	r3, #1992	; 0x7c8
 800898c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008990:	edd3 6a00 	vldr	s13, [r3]
 8008994:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8008998:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800899c:	edd3 7a00 	vldr	s15, [r3]
 80089a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80089a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80089a8:	f240 73cc 	movw	r3, #1996	; 0x7cc
 80089ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80089b0:	edd3 6a00 	vldr	s13, [r3]
 80089b4:	f240 73cc 	movw	r3, #1996	; 0x7cc
 80089b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80089bc:	edd3 7a00 	vldr	s15, [r3]
 80089c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80089c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80089c8:	f240 73d0 	movw	r3, #2000	; 0x7d0
 80089cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80089d0:	edd3 6a00 	vldr	s13, [r3]
 80089d4:	f240 73d0 	movw	r3, #2000	; 0x7d0
 80089d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80089dc:	edd3 7a00 	vldr	s15, [r3]
 80089e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80089e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089e8:	ee17 0a90 	vmov	r0, s15
 80089ec:	f017 fe9e 	bl	802072c <__aeabi_f2d>
 80089f0:	4602      	mov	r2, r0
 80089f2:	460b      	mov	r3, r1
 80089f4:	4610      	mov	r0, r2
 80089f6:	4619      	mov	r1, r3
 80089f8:	f015 fdd8 	bl	801e5ac <sqrt>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	a1d3      	add	r1, pc, #844	; (adr r1, 8008d50 <MargAHRSupdate+0xf40>)
 8008a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a06:	f018 f80f 	bl	8020a28 <__aeabi_ddiv>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4610      	mov	r0, r2
 8008a10:	4619      	mov	r1, r3
 8008a12:	f018 f979 	bl	8020d08 <__aeabi_d2f>
 8008a16:	4603      	mov	r3, r0
 8008a18:	9316      	str	r3, [sp, #88]	; 0x58
        q0 *= normR;
 8008a1a:	f240 0378 	movw	r3, #120	; 0x78
 8008a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008a22:	ed93 7a00 	vldr	s14, [r3]
 8008a26:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8008a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2e:	f240 0378 	movw	r3, #120	; 0x78
 8008a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008a36:	edc3 7a00 	vstr	s15, [r3]
        q1 *= normR;
 8008a3a:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8008a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008a42:	ed93 7a00 	vldr	s14, [r3]
 8008a46:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8008a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a4e:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8008a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008a56:	edc3 7a00 	vstr	s15, [r3]
        q2 *= normR;
 8008a5a:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8008a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008a62:	ed93 7a00 	vldr	s14, [r3]
 8008a66:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8008a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6e:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8008a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008a76:	edc3 7a00 	vstr	s15, [r3]
        q3 *= normR;
 8008a7a:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8008a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008a82:	ed93 7a00 	vldr	s14, [r3]
 8008a86:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8008a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a8e:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8008a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008a96:	edc3 7a00 	vstr	s15, [r3]

        // auxiliary variables to reduce number of repeated operations
        q0q0 = q0 * q0;
 8008a9a:	f240 0378 	movw	r3, #120	; 0x78
 8008a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008aa2:	ed93 7a00 	vldr	s14, [r3]
 8008aa6:	f240 0378 	movw	r3, #120	; 0x78
 8008aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008aae:	edd3 7a00 	vldr	s15, [r3]
 8008ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab6:	f643 2334 	movw	r3, #14900	; 0x3a34
 8008aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008abe:	edc3 7a00 	vstr	s15, [r3]
        q0q1 = q0 * q1;
 8008ac2:	f240 0378 	movw	r3, #120	; 0x78
 8008ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008aca:	ed93 7a00 	vldr	s14, [r3]
 8008ace:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8008ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008ad6:	edd3 7a00 	vldr	s15, [r3]
 8008ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ade:	f643 2330 	movw	r3, #14896	; 0x3a30
 8008ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008ae6:	edc3 7a00 	vstr	s15, [r3]
        q0q2 = q0 * q2;
 8008aea:	f240 0378 	movw	r3, #120	; 0x78
 8008aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008af2:	ed93 7a00 	vldr	s14, [r3]
 8008af6:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8008afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008afe:	edd3 7a00 	vldr	s15, [r3]
 8008b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b06:	f643 234c 	movw	r3, #14924	; 0x3a4c
 8008b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008b0e:	edc3 7a00 	vstr	s15, [r3]
        q0q3 = q0 * q3;
 8008b12:	f240 0378 	movw	r3, #120	; 0x78
 8008b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008b1a:	ed93 7a00 	vldr	s14, [r3]
 8008b1e:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8008b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008b26:	edd3 7a00 	vldr	s15, [r3]
 8008b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b2e:	f643 2348 	movw	r3, #14920	; 0x3a48
 8008b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008b36:	edc3 7a00 	vstr	s15, [r3]
        q1q1 = q1 * q1;
 8008b3a:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8008b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008b42:	ed93 7a00 	vldr	s14, [r3]
 8008b46:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8008b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008b4e:	edd3 7a00 	vldr	s15, [r3]
 8008b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b56:	f643 2338 	movw	r3, #14904	; 0x3a38
 8008b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008b5e:	edc3 7a00 	vstr	s15, [r3]
        q1q2 = q1 * q2;
 8008b62:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8008b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008b6a:	ed93 7a00 	vldr	s14, [r3]
 8008b6e:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8008b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008b76:	edd3 7a00 	vldr	s15, [r3]
 8008b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7e:	f643 2328 	movw	r3, #14888	; 0x3a28
 8008b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008b86:	edc3 7a00 	vstr	s15, [r3]
        q1q3 = q1 * q3;
 8008b8a:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8008b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008b92:	ed93 7a00 	vldr	s14, [r3]
 8008b96:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8008b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008b9e:	edd3 7a00 	vldr	s15, [r3]
 8008ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba6:	f643 2340 	movw	r3, #14912	; 0x3a40
 8008baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008bae:	edc3 7a00 	vstr	s15, [r3]
        q2q2 = q2 * q2;
 8008bb2:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8008bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008bba:	ed93 7a00 	vldr	s14, [r3]
 8008bbe:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8008bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008bc6:	edd3 7a00 	vldr	s15, [r3]
 8008bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bce:	f643 232c 	movw	r3, #14892	; 0x3a2c
 8008bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008bd6:	edc3 7a00 	vstr	s15, [r3]
        q2q3 = q2 * q3;
 8008bda:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8008bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008be2:	ed93 7a00 	vldr	s14, [r3]
 8008be6:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8008bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008bee:	edd3 7a00 	vldr	s15, [r3]
 8008bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bf6:	f643 2344 	movw	r3, #14916	; 0x3a44
 8008bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008bfe:	edc3 7a00 	vstr	s15, [r3]
        q3q3 = q3 * q3;
 8008c02:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8008c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008c0a:	ed93 7a00 	vldr	s14, [r3]
 8008c0e:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8008c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008c16:	edd3 7a00 	vldr	s15, [r3]
 8008c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c1e:	f643 233c 	movw	r3, #14908	; 0x3a3c
 8008c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008c26:	edc3 7a00 	vstr	s15, [r3]

        sensors.attitude500Hz[ROLL ] = atan2f( 2.0f * (q0q1 + q2q3), q0q0 - q1q1 - q2q2 + q3q3 );
 8008c2a:	f643 2330 	movw	r3, #14896	; 0x3a30
 8008c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008c32:	ed93 7a00 	vldr	s14, [r3]
 8008c36:	f643 2344 	movw	r3, #14916	; 0x3a44
 8008c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008c3e:	edd3 7a00 	vldr	s15, [r3]
 8008c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c46:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008c4a:	f643 2334 	movw	r3, #14900	; 0x3a34
 8008c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008c52:	ed93 7a00 	vldr	s14, [r3]
 8008c56:	f643 2338 	movw	r3, #14904	; 0x3a38
 8008c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008c5e:	edd3 7a00 	vldr	s15, [r3]
 8008c62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008c66:	f643 232c 	movw	r3, #14892	; 0x3a2c
 8008c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008c6e:	edd3 7a00 	vldr	s15, [r3]
 8008c72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008c76:	f643 233c 	movw	r3, #14908	; 0x3a3c
 8008c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008c7e:	edd3 7a00 	vldr	s15, [r3]
 8008c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c86:	ee16 0a90 	vmov	r0, s13
 8008c8a:	ee17 1a90 	vmov	r1, s15
 8008c8e:	f015 fd35 	bl	801e6fc <atan2f>
 8008c92:	4602      	mov	r2, r0
 8008c94:	f643 3398 	movw	r3, #15256	; 0x3b98
 8008c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008c9c:	619a      	str	r2, [r3, #24]
		sensors.attitude500Hz[PITCH] =  asinf( 2.0f * (q0q2 - q1q3) );
 8008c9e:	f643 234c 	movw	r3, #14924	; 0x3a4c
 8008ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008ca6:	ed93 7a00 	vldr	s14, [r3]
 8008caa:	f643 2340 	movw	r3, #14912	; 0x3a40
 8008cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008cb2:	edd3 7a00 	vldr	s15, [r3]
 8008cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008cba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008cbe:	ee17 0a90 	vmov	r0, s15
 8008cc2:	f015 fcc9 	bl	801e658 <asinf>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	f643 3398 	movw	r3, #15256	; 0x3b98
 8008ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008cd0:	61da      	str	r2, [r3, #28]
		sensors.attitude500Hz[YAW  ] = atan2f( 2.0f * (q0q3 + q1q2), q0q0 + q1q1 - q2q2 - q3q3 );
 8008cd2:	f643 2348 	movw	r3, #14920	; 0x3a48
 8008cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008cda:	ed93 7a00 	vldr	s14, [r3]
 8008cde:	f643 2328 	movw	r3, #14888	; 0x3a28
 8008ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008ce6:	edd3 7a00 	vldr	s15, [r3]
 8008cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cee:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008cf2:	f643 2334 	movw	r3, #14900	; 0x3a34
 8008cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008cfa:	ed93 7a00 	vldr	s14, [r3]
 8008cfe:	f643 2338 	movw	r3, #14904	; 0x3a38
 8008d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008d06:	edd3 7a00 	vldr	s15, [r3]
 8008d0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008d0e:	f643 232c 	movw	r3, #14892	; 0x3a2c
 8008d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008d16:	edd3 7a00 	vldr	s15, [r3]
 8008d1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008d1e:	f643 233c 	movw	r3, #14908	; 0x3a3c
 8008d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008d26:	edd3 7a00 	vldr	s15, [r3]
 8008d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d2e:	ee16 0a90 	vmov	r0, s13
 8008d32:	ee17 1a90 	vmov	r1, s15
 8008d36:	f015 fce1 	bl	801e6fc <atan2f>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	f643 3398 	movw	r3, #15256	; 0x3b98
 8008d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008d44:	621a      	str	r2, [r3, #32]
    }
}
 8008d46:	b019      	add	sp, #100	; 0x64
 8008d48:	bd00      	pop	{pc}
 8008d4a:	bf00      	nop
 8008d4c:	f3af 8000 	nop.w
 8008d50:	00000000 	.word	0x00000000
 8008d54:	3ff00000 	.word	0x3ff00000
 8008d58:	3f800000 	.word	0x3f800000
 8008d5c:	f3af 8000 	nop.w

08008d60 <highSpeedTelemDisable>:
// High Speed Telem Disable
///////////////////////////////////////////////////////////////////////////////

void highSpeedTelemDisable(void)
{
	highSpeedTelem1Enabled = false;
 8008d60:	f240 73df 	movw	r3, #2015	; 0x7df
 8008d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008d68:	f04f 0200 	mov.w	r2, #0
 8008d6c:	701a      	strb	r2, [r3, #0]
	highSpeedTelem2Enabled = false;
 8008d6e:	f240 73e0 	movw	r3, #2016	; 0x7e0
 8008d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008d76:	f04f 0200 	mov.w	r2, #0
 8008d7a:	701a      	strb	r2, [r3, #0]
	highSpeedTelem3Enabled = false;
 8008d7c:	f240 73e1 	movw	r3, #2017	; 0x7e1
 8008d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008d84:	f04f 0200 	mov.w	r2, #0
 8008d88:	701a      	strb	r2, [r3, #0]
	highSpeedTelem4Enabled = false;
 8008d8a:	f240 73e2 	movw	r3, #2018	; 0x7e2
 8008d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008d92:	f04f 0200 	mov.w	r2, #0
 8008d96:	701a      	strb	r2, [r3, #0]
	highSpeedTelem5Enabled = false;
 8008d98:	f240 73e3 	movw	r3, #2019	; 0x7e3
 8008d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008da0:	f04f 0200 	mov.w	r2, #0
 8008da4:	701a      	strb	r2, [r3, #0]
	highSpeedTelem6Enabled = false;
 8008da6:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8008daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008dae:	f04f 0200 	mov.w	r2, #0
 8008db2:	701a      	strb	r2, [r3, #0]
	highSpeedTelem7Enabled = false;
 8008db4:	f240 73e5 	movw	r3, #2021	; 0x7e5
 8008db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008dbc:	f04f 0200 	mov.w	r2, #0
 8008dc0:	701a      	strb	r2, [r3, #0]
	highSpeedTelem8Enabled = false;
 8008dc2:	f240 73e6 	movw	r3, #2022	; 0x7e6
 8008dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008dca:	f04f 0200 	mov.w	r2, #0
 8008dce:	701a      	strb	r2, [r3, #0]
	highSpeedTelem9Enabled = false;
 8008dd0:	f240 73e7 	movw	r3, #2023	; 0x7e7
 8008dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008dd8:	f04f 0200 	mov.w	r2, #0
 8008ddc:	701a      	strb	r2, [r3, #0]
}
 8008dde:	4770      	bx	lr

08008de0 <readStringUart1>:
///////////////////////////////////////////////////////////////////////////////
// Read Character String from Uart1 Comm
///////////////////////////////////////////////////////////////////////////////

char *readStringUart1(char *data, uint8_t length)
{
 8008de0:	b510      	push	{r4, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	9001      	str	r0, [sp, #4]
 8008de6:	460b      	mov	r3, r1
 8008de8:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8_t index    = 0;
 8008dec:	f04f 0300 	mov.w	r3, #0
 8008df0:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t timeout  = 0;
 8008df4:	f04f 0300 	mov.w	r3, #0
 8008df8:	f88d 300e 	strb.w	r3, [sp, #14]

    do
    {
        if (uart1Available() == false)
 8008dfc:	f7fd fd92 	bl	8006924 <uart1Available>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10a      	bne.n	8008e1c <readStringUart1+0x3c>
        {
            delay(10);
 8008e06:	f04f 000a 	mov.w	r0, #10
 8008e0a:	f7fd f973 	bl	80060f4 <delay>
            timeout++;
 8008e0e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008e12:	f103 0301 	add.w	r3, r3, #1
 8008e16:	f88d 300e 	strb.w	r3, [sp, #14]
 8008e1a:	e011      	b.n	8008e40 <readStringUart1+0x60>
        }
        else
        {
            data[index] = uart1Read();
 8008e1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008e20:	9a01      	ldr	r2, [sp, #4]
 8008e22:	18d4      	adds	r4, r2, r3
 8008e24:	f7fd fd94 	bl	8006950 <uart1Read>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	7023      	strb	r3, [r4, #0]
            timeout = 0;
 8008e2c:	f04f 0300 	mov.w	r3, #0
 8008e30:	f88d 300e 	strb.w	r3, [sp, #14]
            index++;
 8008e34:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008e38:	f103 0301 	add.w	r3, r3, #1
 8008e3c:	f88d 300f 	strb.w	r3, [sp, #15]
        }
    }
    while ((index == 0 || data[index-1] != ';') && (timeout < 5) && (index < length));
 8008e40:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d008      	beq.n	8008e5a <readStringUart1+0x7a>
 8008e48:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008e4c:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e50:	9a01      	ldr	r2, [sp, #4]
 8008e52:	18d3      	adds	r3, r2, r3
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	2b3b      	cmp	r3, #59	; 0x3b
 8008e58:	d009      	beq.n	8008e6e <readStringUart1+0x8e>
 8008e5a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008e5e:	2b04      	cmp	r3, #4
 8008e60:	d805      	bhi.n	8008e6e <readStringUart1+0x8e>
 8008e62:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8008e66:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d3c6      	bcc.n	8008dfc <readStringUart1+0x1c>

    data[index] = '\0';
 8008e6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008e72:	9a01      	ldr	r2, [sp, #4]
 8008e74:	18d3      	adds	r3, r2, r3
 8008e76:	f04f 0200 	mov.w	r2, #0
 8008e7a:	701a      	strb	r2, [r3, #0]

    return data;
 8008e7c:	9b01      	ldr	r3, [sp, #4]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	b004      	add	sp, #16
 8008e82:	bd10      	pop	{r4, pc}

08008e84 <readFloatUart1>:
///////////////////////////////////////////////////////////////////////////////
// Read Float from Uart1 Comm
///////////////////////////////////////////////////////////////////////////////

float readFloatUart1(void)
{
 8008e84:	b510      	push	{r4, lr}
 8008e86:	b084      	sub	sp, #16
    uint8_t index    = 0;
 8008e88:	f04f 0300 	mov.w	r3, #0
 8008e8c:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t timeout  = 0;
 8008e90:	f04f 0300 	mov.w	r3, #0
 8008e94:	f88d 300e 	strb.w	r3, [sp, #14]
    char    data[13] = "";
 8008e98:	f04f 0300 	mov.w	r3, #0
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	ab01      	add	r3, sp, #4
 8008ea0:	f04f 0200 	mov.w	r2, #0
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	f103 0304 	add.w	r3, r3, #4
 8008eaa:	f04f 0200 	mov.w	r2, #0
 8008eae:	601a      	str	r2, [r3, #0]
 8008eb0:	f103 0304 	add.w	r3, r3, #4
 8008eb4:	f04f 0200 	mov.w	r2, #0
 8008eb8:	701a      	strb	r2, [r3, #0]
 8008eba:	f103 0301 	add.w	r3, r3, #1

    do
    {
        if (uart1Available() == false)
 8008ebe:	f7fd fd31 	bl	8006924 <uart1Available>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10a      	bne.n	8008ede <readFloatUart1+0x5a>
        {
            delay(10);
 8008ec8:	f04f 000a 	mov.w	r0, #10
 8008ecc:	f7fd f912 	bl	80060f4 <delay>
            timeout++;
 8008ed0:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008ed4:	f103 0301 	add.w	r3, r3, #1
 8008ed8:	f88d 300e 	strb.w	r3, [sp, #14]
 8008edc:	e013      	b.n	8008f06 <readFloatUart1+0x82>
        }
        else
        {
            data[index] = uart1Read();
 8008ede:	f89d 400f 	ldrb.w	r4, [sp, #15]
 8008ee2:	f7fd fd35 	bl	8006950 <uart1Read>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	461a      	mov	r2, r3
 8008eea:	a904      	add	r1, sp, #16
 8008eec:	190b      	adds	r3, r1, r4
 8008eee:	f803 2c10 	strb.w	r2, [r3, #-16]
            timeout = 0;
 8008ef2:	f04f 0300 	mov.w	r3, #0
 8008ef6:	f88d 300e 	strb.w	r3, [sp, #14]
            index++;
 8008efa:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008efe:	f103 0301 	add.w	r3, r3, #1
 8008f02:	f88d 300f 	strb.w	r3, [sp, #15]
        }
    }
    while ((index == 0 || data[index-1] != ';') && (timeout < 5) && (index < sizeof(data)-1));
 8008f06:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d009      	beq.n	8008f22 <readFloatUart1+0x9e>
 8008f0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008f12:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f16:	aa04      	add	r2, sp, #16
 8008f18:	18d3      	adds	r3, r2, r3
 8008f1a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8008f1e:	2b3b      	cmp	r3, #59	; 0x3b
 8008f20:	d007      	beq.n	8008f32 <readFloatUart1+0xae>
 8008f22:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008f26:	2b04      	cmp	r3, #4
 8008f28:	d803      	bhi.n	8008f32 <readFloatUart1+0xae>
 8008f2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008f2e:	2b0b      	cmp	r3, #11
 8008f30:	d9c5      	bls.n	8008ebe <readFloatUart1+0x3a>

    data[index] = '\0';
 8008f32:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008f36:	a904      	add	r1, sp, #16
 8008f38:	18cb      	adds	r3, r1, r3
 8008f3a:	f04f 0200 	mov.w	r2, #0
 8008f3e:	f803 2c10 	strb.w	r2, [r3, #-16]

    return stringToFloat(data);
 8008f42:	466b      	mov	r3, sp
 8008f44:	4618      	mov	r0, r3
 8008f46:	f00e fe1f 	bl	8017b88 <stringToFloat>
 8008f4a:	4603      	mov	r3, r0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	b004      	add	sp, #16
 8008f50:	bd10      	pop	{r4, pc}
 8008f52:	bf00      	nop

08008f54 <readUsbPID>:
///////////////////////////////////////////////////////////////////////////////
// Read PID Values from Uart1 Comm
///////////////////////////////////////////////////////////////////////////////

void readUsbPID(unsigned char PIDid)
{
 8008f54:	b500      	push	{lr}
 8008f56:	b085      	sub	sp, #20
 8008f58:	4603      	mov	r3, r0
 8008f5a:	f88d 3007 	strb.w	r3, [sp, #7]
  struct PIDdata* pid = &eepromConfig.PID[PIDid];
 8008f5e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008f62:	4613      	mov	r3, r2
 8008f64:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008f68:	189b      	adds	r3, r3, r2
 8008f6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008f6e:	461a      	mov	r2, r3
 8008f70:	4b1a      	ldr	r3, [pc, #104]	; (8008fdc <readUsbPID+0x88>)
 8008f72:	18d3      	adds	r3, r2, r3
 8008f74:	9303      	str	r3, [sp, #12]

  pid->B             = readFloatUart1();
 8008f76:	f7ff ff85 	bl	8008e84 <readFloatUart1>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	9b03      	ldr	r3, [sp, #12]
 8008f7e:	601a      	str	r2, [r3, #0]
  pid->P             = readFloatUart1();
 8008f80:	f7ff ff80 	bl	8008e84 <readFloatUart1>
 8008f84:	4602      	mov	r2, r0
 8008f86:	9b03      	ldr	r3, [sp, #12]
 8008f88:	605a      	str	r2, [r3, #4]
  pid->I             = readFloatUart1();
 8008f8a:	f7ff ff7b 	bl	8008e84 <readFloatUart1>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	9b03      	ldr	r3, [sp, #12]
 8008f92:	609a      	str	r2, [r3, #8]
  pid->D             = readFloatUart1();
 8008f94:	f7ff ff76 	bl	8008e84 <readFloatUart1>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	9b03      	ldr	r3, [sp, #12]
 8008f9c:	60da      	str	r2, [r3, #12]
  pid->windupGuard   = readFloatUart1();
 8008f9e:	f7ff ff71 	bl	8008e84 <readFloatUart1>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	9b03      	ldr	r3, [sp, #12]
 8008fa6:	615a      	str	r2, [r3, #20]
  pid->iTerm          = 0.0f;
 8008fa8:	9b03      	ldr	r3, [sp, #12]
 8008faa:	4a0d      	ldr	r2, [pc, #52]	; (8008fe0 <readUsbPID+0x8c>)
 8008fac:	611a      	str	r2, [r3, #16]
  pid->lastDcalcValue = 0.0f;
 8008fae:	9b03      	ldr	r3, [sp, #12]
 8008fb0:	4a0b      	ldr	r2, [pc, #44]	; (8008fe0 <readUsbPID+0x8c>)
 8008fb2:	619a      	str	r2, [r3, #24]
  pid->lastDterm      = 0.0f;
 8008fb4:	9b03      	ldr	r3, [sp, #12]
 8008fb6:	4a0a      	ldr	r2, [pc, #40]	; (8008fe0 <readUsbPID+0x8c>)
 8008fb8:	61da      	str	r2, [r3, #28]
  pid->lastLastDterm  = 0.0f;
 8008fba:	9b03      	ldr	r3, [sp, #12]
 8008fbc:	4a08      	ldr	r2, [pc, #32]	; (8008fe0 <readUsbPID+0x8c>)
 8008fbe:	621a      	str	r2, [r3, #32]
  pid->dErrorCalc     =(uint8_t)readFloatUart1();
 8008fc0:	f7ff ff60 	bl	8008e84 <readFloatUart1>
 8008fc4:	ee07 0a90 	vmov	s15, r0
 8008fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fcc:	ee17 3a90 	vmov	r3, s15
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	9b03      	ldr	r3, [sp, #12]
 8008fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8008fd8:	b005      	add	sp, #20
 8008fda:	bd00      	pop	{pc}
 8008fdc:	20003c94 	.word	0x20003c94
 8008fe0:	00000000 	.word	0x00000000

08008fe4 <cliCom>:
///////////////////////////////////////////////////////////////////////////////
// CLI Communication
///////////////////////////////////////////////////////////////////////////////

void cliCom(void)
{
 8008fe4:	b500      	push	{lr}
 8008fe6:	b085      	sub	sp, #20
	uint8_t  index;

    if ((uart1Available() && !validCommand))
 8008fe8:	f7fd fc9c 	bl	8006924 <uart1Available>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d010      	beq.n	8009014 <cliCom+0x30>
 8008ff2:	f240 73de 	movw	r3, #2014	; 0x7de
 8008ff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d108      	bne.n	8009014 <cliCom+0x30>
    	queryType = uart1Read();
 8009002:	f7fd fca5 	bl	8006950 <uart1Read>
 8009006:	4603      	mov	r3, r0
 8009008:	461a      	mov	r2, r3
 800900a:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800900e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009012:	701a      	strb	r2, [r3, #0]

    switch (queryType)
 8009014:	f240 73dd 	movw	r3, #2013	; 0x7dd
 8009018:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	b2db      	uxtb	r3, r3
 8009020:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8009024:	2b4a      	cmp	r3, #74	; 0x4a
 8009026:	f202 85b5 	bhi.w	800bb94 <cliCom+0x2bb0>
 800902a:	a201      	add	r2, pc, #4	; (adr r2, 8009030 <cliCom+0x4c>)
 800902c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009030:	0800b495 	.word	0x0800b495
 8009034:	0800b361 	.word	0x0800b361
 8009038:	0800b385 	.word	0x0800b385
 800903c:	0800b3a7 	.word	0x0800b3a7
 8009040:	0800b3c9 	.word	0x0800b3c9
 8009044:	0800b3eb 	.word	0x0800b3eb
 8009048:	0800b40d 	.word	0x0800b40d
 800904c:	0800b42f 	.word	0x0800b42f
 8009050:	0800b451 	.word	0x0800b451
 8009054:	0800b473 	.word	0x0800b473
 8009058:	0800bb95 	.word	0x0800bb95
 800905c:	0800bb95 	.word	0x0800bb95
 8009060:	0800bb95 	.word	0x0800bb95
 8009064:	0800bb95 	.word	0x0800bb95
 8009068:	0800bb95 	.word	0x0800bb95
 800906c:	0800b8c1 	.word	0x0800b8c1
 8009070:	0800bb95 	.word	0x0800bb95
 8009074:	0800b4a9 	.word	0x0800b4a9
 8009078:	0800b4db 	.word	0x0800b4db
 800907c:	0800b50d 	.word	0x0800b50d
 8009080:	0800b53f 	.word	0x0800b53f
 8009084:	0800b571 	.word	0x0800b571
 8009088:	0800b5a3 	.word	0x0800b5a3
 800908c:	0800b5d5 	.word	0x0800b5d5
 8009090:	0800b607 	.word	0x0800b607
 8009094:	0800b639 	.word	0x0800b639
 8009098:	0800b66b 	.word	0x0800b66b
 800909c:	0800b69d 	.word	0x0800b69d
 80090a0:	0800b6cf 	.word	0x0800b6cf
 80090a4:	0800b701 	.word	0x0800b701
 80090a8:	0800b723 	.word	0x0800b723
 80090ac:	0800b745 	.word	0x0800b745
 80090b0:	0800b767 	.word	0x0800b767
 80090b4:	0800b789 	.word	0x0800b789
 80090b8:	0800b7ab 	.word	0x0800b7ab
 80090bc:	0800b7c9 	.word	0x0800b7c9
 80090c0:	0800b7e7 	.word	0x0800b7e7
 80090c4:	0800b805 	.word	0x0800b805
 80090c8:	0800b823 	.word	0x0800b823
 80090cc:	0800b855 	.word	0x0800b855
 80090d0:	0800b883 	.word	0x0800b883
 80090d4:	0800b8a1 	.word	0x0800b8a1
 80090d8:	0800b8b1 	.word	0x0800b8b1
 80090dc:	0800bb95 	.word	0x0800bb95
 80090e0:	0800bb95 	.word	0x0800bb95
 80090e4:	0800bb95 	.word	0x0800bb95
 80090e8:	0800bb95 	.word	0x0800bb95
 80090ec:	0800bb95 	.word	0x0800bb95
 80090f0:	0800bb95 	.word	0x0800bb95
 80090f4:	0800915d 	.word	0x0800915d
 80090f8:	080095cd 	.word	0x080095cd
 80090fc:	08009a3d 	.word	0x08009a3d
 8009100:	08009ead 	.word	0x08009ead
 8009104:	0800a31d 	.word	0x0800a31d
 8009108:	0800a471 	.word	0x0800a471
 800910c:	0800a5c5 	.word	0x0800a5c5
 8009110:	0800a667 	.word	0x0800a667
 8009114:	0800a709 	.word	0x0800a709
 8009118:	0800a7e7 	.word	0x0800a7e7
 800911c:	0800a889 	.word	0x0800a889
 8009120:	0800a95b 	.word	0x0800a95b
 8009124:	0800aa65 	.word	0x0800aa65
 8009128:	0800abbb 	.word	0x0800abbb
 800912c:	0800ad1b 	.word	0x0800ad1b
 8009130:	0800ad3b 	.word	0x0800ad3b
 8009134:	0800ad5b 	.word	0x0800ad5b
 8009138:	0800ad7b 	.word	0x0800ad7b
 800913c:	0800ae59 	.word	0x0800ae59
 8009140:	0800afb3 	.word	0x0800afb3
 8009144:	0800b04d 	.word	0x0800b04d
 8009148:	0800b0fb 	.word	0x0800b0fb
 800914c:	0800b2ad 	.word	0x0800b2ad
 8009150:	0800b327 	.word	0x0800b327
 8009154:	0800b339 	.word	0x0800b339
 8009158:	0800b34f 	.word	0x0800b34f
    {
        ///////////////////////////////

        case 'a': // Rate PIDs
            uart1Print("\n");
 800915c:	f24b 405c 	movw	r0, #46172	; 0xb45c
 8009160:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009164:	f7fd fc5c 	bl	8006a20 <uart1Print>

            uart1Print("Roll Rate PID:  ");
 8009168:	f24b 4060 	movw	r0, #46176	; 0xb460
 800916c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009170:	f7fd fc56 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_RATE_PID].B);           uart1Print(numberString);
 8009174:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009178:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800917c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009180:	4618      	mov	r0, r3
 8009182:	f017 fad3 	bl	802072c <__aeabi_f2d>
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	e9cd 2300 	strd	r2, r3, [sp]
 800918e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009192:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009196:	f04f 0110 	mov.w	r1, #16
 800919a:	f24b 4274 	movw	r2, #46196	; 0xb474
 800919e:	f6c0 0202 	movt	r2, #2050	; 0x802
 80091a2:	f018 f9d1 	bl	8021548 <snprintf>
 80091a6:	f643 3078 	movw	r0, #15224	; 0x3b78
 80091aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80091ae:	f7fd fc37 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_RATE_PID].P);           uart1Print(numberString);
 80091b2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80091b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80091ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091be:	4618      	mov	r0, r3
 80091c0:	f017 fab4 	bl	802072c <__aeabi_f2d>
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	e9cd 2300 	strd	r2, r3, [sp]
 80091cc:	f643 3078 	movw	r0, #15224	; 0x3b78
 80091d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80091d4:	f04f 0110 	mov.w	r1, #16
 80091d8:	f24b 4274 	movw	r2, #46196	; 0xb474
 80091dc:	f6c0 0202 	movt	r2, #2050	; 0x802
 80091e0:	f018 f9b2 	bl	8021548 <snprintf>
 80091e4:	f643 3078 	movw	r0, #15224	; 0x3b78
 80091e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80091ec:	f7fd fc18 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_RATE_PID].I);           uart1Print(numberString);
 80091f0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80091f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80091f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80091fc:	4618      	mov	r0, r3
 80091fe:	f017 fa95 	bl	802072c <__aeabi_f2d>
 8009202:	4602      	mov	r2, r0
 8009204:	460b      	mov	r3, r1
 8009206:	e9cd 2300 	strd	r2, r3, [sp]
 800920a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800920e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009212:	f04f 0110 	mov.w	r1, #16
 8009216:	f24b 4274 	movw	r2, #46196	; 0xb474
 800921a:	f6c0 0202 	movt	r2, #2050	; 0x802
 800921e:	f018 f993 	bl	8021548 <snprintf>
 8009222:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009226:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800922a:	f7fd fbf9 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_RATE_PID].D);           uart1Print(numberString);
 800922e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009232:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009236:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800923a:	4618      	mov	r0, r3
 800923c:	f017 fa76 	bl	802072c <__aeabi_f2d>
 8009240:	4602      	mov	r2, r0
 8009242:	460b      	mov	r3, r1
 8009244:	e9cd 2300 	strd	r2, r3, [sp]
 8009248:	f643 3078 	movw	r0, #15224	; 0x3b78
 800924c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009250:	f04f 0110 	mov.w	r1, #16
 8009254:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009258:	f6c0 0202 	movt	r2, #2050	; 0x802
 800925c:	f018 f974 	bl	8021548 <snprintf>
 8009260:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009264:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009268:	f7fd fbda 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_RATE_PID].windupGuard); uart1Print(numberString);
 800926c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009270:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009274:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009278:	4618      	mov	r0, r3
 800927a:	f017 fa57 	bl	802072c <__aeabi_f2d>
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	e9cd 2300 	strd	r2, r3, [sp]
 8009286:	f643 3078 	movw	r0, #15224	; 0x3b78
 800928a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800928e:	f04f 0110 	mov.w	r1, #16
 8009292:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009296:	f6c0 0202 	movt	r2, #2050	; 0x802
 800929a:	f018 f955 	bl	8021548 <snprintf>
 800929e:	f643 3078 	movw	r0, #15224	; 0x3b78
 80092a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80092a6:	f7fd fbbb 	bl	8006a20 <uart1Print>
            if  (eepromConfig.PID[ROLL_RATE_PID].dErrorCalc)
 80092aa:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80092ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80092b2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d006      	beq.n	80092c8 <cliCom+0x2e4>
                uart1Print("Error\n");
 80092ba:	f24b 407c 	movw	r0, #46204	; 0xb47c
 80092be:	f6c0 0002 	movt	r0, #2050	; 0x802
 80092c2:	f7fd fbad 	bl	8006a20 <uart1Print>
 80092c6:	e005      	b.n	80092d4 <cliCom+0x2f0>
            else
                uart1Print("State\n");
 80092c8:	f24b 4084 	movw	r0, #46212	; 0xb484
 80092cc:	f6c0 0002 	movt	r0, #2050	; 0x802
 80092d0:	f7fd fba6 	bl	8006a20 <uart1Print>

            uart1Print("Pitch Rate PID: ");
 80092d4:	f24b 408c 	movw	r0, #46220	; 0xb48c
 80092d8:	f6c0 0002 	movt	r0, #2050	; 0x802
 80092dc:	f7fd fba0 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_RATE_PID].B);           uart1Print(numberString);
 80092e0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80092e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80092e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80092ec:	4618      	mov	r0, r3
 80092ee:	f017 fa1d 	bl	802072c <__aeabi_f2d>
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	e9cd 2300 	strd	r2, r3, [sp]
 80092fa:	f643 3078 	movw	r0, #15224	; 0x3b78
 80092fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009302:	f04f 0110 	mov.w	r1, #16
 8009306:	f24b 4274 	movw	r2, #46196	; 0xb474
 800930a:	f6c0 0202 	movt	r2, #2050	; 0x802
 800930e:	f018 f91b 	bl	8021548 <snprintf>
 8009312:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009316:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800931a:	f7fd fb81 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_RATE_PID].P);           uart1Print(numberString);
 800931e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009322:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009326:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800932a:	4618      	mov	r0, r3
 800932c:	f017 f9fe 	bl	802072c <__aeabi_f2d>
 8009330:	4602      	mov	r2, r0
 8009332:	460b      	mov	r3, r1
 8009334:	e9cd 2300 	strd	r2, r3, [sp]
 8009338:	f643 3078 	movw	r0, #15224	; 0x3b78
 800933c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009340:	f04f 0110 	mov.w	r1, #16
 8009344:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009348:	f6c0 0202 	movt	r2, #2050	; 0x802
 800934c:	f018 f8fc 	bl	8021548 <snprintf>
 8009350:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009354:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009358:	f7fd fb62 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_RATE_PID].I);           uart1Print(numberString);
 800935c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009360:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009364:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8009368:	4618      	mov	r0, r3
 800936a:	f017 f9df 	bl	802072c <__aeabi_f2d>
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	e9cd 2300 	strd	r2, r3, [sp]
 8009376:	f643 3078 	movw	r0, #15224	; 0x3b78
 800937a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800937e:	f04f 0110 	mov.w	r1, #16
 8009382:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009386:	f6c0 0202 	movt	r2, #2050	; 0x802
 800938a:	f018 f8dd 	bl	8021548 <snprintf>
 800938e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009392:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009396:	f7fd fb43 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_RATE_PID].D);           uart1Print(numberString);
 800939a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800939e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80093a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80093a6:	4618      	mov	r0, r3
 80093a8:	f017 f9c0 	bl	802072c <__aeabi_f2d>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	e9cd 2300 	strd	r2, r3, [sp]
 80093b4:	f643 3078 	movw	r0, #15224	; 0x3b78
 80093b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80093bc:	f04f 0110 	mov.w	r1, #16
 80093c0:	f24b 4274 	movw	r2, #46196	; 0xb474
 80093c4:	f6c0 0202 	movt	r2, #2050	; 0x802
 80093c8:	f018 f8be 	bl	8021548 <snprintf>
 80093cc:	f643 3078 	movw	r0, #15224	; 0x3b78
 80093d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80093d4:	f7fd fb24 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_RATE_PID].windupGuard); uart1Print(numberString);
 80093d8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80093dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80093e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80093e4:	4618      	mov	r0, r3
 80093e6:	f017 f9a1 	bl	802072c <__aeabi_f2d>
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	e9cd 2300 	strd	r2, r3, [sp]
 80093f2:	f643 3078 	movw	r0, #15224	; 0x3b78
 80093f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80093fa:	f04f 0110 	mov.w	r1, #16
 80093fe:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009402:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009406:	f018 f89f 	bl	8021548 <snprintf>
 800940a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800940e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009412:	f7fd fb05 	bl	8006a20 <uart1Print>
            if  (eepromConfig.PID[PITCH_RATE_PID].dErrorCalc)
 8009416:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800941a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800941e:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8009422:	2b00      	cmp	r3, #0
 8009424:	d006      	beq.n	8009434 <cliCom+0x450>
                uart1Print("Error\n");
 8009426:	f24b 407c 	movw	r0, #46204	; 0xb47c
 800942a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800942e:	f7fd faf7 	bl	8006a20 <uart1Print>
 8009432:	e005      	b.n	8009440 <cliCom+0x45c>
            else
                uart1Print("State\n");
 8009434:	f24b 4084 	movw	r0, #46212	; 0xb484
 8009438:	f6c0 0002 	movt	r0, #2050	; 0x802
 800943c:	f7fd faf0 	bl	8006a20 <uart1Print>

            uart1Print("Yaw Rate PID:   ");
 8009440:	f24b 40a0 	movw	r0, #46240	; 0xb4a0
 8009444:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009448:	f7fd faea 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[YAW_RATE_PID].B);           uart1Print(numberString);
 800944c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009450:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009454:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009458:	4618      	mov	r0, r3
 800945a:	f017 f967 	bl	802072c <__aeabi_f2d>
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	e9cd 2300 	strd	r2, r3, [sp]
 8009466:	f643 3078 	movw	r0, #15224	; 0x3b78
 800946a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800946e:	f04f 0110 	mov.w	r1, #16
 8009472:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009476:	f6c0 0202 	movt	r2, #2050	; 0x802
 800947a:	f018 f865 	bl	8021548 <snprintf>
 800947e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009482:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009486:	f7fd facb 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[YAW_RATE_PID].P);           uart1Print(numberString);
 800948a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800948e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009492:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009496:	4618      	mov	r0, r3
 8009498:	f017 f948 	bl	802072c <__aeabi_f2d>
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	e9cd 2300 	strd	r2, r3, [sp]
 80094a4:	f643 3078 	movw	r0, #15224	; 0x3b78
 80094a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80094ac:	f04f 0110 	mov.w	r1, #16
 80094b0:	f24b 4274 	movw	r2, #46196	; 0xb474
 80094b4:	f6c0 0202 	movt	r2, #2050	; 0x802
 80094b8:	f018 f846 	bl	8021548 <snprintf>
 80094bc:	f643 3078 	movw	r0, #15224	; 0x3b78
 80094c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80094c4:	f7fd faac 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[YAW_RATE_PID].I);           uart1Print(numberString);
 80094c8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80094cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80094d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80094d4:	4618      	mov	r0, r3
 80094d6:	f017 f929 	bl	802072c <__aeabi_f2d>
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	e9cd 2300 	strd	r2, r3, [sp]
 80094e2:	f643 3078 	movw	r0, #15224	; 0x3b78
 80094e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80094ea:	f04f 0110 	mov.w	r1, #16
 80094ee:	f24b 4274 	movw	r2, #46196	; 0xb474
 80094f2:	f6c0 0202 	movt	r2, #2050	; 0x802
 80094f6:	f018 f827 	bl	8021548 <snprintf>
 80094fa:	f643 3078 	movw	r0, #15224	; 0x3b78
 80094fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009502:	f7fd fa8d 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[YAW_RATE_PID].D);           uart1Print(numberString);
 8009506:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800950a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800950e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009512:	4618      	mov	r0, r3
 8009514:	f017 f90a 	bl	802072c <__aeabi_f2d>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	e9cd 2300 	strd	r2, r3, [sp]
 8009520:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009524:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009528:	f04f 0110 	mov.w	r1, #16
 800952c:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009530:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009534:	f018 f808 	bl	8021548 <snprintf>
 8009538:	f643 3078 	movw	r0, #15224	; 0x3b78
 800953c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009540:	f7fd fa6e 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[YAW_RATE_PID].windupGuard); uart1Print(numberString);
 8009544:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009548:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800954c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009550:	4618      	mov	r0, r3
 8009552:	f017 f8eb 	bl	802072c <__aeabi_f2d>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	e9cd 2300 	strd	r2, r3, [sp]
 800955e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009562:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009566:	f04f 0110 	mov.w	r1, #16
 800956a:	f24b 4274 	movw	r2, #46196	; 0xb474
 800956e:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009572:	f017 ffe9 	bl	8021548 <snprintf>
 8009576:	f643 3078 	movw	r0, #15224	; 0x3b78
 800957a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800957e:	f7fd fa4f 	bl	8006a20 <uart1Print>
            if  (eepromConfig.PID[YAW_RATE_PID].dErrorCalc)
 8009582:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009586:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800958a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800958e:	2b00      	cmp	r3, #0
 8009590:	d006      	beq.n	80095a0 <cliCom+0x5bc>
                uart1Print("Error\n");
 8009592:	f24b 407c 	movw	r0, #46204	; 0xb47c
 8009596:	f6c0 0002 	movt	r0, #2050	; 0x802
 800959a:	f7fd fa41 	bl	8006a20 <uart1Print>
 800959e:	e005      	b.n	80095ac <cliCom+0x5c8>
            else
                uart1Print("State\n");
 80095a0:	f24b 4084 	movw	r0, #46212	; 0xb484
 80095a4:	f6c0 0002 	movt	r0, #2050	; 0x802
 80095a8:	f7fd fa3a 	bl	8006a20 <uart1Print>

            queryType = 'x';
 80095ac:	f240 73dd 	movw	r3, #2013	; 0x7dd
 80095b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80095b4:	f04f 0278 	mov.w	r2, #120	; 0x78
 80095b8:	701a      	strb	r2, [r3, #0]
            validCommand = false;
 80095ba:	f240 73de 	movw	r3, #2014	; 0x7de
 80095be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80095c2:	f04f 0200 	mov.w	r2, #0
 80095c6:	701a      	strb	r2, [r3, #0]
            break;
 80095c8:	f002 bae4 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'b': // Attitude PIDs
            uart1Print("\n");
 80095cc:	f24b 405c 	movw	r0, #46172	; 0xb45c
 80095d0:	f6c0 0002 	movt	r0, #2050	; 0x802
 80095d4:	f7fd fa24 	bl	8006a20 <uart1Print>

            uart1Print("Roll Attitude PID:  ");
 80095d8:	f24b 40b4 	movw	r0, #46260	; 0xb4b4
 80095dc:	f6c0 0002 	movt	r0, #2050	; 0x802
 80095e0:	f7fd fa1e 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_ATT_PID].B);           uart1Print(numberString);
 80095e4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80095e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80095ec:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80095f0:	4618      	mov	r0, r3
 80095f2:	f017 f89b 	bl	802072c <__aeabi_f2d>
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	e9cd 2300 	strd	r2, r3, [sp]
 80095fe:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009602:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009606:	f04f 0110 	mov.w	r1, #16
 800960a:	f24b 4274 	movw	r2, #46196	; 0xb474
 800960e:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009612:	f017 ff99 	bl	8021548 <snprintf>
 8009616:	f643 3078 	movw	r0, #15224	; 0x3b78
 800961a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800961e:	f7fd f9ff 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_ATT_PID].P);           uart1Print(numberString);
 8009622:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009626:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800962a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800962e:	4618      	mov	r0, r3
 8009630:	f017 f87c 	bl	802072c <__aeabi_f2d>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	e9cd 2300 	strd	r2, r3, [sp]
 800963c:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009640:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009644:	f04f 0110 	mov.w	r1, #16
 8009648:	f24b 4274 	movw	r2, #46196	; 0xb474
 800964c:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009650:	f017 ff7a 	bl	8021548 <snprintf>
 8009654:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009658:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800965c:	f7fd f9e0 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_ATT_PID].I);           uart1Print(numberString);
 8009660:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009664:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009668:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800966c:	4618      	mov	r0, r3
 800966e:	f017 f85d 	bl	802072c <__aeabi_f2d>
 8009672:	4602      	mov	r2, r0
 8009674:	460b      	mov	r3, r1
 8009676:	e9cd 2300 	strd	r2, r3, [sp]
 800967a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800967e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009682:	f04f 0110 	mov.w	r1, #16
 8009686:	f24b 4274 	movw	r2, #46196	; 0xb474
 800968a:	f6c0 0202 	movt	r2, #2050	; 0x802
 800968e:	f017 ff5b 	bl	8021548 <snprintf>
 8009692:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009696:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800969a:	f7fd f9c1 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_ATT_PID].D);           uart1Print(numberString);
 800969e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80096a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80096a6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80096aa:	4618      	mov	r0, r3
 80096ac:	f017 f83e 	bl	802072c <__aeabi_f2d>
 80096b0:	4602      	mov	r2, r0
 80096b2:	460b      	mov	r3, r1
 80096b4:	e9cd 2300 	strd	r2, r3, [sp]
 80096b8:	f643 3078 	movw	r0, #15224	; 0x3b78
 80096bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80096c0:	f04f 0110 	mov.w	r1, #16
 80096c4:	f24b 4274 	movw	r2, #46196	; 0xb474
 80096c8:	f6c0 0202 	movt	r2, #2050	; 0x802
 80096cc:	f017 ff3c 	bl	8021548 <snprintf>
 80096d0:	f643 3078 	movw	r0, #15224	; 0x3b78
 80096d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80096d8:	f7fd f9a2 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_ATT_PID].windupGuard); uart1Print(numberString);
 80096dc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80096e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80096e4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80096e8:	4618      	mov	r0, r3
 80096ea:	f017 f81f 	bl	802072c <__aeabi_f2d>
 80096ee:	4602      	mov	r2, r0
 80096f0:	460b      	mov	r3, r1
 80096f2:	e9cd 2300 	strd	r2, r3, [sp]
 80096f6:	f643 3078 	movw	r0, #15224	; 0x3b78
 80096fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80096fe:	f04f 0110 	mov.w	r1, #16
 8009702:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009706:	f6c0 0202 	movt	r2, #2050	; 0x802
 800970a:	f017 ff1d 	bl	8021548 <snprintf>
 800970e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009712:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009716:	f7fd f983 	bl	8006a20 <uart1Print>
            if  (eepromConfig.PID[ROLL_ATT_PID].dErrorCalc)
 800971a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800971e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009722:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8009726:	2b00      	cmp	r3, #0
 8009728:	d006      	beq.n	8009738 <cliCom+0x754>
                uart1Print("Error\n");
 800972a:	f24b 407c 	movw	r0, #46204	; 0xb47c
 800972e:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009732:	f7fd f975 	bl	8006a20 <uart1Print>
 8009736:	e005      	b.n	8009744 <cliCom+0x760>
            else
                uart1Print("State\n");
 8009738:	f24b 4084 	movw	r0, #46212	; 0xb484
 800973c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009740:	f7fd f96e 	bl	8006a20 <uart1Print>

            uart1Print("Pitch Attitude PID: ");
 8009744:	f24b 40cc 	movw	r0, #46284	; 0xb4cc
 8009748:	f6c0 0002 	movt	r0, #2050	; 0x802
 800974c:	f7fd f968 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_ATT_PID].B);           uart1Print(numberString);
 8009750:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009754:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009758:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800975c:	4618      	mov	r0, r3
 800975e:	f016 ffe5 	bl	802072c <__aeabi_f2d>
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	e9cd 2300 	strd	r2, r3, [sp]
 800976a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800976e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009772:	f04f 0110 	mov.w	r1, #16
 8009776:	f24b 4274 	movw	r2, #46196	; 0xb474
 800977a:	f6c0 0202 	movt	r2, #2050	; 0x802
 800977e:	f017 fee3 	bl	8021548 <snprintf>
 8009782:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009786:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800978a:	f7fd f949 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_ATT_PID].P);           uart1Print(numberString);
 800978e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009792:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009796:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800979a:	4618      	mov	r0, r3
 800979c:	f016 ffc6 	bl	802072c <__aeabi_f2d>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	e9cd 2300 	strd	r2, r3, [sp]
 80097a8:	f643 3078 	movw	r0, #15224	; 0x3b78
 80097ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80097b0:	f04f 0110 	mov.w	r1, #16
 80097b4:	f24b 4274 	movw	r2, #46196	; 0xb474
 80097b8:	f6c0 0202 	movt	r2, #2050	; 0x802
 80097bc:	f017 fec4 	bl	8021548 <snprintf>
 80097c0:	f643 3078 	movw	r0, #15224	; 0x3b78
 80097c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80097c8:	f7fd f92a 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_ATT_PID].I);           uart1Print(numberString);
 80097cc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80097d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80097d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80097d8:	4618      	mov	r0, r3
 80097da:	f016 ffa7 	bl	802072c <__aeabi_f2d>
 80097de:	4602      	mov	r2, r0
 80097e0:	460b      	mov	r3, r1
 80097e2:	e9cd 2300 	strd	r2, r3, [sp]
 80097e6:	f643 3078 	movw	r0, #15224	; 0x3b78
 80097ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80097ee:	f04f 0110 	mov.w	r1, #16
 80097f2:	f24b 4274 	movw	r2, #46196	; 0xb474
 80097f6:	f6c0 0202 	movt	r2, #2050	; 0x802
 80097fa:	f017 fea5 	bl	8021548 <snprintf>
 80097fe:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009802:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009806:	f7fd f90b 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_ATT_PID].D);           uart1Print(numberString);
 800980a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800980e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009812:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8009816:	4618      	mov	r0, r3
 8009818:	f016 ff88 	bl	802072c <__aeabi_f2d>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	e9cd 2300 	strd	r2, r3, [sp]
 8009824:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009828:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800982c:	f04f 0110 	mov.w	r1, #16
 8009830:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009834:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009838:	f017 fe86 	bl	8021548 <snprintf>
 800983c:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009840:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009844:	f7fd f8ec 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_ATT_PID].windupGuard); uart1Print(numberString);
 8009848:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800984c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009850:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8009854:	4618      	mov	r0, r3
 8009856:	f016 ff69 	bl	802072c <__aeabi_f2d>
 800985a:	4602      	mov	r2, r0
 800985c:	460b      	mov	r3, r1
 800985e:	e9cd 2300 	strd	r2, r3, [sp]
 8009862:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009866:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800986a:	f04f 0110 	mov.w	r1, #16
 800986e:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009872:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009876:	f017 fe67 	bl	8021548 <snprintf>
 800987a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800987e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009882:	f7fd f8cd 	bl	8006a20 <uart1Print>
            if  (eepromConfig.PID[PITCH_ATT_PID].dErrorCalc)
 8009886:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800988a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800988e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009892:	2b00      	cmp	r3, #0
 8009894:	d006      	beq.n	80098a4 <cliCom+0x8c0>
                uart1Print("Error\n");
 8009896:	f24b 407c 	movw	r0, #46204	; 0xb47c
 800989a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800989e:	f7fd f8bf 	bl	8006a20 <uart1Print>
 80098a2:	e005      	b.n	80098b0 <cliCom+0x8cc>
            else
                uart1Print("State\n");
 80098a4:	f24b 4084 	movw	r0, #46212	; 0xb484
 80098a8:	f6c0 0002 	movt	r0, #2050	; 0x802
 80098ac:	f7fd f8b8 	bl	8006a20 <uart1Print>

            uart1Print("Heading PID:        ");
 80098b0:	f24b 40e4 	movw	r0, #46308	; 0xb4e4
 80098b4:	f6c0 0002 	movt	r0, #2050	; 0x802
 80098b8:	f7fd f8b2 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HEADING_PID].B);           uart1Print(numberString);
 80098bc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80098c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80098c4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80098c8:	4618      	mov	r0, r3
 80098ca:	f016 ff2f 	bl	802072c <__aeabi_f2d>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	e9cd 2300 	strd	r2, r3, [sp]
 80098d6:	f643 3078 	movw	r0, #15224	; 0x3b78
 80098da:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80098de:	f04f 0110 	mov.w	r1, #16
 80098e2:	f24b 4274 	movw	r2, #46196	; 0xb474
 80098e6:	f6c0 0202 	movt	r2, #2050	; 0x802
 80098ea:	f017 fe2d 	bl	8021548 <snprintf>
 80098ee:	f643 3078 	movw	r0, #15224	; 0x3b78
 80098f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80098f6:	f7fd f893 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HEADING_PID].P);           uart1Print(numberString);
 80098fa:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80098fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009902:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8009906:	4618      	mov	r0, r3
 8009908:	f016 ff10 	bl	802072c <__aeabi_f2d>
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	e9cd 2300 	strd	r2, r3, [sp]
 8009914:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009918:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800991c:	f04f 0110 	mov.w	r1, #16
 8009920:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009924:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009928:	f017 fe0e 	bl	8021548 <snprintf>
 800992c:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009930:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009934:	f7fd f874 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HEADING_PID].I);           uart1Print(numberString);
 8009938:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800993c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009940:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8009944:	4618      	mov	r0, r3
 8009946:	f016 fef1 	bl	802072c <__aeabi_f2d>
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	e9cd 2300 	strd	r2, r3, [sp]
 8009952:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009956:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800995a:	f04f 0110 	mov.w	r1, #16
 800995e:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009962:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009966:	f017 fdef 	bl	8021548 <snprintf>
 800996a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800996e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009972:	f7fd f855 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HEADING_PID].D);           uart1Print(numberString);
 8009976:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800997a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800997e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8009982:	4618      	mov	r0, r3
 8009984:	f016 fed2 	bl	802072c <__aeabi_f2d>
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	e9cd 2300 	strd	r2, r3, [sp]
 8009990:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009994:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009998:	f04f 0110 	mov.w	r1, #16
 800999c:	f24b 4274 	movw	r2, #46196	; 0xb474
 80099a0:	f6c0 0202 	movt	r2, #2050	; 0x802
 80099a4:	f017 fdd0 	bl	8021548 <snprintf>
 80099a8:	f643 3078 	movw	r0, #15224	; 0x3b78
 80099ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80099b0:	f7fd f836 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HEADING_PID].windupGuard); uart1Print(numberString);
 80099b4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80099b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80099bc:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80099c0:	4618      	mov	r0, r3
 80099c2:	f016 feb3 	bl	802072c <__aeabi_f2d>
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	e9cd 2300 	strd	r2, r3, [sp]
 80099ce:	f643 3078 	movw	r0, #15224	; 0x3b78
 80099d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80099d6:	f04f 0110 	mov.w	r1, #16
 80099da:	f24b 4274 	movw	r2, #46196	; 0xb474
 80099de:	f6c0 0202 	movt	r2, #2050	; 0x802
 80099e2:	f017 fdb1 	bl	8021548 <snprintf>
 80099e6:	f643 3078 	movw	r0, #15224	; 0x3b78
 80099ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80099ee:	f7fd f817 	bl	8006a20 <uart1Print>
            if  (eepromConfig.PID[HEADING_PID].dErrorCalc)
 80099f2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80099f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80099fa:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d006      	beq.n	8009a10 <cliCom+0xa2c>
                uart1Print("Error\n");
 8009a02:	f24b 407c 	movw	r0, #46204	; 0xb47c
 8009a06:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009a0a:	f7fd f809 	bl	8006a20 <uart1Print>
 8009a0e:	e005      	b.n	8009a1c <cliCom+0xa38>
            else
                uart1Print("State\n");
 8009a10:	f24b 4084 	movw	r0, #46212	; 0xb484
 8009a14:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009a18:	f7fd f802 	bl	8006a20 <uart1Print>

            queryType = 'x';
 8009a1c:	f240 73dd 	movw	r3, #2013	; 0x7dd
 8009a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009a24:	f04f 0278 	mov.w	r2, #120	; 0x78
 8009a28:	701a      	strb	r2, [r3, #0]
            validCommand = false;
 8009a2a:	f240 73de 	movw	r3, #2014	; 0x7de
 8009a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009a32:	f04f 0200 	mov.w	r2, #0
 8009a36:	701a      	strb	r2, [r3, #0]
            break;
 8009a38:	f002 b8ac 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'c': // Velocity PIDs
            uart1Print("\n");
 8009a3c:	f24b 405c 	movw	r0, #46172	; 0xb45c
 8009a40:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009a44:	f7fc ffec 	bl	8006a20 <uart1Print>

            uart1Print("nDot PID:  ");
 8009a48:	f24b 40fc 	movw	r0, #46332	; 0xb4fc
 8009a4c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009a50:	f7fc ffe6 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[NDOT_PID].B);           uart1Print(numberString);
 8009a54:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009a5c:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8009a60:	4618      	mov	r0, r3
 8009a62:	f016 fe63 	bl	802072c <__aeabi_f2d>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	e9cd 2300 	strd	r2, r3, [sp]
 8009a6e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009a72:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009a76:	f04f 0110 	mov.w	r1, #16
 8009a7a:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009a7e:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009a82:	f017 fd61 	bl	8021548 <snprintf>
 8009a86:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009a8a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009a8e:	f7fc ffc7 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[NDOT_PID].P);           uart1Print(numberString);
 8009a92:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009a9a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f016 fe44 	bl	802072c <__aeabi_f2d>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	e9cd 2300 	strd	r2, r3, [sp]
 8009aac:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009ab0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009ab4:	f04f 0110 	mov.w	r1, #16
 8009ab8:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009abc:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009ac0:	f017 fd42 	bl	8021548 <snprintf>
 8009ac4:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009ac8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009acc:	f7fc ffa8 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[NDOT_PID].I);           uart1Print(numberString);
 8009ad0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009ad8:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8009adc:	4618      	mov	r0, r3
 8009ade:	f016 fe25 	bl	802072c <__aeabi_f2d>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	e9cd 2300 	strd	r2, r3, [sp]
 8009aea:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009aee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009af2:	f04f 0110 	mov.w	r1, #16
 8009af6:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009afa:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009afe:	f017 fd23 	bl	8021548 <snprintf>
 8009b02:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009b06:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009b0a:	f7fc ff89 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[NDOT_PID].D);           uart1Print(numberString);
 8009b0e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009b16:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f016 fe06 	bl	802072c <__aeabi_f2d>
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	e9cd 2300 	strd	r2, r3, [sp]
 8009b28:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009b2c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009b30:	f04f 0110 	mov.w	r1, #16
 8009b34:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009b38:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009b3c:	f017 fd04 	bl	8021548 <snprintf>
 8009b40:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009b44:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009b48:	f7fc ff6a 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[NDOT_PID].windupGuard); uart1Print(numberString);
 8009b4c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009b54:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f016 fde7 	bl	802072c <__aeabi_f2d>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	e9cd 2300 	strd	r2, r3, [sp]
 8009b66:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009b6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009b6e:	f04f 0110 	mov.w	r1, #16
 8009b72:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009b76:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009b7a:	f017 fce5 	bl	8021548 <snprintf>
 8009b7e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009b82:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009b86:	f7fc ff4b 	bl	8006a20 <uart1Print>
            if  (eepromConfig.PID[NDOT_PID].dErrorCalc)
 8009b8a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009b92:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d006      	beq.n	8009ba8 <cliCom+0xbc4>
                uart1Print("Error\n");
 8009b9a:	f24b 407c 	movw	r0, #46204	; 0xb47c
 8009b9e:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009ba2:	f7fc ff3d 	bl	8006a20 <uart1Print>
 8009ba6:	e005      	b.n	8009bb4 <cliCom+0xbd0>
            else
                uart1Print("State\n");
 8009ba8:	f24b 4084 	movw	r0, #46212	; 0xb484
 8009bac:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009bb0:	f7fc ff36 	bl	8006a20 <uart1Print>

            uart1Print("eDot PID:  ");
 8009bb4:	f24b 5008 	movw	r0, #46344	; 0xb508
 8009bb8:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009bbc:	f7fc ff30 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[EDOT_PID].B);           uart1Print(numberString);
 8009bc0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009bc8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f016 fdad 	bl	802072c <__aeabi_f2d>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	e9cd 2300 	strd	r2, r3, [sp]
 8009bda:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009bde:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009be2:	f04f 0110 	mov.w	r1, #16
 8009be6:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009bea:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009bee:	f017 fcab 	bl	8021548 <snprintf>
 8009bf2:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009bf6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009bfa:	f7fc ff11 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[EDOT_PID].P);           uart1Print(numberString);
 8009bfe:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009c06:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f016 fd8e 	bl	802072c <__aeabi_f2d>
 8009c10:	4602      	mov	r2, r0
 8009c12:	460b      	mov	r3, r1
 8009c14:	e9cd 2300 	strd	r2, r3, [sp]
 8009c18:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009c1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009c20:	f04f 0110 	mov.w	r1, #16
 8009c24:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009c28:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009c2c:	f017 fc8c 	bl	8021548 <snprintf>
 8009c30:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009c34:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009c38:	f7fc fef2 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[EDOT_PID].I);           uart1Print(numberString);
 8009c3c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009c44:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f016 fd6f 	bl	802072c <__aeabi_f2d>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	460b      	mov	r3, r1
 8009c52:	e9cd 2300 	strd	r2, r3, [sp]
 8009c56:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009c5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009c5e:	f04f 0110 	mov.w	r1, #16
 8009c62:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009c66:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009c6a:	f017 fc6d 	bl	8021548 <snprintf>
 8009c6e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009c72:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009c76:	f7fc fed3 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[EDOT_PID].D);           uart1Print(numberString);
 8009c7a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009c82:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8009c86:	4618      	mov	r0, r3
 8009c88:	f016 fd50 	bl	802072c <__aeabi_f2d>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	e9cd 2300 	strd	r2, r3, [sp]
 8009c94:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009c98:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009c9c:	f04f 0110 	mov.w	r1, #16
 8009ca0:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009ca4:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009ca8:	f017 fc4e 	bl	8021548 <snprintf>
 8009cac:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009cb0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009cb4:	f7fc feb4 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[EDOT_PID].windupGuard); uart1Print(numberString);
 8009cb8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009cc0:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f016 fd31 	bl	802072c <__aeabi_f2d>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	e9cd 2300 	strd	r2, r3, [sp]
 8009cd2:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009cd6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009cda:	f04f 0110 	mov.w	r1, #16
 8009cde:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009ce2:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009ce6:	f017 fc2f 	bl	8021548 <snprintf>
 8009cea:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009cee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009cf2:	f7fc fe95 	bl	8006a20 <uart1Print>
            if  (eepromConfig.PID[EDOT_PID].dErrorCalc)
 8009cf6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009cfe:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d006      	beq.n	8009d14 <cliCom+0xd30>
                uart1Print("Error\n");
 8009d06:	f24b 407c 	movw	r0, #46204	; 0xb47c
 8009d0a:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009d0e:	f7fc fe87 	bl	8006a20 <uart1Print>
 8009d12:	e005      	b.n	8009d20 <cliCom+0xd3c>
            else
                uart1Print("State\n");
 8009d14:	f24b 4084 	movw	r0, #46212	; 0xb484
 8009d18:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009d1c:	f7fc fe80 	bl	8006a20 <uart1Print>

            uart1Print("hDot PID:  ");
 8009d20:	f24b 5014 	movw	r0, #46356	; 0xb514
 8009d24:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009d28:	f7fc fe7a 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HDOT_PID].B);           uart1Print(numberString);
 8009d2c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009d34:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f016 fcf7 	bl	802072c <__aeabi_f2d>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	e9cd 2300 	strd	r2, r3, [sp]
 8009d46:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009d4a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009d4e:	f04f 0110 	mov.w	r1, #16
 8009d52:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009d56:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009d5a:	f017 fbf5 	bl	8021548 <snprintf>
 8009d5e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009d62:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009d66:	f7fc fe5b 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HDOT_PID].P);           uart1Print(numberString);
 8009d6a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009d72:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8009d76:	4618      	mov	r0, r3
 8009d78:	f016 fcd8 	bl	802072c <__aeabi_f2d>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	e9cd 2300 	strd	r2, r3, [sp]
 8009d84:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009d88:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009d8c:	f04f 0110 	mov.w	r1, #16
 8009d90:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009d94:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009d98:	f017 fbd6 	bl	8021548 <snprintf>
 8009d9c:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009da0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009da4:	f7fc fe3c 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HDOT_PID].I);           uart1Print(numberString);
 8009da8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009db0:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8009db4:	4618      	mov	r0, r3
 8009db6:	f016 fcb9 	bl	802072c <__aeabi_f2d>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	e9cd 2300 	strd	r2, r3, [sp]
 8009dc2:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009dc6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009dca:	f04f 0110 	mov.w	r1, #16
 8009dce:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009dd2:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009dd6:	f017 fbb7 	bl	8021548 <snprintf>
 8009dda:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009dde:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009de2:	f7fc fe1d 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HDOT_PID].D);           uart1Print(numberString);
 8009de6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009dee:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8009df2:	4618      	mov	r0, r3
 8009df4:	f016 fc9a 	bl	802072c <__aeabi_f2d>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	e9cd 2300 	strd	r2, r3, [sp]
 8009e00:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009e04:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009e08:	f04f 0110 	mov.w	r1, #16
 8009e0c:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009e10:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009e14:	f017 fb98 	bl	8021548 <snprintf>
 8009e18:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009e1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009e20:	f7fc fdfe 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HDOT_PID].windupGuard); uart1Print(numberString);
 8009e24:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e2c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8009e30:	4618      	mov	r0, r3
 8009e32:	f016 fc7b 	bl	802072c <__aeabi_f2d>
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	e9cd 2300 	strd	r2, r3, [sp]
 8009e3e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009e42:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009e46:	f04f 0110 	mov.w	r1, #16
 8009e4a:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009e4e:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009e52:	f017 fb79 	bl	8021548 <snprintf>
 8009e56:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009e5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009e5e:	f7fc fddf 	bl	8006a20 <uart1Print>
            if  (eepromConfig.PID[HDOT_PID].dErrorCalc)
 8009e62:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e6a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d006      	beq.n	8009e80 <cliCom+0xe9c>
                uart1Print("Error\n");
 8009e72:	f24b 407c 	movw	r0, #46204	; 0xb47c
 8009e76:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009e7a:	f7fc fdd1 	bl	8006a20 <uart1Print>
 8009e7e:	e005      	b.n	8009e8c <cliCom+0xea8>
            else
                uart1Print("State\n");
 8009e80:	f24b 4084 	movw	r0, #46212	; 0xb484
 8009e84:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009e88:	f7fc fdca 	bl	8006a20 <uart1Print>

            queryType = 'x';
 8009e8c:	f240 73dd 	movw	r3, #2013	; 0x7dd
 8009e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e94:	f04f 0278 	mov.w	r2, #120	; 0x78
 8009e98:	701a      	strb	r2, [r3, #0]
            validCommand = false;
 8009e9a:	f240 73de 	movw	r3, #2014	; 0x7de
 8009e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009ea2:	f04f 0200 	mov.w	r2, #0
 8009ea6:	701a      	strb	r2, [r3, #0]
        	break;
 8009ea8:	f001 be74 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'd': // Position PIDs
            uart1Print("\n");
 8009eac:	f24b 405c 	movw	r0, #46172	; 0xb45c
 8009eb0:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009eb4:	f7fc fdb4 	bl	8006a20 <uart1Print>

            uart1Print("n PID:  ");
 8009eb8:	f24b 5020 	movw	r0, #46368	; 0xb520
 8009ebc:	f6c0 0002 	movt	r0, #2050	; 0x802
 8009ec0:	f7fc fdae 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[N_PID].B);           uart1Print(numberString);
 8009ec4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009ecc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f016 fc2b 	bl	802072c <__aeabi_f2d>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	460b      	mov	r3, r1
 8009eda:	e9cd 2300 	strd	r2, r3, [sp]
 8009ede:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009ee2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009ee6:	f04f 0110 	mov.w	r1, #16
 8009eea:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009eee:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009ef2:	f017 fb29 	bl	8021548 <snprintf>
 8009ef6:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009efa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009efe:	f7fc fd8f 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[N_PID].P);           uart1Print(numberString);
 8009f02:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009f0a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f016 fc0c 	bl	802072c <__aeabi_f2d>
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	e9cd 2300 	strd	r2, r3, [sp]
 8009f1c:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009f20:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009f24:	f04f 0110 	mov.w	r1, #16
 8009f28:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009f2c:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009f30:	f017 fb0a 	bl	8021548 <snprintf>
 8009f34:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009f38:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009f3c:	f7fc fd70 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[N_PID].I);           uart1Print(numberString);
 8009f40:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009f48:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f016 fbed 	bl	802072c <__aeabi_f2d>
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	e9cd 2300 	strd	r2, r3, [sp]
 8009f5a:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009f5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009f62:	f04f 0110 	mov.w	r1, #16
 8009f66:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009f6a:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009f6e:	f017 faeb 	bl	8021548 <snprintf>
 8009f72:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009f76:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009f7a:	f7fc fd51 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[N_PID].D);           uart1Print(numberString);
 8009f7e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009f86:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f016 fbce 	bl	802072c <__aeabi_f2d>
 8009f90:	4602      	mov	r2, r0
 8009f92:	460b      	mov	r3, r1
 8009f94:	e9cd 2300 	strd	r2, r3, [sp]
 8009f98:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009f9c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009fa0:	f04f 0110 	mov.w	r1, #16
 8009fa4:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009fa8:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009fac:	f017 facc 	bl	8021548 <snprintf>
 8009fb0:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009fb4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009fb8:	f7fc fd32 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[N_PID].windupGuard); uart1Print(numberString);
 8009fbc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009fc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f016 fbaf 	bl	802072c <__aeabi_f2d>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	e9cd 2300 	strd	r2, r3, [sp]
 8009fd6:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009fda:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009fde:	f04f 0110 	mov.w	r1, #16
 8009fe2:	f24b 4274 	movw	r2, #46196	; 0xb474
 8009fe6:	f6c0 0202 	movt	r2, #2050	; 0x802
 8009fea:	f017 faad 	bl	8021548 <snprintf>
 8009fee:	f643 3078 	movw	r0, #15224	; 0x3b78
 8009ff2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009ff6:	f7fc fd13 	bl	8006a20 <uart1Print>
            if  (eepromConfig.PID[N_PID].dErrorCalc)
 8009ffa:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8009ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a002:	f893 3224 	ldrb.w	r3, [r3, #548]	; 0x224
 800a006:	2b00      	cmp	r3, #0
 800a008:	d006      	beq.n	800a018 <cliCom+0x1034>
                uart1Print("Error\n");
 800a00a:	f24b 407c 	movw	r0, #46204	; 0xb47c
 800a00e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a012:	f7fc fd05 	bl	8006a20 <uart1Print>
 800a016:	e005      	b.n	800a024 <cliCom+0x1040>
            else
                uart1Print("State\n");
 800a018:	f24b 4084 	movw	r0, #46212	; 0xb484
 800a01c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a020:	f7fc fcfe 	bl	8006a20 <uart1Print>

            uart1Print("e PID:  ");
 800a024:	f24b 502c 	movw	r0, #46380	; 0xb52c
 800a028:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a02c:	f7fc fcf8 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[E_PID].B);           uart1Print(numberString);
 800a030:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800a034:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a038:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800a03c:	4618      	mov	r0, r3
 800a03e:	f016 fb75 	bl	802072c <__aeabi_f2d>
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	e9cd 2300 	strd	r2, r3, [sp]
 800a04a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a04e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a052:	f04f 0110 	mov.w	r1, #16
 800a056:	f24b 4274 	movw	r2, #46196	; 0xb474
 800a05a:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a05e:	f017 fa73 	bl	8021548 <snprintf>
 800a062:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a066:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a06a:	f7fc fcd9 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[E_PID].P);           uart1Print(numberString);
 800a06e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800a072:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a076:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800a07a:	4618      	mov	r0, r3
 800a07c:	f016 fb56 	bl	802072c <__aeabi_f2d>
 800a080:	4602      	mov	r2, r0
 800a082:	460b      	mov	r3, r1
 800a084:	e9cd 2300 	strd	r2, r3, [sp]
 800a088:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a08c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a090:	f04f 0110 	mov.w	r1, #16
 800a094:	f24b 4274 	movw	r2, #46196	; 0xb474
 800a098:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a09c:	f017 fa54 	bl	8021548 <snprintf>
 800a0a0:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a0a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a0a8:	f7fc fcba 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[E_PID].I);           uart1Print(numberString);
 800a0ac:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800a0b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a0b4:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f016 fb37 	bl	802072c <__aeabi_f2d>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	e9cd 2300 	strd	r2, r3, [sp]
 800a0c6:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a0ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a0ce:	f04f 0110 	mov.w	r1, #16
 800a0d2:	f24b 4274 	movw	r2, #46196	; 0xb474
 800a0d6:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a0da:	f017 fa35 	bl	8021548 <snprintf>
 800a0de:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a0e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a0e6:	f7fc fc9b 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[E_PID].D);           uart1Print(numberString);
 800a0ea:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800a0ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a0f2:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f016 fb18 	bl	802072c <__aeabi_f2d>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	460b      	mov	r3, r1
 800a100:	e9cd 2300 	strd	r2, r3, [sp]
 800a104:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a108:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a10c:	f04f 0110 	mov.w	r1, #16
 800a110:	f24b 4274 	movw	r2, #46196	; 0xb474
 800a114:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a118:	f017 fa16 	bl	8021548 <snprintf>
 800a11c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a120:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a124:	f7fc fc7c 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[E_PID].windupGuard); uart1Print(numberString);
 800a128:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800a12c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a130:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 800a134:	4618      	mov	r0, r3
 800a136:	f016 faf9 	bl	802072c <__aeabi_f2d>
 800a13a:	4602      	mov	r2, r0
 800a13c:	460b      	mov	r3, r1
 800a13e:	e9cd 2300 	strd	r2, r3, [sp]
 800a142:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a146:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a14a:	f04f 0110 	mov.w	r1, #16
 800a14e:	f24b 4274 	movw	r2, #46196	; 0xb474
 800a152:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a156:	f017 f9f7 	bl	8021548 <snprintf>
 800a15a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a15e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a162:	f7fc fc5d 	bl	8006a20 <uart1Print>
            if  (eepromConfig.PID[E_PID].dErrorCalc)
 800a166:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800a16a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a16e:	f893 324c 	ldrb.w	r3, [r3, #588]	; 0x24c
 800a172:	2b00      	cmp	r3, #0
 800a174:	d006      	beq.n	800a184 <cliCom+0x11a0>
                uart1Print("Error\n");
 800a176:	f24b 407c 	movw	r0, #46204	; 0xb47c
 800a17a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a17e:	f7fc fc4f 	bl	8006a20 <uart1Print>
 800a182:	e005      	b.n	800a190 <cliCom+0x11ac>
            else
                uart1Print("State\n");
 800a184:	f24b 4084 	movw	r0, #46212	; 0xb484
 800a188:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a18c:	f7fc fc48 	bl	8006a20 <uart1Print>

            uart1Print("h PID:  ");
 800a190:	f24b 5038 	movw	r0, #46392	; 0xb538
 800a194:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a198:	f7fc fc42 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[H_PID].B);           uart1Print(numberString);
 800a19c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800a1a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a1a4:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f016 fabf 	bl	802072c <__aeabi_f2d>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	e9cd 2300 	strd	r2, r3, [sp]
 800a1b6:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a1ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a1be:	f04f 0110 	mov.w	r1, #16
 800a1c2:	f24b 4274 	movw	r2, #46196	; 0xb474
 800a1c6:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a1ca:	f017 f9bd 	bl	8021548 <snprintf>
 800a1ce:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a1d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a1d6:	f7fc fc23 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[H_PID].P);           uart1Print(numberString);
 800a1da:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800a1de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a1e2:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f016 faa0 	bl	802072c <__aeabi_f2d>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	e9cd 2300 	strd	r2, r3, [sp]
 800a1f4:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a1f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a1fc:	f04f 0110 	mov.w	r1, #16
 800a200:	f24b 4274 	movw	r2, #46196	; 0xb474
 800a204:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a208:	f017 f99e 	bl	8021548 <snprintf>
 800a20c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a210:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a214:	f7fc fc04 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[H_PID].I);           uart1Print(numberString);
 800a218:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800a21c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a220:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 800a224:	4618      	mov	r0, r3
 800a226:	f016 fa81 	bl	802072c <__aeabi_f2d>
 800a22a:	4602      	mov	r2, r0
 800a22c:	460b      	mov	r3, r1
 800a22e:	e9cd 2300 	strd	r2, r3, [sp]
 800a232:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a236:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a23a:	f04f 0110 	mov.w	r1, #16
 800a23e:	f24b 4274 	movw	r2, #46196	; 0xb474
 800a242:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a246:	f017 f97f 	bl	8021548 <snprintf>
 800a24a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a24e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a252:	f7fc fbe5 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[H_PID].D);           uart1Print(numberString);
 800a256:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800a25a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a25e:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 800a262:	4618      	mov	r0, r3
 800a264:	f016 fa62 	bl	802072c <__aeabi_f2d>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	e9cd 2300 	strd	r2, r3, [sp]
 800a270:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a274:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a278:	f04f 0110 	mov.w	r1, #16
 800a27c:	f24b 4274 	movw	r2, #46196	; 0xb474
 800a280:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a284:	f017 f960 	bl	8021548 <snprintf>
 800a288:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a28c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a290:	f7fc fbc6 	bl	8006a20 <uart1Print>
            snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[H_PID].windupGuard); uart1Print(numberString);
 800a294:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800a298:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a29c:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f016 fa43 	bl	802072c <__aeabi_f2d>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	e9cd 2300 	strd	r2, r3, [sp]
 800a2ae:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a2b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a2b6:	f04f 0110 	mov.w	r1, #16
 800a2ba:	f24b 4274 	movw	r2, #46196	; 0xb474
 800a2be:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a2c2:	f017 f941 	bl	8021548 <snprintf>
 800a2c6:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a2ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a2ce:	f7fc fba7 	bl	8006a20 <uart1Print>
            if  (eepromConfig.PID[H_PID].dErrorCalc)
 800a2d2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800a2d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a2da:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d006      	beq.n	800a2f0 <cliCom+0x130c>
                uart1Print("Error\n");
 800a2e2:	f24b 407c 	movw	r0, #46204	; 0xb47c
 800a2e6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a2ea:	f7fc fb99 	bl	8006a20 <uart1Print>
 800a2ee:	e005      	b.n	800a2fc <cliCom+0x1318>
            else
                uart1Print("State\n");
 800a2f0:	f24b 4084 	movw	r0, #46212	; 0xb484
 800a2f4:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a2f8:	f7fc fb92 	bl	8006a20 <uart1Print>

            queryType = 'x';
 800a2fc:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800a300:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a304:	f04f 0278 	mov.w	r2, #120	; 0x78
 800a308:	701a      	strb	r2, [r3, #0]
            validCommand = false;
 800a30a:	f240 73de 	movw	r3, #2014	; 0x7de
 800a30e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a312:	f04f 0200 	mov.w	r2, #0
 800a316:	701a      	strb	r2, [r3, #0]
        	break;
 800a318:	f001 bc3c 	b.w	800bb94 <cliCom+0x2bb0>

         ///////////////////////////////

        case 'e': // Loop Delta Times
        	snprintf(numberString, 16, "%7ld, ", deltaTime1000Hz); uart1Print(numberString);
 800a31c:	f641 13d4 	movw	r3, #6612	; 0x19d4
 800a320:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a32a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a32e:	f04f 0110 	mov.w	r1, #16
 800a332:	f24b 5244 	movw	r2, #46404	; 0xb544
 800a336:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a33a:	f017 f905 	bl	8021548 <snprintf>
 800a33e:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a342:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a346:	f7fc fb6b 	bl	8006a20 <uart1Print>
        	snprintf(numberString, 16, "%7ld, ", deltaTime500Hz ); uart1Print(numberString);
 800a34a:	f641 13f0 	movw	r3, #6640	; 0x19f0
 800a34e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a358:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a35c:	f04f 0110 	mov.w	r1, #16
 800a360:	f24b 5244 	movw	r2, #46404	; 0xb544
 800a364:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a368:	f017 f8ee 	bl	8021548 <snprintf>
 800a36c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a370:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a374:	f7fc fb54 	bl	8006a20 <uart1Print>
        	snprintf(numberString, 16, "%7ld, ", deltaTime100Hz ); uart1Print(numberString);
 800a378:	f641 13e4 	movw	r3, #6628	; 0x19e4
 800a37c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a386:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a38a:	f04f 0110 	mov.w	r1, #16
 800a38e:	f24b 5244 	movw	r2, #46404	; 0xb544
 800a392:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a396:	f017 f8d7 	bl	8021548 <snprintf>
 800a39a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a39e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a3a2:	f7fc fb3d 	bl	8006a20 <uart1Print>
        	snprintf(numberString, 16, "%7ld, ", deltaTime50Hz  ); uart1Print(numberString);
 800a3a6:	f641 230c 	movw	r3, #6668	; 0x1a0c
 800a3aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a3b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a3b8:	f04f 0110 	mov.w	r1, #16
 800a3bc:	f24b 5244 	movw	r2, #46404	; 0xb544
 800a3c0:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a3c4:	f017 f8c0 	bl	8021548 <snprintf>
 800a3c8:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a3cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a3d0:	f7fc fb26 	bl	8006a20 <uart1Print>
        	snprintf(numberString, 16, "%7ld, ", deltaTime10Hz  ); uart1Print(numberString);
 800a3d4:	f641 231c 	movw	r3, #6684	; 0x1a1c
 800a3d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a3e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a3e6:	f04f 0110 	mov.w	r1, #16
 800a3ea:	f24b 5244 	movw	r2, #46404	; 0xb544
 800a3ee:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a3f2:	f017 f8a9 	bl	8021548 <snprintf>
 800a3f6:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a3fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a3fe:	f7fc fb0f 	bl	8006a20 <uart1Print>
        	snprintf(numberString, 16, "%7ld, ", deltaTime5Hz   ); uart1Print(numberString);
 800a402:	f641 13ec 	movw	r3, #6636	; 0x19ec
 800a406:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a410:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a414:	f04f 0110 	mov.w	r1, #16
 800a418:	f24b 5244 	movw	r2, #46404	; 0xb544
 800a41c:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a420:	f017 f892 	bl	8021548 <snprintf>
 800a424:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a428:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a42c:	f7fc faf8 	bl	8006a20 <uart1Print>
        	snprintf(numberString, 16, "%7ld\n", deltaTime1Hz   ); uart1Print(numberString);
 800a430:	f641 13c8 	movw	r3, #6600	; 0x19c8
 800a434:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a43e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a442:	f04f 0110 	mov.w	r1, #16
 800a446:	f24b 524c 	movw	r2, #46412	; 0xb54c
 800a44a:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a44e:	f017 f87b 	bl	8021548 <snprintf>
 800a452:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a456:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a45a:	f7fc fae1 	bl	8006a20 <uart1Print>

        	validCommand = false;
 800a45e:	f240 73de 	movw	r3, #2014	; 0x7de
 800a462:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a466:	f04f 0200 	mov.w	r2, #0
 800a46a:	701a      	strb	r2, [r3, #0]
        	break;
 800a46c:	f001 bb92 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'f': // Loop Execution Times
        	snprintf(numberString, 16, "%7ld, ", executionTime1000Hz); uart1Print(numberString);
 800a470:	f641 13c4 	movw	r3, #6596	; 0x19c4
 800a474:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a47e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a482:	f04f 0110 	mov.w	r1, #16
 800a486:	f24b 5244 	movw	r2, #46404	; 0xb544
 800a48a:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a48e:	f017 f85b 	bl	8021548 <snprintf>
 800a492:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a496:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a49a:	f7fc fac1 	bl	8006a20 <uart1Print>
        	snprintf(numberString, 16, "%7ld, ", executionTime500Hz ); uart1Print(numberString);
 800a49e:	f641 13f4 	movw	r3, #6644	; 0x19f4
 800a4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a4ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a4b0:	f04f 0110 	mov.w	r1, #16
 800a4b4:	f24b 5244 	movw	r2, #46404	; 0xb544
 800a4b8:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a4bc:	f017 f844 	bl	8021548 <snprintf>
 800a4c0:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a4c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a4c8:	f7fc faaa 	bl	8006a20 <uart1Print>
        	snprintf(numberString, 16, "%7ld, ", executionTime100Hz ); uart1Print(numberString);
 800a4cc:	f641 13e0 	movw	r3, #6624	; 0x19e0
 800a4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a4da:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a4de:	f04f 0110 	mov.w	r1, #16
 800a4e2:	f24b 5244 	movw	r2, #46404	; 0xb544
 800a4e6:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a4ea:	f017 f82d 	bl	8021548 <snprintf>
 800a4ee:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a4f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a4f6:	f7fc fa93 	bl	8006a20 <uart1Print>
        	snprintf(numberString, 16, "%7ld, ", executionTime50Hz  ); uart1Print(numberString);
 800a4fa:	f641 2310 	movw	r3, #6672	; 0x1a10
 800a4fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a508:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a50c:	f04f 0110 	mov.w	r1, #16
 800a510:	f24b 5244 	movw	r2, #46404	; 0xb544
 800a514:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a518:	f017 f816 	bl	8021548 <snprintf>
 800a51c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a520:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a524:	f7fc fa7c 	bl	8006a20 <uart1Print>
        	snprintf(numberString, 16, "%7ld, ", executionTime10Hz  ); uart1Print(numberString);
 800a528:	f641 13dc 	movw	r3, #6620	; 0x19dc
 800a52c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a536:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a53a:	f04f 0110 	mov.w	r1, #16
 800a53e:	f24b 5244 	movw	r2, #46404	; 0xb544
 800a542:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a546:	f016 ffff 	bl	8021548 <snprintf>
 800a54a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a54e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a552:	f7fc fa65 	bl	8006a20 <uart1Print>
        	snprintf(numberString, 16, "%7ld, ", executionTime5Hz   ); uart1Print(numberString);
 800a556:	f641 13cc 	movw	r3, #6604	; 0x19cc
 800a55a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a564:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a568:	f04f 0110 	mov.w	r1, #16
 800a56c:	f24b 5244 	movw	r2, #46404	; 0xb544
 800a570:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a574:	f016 ffe8 	bl	8021548 <snprintf>
 800a578:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a57c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a580:	f7fc fa4e 	bl	8006a20 <uart1Print>
        	snprintf(numberString, 16, "%7ld\n", executionTime1Hz   ); uart1Print(numberString);
 800a584:	f641 13fc 	movw	r3, #6652	; 0x19fc
 800a588:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a592:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a596:	f04f 0110 	mov.w	r1, #16
 800a59a:	f24b 524c 	movw	r2, #46412	; 0xb54c
 800a59e:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a5a2:	f016 ffd1 	bl	8021548 <snprintf>
 800a5a6:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a5aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a5ae:	f7fc fa37 	bl	8006a20 <uart1Print>

        	validCommand = false;
 800a5b2:	f240 73de 	movw	r3, #2014	; 0x7de
 800a5b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a5ba:	f04f 0200 	mov.w	r2, #0
 800a5be:	701a      	strb	r2, [r3, #0]
        	break;
 800a5c0:	f001 bae8 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'g': // 500 Hz Accels
        	ftoa(sensors.accel500Hz[XAXIS], numberString); uart1Print(numberString); uart1Print(", ");
 800a5c4:	f643 3398 	movw	r3, #15256	; 0x3b98
 800a5c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f643 3178 	movw	r1, #15224	; 0x3b78
 800a5d4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a5d8:	f00c fb32 	bl	8016c40 <ftoa>
 800a5dc:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a5e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a5e4:	f7fc fa1c 	bl	8006a20 <uart1Print>
 800a5e8:	f24b 5054 	movw	r0, #46420	; 0xb554
 800a5ec:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a5f0:	f7fc fa16 	bl	8006a20 <uart1Print>
        	ftoa(sensors.accel500Hz[YAXIS], numberString); uart1Print(numberString); uart1Print(", ");
 800a5f4:	f643 3398 	movw	r3, #15256	; 0x3b98
 800a5f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f643 3178 	movw	r1, #15224	; 0x3b78
 800a604:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a608:	f00c fb1a 	bl	8016c40 <ftoa>
 800a60c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a610:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a614:	f7fc fa04 	bl	8006a20 <uart1Print>
 800a618:	f24b 5054 	movw	r0, #46420	; 0xb554
 800a61c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a620:	f7fc f9fe 	bl	8006a20 <uart1Print>
        	ftoa(sensors.accel500Hz[ZAXIS], numberString); uart1Print(numberString); uart1Print("\n");
 800a624:	f643 3398 	movw	r3, #15256	; 0x3b98
 800a628:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	4618      	mov	r0, r3
 800a630:	f643 3178 	movw	r1, #15224	; 0x3b78
 800a634:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a638:	f00c fb02 	bl	8016c40 <ftoa>
 800a63c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a640:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a644:	f7fc f9ec 	bl	8006a20 <uart1Print>
 800a648:	f24b 405c 	movw	r0, #46172	; 0xb45c
 800a64c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a650:	f7fc f9e6 	bl	8006a20 <uart1Print>

        	validCommand = false;
 800a654:	f240 73de 	movw	r3, #2014	; 0x7de
 800a658:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a65c:	f04f 0200 	mov.w	r2, #0
 800a660:	701a      	strb	r2, [r3, #0]
        	break;
 800a662:	f001 ba97 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'h': // 100 hz Earth Axis Accels
        	ftoa(earthAxisAccels[XAXIS], numberString); uart1Print(numberString); uart1Print(", ");
 800a666:	f240 73ec 	movw	r3, #2028	; 0x7ec
 800a66a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4618      	mov	r0, r3
 800a672:	f643 3178 	movw	r1, #15224	; 0x3b78
 800a676:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a67a:	f00c fae1 	bl	8016c40 <ftoa>
 800a67e:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a682:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a686:	f7fc f9cb 	bl	8006a20 <uart1Print>
 800a68a:	f24b 5054 	movw	r0, #46420	; 0xb554
 800a68e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a692:	f7fc f9c5 	bl	8006a20 <uart1Print>
        	ftoa(earthAxisAccels[YAXIS], numberString); uart1Print(numberString); uart1Print(", ");
 800a696:	f240 73ec 	movw	r3, #2028	; 0x7ec
 800a69a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f643 3178 	movw	r1, #15224	; 0x3b78
 800a6a6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a6aa:	f00c fac9 	bl	8016c40 <ftoa>
 800a6ae:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a6b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a6b6:	f7fc f9b3 	bl	8006a20 <uart1Print>
 800a6ba:	f24b 5054 	movw	r0, #46420	; 0xb554
 800a6be:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a6c2:	f7fc f9ad 	bl	8006a20 <uart1Print>
        	ftoa(earthAxisAccels[ZAXIS], numberString); uart1Print(numberString); uart1Print("\n");
 800a6c6:	f240 73ec 	movw	r3, #2028	; 0x7ec
 800a6ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f643 3178 	movw	r1, #15224	; 0x3b78
 800a6d6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a6da:	f00c fab1 	bl	8016c40 <ftoa>
 800a6de:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a6e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a6e6:	f7fc f99b 	bl	8006a20 <uart1Print>
 800a6ea:	f24b 405c 	movw	r0, #46172	; 0xb45c
 800a6ee:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a6f2:	f7fc f995 	bl	8006a20 <uart1Print>

        	validCommand = false;
 800a6f6:	f240 73de 	movw	r3, #2014	; 0x7de
 800a6fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a6fe:	f04f 0200 	mov.w	r2, #0
 800a702:	701a      	strb	r2, [r3, #0]
        	break;
 800a704:	f001 ba46 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'i': // 500 Hz Gyros
        	ftoa(sensors.gyro500Hz[ROLL ] * R2D, numberString); uart1Print(numberString); uart1Print(", ");
 800a708:	f643 3398 	movw	r3, #15256	; 0x3b98
 800a70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a710:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800a714:	eddf 7ad1 	vldr	s15, [pc, #836]	; 800aa5c <cliCom+0x1a78>
 800a718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a71c:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 800aa60 <cliCom+0x1a7c>
 800a720:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800a724:	ee17 0a90 	vmov	r0, s15
 800a728:	f643 3178 	movw	r1, #15224	; 0x3b78
 800a72c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a730:	f00c fa86 	bl	8016c40 <ftoa>
 800a734:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a738:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a73c:	f7fc f970 	bl	8006a20 <uart1Print>
 800a740:	f24b 5054 	movw	r0, #46420	; 0xb554
 800a744:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a748:	f7fc f96a 	bl	8006a20 <uart1Print>
        	ftoa(sensors.gyro500Hz[PITCH] * R2D, numberString); uart1Print(numberString); uart1Print(", ");
 800a74c:	f643 3398 	movw	r3, #15256	; 0x3b98
 800a750:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a754:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800a758:	eddf 7ac0 	vldr	s15, [pc, #768]	; 800aa5c <cliCom+0x1a78>
 800a75c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a760:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800aa60 <cliCom+0x1a7c>
 800a764:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800a768:	ee17 0a90 	vmov	r0, s15
 800a76c:	f643 3178 	movw	r1, #15224	; 0x3b78
 800a770:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a774:	f00c fa64 	bl	8016c40 <ftoa>
 800a778:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a77c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a780:	f7fc f94e 	bl	8006a20 <uart1Print>
 800a784:	f24b 5054 	movw	r0, #46420	; 0xb554
 800a788:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a78c:	f7fc f948 	bl	8006a20 <uart1Print>
        	ftoa(sensors.gyro500Hz[YAW  ] * R2D, numberString); uart1Print(numberString); uart1Print(", ");
 800a790:	f643 3398 	movw	r3, #15256	; 0x3b98
 800a794:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a798:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800a79c:	eddf 7aaf 	vldr	s15, [pc, #700]	; 800aa5c <cliCom+0x1a78>
 800a7a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7a4:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800aa60 <cliCom+0x1a7c>
 800a7a8:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800a7ac:	ee17 0a90 	vmov	r0, s15
 800a7b0:	f643 3178 	movw	r1, #15224	; 0x3b78
 800a7b4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a7b8:	f00c fa42 	bl	8016c40 <ftoa>
 800a7bc:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a7c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a7c4:	f7fc f92c 	bl	8006a20 <uart1Print>
 800a7c8:	f24b 5054 	movw	r0, #46420	; 0xb554
 800a7cc:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a7d0:	f7fc f926 	bl	8006a20 <uart1Print>
        	// HJI ftoa(mpu6000Temperature,             numberString); uart1Print(numberString); uart1Print("\n");

        	validCommand = false;
 800a7d4:	f240 73de 	movw	r3, #2014	; 0x7de
 800a7d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a7dc:	f04f 0200 	mov.w	r2, #0
 800a7e0:	701a      	strb	r2, [r3, #0]
        	break;
 800a7e2:	f001 b9d7 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'j': // 10 Hz Mag Data
        	ftoa(sensors.mag10Hz[XAXIS], numberString); uart1Print(numberString); uart1Print(", ");
 800a7e6:	f643 3398 	movw	r3, #15256	; 0x3b98
 800a7ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f643 3178 	movw	r1, #15224	; 0x3b78
 800a7f6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a7fa:	f00c fa21 	bl	8016c40 <ftoa>
 800a7fe:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a802:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a806:	f7fc f90b 	bl	8006a20 <uart1Print>
 800a80a:	f24b 5054 	movw	r0, #46420	; 0xb554
 800a80e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a812:	f7fc f905 	bl	8006a20 <uart1Print>
        	ftoa(sensors.mag10Hz[YAXIS], numberString); uart1Print(numberString); uart1Print(", ");
 800a816:	f643 3398 	movw	r3, #15256	; 0x3b98
 800a81a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a820:	4618      	mov	r0, r3
 800a822:	f643 3178 	movw	r1, #15224	; 0x3b78
 800a826:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a82a:	f00c fa09 	bl	8016c40 <ftoa>
 800a82e:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a832:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a836:	f7fc f8f3 	bl	8006a20 <uart1Print>
 800a83a:	f24b 5054 	movw	r0, #46420	; 0xb554
 800a83e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a842:	f7fc f8ed 	bl	8006a20 <uart1Print>
        	ftoa(sensors.mag10Hz[ZAXIS], numberString); uart1Print(numberString); uart1Print("\n");
 800a846:	f643 3398 	movw	r3, #15256	; 0x3b98
 800a84a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a850:	4618      	mov	r0, r3
 800a852:	f643 3178 	movw	r1, #15224	; 0x3b78
 800a856:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a85a:	f00c f9f1 	bl	8016c40 <ftoa>
 800a85e:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a862:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a866:	f7fc f8db 	bl	8006a20 <uart1Print>
 800a86a:	f24b 405c 	movw	r0, #46172	; 0xb45c
 800a86e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a872:	f7fc f8d5 	bl	8006a20 <uart1Print>

        	validCommand = false;
 800a876:	f240 73de 	movw	r3, #2014	; 0x7de
 800a87a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a87e:	f04f 0200 	mov.w	r2, #0
 800a882:	701a      	strb	r2, [r3, #0]
        	break;
 800a884:	f001 b986 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'k': // Vertical Axis Variables
        	ftoa(earthAxisAccels[ZAXIS],  numberString); uart1Print(numberString); uart1Print(", ");
 800a888:	f240 73ec 	movw	r3, #2028	; 0x7ec
 800a88c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	4618      	mov	r0, r3
 800a894:	f643 3178 	movw	r1, #15224	; 0x3b78
 800a898:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a89c:	f00c f9d0 	bl	8016c40 <ftoa>
 800a8a0:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a8a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a8a8:	f7fc f8ba 	bl	8006a20 <uart1Print>
 800a8ac:	f24b 5054 	movw	r0, #46420	; 0xb554
 800a8b0:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a8b4:	f7fc f8b4 	bl	8006a20 <uart1Print>
        	ftoa(sensors.pressureAlt10Hz, numberString); uart1Print(numberString); uart1Print(", ");
 800a8b8:	f643 3398 	movw	r3, #15256	; 0x3b98
 800a8bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f643 3178 	movw	r1, #15224	; 0x3b78
 800a8c8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a8cc:	f00c f9b8 	bl	8016c40 <ftoa>
 800a8d0:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a8d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a8d8:	f7fc f8a2 	bl	8006a20 <uart1Print>
 800a8dc:	f24b 5054 	movw	r0, #46420	; 0xb554
 800a8e0:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a8e4:	f7fc f89c 	bl	8006a20 <uart1Print>
        	ftoa(hDotEstimate,            numberString); uart1Print(numberString); uart1Print(", ");
 800a8e8:	f640 0310 	movw	r3, #2064	; 0x810
 800a8ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f643 3178 	movw	r1, #15224	; 0x3b78
 800a8f8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a8fc:	f00c f9a0 	bl	8016c40 <ftoa>
 800a900:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a904:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a908:	f7fc f88a 	bl	8006a20 <uart1Print>
 800a90c:	f24b 5054 	movw	r0, #46420	; 0xb554
 800a910:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a914:	f7fc f884 	bl	8006a20 <uart1Print>
        	ftoa(hEstimate,               numberString); uart1Print(numberString); uart1Print("\n");
 800a918:	f643 7350 	movw	r3, #16208	; 0x3f50
 800a91c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4618      	mov	r0, r3
 800a924:	f643 3178 	movw	r1, #15224	; 0x3b78
 800a928:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a92c:	f00c f988 	bl	8016c40 <ftoa>
 800a930:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a934:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a938:	f7fc f872 	bl	8006a20 <uart1Print>
 800a93c:	f24b 405c 	movw	r0, #46172	; 0xb45c
 800a940:	f6c0 0002 	movt	r0, #2050	; 0x802
 800a944:	f7fc f86c 	bl	8006a20 <uart1Print>

        	validCommand = false;
 800a948:	f240 73de 	movw	r3, #2014	; 0x7de
 800a94c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a950:	f04f 0200 	mov.w	r2, #0
 800a954:	701a      	strb	r2, [r3, #0]
        	break;
 800a956:	f001 b91d 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'l': // Attitudes
        	snprintf(numberString, 16, "%9.4f, ", sensors.attitude500Hz[ROLL ] * R2D); uart1Print(numberString);
 800a95a:	f643 3398 	movw	r3, #15256	; 0x3b98
 800a95e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a962:	ed93 7a06 	vldr	s14, [r3, #24]
 800a966:	eddf 7a3d 	vldr	s15, [pc, #244]	; 800aa5c <cliCom+0x1a78>
 800a96a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a96e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800aa60 <cliCom+0x1a7c>
 800a972:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800a976:	ee17 0a90 	vmov	r0, s15
 800a97a:	f015 fed7 	bl	802072c <__aeabi_f2d>
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	e9cd 2300 	strd	r2, r3, [sp]
 800a986:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a98a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a98e:	f04f 0110 	mov.w	r1, #16
 800a992:	f24b 5258 	movw	r2, #46424	; 0xb558
 800a996:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a99a:	f016 fdd5 	bl	8021548 <snprintf>
 800a99e:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a9a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a9a6:	f7fc f83b 	bl	8006a20 <uart1Print>
        	snprintf(numberString, 16, "%9.4f, ", sensors.attitude500Hz[PITCH] * R2D); uart1Print(numberString);
 800a9aa:	f643 3398 	movw	r3, #15256	; 0x3b98
 800a9ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9b2:	ed93 7a07 	vldr	s14, [r3, #28]
 800a9b6:	eddf 7a29 	vldr	s15, [pc, #164]	; 800aa5c <cliCom+0x1a78>
 800a9ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9be:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800aa60 <cliCom+0x1a7c>
 800a9c2:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800a9c6:	ee17 0a90 	vmov	r0, s15
 800a9ca:	f015 feaf 	bl	802072c <__aeabi_f2d>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	e9cd 2300 	strd	r2, r3, [sp]
 800a9d6:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a9da:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a9de:	f04f 0110 	mov.w	r1, #16
 800a9e2:	f24b 5258 	movw	r2, #46424	; 0xb558
 800a9e6:	f6c0 0202 	movt	r2, #2050	; 0x802
 800a9ea:	f016 fdad 	bl	8021548 <snprintf>
 800a9ee:	f643 3078 	movw	r0, #15224	; 0x3b78
 800a9f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a9f6:	f7fc f813 	bl	8006a20 <uart1Print>
        	snprintf(numberString, 16, "%9.4f\n", sensors.attitude500Hz[YAW  ] * R2D); uart1Print(numberString);
 800a9fa:	f643 3398 	movw	r3, #15256	; 0x3b98
 800a9fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa02:	ed93 7a08 	vldr	s14, [r3, #32]
 800aa06:	eddf 7a15 	vldr	s15, [pc, #84]	; 800aa5c <cliCom+0x1a78>
 800aa0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa0e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800aa60 <cliCom+0x1a7c>
 800aa12:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800aa16:	ee17 0a90 	vmov	r0, s15
 800aa1a:	f015 fe87 	bl	802072c <__aeabi_f2d>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	460b      	mov	r3, r1
 800aa22:	e9cd 2300 	strd	r2, r3, [sp]
 800aa26:	f643 3078 	movw	r0, #15224	; 0x3b78
 800aa2a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800aa2e:	f04f 0110 	mov.w	r1, #16
 800aa32:	f24b 5260 	movw	r2, #46432	; 0xb560
 800aa36:	f6c0 0202 	movt	r2, #2050	; 0x802
 800aa3a:	f016 fd85 	bl	8021548 <snprintf>
 800aa3e:	f643 3078 	movw	r0, #15224	; 0x3b78
 800aa42:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800aa46:	f7fb ffeb 	bl	8006a20 <uart1Print>

        	validCommand = false;
 800aa4a:	f240 73de 	movw	r3, #2014	; 0x7de
 800aa4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa52:	f04f 0200 	mov.w	r2, #0
 800aa56:	701a      	strb	r2, [r3, #0]
        	break;
 800aa58:	f001 b89c 	b.w	800bb94 <cliCom+0x2bb0>
 800aa5c:	43340000 	.word	0x43340000
 800aa60:	40490fdb 	.word	0x40490fdb

       ///////////////////////////////

        case 'm': // GPS Data
        	snprintf(numberString, 16, "%12.7f, ", sensors.gpsLatitude  * R2D); uart1Print(numberString);
 800aa64:	f643 3398 	movw	r3, #15256	; 0x3b98
 800aa68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa6c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800aa70:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 800aa5c <cliCom+0x1a78>
 800aa74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa78:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800aa60 <cliCom+0x1a7c>
 800aa7c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800aa80:	ee17 0a90 	vmov	r0, s15
 800aa84:	f015 fe52 	bl	802072c <__aeabi_f2d>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	e9cd 2300 	strd	r2, r3, [sp]
 800aa90:	f643 3078 	movw	r0, #15224	; 0x3b78
 800aa94:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800aa98:	f04f 0110 	mov.w	r1, #16
 800aa9c:	f24b 5268 	movw	r2, #46440	; 0xb568
 800aaa0:	f6c0 0202 	movt	r2, #2050	; 0x802
 800aaa4:	f016 fd50 	bl	8021548 <snprintf>
 800aaa8:	f643 3078 	movw	r0, #15224	; 0x3b78
 800aaac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800aab0:	f7fb ffb6 	bl	8006a20 <uart1Print>
        	snprintf(numberString, 16, "%12.7f, ", sensors.gpsLongitude * R2D); uart1Print(numberString);
 800aab4:	f643 3398 	movw	r3, #15256	; 0x3b98
 800aab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aabc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800aac0:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 800aa5c <cliCom+0x1a78>
 800aac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aac8:	ed1f 7a1b 	vldr	s14, [pc, #-108]	; 800aa60 <cliCom+0x1a7c>
 800aacc:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800aad0:	ee17 0a90 	vmov	r0, s15
 800aad4:	f015 fe2a 	bl	802072c <__aeabi_f2d>
 800aad8:	4602      	mov	r2, r0
 800aada:	460b      	mov	r3, r1
 800aadc:	e9cd 2300 	strd	r2, r3, [sp]
 800aae0:	f643 3078 	movw	r0, #15224	; 0x3b78
 800aae4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800aae8:	f04f 0110 	mov.w	r1, #16
 800aaec:	f24b 5268 	movw	r2, #46440	; 0xb568
 800aaf0:	f6c0 0202 	movt	r2, #2050	; 0x802
 800aaf4:	f016 fd28 	bl	8021548 <snprintf>
 800aaf8:	f643 3078 	movw	r0, #15224	; 0x3b78
 800aafc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ab00:	f7fb ff8e 	bl	8006a20 <uart1Print>

        	ftoa(sensors.gpsAltitude,          numberString); uart1Print(numberString); uart1Print(", ");
 800ab04:	f643 3398 	movw	r3, #15256	; 0x3b98
 800ab08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f643 3178 	movw	r1, #15224	; 0x3b78
 800ab14:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ab18:	f00c f892 	bl	8016c40 <ftoa>
 800ab1c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800ab20:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ab24:	f7fb ff7c 	bl	8006a20 <uart1Print>
 800ab28:	f24b 5054 	movw	r0, #46420	; 0xb554
 800ab2c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ab30:	f7fb ff76 	bl	8006a20 <uart1Print>
        	ftoa(sensors.gpsGroundSpeed,       numberString); uart1Print(numberString); uart1Print(", ");
 800ab34:	f643 3398 	movw	r3, #15256	; 0x3b98
 800ab38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f643 3178 	movw	r1, #15224	; 0x3b78
 800ab44:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ab48:	f00c f87a 	bl	8016c40 <ftoa>
 800ab4c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800ab50:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ab54:	f7fb ff64 	bl	8006a20 <uart1Print>
 800ab58:	f24b 5054 	movw	r0, #46420	; 0xb554
 800ab5c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ab60:	f7fb ff5e 	bl	8006a20 <uart1Print>
        	ftoa(sensors.gpsGroundTrack * R2D, numberString); uart1Print(numberString); uart1Print("\n");
 800ab64:	f643 3398 	movw	r3, #15256	; 0x3b98
 800ab68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab6c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800ab70:	ed5f 7a46 	vldr	s15, [pc, #-280]	; 800aa5c <cliCom+0x1a78>
 800ab74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab78:	ed1f 7a47 	vldr	s14, [pc, #-284]	; 800aa60 <cliCom+0x1a7c>
 800ab7c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800ab80:	ee17 0a90 	vmov	r0, s15
 800ab84:	f643 3178 	movw	r1, #15224	; 0x3b78
 800ab88:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ab8c:	f00c f858 	bl	8016c40 <ftoa>
 800ab90:	f643 3078 	movw	r0, #15224	; 0x3b78
 800ab94:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ab98:	f7fb ff42 	bl	8006a20 <uart1Print>
 800ab9c:	f24b 405c 	movw	r0, #46172	; 0xb45c
 800aba0:	f6c0 0002 	movt	r0, #2050	; 0x802
 800aba4:	f7fb ff3c 	bl	8006a20 <uart1Print>

            validCommand = false;
 800aba8:	f240 73de 	movw	r3, #2014	; 0x7de
 800abac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800abb0:	f04f 0200 	mov.w	r2, #0
 800abb4:	701a      	strb	r2, [r3, #0]
            break;
 800abb6:	f000 bfed 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'n': // GPS Stats
            if (sensors.gpsFix == FIX_2D)
 800abba:	f643 3398 	movw	r3, #15256	; 0x3b98
 800abbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800abc2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d106      	bne.n	800abd8 <cliCom+0x1bf4>
                uart1Print("2D Fix,  ");
 800abca:	f24b 5074 	movw	r0, #46452	; 0xb574
 800abce:	f6c0 0002 	movt	r0, #2050	; 0x802
 800abd2:	f7fb ff25 	bl	8006a20 <uart1Print>
 800abd6:	e032      	b.n	800ac3e <cliCom+0x1c5a>
            else if (sensors.gpsFix == FIX_3D)
 800abd8:	f643 3398 	movw	r3, #15256	; 0x3b98
 800abdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800abe0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800abe4:	2b03      	cmp	r3, #3
 800abe6:	d106      	bne.n	800abf6 <cliCom+0x1c12>
                uart1Print("3D Fix,  ");
 800abe8:	f24b 5080 	movw	r0, #46464	; 0xb580
 800abec:	f6c0 0002 	movt	r0, #2050	; 0x802
 800abf0:	f7fb ff16 	bl	8006a20 <uart1Print>
 800abf4:	e023      	b.n	800ac3e <cliCom+0x1c5a>
            else if (sensors.gpsFix == FIX_2D_SBAS)
 800abf6:	f643 3398 	movw	r3, #15256	; 0x3b98
 800abfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800abfe:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ac02:	2b06      	cmp	r3, #6
 800ac04:	d106      	bne.n	800ac14 <cliCom+0x1c30>
            	uart1Print("2D SBAS, ");
 800ac06:	f24b 508c 	movw	r0, #46476	; 0xb58c
 800ac0a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ac0e:	f7fb ff07 	bl	8006a20 <uart1Print>
 800ac12:	e014      	b.n	800ac3e <cliCom+0x1c5a>
            else if (sensors.gpsFix == FIX_3D_SBAS)
 800ac14:	f643 3398 	movw	r3, #15256	; 0x3b98
 800ac18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ac1c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ac20:	2b07      	cmp	r3, #7
 800ac22:	d106      	bne.n	800ac32 <cliCom+0x1c4e>
            	uart1Print("3D SBAS, ");
 800ac24:	f24b 5098 	movw	r0, #46488	; 0xb598
 800ac28:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ac2c:	f7fb fef8 	bl	8006a20 <uart1Print>
 800ac30:	e005      	b.n	800ac3e <cliCom+0x1c5a>
            else
                uart1Print("No Fix, ");
 800ac32:	f24b 50a4 	movw	r0, #46500	; 0xb5a4
 800ac36:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ac3a:	f7fb fef1 	bl	8006a20 <uart1Print>

            itoa(sensors.gpsNumSats, numberString, 10); uart1Print(numberString); uart1Print(", ");
 800ac3e:	f643 3398 	movw	r3, #15256	; 0x3b98
 800ac42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ac46:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f643 3178 	movw	r1, #15224	; 0x3b78
 800ac50:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ac54:	f04f 020a 	mov.w	r2, #10
 800ac58:	f00b ffbc 	bl	8016bd4 <itoa>
 800ac5c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800ac60:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ac64:	f7fb fedc 	bl	8006a20 <uart1Print>
 800ac68:	f24b 5054 	movw	r0, #46420	; 0xb554
 800ac6c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ac70:	f7fb fed6 	bl	8006a20 <uart1Print>
        	itoa(sensors.gpsDate,    numberString, 10); uart1Print(numberString); uart1Print(" ");
 800ac74:	f643 3398 	movw	r3, #15256	; 0x3b98
 800ac78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ac7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f643 3178 	movw	r1, #15224	; 0x3b78
 800ac84:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ac88:	f04f 020a 	mov.w	r2, #10
 800ac8c:	f00b ffa2 	bl	8016bd4 <itoa>
 800ac90:	f643 3078 	movw	r0, #15224	; 0x3b78
 800ac94:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ac98:	f7fb fec2 	bl	8006a20 <uart1Print>
 800ac9c:	f24b 50b0 	movw	r0, #46512	; 0xb5b0
 800aca0:	f6c0 0002 	movt	r0, #2050	; 0x802
 800aca4:	f7fb febc 	bl	8006a20 <uart1Print>
        	ftoa(sensors.gpsTime,    numberString);     uart1Print(numberString); uart1Print(", ");
 800aca8:	f643 3398 	movw	r3, #15256	; 0x3b98
 800acac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800acb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acb2:	4618      	mov	r0, r3
 800acb4:	f643 3178 	movw	r1, #15224	; 0x3b78
 800acb8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800acbc:	f00b ffc0 	bl	8016c40 <ftoa>
 800acc0:	f643 3078 	movw	r0, #15224	; 0x3b78
 800acc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800acc8:	f7fb feaa 	bl	8006a20 <uart1Print>
 800accc:	f24b 5054 	movw	r0, #46420	; 0xb554
 800acd0:	f6c0 0002 	movt	r0, #2050	; 0x802
 800acd4:	f7fb fea4 	bl	8006a20 <uart1Print>
            ftoa(sensors.gpsHdop,    numberString);     uart1Print(numberString); uart1Print("\n");
 800acd8:	f643 3398 	movw	r3, #15256	; 0x3b98
 800acdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ace0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ace2:	4618      	mov	r0, r3
 800ace4:	f643 3178 	movw	r1, #15224	; 0x3b78
 800ace8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800acec:	f00b ffa8 	bl	8016c40 <ftoa>
 800acf0:	f643 3078 	movw	r0, #15224	; 0x3b78
 800acf4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800acf8:	f7fb fe92 	bl	8006a20 <uart1Print>
 800acfc:	f24b 405c 	movw	r0, #46172	; 0xb45c
 800ad00:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ad04:	f7fb fe8c 	bl	8006a20 <uart1Print>
            validCommand = false;
 800ad08:	f240 73de 	movw	r3, #2014	; 0x7de
 800ad0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad10:	f04f 0200 	mov.w	r2, #0
 800ad14:	701a      	strb	r2, [r3, #0]
        	break;
 800ad16:	f000 bf3d 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'o': // Not Used
            queryType = 'x';
 800ad1a:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800ad1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad22:	f04f 0278 	mov.w	r2, #120	; 0x78
 800ad26:	701a      	strb	r2, [r3, #0]
            validCommand = false;
 800ad28:	f240 73de 	movw	r3, #2014	; 0x7de
 800ad2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad30:	f04f 0200 	mov.w	r2, #0
 800ad34:	701a      	strb	r2, [r3, #0]
            break;
 800ad36:	f000 bf2d 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'p': // Not Used
            queryType = 'x';
 800ad3a:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800ad3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad42:	f04f 0278 	mov.w	r2, #120	; 0x78
 800ad46:	701a      	strb	r2, [r3, #0]
        	validCommand = false;
 800ad48:	f240 73de 	movw	r3, #2014	; 0x7de
 800ad4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad50:	f04f 0200 	mov.w	r2, #0
 800ad54:	701a      	strb	r2, [r3, #0]
        	break;
 800ad56:	f000 bf1d 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'q': // Not Used
            queryType = 'x';
 800ad5a:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800ad5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad62:	f04f 0278 	mov.w	r2, #120	; 0x78
 800ad66:	701a      	strb	r2, [r3, #0]
           	validCommand = false;
 800ad68:	f240 73de 	movw	r3, #2014	; 0x7de
 800ad6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad70:	f04f 0200 	mov.w	r2, #0
 800ad74:	701a      	strb	r2, [r3, #0]
           	break;
 800ad76:	f000 bf0d 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'r':
        	if (flightMode == RATE)
 800ad7a:	f240 73f8 	movw	r3, #2040	; 0x7f8
 800ad7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d106      	bne.n	800ad96 <cliCom+0x1db2>
        		uart1Print("Flight Mode = RATE      ");
 800ad88:	f24b 50b4 	movw	r0, #46516	; 0xb5b4
 800ad8c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ad90:	f7fb fe46 	bl	8006a20 <uart1Print>
 800ad94:	e01a      	b.n	800adcc <cliCom+0x1de8>
        	else if (flightMode == ATTITUDE)
 800ad96:	f240 73f8 	movw	r3, #2040	; 0x7f8
 800ad9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d106      	bne.n	800adb2 <cliCom+0x1dce>
        		uart1Print("Flight Mode = ATTITUDE  ");
 800ada4:	f24b 50d0 	movw	r0, #46544	; 0xb5d0
 800ada8:	f6c0 0002 	movt	r0, #2050	; 0x802
 800adac:	f7fb fe38 	bl	8006a20 <uart1Print>
 800adb0:	e00c      	b.n	800adcc <cliCom+0x1de8>
        	else if (flightMode == GPS)
 800adb2:	f240 73f8 	movw	r3, #2040	; 0x7f8
 800adb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d105      	bne.n	800adcc <cliCom+0x1de8>
        		uart1Print("Flight Mode = GPS       ");
 800adc0:	f24b 50ec 	movw	r0, #46572	; 0xb5ec
 800adc4:	f6c0 0002 	movt	r0, #2050	; 0x802
 800adc8:	f7fb fe2a 	bl	8006a20 <uart1Print>

        	if (headingHoldEngaged == true)
 800adcc:	f240 73f9 	movw	r3, #2041	; 0x7f9
 800add0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	2b01      	cmp	r3, #1
 800add8:	d106      	bne.n	800ade8 <cliCom+0x1e04>
        	    uart1Print("Heading Hold = ENGAGED     ");
 800adda:	f24b 6008 	movw	r0, #46600	; 0xb608
 800adde:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ade2:	f7fb fe1d 	bl	8006a20 <uart1Print>
 800ade6:	e005      	b.n	800adf4 <cliCom+0x1e10>
        	else
        	    uart1Print("Heading Hold = DISENGAGED  ");
 800ade8:	f24b 6024 	movw	r0, #46628	; 0xb624
 800adec:	f6c0 0002 	movt	r0, #2050	; 0x802
 800adf0:	f7fb fe16 	bl	8006a20 <uart1Print>

        	if (altitudeHoldState == DISENGAGED)
 800adf4:	f240 73fc 	movw	r3, #2044	; 0x7fc
 800adf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d106      	bne.n	800ae10 <cliCom+0x1e2c>
        		uart1Print("Altitude Hold = DISENAGED\n");
 800ae02:	f24b 6040 	movw	r0, #46656	; 0xb640
 800ae06:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ae0a:	f7fb fe09 	bl	8006a20 <uart1Print>
 800ae0e:	e01a      	b.n	800ae46 <cliCom+0x1e62>
            else if (altitudeHoldState == ENGAGED)
 800ae10:	f240 73fc 	movw	r3, #2044	; 0x7fc
 800ae14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d106      	bne.n	800ae2c <cliCom+0x1e48>
            	uart1Print("Altitude Hold = ENGAGED\n");
 800ae1e:	f24b 605c 	movw	r0, #46684	; 0xb65c
 800ae22:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ae26:	f7fb fdfb 	bl	8006a20 <uart1Print>
 800ae2a:	e00c      	b.n	800ae46 <cliCom+0x1e62>
            else if (altitudeHoldState == PANIC)
 800ae2c:	f240 73fc 	movw	r3, #2044	; 0x7fc
 800ae30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d105      	bne.n	800ae46 <cliCom+0x1e62>
            	uart1Print("Altitude Hold = PANIC\n");
 800ae3a:	f24b 6078 	movw	r0, #46712	; 0xb678
 800ae3e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ae42:	f7fb fded 	bl	8006a20 <uart1Print>

        	validCommand = false;
 800ae46:	f240 73de 	movw	r3, #2014	; 0x7de
 800ae4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae4e:	f04f 0200 	mov.w	r2, #0
 800ae52:	701a      	strb	r2, [r3, #0]
        	break;
 800ae54:	f000 be9e 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 's': // Raw Receiver Commands
            if (eepromConfig.receiverType == SPEKTRUM)
 800ae58:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ae5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae60:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ae64:	2b03      	cmp	r3, #3
 800ae66:	d157      	bne.n	800af18 <cliCom+0x1f34>
            {
				for (index = 0; index < eepromConfig.spektrumChannels - 1; index++)
 800ae68:	f04f 0300 	mov.w	r3, #0
 800ae6c:	f88d 300f 	strb.w	r3, [sp, #15]
 800ae70:	e022      	b.n	800aeb8 <cliCom+0x1ed4>
                {
    		    	itoa(spektrumChannelData[index], numberString, 10);
 800ae72:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ae76:	f641 1390 	movw	r3, #6544	; 0x1990
 800ae7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae82:	4618      	mov	r0, r3
 800ae84:	f643 3178 	movw	r1, #15224	; 0x3b78
 800ae88:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ae8c:	f04f 020a 	mov.w	r2, #10
 800ae90:	f00b fea0 	bl	8016bd4 <itoa>
    		    	uart1Print(numberString); uart1Print(", ");
 800ae94:	f643 3078 	movw	r0, #15224	; 0x3b78
 800ae98:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ae9c:	f7fb fdc0 	bl	8006a20 <uart1Print>
 800aea0:	f24b 5054 	movw	r0, #46420	; 0xb554
 800aea4:	f6c0 0002 	movt	r0, #2050	; 0x802
 800aea8:	f7fb fdba 	bl	8006a20 <uart1Print>
        ///////////////////////////////

        case 's': // Raw Receiver Commands
            if (eepromConfig.receiverType == SPEKTRUM)
            {
				for (index = 0; index < eepromConfig.spektrumChannels - 1; index++)
 800aeac:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800aeb0:	f103 0301 	add.w	r3, r3, #1
 800aeb4:	f88d 300f 	strb.w	r3, [sp, #15]
 800aeb8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800aebc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800aec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aec4:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800aec8:	f103 33ff 	add.w	r3, r3, #4294967295
 800aecc:	429a      	cmp	r2, r3
 800aece:	dbd0      	blt.n	800ae72 <cliCom+0x1e8e>
                {
    		    	itoa(spektrumChannelData[index], numberString, 10);
    		    	uart1Print(numberString); uart1Print(", ");
    		    }

                itoa(spektrumChannelData[eepromConfig.spektrumChannels - 1], numberString, 10);
 800aed0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800aed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aed8:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800aedc:	f103 32ff 	add.w	r2, r3, #4294967295
 800aee0:	f641 1390 	movw	r3, #6544	; 0x1990
 800aee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f643 3178 	movw	r1, #15224	; 0x3b78
 800aef2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800aef6:	f04f 020a 	mov.w	r2, #10
 800aefa:	f00b fe6b 	bl	8016bd4 <itoa>
                uart1Print(numberString); uart1Print("\n");
 800aefe:	f643 3078 	movw	r0, #15224	; 0x3b78
 800af02:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800af06:	f7fb fd8b 	bl	8006a20 <uart1Print>
 800af0a:	f24b 405c 	movw	r0, #46172	; 0xb45c
 800af0e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800af12:	f7fb fd85 	bl	8006a20 <uart1Print>
 800af16:	e043      	b.n	800afa0 <cliCom+0x1fbc>
		    }
		    else
		    {
				for (index = 0; index < 7; index++)
 800af18:	f04f 0300 	mov.w	r3, #0
 800af1c:	f88d 300f 	strb.w	r3, [sp, #15]
 800af20:	e020      	b.n	800af64 <cliCom+0x1f80>
                {
    		    	itoa(rxRead(index), numberString, 10);
 800af22:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800af26:	4618      	mov	r0, r3
 800af28:	f7fa f95a 	bl	80051e0 <rxRead>
 800af2c:	4603      	mov	r3, r0
 800af2e:	4618      	mov	r0, r3
 800af30:	f643 3178 	movw	r1, #15224	; 0x3b78
 800af34:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800af38:	f04f 020a 	mov.w	r2, #10
 800af3c:	f00b fe4a 	bl	8016bd4 <itoa>
    		    	uart1Print(numberString); uart1Print(", ");
 800af40:	f643 3078 	movw	r0, #15224	; 0x3b78
 800af44:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800af48:	f7fb fd6a 	bl	8006a20 <uart1Print>
 800af4c:	f24b 5054 	movw	r0, #46420	; 0xb554
 800af50:	f6c0 0002 	movt	r0, #2050	; 0x802
 800af54:	f7fb fd64 	bl	8006a20 <uart1Print>
                itoa(spektrumChannelData[eepromConfig.spektrumChannels - 1], numberString, 10);
                uart1Print(numberString); uart1Print("\n");
		    }
		    else
		    {
				for (index = 0; index < 7; index++)
 800af58:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800af5c:	f103 0301 	add.w	r3, r3, #1
 800af60:	f88d 300f 	strb.w	r3, [sp, #15]
 800af64:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800af68:	2b06      	cmp	r3, #6
 800af6a:	d9da      	bls.n	800af22 <cliCom+0x1f3e>
                {
    		    	itoa(rxRead(index), numberString, 10);
    		    	uart1Print(numberString); uart1Print(", ");
    		    }

                itoa(rxRead(7), numberString, 10);
 800af6c:	f04f 0007 	mov.w	r0, #7
 800af70:	f7fa f936 	bl	80051e0 <rxRead>
 800af74:	4603      	mov	r3, r0
 800af76:	4618      	mov	r0, r3
 800af78:	f643 3178 	movw	r1, #15224	; 0x3b78
 800af7c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800af80:	f04f 020a 	mov.w	r2, #10
 800af84:	f00b fe26 	bl	8016bd4 <itoa>
                uart1Print(numberString); uart1Print("\n");
 800af88:	f643 3078 	movw	r0, #15224	; 0x3b78
 800af8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800af90:	f7fb fd46 	bl	8006a20 <uart1Print>
 800af94:	f24b 405c 	movw	r0, #46172	; 0xb45c
 800af98:	f6c0 0002 	movt	r0, #2050	; 0x802
 800af9c:	f7fb fd40 	bl	8006a20 <uart1Print>
			}

        	validCommand = false;
 800afa0:	f240 73de 	movw	r3, #2014	; 0x7de
 800afa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800afa8:	f04f 0200 	mov.w	r2, #0
 800afac:	701a      	strb	r2, [r3, #0]
        	break;
 800afae:	f000 bdf1 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 't': // Processed Receiver Commands
            for (index = 0; index < 7; index++)
 800afb2:	f04f 0300 	mov.w	r3, #0
 800afb6:	f88d 300f 	strb.w	r3, [sp, #15]
 800afba:	e022      	b.n	800b002 <cliCom+0x201e>
            {
    			ftoa( rxCommand[index], numberString );
 800afbc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800afc0:	f240 0388 	movw	r3, #136	; 0x88
 800afc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800afc8:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800afcc:	189b      	adds	r3, r3, r2
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f643 3178 	movw	r1, #15224	; 0x3b78
 800afd6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800afda:	f00b fe31 	bl	8016c40 <ftoa>
    			uart1Print( numberString ); uart1Print( ", " );
 800afde:	f643 3078 	movw	r0, #15224	; 0x3b78
 800afe2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800afe6:	f7fb fd1b 	bl	8006a20 <uart1Print>
 800afea:	f24b 5054 	movw	r0, #46420	; 0xb554
 800afee:	f6c0 0002 	movt	r0, #2050	; 0x802
 800aff2:	f7fb fd15 	bl	8006a20 <uart1Print>
        	break;

        ///////////////////////////////

        case 't': // Processed Receiver Commands
            for (index = 0; index < 7; index++)
 800aff6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800affa:	f103 0301 	add.w	r3, r3, #1
 800affe:	f88d 300f 	strb.w	r3, [sp, #15]
 800b002:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800b006:	2b06      	cmp	r3, #6
 800b008:	d9d8      	bls.n	800afbc <cliCom+0x1fd8>
            {
    			ftoa( rxCommand[index], numberString );
    			uart1Print( numberString ); uart1Print( ", " );
    		}

            ftoa( rxCommand[7], numberString );
 800b00a:	f240 0388 	movw	r3, #136	; 0x88
 800b00e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b012:	69db      	ldr	r3, [r3, #28]
 800b014:	4618      	mov	r0, r3
 800b016:	f643 3178 	movw	r1, #15224	; 0x3b78
 800b01a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b01e:	f00b fe0f 	bl	8016c40 <ftoa>
            uart1Print( numberString ); uart1Print( "\n" );
 800b022:	f643 3078 	movw	r0, #15224	; 0x3b78
 800b026:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b02a:	f7fb fcf9 	bl	8006a20 <uart1Print>
 800b02e:	f24b 405c 	movw	r0, #46172	; 0xb45c
 800b032:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b036:	f7fb fcf3 	bl	8006a20 <uart1Print>

            validCommand = false;
 800b03a:	f240 73de 	movw	r3, #2014	; 0x7de
 800b03e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b042:	f04f 0200 	mov.w	r2, #0
 800b046:	701a      	strb	r2, [r3, #0]
            break;
 800b048:	f000 bda4 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'u': // Command in Detent Discretes
            if ( commandInDetent[ROLL] == true )
 800b04c:	f240 03a8 	movw	r3, #168	; 0xa8
 800b050:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	2b01      	cmp	r3, #1
 800b058:	d106      	bne.n	800b068 <cliCom+0x2084>
                uart1Print( "true" );
 800b05a:	f24b 6090 	movw	r0, #46736	; 0xb690
 800b05e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b062:	f7fb fcdd 	bl	8006a20 <uart1Print>
 800b066:	e005      	b.n	800b074 <cliCom+0x2090>
            else
                uart1Print( "false" );
 800b068:	f24b 6098 	movw	r0, #46744	; 0xb698
 800b06c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b070:	f7fb fcd6 	bl	8006a20 <uart1Print>
            uart1Print(", ");
 800b074:	f24b 5054 	movw	r0, #46420	; 0xb554
 800b078:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b07c:	f7fb fcd0 	bl	8006a20 <uart1Print>

            if ( commandInDetent[PITCH] == true )
 800b080:	f240 03a8 	movw	r3, #168	; 0xa8
 800b084:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b088:	785b      	ldrb	r3, [r3, #1]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d106      	bne.n	800b09c <cliCom+0x20b8>
                uart1Print( "true" );
 800b08e:	f24b 6090 	movw	r0, #46736	; 0xb690
 800b092:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b096:	f7fb fcc3 	bl	8006a20 <uart1Print>
 800b09a:	e005      	b.n	800b0a8 <cliCom+0x20c4>
            else
                uart1Print( "false" );
 800b09c:	f24b 6098 	movw	r0, #46744	; 0xb698
 800b0a0:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b0a4:	f7fb fcbc 	bl	8006a20 <uart1Print>
            uart1Print(", ");
 800b0a8:	f24b 5054 	movw	r0, #46420	; 0xb554
 800b0ac:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b0b0:	f7fb fcb6 	bl	8006a20 <uart1Print>

            if ( commandInDetent[YAW] == true )
 800b0b4:	f240 03a8 	movw	r3, #168	; 0xa8
 800b0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b0bc:	789b      	ldrb	r3, [r3, #2]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d106      	bne.n	800b0d0 <cliCom+0x20ec>
                uart1Print( "true" );
 800b0c2:	f24b 6090 	movw	r0, #46736	; 0xb690
 800b0c6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b0ca:	f7fb fca9 	bl	8006a20 <uart1Print>
 800b0ce:	e005      	b.n	800b0dc <cliCom+0x20f8>
            else
                uart1Print( "false" );
 800b0d0:	f24b 6098 	movw	r0, #46744	; 0xb698
 800b0d4:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b0d8:	f7fb fca2 	bl	8006a20 <uart1Print>
            uart1Print("\n");
 800b0dc:	f24b 405c 	movw	r0, #46172	; 0xb45c
 800b0e0:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b0e4:	f7fb fc9c 	bl	8006a20 <uart1Print>

            validCommand = false;
 800b0e8:	f240 73de 	movw	r3, #2014	; 0x7de
 800b0ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b0f0:	f04f 0200 	mov.w	r2, #0
 800b0f4:	701a      	strb	r2, [r3, #0]
            break;
 800b0f6:	f000 bd4d 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'v': // ESC PWM Outputs
            itoa(TIM17->CCR1, numberString, 10); uart1Print(numberString); uart1Print(", ");
 800b0fa:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800b0fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b104:	4618      	mov	r0, r3
 800b106:	f643 3178 	movw	r1, #15224	; 0x3b78
 800b10a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b10e:	f04f 020a 	mov.w	r2, #10
 800b112:	f00b fd5f 	bl	8016bd4 <itoa>
 800b116:	f643 3078 	movw	r0, #15224	; 0x3b78
 800b11a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b11e:	f7fb fc7f 	bl	8006a20 <uart1Print>
 800b122:	f24b 5054 	movw	r0, #46420	; 0xb554
 800b126:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b12a:	f7fb fc79 	bl	8006a20 <uart1Print>
            itoa(TIM4->CCR1,  numberString, 10); uart1Print(numberString); uart1Print(", ");
 800b12e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b132:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b138:	4618      	mov	r0, r3
 800b13a:	f643 3178 	movw	r1, #15224	; 0x3b78
 800b13e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b142:	f04f 020a 	mov.w	r2, #10
 800b146:	f00b fd45 	bl	8016bd4 <itoa>
 800b14a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800b14e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b152:	f7fb fc65 	bl	8006a20 <uart1Print>
 800b156:	f24b 5054 	movw	r0, #46420	; 0xb554
 800b15a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b15e:	f7fb fc5f 	bl	8006a20 <uart1Print>
            itoa(TIM4->CCR2,  numberString, 10); uart1Print(numberString); uart1Print(", ");
 800b162:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b166:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16c:	4618      	mov	r0, r3
 800b16e:	f643 3178 	movw	r1, #15224	; 0x3b78
 800b172:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b176:	f04f 020a 	mov.w	r2, #10
 800b17a:	f00b fd2b 	bl	8016bd4 <itoa>
 800b17e:	f643 3078 	movw	r0, #15224	; 0x3b78
 800b182:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b186:	f7fb fc4b 	bl	8006a20 <uart1Print>
 800b18a:	f24b 5054 	movw	r0, #46420	; 0xb554
 800b18e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b192:	f7fb fc45 	bl	8006a20 <uart1Print>
            itoa(TIM4->CCR3,  numberString, 10); uart1Print(numberString); uart1Print(", ");
 800b196:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b19a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b19e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f643 3178 	movw	r1, #15224	; 0x3b78
 800b1a6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b1aa:	f04f 020a 	mov.w	r2, #10
 800b1ae:	f00b fd11 	bl	8016bd4 <itoa>
 800b1b2:	f643 3078 	movw	r0, #15224	; 0x3b78
 800b1b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b1ba:	f7fb fc31 	bl	8006a20 <uart1Print>
 800b1be:	f24b 5054 	movw	r0, #46420	; 0xb554
 800b1c2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b1c6:	f7fb fc2b 	bl	8006a20 <uart1Print>
            itoa(TIM4->CCR4,  numberString, 10); uart1Print(numberString); uart1Print(", ");
 800b1ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b1d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f643 3178 	movw	r1, #15224	; 0x3b78
 800b1da:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b1de:	f04f 020a 	mov.w	r2, #10
 800b1e2:	f00b fcf7 	bl	8016bd4 <itoa>
 800b1e6:	f643 3078 	movw	r0, #15224	; 0x3b78
 800b1ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b1ee:	f7fb fc17 	bl	8006a20 <uart1Print>
 800b1f2:	f24b 5054 	movw	r0, #46420	; 0xb554
 800b1f6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b1fa:	f7fb fc11 	bl	8006a20 <uart1Print>
            itoa(TIM8->CCR1,  numberString, 10); uart1Print(numberString); uart1Print(", ");
 800b1fe:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800b202:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b208:	4618      	mov	r0, r3
 800b20a:	f643 3178 	movw	r1, #15224	; 0x3b78
 800b20e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b212:	f04f 020a 	mov.w	r2, #10
 800b216:	f00b fcdd 	bl	8016bd4 <itoa>
 800b21a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800b21e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b222:	f7fb fbfd 	bl	8006a20 <uart1Print>
 800b226:	f24b 5054 	movw	r0, #46420	; 0xb554
 800b22a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b22e:	f7fb fbf7 	bl	8006a20 <uart1Print>
            itoa(TIM8->CCR2,  numberString, 10); uart1Print(numberString); uart1Print(", ");
 800b232:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800b236:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23c:	4618      	mov	r0, r3
 800b23e:	f643 3178 	movw	r1, #15224	; 0x3b78
 800b242:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b246:	f04f 020a 	mov.w	r2, #10
 800b24a:	f00b fcc3 	bl	8016bd4 <itoa>
 800b24e:	f643 3078 	movw	r0, #15224	; 0x3b78
 800b252:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b256:	f7fb fbe3 	bl	8006a20 <uart1Print>
 800b25a:	f24b 5054 	movw	r0, #46420	; 0xb554
 800b25e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b262:	f7fb fbdd 	bl	8006a20 <uart1Print>
            itoa(TIM8->CCR3,  numberString, 10); uart1Print(numberString); uart1Print("\n");
 800b266:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800b26a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b270:	4618      	mov	r0, r3
 800b272:	f643 3178 	movw	r1, #15224	; 0x3b78
 800b276:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b27a:	f04f 020a 	mov.w	r2, #10
 800b27e:	f00b fca9 	bl	8016bd4 <itoa>
 800b282:	f643 3078 	movw	r0, #15224	; 0x3b78
 800b286:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b28a:	f7fb fbc9 	bl	8006a20 <uart1Print>
 800b28e:	f24b 405c 	movw	r0, #46172	; 0xb45c
 800b292:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b296:	f7fb fbc3 	bl	8006a20 <uart1Print>

            validCommand = false;
 800b29a:	f240 73de 	movw	r3, #2014	; 0x7de
 800b29e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b2a2:	f04f 0200 	mov.w	r2, #0
 800b2a6:	701a      	strb	r2, [r3, #0]
            break;
 800b2a8:	f000 bc74 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'w': // Servo PWM Outputs
            itoa(TIM15->CCR1, numberString, 10); uart1Print(numberString); uart1Print(", ");
 800b2ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b2b0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b2b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f643 3178 	movw	r1, #15224	; 0x3b78
 800b2bc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b2c0:	f04f 020a 	mov.w	r2, #10
 800b2c4:	f00b fc86 	bl	8016bd4 <itoa>
 800b2c8:	f643 3078 	movw	r0, #15224	; 0x3b78
 800b2cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b2d0:	f7fb fba6 	bl	8006a20 <uart1Print>
 800b2d4:	f24b 5054 	movw	r0, #46420	; 0xb554
 800b2d8:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b2dc:	f7fb fba0 	bl	8006a20 <uart1Print>
            itoa(TIM15->CCR2, numberString, 10); uart1Print(numberString); uart1Print(", ");
 800b2e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b2e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f643 3178 	movw	r1, #15224	; 0x3b78
 800b2f0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b2f4:	f04f 020a 	mov.w	r2, #10
 800b2f8:	f00b fc6c 	bl	8016bd4 <itoa>
 800b2fc:	f643 3078 	movw	r0, #15224	; 0x3b78
 800b300:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b304:	f7fb fb8c 	bl	8006a20 <uart1Print>
 800b308:	f24b 5054 	movw	r0, #46420	; 0xb554
 800b30c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b310:	f7fb fb86 	bl	8006a20 <uart1Print>

            validCommand = false;
 800b314:	f240 73de 	movw	r3, #2014	; 0x7de
 800b318:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b31c:	f04f 0200 	mov.w	r2, #0
 800b320:	701a      	strb	r2, [r3, #0]
            break;
 800b322:	f000 bc37 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'x':
        	validCommand = false;
 800b326:	f240 73de 	movw	r3, #2014	; 0x7de
 800b32a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b32e:	f04f 0200 	mov.w	r2, #0
 800b332:	701a      	strb	r2, [r3, #0]
        	break;
 800b334:	f000 bc2e 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'y': // ESC Calibration
        	escCalibration();
 800b338:	f7fc f886 	bl	8007448 <escCalibration>

        	queryType = 'x';
 800b33c:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b340:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b344:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b348:	701a      	strb	r2, [r3, #0]
        	break;
 800b34a:	f000 bc23 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'z':
            queryType = 'x';
 800b34e:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b352:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b356:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b35a:	701a      	strb	r2, [r3, #0]
            break;
 800b35c:	f000 bc1a 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case '1': // Turn high speed telemetry 1 on
        	highSpeedTelemDisable();
 800b360:	f7fd fcfe 	bl	8008d60 <highSpeedTelemDisable>
          	highSpeedTelem1Enabled = true;
 800b364:	f240 73df 	movw	r3, #2015	; 0x7df
 800b368:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b36c:	f04f 0201 	mov.w	r2, #1
 800b370:	701a      	strb	r2, [r3, #0]

        	queryType = 'x';
 800b372:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b376:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b37a:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b37e:	701a      	strb	r2, [r3, #0]
            break;
 800b380:	f000 bc08 	b.w	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case '2': // Turn high speed telemetry 2 on
           	highSpeedTelemDisable();
 800b384:	f7fd fcec 	bl	8008d60 <highSpeedTelemDisable>
           	highSpeedTelem2Enabled = true;
 800b388:	f240 73e0 	movw	r3, #2016	; 0x7e0
 800b38c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b390:	f04f 0201 	mov.w	r2, #1
 800b394:	701a      	strb	r2, [r3, #0]

            queryType = 'x';
 800b396:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b39a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b39e:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b3a2:	701a      	strb	r2, [r3, #0]
           	break;
 800b3a4:	e3f6      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case '3': // Turn high speed telemetry 3 on
           	highSpeedTelemDisable();
 800b3a6:	f7fd fcdb 	bl	8008d60 <highSpeedTelemDisable>
           	highSpeedTelem3Enabled = true;
 800b3aa:	f240 73e1 	movw	r3, #2017	; 0x7e1
 800b3ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b3b2:	f04f 0201 	mov.w	r2, #1
 800b3b6:	701a      	strb	r2, [r3, #0]

            queryType = 'x';
 800b3b8:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b3bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b3c0:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b3c4:	701a      	strb	r2, [r3, #0]
           	break;
 800b3c6:	e3e5      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case '4': // Turn high speed telemetry 4 on
           	highSpeedTelemDisable();
 800b3c8:	f7fd fcca 	bl	8008d60 <highSpeedTelemDisable>
           	highSpeedTelem4Enabled = true;
 800b3cc:	f240 73e2 	movw	r3, #2018	; 0x7e2
 800b3d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b3d4:	f04f 0201 	mov.w	r2, #1
 800b3d8:	701a      	strb	r2, [r3, #0]

            queryType = 'x';
 800b3da:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b3de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b3e2:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b3e6:	701a      	strb	r2, [r3, #0]
           	break;
 800b3e8:	e3d4      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case '5': // Turn high speed telemetry 5 on
           	highSpeedTelemDisable();
 800b3ea:	f7fd fcb9 	bl	8008d60 <highSpeedTelemDisable>
           	highSpeedTelem5Enabled = true;
 800b3ee:	f240 73e3 	movw	r3, #2019	; 0x7e3
 800b3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b3f6:	f04f 0201 	mov.w	r2, #1
 800b3fa:	701a      	strb	r2, [r3, #0]

            queryType = 'x';
 800b3fc:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b400:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b404:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b408:	701a      	strb	r2, [r3, #0]
           	break;
 800b40a:	e3c3      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case '6': // Turn high speed telemetry 6 on
           	highSpeedTelemDisable();
 800b40c:	f7fd fca8 	bl	8008d60 <highSpeedTelemDisable>
           	highSpeedTelem6Enabled = true;
 800b410:	f240 73e4 	movw	r3, #2020	; 0x7e4
 800b414:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b418:	f04f 0201 	mov.w	r2, #1
 800b41c:	701a      	strb	r2, [r3, #0]

            queryType = 'x';
 800b41e:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b422:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b426:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b42a:	701a      	strb	r2, [r3, #0]
           	break;
 800b42c:	e3b2      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case '7': // Turn high speed telemetry 7 on
           	highSpeedTelemDisable();
 800b42e:	f7fd fc97 	bl	8008d60 <highSpeedTelemDisable>
           	highSpeedTelem7Enabled = true;
 800b432:	f240 73e5 	movw	r3, #2021	; 0x7e5
 800b436:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b43a:	f04f 0201 	mov.w	r2, #1
 800b43e:	701a      	strb	r2, [r3, #0]

            queryType = 'x';
 800b440:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b444:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b448:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b44c:	701a      	strb	r2, [r3, #0]
           	break;
 800b44e:	e3a1      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case '8': // Turn high speed telemetry 8 on
           	highSpeedTelemDisable();
 800b450:	f7fd fc86 	bl	8008d60 <highSpeedTelemDisable>
           	highSpeedTelem8Enabled = true;
 800b454:	f240 73e6 	movw	r3, #2022	; 0x7e6
 800b458:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b45c:	f04f 0201 	mov.w	r2, #1
 800b460:	701a      	strb	r2, [r3, #0]

            queryType = 'x';
 800b462:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b466:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b46a:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b46e:	701a      	strb	r2, [r3, #0]
           	break;
 800b470:	e390      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case '9': // Turn high speed telemetry 9 on
           	highSpeedTelemDisable();
 800b472:	f7fd fc75 	bl	8008d60 <highSpeedTelemDisable>
           	highSpeedTelem9Enabled = true;
 800b476:	f240 73e7 	movw	r3, #2023	; 0x7e7
 800b47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b47e:	f04f 0201 	mov.w	r2, #1
 800b482:	701a      	strb	r2, [r3, #0]

            queryType = 'x';
 800b484:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b488:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b48c:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b490:	701a      	strb	r2, [r3, #0]
           	break;
 800b492:	e37f      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case '0': // Disable high speed telemetry
           	highSpeedTelemDisable();
 800b494:	f7fd fc64 	bl	8008d60 <highSpeedTelemDisable>

            queryType = 'x';
 800b498:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b4a0:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b4a4:	701a      	strb	r2, [r3, #0]
           	break;
 800b4a6:	e375      	b.n	800bb94 <cliCom+0x2bb0>
        ///////////////////////////////////////////////////////////////////////

        ///////////////////////////////

        case 'A': // Read Roll Rate PID Values
            readUsbPID(ROLL_RATE_PID);
 800b4a8:	f04f 0000 	mov.w	r0, #0
 800b4ac:	f7fd fd52 	bl	8008f54 <readUsbPID>
            uart1Print( "\nRoll Rate PID Received....\n" );
 800b4b0:	f24b 60a0 	movw	r0, #46752	; 0xb6a0
 800b4b4:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b4b8:	f7fb fab2 	bl	8006a20 <uart1Print>

        	queryType = 'a';
 800b4bc:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b4c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b4c4:	f04f 0261 	mov.w	r2, #97	; 0x61
 800b4c8:	701a      	strb	r2, [r3, #0]
        	validCommand = false;
 800b4ca:	f240 73de 	movw	r3, #2014	; 0x7de
 800b4ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b4d2:	f04f 0200 	mov.w	r2, #0
 800b4d6:	701a      	strb	r2, [r3, #0]
        	break;
 800b4d8:	e35c      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'B': // Read Pitch Rate PID Values
            readUsbPID(PITCH_RATE_PID);
 800b4da:	f04f 0001 	mov.w	r0, #1
 800b4de:	f7fd fd39 	bl	8008f54 <readUsbPID>
            uart1Print( "\nPitch Rate PID Received....\n" );
 800b4e2:	f24b 60c0 	movw	r0, #46784	; 0xb6c0
 800b4e6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b4ea:	f7fb fa99 	bl	8006a20 <uart1Print>

        	queryType = 'a';
 800b4ee:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b4f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b4f6:	f04f 0261 	mov.w	r2, #97	; 0x61
 800b4fa:	701a      	strb	r2, [r3, #0]
        	validCommand = false;
 800b4fc:	f240 73de 	movw	r3, #2014	; 0x7de
 800b500:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b504:	f04f 0200 	mov.w	r2, #0
 800b508:	701a      	strb	r2, [r3, #0]
        	break;
 800b50a:	e343      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'C': // Read Yaw Rate PID Values
            readUsbPID(YAW_RATE_PID);
 800b50c:	f04f 0002 	mov.w	r0, #2
 800b510:	f7fd fd20 	bl	8008f54 <readUsbPID>
            uart1Print( "\nYaw Rate PID Received....\n" );
 800b514:	f24b 60e0 	movw	r0, #46816	; 0xb6e0
 800b518:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b51c:	f7fb fa80 	bl	8006a20 <uart1Print>

        	queryType = 'a';
 800b520:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b524:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b528:	f04f 0261 	mov.w	r2, #97	; 0x61
 800b52c:	701a      	strb	r2, [r3, #0]
        	validCommand = false;
 800b52e:	f240 73de 	movw	r3, #2014	; 0x7de
 800b532:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b536:	f04f 0200 	mov.w	r2, #0
 800b53a:	701a      	strb	r2, [r3, #0]
        	break;
 800b53c:	e32a      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'D': // Read Roll Attitude PID Values
            readUsbPID(ROLL_ATT_PID);
 800b53e:	f04f 0003 	mov.w	r0, #3
 800b542:	f7fd fd07 	bl	8008f54 <readUsbPID>
            uart1Print( "\nRoll Attitude PID Received....\n" );
 800b546:	f24b 60fc 	movw	r0, #46844	; 0xb6fc
 800b54a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b54e:	f7fb fa67 	bl	8006a20 <uart1Print>

        	queryType = 'b';
 800b552:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b556:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b55a:	f04f 0262 	mov.w	r2, #98	; 0x62
 800b55e:	701a      	strb	r2, [r3, #0]
        	validCommand = false;
 800b560:	f240 73de 	movw	r3, #2014	; 0x7de
 800b564:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b568:	f04f 0200 	mov.w	r2, #0
 800b56c:	701a      	strb	r2, [r3, #0]
        	break;
 800b56e:	e311      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'E': // Read Pitch Attitude PID Values
            readUsbPID(PITCH_ATT_PID);
 800b570:	f04f 0004 	mov.w	r0, #4
 800b574:	f7fd fcee 	bl	8008f54 <readUsbPID>
            uart1Print( "\nPitch Attitude PID Received....\n" );
 800b578:	f24b 7020 	movw	r0, #46880	; 0xb720
 800b57c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b580:	f7fb fa4e 	bl	8006a20 <uart1Print>

        	queryType = 'b';
 800b584:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b588:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b58c:	f04f 0262 	mov.w	r2, #98	; 0x62
 800b590:	701a      	strb	r2, [r3, #0]
        	validCommand = false;
 800b592:	f240 73de 	movw	r3, #2014	; 0x7de
 800b596:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b59a:	f04f 0200 	mov.w	r2, #0
 800b59e:	701a      	strb	r2, [r3, #0]
        	break;
 800b5a0:	e2f8      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'F': // Read Heading Hold PID Values
            readUsbPID(HEADING_PID);
 800b5a2:	f04f 0005 	mov.w	r0, #5
 800b5a6:	f7fd fcd5 	bl	8008f54 <readUsbPID>
            uart1Print( "\nHeading PID Received....\n" );
 800b5aa:	f24b 7044 	movw	r0, #46916	; 0xb744
 800b5ae:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b5b2:	f7fb fa35 	bl	8006a20 <uart1Print>

        	queryType = 'b';
 800b5b6:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b5ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b5be:	f04f 0262 	mov.w	r2, #98	; 0x62
 800b5c2:	701a      	strb	r2, [r3, #0]
        	validCommand = false;
 800b5c4:	f240 73de 	movw	r3, #2014	; 0x7de
 800b5c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b5cc:	f04f 0200 	mov.w	r2, #0
 800b5d0:	701a      	strb	r2, [r3, #0]
        	break;
 800b5d2:	e2df      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'G': // Read nDot PID Values
            readUsbPID(NDOT_PID);
 800b5d4:	f04f 0006 	mov.w	r0, #6
 800b5d8:	f7fd fcbc 	bl	8008f54 <readUsbPID>
            uart1Print( "\nnDot PID Received....\n" );
 800b5dc:	f24b 7060 	movw	r0, #46944	; 0xb760
 800b5e0:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b5e4:	f7fb fa1c 	bl	8006a20 <uart1Print>

        	queryType = 'c';
 800b5e8:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b5ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b5f0:	f04f 0263 	mov.w	r2, #99	; 0x63
 800b5f4:	701a      	strb	r2, [r3, #0]
        	validCommand = false;
 800b5f6:	f240 73de 	movw	r3, #2014	; 0x7de
 800b5fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b5fe:	f04f 0200 	mov.w	r2, #0
 800b602:	701a      	strb	r2, [r3, #0]
        	break;
 800b604:	e2c6      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'H': // Read eDot PID Values
            readUsbPID(EDOT_PID);
 800b606:	f04f 0007 	mov.w	r0, #7
 800b60a:	f7fd fca3 	bl	8008f54 <readUsbPID>
            uart1Print( "\neDot PID Received....\n" );
 800b60e:	f24b 7078 	movw	r0, #46968	; 0xb778
 800b612:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b616:	f7fb fa03 	bl	8006a20 <uart1Print>

            queryType = 'c';
 800b61a:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b61e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b622:	f04f 0263 	mov.w	r2, #99	; 0x63
 800b626:	701a      	strb	r2, [r3, #0]
          	validCommand = false;
 800b628:	f240 73de 	movw	r3, #2014	; 0x7de
 800b62c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b630:	f04f 0200 	mov.w	r2, #0
 800b634:	701a      	strb	r2, [r3, #0]
          	break;
 800b636:	e2ad      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'I': // Read hDot PID Values
            readUsbPID(HDOT_PID);
 800b638:	f04f 0008 	mov.w	r0, #8
 800b63c:	f7fd fc8a 	bl	8008f54 <readUsbPID>
            uart1Print( "\nhDot PID Received....\n" );
 800b640:	f24b 7090 	movw	r0, #46992	; 0xb790
 800b644:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b648:	f7fb f9ea 	bl	8006a20 <uart1Print>

          	queryType = 'c';
 800b64c:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b650:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b654:	f04f 0263 	mov.w	r2, #99	; 0x63
 800b658:	701a      	strb	r2, [r3, #0]
          	validCommand = false;
 800b65a:	f240 73de 	movw	r3, #2014	; 0x7de
 800b65e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b662:	f04f 0200 	mov.w	r2, #0
 800b666:	701a      	strb	r2, [r3, #0]
          	break;
 800b668:	e294      	b.n	800bb94 <cliCom+0x2bb0>

       	///////////////////////////////

        case 'J': // Read n PID Values
            readUsbPID(N_PID);
 800b66a:	f04f 0009 	mov.w	r0, #9
 800b66e:	f7fd fc71 	bl	8008f54 <readUsbPID>
            uart1Print( "\nn PID Received....\n" );
 800b672:	f24b 70a8 	movw	r0, #47016	; 0xb7a8
 800b676:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b67a:	f7fb f9d1 	bl	8006a20 <uart1Print>

            queryType = 'd';
 800b67e:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b682:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b686:	f04f 0264 	mov.w	r2, #100	; 0x64
 800b68a:	701a      	strb	r2, [r3, #0]
            validCommand = false;
 800b68c:	f240 73de 	movw	r3, #2014	; 0x7de
 800b690:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b694:	f04f 0200 	mov.w	r2, #0
 800b698:	701a      	strb	r2, [r3, #0]
        	break;
 800b69a:	e27b      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'K': // Read e PID Values
            readUsbPID(E_PID);
 800b69c:	f04f 000a 	mov.w	r0, #10
 800b6a0:	f7fd fc58 	bl	8008f54 <readUsbPID>
            uart1Print( "\ne PID Received....\n" );
 800b6a4:	f24b 70c0 	movw	r0, #47040	; 0xb7c0
 800b6a8:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b6ac:	f7fb f9b8 	bl	8006a20 <uart1Print>

            queryType = 'd';
 800b6b0:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b6b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b6b8:	f04f 0264 	mov.w	r2, #100	; 0x64
 800b6bc:	701a      	strb	r2, [r3, #0]
            validCommand = false;
 800b6be:	f240 73de 	movw	r3, #2014	; 0x7de
 800b6c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b6c6:	f04f 0200 	mov.w	r2, #0
 800b6ca:	701a      	strb	r2, [r3, #0]
        	break;
 800b6cc:	e262      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'L': // Read h PID Values
            readUsbPID(H_PID);
 800b6ce:	f04f 000b 	mov.w	r0, #11
 800b6d2:	f7fd fc3f 	bl	8008f54 <readUsbPID>
            uart1Print( "\nh PID Received....\n" );
 800b6d6:	f24b 70d8 	movw	r0, #47064	; 0xb7d8
 800b6da:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b6de:	f7fb f99f 	bl	8006a20 <uart1Print>

            queryType = 'd';
 800b6e2:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b6e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b6ea:	f04f 0264 	mov.w	r2, #100	; 0x64
 800b6ee:	701a      	strb	r2, [r3, #0]
        	validCommand = false;
 800b6f0:	f240 73de 	movw	r3, #2014	; 0x7de
 800b6f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b6f8:	f04f 0200 	mov.w	r2, #0
 800b6fc:	701a      	strb	r2, [r3, #0]
        	break;
 800b6fe:	e249      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'M': // MAX7456 CLI
           	max7456CLI();
 800b700:	f000 fa4a 	bl	800bb98 <max7456CLI>

           	queryType = 'x';
 800b704:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b708:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b70c:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b710:	701a      	strb	r2, [r3, #0]
        	validCommand = false;
 800b712:	f240 73de 	movw	r3, #2014	; 0x7de
 800b716:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b71a:	f04f 0200 	mov.w	r2, #0
 800b71e:	701a      	strb	r2, [r3, #0]
        	break;
 800b720:	e238      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'N': // Mixer CLI
            mixerCLI();
 800b722:	f000 fd41 	bl	800c1a8 <mixerCLI>

            queryType = 'x';
 800b726:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b72a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b72e:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b732:	701a      	strb	r2, [r3, #0]
            validCommand = false;
 800b734:	f240 73de 	movw	r3, #2014	; 0x7de
 800b738:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b73c:	f04f 0200 	mov.w	r2, #0
 800b740:	701a      	strb	r2, [r3, #0]
            break;
 800b742:	e227      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'O': // Receiver CLI
            receiverCLI();
 800b744:	f001 fe9e 	bl	800d484 <receiverCLI>

            queryType = 'x';
 800b748:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b74c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b750:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b754:	701a      	strb	r2, [r3, #0]
            validCommand = false;
 800b756:	f240 73de 	movw	r3, #2014	; 0x7de
 800b75a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b75e:	f04f 0200 	mov.w	r2, #0
 800b762:	701a      	strb	r2, [r3, #0]
            break;
 800b764:	e216      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'P': // Sensor CLI
           	sensorCLI();
 800b766:	f002 fa43 	bl	800dbf0 <sensorCLI>

           	queryType = 'x';
 800b76a:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b76e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b772:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b776:	701a      	strb	r2, [r3, #0]
           	validCommand = false;
 800b778:	f240 73de 	movw	r3, #2014	; 0x7de
 800b77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b780:	f04f 0200 	mov.w	r2, #0
 800b784:	701a      	strb	r2, [r3, #0]
           	break;
 800b786:	e205      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'Q': // GPS CLI
            gpsCLI();
 800b788:	f002 fd32 	bl	800e1f0 <gpsCLI>

            queryType = 'x';
 800b78c:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b790:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b794:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b798:	701a      	strb	r2, [r3, #0]
           	validCommand = false;
 800b79a:	f240 73de 	movw	r3, #2014	; 0x7de
 800b79e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b7a2:	f04f 0200 	mov.w	r2, #0
 800b7a6:	701a      	strb	r2, [r3, #0]
           	break;
 800b7a8:	e1f4      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'R': // Reset to Bootloader
        	uart1Print("Entering Bootloader....\n\n");
 800b7aa:	f24b 70f0 	movw	r0, #47088	; 0xb7f0
 800b7ae:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b7b2:	f7fb f935 	bl	8006a20 <uart1Print>
        	delay(100);
 800b7b6:	f04f 0064 	mov.w	r0, #100	; 0x64
 800b7ba:	f7fa fc9b 	bl	80060f4 <delay>
        	systemReset(true);
 800b7be:	f04f 0001 	mov.w	r0, #1
 800b7c2:	f7fa fcad 	bl	8006120 <systemReset>
        	break;
 800b7c6:	e1e5      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'S': // Reset System
        	uart1Print("\nSystem Reseting....\n\n");
 800b7c8:	f64b 000c 	movw	r0, #47116	; 0xb80c
 800b7cc:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b7d0:	f7fb f926 	bl	8006a20 <uart1Print>
        	delay(100);
 800b7d4:	f04f 0064 	mov.w	r0, #100	; 0x64
 800b7d8:	f7fa fc8c 	bl	80060f4 <delay>
        	systemReset(false);
 800b7dc:	f04f 0000 	mov.w	r0, #0
 800b7e0:	f7fa fc9e 	bl	8006120 <systemReset>
        	break;
 800b7e4:	e1d6      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'T': // Not Used
            queryType = 'x';
 800b7e6:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b7ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b7ee:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b7f2:	701a      	strb	r2, [r3, #0]
           	validCommand = false;
 800b7f4:	f240 73de 	movw	r3, #2014	; 0x7de
 800b7f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b7fc:	f04f 0200 	mov.w	r2, #0
 800b800:	701a      	strb	r2, [r3, #0]
           	break;
 800b802:	e1c7      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'U': // Not Used
            queryType = 'x';
 800b804:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b808:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b80c:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b810:	701a      	strb	r2, [r3, #0]
         	validCommand = false;
 800b812:	f240 73de 	movw	r3, #2014	; 0x7de
 800b816:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b81a:	f04f 0200 	mov.w	r2, #0
 800b81e:	701a      	strb	r2, [r3, #0]
         	break;
 800b820:	e1b8      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'V': // Reset EEPROM Parameters
            uart1Print( "\nEEPROM Parameters Reset....\n" );
 800b822:	f64b 0024 	movw	r0, #47140	; 0xb824
 800b826:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b82a:	f7fb f8f9 	bl	8006a20 <uart1Print>
            checkFirstTime(true);
 800b82e:	f04f 0001 	mov.w	r0, #1
 800b832:	f003 f8a7 	bl	800e984 <checkFirstTime>
            uart1Print("\nSystem Resetting....\n\n");
 800b836:	f64b 0044 	movw	r0, #47172	; 0xb844
 800b83a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b83e:	f7fb f8ef 	bl	8006a20 <uart1Print>
            delay(100);
 800b842:	f04f 0064 	mov.w	r0, #100	; 0x64
 800b846:	f7fa fc55 	bl	80060f4 <delay>
            systemReset(false);
 800b84a:	f04f 0000 	mov.w	r0, #0
 800b84e:	f7fa fc67 	bl	8006120 <systemReset>
            break;
 800b852:	e19f      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'W': // Write EEPROM Parameters
            uart1Print("\nWriting EEPROM Parameters....\n");
 800b854:	f64b 005c 	movw	r0, #47196	; 0xb85c
 800b858:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b85c:	f7fb f8e0 	bl	8006a20 <uart1Print>
            writeEEPROM();
 800b860:	f003 f852 	bl	800e908 <writeEEPROM>

            queryType = 'x';
 800b864:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b868:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b86c:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b870:	701a      	strb	r2, [r3, #0]
         	validCommand = false;
 800b872:	f240 73de 	movw	r3, #2014	; 0x7de
 800b876:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b87a:	f04f 0200 	mov.w	r2, #0
 800b87e:	701a      	strb	r2, [r3, #0]
         	break;
 800b880:	e188      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'X': // Not Used
            queryType = 'x';
 800b882:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b886:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b88a:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b88e:	701a      	strb	r2, [r3, #0]
            validCommand = false;
 800b890:	f240 73de 	movw	r3, #2014	; 0x7de
 800b894:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b898:	f04f 0200 	mov.w	r2, #0
 800b89c:	701a      	strb	r2, [r3, #0]
            break;
 800b89e:	e179      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'Y': // Not Used
            queryType = 'x';
 800b8a0:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b8a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b8a8:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b8ac:	701a      	strb	r2, [r3, #0]
            break;
 800b8ae:	e171      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case 'Z': // Not Used
            queryType = 'x';
 800b8b0:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b8b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b8b8:	f04f 0278 	mov.w	r2, #120	; 0x78
 800b8bc:	701a      	strb	r2, [r3, #0]
            break;
 800b8be:	e169      	b.n	800bb94 <cliCom+0x2bb0>

        ///////////////////////////////

        case '?': // Command Summary
        	cliBusy = true;
 800b8c0:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800b8c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b8c8:	f04f 0201 	mov.w	r2, #1
 800b8cc:	701a      	strb	r2, [r3, #0]

        	uart1Print("\n");
 800b8ce:	f24b 405c 	movw	r0, #46172	; 0xb45c
 800b8d2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b8d6:	f7fb f8a3 	bl	8006a20 <uart1Print>
   		    uart1Print("'a' Rate PIDs                              'A' Set Roll Rate PID Data   AB;P;I;D;windupGuard;dErrorCalc\n");
 800b8da:	f64b 007c 	movw	r0, #47228	; 0xb87c
 800b8de:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b8e2:	f7fb f89d 	bl	8006a20 <uart1Print>
   		    uart1Print("'b' Attitude PIDs                          'B' Set Pitch Rate PID Data  BB;P;I;D;windupGuard;dErrorCalc\n");
 800b8e6:	f64b 00e8 	movw	r0, #47336	; 0xb8e8
 800b8ea:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b8ee:	f7fb f897 	bl	8006a20 <uart1Print>
   		    uart1Print("'c' Velocity PIDs                          'C' Set Yaw Rate PID Data    CB;P;I;D;windupGuard;dErrorCalc\n");
 800b8f2:	f64b 1054 	movw	r0, #47444	; 0xb954
 800b8f6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b8fa:	f7fb f891 	bl	8006a20 <uart1Print>
   		    uart1Print("'d' Position PIDs                          'D' Set Roll Att PID Data    DB;P;I;D;windupGuard;dErrorCalc\n");
 800b8fe:	f64b 10c0 	movw	r0, #47552	; 0xb9c0
 800b902:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b906:	f7fb f88b 	bl	8006a20 <uart1Print>
   		    uart1Print("'e' Loop Delta Times                       'E' Set Pitch Att PID Data   EB;P;I;D;windupGuard;dErrorCalc\n");
 800b90a:	f64b 202c 	movw	r0, #47660	; 0xba2c
 800b90e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b912:	f7fb f885 	bl	8006a20 <uart1Print>
   		    uart1Print("'f' Loop Execution Times                   'F' Set Hdg Hold PID Data    FB;P;I;D;windupGuard;dErrorCalc\n");
 800b916:	f64b 2098 	movw	r0, #47768	; 0xba98
 800b91a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b91e:	f7fb f87f 	bl	8006a20 <uart1Print>
   		    uart1Print("'g' 500 Hz Accels                          'G' Set nDot PID Data        GB;P;I;D;windupGuard;dErrorCalc\n");
 800b922:	f64b 3004 	movw	r0, #47876	; 0xbb04
 800b926:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b92a:	f7fb f879 	bl	8006a20 <uart1Print>
   		    uart1Print("'h' 100 Hz Earth Axis Accels               'H' Set eDot PID Data        HB;P;I;D;windupGuard;dErrorCalc\n");
 800b92e:	f64b 3070 	movw	r0, #47984	; 0xbb70
 800b932:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b936:	f7fb f873 	bl	8006a20 <uart1Print>
   		    uart1Print("'i' 500 Hz Gyros                           'I' Set hDot PID Data        IB;P;I;D;windupGuard;dErrorCalc\n");
 800b93a:	f64b 30dc 	movw	r0, #48092	; 0xbbdc
 800b93e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b942:	f7fb f86d 	bl	8006a20 <uart1Print>
   		    uart1Print("'j' 10 hz Mag Data                         'J' Set n PID Data           JB;P;I;D;windupGuard;dErrorCalc\n");
 800b946:	f64b 4048 	movw	r0, #48200	; 0xbc48
 800b94a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b94e:	f7fb f867 	bl	8006a20 <uart1Print>
   		    uart1Print("'k' Vertical Axis Variable                 'K' Set e PID Data           KB;P;I;D;windupGuard;dErrorCalc\n");
 800b952:	f64b 40b4 	movw	r0, #48308	; 0xbcb4
 800b956:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b95a:	f7fb f861 	bl	8006a20 <uart1Print>
   		    uart1Print("'l' Attitudes                              'L' Set h PID Data           LB;P;I;D;windupGuard;dErrorCalc\n");
 800b95e:	f64b 5020 	movw	r0, #48416	; 0xbd20
 800b962:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b966:	f7fb f85b 	bl	8006a20 <uart1Print>
   		    uart1Print("\n");
 800b96a:	f24b 405c 	movw	r0, #46172	; 0xb45c
 800b96e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b972:	f7fb f855 	bl	8006a20 <uart1Print>

   		    uart1Print("Press space bar for more, or enter a command....\n");
 800b976:	f64b 508c 	movw	r0, #48524	; 0xbd8c
 800b97a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b97e:	f7fb f84f 	bl	8006a20 <uart1Print>
   		    while (uart1Available() == false);
 800b982:	bf00      	nop
 800b984:	f7fa ffce 	bl	8006924 <uart1Available>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d0fa      	beq.n	800b984 <cliCom+0x29a0>
   		    queryType = uart1Read();
 800b98e:	f7fa ffdf 	bl	8006950 <uart1Read>
 800b992:	4603      	mov	r3, r0
 800b994:	461a      	mov	r2, r3
 800b996:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b99a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b99e:	701a      	strb	r2, [r3, #0]
   		    if (queryType != ' ')
 800b9a0:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800b9a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	2b20      	cmp	r3, #32
 800b9ae:	d00e      	beq.n	800b9ce <cliCom+0x29ea>
   		    {
   		        validCommand = true;
 800b9b0:	f240 73de 	movw	r3, #2014	; 0x7de
 800b9b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b9b8:	f04f 0201 	mov.w	r2, #1
 800b9bc:	701a      	strb	r2, [r3, #0]
   		        cliBusy = false;
 800b9be:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800b9c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b9c6:	f04f 0200 	mov.w	r2, #0
 800b9ca:	701a      	strb	r2, [r3, #0]
   		    	return;
 800b9cc:	e0e2      	b.n	800bb94 <cliCom+0x2bb0>
   		    }

   		    uart1Print("\n");
 800b9ce:	f24b 405c 	movw	r0, #46172	; 0xb45c
 800b9d2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b9d6:	f7fb f823 	bl	8006a20 <uart1Print>
   		    uart1Print("'m' GPS Data                               'M' MAX7456 CLI\n");
 800b9da:	f64b 50c0 	movw	r0, #48576	; 0xbdc0
 800b9de:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b9e2:	f7fb f81d 	bl	8006a20 <uart1Print>
   		    uart1Print("'n' GPS Stats                              'N' Mixer CLI\n");
 800b9e6:	f64b 50fc 	movw	r0, #48636	; 0xbdfc
 800b9ea:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b9ee:	f7fb f817 	bl	8006a20 <uart1Print>
   		    uart1Print("'o' Not Used                               'O' Receiver CLI\n");
 800b9f2:	f64b 6038 	movw	r0, #48696	; 0xbe38
 800b9f6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800b9fa:	f7fb f811 	bl	8006a20 <uart1Print>
   		    uart1Print("'p' Not Used                               'P' Sensor CLI\n");
 800b9fe:	f64b 6078 	movw	r0, #48760	; 0xbe78
 800ba02:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ba06:	f7fb f80b 	bl	8006a20 <uart1Print>
   		    uart1Print("'q' Not Used                               'Q' GPS CLI\n");
 800ba0a:	f64b 60b4 	movw	r0, #48820	; 0xbeb4
 800ba0e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ba12:	f7fb f805 	bl	8006a20 <uart1Print>
   		    uart1Print("'r' Mode States                            'R' Reset and Enter Bootloader\n");
 800ba16:	f64b 60ec 	movw	r0, #48876	; 0xbeec
 800ba1a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ba1e:	f7fa ffff 	bl	8006a20 <uart1Print>
   		    uart1Print("'s' Raw Receiver Commands                  'S' Reset\n");
 800ba22:	f64b 7038 	movw	r0, #48952	; 0xbf38
 800ba26:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ba2a:	f7fa fff9 	bl	8006a20 <uart1Print>
   		    uart1Print("'t' Processed Receiver Commands            'T' Not Used\n");
 800ba2e:	f64b 7070 	movw	r0, #49008	; 0xbf70
 800ba32:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ba36:	f7fa fff3 	bl	8006a20 <uart1Print>
   		    uart1Print("'u' Command In Detent Discretes            'U' Not Used\n");
 800ba3a:	f64b 70ac 	movw	r0, #49068	; 0xbfac
 800ba3e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ba42:	f7fa ffed 	bl	8006a20 <uart1Print>
   		    uart1Print("'v' Motor PWM Outputs                      'V' Reset EEPROM Parameters\n");
 800ba46:	f64b 70e8 	movw	r0, #49128	; 0xbfe8
 800ba4a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ba4e:	f7fa ffe7 	bl	8006a20 <uart1Print>
   		    uart1Print("'w' Servo PWM Outputs                      'W' Write EEPROM Parameters\n");
 800ba52:	f24c 0030 	movw	r0, #49200	; 0xc030
 800ba56:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ba5a:	f7fa ffe1 	bl	8006a20 <uart1Print>
   		    uart1Print("'x' Terminate Serial Communication         'X' Not Used\n");
 800ba5e:	f24c 0078 	movw	r0, #49272	; 0xc078
 800ba62:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ba66:	f7fa ffdb 	bl	8006a20 <uart1Print>
   		    uart1Print("\n");
 800ba6a:	f24b 405c 	movw	r0, #46172	; 0xb45c
 800ba6e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ba72:	f7fa ffd5 	bl	8006a20 <uart1Print>

   		    uart1Print("Press space bar for more, or enter a command....\n");
 800ba76:	f64b 508c 	movw	r0, #48524	; 0xbd8c
 800ba7a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ba7e:	f7fa ffcf 	bl	8006a20 <uart1Print>
   		    while (uart1Available() == false);
 800ba82:	bf00      	nop
 800ba84:	f7fa ff4e 	bl	8006924 <uart1Available>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d0fa      	beq.n	800ba84 <cliCom+0x2aa0>
   		    queryType = uart1Read();
 800ba8e:	f7fa ff5f 	bl	8006950 <uart1Read>
 800ba92:	4603      	mov	r3, r0
 800ba94:	461a      	mov	r2, r3
 800ba96:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800ba9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba9e:	701a      	strb	r2, [r3, #0]
   		    if (queryType != ' ')
 800baa0:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800baa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b20      	cmp	r3, #32
 800baae:	d00e      	beq.n	800bace <cliCom+0x2aea>
   		    {
   		    	validCommand = true;
 800bab0:	f240 73de 	movw	r3, #2014	; 0x7de
 800bab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bab8:	f04f 0201 	mov.w	r2, #1
 800babc:	701a      	strb	r2, [r3, #0]
   		    	cliBusy = false;
 800babe:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800bac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bac6:	f04f 0200 	mov.w	r2, #0
 800baca:	701a      	strb	r2, [r3, #0]
   		    	return;
 800bacc:	e062      	b.n	800bb94 <cliCom+0x2bb0>
   		    }

   		    uart1Print("\n");
 800bace:	f24b 405c 	movw	r0, #46172	; 0xb45c
 800bad2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bad6:	f7fa ffa3 	bl	8006a20 <uart1Print>
   		    uart1Print("'y' ESC Calibration                        'Y' Not Used\n");
 800bada:	f24c 00b4 	movw	r0, #49332	; 0xc0b4
 800bade:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bae2:	f7fa ff9d 	bl	8006a20 <uart1Print>
   		    uart1Print("'z' Not Used                               'Z' Not Used\n");
 800bae6:	f24c 00f0 	movw	r0, #49392	; 0xc0f0
 800baea:	f6c0 0002 	movt	r0, #2050	; 0x802
 800baee:	f7fa ff97 	bl	8006a20 <uart1Print>
   		    uart1Print("'1' High Speed Telemetry 1 Enable\n");
 800baf2:	f24c 102c 	movw	r0, #49452	; 0xc12c
 800baf6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bafa:	f7fa ff91 	bl	8006a20 <uart1Print>
   		    uart1Print("'2' High Speed Telemetry 2 Enable\n");
 800bafe:	f24c 1050 	movw	r0, #49488	; 0xc150
 800bb02:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bb06:	f7fa ff8b 	bl	8006a20 <uart1Print>
   		    uart1Print("'3' High Speed Telemetry 3 Enable\n");
 800bb0a:	f24c 1074 	movw	r0, #49524	; 0xc174
 800bb0e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bb12:	f7fa ff85 	bl	8006a20 <uart1Print>
   		    uart1Print("'4' High Speed Telemetry 4 Enable\n");
 800bb16:	f24c 1098 	movw	r0, #49560	; 0xc198
 800bb1a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bb1e:	f7fa ff7f 	bl	8006a20 <uart1Print>
   		    uart1Print("'5' High Speed Telemetry 5 Enable\n");
 800bb22:	f24c 10bc 	movw	r0, #49596	; 0xc1bc
 800bb26:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bb2a:	f7fa ff79 	bl	8006a20 <uart1Print>
   		    uart1Print("'6' High Speed Telemetry 6 Enable\n");
 800bb2e:	f24c 10e0 	movw	r0, #49632	; 0xc1e0
 800bb32:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bb36:	f7fa ff73 	bl	8006a20 <uart1Print>
   		    uart1Print("'7' High Speed Telemetry 7 Enable\n");
 800bb3a:	f24c 2004 	movw	r0, #49668	; 0xc204
 800bb3e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bb42:	f7fa ff6d 	bl	8006a20 <uart1Print>
   		    uart1Print("'8' High Speed Telemetry 8 Enable\n");
 800bb46:	f24c 2028 	movw	r0, #49704	; 0xc228
 800bb4a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bb4e:	f7fa ff67 	bl	8006a20 <uart1Print>
   		    uart1Print("'9' High Speed Telemetry 9 Enable\n");
 800bb52:	f24c 204c 	movw	r0, #49740	; 0xc24c
 800bb56:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bb5a:	f7fa ff61 	bl	8006a20 <uart1Print>
   		    uart1Print("'0' High Speed Telemetry Disable           '?' Command Summary\n");
 800bb5e:	f24c 2070 	movw	r0, #49776	; 0xc270
 800bb62:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bb66:	f7fa ff5b 	bl	8006a20 <uart1Print>
   		    uart1Print("\n");
 800bb6a:	f24b 405c 	movw	r0, #46172	; 0xb45c
 800bb6e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bb72:	f7fa ff55 	bl	8006a20 <uart1Print>

  		    queryType = 'x';
 800bb76:	f240 73dd 	movw	r3, #2013	; 0x7dd
 800bb7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb7e:	f04f 0278 	mov.w	r2, #120	; 0x78
 800bb82:	701a      	strb	r2, [r3, #0]
  		    cliBusy = false;
 800bb84:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800bb88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb8c:	f04f 0200 	mov.w	r2, #0
 800bb90:	701a      	strb	r2, [r3, #0]
   		    break;
 800bb92:	bf00      	nop

            ///////////////////////////////
    }
}
 800bb94:	b005      	add	sp, #20
 800bb96:	bd00      	pop	{pc}

0800bb98 <max7456CLI>:
///////////////////////////////////////////////////////////////////////////////
// MAX7456 CLI
///////////////////////////////////////////////////////////////////////////////

void max7456CLI()
{
 800bb98:	b500      	push	{lr}
 800bb9a:	b083      	sub	sp, #12
    uint8_t  max7456query;
    uint8_t  validQuery = false;
 800bb9c:	f04f 0300 	mov.w	r3, #0
 800bba0:	f88d 3006 	strb.w	r3, [sp, #6]

    cliBusy = true;
 800bba4:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800bba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bbac:	f04f 0201 	mov.w	r2, #1
 800bbb0:	701a      	strb	r2, [r3, #0]

    uart1Print("\nEntering MAX7456 CLI....\n\n");
 800bbb2:	f24c 20b0 	movw	r0, #49840	; 0xc2b0
 800bbb6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bbba:	f7fa ff31 	bl	8006a20 <uart1Print>

   	resetMax7456();
 800bbbe:	f7f8 f9b9 	bl	8003f34 <resetMax7456>
 800bbc2:	e000      	b.n	800bbc6 <max7456CLI+0x2e>
			   	uart1Print("\n");
	    	    break;

	    	///////////////////////
	    }
    }
 800bbc4:	bf00      	nop

   	resetMax7456();

    while(true)
    {
    	if (!validQuery) uart1Print("MAX7456 CLI -> ");
 800bbc6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d105      	bne.n	800bbda <max7456CLI+0x42>
 800bbce:	f24c 20cc 	movw	r0, #49868	; 0xc2cc
 800bbd2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bbd6:	f7fa ff23 	bl	8006a20 <uart1Print>

		while ((uart1Available() == false) && (validQuery == false));
 800bbda:	bf00      	nop
 800bbdc:	f7fa fea2 	bl	8006924 <uart1Available>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d103      	bne.n	800bbee <max7456CLI+0x56>
 800bbe6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d0f6      	beq.n	800bbdc <max7456CLI+0x44>

		if (validQuery == false)
 800bbee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d104      	bne.n	800bc00 <max7456CLI+0x68>
		    max7456query = uart1Read();
 800bbf6:	f7fa feab 	bl	8006950 <uart1Read>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	f88d 3007 	strb.w	r3, [sp, #7]

		if (!validQuery) uart1Print("\n");
 800bc00:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d105      	bne.n	800bc14 <max7456CLI+0x7c>
 800bc08:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800bc0c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bc10:	f7fa ff06 	bl	8006a20 <uart1Print>

		switch(max7456query)
 800bc14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bc18:	f1a3 033f 	sub.w	r3, r3, #63	; 0x3f
 800bc1c:	2b39      	cmp	r3, #57	; 0x39
 800bc1e:	d8d1      	bhi.n	800bbc4 <max7456CLI+0x2c>
 800bc20:	a201      	add	r2, pc, #4	; (adr r2, 800bc28 <max7456CLI+0x90>)
 800bc22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc26:	bf00      	nop
 800bc28:	0800c0fb 	.word	0x0800c0fb
 800bc2c:	0800bbc5 	.word	0x0800bbc5
 800bc30:	0800bbc5 	.word	0x0800bbc5
 800bc34:	0800c03f 	.word	0x0800c03f
 800bc38:	0800c061 	.word	0x0800c061
 800bc3c:	0800c083 	.word	0x0800c083
 800bc40:	0800c0a5 	.word	0x0800c0a5
 800bc44:	0800bbc5 	.word	0x0800bbc5
 800bc48:	0800bbc5 	.word	0x0800bbc5
 800bc4c:	0800bbc5 	.word	0x0800bbc5
 800bc50:	0800bbc5 	.word	0x0800bbc5
 800bc54:	0800bbc5 	.word	0x0800bbc5
 800bc58:	0800bbc5 	.word	0x0800bbc5
 800bc5c:	0800bbc5 	.word	0x0800bbc5
 800bc60:	0800bbc5 	.word	0x0800bbc5
 800bc64:	0800bbc5 	.word	0x0800bbc5
 800bc68:	0800bbc5 	.word	0x0800bbc5
 800bc6c:	0800bbc5 	.word	0x0800bbc5
 800bc70:	0800c0c7 	.word	0x0800c0c7
 800bc74:	0800bbc5 	.word	0x0800bbc5
 800bc78:	0800bbc5 	.word	0x0800bbc5
 800bc7c:	0800bbc5 	.word	0x0800bbc5
 800bc80:	0800bbc5 	.word	0x0800bbc5
 800bc84:	0800bbc5 	.word	0x0800bbc5
 800bc88:	0800c0e9 	.word	0x0800c0e9
 800bc8c:	0800bbc5 	.word	0x0800bbc5
 800bc90:	0800bbc5 	.word	0x0800bbc5
 800bc94:	0800bbc5 	.word	0x0800bbc5
 800bc98:	0800bbc5 	.word	0x0800bbc5
 800bc9c:	0800bbc5 	.word	0x0800bbc5
 800bca0:	0800bbc5 	.word	0x0800bbc5
 800bca4:	0800bbc5 	.word	0x0800bbc5
 800bca8:	0800bbc5 	.word	0x0800bbc5
 800bcac:	0800bbc5 	.word	0x0800bbc5
 800bcb0:	0800bd11 	.word	0x0800bd11
 800bcb4:	0800bea1 	.word	0x0800bea1
 800bcb8:	0800bec3 	.word	0x0800bec3
 800bcbc:	0800bef5 	.word	0x0800bef5
 800bcc0:	0800bf27 	.word	0x0800bf27
 800bcc4:	0800bbc5 	.word	0x0800bbc5
 800bcc8:	0800bbc5 	.word	0x0800bbc5
 800bccc:	0800bbc5 	.word	0x0800bbc5
 800bcd0:	0800bbc5 	.word	0x0800bbc5
 800bcd4:	0800bbc5 	.word	0x0800bbc5
 800bcd8:	0800bbc5 	.word	0x0800bbc5
 800bcdc:	0800bbc5 	.word	0x0800bbc5
 800bce0:	0800bbc5 	.word	0x0800bbc5
 800bce4:	0800bbc5 	.word	0x0800bbc5
 800bce8:	0800bbc5 	.word	0x0800bbc5
 800bcec:	0800bbc5 	.word	0x0800bbc5
 800bcf0:	0800bf49 	.word	0x0800bf49
 800bcf4:	0800bf6b 	.word	0x0800bf6b
 800bcf8:	0800bf7d 	.word	0x0800bf7d
 800bcfc:	0800bf8f 	.word	0x0800bf8f
 800bd00:	0800bf95 	.word	0x0800bf95
 800bd04:	0800bfdd 	.word	0x0800bfdd
 800bd08:	0800bbc5 	.word	0x0800bbc5
 800bd0c:	0800c021 	.word	0x0800c021
		{
            ///////////////////////

            case 'a': // OSD Configuration
                uart1Print("\nMAX7456 OSD Status:             ");
 800bd10:	f24c 20e0 	movw	r0, #49888	; 0xc2e0
 800bd14:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bd18:	f7fa fe82 	bl	8006a20 <uart1Print>
                if (eepromConfig.osdEnabled)
 800bd1c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800bd20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd24:	f893 3344 	ldrb.w	r3, [r3, #836]	; 0x344
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d006      	beq.n	800bd3a <max7456CLI+0x1a2>
                	uart1Print("Enabled\n");
 800bd2c:	f24c 3004 	movw	r0, #49924	; 0xc304
 800bd30:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bd34:	f7fa fe74 	bl	8006a20 <uart1Print>
 800bd38:	e005      	b.n	800bd46 <max7456CLI+0x1ae>
                else
               	    uart1Print("Disabled\n");
 800bd3a:	f24c 3010 	movw	r0, #49936	; 0xc310
 800bd3e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bd42:	f7fa fe6d 	bl	8006a20 <uart1Print>

                uart1Print("OSD Default Video Standard:     ");
 800bd46:	f24c 301c 	movw	r0, #49948	; 0xc31c
 800bd4a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bd4e:	f7fa fe67 	bl	8006a20 <uart1Print>
                if (eepromConfig.defaultVideoStandard)
 800bd52:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800bd56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd5a:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d006      	beq.n	800bd70 <max7456CLI+0x1d8>
                    uart1Print("PAL\n");
 800bd62:	f24c 3040 	movw	r0, #49984	; 0xc340
 800bd66:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bd6a:	f7fa fe59 	bl	8006a20 <uart1Print>
 800bd6e:	e005      	b.n	800bd7c <max7456CLI+0x1e4>
                else
                    uart1Print("NTSC\n");
 800bd70:	f24c 3048 	movw	r0, #49992	; 0xc348
 800bd74:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bd78:	f7fa fe52 	bl	8006a20 <uart1Print>

                uart1Print("OSD Display Units:              ");
 800bd7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bd80:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bd84:	f7fa fe4c 	bl	8006a20 <uart1Print>
                if (eepromConfig.metricUnits)
 800bd88:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800bd8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd90:	f893 3346 	ldrb.w	r3, [r3, #838]	; 0x346
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d006      	beq.n	800bda6 <max7456CLI+0x20e>
                    uart1Print("Metric\n");
 800bd98:	f24c 3074 	movw	r0, #50036	; 0xc374
 800bd9c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bda0:	f7fa fe3e 	bl	8006a20 <uart1Print>
 800bda4:	e005      	b.n	800bdb2 <max7456CLI+0x21a>
                else
                    uart1Print("English\n");
 800bda6:	f24c 307c 	movw	r0, #50044	; 0xc37c
 800bdaa:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bdae:	f7fa fe37 	bl	8006a20 <uart1Print>

                uart1Print("OSD Altitude Display:           ");
 800bdb2:	f24c 3088 	movw	r0, #50056	; 0xc388
 800bdb6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bdba:	f7fa fe31 	bl	8006a20 <uart1Print>
                if (eepromConfig.osdDisplayAlt)
 800bdbe:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800bdc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bdc6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d006      	beq.n	800bddc <max7456CLI+0x244>
                    uart1Print("On\n");
 800bdce:	f24c 30ac 	movw	r0, #50092	; 0xc3ac
 800bdd2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bdd6:	f7fa fe23 	bl	8006a20 <uart1Print>
 800bdda:	e005      	b.n	800bde8 <max7456CLI+0x250>
                else
                    uart1Print("Off\n");
 800bddc:	f24c 30b0 	movw	r0, #50096	; 0xc3b0
 800bde0:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bde4:	f7fa fe1c 	bl	8006a20 <uart1Print>

                uart1Print("OSD Artifical Horizon Display:  ");
 800bde8:	f24c 30b8 	movw	r0, #50104	; 0xc3b8
 800bdec:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bdf0:	f7fa fe16 	bl	8006a20 <uart1Print>
                if (eepromConfig.osdDisplayAH)
 800bdf4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800bdf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bdfc:	f893 3348 	ldrb.w	r3, [r3, #840]	; 0x348
 800be00:	2b00      	cmp	r3, #0
 800be02:	d006      	beq.n	800be12 <max7456CLI+0x27a>
                    uart1Print("On\n");
 800be04:	f24c 30ac 	movw	r0, #50092	; 0xc3ac
 800be08:	f6c0 0002 	movt	r0, #2050	; 0x802
 800be0c:	f7fa fe08 	bl	8006a20 <uart1Print>
 800be10:	e005      	b.n	800be1e <max7456CLI+0x286>
                else
                    uart1Print("Off\n");
 800be12:	f24c 30b0 	movw	r0, #50096	; 0xc3b0
 800be16:	f6c0 0002 	movt	r0, #2050	; 0x802
 800be1a:	f7fa fe01 	bl	8006a20 <uart1Print>

                uart1Print("OSD Attitude Display:           ");
 800be1e:	f24c 30dc 	movw	r0, #50140	; 0xc3dc
 800be22:	f6c0 0002 	movt	r0, #2050	; 0x802
 800be26:	f7fa fdfb 	bl	8006a20 <uart1Print>
                if (eepromConfig.osdDisplayAtt)
 800be2a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800be2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800be32:	f893 3349 	ldrb.w	r3, [r3, #841]	; 0x349
 800be36:	2b00      	cmp	r3, #0
 800be38:	d006      	beq.n	800be48 <max7456CLI+0x2b0>
                    uart1Print("On\n");
 800be3a:	f24c 30ac 	movw	r0, #50092	; 0xc3ac
 800be3e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800be42:	f7fa fded 	bl	8006a20 <uart1Print>
 800be46:	e005      	b.n	800be54 <max7456CLI+0x2bc>
                else
                    uart1Print("Off\n");
 800be48:	f24c 30b0 	movw	r0, #50096	; 0xc3b0
 800be4c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800be50:	f7fa fde6 	bl	8006a20 <uart1Print>

                uart1Print("OSD Heading Display:            ");
 800be54:	f24c 4000 	movw	r0, #50176	; 0xc400
 800be58:	f6c0 0002 	movt	r0, #2050	; 0x802
 800be5c:	f7fa fde0 	bl	8006a20 <uart1Print>
                if (eepromConfig.osdDisplayHdg)
 800be60:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800be64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800be68:	f893 334a 	ldrb.w	r3, [r3, #842]	; 0x34a
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d006      	beq.n	800be7e <max7456CLI+0x2e6>
                    uart1Print("On\n");
 800be70:	f24c 30ac 	movw	r0, #50092	; 0xc3ac
 800be74:	f6c0 0002 	movt	r0, #2050	; 0x802
 800be78:	f7fa fdd2 	bl	8006a20 <uart1Print>
 800be7c:	e005      	b.n	800be8a <max7456CLI+0x2f2>
                else
                    uart1Print("Off\n");
 800be7e:	f24c 30b0 	movw	r0, #50096	; 0xc3b0
 800be82:	f6c0 0002 	movt	r0, #2050	; 0x802
 800be86:	f7fa fdcb 	bl	8006a20 <uart1Print>

                uart1Print("\n");
 800be8a:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800be8e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800be92:	f7fa fdc5 	bl	8006a20 <uart1Print>
                validQuery = false;
 800be96:	f04f 0300 	mov.w	r3, #0
 800be9a:	f88d 3006 	strb.w	r3, [sp, #6]
                break;
 800be9e:	e181      	b.n	800c1a4 <max7456CLI+0x60c>

            ///////////////////////

            case 'b': // Enable OSD Altitude Display
                eepromConfig.osdDisplayAlt  = true;
 800bea0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800bea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bea8:	f04f 0201 	mov.w	r2, #1
 800beac:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347

                max7456query = 'a';
 800beb0:	f04f 0361 	mov.w	r3, #97	; 0x61
 800beb4:	f88d 3007 	strb.w	r3, [sp, #7]
                validQuery = true;
 800beb8:	f04f 0301 	mov.w	r3, #1
 800bebc:	f88d 3006 	strb.w	r3, [sp, #6]
                break;
 800bec0:	e170      	b.n	800c1a4 <max7456CLI+0x60c>

            ///////////////////////

            case 'c': // Enable OSD Artifical Horizon Display
                eepromConfig.osdDisplayAH  = true;
 800bec2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800bec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800beca:	f04f 0201 	mov.w	r2, #1
 800bece:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348
                eepromConfig.osdDisplayAtt = false;
 800bed2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800bed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800beda:	f04f 0200 	mov.w	r2, #0
 800bede:	f883 2349 	strb.w	r2, [r3, #841]	; 0x349

                max7456query = 'a';
 800bee2:	f04f 0361 	mov.w	r3, #97	; 0x61
 800bee6:	f88d 3007 	strb.w	r3, [sp, #7]
                validQuery = true;
 800beea:	f04f 0301 	mov.w	r3, #1
 800beee:	f88d 3006 	strb.w	r3, [sp, #6]
                break;
 800bef2:	e157      	b.n	800c1a4 <max7456CLI+0x60c>

            ///////////////////////

            case 'd': // Enable OSD Attitude Display
                eepromConfig.osdDisplayAtt = true;
 800bef4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800bef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800befc:	f04f 0201 	mov.w	r2, #1
 800bf00:	f883 2349 	strb.w	r2, [r3, #841]	; 0x349
                eepromConfig.osdDisplayAH  = false;
 800bf04:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800bf08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bf0c:	f04f 0200 	mov.w	r2, #0
 800bf10:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348

                max7456query = 'a';
 800bf14:	f04f 0361 	mov.w	r3, #97	; 0x61
 800bf18:	f88d 3007 	strb.w	r3, [sp, #7]
                validQuery = true;
 800bf1c:	f04f 0301 	mov.w	r3, #1
 800bf20:	f88d 3006 	strb.w	r3, [sp, #6]
                break;
 800bf24:	e13e      	b.n	800c1a4 <max7456CLI+0x60c>

            ///////////////////////

            case 'e': // Enable OSD Heading Display
                eepromConfig.osdDisplayHdg = true;
 800bf26:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800bf2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bf2e:	f04f 0201 	mov.w	r2, #1
 800bf32:	f883 234a 	strb.w	r2, [r3, #842]	; 0x34a

                max7456query = 'a';
 800bf36:	f04f 0361 	mov.w	r3, #97	; 0x61
 800bf3a:	f88d 3007 	strb.w	r3, [sp, #7]
                validQuery = true;
 800bf3e:	f04f 0301 	mov.w	r3, #1
 800bf42:	f88d 3006 	strb.w	r3, [sp, #6]
                break;
 800bf46:	e12d      	b.n	800c1a4 <max7456CLI+0x60c>

            ///////////////////////

            case 'q': // Set English Display Units
                eepromConfig.metricUnits = false;
 800bf48:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800bf4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bf50:	f04f 0200 	mov.w	r2, #0
 800bf54:	f883 2346 	strb.w	r2, [r3, #838]	; 0x346

                max7456query = 'a';
 800bf58:	f04f 0361 	mov.w	r3, #97	; 0x61
 800bf5c:	f88d 3007 	strb.w	r3, [sp, #7]
                validQuery = true;
 800bf60:	f04f 0301 	mov.w	r3, #1
 800bf64:	f88d 3006 	strb.w	r3, [sp, #6]
                break;
 800bf68:	e11c      	b.n	800c1a4 <max7456CLI+0x60c>

            ///////////////////////

            case 'r': // Reset MAX7456
                resetMax7456();
 800bf6a:	f7f7 ffe3 	bl	8003f34 <resetMax7456>
                uart1Print("\nMAX7456 Reset....\n\n");
 800bf6e:	f24c 4024 	movw	r0, #50212	; 0xc424
 800bf72:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bf76:	f7fa fd53 	bl	8006a20 <uart1Print>
                break;
 800bf7a:	e113      	b.n	800c1a4 <max7456CLI+0x60c>

            ///////////////////////

            case 's': // Show character set
                showMax7456Font();
 800bf7c:	f7f8 f82e 	bl	8003fdc <showMax7456Font>
                uart1Print("\nMAX7456 Character Set Displayed....\n\n");
 800bf80:	f24c 403c 	movw	r0, #50236	; 0xc43c
 800bf84:	f6c0 0002 	movt	r0, #2050	; 0x802
 800bf88:	f7fa fd4a 	bl	8006a20 <uart1Print>
                break;
 800bf8c:	e10a      	b.n	800c1a4 <max7456CLI+0x60c>

            ///////////////////////

            case 't': // Download font
                downloadMax7456Font();
 800bf8e:	f7f8 f90d 	bl	80041ac <downloadMax7456Font>
                break;
 800bf92:	e107      	b.n	800c1a4 <max7456CLI+0x60c>

            ///////////////////////

            case 'u': // Toggle OSD enabled status
   			    if (eepromConfig.osdEnabled)                   // If  Enabled
 800bf94:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800bf98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bf9c:	f893 3344 	ldrb.w	r3, [r3, #836]	; 0x344
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d008      	beq.n	800bfb6 <max7456CLI+0x41e>
   			        eepromConfig.osdEnabled = false;           // Set Disabled
 800bfa4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800bfa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bfac:	f04f 0200 	mov.w	r2, #0
 800bfb0:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 800bfb4:	e009      	b.n	800bfca <max7456CLI+0x432>
   			    else
   			    {                                              // If  Disabled
   			        eepromConfig.osdEnabled = true;            // Set Enabled
 800bfb6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800bfba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bfbe:	f04f 0201 	mov.w	r2, #1
 800bfc2:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
                    initMax7456();                             // and call init procedure
 800bfc6:	f7f7 ff51 	bl	8003e6c <initMax7456>
				}

                max7456query = 'a';
 800bfca:	f04f 0361 	mov.w	r3, #97	; 0x61
 800bfce:	f88d 3007 	strb.w	r3, [sp, #7]
                validQuery = true;
 800bfd2:	f04f 0301 	mov.w	r3, #1
 800bfd6:	f88d 3006 	strb.w	r3, [sp, #6]
   				break;
 800bfda:	e0e3      	b.n	800c1a4 <max7456CLI+0x60c>

			///////////////////////

   		    case 'v': // Toggle default video standard
   			    if (eepromConfig.defaultVideoStandard)         // If  PAL
 800bfdc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800bfe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bfe4:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d008      	beq.n	800bffe <max7456CLI+0x466>
   			        eepromConfig.defaultVideoStandard = NTSC;  // Set NTSC
 800bfec:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800bff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bff4:	f04f 0200 	mov.w	r2, #0
 800bff8:	f883 2345 	strb.w	r2, [r3, #837]	; 0x345
 800bffc:	e007      	b.n	800c00e <max7456CLI+0x476>
   			    else                                           // If  NTSC
   			        eepromConfig.defaultVideoStandard = PAL;   // Set PAL
 800bffe:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c002:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c006:	f04f 0201 	mov.w	r2, #1
 800c00a:	f883 2345 	strb.w	r2, [r3, #837]	; 0x345

                max7456query = 'a';
 800c00e:	f04f 0361 	mov.w	r3, #97	; 0x61
 800c012:	f88d 3007 	strb.w	r3, [sp, #7]
                validQuery = true;
 800c016:	f04f 0301 	mov.w	r3, #1
 800c01a:	f88d 3006 	strb.w	r3, [sp, #6]
   				break;
 800c01e:	e0c1      	b.n	800c1a4 <max7456CLI+0x60c>

   		    ///////////////////////

   			case 'x':
   			    uart1Print("\nExiting MAX7456 CLI....\n\n");
 800c020:	f24c 4064 	movw	r0, #50276	; 0xc464
 800c024:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c028:	f7fa fcfa 	bl	8006a20 <uart1Print>
   			    cliBusy = false;
 800c02c:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800c030:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c034:	f04f 0200 	mov.w	r2, #0
 800c038:	701a      	strb	r2, [r3, #0]
	    	    break;

	    	///////////////////////
	    }
    }
}
 800c03a:	b003      	add	sp, #12
 800c03c:	bd00      	pop	{pc}
   			    break;

            ///////////////////////

            case 'B': // Disable OSD Altitude Display
                eepromConfig.osdDisplayAlt = false;
 800c03e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c042:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c046:	f04f 0200 	mov.w	r2, #0
 800c04a:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347

                max7456query = 'a';
 800c04e:	f04f 0361 	mov.w	r3, #97	; 0x61
 800c052:	f88d 3007 	strb.w	r3, [sp, #7]
                validQuery = true;
 800c056:	f04f 0301 	mov.w	r3, #1
 800c05a:	f88d 3006 	strb.w	r3, [sp, #6]
                break;
 800c05e:	e0a1      	b.n	800c1a4 <max7456CLI+0x60c>

            ///////////////////////

            case 'C': // Disable OSD Artifical Horizon Display
                eepromConfig.osdDisplayAH = false;
 800c060:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c064:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c068:	f04f 0200 	mov.w	r2, #0
 800c06c:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348

                max7456query = 'a';
 800c070:	f04f 0361 	mov.w	r3, #97	; 0x61
 800c074:	f88d 3007 	strb.w	r3, [sp, #7]
                validQuery = true;
 800c078:	f04f 0301 	mov.w	r3, #1
 800c07c:	f88d 3006 	strb.w	r3, [sp, #6]
                break;
 800c080:	e090      	b.n	800c1a4 <max7456CLI+0x60c>

            ///////////////////////

            case 'D': // Disable OSD Attitude Display
                eepromConfig.osdDisplayAtt = false;
 800c082:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c086:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c08a:	f04f 0200 	mov.w	r2, #0
 800c08e:	f883 2349 	strb.w	r2, [r3, #841]	; 0x349

                max7456query = 'a';
 800c092:	f04f 0361 	mov.w	r3, #97	; 0x61
 800c096:	f88d 3007 	strb.w	r3, [sp, #7]
                validQuery = true;
 800c09a:	f04f 0301 	mov.w	r3, #1
 800c09e:	f88d 3006 	strb.w	r3, [sp, #6]
                break;
 800c0a2:	e07f      	b.n	800c1a4 <max7456CLI+0x60c>

            ///////////////////////

            case 'E': // Disable OSD Heading Display
                eepromConfig.osdDisplayHdg = false;
 800c0a4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c0ac:	f04f 0200 	mov.w	r2, #0
 800c0b0:	f883 234a 	strb.w	r2, [r3, #842]	; 0x34a

                max7456query = 'a';
 800c0b4:	f04f 0361 	mov.w	r3, #97	; 0x61
 800c0b8:	f88d 3007 	strb.w	r3, [sp, #7]
                validQuery = true;
 800c0bc:	f04f 0301 	mov.w	r3, #1
 800c0c0:	f88d 3006 	strb.w	r3, [sp, #6]
                break;
 800c0c4:	e06e      	b.n	800c1a4 <max7456CLI+0x60c>

           ///////////////////////

           case 'Q': // Set Metric Display Units
                eepromConfig.metricUnits = true;
 800c0c6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c0ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c0ce:	f04f 0201 	mov.w	r2, #1
 800c0d2:	f883 2346 	strb.w	r2, [r3, #838]	; 0x346

                max7456query = 'a';
 800c0d6:	f04f 0361 	mov.w	r3, #97	; 0x61
 800c0da:	f88d 3007 	strb.w	r3, [sp, #7]
                validQuery = true;
 800c0de:	f04f 0301 	mov.w	r3, #1
 800c0e2:	f88d 3006 	strb.w	r3, [sp, #6]
                break;
 800c0e6:	e05d      	b.n	800c1a4 <max7456CLI+0x60c>

            ///////////////////////////

            case 'W': // Write EEPROM Parameters
                uart1Print("\nWriting EEPROM Parameters....\n\n");
 800c0e8:	f24c 4080 	movw	r0, #50304	; 0xc480
 800c0ec:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c0f0:	f7fa fc96 	bl	8006a20 <uart1Print>
                writeEEPROM();
 800c0f4:	f002 fc08 	bl	800e908 <writeEEPROM>
                break;
 800c0f8:	e054      	b.n	800c1a4 <max7456CLI+0x60c>

    		///////////////////////

			case '?':
			   	uart1Print("\n");
 800c0fa:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c0fe:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c102:	f7fa fc8d 	bl	8006a20 <uart1Print>
			   	uart1Print("'a' OSD Configuration\n");
 800c106:	f24c 40a4 	movw	r0, #50340	; 0xc4a4
 800c10a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c10e:	f7fa fc87 	bl	8006a20 <uart1Print>
			    uart1Print("'b' Enable OSD Altitude Display            'B' Disable OSD Altitude Display\n");
 800c112:	f24c 40bc 	movw	r0, #50364	; 0xc4bc
 800c116:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c11a:	f7fa fc81 	bl	8006a20 <uart1Print>
			   	uart1Print("'c' Enable OSD Artificial Horizon Display  'C' Disable OSD Artificial Horizon Display\n");
 800c11e:	f24c 500c 	movw	r0, #50444	; 0xc50c
 800c122:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c126:	f7fa fc7b 	bl	8006a20 <uart1Print>
			   	uart1Print("'d' Enable OSD Attitude Display            'D' Disable OSD Attitude Display\n");
 800c12a:	f24c 5064 	movw	r0, #50532	; 0xc564
 800c12e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c132:	f7fa fc75 	bl	8006a20 <uart1Print>
			   	uart1Print("'e' Enable OSD Heading Display             'E' Disable OSD Heading Display\n");
 800c136:	f24c 50b4 	movw	r0, #50612	; 0xc5b4
 800c13a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c13e:	f7fa fc6f 	bl	8006a20 <uart1Print>
			   	uart1Print("'q' Set English Display Units              'Q' Set Metric Display Units\n");
 800c142:	f24c 6000 	movw	r0, #50688	; 0xc600
 800c146:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c14a:	f7fa fc69 	bl	8006a20 <uart1Print>
			    uart1Print("'r' Reset MAX7456\n");
 800c14e:	f24c 604c 	movw	r0, #50764	; 0xc64c
 800c152:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c156:	f7fa fc63 	bl	8006a20 <uart1Print>
			   	uart1Print("'s' Display MAX7456 Character Set\n");
 800c15a:	f24c 6060 	movw	r0, #50784	; 0xc660
 800c15e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c162:	f7fa fc5d 	bl	8006a20 <uart1Print>
			   	uart1Print("'t' Download Font to MAX7456\n");
 800c166:	f24c 6084 	movw	r0, #50820	; 0xc684
 800c16a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c16e:	f7fa fc57 	bl	8006a20 <uart1Print>
			   	uart1Print("'u' Change OSD Installed State\n");
 800c172:	f24c 60a4 	movw	r0, #50852	; 0xc6a4
 800c176:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c17a:	f7fa fc51 	bl	8006a20 <uart1Print>
			   	uart1Print("'v' Change Default Video Standard          'W' Write EEPROM Parameters\n");
 800c17e:	f24c 60c4 	movw	r0, #50884	; 0xc6c4
 800c182:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c186:	f7fa fc4b 	bl	8006a20 <uart1Print>
			   	uart1Print("'x' Exit Sensor CLI                        '?' Command Summary\n");
 800c18a:	f24c 700c 	movw	r0, #50956	; 0xc70c
 800c18e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c192:	f7fa fc45 	bl	8006a20 <uart1Print>
			   	uart1Print("\n");
 800c196:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c19a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c19e:	f7fa fc3f 	bl	8006a20 <uart1Print>
	    	    break;
 800c1a2:	bf00      	nop

	    	///////////////////////
	    }
    }
 800c1a4:	e50e      	b.n	800bbc4 <max7456CLI+0x2c>
 800c1a6:	bf00      	nop

0800c1a8 <mixerCLI>:
///////////////////////////////////////////////////////////////////////////////
// Mixer CLI
///////////////////////////////////////////////////////////////////////////////

void mixerCLI()
{
 800c1a8:	b530      	push	{r4, r5, lr}
 800c1aa:	b085      	sub	sp, #20

    uint8_t  index;
    uint8_t  rows, columns;

    uint8_t  mixerQuery;
    uint8_t  validQuery = false;
 800c1ac:	f04f 0300 	mov.w	r3, #0
 800c1b0:	f88d 3009 	strb.w	r3, [sp, #9]

    cliBusy = true;
 800c1b4:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800c1b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c1bc:	f04f 0201 	mov.w	r2, #1
 800c1c0:	701a      	strb	r2, [r3, #0]

    uart1Print("\nEntering Mixer CLI....\n\n");
 800c1c2:	f24c 704c 	movw	r0, #51020	; 0xc74c
 800c1c6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c1ca:	f7fa fc29 	bl	8006a20 <uart1Print>
 800c1ce:	e000      	b.n	800c1d2 <mixerCLI+0x2a>
   		        uart1Print("\n");
	    	    break;

	    	///////////////////////////
	    }
	}
 800c1d0:	bf00      	nop

    uart1Print("\nEntering Mixer CLI....\n\n");

    while(true)
    {
        uart1Print("Mixer CLI -> ");
 800c1d2:	f24c 7068 	movw	r0, #51048	; 0xc768
 800c1d6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c1da:	f7fa fc21 	bl	8006a20 <uart1Print>

		while ((uart1Available() == false) && (validQuery == false));
 800c1de:	bf00      	nop
 800c1e0:	f7fa fba0 	bl	8006924 <uart1Available>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d103      	bne.n	800c1f2 <mixerCLI+0x4a>
 800c1ea:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d0f6      	beq.n	800c1e0 <mixerCLI+0x38>

		if (validQuery == false)
 800c1f2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d104      	bne.n	800c204 <mixerCLI+0x5c>
		    mixerQuery = uart1Read();
 800c1fa:	f7fa fba9 	bl	8006950 <uart1Read>
 800c1fe:	4603      	mov	r3, r0
 800c200:	f88d 300a 	strb.w	r3, [sp, #10]

		uart1Print("\n");
 800c204:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c208:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c20c:	f7fa fc08 	bl	8006a20 <uart1Print>

		switch(mixerQuery)
 800c210:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800c214:	f1a3 033f 	sub.w	r3, r3, #63	; 0x3f
 800c218:	2b39      	cmp	r3, #57	; 0x39
 800c21a:	d8d9      	bhi.n	800c1d0 <mixerCLI+0x28>
 800c21c:	a201      	add	r2, pc, #4	; (adr r2, 800c224 <mixerCLI+0x7c>)
 800c21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c222:	bf00      	nop
 800c224:	0800d3ab 	.word	0x0800d3ab
 800c228:	0800c1d1 	.word	0x0800c1d1
 800c22c:	0800cfa9 	.word	0x0800cfa9
 800c230:	0800cfdd 	.word	0x0800cfdd
 800c234:	0800d04f 	.word	0x0800d04f
 800c238:	0800d097 	.word	0x0800d097
 800c23c:	0800d0df 	.word	0x0800d0df
 800c240:	0800d139 	.word	0x0800d139
 800c244:	0800d193 	.word	0x0800d193
 800c248:	0800d1c7 	.word	0x0800d1c7
 800c24c:	0800d231 	.word	0x0800d231
 800c250:	0800d28b 	.word	0x0800d28b
 800c254:	0800d2e5 	.word	0x0800d2e5
 800c258:	0800d32d 	.word	0x0800d32d
 800c25c:	0800d351 	.word	0x0800d351
 800c260:	0800c1d1 	.word	0x0800c1d1
 800c264:	0800c1d1 	.word	0x0800c1d1
 800c268:	0800c1d1 	.word	0x0800c1d1
 800c26c:	0800c1d1 	.word	0x0800c1d1
 800c270:	0800c1d1 	.word	0x0800c1d1
 800c274:	0800c1d1 	.word	0x0800c1d1
 800c278:	0800c1d1 	.word	0x0800c1d1
 800c27c:	0800c1d1 	.word	0x0800c1d1
 800c280:	0800c1d1 	.word	0x0800c1d1
 800c284:	0800d399 	.word	0x0800d399
 800c288:	0800c1d1 	.word	0x0800c1d1
 800c28c:	0800c1d1 	.word	0x0800c1d1
 800c290:	0800c1d1 	.word	0x0800c1d1
 800c294:	0800c1d1 	.word	0x0800c1d1
 800c298:	0800c1d1 	.word	0x0800c1d1
 800c29c:	0800c1d1 	.word	0x0800c1d1
 800c2a0:	0800c1d1 	.word	0x0800c1d1
 800c2a4:	0800c1d1 	.word	0x0800c1d1
 800c2a8:	0800c1d1 	.word	0x0800c1d1
 800c2ac:	0800c30d 	.word	0x0800c30d
 800c2b0:	0800cdef 	.word	0x0800cdef
 800c2b4:	0800c1d1 	.word	0x0800c1d1
 800c2b8:	0800c1d1 	.word	0x0800c1d1
 800c2bc:	0800c1d1 	.word	0x0800c1d1
 800c2c0:	0800c1d1 	.word	0x0800c1d1
 800c2c4:	0800c1d1 	.word	0x0800c1d1
 800c2c8:	0800c1d1 	.word	0x0800c1d1
 800c2cc:	0800c1d1 	.word	0x0800c1d1
 800c2d0:	0800c1d1 	.word	0x0800c1d1
 800c2d4:	0800c1d1 	.word	0x0800c1d1
 800c2d8:	0800c1d1 	.word	0x0800c1d1
 800c2dc:	0800c1d1 	.word	0x0800c1d1
 800c2e0:	0800c1d1 	.word	0x0800c1d1
 800c2e4:	0800c1d1 	.word	0x0800c1d1
 800c2e8:	0800c1d1 	.word	0x0800c1d1
 800c2ec:	0800c1d1 	.word	0x0800c1d1
 800c2f0:	0800c1d1 	.word	0x0800c1d1
 800c2f4:	0800c1d1 	.word	0x0800c1d1
 800c2f8:	0800c1d1 	.word	0x0800c1d1
 800c2fc:	0800c1d1 	.word	0x0800c1d1
 800c300:	0800c1d1 	.word	0x0800c1d1
 800c304:	0800c1d1 	.word	0x0800c1d1
 800c308:	0800cf8b 	.word	0x0800cf8b
		{
            ///////////////////////////

            case 'a': // Mixer Configuration
                uart1Print("\nMixer Configuration:            ");
 800c30c:	f24c 7078 	movw	r0, #51064	; 0xc778
 800c310:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c314:	f7fa fb84 	bl	8006a20 <uart1Print>
                switch (eepromConfig.mixerConfiguration)
 800c318:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c31c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c320:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c324:	f103 33ff 	add.w	r3, r3, #4294967295
 800c328:	2b14      	cmp	r3, #20
 800c32a:	f200 80c0 	bhi.w	800c4ae <mixerCLI+0x306>
 800c32e:	a201      	add	r2, pc, #4	; (adr r2, 800c334 <mixerCLI+0x18c>)
 800c330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c334:	0800c389 	.word	0x0800c389
 800c338:	0800c397 	.word	0x0800c397
 800c33c:	0800c3a5 	.word	0x0800c3a5
 800c340:	0800c3b3 	.word	0x0800c3b3
 800c344:	0800c3c1 	.word	0x0800c3c1
 800c348:	0800c3cf 	.word	0x0800c3cf
 800c34c:	0800c3dd 	.word	0x0800c3dd
 800c350:	0800c3eb 	.word	0x0800c3eb
 800c354:	0800c3f9 	.word	0x0800c3f9
 800c358:	0800c407 	.word	0x0800c407
 800c35c:	0800c415 	.word	0x0800c415
 800c360:	0800c423 	.word	0x0800c423
 800c364:	0800c431 	.word	0x0800c431
 800c368:	0800c43f 	.word	0x0800c43f
 800c36c:	0800c44d 	.word	0x0800c44d
 800c370:	0800c45b 	.word	0x0800c45b
 800c374:	0800c469 	.word	0x0800c469
 800c378:	0800c477 	.word	0x0800c477
 800c37c:	0800c485 	.word	0x0800c485
 800c380:	0800c493 	.word	0x0800c493
 800c384:	0800c4a1 	.word	0x0800c4a1
                {
                    case MIXERTYPE_GIMBAL:
                    	uart1Print("MIXERTYPE GIMBAL\n");
 800c388:	f24c 709c 	movw	r0, #51100	; 0xc79c
 800c38c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c390:	f7fa fb46 	bl	8006a20 <uart1Print>
                    	break;
 800c394:	e08b      	b.n	800c4ae <mixerCLI+0x306>

                    ///////////////////////

                    case MIXERTYPE_FLYING_WING:
                    	uart1Print("MIXERTYPE FLYING WING\n");
 800c396:	f24c 70b0 	movw	r0, #51120	; 0xc7b0
 800c39a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c39e:	f7fa fb3f 	bl	8006a20 <uart1Print>
                    	break;
 800c3a2:	e084      	b.n	800c4ae <mixerCLI+0x306>

                    ///////////////////////

                    case MIXERTYPE_BI:
                        uart1Print("MIXERTYPE BICOPTER\n");
 800c3a4:	f24c 70c8 	movw	r0, #51144	; 0xc7c8
 800c3a8:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c3ac:	f7fa fb38 	bl	8006a20 <uart1Print>
                        break;
 800c3b0:	e07d      	b.n	800c4ae <mixerCLI+0x306>

                    ///////////////////////

                    case MIXERTYPE_TRI:
                        uart1Print("MIXERTYPE TRICOPTER\n");
 800c3b2:	f24c 70dc 	movw	r0, #51164	; 0xc7dc
 800c3b6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c3ba:	f7fa fb31 	bl	8006a20 <uart1Print>
                        break;
 800c3be:	e076      	b.n	800c4ae <mixerCLI+0x306>

                    ///////////////////////

                    case MIXERTYPE_QUADP:
                        uart1Print("MIXERTYPE QUAD PLUS\n");
 800c3c0:	f24c 70f4 	movw	r0, #51188	; 0xc7f4
 800c3c4:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c3c8:	f7fa fb2a 	bl	8006a20 <uart1Print>
                        break;
 800c3cc:	e06f      	b.n	800c4ae <mixerCLI+0x306>

                    case MIXERTYPE_QUADX:
                        uart1Print("MIXERTYPE QUAD X\n");
 800c3ce:	f64c 000c 	movw	r0, #51212	; 0xc80c
 800c3d2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c3d6:	f7fa fb23 	bl	8006a20 <uart1Print>
                        break;
 800c3da:	e068      	b.n	800c4ae <mixerCLI+0x306>

                    case MIXERTYPE_VTAIL4_NO_COMP:
                    	uart1Print("MULTITYPE VTAIL NO COMP\n");
 800c3dc:	f64c 0020 	movw	r0, #51232	; 0xc820
 800c3e0:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c3e4:	f7fa fb1c 	bl	8006a20 <uart1Print>
                    	break;
 800c3e8:	e061      	b.n	800c4ae <mixerCLI+0x306>

                    case MIXERTYPE_VTAIL4_Y_COMP:
                    	uart1Print("MULTITYPE VTAIL Y COMP\n");
 800c3ea:	f64c 003c 	movw	r0, #51260	; 0xc83c
 800c3ee:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c3f2:	f7fa fb15 	bl	8006a20 <uart1Print>
                    	break;
 800c3f6:	e05a      	b.n	800c4ae <mixerCLI+0x306>

                    case MIXERTYPE_VTAIL4_RY_COMP:
                    	uart1Print("MULTITYPE VTAIL RY COMP\n");
 800c3f8:	f64c 0054 	movw	r0, #51284	; 0xc854
 800c3fc:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c400:	f7fa fb0e 	bl	8006a20 <uart1Print>
                    	break;
 800c404:	e053      	b.n	800c4ae <mixerCLI+0x306>

                    case MIXERTYPE_VTAIL4_PY_COMP:
                    	uart1Print("MULTITYPE VTAIL PY COMP\n");
 800c406:	f64c 0070 	movw	r0, #51312	; 0xc870
 800c40a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c40e:	f7fa fb07 	bl	8006a20 <uart1Print>
                    	break;
 800c412:	e04c      	b.n	800c4ae <mixerCLI+0x306>

                    case MIXERTYPE_VTAIL4_RP_COMP:
                    	uart1Print("MULTITYPE VTAIL RP COMP\n");
 800c414:	f64c 008c 	movw	r0, #51340	; 0xc88c
 800c418:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c41c:	f7fa fb00 	bl	8006a20 <uart1Print>
                    	break;
 800c420:	e045      	b.n	800c4ae <mixerCLI+0x306>

                    case MIXERTYPE_VTAIL4_RPY_COMP:
                    	uart1Print("MULTITYPE VTAIL RPY COMP\n");
 800c422:	f64c 00a8 	movw	r0, #51368	; 0xc8a8
 800c426:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c42a:	f7fa faf9 	bl	8006a20 <uart1Print>
                    	break;
 800c42e:	e03e      	b.n	800c4ae <mixerCLI+0x306>

                    case MIXERTYPE_Y4:
                    	uart1Print("MIXERTYPE Y4\n");
 800c430:	f64c 00c4 	movw	r0, #51396	; 0xc8c4
 800c434:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c438:	f7fa faf2 	bl	8006a20 <uart1Print>
                    	break;
 800c43c:	e037      	b.n	800c4ae <mixerCLI+0x306>

                    ///////////////////////

                    case MIXERTYPE_HEX6P:
                        uart1Print("MIXERTYPE HEX PLUS\n");
 800c43e:	f64c 00d4 	movw	r0, #51412	; 0xc8d4
 800c442:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c446:	f7fa faeb 	bl	8006a20 <uart1Print>
                        break;
 800c44a:	e030      	b.n	800c4ae <mixerCLI+0x306>

                    case MIXERTYPE_HEX6X:
                        uart1Print("MIXERTYPE HEX X\n");
 800c44c:	f64c 00e8 	movw	r0, #51432	; 0xc8e8
 800c450:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c454:	f7fa fae4 	bl	8006a20 <uart1Print>
                        break;
 800c458:	e029      	b.n	800c4ae <mixerCLI+0x306>

                    case MIXERTYPE_Y6:
                        uart1Print("MIXERTYPE Y6\n");
 800c45a:	f64c 00fc 	movw	r0, #51452	; 0xc8fc
 800c45e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c462:	f7fa fadd 	bl	8006a20 <uart1Print>
                        break;
 800c466:	e022      	b.n	800c4ae <mixerCLI+0x306>

                    ///////////////////////

                    case MIXERTYPE_OCTOF8P:
                        uart1Print("MIXERTYPE FLAT OCTO PLUS\n");
 800c468:	f64c 100c 	movw	r0, #51468	; 0xc90c
 800c46c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c470:	f7fa fad6 	bl	8006a20 <uart1Print>
                        break;
 800c474:	e01b      	b.n	800c4ae <mixerCLI+0x306>

                    case MIXERTYPE_OCTOF8X:
                        uart1Print("MIXERTYPE FLAT OCTO X\n");
 800c476:	f64c 1028 	movw	r0, #51496	; 0xc928
 800c47a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c47e:	f7fa facf 	bl	8006a20 <uart1Print>
                        break;
 800c482:	e014      	b.n	800c4ae <mixerCLI+0x306>

                    case MIXERTYPE_OCTOX8P:
                        uart1Print("MIXERTYPE COAXIAL OCTO PLUS\n");
 800c484:	f64c 1040 	movw	r0, #51520	; 0xc940
 800c488:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c48c:	f7fa fac8 	bl	8006a20 <uart1Print>
                        break;
 800c490:	e00d      	b.n	800c4ae <mixerCLI+0x306>

                    case MIXERTYPE_OCTOX8X:
                        uart1Print("MIXERTYPE COAXIAL OCTO X\n");
 800c492:	f64c 1060 	movw	r0, #51552	; 0xc960
 800c496:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c49a:	f7fa fac1 	bl	8006a20 <uart1Print>
                        break;
 800c49e:	e006      	b.n	800c4ae <mixerCLI+0x306>

                    ///////////////////////

                    case MIXERTYPE_FREEMIX:
                    	uart1Print("MIXERTYPE FREE MIX\n");
 800c4a0:	f64c 107c 	movw	r0, #51580	; 0xc97c
 800c4a4:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c4a8:	f7fa faba 	bl	8006a20 <uart1Print>
                    	break;
 800c4ac:	bf00      	nop
                }

                uart1Print("Number of Motors:               ");
 800c4ae:	f64c 1090 	movw	r0, #51600	; 0xc990
 800c4b2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c4b6:	f7fa fab3 	bl	8006a20 <uart1Print>
                itoa(numberMotor,                         numberString, 10); uart1Print(numberString); uart1Print("\n");
 800c4ba:	f643 7348 	movw	r3, #16200	; 0x3f48
 800c4be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f643 3178 	movw	r1, #15224	; 0x3b78
 800c4ca:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c4ce:	f04f 020a 	mov.w	r2, #10
 800c4d2:	f00a fb7f 	bl	8016bd4 <itoa>
 800c4d6:	f643 3078 	movw	r0, #15224	; 0x3b78
 800c4da:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c4de:	f7fa fa9f 	bl	8006a20 <uart1Print>
 800c4e2:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c4e6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c4ea:	f7fa fa99 	bl	8006a20 <uart1Print>

                uart1Print("ESC PWM Rate:                   ");
 800c4ee:	f64c 10b4 	movw	r0, #51636	; 0xc9b4
 800c4f2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c4f6:	f7fa fa93 	bl	8006a20 <uart1Print>
                itoa((uint16_t)eepromConfig.escPwmRate,   numberString, 10); uart1Print(numberString); uart1Print("\n");
 800c4fa:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c4fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c502:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800c506:	4618      	mov	r0, r3
 800c508:	f643 3178 	movw	r1, #15224	; 0x3b78
 800c50c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c510:	f04f 020a 	mov.w	r2, #10
 800c514:	f00a fb5e 	bl	8016bd4 <itoa>
 800c518:	f643 3078 	movw	r0, #15224	; 0x3b78
 800c51c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c520:	f7fa fa7e 	bl	8006a20 <uart1Print>
 800c524:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c528:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c52c:	f7fa fa78 	bl	8006a20 <uart1Print>

                uart1Print("Servo PWM Rate:                 ");
 800c530:	f64c 10d8 	movw	r0, #51672	; 0xc9d8
 800c534:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c538:	f7fa fa72 	bl	8006a20 <uart1Print>
                itoa((uint16_t)eepromConfig.servoPwmRate, numberString, 10); uart1Print(numberString); uart1Print("\n");
 800c53c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c540:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c544:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800c548:	4618      	mov	r0, r3
 800c54a:	f643 3178 	movw	r1, #15224	; 0x3b78
 800c54e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c552:	f04f 020a 	mov.w	r2, #10
 800c556:	f00a fb3d 	bl	8016bd4 <itoa>
 800c55a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800c55e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c562:	f7fa fa5d 	bl	8006a20 <uart1Print>
 800c566:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c56a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c56e:	f7fa fa57 	bl	8006a20 <uart1Print>

                if ( eepromConfig.mixerConfiguration == MIXERTYPE_BI )
 800c572:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c576:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c57a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c57e:	2b03      	cmp	r3, #3
 800c580:	f040 80e4 	bne.w	800c74c <mixerCLI+0x5a4>
                {
                    uart1Print("BiCopter Left Servo Min:        ");
 800c584:	f64c 10fc 	movw	r0, #51708	; 0xc9fc
 800c588:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c58c:	f7fa fa48 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.biLeftServoMin,  numberString, 10); uart1Print(numberString); uart1Print("\n");
 800c590:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c594:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c598:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 800c59c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5a0:	ee17 3a90 	vmov	r3, s15
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f643 3178 	movw	r1, #15224	; 0x3b78
 800c5ac:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c5b0:	f04f 020a 	mov.w	r2, #10
 800c5b4:	f00a fb0e 	bl	8016bd4 <itoa>
 800c5b8:	f643 3078 	movw	r0, #15224	; 0x3b78
 800c5bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c5c0:	f7fa fa2e 	bl	8006a20 <uart1Print>
 800c5c4:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c5c8:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c5cc:	f7fa fa28 	bl	8006a20 <uart1Print>
                    uart1Print("BiCopter Left Servo Mid:        ");
 800c5d0:	f64c 2020 	movw	r0, #51744	; 0xca20
 800c5d4:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c5d8:	f7fa fa22 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.biLeftServoMid,  numberString, 10); uart1Print(numberString); uart1Print("\n");
 800c5dc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c5e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c5e4:	edd3 7aaf 	vldr	s15, [r3, #700]	; 0x2bc
 800c5e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5ec:	ee17 3a90 	vmov	r3, s15
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f643 3178 	movw	r1, #15224	; 0x3b78
 800c5f8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c5fc:	f04f 020a 	mov.w	r2, #10
 800c600:	f00a fae8 	bl	8016bd4 <itoa>
 800c604:	f643 3078 	movw	r0, #15224	; 0x3b78
 800c608:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c60c:	f7fa fa08 	bl	8006a20 <uart1Print>
 800c610:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c614:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c618:	f7fa fa02 	bl	8006a20 <uart1Print>
                    uart1Print("BiCopter Left Servo Max:        ");
 800c61c:	f64c 2044 	movw	r0, #51780	; 0xca44
 800c620:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c624:	f7fa f9fc 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.biLeftServoMax,  numberString, 10); uart1Print(numberString); uart1Print("\n");
 800c628:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c62c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c630:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 800c634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c638:	ee17 3a90 	vmov	r3, s15
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	4618      	mov	r0, r3
 800c640:	f643 3178 	movw	r1, #15224	; 0x3b78
 800c644:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c648:	f04f 020a 	mov.w	r2, #10
 800c64c:	f00a fac2 	bl	8016bd4 <itoa>
 800c650:	f643 3078 	movw	r0, #15224	; 0x3b78
 800c654:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c658:	f7fa f9e2 	bl	8006a20 <uart1Print>
 800c65c:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c660:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c664:	f7fa f9dc 	bl	8006a20 <uart1Print>
                    uart1Print("BiCopter Right Servo Min:       ");
 800c668:	f64c 2068 	movw	r0, #51816	; 0xca68
 800c66c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c670:	f7fa f9d6 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.biRightServoMin, numberString, 10); uart1Print(numberString); uart1Print("\n");
 800c674:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c678:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c67c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 800c680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c684:	ee17 3a90 	vmov	r3, s15
 800c688:	b29b      	uxth	r3, r3
 800c68a:	4618      	mov	r0, r3
 800c68c:	f643 3178 	movw	r1, #15224	; 0x3b78
 800c690:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c694:	f04f 020a 	mov.w	r2, #10
 800c698:	f00a fa9c 	bl	8016bd4 <itoa>
 800c69c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800c6a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c6a4:	f7fa f9bc 	bl	8006a20 <uart1Print>
 800c6a8:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c6ac:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c6b0:	f7fa f9b6 	bl	8006a20 <uart1Print>
                    uart1Print("BiCopter Right Servo Mid:       ");
 800c6b4:	f64c 208c 	movw	r0, #51852	; 0xca8c
 800c6b8:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c6bc:	f7fa f9b0 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.biRightServoMid, numberString, 10); uart1Print(numberString); uart1Print("\n");
 800c6c0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c6c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c6c8:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800c6cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6d0:	ee17 3a90 	vmov	r3, s15
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f643 3178 	movw	r1, #15224	; 0x3b78
 800c6dc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c6e0:	f04f 020a 	mov.w	r2, #10
 800c6e4:	f00a fa76 	bl	8016bd4 <itoa>
 800c6e8:	f643 3078 	movw	r0, #15224	; 0x3b78
 800c6ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c6f0:	f7fa f996 	bl	8006a20 <uart1Print>
 800c6f4:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c6f8:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c6fc:	f7fa f990 	bl	8006a20 <uart1Print>
                    uart1Print("BiCopter Right Servo Max:       ");
 800c700:	f64c 20b0 	movw	r0, #51888	; 0xcab0
 800c704:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c708:	f7fa f98a 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.biRightServoMax, numberString, 10); uart1Print(numberString); uart1Print("\n");
 800c70c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c710:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c714:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 800c718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c71c:	ee17 3a90 	vmov	r3, s15
 800c720:	b29b      	uxth	r3, r3
 800c722:	4618      	mov	r0, r3
 800c724:	f643 3178 	movw	r1, #15224	; 0x3b78
 800c728:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c72c:	f04f 020a 	mov.w	r2, #10
 800c730:	f00a fa50 	bl	8016bd4 <itoa>
 800c734:	f643 3078 	movw	r0, #15224	; 0x3b78
 800c738:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c73c:	f7fa f970 	bl	8006a20 <uart1Print>
 800c740:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c744:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c748:	f7fa f96a 	bl	8006a20 <uart1Print>
                }

                if ( eepromConfig.mixerConfiguration == MIXERTYPE_FLYING_WING )
 800c74c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c750:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c754:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c758:	2b02      	cmp	r3, #2
 800c75a:	f040 8130 	bne.w	800c9be <mixerCLI+0x816>
                {
                    uart1Print("Roll Direction Left:            ");
 800c75e:	f64c 20d4 	movw	r0, #51924	; 0xcad4
 800c762:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c766:	f7fa f95b 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.rollDirectionLeft,   numberString, 10); uart1Print(numberString); uart1Print("\n");
 800c76a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c76e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c772:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 800c776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c77a:	ee17 3a90 	vmov	r3, s15
 800c77e:	b29b      	uxth	r3, r3
 800c780:	4618      	mov	r0, r3
 800c782:	f643 3178 	movw	r1, #15224	; 0x3b78
 800c786:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c78a:	f04f 020a 	mov.w	r2, #10
 800c78e:	f00a fa21 	bl	8016bd4 <itoa>
 800c792:	f643 3078 	movw	r0, #15224	; 0x3b78
 800c796:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c79a:	f7fa f941 	bl	8006a20 <uart1Print>
 800c79e:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c7a2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c7a6:	f7fa f93b 	bl	8006a20 <uart1Print>
                    uart1Print("Roll Direction Right:           ");
 800c7aa:	f64c 20f8 	movw	r0, #51960	; 0xcaf8
 800c7ae:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c7b2:	f7fa f935 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.rollDirectionRight,  numberString, 10); uart1Print(numberString); uart1Print("\n");
 800c7b6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c7ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c7be:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 800c7c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7c6:	ee17 3a90 	vmov	r3, s15
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f643 3178 	movw	r1, #15224	; 0x3b78
 800c7d2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c7d6:	f04f 020a 	mov.w	r2, #10
 800c7da:	f00a f9fb 	bl	8016bd4 <itoa>
 800c7de:	f643 3078 	movw	r0, #15224	; 0x3b78
 800c7e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c7e6:	f7fa f91b 	bl	8006a20 <uart1Print>
 800c7ea:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c7ee:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c7f2:	f7fa f915 	bl	8006a20 <uart1Print>
                    uart1Print("Pitch Direction Left:           ");
 800c7f6:	f64c 301c 	movw	r0, #51996	; 0xcb1c
 800c7fa:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c7fe:	f7fa f90f 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.pitchDirectionLeft,  numberString, 10); uart1Print(numberString); uart1Print("\n");
 800c802:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c806:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c80a:	edd3 7aa8 	vldr	s15, [r3, #672]	; 0x2a0
 800c80e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c812:	ee17 3a90 	vmov	r3, s15
 800c816:	b29b      	uxth	r3, r3
 800c818:	4618      	mov	r0, r3
 800c81a:	f643 3178 	movw	r1, #15224	; 0x3b78
 800c81e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c822:	f04f 020a 	mov.w	r2, #10
 800c826:	f00a f9d5 	bl	8016bd4 <itoa>
 800c82a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800c82e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c832:	f7fa f8f5 	bl	8006a20 <uart1Print>
 800c836:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c83a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c83e:	f7fa f8ef 	bl	8006a20 <uart1Print>
                    uart1Print("Pitch Direction Right:          ");
 800c842:	f64c 3040 	movw	r0, #52032	; 0xcb40
 800c846:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c84a:	f7fa f8e9 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.pitchDirectionRight, numberString, 10); uart1Print(numberString); uart1Print("\n");
 800c84e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c852:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c856:	edd3 7aa9 	vldr	s15, [r3, #676]	; 0x2a4
 800c85a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c85e:	ee17 3a90 	vmov	r3, s15
 800c862:	b29b      	uxth	r3, r3
 800c864:	4618      	mov	r0, r3
 800c866:	f643 3178 	movw	r1, #15224	; 0x3b78
 800c86a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c86e:	f04f 020a 	mov.w	r2, #10
 800c872:	f00a f9af 	bl	8016bd4 <itoa>
 800c876:	f643 3078 	movw	r0, #15224	; 0x3b78
 800c87a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c87e:	f7fa f8cf 	bl	8006a20 <uart1Print>
 800c882:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c886:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c88a:	f7fa f8c9 	bl	8006a20 <uart1Print>
                    uart1Print("Wing Left Minimum:              ");
 800c88e:	f64c 3064 	movw	r0, #52068	; 0xcb64
 800c892:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c896:	f7fa f8c3 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.wingLeftMinimum,     numberString, 10); uart1Print(numberString); uart1Print("\n");
 800c89a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c89e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c8a2:	edd3 7aaa 	vldr	s15, [r3, #680]	; 0x2a8
 800c8a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8aa:	ee17 3a90 	vmov	r3, s15
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f643 3178 	movw	r1, #15224	; 0x3b78
 800c8b6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c8ba:	f04f 020a 	mov.w	r2, #10
 800c8be:	f00a f989 	bl	8016bd4 <itoa>
 800c8c2:	f643 3078 	movw	r0, #15224	; 0x3b78
 800c8c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c8ca:	f7fa f8a9 	bl	8006a20 <uart1Print>
 800c8ce:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c8d2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c8d6:	f7fa f8a3 	bl	8006a20 <uart1Print>
                    uart1Print("Wing Left Maximum:              ");
 800c8da:	f64c 3088 	movw	r0, #52104	; 0xcb88
 800c8de:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c8e2:	f7fa f89d 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.wingLeftMaximum,     numberString, 10); uart1Print(numberString); uart1Print("\n");
 800c8e6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c8ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c8ee:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 800c8f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8f6:	ee17 3a90 	vmov	r3, s15
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f643 3178 	movw	r1, #15224	; 0x3b78
 800c902:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c906:	f04f 020a 	mov.w	r2, #10
 800c90a:	f00a f963 	bl	8016bd4 <itoa>
 800c90e:	f643 3078 	movw	r0, #15224	; 0x3b78
 800c912:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c916:	f7fa f883 	bl	8006a20 <uart1Print>
 800c91a:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c91e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c922:	f7fa f87d 	bl	8006a20 <uart1Print>
                    uart1Print("Wing Right Minimum:             ");
 800c926:	f64c 30ac 	movw	r0, #52140	; 0xcbac
 800c92a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c92e:	f7fa f877 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.wingRightMinimum,    numberString, 10); uart1Print(numberString); uart1Print("\n");
 800c932:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c936:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c93a:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 800c93e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c942:	ee17 3a90 	vmov	r3, s15
 800c946:	b29b      	uxth	r3, r3
 800c948:	4618      	mov	r0, r3
 800c94a:	f643 3178 	movw	r1, #15224	; 0x3b78
 800c94e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c952:	f04f 020a 	mov.w	r2, #10
 800c956:	f00a f93d 	bl	8016bd4 <itoa>
 800c95a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800c95e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c962:	f7fa f85d 	bl	8006a20 <uart1Print>
 800c966:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c96a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c96e:	f7fa f857 	bl	8006a20 <uart1Print>
                    uart1Print("Wing Right Maximum:             ");
 800c972:	f64c 30d0 	movw	r0, #52176	; 0xcbd0
 800c976:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c97a:	f7fa f851 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.wingRightMaximum,    numberString, 10); uart1Print(numberString); uart1Print("\n");
 800c97e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c982:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c986:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 800c98a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c98e:	ee17 3a90 	vmov	r3, s15
 800c992:	b29b      	uxth	r3, r3
 800c994:	4618      	mov	r0, r3
 800c996:	f643 3178 	movw	r1, #15224	; 0x3b78
 800c99a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c99e:	f04f 020a 	mov.w	r2, #10
 800c9a2:	f00a f917 	bl	8016bd4 <itoa>
 800c9a6:	f643 3078 	movw	r0, #15224	; 0x3b78
 800c9aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c9ae:	f7fa f837 	bl	8006a20 <uart1Print>
 800c9b2:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800c9b6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c9ba:	f7fa f831 	bl	8006a20 <uart1Print>
                }

                if ( eepromConfig.mixerConfiguration == MIXERTYPE_GIMBAL )
 800c9be:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c9c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c9c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	f040 8122 	bne.w	800cc14 <mixerCLI+0xa6c>
                {
                    uart1Print("Gimbal Roll Servo Min:          ");
 800c9d0:	f64c 30f4 	movw	r0, #52212	; 0xcbf4
 800c9d4:	f6c0 0002 	movt	r0, #2050	; 0x802
 800c9d8:	f7fa f822 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.gimbalRollServoMin,  numberString, 10); uart1Print(numberString); uart1Print("\n");
 800c9dc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800c9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c9e4:	edd3 7a9e 	vldr	s15, [r3, #632]	; 0x278
 800c9e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9ec:	ee17 3a90 	vmov	r3, s15
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f643 3178 	movw	r1, #15224	; 0x3b78
 800c9f8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c9fc:	f04f 020a 	mov.w	r2, #10
 800ca00:	f00a f8e8 	bl	8016bd4 <itoa>
 800ca04:	f643 3078 	movw	r0, #15224	; 0x3b78
 800ca08:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ca0c:	f7fa f808 	bl	8006a20 <uart1Print>
 800ca10:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800ca14:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ca18:	f7fa f802 	bl	8006a20 <uart1Print>
                    uart1Print("Gimbal Roll Servo Mid:          ");
 800ca1c:	f64c 4018 	movw	r0, #52248	; 0xcc18
 800ca20:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ca24:	f7f9 fffc 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.gimbalRollServoMid,  numberString, 10); uart1Print(numberString); uart1Print("\n");
 800ca28:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ca2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ca30:	edd3 7a9f 	vldr	s15, [r3, #636]	; 0x27c
 800ca34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca38:	ee17 3a90 	vmov	r3, s15
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f643 3178 	movw	r1, #15224	; 0x3b78
 800ca44:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ca48:	f04f 020a 	mov.w	r2, #10
 800ca4c:	f00a f8c2 	bl	8016bd4 <itoa>
 800ca50:	f643 3078 	movw	r0, #15224	; 0x3b78
 800ca54:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ca58:	f7f9 ffe2 	bl	8006a20 <uart1Print>
 800ca5c:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800ca60:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ca64:	f7f9 ffdc 	bl	8006a20 <uart1Print>
                    uart1Print("Gimbal Roll Servo Max:          ");
 800ca68:	f64c 403c 	movw	r0, #52284	; 0xcc3c
 800ca6c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ca70:	f7f9 ffd6 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.gimbalRollServoMax,  numberString, 10); uart1Print(numberString); uart1Print("\n");
 800ca74:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ca78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ca7c:	edd3 7aa0 	vldr	s15, [r3, #640]	; 0x280
 800ca80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca84:	ee17 3a90 	vmov	r3, s15
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f643 3178 	movw	r1, #15224	; 0x3b78
 800ca90:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ca94:	f04f 020a 	mov.w	r2, #10
 800ca98:	f00a f89c 	bl	8016bd4 <itoa>
 800ca9c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800caa0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800caa4:	f7f9 ffbc 	bl	8006a20 <uart1Print>
 800caa8:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800caac:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cab0:	f7f9 ffb6 	bl	8006a20 <uart1Print>
                    uart1Print("Gimbal Roll Servo Gain:        ");
 800cab4:	f64c 4060 	movw	r0, #52320	; 0xcc60
 800cab8:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cabc:	f7f9 ffb0 	bl	8006a20 <uart1Print>
                    ftoa(eepromConfig.gimbalRollServoGain, numberString);               uart1Print(numberString); uart1Print("\n");
 800cac0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cac8:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800cacc:	4618      	mov	r0, r3
 800cace:	f643 3178 	movw	r1, #15224	; 0x3b78
 800cad2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800cad6:	f00a f8b3 	bl	8016c40 <ftoa>
 800cada:	f643 3078 	movw	r0, #15224	; 0x3b78
 800cade:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800cae2:	f7f9 ff9d 	bl	8006a20 <uart1Print>
 800cae6:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800caea:	f6c0 0002 	movt	r0, #2050	; 0x802
 800caee:	f7f9 ff97 	bl	8006a20 <uart1Print>
                    uart1Print("Gimbal Pitch Servo Min:         ");
 800caf2:	f64c 4080 	movw	r0, #52352	; 0xcc80
 800caf6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cafa:	f7f9 ff91 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.gimbalPitchServoMin, numberString, 10); uart1Print(numberString); uart1Print("\n");
 800cafe:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cb02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cb06:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 800cb0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb0e:	ee17 3a90 	vmov	r3, s15
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	4618      	mov	r0, r3
 800cb16:	f643 3178 	movw	r1, #15224	; 0x3b78
 800cb1a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800cb1e:	f04f 020a 	mov.w	r2, #10
 800cb22:	f00a f857 	bl	8016bd4 <itoa>
 800cb26:	f643 3078 	movw	r0, #15224	; 0x3b78
 800cb2a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800cb2e:	f7f9 ff77 	bl	8006a20 <uart1Print>
 800cb32:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800cb36:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cb3a:	f7f9 ff71 	bl	8006a20 <uart1Print>
                    uart1Print("Gimbal Pitch Servo Mid:         ");
 800cb3e:	f64c 40a4 	movw	r0, #52388	; 0xcca4
 800cb42:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cb46:	f7f9 ff6b 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.gimbalPitchServoMid, numberString, 10); uart1Print(numberString); uart1Print("\n");
 800cb4a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cb4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cb52:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 800cb56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb5a:	ee17 3a90 	vmov	r3, s15
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	4618      	mov	r0, r3
 800cb62:	f643 3178 	movw	r1, #15224	; 0x3b78
 800cb66:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800cb6a:	f04f 020a 	mov.w	r2, #10
 800cb6e:	f00a f831 	bl	8016bd4 <itoa>
 800cb72:	f643 3078 	movw	r0, #15224	; 0x3b78
 800cb76:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800cb7a:	f7f9 ff51 	bl	8006a20 <uart1Print>
 800cb7e:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800cb82:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cb86:	f7f9 ff4b 	bl	8006a20 <uart1Print>
                    uart1Print("Gimbal Pitch Servo Max:         ");
 800cb8a:	f64c 40c8 	movw	r0, #52424	; 0xccc8
 800cb8e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cb92:	f7f9 ff45 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.gimbalPitchServoMax, numberString, 10); uart1Print(numberString); uart1Print("\n");
 800cb96:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cb9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cb9e:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 800cba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cba6:	ee17 3a90 	vmov	r3, s15
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	4618      	mov	r0, r3
 800cbae:	f643 3178 	movw	r1, #15224	; 0x3b78
 800cbb2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800cbb6:	f04f 020a 	mov.w	r2, #10
 800cbba:	f00a f80b 	bl	8016bd4 <itoa>
 800cbbe:	f643 3078 	movw	r0, #15224	; 0x3b78
 800cbc2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800cbc6:	f7f9 ff2b 	bl	8006a20 <uart1Print>
 800cbca:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800cbce:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cbd2:	f7f9 ff25 	bl	8006a20 <uart1Print>
                    uart1Print("Gimbal Pitch Servo Gain:       ");
 800cbd6:	f64c 40ec 	movw	r0, #52460	; 0xccec
 800cbda:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cbde:	f7f9 ff1f 	bl	8006a20 <uart1Print>
                    ftoa(eepromConfig.gimbalPitchServoGain, numberString);              uart1Print(numberString); uart1Print("\n");
 800cbe2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cbe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cbea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f643 3178 	movw	r1, #15224	; 0x3b78
 800cbf4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800cbf8:	f00a f822 	bl	8016c40 <ftoa>
 800cbfc:	f643 3078 	movw	r0, #15224	; 0x3b78
 800cc00:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800cc04:	f7f9 ff0c 	bl	8006a20 <uart1Print>
 800cc08:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800cc0c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cc10:	f7f9 ff06 	bl	8006a20 <uart1Print>
                }

                if ( eepromConfig.mixerConfiguration == MIXERTYPE_TRI )
 800cc14:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cc18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc1c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cc20:	2b04      	cmp	r3, #4
 800cc22:	d171      	bne.n	800cd08 <mixerCLI+0xb60>
                {
                    uart1Print("TriCopter Yaw Servo Min:        ");
 800cc24:	f64c 500c 	movw	r0, #52492	; 0xcd0c
 800cc28:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cc2c:	f7f9 fef8 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.triYawServoMin, numberString, 10); uart1Print(numberString); uart1Print("\n");
 800cc30:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cc34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc38:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800cc3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc40:	ee17 3a90 	vmov	r3, s15
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	4618      	mov	r0, r3
 800cc48:	f643 3178 	movw	r1, #15224	; 0x3b78
 800cc4c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800cc50:	f04f 020a 	mov.w	r2, #10
 800cc54:	f009 ffbe 	bl	8016bd4 <itoa>
 800cc58:	f643 3078 	movw	r0, #15224	; 0x3b78
 800cc5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800cc60:	f7f9 fede 	bl	8006a20 <uart1Print>
 800cc64:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800cc68:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cc6c:	f7f9 fed8 	bl	8006a20 <uart1Print>
                    uart1Print("TriCopter Yaw Servo Mid:        ");
 800cc70:	f64c 5030 	movw	r0, #52528	; 0xcd30
 800cc74:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cc78:	f7f9 fed2 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.triYawServoMid, numberString, 10); uart1Print(numberString); uart1Print("\n");
 800cc7c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cc80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc84:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 800cc88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc8c:	ee17 3a90 	vmov	r3, s15
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	4618      	mov	r0, r3
 800cc94:	f643 3178 	movw	r1, #15224	; 0x3b78
 800cc98:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800cc9c:	f04f 020a 	mov.w	r2, #10
 800cca0:	f009 ff98 	bl	8016bd4 <itoa>
 800cca4:	f643 3078 	movw	r0, #15224	; 0x3b78
 800cca8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ccac:	f7f9 feb8 	bl	8006a20 <uart1Print>
 800ccb0:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800ccb4:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ccb8:	f7f9 feb2 	bl	8006a20 <uart1Print>
                    uart1Print("TriCopter Yaw Servo Max:        ");
 800ccbc:	f64c 5054 	movw	r0, #52564	; 0xcd54
 800ccc0:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ccc4:	f7f9 feac 	bl	8006a20 <uart1Print>
                    itoa((uint16_t)eepromConfig.triYawServoMax, numberString, 10); uart1Print(numberString); uart1Print("\n");
 800ccc8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ccd0:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800ccd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccd8:	ee17 3a90 	vmov	r3, s15
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	4618      	mov	r0, r3
 800cce0:	f643 3178 	movw	r1, #15224	; 0x3b78
 800cce4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800cce8:	f04f 020a 	mov.w	r2, #10
 800ccec:	f009 ff72 	bl	8016bd4 <itoa>
 800ccf0:	f643 3078 	movw	r0, #15224	; 0x3b78
 800ccf4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ccf8:	f7f9 fe92 	bl	8006a20 <uart1Print>
 800ccfc:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800cd00:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cd04:	f7f9 fe8c 	bl	8006a20 <uart1Print>
                }

                if (eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_Y_COMP  ||
 800cd08:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cd0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd10:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cd14:	2b08      	cmp	r3, #8
 800cd16:	d01f      	beq.n	800cd58 <mixerCLI+0xbb0>
                    eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_RY_COMP ||
 800cd18:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cd1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd20:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
                    itoa((uint16_t)eepromConfig.triYawServoMid, numberString, 10); uart1Print(numberString); uart1Print("\n");
                    uart1Print("TriCopter Yaw Servo Max:        ");
                    itoa((uint16_t)eepromConfig.triYawServoMax, numberString, 10); uart1Print(numberString); uart1Print("\n");
                }

                if (eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_Y_COMP  ||
 800cd24:	2b09      	cmp	r3, #9
 800cd26:	d017      	beq.n	800cd58 <mixerCLI+0xbb0>
                    eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_RY_COMP ||
                    eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_PY_COMP ||
 800cd28:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cd2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd30:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
                    uart1Print("TriCopter Yaw Servo Max:        ");
                    itoa((uint16_t)eepromConfig.triYawServoMax, numberString, 10); uart1Print(numberString); uart1Print("\n");
                }

                if (eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_Y_COMP  ||
                    eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_RY_COMP ||
 800cd34:	2b0a      	cmp	r3, #10
 800cd36:	d00f      	beq.n	800cd58 <mixerCLI+0xbb0>
                    eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_PY_COMP ||
                    eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_RP_COMP ||
 800cd38:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cd3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd40:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
                    itoa((uint16_t)eepromConfig.triYawServoMax, numberString, 10); uart1Print(numberString); uart1Print("\n");
                }

                if (eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_Y_COMP  ||
                    eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_RY_COMP ||
                    eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_PY_COMP ||
 800cd44:	2b0b      	cmp	r3, #11
 800cd46:	d007      	beq.n	800cd58 <mixerCLI+0xbb0>
                    eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_RP_COMP ||
                    eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_RPY_COMP)
 800cd48:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cd4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd50:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
                }

                if (eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_Y_COMP  ||
                    eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_RY_COMP ||
                    eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_PY_COMP ||
                    eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_RP_COMP ||
 800cd54:	2b0c      	cmp	r3, #12
 800cd56:	d11e      	bne.n	800cd96 <mixerCLI+0xbee>
                    eepromConfig.mixerConfiguration == MIXERTYPE_VTAIL4_RPY_COMP)
                {
                    uart1Print("V Tail Angle                   ");
 800cd58:	f64c 5078 	movw	r0, #52600	; 0xcd78
 800cd5c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cd60:	f7f9 fe5e 	bl	8006a20 <uart1Print>
                    ftoa(eepromConfig.vTailAngle, numberString); uart1Print(numberString); uart1Print("\n");
 800cd64:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cd68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd6c:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800cd70:	4618      	mov	r0, r3
 800cd72:	f643 3178 	movw	r1, #15224	; 0x3b78
 800cd76:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800cd7a:	f009 ff61 	bl	8016c40 <ftoa>
 800cd7e:	f643 3078 	movw	r0, #15224	; 0x3b78
 800cd82:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800cd86:	f7f9 fe4b 	bl	8006a20 <uart1Print>
 800cd8a:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800cd8e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cd92:	f7f9 fe45 	bl	8006a20 <uart1Print>
    			}

                uart1Print("Yaw Direction:                  ");
 800cd96:	f64c 5098 	movw	r0, #52632	; 0xcd98
 800cd9a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cd9e:	f7f9 fe3f 	bl	8006a20 <uart1Print>
                itoa((int8_t)eepromConfig.yawDirection,   numberString, 10); uart1Print(numberString); uart1Print("\n\n");
 800cda2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cda6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cdaa:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800cdae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cdb2:	ee17 3a90 	vmov	r3, s15
 800cdb6:	b2db      	uxtb	r3, r3
 800cdb8:	b25b      	sxtb	r3, r3
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f643 3178 	movw	r1, #15224	; 0x3b78
 800cdc0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800cdc4:	f04f 020a 	mov.w	r2, #10
 800cdc8:	f009 ff04 	bl	8016bd4 <itoa>
 800cdcc:	f643 3078 	movw	r0, #15224	; 0x3b78
 800cdd0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800cdd4:	f7f9 fe24 	bl	8006a20 <uart1Print>
 800cdd8:	f64c 50bc 	movw	r0, #52668	; 0xcdbc
 800cddc:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cde0:	f7f9 fe1e 	bl	8006a20 <uart1Print>

                validQuery = false;
 800cde4:	f04f 0300 	mov.w	r3, #0
 800cde8:	f88d 3009 	strb.w	r3, [sp, #9]
                break;
 800cdec:	e344      	b.n	800d478 <mixerCLI+0x12d0>

            ///////////////////////////

            case 'b': // Free Mix Matrix
        	    uart1Print("\nNumber of Free Mixer Motors:  ");
 800cdee:	f64c 50c0 	movw	r0, #52672	; 0xcdc0
 800cdf2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cdf6:	f7f9 fe13 	bl	8006a20 <uart1Print>
        	    itoa( eepromConfig.freeMixMotors, numberString, 10 ); uart1Print( numberString ); uart1Print("\n\n");
 800cdfa:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cdfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ce02:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800ce06:	4618      	mov	r0, r3
 800ce08:	f643 3178 	movw	r1, #15224	; 0x3b78
 800ce0c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ce10:	f04f 020a 	mov.w	r2, #10
 800ce14:	f009 fede 	bl	8016bd4 <itoa>
 800ce18:	f643 3078 	movw	r0, #15224	; 0x3b78
 800ce1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ce20:	f7f9 fdfe 	bl	8006a20 <uart1Print>
 800ce24:	f64c 50bc 	movw	r0, #52668	; 0xcdbc
 800ce28:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ce2c:	f7f9 fdf8 	bl	8006a20 <uart1Print>
                uart1Print("         Roll    Pitch   Yaw\n");
 800ce30:	f64c 50e0 	movw	r0, #52704	; 0xcde0
 800ce34:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ce38:	f7f9 fdf2 	bl	8006a20 <uart1Print>

        	    for ( index = 0; index < eepromConfig.freeMixMotors; index++ )
 800ce3c:	f04f 0300 	mov.w	r3, #0
 800ce40:	f88d 300b 	strb.w	r3, [sp, #11]
 800ce44:	e08b      	b.n	800cf5e <mixerCLI+0xdb6>
        	    {
        	    	uart1Print("Motor"); itoa(index, numberString, 10);       uart1Print(numberString); uart1Print("  ");
 800ce46:	f64c 6000 	movw	r0, #52736	; 0xce00
 800ce4a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ce4e:	f7f9 fde7 	bl	8006a20 <uart1Print>
 800ce52:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800ce56:	4618      	mov	r0, r3
 800ce58:	f643 3178 	movw	r1, #15224	; 0x3b78
 800ce5c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ce60:	f04f 020a 	mov.w	r2, #10
 800ce64:	f009 feb6 	bl	8016bd4 <itoa>
 800ce68:	f643 3078 	movw	r0, #15224	; 0x3b78
 800ce6c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ce70:	f7f9 fdd6 	bl	8006a20 <uart1Print>
 800ce74:	f64c 6008 	movw	r0, #52744	; 0xce08
 800ce78:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ce7c:	f7f9 fdd0 	bl	8006a20 <uart1Print>
        	    	ftoa(eepromConfig.freeMix[index][ROLL ], numberString); uart1Print(numberString); uart1Print("  ");
 800ce80:	f89d 100b 	ldrb.w	r1, [sp, #11]
 800ce84:	f643 32fc 	movw	r2, #15356	; 0x3bfc
 800ce88:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ce92:	185b      	adds	r3, r3, r1
 800ce94:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ce98:	18d3      	adds	r3, r2, r3
 800ce9a:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4618      	mov	r0, r3
 800cea2:	f643 3178 	movw	r1, #15224	; 0x3b78
 800cea6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ceaa:	f009 fec9 	bl	8016c40 <ftoa>
 800ceae:	f643 3078 	movw	r0, #15224	; 0x3b78
 800ceb2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ceb6:	f7f9 fdb3 	bl	8006a20 <uart1Print>
 800ceba:	f64c 6008 	movw	r0, #52744	; 0xce08
 800cebe:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cec2:	f7f9 fdad 	bl	8006a20 <uart1Print>
        	    	ftoa(eepromConfig.freeMix[index][PITCH], numberString); uart1Print(numberString); uart1Print("  ");
 800cec6:	f89d 100b 	ldrb.w	r1, [sp, #11]
 800ceca:	f643 32fc 	movw	r2, #15356	; 0x3bfc
 800cece:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800ced2:	460b      	mov	r3, r1
 800ced4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ced8:	185b      	adds	r3, r3, r1
 800ceda:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800cede:	18d3      	adds	r3, r2, r3
 800cee0:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4618      	mov	r0, r3
 800cee8:	f643 3178 	movw	r1, #15224	; 0x3b78
 800ceec:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800cef0:	f009 fea6 	bl	8016c40 <ftoa>
 800cef4:	f643 3078 	movw	r0, #15224	; 0x3b78
 800cef8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800cefc:	f7f9 fd90 	bl	8006a20 <uart1Print>
 800cf00:	f64c 6008 	movw	r0, #52744	; 0xce08
 800cf04:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cf08:	f7f9 fd8a 	bl	8006a20 <uart1Print>
        	    	ftoa(eepromConfig.freeMix[index][YAW  ], numberString); uart1Print(numberString); uart1Print("\n");
 800cf0c:	f89d 100b 	ldrb.w	r1, [sp, #11]
 800cf10:	f643 32fc 	movw	r2, #15356	; 0x3bfc
 800cf14:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800cf18:	460b      	mov	r3, r1
 800cf1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cf1e:	185b      	adds	r3, r3, r1
 800cf20:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800cf24:	18d3      	adds	r3, r2, r3
 800cf26:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f643 3178 	movw	r1, #15224	; 0x3b78
 800cf32:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800cf36:	f009 fe83 	bl	8016c40 <ftoa>
 800cf3a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800cf3e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800cf42:	f7f9 fd6d 	bl	8006a20 <uart1Print>
 800cf46:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800cf4a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cf4e:	f7f9 fd67 	bl	8006a20 <uart1Print>
            case 'b': // Free Mix Matrix
        	    uart1Print("\nNumber of Free Mixer Motors:  ");
        	    itoa( eepromConfig.freeMixMotors, numberString, 10 ); uart1Print( numberString ); uart1Print("\n\n");
                uart1Print("         Roll    Pitch   Yaw\n");

        	    for ( index = 0; index < eepromConfig.freeMixMotors; index++ )
 800cf52:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800cf56:	f103 0301 	add.w	r3, r3, #1
 800cf5a:	f88d 300b 	strb.w	r3, [sp, #11]
 800cf5e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cf62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cf66:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800cf6a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	f4ff af69 	bcc.w	800ce46 <mixerCLI+0xc9e>
        	    	ftoa(eepromConfig.freeMix[index][ROLL ], numberString); uart1Print(numberString); uart1Print("  ");
        	    	ftoa(eepromConfig.freeMix[index][PITCH], numberString); uart1Print(numberString); uart1Print("  ");
        	    	ftoa(eepromConfig.freeMix[index][YAW  ], numberString); uart1Print(numberString); uart1Print("\n");
        	    }

        	    uart1Print("\n");
 800cf74:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800cf78:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cf7c:	f7f9 fd50 	bl	8006a20 <uart1Print>
        	    validQuery = false;
 800cf80:	f04f 0300 	mov.w	r3, #0
 800cf84:	f88d 3009 	strb.w	r3, [sp, #9]
        	    break;
 800cf88:	e276      	b.n	800d478 <mixerCLI+0x12d0>

            ///////////////////////////

			case 'x':
			    uart1Print("\nExiting Mixer CLI....\n\n");
 800cf8a:	f64c 600c 	movw	r0, #52748	; 0xce0c
 800cf8e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800cf92:	f7f9 fd45 	bl	8006a20 <uart1Print>
			    cliBusy = false;
 800cf96:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800cf9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cf9e:	f04f 0200 	mov.w	r2, #0
 800cfa2:	701a      	strb	r2, [r3, #0]

	    	///////////////////////////
	    }
	}

}
 800cfa4:	b005      	add	sp, #20
 800cfa6:	bd30      	pop	{r4, r5, pc}
			    break;

            ///////////////////////////

            case 'A': // Read Mixer Configuration
                eepromConfig.mixerConfiguration = (uint8_t)readFloatUart1();
 800cfa8:	f7fb ff6c 	bl	8008e84 <readFloatUart1>
 800cfac:	ee07 0a90 	vmov	s15, r0
 800cfb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfb4:	ee17 3a90 	vmov	r3, s15
 800cfb8:	b2da      	uxtb	r2, r3
 800cfba:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cfbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cfc2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                initMixer();
 800cfc6:	f004 fd97 	bl	8011af8 <initMixer>

        	    mixerQuery = 'a';
 800cfca:	f04f 0361 	mov.w	r3, #97	; 0x61
 800cfce:	f88d 300a 	strb.w	r3, [sp, #10]
                validQuery = true;
 800cfd2:	f04f 0301 	mov.w	r3, #1
 800cfd6:	f88d 3009 	strb.w	r3, [sp, #9]
		        break;
 800cfda:	e24d      	b.n	800d478 <mixerCLI+0x12d0>

            ///////////////////////////

            case 'B': // Read ESC and Servo PWM Update Rates
                eepromConfig.escPwmRate   = (uint16_t)readFloatUart1();
 800cfdc:	f7fb ff52 	bl	8008e84 <readFloatUart1>
 800cfe0:	ee07 0a90 	vmov	s15, r0
 800cfe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfe8:	ee17 3a90 	vmov	r3, s15
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800cff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cff6:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
                eepromConfig.servoPwmRate = (uint16_t)readFloatUart1();
 800cffa:	f7fb ff43 	bl	8008e84 <readFloatUart1>
 800cffe:	ee07 0a90 	vmov	s15, r0
 800d002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d006:	ee17 3a90 	vmov	r3, s15
 800d00a:	b29a      	uxth	r2, r3
 800d00c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d010:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d014:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

                pwmEscInit(eepromConfig.escPwmRate);
 800d018:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d020:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800d024:	4618      	mov	r0, r3
 800d026:	f7f7 f90b 	bl	8004240 <pwmEscInit>
                pwmServoInit(eepromConfig.servoPwmRate);
 800d02a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d02e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d032:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800d036:	4618      	mov	r0, r3
 800d038:	f7f7 fa7e 	bl	8004538 <pwmServoInit>

                mixerQuery = 'a';
 800d03c:	f04f 0361 	mov.w	r3, #97	; 0x61
 800d040:	f88d 300a 	strb.w	r3, [sp, #10]
                validQuery = true;
 800d044:	f04f 0301 	mov.w	r3, #1
 800d048:	f88d 3009 	strb.w	r3, [sp, #9]
        	    break;
 800d04c:	e214      	b.n	800d478 <mixerCLI+0x12d0>

            ///////////////////////////

            case 'C': // Read BiCopter Left Servo Parameters
           	    eepromConfig.biLeftServoMin = readFloatUart1();
 800d04e:	f7fb ff19 	bl	8008e84 <readFloatUart1>
 800d052:	4602      	mov	r2, r0
 800d054:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d058:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d05c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
           	    eepromConfig.biLeftServoMid = readFloatUart1();
 800d060:	f7fb ff10 	bl	8008e84 <readFloatUart1>
 800d064:	4602      	mov	r2, r0
 800d066:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d06a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d06e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
           	    eepromConfig.biLeftServoMax = readFloatUart1();
 800d072:	f7fb ff07 	bl	8008e84 <readFloatUart1>
 800d076:	4602      	mov	r2, r0
 800d078:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d080:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

           	    mixerQuery = 'a';
 800d084:	f04f 0361 	mov.w	r3, #97	; 0x61
 800d088:	f88d 300a 	strb.w	r3, [sp, #10]
                validQuery = true;
 800d08c:	f04f 0301 	mov.w	r3, #1
 800d090:	f88d 3009 	strb.w	r3, [sp, #9]
                break;
 800d094:	e1f0      	b.n	800d478 <mixerCLI+0x12d0>

            ///////////////////////////

            case 'D': // Read BiCopter Right Servo Parameters
           	    eepromConfig.biRightServoMin = readFloatUart1();
 800d096:	f7fb fef5 	bl	8008e84 <readFloatUart1>
 800d09a:	4602      	mov	r2, r0
 800d09c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d0a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d0a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
           	    eepromConfig.biRightServoMid = readFloatUart1();
 800d0a8:	f7fb feec 	bl	8008e84 <readFloatUart1>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d0b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d0b6:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
           	    eepromConfig.biRightServoMax = readFloatUart1();
 800d0ba:	f7fb fee3 	bl	8008e84 <readFloatUart1>
 800d0be:	4602      	mov	r2, r0
 800d0c0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d0c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

           	    mixerQuery = 'a';
 800d0cc:	f04f 0361 	mov.w	r3, #97	; 0x61
 800d0d0:	f88d 300a 	strb.w	r3, [sp, #10]
                validQuery = true;
 800d0d4:	f04f 0301 	mov.w	r3, #1
 800d0d8:	f88d 3009 	strb.w	r3, [sp, #9]
                break;
 800d0dc:	e1cc      	b.n	800d478 <mixerCLI+0x12d0>

            ///////////////////////////

            case 'E': // Read Flying Wing Servo Directions
                eepromConfig.rollDirectionLeft   = readFloatUart1();
 800d0de:	f7fb fed1 	bl	8008e84 <readFloatUart1>
 800d0e2:	4602      	mov	r2, r0
 800d0e4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d0e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d0ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
                eepromConfig.rollDirectionRight  = readFloatUart1();
 800d0f0:	f7fb fec8 	bl	8008e84 <readFloatUart1>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d0fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d0fe:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
                eepromConfig.pitchDirectionLeft  = readFloatUart1();
 800d102:	f7fb febf 	bl	8008e84 <readFloatUart1>
 800d106:	4602      	mov	r2, r0
 800d108:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d110:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
                eepromConfig.pitchDirectionRight = readFloatUart1();
 800d114:	f7fb feb6 	bl	8008e84 <readFloatUart1>
 800d118:	4602      	mov	r2, r0
 800d11a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d11e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d122:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

         	    mixerQuery = 'a';
 800d126:	f04f 0361 	mov.w	r3, #97	; 0x61
 800d12a:	f88d 300a 	strb.w	r3, [sp, #10]
                validQuery = true;
 800d12e:	f04f 0301 	mov.w	r3, #1
 800d132:	f88d 3009 	strb.w	r3, [sp, #9]
                break;
 800d136:	e19f      	b.n	800d478 <mixerCLI+0x12d0>

            ///////////////////////////

            case 'F': // Read Flying Wing Servo Limits
           	    eepromConfig.wingLeftMinimum  = readFloatUart1();
 800d138:	f7fb fea4 	bl	8008e84 <readFloatUart1>
 800d13c:	4602      	mov	r2, r0
 800d13e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d142:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d146:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
           	    eepromConfig.wingLeftMaximum  = readFloatUart1();
 800d14a:	f7fb fe9b 	bl	8008e84 <readFloatUart1>
 800d14e:	4602      	mov	r2, r0
 800d150:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d154:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d158:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
           	    eepromConfig.wingRightMinimum = readFloatUart1();
 800d15c:	f7fb fe92 	bl	8008e84 <readFloatUart1>
 800d160:	4602      	mov	r2, r0
 800d162:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d166:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d16a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
           	    eepromConfig.wingRightMaximum = readFloatUart1();
 800d16e:	f7fb fe89 	bl	8008e84 <readFloatUart1>
 800d172:	4602      	mov	r2, r0
 800d174:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d178:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d17c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4

                mixerQuery = 'a';
 800d180:	f04f 0361 	mov.w	r3, #97	; 0x61
 800d184:	f88d 300a 	strb.w	r3, [sp, #10]
                validQuery = true;
 800d188:	f04f 0301 	mov.w	r3, #1
 800d18c:	f88d 3009 	strb.w	r3, [sp, #9]
                break;
 800d190:	e172      	b.n	800d478 <mixerCLI+0x12d0>

            ///////////////////////////

            case 'G': // Read Free Mix Motor Number
           	    eepromConfig.freeMixMotors = (uint8_t)readFloatUart1();
 800d192:	f7fb fe77 	bl	8008e84 <readFloatUart1>
 800d196:	ee07 0a90 	vmov	s15, r0
 800d19a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d19e:	ee17 3a90 	vmov	r3, s15
 800d1a2:	b2da      	uxtb	r2, r3
 800d1a4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d1a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d1ac:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
           	    initMixer();
 800d1b0:	f004 fca2 	bl	8011af8 <initMixer>

           	    mixerQuery = 'b';
 800d1b4:	f04f 0362 	mov.w	r3, #98	; 0x62
 800d1b8:	f88d 300a 	strb.w	r3, [sp, #10]
                validQuery = true;
 800d1bc:	f04f 0301 	mov.w	r3, #1
 800d1c0:	f88d 3009 	strb.w	r3, [sp, #9]
                break;
 800d1c4:	e158      	b.n	800d478 <mixerCLI+0x12d0>

            ///////////////////////////

            case 'H': // Read Free Mix Matrix Element
                rows    = (uint8_t)readFloatUart1();
 800d1c6:	f7fb fe5d 	bl	8008e84 <readFloatUart1>
 800d1ca:	ee07 0a90 	vmov	s15, r0
 800d1ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1d2:	ee17 3a90 	vmov	r3, s15
 800d1d6:	f88d 3008 	strb.w	r3, [sp, #8]
                columns = (uint8_t)readFloatUart1();
 800d1da:	f7fb fe53 	bl	8008e84 <readFloatUart1>
 800d1de:	ee07 0a90 	vmov	s15, r0
 800d1e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1e6:	ee17 3a90 	vmov	r3, s15
 800d1ea:	f88d 3007 	strb.w	r3, [sp, #7]
                eepromConfig.freeMix[rows][columns] = readFloatUart1();
 800d1ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
 800d1f2:	f89d 5007 	ldrb.w	r5, [sp, #7]
 800d1f6:	f7fb fe45 	bl	8008e84 <readFloatUart1>
 800d1fa:	4601      	mov	r1, r0
 800d1fc:	f643 32fc 	movw	r2, #15356	; 0x3bfc
 800d200:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800d204:	4623      	mov	r3, r4
 800d206:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d20a:	191b      	adds	r3, r3, r4
 800d20c:	195b      	adds	r3, r3, r5
 800d20e:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 800d212:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d216:	18d3      	adds	r3, r2, r3
 800d218:	f103 0304 	add.w	r3, r3, #4
 800d21c:	6019      	str	r1, [r3, #0]

                mixerQuery = 'b';
 800d21e:	f04f 0362 	mov.w	r3, #98	; 0x62
 800d222:	f88d 300a 	strb.w	r3, [sp, #10]
                validQuery = true;
 800d226:	f04f 0301 	mov.w	r3, #1
 800d22a:	f88d 3009 	strb.w	r3, [sp, #9]
                break;
 800d22e:	e123      	b.n	800d478 <mixerCLI+0x12d0>

            ///////////////////////////

            case 'I': // Read Gimbal Roll Servo Parameters
         	    eepromConfig.gimbalRollServoMin  = readFloatUart1();
 800d230:	f7fb fe28 	bl	8008e84 <readFloatUart1>
 800d234:	4602      	mov	r2, r0
 800d236:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d23a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d23e:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
           	    eepromConfig.gimbalRollServoMid  = readFloatUart1();
 800d242:	f7fb fe1f 	bl	8008e84 <readFloatUart1>
 800d246:	4602      	mov	r2, r0
 800d248:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d24c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d250:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
           	    eepromConfig.gimbalRollServoMax  = readFloatUart1();
 800d254:	f7fb fe16 	bl	8008e84 <readFloatUart1>
 800d258:	4602      	mov	r2, r0
 800d25a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d25e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d262:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
           	    eepromConfig.gimbalRollServoGain = readFloatUart1();
 800d266:	f7fb fe0d 	bl	8008e84 <readFloatUart1>
 800d26a:	4602      	mov	r2, r0
 800d26c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d270:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d274:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284

           	    mixerQuery = 'a';
 800d278:	f04f 0361 	mov.w	r3, #97	; 0x61
 800d27c:	f88d 300a 	strb.w	r3, [sp, #10]
                validQuery = true;
 800d280:	f04f 0301 	mov.w	r3, #1
 800d284:	f88d 3009 	strb.w	r3, [sp, #9]
                break;
 800d288:	e0f6      	b.n	800d478 <mixerCLI+0x12d0>

            ///////////////////////////

            case 'J': // Read Gimbal Pitch Servo Parameters
           	    eepromConfig.gimbalPitchServoMin  = readFloatUart1();
 800d28a:	f7fb fdfb 	bl	8008e84 <readFloatUart1>
 800d28e:	4602      	mov	r2, r0
 800d290:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d294:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d298:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
           	    eepromConfig.gimbalPitchServoMid  = readFloatUart1();
 800d29c:	f7fb fdf2 	bl	8008e84 <readFloatUart1>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d2a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d2aa:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
           	    eepromConfig.gimbalPitchServoMax  = readFloatUart1();
 800d2ae:	f7fb fde9 	bl	8008e84 <readFloatUart1>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d2b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d2bc:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
           	    eepromConfig.gimbalPitchServoGain = readFloatUart1();
 800d2c0:	f7fb fde0 	bl	8008e84 <readFloatUart1>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d2ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d2ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

           	    mixerQuery = 'a';
 800d2d2:	f04f 0361 	mov.w	r3, #97	; 0x61
 800d2d6:	f88d 300a 	strb.w	r3, [sp, #10]
                validQuery = true;
 800d2da:	f04f 0301 	mov.w	r3, #1
 800d2de:	f88d 3009 	strb.w	r3, [sp, #9]
                break;
 800d2e2:	e0c9      	b.n	800d478 <mixerCLI+0x12d0>

            ///////////////////////////

            case 'K': // Read TriCopter YawServo Parameters
        	    eepromConfig.triYawServoMin = readFloatUart1();
 800d2e4:	f7fb fdce 	bl	8008e84 <readFloatUart1>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d2ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d2f2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
           	    eepromConfig.triYawServoMid = readFloatUart1();
 800d2f6:	f7fb fdc5 	bl	8008e84 <readFloatUart1>
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d300:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d304:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
           	    eepromConfig.triYawServoMax = readFloatUart1();
 800d308:	f7fb fdbc 	bl	8008e84 <readFloatUart1>
 800d30c:	4602      	mov	r2, r0
 800d30e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d312:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d316:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

           	    mixerQuery = 'a';
 800d31a:	f04f 0361 	mov.w	r3, #97	; 0x61
 800d31e:	f88d 300a 	strb.w	r3, [sp, #10]
                validQuery = true;
 800d322:	f04f 0301 	mov.w	r3, #1
 800d326:	f88d 3009 	strb.w	r3, [sp, #9]
                break;
 800d32a:	e0a5      	b.n	800d478 <mixerCLI+0x12d0>

            ///////////////////////////

            case 'L': // Read V Tail Angle
        	    eepromConfig.vTailAngle = readFloatUart1();
 800d32c:	f7fb fdaa 	bl	8008e84 <readFloatUart1>
 800d330:	4602      	mov	r2, r0
 800d332:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d336:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d33a:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc

        	    mixerQuery = 'a';
 800d33e:	f04f 0361 	mov.w	r3, #97	; 0x61
 800d342:	f88d 300a 	strb.w	r3, [sp, #10]
                validQuery = true;
 800d346:	f04f 0301 	mov.w	r3, #1
 800d34a:	f88d 3009 	strb.w	r3, [sp, #9]
                break;
 800d34e:	e093      	b.n	800d478 <mixerCLI+0x12d0>

            ///////////////////////////

            case 'M': // Read yaw direction
                tempFloat = readFloatUart1();
 800d350:	f7fb fd98 	bl	8008e84 <readFloatUart1>
 800d354:	9003      	str	r0, [sp, #12]
                if (tempFloat >= 0.0)
 800d356:	eddd 7a03 	vldr	s15, [sp, #12]
 800d35a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d362:	bfb4      	ite	lt
 800d364:	2300      	movlt	r3, #0
 800d366:	2301      	movge	r3, #1
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d002      	beq.n	800d374 <mixerCLI+0x11cc>
                    tempFloat = 1.0;
 800d36e:	4b43      	ldr	r3, [pc, #268]	; (800d47c <mixerCLI+0x12d4>)
 800d370:	9303      	str	r3, [sp, #12]
 800d372:	e001      	b.n	800d378 <mixerCLI+0x11d0>
                else
                	tempFloat = -1.0;
 800d374:	4b42      	ldr	r3, [pc, #264]	; (800d480 <mixerCLI+0x12d8>)
 800d376:	9303      	str	r3, [sp, #12]

                eepromConfig.yawDirection = tempFloat;
 800d378:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d37c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d380:	9a03      	ldr	r2, [sp, #12]
 800d382:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                mixerQuery = 'a';
 800d386:	f04f 0361 	mov.w	r3, #97	; 0x61
 800d38a:	f88d 300a 	strb.w	r3, [sp, #10]
                validQuery = true;
 800d38e:	f04f 0301 	mov.w	r3, #1
 800d392:	f88d 3009 	strb.w	r3, [sp, #9]
                break;
 800d396:	e06f      	b.n	800d478 <mixerCLI+0x12d0>

            ///////////////////////////

            case 'W': // Write EEPROM Parameters
                uart1Print("\nWriting EEPROM Parameters....\n\n");
 800d398:	f24c 4080 	movw	r0, #50304	; 0xc480
 800d39c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d3a0:	f7f9 fb3e 	bl	8006a20 <uart1Print>
                writeEEPROM();
 800d3a4:	f001 fab0 	bl	800e908 <writeEEPROM>
                break;
 800d3a8:	e066      	b.n	800d478 <mixerCLI+0x12d0>

			///////////////////////////

			case '?':
			   	uart1Print("\n");
 800d3aa:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800d3ae:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d3b2:	f7f9 fb35 	bl	8006a20 <uart1Print>
			   	uart1Print("'a' Mixer Configuration Data               'A' Set Mixer Configuration              A1 thru 21, see aq32Plus.h\n");
 800d3b6:	f64c 6028 	movw	r0, #52776	; 0xce28
 800d3ba:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d3be:	f7f9 fb2f 	bl	8006a20 <uart1Print>
   		        uart1Print("'b' Free Mixer Configuration               'B' Set PWM Rates                        BESC;Servo\n");
 800d3c2:	f64c 6098 	movw	r0, #52888	; 0xce98
 800d3c6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d3ca:	f7f9 fb29 	bl	8006a20 <uart1Print>
			   	uart1Print("                                           'C' Set BiCopter Left Servo Parameters   CMin;Mid;Max\n");
 800d3ce:	f64c 60f8 	movw	r0, #52984	; 0xcef8
 800d3d2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d3d6:	f7f9 fb23 	bl	8006a20 <uart1Print>
			   	uart1Print("                                           'D' Set BiCopter Right Servo Parameters  DMin;Mid;Max\n");
 800d3da:	f64c 705c 	movw	r0, #53084	; 0xcf5c
 800d3de:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d3e2:	f7f9 fb1d 	bl	8006a20 <uart1Print>
			   	uart1Print("                                           'E' Set Flying Wing Servo Directions     ERollLeft;RollRight;PitchLeft;PitchRight\n");
 800d3e6:	f64c 70c0 	movw	r0, #53184	; 0xcfc0
 800d3ea:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d3ee:	f7f9 fb17 	bl	8006a20 <uart1Print>
			   	uart1Print("                                           'F' Set Flying Wing Servo Limits         FLeftMin;LeftMax;RightMin;RightMax\n");
 800d3f2:	f24d 0040 	movw	r0, #53312	; 0xd040
 800d3f6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d3fa:	f7f9 fb11 	bl	8006a20 <uart1Print>
   		        uart1Print("                                           'G' Set Number of FreeMix Motors         GNumber\n");
 800d3fe:	f24d 00b8 	movw	r0, #53432	; 0xd0b8
 800d402:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d406:	f7f9 fb0b 	bl	8006a20 <uart1Print>
   		        uart1Print("                                           'H' Set FreeMix Matrix Element           HRow;Column;Element\n");
 800d40a:	f24d 1018 	movw	r0, #53528	; 0xd118
 800d40e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d412:	f7f9 fb05 	bl	8006a20 <uart1Print>
   		        uart1Print("                                           'I' Set Gimbal Roll Servo Parameters     IMin;Mid;Max;Gain\n");
 800d416:	f24d 1084 	movw	r0, #53636	; 0xd184
 800d41a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d41e:	f7f9 faff 	bl	8006a20 <uart1Print>
   		        uart1Print("                                           'J' Set Gimbal Pitch Servo Parameters    JMin;Mid;Max;Gain\n");
 800d422:	f24d 10ec 	movw	r0, #53740	; 0xd1ec
 800d426:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d42a:	f7f9 faf9 	bl	8006a20 <uart1Print>
   		        uart1Print("                                           'K' Set TriCopter Servo Parameters       KMin;Mid;Max\n");
 800d42e:	f24d 2054 	movw	r0, #53844	; 0xd254
 800d432:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d436:	f7f9 faf3 	bl	8006a20 <uart1Print>
   		        uart1Print("                                           'L' Set V Tail Angle                     LAngle\n");
 800d43a:	f24d 20b8 	movw	r0, #53944	; 0xd2b8
 800d43e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d442:	f7f9 faed 	bl	8006a20 <uart1Print>
   		        uart1Print("                                           'M' Set Yaw Direction                    M1 or M-1\n");
 800d446:	f24d 3014 	movw	r0, #54036	; 0xd314
 800d44a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d44e:	f7f9 fae7 	bl	8006a20 <uart1Print>
   		        uart1Print("                                           'W' Write EEPROM Parameters\n");
 800d452:	f24d 3074 	movw	r0, #54132	; 0xd374
 800d456:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d45a:	f7f9 fae1 	bl	8006a20 <uart1Print>
   		        uart1Print("'x' Exit Sensor CLI                        '?' Command Summary\n");
 800d45e:	f24c 700c 	movw	r0, #50956	; 0xc70c
 800d462:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d466:	f7f9 fadb 	bl	8006a20 <uart1Print>
   		        uart1Print("\n");
 800d46a:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800d46e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d472:	f7f9 fad5 	bl	8006a20 <uart1Print>
	    	    break;
 800d476:	bf00      	nop

	    	///////////////////////////
	    }
	}
 800d478:	f7fe beaa 	b.w	800c1d0 <mixerCLI+0x28>
 800d47c:	3f800000 	.word	0x3f800000
 800d480:	bf800000 	.word	0xbf800000

0800d484 <receiverCLI>:
///////////////////////////////////////////////////////////////////////////////
// Receiver CLI
///////////////////////////////////////////////////////////////////////////////

void receiverCLI()
{
 800d484:	b500      	push	{lr}
 800d486:	b089      	sub	sp, #36	; 0x24
    char     rcOrderString[9];
    float    tempFloat;
    uint8_t  index;
    uint8_t  receiverQuery;
    uint8_t  validQuery = false;
 800d488:	f04f 0300 	mov.w	r3, #0
 800d48c:	f88d 301d 	strb.w	r3, [sp, #29]

    cliBusy = true;
 800d490:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800d494:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d498:	f04f 0201 	mov.w	r2, #1
 800d49c:	701a      	strb	r2, [r3, #0]

    uart1Print("\nEntering Receiver CLI....\n\n");
 800d49e:	f24d 30bc 	movw	r0, #54204	; 0xd3bc
 800d4a2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d4a6:	f7f9 fabb 	bl	8006a20 <uart1Print>
 800d4aa:	e000      	b.n	800d4ae <receiverCLI+0x2a>
			   	uart1Print("\n");
	    	    break;

	    	///////////////////////////
	    }
	}
 800d4ac:	bf00      	nop

    uart1Print("\nEntering Receiver CLI....\n\n");

    while(true)
    {
        uart1Print("Receiver CLI -> ");
 800d4ae:	f24d 30dc 	movw	r0, #54236	; 0xd3dc
 800d4b2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d4b6:	f7f9 fab3 	bl	8006a20 <uart1Print>

		while ((uart1Available() == false) && (validQuery == false));
 800d4ba:	bf00      	nop
 800d4bc:	f7f9 fa32 	bl	8006924 <uart1Available>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d103      	bne.n	800d4ce <receiverCLI+0x4a>
 800d4c6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d0f6      	beq.n	800d4bc <receiverCLI+0x38>

		if (validQuery == false)
 800d4ce:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d104      	bne.n	800d4e0 <receiverCLI+0x5c>
		    receiverQuery = uart1Read();
 800d4d6:	f7f9 fa3b 	bl	8006950 <uart1Read>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	f88d 301e 	strb.w	r3, [sp, #30]

		uart1Print("\n");
 800d4e0:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800d4e4:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d4e8:	f7f9 fa9a 	bl	8006a20 <uart1Print>

		switch(receiverQuery)
 800d4ec:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d4f0:	f1a3 033f 	sub.w	r3, r3, #63	; 0x3f
 800d4f4:	2b39      	cmp	r3, #57	; 0x39
 800d4f6:	d8d9      	bhi.n	800d4ac <receiverCLI+0x28>
 800d4f8:	a001      	add	r0, pc, #4	; (adr r0, 800d500 <receiverCLI+0x7c>)
 800d4fa:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d4fe:	bf00      	nop
 800d500:	0800db67 	.word	0x0800db67
 800d504:	0800d4ad 	.word	0x0800d4ad
 800d508:	0800da17 	.word	0x0800da17
 800d50c:	0800da63 	.word	0x0800da63
 800d510:	0800da89 	.word	0x0800da89
 800d514:	0800dab9 	.word	0x0800dab9
 800d518:	0800dae9 	.word	0x0800dae9
 800d51c:	0800d4ad 	.word	0x0800d4ad
 800d520:	0800d4ad 	.word	0x0800d4ad
 800d524:	0800d4ad 	.word	0x0800d4ad
 800d528:	0800d4ad 	.word	0x0800d4ad
 800d52c:	0800d4ad 	.word	0x0800d4ad
 800d530:	0800d4ad 	.word	0x0800d4ad
 800d534:	0800d4ad 	.word	0x0800d4ad
 800d538:	0800d4ad 	.word	0x0800d4ad
 800d53c:	0800d4ad 	.word	0x0800d4ad
 800d540:	0800d4ad 	.word	0x0800d4ad
 800d544:	0800d4ad 	.word	0x0800d4ad
 800d548:	0800d4ad 	.word	0x0800d4ad
 800d54c:	0800d4ad 	.word	0x0800d4ad
 800d550:	0800d4ad 	.word	0x0800d4ad
 800d554:	0800d4ad 	.word	0x0800d4ad
 800d558:	0800d4ad 	.word	0x0800d4ad
 800d55c:	0800d4ad 	.word	0x0800d4ad
 800d560:	0800db55 	.word	0x0800db55
 800d564:	0800d4ad 	.word	0x0800d4ad
 800d568:	0800d4ad 	.word	0x0800d4ad
 800d56c:	0800d4ad 	.word	0x0800d4ad
 800d570:	0800d4ad 	.word	0x0800d4ad
 800d574:	0800d4ad 	.word	0x0800d4ad
 800d578:	0800d4ad 	.word	0x0800d4ad
 800d57c:	0800d4ad 	.word	0x0800d4ad
 800d580:	0800d4ad 	.word	0x0800d4ad
 800d584:	0800d4ad 	.word	0x0800d4ad
 800d588:	0800d5e9 	.word	0x0800d5e9
 800d58c:	0800d98d 	.word	0x0800d98d
 800d590:	0800d9c3 	.word	0x0800d9c3
 800d594:	0800d4ad 	.word	0x0800d4ad
 800d598:	0800d4ad 	.word	0x0800d4ad
 800d59c:	0800d4ad 	.word	0x0800d4ad
 800d5a0:	0800d4ad 	.word	0x0800d4ad
 800d5a4:	0800d4ad 	.word	0x0800d4ad
 800d5a8:	0800d4ad 	.word	0x0800d4ad
 800d5ac:	0800d4ad 	.word	0x0800d4ad
 800d5b0:	0800d4ad 	.word	0x0800d4ad
 800d5b4:	0800d4ad 	.word	0x0800d4ad
 800d5b8:	0800d4ad 	.word	0x0800d4ad
 800d5bc:	0800d4ad 	.word	0x0800d4ad
 800d5c0:	0800d4ad 	.word	0x0800d4ad
 800d5c4:	0800d4ad 	.word	0x0800d4ad
 800d5c8:	0800d4ad 	.word	0x0800d4ad
 800d5cc:	0800d4ad 	.word	0x0800d4ad
 800d5d0:	0800d4ad 	.word	0x0800d4ad
 800d5d4:	0800d4ad 	.word	0x0800d4ad
 800d5d8:	0800d4ad 	.word	0x0800d4ad
 800d5dc:	0800d4ad 	.word	0x0800d4ad
 800d5e0:	0800d4ad 	.word	0x0800d4ad
 800d5e4:	0800d9f9 	.word	0x0800d9f9
		{
            ///////////////////////////

            case 'a': // Receiver Configuration
                uart1Print("\nReceiver Type:                  ");
 800d5e8:	f24d 30f0 	movw	r0, #54256	; 0xd3f0
 800d5ec:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d5f0:	f7f9 fa16 	bl	8006a20 <uart1Print>
                switch(eepromConfig.receiverType)
 800d5f4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d5f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d5fc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800d600:	2b02      	cmp	r3, #2
 800d602:	d00a      	beq.n	800d61a <receiverCLI+0x196>
 800d604:	2b03      	cmp	r3, #3
 800d606:	d00f      	beq.n	800d628 <receiverCLI+0x1a4>
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d114      	bne.n	800d636 <receiverCLI+0x1b2>
                {
                    case PARALLEL_PWM:
                        uart1Print("Parallel\n");
 800d60c:	f24d 4014 	movw	r0, #54292	; 0xd414
 800d610:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d614:	f7f9 fa04 	bl	8006a20 <uart1Print>
                        break;
 800d618:	e00d      	b.n	800d636 <receiverCLI+0x1b2>
                    case SERIAL_PWM:
                        uart1Print("Serial\n");
 800d61a:	f24d 4020 	movw	r0, #54304	; 0xd420
 800d61e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d622:	f7f9 f9fd 	bl	8006a20 <uart1Print>
                        break;
 800d626:	e006      	b.n	800d636 <receiverCLI+0x1b2>
                    case SPEKTRUM:
                        uart1Print("Spektrum\n");
 800d628:	f24d 4028 	movw	r0, #54312	; 0xd428
 800d62c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d630:	f7f9 f9f6 	bl	8006a20 <uart1Print>
                        break;
 800d634:	bf00      	nop
		        }

                uart1Print("Current RC Channel Assignment:  ");
 800d636:	f24d 4034 	movw	r0, #54324	; 0xd434
 800d63a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d63e:	f7f9 f9ef 	bl	8006a20 <uart1Print>
                for (index = 0; index < 8; index++)
 800d642:	f04f 0300 	mov.w	r3, #0
 800d646:	f88d 301f 	strb.w	r3, [sp, #31]
 800d64a:	e01a      	b.n	800d682 <receiverCLI+0x1fe>
                    rcOrderString[eepromConfig.rcMap[index]] = rcChannelLetters[index];
 800d64c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800d650:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d654:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d658:	189b      	adds	r3, r3, r2
 800d65a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800d65e:	4619      	mov	r1, r3
 800d660:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800d664:	f64d 53ec 	movw	r3, #56812	; 0xddec
 800d668:	f6c0 0302 	movt	r3, #2050	; 0x802
 800d66c:	5c9a      	ldrb	r2, [r3, r2]
 800d66e:	a808      	add	r0, sp, #32
 800d670:	1843      	adds	r3, r0, r1
 800d672:	f803 2c14 	strb.w	r2, [r3, #-20]
                        uart1Print("Spektrum\n");
                        break;
		        }

                uart1Print("Current RC Channel Assignment:  ");
                for (index = 0; index < 8; index++)
 800d676:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d67a:	f103 0301 	add.w	r3, r3, #1
 800d67e:	f88d 301f 	strb.w	r3, [sp, #31]
 800d682:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d686:	2b07      	cmp	r3, #7
 800d688:	d9e0      	bls.n	800d64c <receiverCLI+0x1c8>
                    rcOrderString[eepromConfig.rcMap[index]] = rcChannelLetters[index];

                rcOrderString[index] = '\0';
 800d68a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d68e:	aa08      	add	r2, sp, #32
 800d690:	18d3      	adds	r3, r2, r3
 800d692:	f04f 0200 	mov.w	r2, #0
 800d696:	f803 2c14 	strb.w	r2, [r3, #-20]

                uart1Print(rcOrderString);  uart1Print("\n");
 800d69a:	ab03      	add	r3, sp, #12
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7f9 f9bf 	bl	8006a20 <uart1Print>
 800d6a2:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800d6a6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d6aa:	f7f9 f9b9 	bl	8006a20 <uart1Print>

                uart1Print("Spektrum Resolution:            ");
 800d6ae:	f24d 4058 	movw	r0, #54360	; 0xd458
 800d6b2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d6b6:	f7f9 f9b3 	bl	8006a20 <uart1Print>
                if (eepromConfig.spektrumHires)
 800d6ba:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d6be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d6c2:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d006      	beq.n	800d6d8 <receiverCLI+0x254>
				    uart1Print("11 Bit Mode\n");
 800d6ca:	f24d 407c 	movw	r0, #54396	; 0xd47c
 800d6ce:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d6d2:	f7f9 f9a5 	bl	8006a20 <uart1Print>
 800d6d6:	e005      	b.n	800d6e4 <receiverCLI+0x260>
				else
				    uart1Print("10 Bit Mode\n");
 800d6d8:	f24d 408c 	movw	r0, #54412	; 0xd48c
 800d6dc:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d6e0:	f7f9 f99e 	bl	8006a20 <uart1Print>

				uart1Print("Number of Spektrum Channels:    ");
 800d6e4:	f24d 409c 	movw	r0, #54428	; 0xd49c
 800d6e8:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d6ec:	f7f9 f998 	bl	8006a20 <uart1Print>
				snprintf(numberString, 16, "%d\n", eepromConfig.spektrumChannels); uart1Print(numberString);
 800d6f0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d6f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d6f8:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800d6fc:	f643 3078 	movw	r0, #15224	; 0x3b78
 800d700:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d704:	f04f 0110 	mov.w	r1, #16
 800d708:	f24d 42c0 	movw	r2, #54464	; 0xd4c0
 800d70c:	f6c0 0202 	movt	r2, #2050	; 0x802
 800d710:	f013 ff1a 	bl	8021548 <snprintf>
 800d714:	f643 3078 	movw	r0, #15224	; 0x3b78
 800d718:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d71c:	f7f9 f980 	bl	8006a20 <uart1Print>

                uart1Print("Mid Command:                    ");
 800d720:	f24d 40c4 	movw	r0, #54468	; 0xd4c4
 800d724:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d728:	f7f9 f97a 	bl	8006a20 <uart1Print>
                snprintf(numberString, 16, "%d\n", (uint16_t)eepromConfig.midCommand); uart1Print(numberString);
 800d72c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d730:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d734:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800d738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d73c:	ee17 3a90 	vmov	r3, s15
 800d740:	b29b      	uxth	r3, r3
 800d742:	f643 3078 	movw	r0, #15224	; 0x3b78
 800d746:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d74a:	f04f 0110 	mov.w	r1, #16
 800d74e:	f24d 42c0 	movw	r2, #54464	; 0xd4c0
 800d752:	f6c0 0202 	movt	r2, #2050	; 0x802
 800d756:	f013 fef7 	bl	8021548 <snprintf>
 800d75a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800d75e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d762:	f7f9 f95d 	bl	8006a20 <uart1Print>

				uart1Print("Min Check:                      ");
 800d766:	f24d 40e8 	movw	r0, #54504	; 0xd4e8
 800d76a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d76e:	f7f9 f957 	bl	8006a20 <uart1Print>
                snprintf(numberString, 16, "%d\n", (uint16_t)eepromConfig.minCheck); uart1Print(numberString);
 800d772:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d776:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d77a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800d77e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d782:	ee17 3a90 	vmov	r3, s15
 800d786:	b29b      	uxth	r3, r3
 800d788:	f643 3078 	movw	r0, #15224	; 0x3b78
 800d78c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d790:	f04f 0110 	mov.w	r1, #16
 800d794:	f24d 42c0 	movw	r2, #54464	; 0xd4c0
 800d798:	f6c0 0202 	movt	r2, #2050	; 0x802
 800d79c:	f013 fed4 	bl	8021548 <snprintf>
 800d7a0:	f643 3078 	movw	r0, #15224	; 0x3b78
 800d7a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d7a8:	f7f9 f93a 	bl	8006a20 <uart1Print>

				uart1Print("Max Check:                      ");
 800d7ac:	f24d 500c 	movw	r0, #54540	; 0xd50c
 800d7b0:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d7b4:	f7f9 f934 	bl	8006a20 <uart1Print>
                snprintf(numberString, 16, "%d\n", (uint16_t)eepromConfig.maxCheck); uart1Print(numberString);
 800d7b8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d7bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d7c0:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800d7c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7c8:	ee17 3a90 	vmov	r3, s15
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	f643 3078 	movw	r0, #15224	; 0x3b78
 800d7d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d7d6:	f04f 0110 	mov.w	r1, #16
 800d7da:	f24d 42c0 	movw	r2, #54464	; 0xd4c0
 800d7de:	f6c0 0202 	movt	r2, #2050	; 0x802
 800d7e2:	f013 feb1 	bl	8021548 <snprintf>
 800d7e6:	f643 3078 	movw	r0, #15224	; 0x3b78
 800d7ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d7ee:	f7f9 f917 	bl	8006a20 <uart1Print>

				uart1Print("Min Throttle:                   ");
 800d7f2:	f24d 5030 	movw	r0, #54576	; 0xd530
 800d7f6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d7fa:	f7f9 f911 	bl	8006a20 <uart1Print>
                snprintf(numberString, 16, "%d\n", (uint16_t)eepromConfig.minThrottle); uart1Print(numberString);
 800d7fe:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d802:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d806:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800d80a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d80e:	ee17 3a90 	vmov	r3, s15
 800d812:	b29b      	uxth	r3, r3
 800d814:	f643 3078 	movw	r0, #15224	; 0x3b78
 800d818:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d81c:	f04f 0110 	mov.w	r1, #16
 800d820:	f24d 42c0 	movw	r2, #54464	; 0xd4c0
 800d824:	f6c0 0202 	movt	r2, #2050	; 0x802
 800d828:	f013 fe8e 	bl	8021548 <snprintf>
 800d82c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800d830:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d834:	f7f9 f8f4 	bl	8006a20 <uart1Print>

				uart1Print("Max Thottle:                    ");
 800d838:	f24d 5054 	movw	r0, #54612	; 0xd554
 800d83c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d840:	f7f9 f8ee 	bl	8006a20 <uart1Print>
                snprintf(numberString, 16, "%d\n\n", (uint16_t)eepromConfig.maxThrottle); uart1Print(numberString);
 800d844:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d848:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d84c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800d850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d854:	ee17 3a90 	vmov	r3, s15
 800d858:	b29b      	uxth	r3, r3
 800d85a:	f643 3078 	movw	r0, #15224	; 0x3b78
 800d85e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d862:	f04f 0110 	mov.w	r1, #16
 800d866:	f24d 5278 	movw	r2, #54648	; 0xd578
 800d86a:	f6c0 0202 	movt	r2, #2050	; 0x802
 800d86e:	f013 fe6b 	bl	8021548 <snprintf>
 800d872:	f643 3078 	movw	r0, #15224	; 0x3b78
 800d876:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d87a:	f7f9 f8d1 	bl	8006a20 <uart1Print>

				uart1Print("Max Rate Command:               ");
 800d87e:	f24d 5080 	movw	r0, #54656	; 0xd580
 800d882:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d886:	f7f9 f8cb 	bl	8006a20 <uart1Print>
				tempFloat = eepromConfig.rateScaling * 180000.0 / PI;
 800d88a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d88e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d894:	4618      	mov	r0, r3
 800d896:	f012 ff49 	bl	802072c <__aeabi_f2d>
 800d89a:	4602      	mov	r2, r0
 800d89c:	460b      	mov	r3, r1
 800d89e:	4610      	mov	r0, r2
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	a3cf      	add	r3, pc, #828	; (adr r3, 800dbe0 <receiverCLI+0x75c>)
 800d8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a8:	f012 ff94 	bl	80207d4 <__aeabi_dmul>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	4610      	mov	r0, r2
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	a3cc      	add	r3, pc, #816	; (adr r3, 800dbe8 <receiverCLI+0x764>)
 800d8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ba:	f013 f8b5 	bl	8020a28 <__aeabi_ddiv>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	4610      	mov	r0, r2
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	f013 fa1f 	bl	8020d08 <__aeabi_d2f>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	9306      	str	r3, [sp, #24]
				snprintf(numberString, 16, "%6.2f DPS\n", tempFloat); uart1Print(numberString);
 800d8ce:	9806      	ldr	r0, [sp, #24]
 800d8d0:	f012 ff2c 	bl	802072c <__aeabi_f2d>
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	460b      	mov	r3, r1
 800d8d8:	e9cd 2300 	strd	r2, r3, [sp]
 800d8dc:	f643 3078 	movw	r0, #15224	; 0x3b78
 800d8e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d8e4:	f04f 0110 	mov.w	r1, #16
 800d8e8:	f24d 52a4 	movw	r2, #54692	; 0xd5a4
 800d8ec:	f6c0 0202 	movt	r2, #2050	; 0x802
 800d8f0:	f013 fe2a 	bl	8021548 <snprintf>
 800d8f4:	f643 3078 	movw	r0, #15224	; 0x3b78
 800d8f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d8fc:	f7f9 f890 	bl	8006a20 <uart1Print>

				uart1Print("Max Attitude Command:           ");
 800d900:	f24d 50b0 	movw	r0, #54704	; 0xd5b0
 800d904:	f6c0 0002 	movt	r0, #2050	; 0x802
 800d908:	f7f9 f88a 	bl	8006a20 <uart1Print>
				tempFloat = eepromConfig.attitudeScaling * 180000.0 / PI;
 800d90c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d910:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d916:	4618      	mov	r0, r3
 800d918:	f012 ff08 	bl	802072c <__aeabi_f2d>
 800d91c:	4602      	mov	r2, r0
 800d91e:	460b      	mov	r3, r1
 800d920:	4610      	mov	r0, r2
 800d922:	4619      	mov	r1, r3
 800d924:	a3ae      	add	r3, pc, #696	; (adr r3, 800dbe0 <receiverCLI+0x75c>)
 800d926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92a:	f012 ff53 	bl	80207d4 <__aeabi_dmul>
 800d92e:	4602      	mov	r2, r0
 800d930:	460b      	mov	r3, r1
 800d932:	4610      	mov	r0, r2
 800d934:	4619      	mov	r1, r3
 800d936:	a3ac      	add	r3, pc, #688	; (adr r3, 800dbe8 <receiverCLI+0x764>)
 800d938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d93c:	f013 f874 	bl	8020a28 <__aeabi_ddiv>
 800d940:	4602      	mov	r2, r0
 800d942:	460b      	mov	r3, r1
 800d944:	4610      	mov	r0, r2
 800d946:	4619      	mov	r1, r3
 800d948:	f013 f9de 	bl	8020d08 <__aeabi_d2f>
 800d94c:	4603      	mov	r3, r0
 800d94e:	9306      	str	r3, [sp, #24]
				snprintf(numberString, 18, "%6.2f Degrees\n\n", tempFloat); uart1Print(numberString);
 800d950:	9806      	ldr	r0, [sp, #24]
 800d952:	f012 feeb 	bl	802072c <__aeabi_f2d>
 800d956:	4602      	mov	r2, r0
 800d958:	460b      	mov	r3, r1
 800d95a:	e9cd 2300 	strd	r2, r3, [sp]
 800d95e:	f643 3078 	movw	r0, #15224	; 0x3b78
 800d962:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d966:	f04f 0112 	mov.w	r1, #18
 800d96a:	f24d 52d4 	movw	r2, #54740	; 0xd5d4
 800d96e:	f6c0 0202 	movt	r2, #2050	; 0x802
 800d972:	f013 fde9 	bl	8021548 <snprintf>
 800d976:	f643 3078 	movw	r0, #15224	; 0x3b78
 800d97a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d97e:	f7f9 f84f 	bl	8006a20 <uart1Print>

				validQuery = false;
 800d982:	f04f 0300 	mov.w	r3, #0
 800d986:	f88d 301d 	strb.w	r3, [sp, #29]
                break;
 800d98a:	e123      	b.n	800dbd4 <receiverCLI+0x750>

            ///////////////////////////

            case 'b': // Read Max Rate Value
                eepromConfig.rateScaling = readFloatUart1() / 180000 * PI;
 800d98c:	f7fb fa7a 	bl	8008e84 <readFloatUart1>
 800d990:	ee07 0a10 	vmov	s14, r0
 800d994:	eddf 7a90 	vldr	s15, [pc, #576]	; 800dbd8 <receiverCLI+0x754>
 800d998:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800d99c:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 800dbdc <receiverCLI+0x758>
 800d9a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d9a4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d9a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d9ac:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

                receiverQuery = 'a';
 800d9b0:	f04f 0361 	mov.w	r3, #97	; 0x61
 800d9b4:	f88d 301e 	strb.w	r3, [sp, #30]
                validQuery = true;
 800d9b8:	f04f 0301 	mov.w	r3, #1
 800d9bc:	f88d 301d 	strb.w	r3, [sp, #29]
                break;
 800d9c0:	e108      	b.n	800dbd4 <receiverCLI+0x750>

            ///////////////////////////

            case 'c': // Read Max Attitude Value
                eepromConfig.attitudeScaling = readFloatUart1() / 180000 * PI;
 800d9c2:	f7fb fa5f 	bl	8008e84 <readFloatUart1>
 800d9c6:	ee07 0a10 	vmov	s14, r0
 800d9ca:	eddf 7a83 	vldr	s15, [pc, #524]	; 800dbd8 <receiverCLI+0x754>
 800d9ce:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800d9d2:	ed9f 7a82 	vldr	s14, [pc, #520]	; 800dbdc <receiverCLI+0x758>
 800d9d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d9da:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800d9de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d9e2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

                receiverQuery = 'a';
 800d9e6:	f04f 0361 	mov.w	r3, #97	; 0x61
 800d9ea:	f88d 301e 	strb.w	r3, [sp, #30]
                validQuery = true;
 800d9ee:	f04f 0301 	mov.w	r3, #1
 800d9f2:	f88d 301d 	strb.w	r3, [sp, #29]
                break;
 800d9f6:	e0ed      	b.n	800dbd4 <receiverCLI+0x750>

            ///////////////////////////

			case 'x':
			    uart1Print("\nExiting Receiver CLI....\n\n");
 800d9f8:	f24d 50e4 	movw	r0, #54756	; 0xd5e4
 800d9fc:	f6c0 0002 	movt	r0, #2050	; 0x802
 800da00:	f7f9 f80e 	bl	8006a20 <uart1Print>
			    cliBusy = false;
 800da04:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800da08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800da0c:	f04f 0200 	mov.w	r2, #0
 800da10:	701a      	strb	r2, [r3, #0]

	    	///////////////////////////
	    }
	}

}
 800da12:	b009      	add	sp, #36	; 0x24
 800da14:	bd00      	pop	{pc}
			    break;

            ///////////////////////////

            case 'A': // Read RX Input Type
                eepromConfig.receiverType = (uint8_t)readFloatUart1();
 800da16:	f7fb fa35 	bl	8008e84 <readFloatUart1>
 800da1a:	ee07 0a90 	vmov	s15, r0
 800da1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da22:	ee17 3a90 	vmov	r3, s15
 800da26:	b2da      	uxtb	r2, r3
 800da28:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800da2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800da30:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			    uart1Print( "\nReceiver Type Changed....\n");
 800da34:	f24d 6000 	movw	r0, #54784	; 0xd600
 800da38:	f6c0 0002 	movt	r0, #2050	; 0x802
 800da3c:	f7f8 fff0 	bl	8006a20 <uart1Print>

			    uart1Print("\nSystem Resetting....\n");
 800da40:	f24d 601c 	movw	r0, #54812	; 0xd61c
 800da44:	f6c0 0002 	movt	r0, #2050	; 0x802
 800da48:	f7f8 ffea 	bl	8006a20 <uart1Print>
			    delay(100);
 800da4c:	f04f 0064 	mov.w	r0, #100	; 0x64
 800da50:	f7f8 fb50 	bl	80060f4 <delay>
			    writeEEPROM();
 800da54:	f000 ff58 	bl	800e908 <writeEEPROM>
			    systemReset(false);
 800da58:	f04f 0000 	mov.w	r0, #0
 800da5c:	f7f8 fb60 	bl	8006120 <systemReset>

		        break;
 800da60:	e0b8      	b.n	800dbd4 <receiverCLI+0x750>

            ///////////////////////////

            case 'B': // Read RC Control Order
                readStringUart1( rcOrderString, 8 );
 800da62:	ab03      	add	r3, sp, #12
 800da64:	4618      	mov	r0, r3
 800da66:	f04f 0108 	mov.w	r1, #8
 800da6a:	f7fb f9b9 	bl	8008de0 <readStringUart1>
                parseRcChannels( rcOrderString );
 800da6e:	ab03      	add	r3, sp, #12
 800da70:	4618      	mov	r0, r3
 800da72:	f000 febd 	bl	800e7f0 <parseRcChannels>

          	    receiverQuery = 'a';
 800da76:	f04f 0361 	mov.w	r3, #97	; 0x61
 800da7a:	f88d 301e 	strb.w	r3, [sp, #30]
                validQuery = true;
 800da7e:	f04f 0301 	mov.w	r3, #1
 800da82:	f88d 301d 	strb.w	r3, [sp, #29]
        	    break;
 800da86:	e0a5      	b.n	800dbd4 <receiverCLI+0x750>

            ///////////////////////////

            case 'C': // Read Spektrum Resolution
                eepromConfig.spektrumHires = (uint8_t)readFloatUart1();
 800da88:	f7fb f9fc 	bl	8008e84 <readFloatUart1>
 800da8c:	ee07 0a90 	vmov	s15, r0
 800da90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da94:	ee17 3a90 	vmov	r3, s15
 800da98:	b2da      	uxtb	r2, r3
 800da9a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800da9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800daa2:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

                receiverQuery = 'a';
 800daa6:	f04f 0361 	mov.w	r3, #97	; 0x61
 800daaa:	f88d 301e 	strb.w	r3, [sp, #30]
                validQuery = true;
 800daae:	f04f 0301 	mov.w	r3, #1
 800dab2:	f88d 301d 	strb.w	r3, [sp, #29]
                break;
 800dab6:	e08d      	b.n	800dbd4 <receiverCLI+0x750>

            ///////////////////////////

            case 'D': // Read Number of Spektrum Channels
                eepromConfig.spektrumChannels = (uint8_t)readFloatUart1();
 800dab8:	f7fb f9e4 	bl	8008e84 <readFloatUart1>
 800dabc:	ee07 0a90 	vmov	s15, r0
 800dac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dac4:	ee17 3a90 	vmov	r3, s15
 800dac8:	b2da      	uxtb	r2, r3
 800daca:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800dace:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dad2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

                receiverQuery = 'a';
 800dad6:	f04f 0361 	mov.w	r3, #97	; 0x61
 800dada:	f88d 301e 	strb.w	r3, [sp, #30]
                validQuery = true;
 800dade:	f04f 0301 	mov.w	r3, #1
 800dae2:	f88d 301d 	strb.w	r3, [sp, #29]
                break;
 800dae6:	e075      	b.n	800dbd4 <receiverCLI+0x750>

            ///////////////////////////

            case 'E': // Read RC Control Points
                eepromConfig.midCommand   = readFloatUart1();
 800dae8:	f7fb f9cc 	bl	8008e84 <readFloatUart1>
 800daec:	4602      	mov	r2, r0
 800daee:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800daf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800daf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    	        eepromConfig.minCheck     = readFloatUart1();
 800dafa:	f7fb f9c3 	bl	8008e84 <readFloatUart1>
 800dafe:	4602      	mov	r2, r0
 800db00:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800db04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800db08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    		    eepromConfig.maxCheck     = readFloatUart1();
 800db0c:	f7fb f9ba 	bl	8008e84 <readFloatUart1>
 800db10:	4602      	mov	r2, r0
 800db12:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800db16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800db1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    		    eepromConfig.minThrottle  = readFloatUart1();
 800db1e:	f7fb f9b1 	bl	8008e84 <readFloatUart1>
 800db22:	4602      	mov	r2, r0
 800db24:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800db28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800db2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    		    eepromConfig.maxThrottle  = readFloatUart1();
 800db30:	f7fb f9a8 	bl	8008e84 <readFloatUart1>
 800db34:	4602      	mov	r2, r0
 800db36:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800db3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800db3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

                receiverQuery = 'a';
 800db42:	f04f 0361 	mov.w	r3, #97	; 0x61
 800db46:	f88d 301e 	strb.w	r3, [sp, #30]
                validQuery = true;
 800db4a:	f04f 0301 	mov.w	r3, #1
 800db4e:	f88d 301d 	strb.w	r3, [sp, #29]
                break;
 800db52:	e03f      	b.n	800dbd4 <receiverCLI+0x750>

            ///////////////////////////

            case 'W': // Write EEPROM Parameters
                uart1Print("\nWriting EEPROM Parameters....\n\n");
 800db54:	f24c 4080 	movw	r0, #50304	; 0xc480
 800db58:	f6c0 0002 	movt	r0, #2050	; 0x802
 800db5c:	f7f8 ff60 	bl	8006a20 <uart1Print>
                writeEEPROM();
 800db60:	f000 fed2 	bl	800e908 <writeEEPROM>
                break;
 800db64:	e036      	b.n	800dbd4 <receiverCLI+0x750>

			///////////////////////////

			case '?':
			   	uart1Print("\n");
 800db66:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800db6a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800db6e:	f7f8 ff57 	bl	8006a20 <uart1Print>
			   	uart1Print("'a' Receiver Configuration Data            'A' Set RX Input Type                    AX, 1=Parallel, 2=Serial, 3=Spektrum\n");
 800db72:	f24d 6034 	movw	r0, #54836	; 0xd634
 800db76:	f6c0 0002 	movt	r0, #2050	; 0x802
 800db7a:	f7f8 ff51 	bl	8006a20 <uart1Print>
   		        uart1Print("'b' Set Maximum Rate Command               'B' Set RC Control Order                 BTAER1234\n");
 800db7e:	f24d 60b0 	movw	r0, #54960	; 0xd6b0
 800db82:	f6c0 0002 	movt	r0, #2050	; 0x802
 800db86:	f7f8 ff4b 	bl	8006a20 <uart1Print>
			   	uart1Print("'c' Set Maximum Attitude Command           'C' Set Spektrum Resolution              C0 or C1\n");
 800db8a:	f24d 7010 	movw	r0, #55056	; 0xd710
 800db8e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800db92:	f7f8 ff45 	bl	8006a20 <uart1Print>
			   	uart1Print("                                           'D' Set Number of Spektrum Channels      D6 thru D12\n");
 800db96:	f24d 7070 	movw	r0, #55152	; 0xd770
 800db9a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800db9e:	f7f8 ff3f 	bl	8006a20 <uart1Print>
			   	uart1Print("                                           'E' Set RC Control Points                EmidCmd;minChk;maxChk;minThrot;maxThrot\n");
 800dba2:	f24d 70d4 	movw	r0, #55252	; 0xd7d4
 800dba6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800dbaa:	f7f8 ff39 	bl	8006a20 <uart1Print>
			   	uart1Print("                                           'W' Write EEPROM Parameters\n");
 800dbae:	f24d 3074 	movw	r0, #54132	; 0xd374
 800dbb2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800dbb6:	f7f8 ff33 	bl	8006a20 <uart1Print>
			   	uart1Print("'x' Exit Receiver CLI                      '?' Command Summary\n");
 800dbba:	f64d 0054 	movw	r0, #55380	; 0xd854
 800dbbe:	f6c0 0002 	movt	r0, #2050	; 0x802
 800dbc2:	f7f8 ff2d 	bl	8006a20 <uart1Print>
			   	uart1Print("\n");
 800dbc6:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800dbca:	f6c0 0002 	movt	r0, #2050	; 0x802
 800dbce:	f7f8 ff27 	bl	8006a20 <uart1Print>
	    	    break;
 800dbd2:	bf00      	nop

	    	///////////////////////////
	    }
	}
 800dbd4:	e46a      	b.n	800d4ac <receiverCLI+0x28>
 800dbd6:	bf00      	nop
 800dbd8:	482fc800 	.word	0x482fc800
 800dbdc:	40490fdb 	.word	0x40490fdb
 800dbe0:	00000000 	.word	0x00000000
 800dbe4:	4105f900 	.word	0x4105f900
 800dbe8:	60000000 	.word	0x60000000
 800dbec:	400921fb 	.word	0x400921fb

0800dbf0 <sensorCLI>:
///////////////////////////////////////////////////////////////////////////////
// Sensor CLI
///////////////////////////////////////////////////////////////////////////////

void sensorCLI()
{
 800dbf0:	b500      	push	{lr}
 800dbf2:	b085      	sub	sp, #20
    uint8_t  sensorQuery;
    // HJI uint8_t  tempInt;
    uint8_t  validQuery = false;
 800dbf4:	f04f 0300 	mov.w	r3, #0
 800dbf8:	f88d 300e 	strb.w	r3, [sp, #14]

    cliBusy = true;
 800dbfc:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800dc00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dc04:	f04f 0201 	mov.w	r2, #1
 800dc08:	701a      	strb	r2, [r3, #0]

    uart1Print("\nEntering Sensor CLI....\n\n");
 800dc0a:	f64d 0094 	movw	r0, #55444	; 0xd894
 800dc0e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800dc12:	f7f8 ff05 	bl	8006a20 <uart1Print>
 800dc16:	e000      	b.n	800dc1a <sensorCLI+0x2a>
			    uart1Print("\n");
	    	    break;

	    	///////////////////////////
	    }
	}
 800dc18:	bf00      	nop

    uart1Print("\nEntering Sensor CLI....\n\n");

    while(true)
    {
        uart1Print("Sensor CLI -> ");
 800dc1a:	f64d 00b0 	movw	r0, #55472	; 0xd8b0
 800dc1e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800dc22:	f7f8 fefd 	bl	8006a20 <uart1Print>

		while ((uart1Available() == false) && (validQuery == false));
 800dc26:	bf00      	nop
 800dc28:	f7f8 fe7c 	bl	8006924 <uart1Available>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d103      	bne.n	800dc3a <sensorCLI+0x4a>
 800dc32:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d0f6      	beq.n	800dc28 <sensorCLI+0x38>

		if (validQuery == false)
 800dc3a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d104      	bne.n	800dc4c <sensorCLI+0x5c>
		    sensorQuery = uart1Read();
 800dc42:	f7f8 fe85 	bl	8006950 <uart1Read>
 800dc46:	4603      	mov	r3, r0
 800dc48:	f88d 300f 	strb.w	r3, [sp, #15]

		uart1Print("\n");
 800dc4c:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800dc50:	f6c0 0002 	movt	r0, #2050	; 0x802
 800dc54:	f7f8 fee4 	bl	8006a20 <uart1Print>

		switch(sensorQuery)
 800dc58:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800dc5c:	f1a3 033f 	sub.w	r3, r3, #63	; 0x3f
 800dc60:	2b39      	cmp	r3, #57	; 0x39
 800dc62:	d8d9      	bhi.n	800dc18 <sensorCLI+0x28>
 800dc64:	a201      	add	r2, pc, #4	; (adr r2, 800dc6c <sensorCLI+0x7c>)
 800dc66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc6a:	bf00      	nop
 800dc6c:	0800e17f 	.word	0x0800e17f
 800dc70:	0800dc19 	.word	0x0800dc19
 800dc74:	0800dc19 	.word	0x0800dc19
 800dc78:	0800e0b5 	.word	0x0800e0b5
 800dc7c:	0800e0d7 	.word	0x0800e0d7
 800dc80:	0800e109 	.word	0x0800e109
 800dc84:	0800e13b 	.word	0x0800e13b
 800dc88:	0800dc19 	.word	0x0800dc19
 800dc8c:	0800dc19 	.word	0x0800dc19
 800dc90:	0800dc19 	.word	0x0800dc19
 800dc94:	0800dc19 	.word	0x0800dc19
 800dc98:	0800dc19 	.word	0x0800dc19
 800dc9c:	0800dc19 	.word	0x0800dc19
 800dca0:	0800dc19 	.word	0x0800dc19
 800dca4:	0800dc19 	.word	0x0800dc19
 800dca8:	0800dc19 	.word	0x0800dc19
 800dcac:	0800dc19 	.word	0x0800dc19
 800dcb0:	0800dc19 	.word	0x0800dc19
 800dcb4:	0800dc19 	.word	0x0800dc19
 800dcb8:	0800dc19 	.word	0x0800dc19
 800dcbc:	0800dc19 	.word	0x0800dc19
 800dcc0:	0800dc19 	.word	0x0800dc19
 800dcc4:	0800dc19 	.word	0x0800dc19
 800dcc8:	0800dc19 	.word	0x0800dc19
 800dccc:	0800e16d 	.word	0x0800e16d
 800dcd0:	0800dc19 	.word	0x0800dc19
 800dcd4:	0800dc19 	.word	0x0800dc19
 800dcd8:	0800dc19 	.word	0x0800dc19
 800dcdc:	0800dc19 	.word	0x0800dc19
 800dce0:	0800dc19 	.word	0x0800dc19
 800dce4:	0800dc19 	.word	0x0800dc19
 800dce8:	0800dc19 	.word	0x0800dc19
 800dcec:	0800dc19 	.word	0x0800dc19
 800dcf0:	0800dc19 	.word	0x0800dc19
 800dcf4:	0800dd55 	.word	0x0800dd55
 800dcf8:	0800e06b 	.word	0x0800e06b
 800dcfc:	0800e081 	.word	0x0800e081
 800dd00:	0800dc19 	.word	0x0800dc19
 800dd04:	0800dc19 	.word	0x0800dc19
 800dd08:	0800dc19 	.word	0x0800dc19
 800dd0c:	0800dc19 	.word	0x0800dc19
 800dd10:	0800dc19 	.word	0x0800dc19
 800dd14:	0800dc19 	.word	0x0800dc19
 800dd18:	0800dc19 	.word	0x0800dc19
 800dd1c:	0800dc19 	.word	0x0800dc19
 800dd20:	0800dc19 	.word	0x0800dc19
 800dd24:	0800dc19 	.word	0x0800dc19
 800dd28:	0800dc19 	.word	0x0800dc19
 800dd2c:	0800dc19 	.word	0x0800dc19
 800dd30:	0800dc19 	.word	0x0800dc19
 800dd34:	0800dc19 	.word	0x0800dc19
 800dd38:	0800dc19 	.word	0x0800dc19
 800dd3c:	0800dc19 	.word	0x0800dc19
 800dd40:	0800dc19 	.word	0x0800dc19
 800dd44:	0800dc19 	.word	0x0800dc19
 800dd48:	0800dc19 	.word	0x0800dc19
 800dd4c:	0800dc19 	.word	0x0800dc19
 800dd50:	0800e097 	.word	0x0800e097
		{
            ///////////////////////////

            case 'a': // Sensor Data
                uart1Print("\n");
 800dd54:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800dd58:	f6c0 0002 	movt	r0, #2050	; 0x802
 800dd5c:	f7f8 fe60 	bl	8006a20 <uart1Print>

                uart1Print("Accel One G:               ");
 800dd60:	f64d 00c0 	movw	r0, #55488	; 0xd8c0
 800dd64:	f6c0 0002 	movt	r0, #2050	; 0x802
 800dd68:	f7f8 fe5a 	bl	8006a20 <uart1Print>
                snprintf(numberString, 16, "%9.4f\n", accelOneG); uart1Print(numberString);
 800dd6c:	f240 0300 	movw	r3, #0
 800dd70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	4618      	mov	r0, r3
 800dd78:	f012 fcd8 	bl	802072c <__aeabi_f2d>
 800dd7c:	4602      	mov	r2, r0
 800dd7e:	460b      	mov	r3, r1
 800dd80:	e9cd 2300 	strd	r2, r3, [sp]
 800dd84:	f643 3078 	movw	r0, #15224	; 0x3b78
 800dd88:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800dd8c:	f04f 0110 	mov.w	r1, #16
 800dd90:	f64d 02dc 	movw	r2, #55516	; 0xd8dc
 800dd94:	f6c0 0202 	movt	r2, #2050	; 0x802
 800dd98:	f013 fbd6 	bl	8021548 <snprintf>
 800dd9c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800dda0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800dda4:	f7f8 fe3c 	bl	8006a20 <uart1Print>

                uart1Print("Mag Bias:                  ");
 800dda8:	f64d 00e4 	movw	r0, #55524	; 0xd8e4
 800ddac:	f6c0 0002 	movt	r0, #2050	; 0x802
 800ddb0:	f7f8 fe36 	bl	8006a20 <uart1Print>
                snprintf(numberString, 16, "%9.4f, ", eepromConfig.magBias[XAXIS]); uart1Print(numberString);
 800ddb4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ddb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ddbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f012 fcb4 	bl	802072c <__aeabi_f2d>
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	460b      	mov	r3, r1
 800ddc8:	e9cd 2300 	strd	r2, r3, [sp]
 800ddcc:	f643 3078 	movw	r0, #15224	; 0x3b78
 800ddd0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ddd4:	f04f 0110 	mov.w	r1, #16
 800ddd8:	f64d 1200 	movw	r2, #55552	; 0xd900
 800dddc:	f6c0 0202 	movt	r2, #2050	; 0x802
 800dde0:	f013 fbb2 	bl	8021548 <snprintf>
 800dde4:	f643 3078 	movw	r0, #15224	; 0x3b78
 800dde8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ddec:	f7f8 fe18 	bl	8006a20 <uart1Print>
                snprintf(numberString, 16, "%9.4f, ", eepromConfig.magBias[YAXIS]); uart1Print(numberString);
 800ddf0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ddf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ddf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f012 fc96 	bl	802072c <__aeabi_f2d>
 800de00:	4602      	mov	r2, r0
 800de02:	460b      	mov	r3, r1
 800de04:	e9cd 2300 	strd	r2, r3, [sp]
 800de08:	f643 3078 	movw	r0, #15224	; 0x3b78
 800de0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800de10:	f04f 0110 	mov.w	r1, #16
 800de14:	f64d 1200 	movw	r2, #55552	; 0xd900
 800de18:	f6c0 0202 	movt	r2, #2050	; 0x802
 800de1c:	f013 fb94 	bl	8021548 <snprintf>
 800de20:	f643 3078 	movw	r0, #15224	; 0x3b78
 800de24:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800de28:	f7f8 fdfa 	bl	8006a20 <uart1Print>
                snprintf(numberString, 16, "%9.4f\n", eepromConfig.magBias[ZAXIS]); uart1Print(numberString);
 800de2c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800de30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800de34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de36:	4618      	mov	r0, r3
 800de38:	f012 fc78 	bl	802072c <__aeabi_f2d>
 800de3c:	4602      	mov	r2, r0
 800de3e:	460b      	mov	r3, r1
 800de40:	e9cd 2300 	strd	r2, r3, [sp]
 800de44:	f643 3078 	movw	r0, #15224	; 0x3b78
 800de48:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800de4c:	f04f 0110 	mov.w	r1, #16
 800de50:	f64d 02dc 	movw	r2, #55516	; 0xd8dc
 800de54:	f6c0 0202 	movt	r2, #2050	; 0x802
 800de58:	f013 fb76 	bl	8021548 <snprintf>
 800de5c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800de60:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800de64:	f7f8 fddc 	bl	8006a20 <uart1Print>

                uart1Print("Accel Cutoff:              ");
 800de68:	f64d 1008 	movw	r0, #55560	; 0xd908
 800de6c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800de70:	f7f8 fdd6 	bl	8006a20 <uart1Print>
                snprintf(numberString, 16, "%9.4f\n", eepromConfig.accelCutoff); uart1Print(numberString);
 800de74:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800de78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800de7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de7e:	4618      	mov	r0, r3
 800de80:	f012 fc54 	bl	802072c <__aeabi_f2d>
 800de84:	4602      	mov	r2, r0
 800de86:	460b      	mov	r3, r1
 800de88:	e9cd 2300 	strd	r2, r3, [sp]
 800de8c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800de90:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800de94:	f04f 0110 	mov.w	r1, #16
 800de98:	f64d 02dc 	movw	r2, #55516	; 0xd8dc
 800de9c:	f6c0 0202 	movt	r2, #2050	; 0x802
 800dea0:	f013 fb52 	bl	8021548 <snprintf>
 800dea4:	f643 3078 	movw	r0, #15224	; 0x3b78
 800dea8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800deac:	f7f8 fdb8 	bl	8006a20 <uart1Print>

                uart1Print("KpAcc (MARG):              ");
 800deb0:	f64d 1024 	movw	r0, #55588	; 0xd924
 800deb4:	f6c0 0002 	movt	r0, #2050	; 0x802
 800deb8:	f7f8 fdb2 	bl	8006a20 <uart1Print>
                snprintf(numberString, 16, "%9.4f\n", eepromConfig.KpAcc); uart1Print(numberString);
 800debc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800dec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dec6:	4618      	mov	r0, r3
 800dec8:	f012 fc30 	bl	802072c <__aeabi_f2d>
 800decc:	4602      	mov	r2, r0
 800dece:	460b      	mov	r3, r1
 800ded0:	e9cd 2300 	strd	r2, r3, [sp]
 800ded4:	f643 3078 	movw	r0, #15224	; 0x3b78
 800ded8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800dedc:	f04f 0110 	mov.w	r1, #16
 800dee0:	f64d 02dc 	movw	r2, #55516	; 0xd8dc
 800dee4:	f6c0 0202 	movt	r2, #2050	; 0x802
 800dee8:	f013 fb2e 	bl	8021548 <snprintf>
 800deec:	f643 3078 	movw	r0, #15224	; 0x3b78
 800def0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800def4:	f7f8 fd94 	bl	8006a20 <uart1Print>

                uart1Print("KiAcc (MARG):              ");
 800def8:	f64d 1040 	movw	r0, #55616	; 0xd940
 800defc:	f6c0 0002 	movt	r0, #2050	; 0x802
 800df00:	f7f8 fd8e 	bl	8006a20 <uart1Print>
                snprintf(numberString, 16, "%9.4f\n", eepromConfig.KiAcc); uart1Print(numberString);
 800df04:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800df08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df0e:	4618      	mov	r0, r3
 800df10:	f012 fc0c 	bl	802072c <__aeabi_f2d>
 800df14:	4602      	mov	r2, r0
 800df16:	460b      	mov	r3, r1
 800df18:	e9cd 2300 	strd	r2, r3, [sp]
 800df1c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800df20:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800df24:	f04f 0110 	mov.w	r1, #16
 800df28:	f64d 02dc 	movw	r2, #55516	; 0xd8dc
 800df2c:	f6c0 0202 	movt	r2, #2050	; 0x802
 800df30:	f013 fb0a 	bl	8021548 <snprintf>
 800df34:	f643 3078 	movw	r0, #15224	; 0x3b78
 800df38:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800df3c:	f7f8 fd70 	bl	8006a20 <uart1Print>

                uart1Print("KpMag (MARG):              ");
 800df40:	f64d 105c 	movw	r0, #55644	; 0xd95c
 800df44:	f6c0 0002 	movt	r0, #2050	; 0x802
 800df48:	f7f8 fd6a 	bl	8006a20 <uart1Print>
                snprintf(numberString, 16, "%9.4f\n", eepromConfig.KpMag); uart1Print(numberString);
 800df4c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800df50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df56:	4618      	mov	r0, r3
 800df58:	f012 fbe8 	bl	802072c <__aeabi_f2d>
 800df5c:	4602      	mov	r2, r0
 800df5e:	460b      	mov	r3, r1
 800df60:	e9cd 2300 	strd	r2, r3, [sp]
 800df64:	f643 3078 	movw	r0, #15224	; 0x3b78
 800df68:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800df6c:	f04f 0110 	mov.w	r1, #16
 800df70:	f64d 02dc 	movw	r2, #55516	; 0xd8dc
 800df74:	f6c0 0202 	movt	r2, #2050	; 0x802
 800df78:	f013 fae6 	bl	8021548 <snprintf>
 800df7c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800df80:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800df84:	f7f8 fd4c 	bl	8006a20 <uart1Print>

                uart1Print("KiMag (MARG):              ");
 800df88:	f64d 1078 	movw	r0, #55672	; 0xd978
 800df8c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800df90:	f7f8 fd46 	bl	8006a20 <uart1Print>
                snprintf(numberString, 16, "%9.4f\n", eepromConfig.KiMag); uart1Print(numberString);
 800df94:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800df98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f012 fbc4 	bl	802072c <__aeabi_f2d>
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	e9cd 2300 	strd	r2, r3, [sp]
 800dfac:	f643 3078 	movw	r0, #15224	; 0x3b78
 800dfb0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800dfb4:	f04f 0110 	mov.w	r1, #16
 800dfb8:	f64d 02dc 	movw	r2, #55516	; 0xd8dc
 800dfbc:	f6c0 0202 	movt	r2, #2050	; 0x802
 800dfc0:	f013 fac2 	bl	8021548 <snprintf>
 800dfc4:	f643 3078 	movw	r0, #15224	; 0x3b78
 800dfc8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800dfcc:	f7f8 fd28 	bl	8006a20 <uart1Print>

                uart1Print("hdot est/h est Comp Fil A: ");
 800dfd0:	f64d 1094 	movw	r0, #55700	; 0xd994
 800dfd4:	f6c0 0002 	movt	r0, #2050	; 0x802
 800dfd8:	f7f8 fd22 	bl	8006a20 <uart1Print>
                snprintf(numberString, 16, "%9.4f\n", eepromConfig.compFilterA); uart1Print(numberString);
 800dfdc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800dfe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dfe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f012 fba0 	bl	802072c <__aeabi_f2d>
 800dfec:	4602      	mov	r2, r0
 800dfee:	460b      	mov	r3, r1
 800dff0:	e9cd 2300 	strd	r2, r3, [sp]
 800dff4:	f643 3078 	movw	r0, #15224	; 0x3b78
 800dff8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800dffc:	f04f 0110 	mov.w	r1, #16
 800e000:	f64d 02dc 	movw	r2, #55516	; 0xd8dc
 800e004:	f6c0 0202 	movt	r2, #2050	; 0x802
 800e008:	f013 fa9e 	bl	8021548 <snprintf>
 800e00c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800e010:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800e014:	f7f8 fd04 	bl	8006a20 <uart1Print>

                uart1Print("hdot est/h est Comp Fil B: ");
 800e018:	f64d 10b0 	movw	r0, #55728	; 0xd9b0
 800e01c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e020:	f7f8 fcfe 	bl	8006a20 <uart1Print>
                snprintf(numberString, 16, "%9.4f\n\n", eepromConfig.compFilterB); uart1Print(numberString);
 800e024:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e028:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e02c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e02e:	4618      	mov	r0, r3
 800e030:	f012 fb7c 	bl	802072c <__aeabi_f2d>
 800e034:	4602      	mov	r2, r0
 800e036:	460b      	mov	r3, r1
 800e038:	e9cd 2300 	strd	r2, r3, [sp]
 800e03c:	f643 3078 	movw	r0, #15224	; 0x3b78
 800e040:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800e044:	f04f 0110 	mov.w	r1, #16
 800e048:	f64d 12cc 	movw	r2, #55756	; 0xd9cc
 800e04c:	f6c0 0202 	movt	r2, #2050	; 0x802
 800e050:	f013 fa7a 	bl	8021548 <snprintf>
 800e054:	f643 3078 	movw	r0, #15224	; 0x3b78
 800e058:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800e05c:	f7f8 fce0 	bl	8006a20 <uart1Print>

                validQuery = false;
 800e060:	f04f 0300 	mov.w	r3, #0
 800e064:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
 800e068:	e0c0      	b.n	800e1ec <sensorCLI+0x5fc>

            ///////////////////////////

            case 'b': // Accel Calibration
                accelCalibration();
 800e06a:	f7f8 fced 	bl	8006a48 <accelCalibration>

                sensorQuery = 'a';
 800e06e:	f04f 0361 	mov.w	r3, #97	; 0x61
 800e072:	f88d 300f 	strb.w	r3, [sp, #15]
                validQuery = true;
 800e076:	f04f 0301 	mov.w	r3, #1
 800e07a:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
 800e07e:	e0b5      	b.n	800e1ec <sensorCLI+0x5fc>

            ///////////////////////////

            case 'c': // Magnetometer Calibration
                magCalibration();
 800e080:	f7f9 fac4 	bl	800760c <magCalibration>

                sensorQuery = 'a';
 800e084:	f04f 0361 	mov.w	r3, #97	; 0x61
 800e088:	f88d 300f 	strb.w	r3, [sp, #15]
                validQuery = true;
 800e08c:	f04f 0301 	mov.w	r3, #1
 800e090:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
 800e094:	e0aa      	b.n	800e1ec <sensorCLI+0x5fc>

			///////////////////////////

			case 'x':
			    uart1Print("\nExiting Sensor CLI....\n\n");
 800e096:	f64d 10d4 	movw	r0, #55764	; 0xd9d4
 800e09a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e09e:	f7f8 fcbf 	bl	8006a20 <uart1Print>
			    cliBusy = false;
 800e0a2:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800e0a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e0aa:	f04f 0200 	mov.w	r2, #0
 800e0ae:	701a      	strb	r2, [r3, #0]

	    	///////////////////////////
	    }
	}

}
 800e0b0:	b005      	add	sp, #20
 800e0b2:	bd00      	pop	{pc}
			    break;

            ///////////////////////////

            case 'B': // Accel Cutoff
                eepromConfig.accelCutoff = readFloatUart1();
 800e0b4:	f7fa fee6 	bl	8008e84 <readFloatUart1>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e0be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e0c2:	641a      	str	r2, [r3, #64]	; 0x40

                sensorQuery = 'a';
 800e0c4:	f04f 0361 	mov.w	r3, #97	; 0x61
 800e0c8:	f88d 300f 	strb.w	r3, [sp, #15]
                validQuery = true;
 800e0cc:	f04f 0301 	mov.w	r3, #1
 800e0d0:	f88d 300e 	strb.w	r3, [sp, #14]
        	    break;
 800e0d4:	e08a      	b.n	800e1ec <sensorCLI+0x5fc>

            ///////////////////////////

            case 'C': // kpAcc, kiAcc
                eepromConfig.KpAcc = readFloatUart1();
 800e0d6:	f7fa fed5 	bl	8008e84 <readFloatUart1>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e0e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e0e4:	645a      	str	r2, [r3, #68]	; 0x44
                eepromConfig.KiAcc = readFloatUart1();
 800e0e6:	f7fa fecd 	bl	8008e84 <readFloatUart1>
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e0f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e0f4:	649a      	str	r2, [r3, #72]	; 0x48

                sensorQuery = 'a';
 800e0f6:	f04f 0361 	mov.w	r3, #97	; 0x61
 800e0fa:	f88d 300f 	strb.w	r3, [sp, #15]
                validQuery = true;
 800e0fe:	f04f 0301 	mov.w	r3, #1
 800e102:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
 800e106:	e071      	b.n	800e1ec <sensorCLI+0x5fc>

            ///////////////////////////

            case 'D': // kpMag, kiMag
                eepromConfig.KpMag = readFloatUart1();
 800e108:	f7fa febc 	bl	8008e84 <readFloatUart1>
 800e10c:	4602      	mov	r2, r0
 800e10e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e112:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e116:	64da      	str	r2, [r3, #76]	; 0x4c
                eepromConfig.KiMag = readFloatUart1();
 800e118:	f7fa feb4 	bl	8008e84 <readFloatUart1>
 800e11c:	4602      	mov	r2, r0
 800e11e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e122:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e126:	651a      	str	r2, [r3, #80]	; 0x50

                sensorQuery = 'a';
 800e128:	f04f 0361 	mov.w	r3, #97	; 0x61
 800e12c:	f88d 300f 	strb.w	r3, [sp, #15]
                validQuery = true;
 800e130:	f04f 0301 	mov.w	r3, #1
 800e134:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
 800e138:	e058      	b.n	800e1ec <sensorCLI+0x5fc>

            ///////////////////////////

            case 'E': // h dot est/h est Comp Filter A/B
                eepromConfig.compFilterA = readFloatUart1();
 800e13a:	f7fa fea3 	bl	8008e84 <readFloatUart1>
 800e13e:	4602      	mov	r2, r0
 800e140:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e144:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e148:	655a      	str	r2, [r3, #84]	; 0x54
                eepromConfig.compFilterB = readFloatUart1();
 800e14a:	f7fa fe9b 	bl	8008e84 <readFloatUart1>
 800e14e:	4602      	mov	r2, r0
 800e150:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e154:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e158:	659a      	str	r2, [r3, #88]	; 0x58

                sensorQuery = 'a';
 800e15a:	f04f 0361 	mov.w	r3, #97	; 0x61
 800e15e:	f88d 300f 	strb.w	r3, [sp, #15]
                validQuery = true;
 800e162:	f04f 0301 	mov.w	r3, #1
 800e166:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
 800e16a:	e03f      	b.n	800e1ec <sensorCLI+0x5fc>

            ///////////////////////////

            case 'W': // Write EEPROM Parameters
                uart1Print("\nWriting EEPROM Parameters....\n\n");
 800e16c:	f24c 4080 	movw	r0, #50304	; 0xc480
 800e170:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e174:	f7f8 fc54 	bl	8006a20 <uart1Print>
                writeEEPROM();
 800e178:	f000 fbc6 	bl	800e908 <writeEEPROM>
                break;
 800e17c:	e036      	b.n	800e1ec <sensorCLI+0x5fc>

			///////////////////////////

			case '?':
			   	uart1Print("\n");
 800e17e:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800e182:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e186:	f7f8 fc4b 	bl	8006a20 <uart1Print>
			   	uart1Print("'a' Display Sensor Data\n");
 800e18a:	f64d 10f0 	movw	r0, #55792	; 0xd9f0
 800e18e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e192:	f7f8 fc45 	bl	8006a20 <uart1Print>
			   	uart1Print("'b' Accel Calibration                      'B' Set Accel Cutoff                     BAccelCutoff\n");
 800e196:	f64d 200c 	movw	r0, #55820	; 0xda0c
 800e19a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e19e:	f7f8 fc3f 	bl	8006a20 <uart1Print>
			   	uart1Print("'c' Magnetometer Calibration               'C' Set kpAcc/kiAcc                      CKpAcc;KiAcc\n");
 800e1a2:	f64d 2070 	movw	r0, #55920	; 0xda70
 800e1a6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e1aa:	f7f8 fc39 	bl	8006a20 <uart1Print>
			   	uart1Print("                                           'D' Set kpMag/kiMag                      DKpMag;KiMag\n");
 800e1ae:	f64d 20d4 	movw	r0, #56020	; 0xdad4
 800e1b2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e1b6:	f7f8 fc33 	bl	8006a20 <uart1Print>
			   	uart1Print("                                           'E' Set h dot est/h est Comp Filter A/B  EA;B\n");
 800e1ba:	f64d 3038 	movw	r0, #56120	; 0xdb38
 800e1be:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e1c2:	f7f8 fc2d 	bl	8006a20 <uart1Print>
			   	uart1Print("                                           'W' Write EEPROM Parameters\n");
 800e1c6:	f24d 3074 	movw	r0, #54132	; 0xd374
 800e1ca:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e1ce:	f7f8 fc27 	bl	8006a20 <uart1Print>
			   	uart1Print("'x' Exit Sensor CLI                        '?' Command Summary\n");
 800e1d2:	f24c 700c 	movw	r0, #50956	; 0xc70c
 800e1d6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e1da:	f7f8 fc21 	bl	8006a20 <uart1Print>
			    uart1Print("\n");
 800e1de:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800e1e2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e1e6:	f7f8 fc1b 	bl	8006a20 <uart1Print>
	    	    break;
 800e1ea:	bf00      	nop

	    	///////////////////////////
	    }
	}
 800e1ec:	e514      	b.n	800dc18 <sensorCLI+0x28>
 800e1ee:	bf00      	nop

0800e1f0 <gpsCLI>:
///////////////////////////////////////////////////////////////////////////////
// GPS CLI
///////////////////////////////////////////////////////////////////////////////

void gpsCLI()
{
 800e1f0:	b500      	push	{lr}
 800e1f2:	b083      	sub	sp, #12
    uint8_t  gpsQuery;
    uint8_t  validQuery = false;
 800e1f4:	f04f 0300 	mov.w	r3, #0
 800e1f8:	f88d 3006 	strb.w	r3, [sp, #6]

    cliBusy = true;
 800e1fc:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800e200:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e204:	f04f 0201 	mov.w	r2, #1
 800e208:	701a      	strb	r2, [r3, #0]

    uart1Print("\nEntering GPS CLI....\n\n");
 800e20a:	f64d 3094 	movw	r0, #56212	; 0xdb94
 800e20e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e212:	f7f8 fc05 	bl	8006a20 <uart1Print>
 800e216:	e000      	b.n	800e21a <gpsCLI+0x2a>
			    uart1Print("\n");
	    	    break;

	    	///////////////////////////
	    }
	}
 800e218:	bf00      	nop

    uart1Print("\nEntering GPS CLI....\n\n");

    while(true)
    {
        uart1Print("GPS CLI -> ");
 800e21a:	f64d 30ac 	movw	r0, #56236	; 0xdbac
 800e21e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e222:	f7f8 fbfd 	bl	8006a20 <uart1Print>

		while ((uart1Available() == false) && (validQuery == false));
 800e226:	bf00      	nop
 800e228:	f7f8 fb7c 	bl	8006924 <uart1Available>
 800e22c:	4603      	mov	r3, r0
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d103      	bne.n	800e23a <gpsCLI+0x4a>
 800e232:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d0f6      	beq.n	800e228 <gpsCLI+0x38>

		if (validQuery == false)
 800e23a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d104      	bne.n	800e24c <gpsCLI+0x5c>
		    gpsQuery = uart1Read();
 800e242:	f7f8 fb85 	bl	8006950 <uart1Read>
 800e246:	4603      	mov	r3, r0
 800e248:	f88d 3007 	strb.w	r3, [sp, #7]

		uart1Print("\n");
 800e24c:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800e250:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e254:	f7f8 fbe4 	bl	8006a20 <uart1Print>

		switch(gpsQuery)
 800e258:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e25c:	f1a3 033f 	sub.w	r3, r3, #63	; 0x3f
 800e260:	2b39      	cmp	r3, #57	; 0x39
 800e262:	d8d9      	bhi.n	800e218 <gpsCLI+0x28>
 800e264:	a201      	add	r2, pc, #4	; (adr r2, 800e26c <gpsCLI+0x7c>)
 800e266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e26a:	bf00      	nop
 800e26c:	0800e48f 	.word	0x0800e48f
 800e270:	0800e219 	.word	0x0800e219
 800e274:	0800e3e9 	.word	0x0800e3e9
 800e278:	0800e40b 	.word	0x0800e40b
 800e27c:	0800e431 	.word	0x0800e431
 800e280:	0800e457 	.word	0x0800e457
 800e284:	0800e219 	.word	0x0800e219
 800e288:	0800e219 	.word	0x0800e219
 800e28c:	0800e219 	.word	0x0800e219
 800e290:	0800e219 	.word	0x0800e219
 800e294:	0800e219 	.word	0x0800e219
 800e298:	0800e219 	.word	0x0800e219
 800e29c:	0800e219 	.word	0x0800e219
 800e2a0:	0800e219 	.word	0x0800e219
 800e2a4:	0800e219 	.word	0x0800e219
 800e2a8:	0800e219 	.word	0x0800e219
 800e2ac:	0800e219 	.word	0x0800e219
 800e2b0:	0800e219 	.word	0x0800e219
 800e2b4:	0800e219 	.word	0x0800e219
 800e2b8:	0800e219 	.word	0x0800e219
 800e2bc:	0800e219 	.word	0x0800e219
 800e2c0:	0800e219 	.word	0x0800e219
 800e2c4:	0800e219 	.word	0x0800e219
 800e2c8:	0800e219 	.word	0x0800e219
 800e2cc:	0800e47d 	.word	0x0800e47d
 800e2d0:	0800e219 	.word	0x0800e219
 800e2d4:	0800e219 	.word	0x0800e219
 800e2d8:	0800e219 	.word	0x0800e219
 800e2dc:	0800e219 	.word	0x0800e219
 800e2e0:	0800e219 	.word	0x0800e219
 800e2e4:	0800e219 	.word	0x0800e219
 800e2e8:	0800e219 	.word	0x0800e219
 800e2ec:	0800e219 	.word	0x0800e219
 800e2f0:	0800e219 	.word	0x0800e219
 800e2f4:	0800e355 	.word	0x0800e355
 800e2f8:	0800e219 	.word	0x0800e219
 800e2fc:	0800e219 	.word	0x0800e219
 800e300:	0800e219 	.word	0x0800e219
 800e304:	0800e219 	.word	0x0800e219
 800e308:	0800e219 	.word	0x0800e219
 800e30c:	0800e219 	.word	0x0800e219
 800e310:	0800e219 	.word	0x0800e219
 800e314:	0800e219 	.word	0x0800e219
 800e318:	0800e219 	.word	0x0800e219
 800e31c:	0800e219 	.word	0x0800e219
 800e320:	0800e219 	.word	0x0800e219
 800e324:	0800e219 	.word	0x0800e219
 800e328:	0800e219 	.word	0x0800e219
 800e32c:	0800e219 	.word	0x0800e219
 800e330:	0800e219 	.word	0x0800e219
 800e334:	0800e219 	.word	0x0800e219
 800e338:	0800e219 	.word	0x0800e219
 800e33c:	0800e219 	.word	0x0800e219
 800e340:	0800e219 	.word	0x0800e219
 800e344:	0800e219 	.word	0x0800e219
 800e348:	0800e219 	.word	0x0800e219
 800e34c:	0800e219 	.word	0x0800e219
 800e350:	0800e3cb 	.word	0x0800e3cb
		{
            ///////////////////////////

            case 'a': // GPS Installation Data
                uart1Print("\n");
 800e354:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800e358:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e35c:	f7f8 fb60 	bl	8006a20 <uart1Print>

				switch(eepromConfig.gpsType)
 800e360:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e364:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e368:	f893 334b 	ldrb.w	r3, [r3, #843]	; 0x34b
 800e36c:	2b03      	cmp	r3, #3
 800e36e:	d827      	bhi.n	800e3c0 <gpsCLI+0x1d0>
 800e370:	a201      	add	r2, pc, #4	; (adr r2, 800e378 <gpsCLI+0x188>)
 800e372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e376:	bf00      	nop
 800e378:	0800e389 	.word	0x0800e389
 800e37c:	0800e397 	.word	0x0800e397
 800e380:	0800e3a5 	.word	0x0800e3a5
 800e384:	0800e3b3 	.word	0x0800e3b3
				{
					///////////////

					case NO_GPS:
					    uart1Print("No GPS Installed....\n\n");
 800e388:	f64d 30b8 	movw	r0, #56248	; 0xdbb8
 800e38c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e390:	f7f8 fb46 	bl	8006a20 <uart1Print>
					    break;
 800e394:	e014      	b.n	800e3c0 <gpsCLI+0x1d0>

					///////////////

					case MEDIATEK_3329_BINARY:
					    uart1Print("MediaTek 3329 GPS installed, Binary Mode....\n\n");
 800e396:	f64d 30d0 	movw	r0, #56272	; 0xdbd0
 800e39a:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e39e:	f7f8 fb3f 	bl	8006a20 <uart1Print>
					    break;
 800e3a2:	e00d      	b.n	800e3c0 <gpsCLI+0x1d0>

					///////////////

					case MEDIATEK_3329_NMEA:
					    uart1Print("MediaTek 3329 GPS Installed, NMEA Mode....\n\n");
 800e3a4:	f64d 4000 	movw	r0, #56320	; 0xdc00
 800e3a8:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e3ac:	f7f8 fb38 	bl	8006a20 <uart1Print>
					    break;
 800e3b0:	e006      	b.n	800e3c0 <gpsCLI+0x1d0>

					///////////////

					case UBLOX:
					    uart1Print("UBLOX GPS Installed, Binary Mode....\n\n");
 800e3b2:	f64d 4030 	movw	r0, #56368	; 0xdc30
 800e3b6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e3ba:	f7f8 fb31 	bl	8006a20 <uart1Print>
					    break;
 800e3be:	bf00      	nop

					///////////////
				}

                validQuery = false;
 800e3c0:	f04f 0300 	mov.w	r3, #0
 800e3c4:	f88d 3006 	strb.w	r3, [sp, #6]
                break;
 800e3c8:	e092      	b.n	800e4f0 <gpsCLI+0x300>

            ///////////////////////////

			case 'x':
			    uart1Print("\nExiting GPS CLI....\n\n");
 800e3ca:	f64d 4058 	movw	r0, #56408	; 0xdc58
 800e3ce:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e3d2:	f7f8 fb25 	bl	8006a20 <uart1Print>
			    cliBusy = false;
 800e3d6:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800e3da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e3de:	f04f 0200 	mov.w	r2, #0
 800e3e2:	701a      	strb	r2, [r3, #0]

	    	///////////////////////////
	    }
	}

}
 800e3e4:	b003      	add	sp, #12
 800e3e6:	bd00      	pop	{pc}
			    break;

            ///////////////////////////

            case 'A': // Set GPS Installed State to False
                eepromConfig.gpsType = NO_GPS;
 800e3e8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e3ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e3f0:	f04f 0200 	mov.w	r2, #0
 800e3f4:	f883 234b 	strb.w	r2, [r3, #843]	; 0x34b

                gpsQuery = 'a';
 800e3f8:	f04f 0361 	mov.w	r3, #97	; 0x61
 800e3fc:	f88d 3007 	strb.w	r3, [sp, #7]
                validQuery = true;
 800e400:	f04f 0301 	mov.w	r3, #1
 800e404:	f88d 3006 	strb.w	r3, [sp, #6]
                break;
 800e408:	e072      	b.n	800e4f0 <gpsCLI+0x300>

            ///////////////////////////

            case 'B': // Set GPS Type to MediaTek 3329 Binary
                eepromConfig.gpsType = MEDIATEK_3329_BINARY;
 800e40a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e40e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e412:	f04f 0201 	mov.w	r2, #1
 800e416:	f883 234b 	strb.w	r2, [r3, #843]	; 0x34b

                initGPS();
 800e41a:	f7f3 f871 	bl	8001500 <initGPS>

                gpsQuery = 'a';
 800e41e:	f04f 0361 	mov.w	r3, #97	; 0x61
 800e422:	f88d 3007 	strb.w	r3, [sp, #7]
                validQuery = true;
 800e426:	f04f 0301 	mov.w	r3, #1
 800e42a:	f88d 3006 	strb.w	r3, [sp, #6]
        	    break;
 800e42e:	e05f      	b.n	800e4f0 <gpsCLI+0x300>

            ///////////////////////////

            case 'C': // Set GPS Type to MediaTek 3329 NMEA
                eepromConfig.gpsType = MEDIATEK_3329_NMEA;
 800e430:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e434:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e438:	f04f 0202 	mov.w	r2, #2
 800e43c:	f883 234b 	strb.w	r2, [r3, #843]	; 0x34b

                initGPS();
 800e440:	f7f3 f85e 	bl	8001500 <initGPS>

                gpsQuery = 'a';
 800e444:	f04f 0361 	mov.w	r3, #97	; 0x61
 800e448:	f88d 3007 	strb.w	r3, [sp, #7]
                validQuery = true;
 800e44c:	f04f 0301 	mov.w	r3, #1
 800e450:	f88d 3006 	strb.w	r3, [sp, #6]
                break;
 800e454:	e04c      	b.n	800e4f0 <gpsCLI+0x300>

            ///////////////////////////

            case 'D': // Set GPS Type to UBLOX Binary
                eepromConfig.gpsType = UBLOX;
 800e456:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e45a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e45e:	f04f 0203 	mov.w	r2, #3
 800e462:	f883 234b 	strb.w	r2, [r3, #843]	; 0x34b

                initGPS();
 800e466:	f7f3 f84b 	bl	8001500 <initGPS>

                gpsQuery = 'a';
 800e46a:	f04f 0361 	mov.w	r3, #97	; 0x61
 800e46e:	f88d 3007 	strb.w	r3, [sp, #7]
                validQuery = true;
 800e472:	f04f 0301 	mov.w	r3, #1
 800e476:	f88d 3006 	strb.w	r3, [sp, #6]
                break;
 800e47a:	e039      	b.n	800e4f0 <gpsCLI+0x300>

            ///////////////////////////

            case 'W': // Write EEPROM Parameters
                uart1Print("\nWriting EEPROM Parameters....\n\n");
 800e47c:	f24c 4080 	movw	r0, #50304	; 0xc480
 800e480:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e484:	f7f8 facc 	bl	8006a20 <uart1Print>
                writeEEPROM();
 800e488:	f000 fa3e 	bl	800e908 <writeEEPROM>
                break;
 800e48c:	e030      	b.n	800e4f0 <gpsCLI+0x300>

			///////////////////////////

			case '?':
			   	uart1Print("\n");
 800e48e:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800e492:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e496:	f7f8 fac3 	bl	8006a20 <uart1Print>
			   	uart1Print("'a' Display GPS Installation Data          'A' Set GPS Type to No GPS\n");
 800e49a:	f64d 4070 	movw	r0, #56432	; 0xdc70
 800e49e:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e4a2:	f7f8 fabd 	bl	8006a20 <uart1Print>
			   	uart1Print("                                           'B' Set GPS Type to MediaTek 3329 Binary\n");
 800e4a6:	f64d 40b8 	movw	r0, #56504	; 0xdcb8
 800e4aa:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e4ae:	f7f8 fab7 	bl	8006a20 <uart1Print>
			   	uart1Print("                                           'C' Set GPS Type to MediaTek 3329 NMEA\n");
 800e4b2:	f64d 5010 	movw	r0, #56592	; 0xdd10
 800e4b6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e4ba:	f7f8 fab1 	bl	8006a20 <uart1Print>
			   	uart1Print("                                           'D' Set GPS Type to UBLOX\n");
 800e4be:	f64d 5064 	movw	r0, #56676	; 0xdd64
 800e4c2:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e4c6:	f7f8 faab 	bl	8006a20 <uart1Print>
			   	uart1Print("                                           'W' Write EEPROM Parameters\n");
 800e4ca:	f24d 3074 	movw	r0, #54132	; 0xd374
 800e4ce:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e4d2:	f7f8 faa5 	bl	8006a20 <uart1Print>
			   	uart1Print("'x' Exit GPS CLI                           '?' Command Summary\n");
 800e4d6:	f64d 50ac 	movw	r0, #56748	; 0xddac
 800e4da:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e4de:	f7f8 fa9f 	bl	8006a20 <uart1Print>
			    uart1Print("\n");
 800e4e2:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 800e4e6:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e4ea:	f7f8 fa99 	bl	8006a20 <uart1Print>
	    	    break;
 800e4ee:	bf00      	nop

	    	///////////////////////////
	    }
	}
 800e4f0:	e692      	b.n	800e218 <gpsCLI+0x28>
 800e4f2:	bf00      	nop
 800e4f4:	f3af 8000 	nop.w

0800e4f8 <computeAxisCommands>:
///////////////////////////////////////////////////////////////////////////////
// Compute Axis Commands
///////////////////////////////////////////////////////////////////////////////

void computeAxisCommands(float dt)
{
 800e4f8:	b510      	push	{r4, lr}
 800e4fa:	b084      	sub	sp, #16
 800e4fc:	9003      	str	r0, [sp, #12]
    if (flightMode == ATTITUDE)
 800e4fe:	f240 73f8 	movw	r3, #2040	; 0x7f8
 800e502:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d127      	bne.n	800e55c <computeAxisCommands+0x64>
    {
        attCmd[ROLL ] = rxCommand[ROLL ] * eepromConfig.attitudeScaling;
 800e50c:	f240 0388 	movw	r3, #136	; 0x88
 800e510:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e514:	ed93 7a00 	vldr	s14, [r3]
 800e518:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e520:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800e524:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e528:	f643 2358 	movw	r3, #14936	; 0x3a58
 800e52c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e530:	edc3 7a00 	vstr	s15, [r3]
        attCmd[PITCH] = rxCommand[PITCH] * eepromConfig.attitudeScaling;
 800e534:	f240 0388 	movw	r3, #136	; 0x88
 800e538:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e53c:	ed93 7a01 	vldr	s14, [r3, #4]
 800e540:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e544:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e548:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800e54c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e550:	f643 2358 	movw	r3, #14936	; 0x3a58
 800e554:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e558:	edc3 7a01 	vstr	s15, [r3, #4]
    }

    if (flightMode >= ATTITUDE)
 800e55c:	f240 73f8 	movw	r3, #2040	; 0x7f8
 800e560:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d03c      	beq.n	800e5e4 <computeAxisCommands+0xec>
    {
        attPID[ROLL]  = updatePID( attCmd[ROLL ],  sensors.attitude500Hz[ROLL ], dt, holdIntegrators, &eepromConfig.PID[ROLL_ATT_PID ] );
 800e56a:	f643 2358 	movw	r3, #14936	; 0x3a58
 800e56e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e572:	6819      	ldr	r1, [r3, #0]
 800e574:	f643 3398 	movw	r3, #15256	; 0x3b98
 800e578:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e57c:	699a      	ldr	r2, [r3, #24]
 800e57e:	f240 03dc 	movw	r3, #220	; 0xdc
 800e582:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	4892      	ldr	r0, [pc, #584]	; (800e7d4 <computeAxisCommands+0x2dc>)
 800e58a:	9000      	str	r0, [sp, #0]
 800e58c:	4608      	mov	r0, r1
 800e58e:	4611      	mov	r1, r2
 800e590:	9a03      	ldr	r2, [sp, #12]
 800e592:	f006 fac5 	bl	8014b20 <updatePID>
 800e596:	4602      	mov	r2, r0
 800e598:	f643 2364 	movw	r3, #14948	; 0x3a64
 800e59c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e5a0:	601a      	str	r2, [r3, #0]
        attPID[PITCH] = updatePID( attCmd[PITCH], -sensors.attitude500Hz[PITCH], dt, holdIntegrators, &eepromConfig.PID[PITCH_ATT_PID] );
 800e5a2:	f643 2358 	movw	r3, #14936	; 0x3a58
 800e5a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e5aa:	685a      	ldr	r2, [r3, #4]
 800e5ac:	f643 3398 	movw	r3, #15256	; 0x3b98
 800e5b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e5b4:	edd3 7a07 	vldr	s15, [r3, #28]
 800e5b8:	eef1 7a67 	vneg.f32	s15, s15
 800e5bc:	ee17 4a90 	vmov	r4, s15
 800e5c0:	f240 03dc 	movw	r3, #220	; 0xdc
 800e5c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	4983      	ldr	r1, [pc, #524]	; (800e7d8 <computeAxisCommands+0x2e0>)
 800e5cc:	9100      	str	r1, [sp, #0]
 800e5ce:	4610      	mov	r0, r2
 800e5d0:	4621      	mov	r1, r4
 800e5d2:	9a03      	ldr	r2, [sp, #12]
 800e5d4:	f006 faa4 	bl	8014b20 <updatePID>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	f643 2364 	movw	r3, #14948	; 0x3a64
 800e5de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e5e2:	605a      	str	r2, [r3, #4]
    }

    if (flightMode == RATE)
 800e5e4:	f240 73f8 	movw	r3, #2040	; 0x7f8
 800e5e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d128      	bne.n	800e644 <computeAxisCommands+0x14c>
    {
        rateCmd[ROLL ] = rxCommand[ROLL ] * eepromConfig.rateScaling;
 800e5f2:	f240 0388 	movw	r3, #136	; 0x88
 800e5f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e5fa:	ed93 7a00 	vldr	s14, [r3]
 800e5fe:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e602:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e606:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800e60a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e60e:	f643 2380 	movw	r3, #14976	; 0x3a80
 800e612:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e616:	edc3 7a00 	vstr	s15, [r3]
        rateCmd[PITCH] = rxCommand[PITCH] * eepromConfig.rateScaling;
 800e61a:	f240 0388 	movw	r3, #136	; 0x88
 800e61e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e622:	ed93 7a01 	vldr	s14, [r3, #4]
 800e626:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e62a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e62e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800e632:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e636:	f643 2380 	movw	r3, #14976	; 0x3a80
 800e63a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e63e:	edc3 7a01 	vstr	s15, [r3, #4]
 800e642:	e013      	b.n	800e66c <computeAxisCommands+0x174>
    }
    else
    {
        rateCmd[ROLL ] = attPID[ROLL ];
 800e644:	f643 2364 	movw	r3, #14948	; 0x3a64
 800e648:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	f643 2380 	movw	r3, #14976	; 0x3a80
 800e652:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e656:	601a      	str	r2, [r3, #0]
        rateCmd[PITCH] = attPID[PITCH];
 800e658:	f643 2364 	movw	r3, #14948	; 0x3a64
 800e65c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e660:	685a      	ldr	r2, [r3, #4]
 800e662:	f643 2380 	movw	r3, #14976	; 0x3a80
 800e666:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e66a:	605a      	str	r2, [r3, #4]
    }

    if (headingHoldEngaged == true)  // Heading Hold is ON
 800e66c:	f240 73f9 	movw	r3, #2041	; 0x7f9
 800e670:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	2b01      	cmp	r3, #1
 800e678:	d128      	bne.n	800e6cc <computeAxisCommands+0x1d4>
    {
        if (previousHeadingHoldEngaged == false)
 800e67a:	f240 73e8 	movw	r3, #2024	; 0x7e8
 800e67e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d104      	bne.n	800e692 <computeAxisCommands+0x19a>
        {
            setPIDintegralError(HEADING_PID, 0.0f);  // First pass in heading hold with new reference, zero integral PID error
 800e688:	f04f 0005 	mov.w	r0, #5
 800e68c:	4957      	ldr	r1, [pc, #348]	; (800e7ec <computeAxisCommands+0x2f4>)
 800e68e:	f006 fb43 	bl	8014d18 <setPIDintegralError>
        }
        rateCmd[YAW] = updatePID( headingReference, sensors.attitude500Hz[YAW], dt, holdIntegrators, &eepromConfig.PID[HEADING_PID] );
 800e692:	f643 237c 	movw	r3, #14972	; 0x3a7c
 800e696:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e69a:	6819      	ldr	r1, [r3, #0]
 800e69c:	f643 3398 	movw	r3, #15256	; 0x3b98
 800e6a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6a4:	6a1a      	ldr	r2, [r3, #32]
 800e6a6:	f240 03dc 	movw	r3, #220	; 0xdc
 800e6aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	484a      	ldr	r0, [pc, #296]	; (800e7dc <computeAxisCommands+0x2e4>)
 800e6b2:	9000      	str	r0, [sp, #0]
 800e6b4:	4608      	mov	r0, r1
 800e6b6:	4611      	mov	r1, r2
 800e6b8:	9a03      	ldr	r2, [sp, #12]
 800e6ba:	f006 fa31 	bl	8014b20 <updatePID>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	f643 2380 	movw	r3, #14976	; 0x3a80
 800e6c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6c8:	609a      	str	r2, [r3, #8]
 800e6ca:	e01d      	b.n	800e708 <computeAxisCommands+0x210>
    }
    else  // Heading Hold is OFF
    {
        rateCmd[YAW] = rxCommand[YAW] * eepromConfig.rateScaling;
 800e6cc:	f240 0388 	movw	r3, #136	; 0x88
 800e6d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6d4:	ed93 7a02 	vldr	s14, [r3, #8]
 800e6d8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e6dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6e0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800e6e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6e8:	f643 2380 	movw	r3, #14976	; 0x3a80
 800e6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6f0:	edc3 7a02 	vstr	s15, [r3, #8]
        headingReference = sensors.attitude500Hz[YAW];
 800e6f4:	f643 3398 	movw	r3, #15256	; 0x3b98
 800e6f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6fc:	6a1a      	ldr	r2, [r3, #32]
 800e6fe:	f643 237c 	movw	r3, #14972	; 0x3a7c
 800e702:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e706:	601a      	str	r2, [r3, #0]
    }

    previousHeadingHoldEngaged = headingHoldEngaged;
 800e708:	f240 73f9 	movw	r3, #2041	; 0x7f9
 800e70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e710:	781a      	ldrb	r2, [r3, #0]
 800e712:	f240 73e8 	movw	r3, #2024	; 0x7e8
 800e716:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e71a:	701a      	strb	r2, [r3, #0]

    axisPID[ROLL ] = updatePID( rateCmd[ROLL ],  sensors.gyro500Hz[ROLL ], dt, holdIntegrators, &eepromConfig.PID[ROLL_RATE_PID ] );
 800e71c:	f643 2380 	movw	r3, #14976	; 0x3a80
 800e720:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e724:	6819      	ldr	r1, [r3, #0]
 800e726:	f643 3398 	movw	r3, #15256	; 0x3b98
 800e72a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e72e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e730:	f240 03dc 	movw	r3, #220	; 0xdc
 800e734:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	4829      	ldr	r0, [pc, #164]	; (800e7e0 <computeAxisCommands+0x2e8>)
 800e73c:	9000      	str	r0, [sp, #0]
 800e73e:	4608      	mov	r0, r1
 800e740:	4611      	mov	r1, r2
 800e742:	9a03      	ldr	r2, [sp, #12]
 800e744:	f006 f9ec 	bl	8014b20 <updatePID>
 800e748:	4602      	mov	r2, r0
 800e74a:	f643 2370 	movw	r3, #14960	; 0x3a70
 800e74e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e752:	601a      	str	r2, [r3, #0]
    axisPID[PITCH] = updatePID( rateCmd[PITCH], -sensors.gyro500Hz[PITCH], dt, holdIntegrators, &eepromConfig.PID[PITCH_RATE_PID] );
 800e754:	f643 2380 	movw	r3, #14976	; 0x3a80
 800e758:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e75c:	685a      	ldr	r2, [r3, #4]
 800e75e:	f643 3398 	movw	r3, #15256	; 0x3b98
 800e762:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e766:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800e76a:	eef1 7a67 	vneg.f32	s15, s15
 800e76e:	ee17 4a90 	vmov	r4, s15
 800e772:	f240 03dc 	movw	r3, #220	; 0xdc
 800e776:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	4919      	ldr	r1, [pc, #100]	; (800e7e4 <computeAxisCommands+0x2ec>)
 800e77e:	9100      	str	r1, [sp, #0]
 800e780:	4610      	mov	r0, r2
 800e782:	4621      	mov	r1, r4
 800e784:	9a03      	ldr	r2, [sp, #12]
 800e786:	f006 f9cb 	bl	8014b20 <updatePID>
 800e78a:	4602      	mov	r2, r0
 800e78c:	f643 2370 	movw	r3, #14960	; 0x3a70
 800e790:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e794:	605a      	str	r2, [r3, #4]
    axisPID[YAW  ] = updatePID( rateCmd[YAW  ],  sensors.gyro500Hz[YAW  ], dt, holdIntegrators, &eepromConfig.PID[YAW_RATE_PID  ] );
 800e796:	f643 2380 	movw	r3, #14976	; 0x3a80
 800e79a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e79e:	6899      	ldr	r1, [r3, #8]
 800e7a0:	f643 3398 	movw	r3, #15256	; 0x3b98
 800e7a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e7a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7aa:	f240 03dc 	movw	r3, #220	; 0xdc
 800e7ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e7b2:	781b      	ldrb	r3, [r3, #0]
 800e7b4:	480c      	ldr	r0, [pc, #48]	; (800e7e8 <computeAxisCommands+0x2f0>)
 800e7b6:	9000      	str	r0, [sp, #0]
 800e7b8:	4608      	mov	r0, r1
 800e7ba:	4611      	mov	r1, r2
 800e7bc:	9a03      	ldr	r2, [sp, #12]
 800e7be:	f006 f9af 	bl	8014b20 <updatePID>
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	f643 2370 	movw	r3, #14960	; 0x3a70
 800e7c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e7cc:	609a      	str	r2, [r3, #8]
}
 800e7ce:	b004      	add	sp, #16
 800e7d0:	bd10      	pop	{r4, pc}
 800e7d2:	bf00      	nop
 800e7d4:	20003d0c 	.word	0x20003d0c
 800e7d8:	20003d34 	.word	0x20003d34
 800e7dc:	20003d5c 	.word	0x20003d5c
 800e7e0:	20003c94 	.word	0x20003c94
 800e7e4:	20003cbc 	.word	0x20003cbc
 800e7e8:	20003ce4 	.word	0x20003ce4
 800e7ec:	00000000 	.word	0x00000000

0800e7f0 <parseRcChannels>:
static uint8_t checkNewEEPROMConf = 1;

///////////////////////////////////////////////////////////////////////////////

void parseRcChannels(const char *input)
{
 800e7f0:	b500      	push	{lr}
 800e7f2:	b085      	sub	sp, #20
 800e7f4:	9001      	str	r0, [sp, #4]
    const char *c, *s;

    for (c = input; *c; c++)
 800e7f6:	9b01      	ldr	r3, [sp, #4]
 800e7f8:	9303      	str	r3, [sp, #12]
 800e7fa:	e021      	b.n	800e840 <parseRcChannels+0x50>
    {
        s = strchr(rcChannelLetters, *c);
 800e7fc:	9b03      	ldr	r3, [sp, #12]
 800e7fe:	781b      	ldrb	r3, [r3, #0]
 800e800:	f64d 50ec 	movw	r0, #56812	; 0xddec
 800e804:	f6c0 0002 	movt	r0, #2050	; 0x802
 800e808:	4619      	mov	r1, r3
 800e80a:	f012 fef7 	bl	80215fc <strchr>
 800e80e:	9002      	str	r0, [sp, #8]
        if (s)
 800e810:	9b02      	ldr	r3, [sp, #8]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d010      	beq.n	800e838 <parseRcChannels+0x48>
            eepromConfig.rcMap[s - rcChannelLetters] = c - input;
 800e816:	9a02      	ldr	r2, [sp, #8]
 800e818:	f64d 53ec 	movw	r3, #56812	; 0xddec
 800e81c:	f6c0 0302 	movt	r3, #2050	; 0x802
 800e820:	1ad1      	subs	r1, r2, r3
 800e822:	9a03      	ldr	r2, [sp, #12]
 800e824:	9b01      	ldr	r3, [sp, #4]
 800e826:	1ad3      	subs	r3, r2, r3
 800e828:	b2da      	uxtb	r2, r3
 800e82a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e82e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e832:	185b      	adds	r3, r3, r1
 800e834:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f

void parseRcChannels(const char *input)
{
    const char *c, *s;

    for (c = input; *c; c++)
 800e838:	9b03      	ldr	r3, [sp, #12]
 800e83a:	f103 0301 	add.w	r3, r3, #1
 800e83e:	9303      	str	r3, [sp, #12]
 800e840:	9b03      	ldr	r3, [sp, #12]
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d1d9      	bne.n	800e7fc <parseRcChannels+0xc>
    {
        s = strchr(rcChannelLetters, *c);
        if (s)
            eepromConfig.rcMap[s - rcChannelLetters] = c - input;
    }
}
 800e848:	b005      	add	sp, #20
 800e84a:	bd00      	pop	{pc}

0800e84c <readEEPROM>:

///////////////////////////////////////////////////////////////////////////////

void readEEPROM(void)
{
 800e84c:	b510      	push	{r4, lr}
    memcpy(&eepromConfig, (char *)FLASH_WRITE_EEPROM_ADDR, sizeof(eepromConfig_t));
 800e84e:	f643 32fc 	movw	r2, #15356	; 0x3bfc
 800e852:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800e856:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800e85a:	f6c0 0303 	movt	r3, #2051	; 0x803
 800e85e:	f44f 7453 	mov.w	r4, #844	; 0x34c
 800e862:	4610      	mov	r0, r2
 800e864:	4619      	mov	r1, r3
 800e866:	4623      	mov	r3, r4
 800e868:	461a      	mov	r2, r3
 800e86a:	f012 fdc5 	bl	80213f8 <memcpy>

    accConfidenceDecay = 1.0f / sqrt(eepromConfig.accelCutoff);
 800e86e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e872:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e878:	4618      	mov	r0, r3
 800e87a:	f011 ff57 	bl	802072c <__aeabi_f2d>
 800e87e:	4602      	mov	r2, r0
 800e880:	460b      	mov	r3, r1
 800e882:	4610      	mov	r0, r2
 800e884:	4619      	mov	r1, r3
 800e886:	f00f fe91 	bl	801e5ac <sqrt>
 800e88a:	4602      	mov	r2, r0
 800e88c:	460b      	mov	r3, r1
 800e88e:	a11a      	add	r1, pc, #104	; (adr r1, 800e8f8 <readEEPROM+0xac>)
 800e890:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e894:	f012 f8c8 	bl	8020a28 <__aeabi_ddiv>
 800e898:	4602      	mov	r2, r0
 800e89a:	460b      	mov	r3, r1
 800e89c:	4610      	mov	r0, r2
 800e89e:	4619      	mov	r1, r3
 800e8a0:	f012 fa32 	bl	8020d08 <__aeabi_d2f>
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	f240 73d8 	movw	r3, #2008	; 0x7d8
 800e8aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e8ae:	601a      	str	r2, [r3, #0]

    eepromConfig.yawDirection = constrain(eepromConfig.yawDirection, -1.0f, 1.0f);
 800e8b0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e8b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e8b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8bc:	4618      	mov	r0, r3
 800e8be:	4910      	ldr	r1, [pc, #64]	; (800e900 <readEEPROM+0xb4>)
 800e8c0:	4a10      	ldr	r2, [pc, #64]	; (800e904 <readEEPROM+0xb8>)
 800e8c2:	f008 f925 	bl	8016b10 <constrain>
 800e8c6:	4602      	mov	r2, r0
 800e8c8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e8cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e8d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    vTailThrust = sinf(eepromConfig.vTailAngle);
 800e8d4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e8d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e8dc:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f00f fe25 	bl	801e530 <sinf>
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	f643 238c 	movw	r3, #14988	; 0x3a8c
 800e8ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e8f0:	601a      	str	r2, [r3, #0]
}
 800e8f2:	bd10      	pop	{r4, pc}
 800e8f4:	f3af 8000 	nop.w
 800e8f8:	00000000 	.word	0x00000000
 800e8fc:	3ff00000 	.word	0x3ff00000
 800e900:	bf800000 	.word	0xbf800000
 800e904:	3f800000 	.word	0x3f800000

0800e908 <writeEEPROM>:

///////////////////////////////////////////////////////////////////////////////

void writeEEPROM(void)
{
 800e908:	b500      	push	{lr}
 800e90a:	b083      	sub	sp, #12
    FLASH_Status status;
    uint32_t i;

    FLASH_Unlock();
 800e90c:	f009 fde2 	bl	80184d4 <FLASH_Unlock>

    FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
 800e910:	f04f 0034 	mov.w	r0, #52	; 0x34
 800e914:	f00a fb58 	bl	8018fc8 <FLASH_ClearFlag>

    if (FLASH_ErasePage(FLASH_WRITE_EEPROM_ADDR) == FLASH_COMPLETE)
 800e918:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800e91c:	f6c0 0003 	movt	r0, #2051	; 0x803
 800e920:	f009 fe02 	bl	8018528 <FLASH_ErasePage>
 800e924:	4603      	mov	r3, r0
 800e926:	2b04      	cmp	r3, #4
 800e928:	d125      	bne.n	800e976 <writeEEPROM+0x6e>
    {
        for (i = 0; i < sizeof(eepromConfig_t); i += 4)
 800e92a:	f04f 0300 	mov.w	r3, #0
 800e92e:	9301      	str	r3, [sp, #4]
 800e930:	e01a      	b.n	800e968 <writeEEPROM+0x60>
        {
            status = FLASH_ProgramWord(FLASH_WRITE_EEPROM_ADDR + i, *(uint32_t *)((char *)&eepromConfig + i ));
 800e932:	9b01      	ldr	r3, [sp, #4]
 800e934:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800e938:	f503 337e 	add.w	r3, r3, #260096	; 0x3f800
 800e93c:	9901      	ldr	r1, [sp, #4]
 800e93e:	f643 32fc 	movw	r2, #15356	; 0x3bfc
 800e942:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800e946:	188a      	adds	r2, r1, r2
 800e948:	6812      	ldr	r2, [r2, #0]
 800e94a:	4618      	mov	r0, r3
 800e94c:	4611      	mov	r1, r2
 800e94e:	f009 fe75 	bl	801863c <FLASH_ProgramWord>
 800e952:	4603      	mov	r3, r0
 800e954:	f88d 3003 	strb.w	r3, [sp, #3]
            if (status != FLASH_COMPLETE)
 800e958:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e95c:	2b04      	cmp	r3, #4
 800e95e:	d109      	bne.n	800e974 <writeEEPROM+0x6c>

    FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);

    if (FLASH_ErasePage(FLASH_WRITE_EEPROM_ADDR) == FLASH_COMPLETE)
    {
        for (i = 0; i < sizeof(eepromConfig_t); i += 4)
 800e960:	9b01      	ldr	r3, [sp, #4]
 800e962:	f103 0304 	add.w	r3, r3, #4
 800e966:	9301      	str	r3, [sp, #4]
 800e968:	9a01      	ldr	r2, [sp, #4]
 800e96a:	f240 334b 	movw	r3, #843	; 0x34b
 800e96e:	429a      	cmp	r2, r3
 800e970:	d9df      	bls.n	800e932 <writeEEPROM+0x2a>
 800e972:	e000      	b.n	800e976 <writeEEPROM+0x6e>
        {
            status = FLASH_ProgramWord(FLASH_WRITE_EEPROM_ADDR + i, *(uint32_t *)((char *)&eepromConfig + i ));
            if (status != FLASH_COMPLETE)
                break; // TODO: fail
 800e974:	bf00      	nop
        }
    }

    FLASH_Lock();
 800e976:	f009 fdc9 	bl	801850c <FLASH_Lock>

    readEEPROM();
 800e97a:	f7ff ff67 	bl	800e84c <readEEPROM>
}
 800e97e:	b003      	add	sp, #12
 800e980:	bd00      	pop	{pc}
 800e982:	bf00      	nop

0800e984 <checkFirstTime>:

///////////////////////////////////////////////////////////////////////////////

void checkFirstTime(bool eepromReset)
{
 800e984:	b500      	push	{lr}
 800e986:	b085      	sub	sp, #20
 800e988:	4603      	mov	r3, r0
 800e98a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t test_val;

    test_val = *(uint8_t *)FLASH_WRITE_EEPROM_ADDR;
 800e98e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800e992:	f6c0 0303 	movt	r3, #2051	; 0x803
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	f88d 300f 	strb.w	r3, [sp, #15]

    if (eepromReset || test_val != checkNewEEPROMConf)
 800e99c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d109      	bne.n	800e9b8 <checkFirstTime+0x34>
 800e9a4:	f240 0384 	movw	r3, #132	; 0x84
 800e9a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	f000 86b7 	beq.w	800f726 <checkFirstTime+0xda2>
    {
		// Default settings
        eepromConfig.version = checkNewEEPROMConf;
 800e9b8:	f240 0384 	movw	r3, #132	; 0x84
 800e9bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9c0:	781a      	ldrb	r2, [r3, #0]
 800e9c2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e9c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9ca:	701a      	strb	r2, [r3, #0]

	    ///////////////////////////////

        eepromConfig.accelBias[XAXIS] = 0.0f;
 800e9cc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e9d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9d4:	f8df 2d54 	ldr.w	r2, [pc, #3412]	; 800f72c <checkFirstTime+0xda8>
 800e9d8:	605a      	str	r2, [r3, #4]
        eepromConfig.accelBias[YAXIS] = 0.0f;
 800e9da:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e9de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9e2:	f8df 2d48 	ldr.w	r2, [pc, #3400]	; 800f72c <checkFirstTime+0xda8>
 800e9e6:	609a      	str	r2, [r3, #8]
        eepromConfig.accelBias[ZAXIS] = 0.0f;
 800e9e8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e9ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9f0:	f8df 2d38 	ldr.w	r2, [pc, #3384]	; 800f72c <checkFirstTime+0xda8>
 800e9f4:	60da      	str	r2, [r3, #12]

        ///////////////////////////////

        eepromConfig.accelScaleFactor[XAXIS] = 9.8065f * 0.002f / 16.0f;
 800e9f6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800e9fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9fe:	f8df 2d30 	ldr.w	r2, [pc, #3376]	; 800f730 <checkFirstTime+0xdac>
 800ea02:	611a      	str	r2, [r3, #16]
        eepromConfig.accelScaleFactor[YAXIS] = 9.8065f * 0.002f / 16.0f;
 800ea04:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ea08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ea0c:	f8df 2d20 	ldr.w	r2, [pc, #3360]	; 800f730 <checkFirstTime+0xdac>
 800ea10:	615a      	str	r2, [r3, #20]
        eepromConfig.accelScaleFactor[ZAXIS] = 9.8065f * 0.002f / 16.0f;
 800ea12:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ea16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ea1a:	f8df 2d14 	ldr.w	r2, [pc, #3348]	; 800f730 <checkFirstTime+0xdac>
 800ea1e:	619a      	str	r2, [r3, #24]

        ///////////////////////////////

        eepromConfig.gyroTCBiasSlope[ROLL ] = 0.0f;
 800ea20:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ea24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ea28:	f8df 2d00 	ldr.w	r2, [pc, #3328]	; 800f72c <checkFirstTime+0xda8>
 800ea2c:	61da      	str	r2, [r3, #28]
        eepromConfig.gyroTCBiasSlope[PITCH] = 0.0f;
 800ea2e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ea32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ea36:	f8df 2cf4 	ldr.w	r2, [pc, #3316]	; 800f72c <checkFirstTime+0xda8>
 800ea3a:	621a      	str	r2, [r3, #32]
        eepromConfig.gyroTCBiasSlope[YAW  ] = 0.0f;
 800ea3c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ea40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ea44:	f8df 2ce4 	ldr.w	r2, [pc, #3300]	; 800f72c <checkFirstTime+0xda8>
 800ea48:	625a      	str	r2, [r3, #36]	; 0x24

	    ///////////////////////////////

	    eepromConfig.gyroTCBiasIntercept[ROLL ] = 0.0f;
 800ea4a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ea4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ea52:	f8df 2cd8 	ldr.w	r2, [pc, #3288]	; 800f72c <checkFirstTime+0xda8>
 800ea56:	629a      	str	r2, [r3, #40]	; 0x28
	    eepromConfig.gyroTCBiasIntercept[PITCH] = 0.0f;
 800ea58:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ea5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ea60:	f8df 2cc8 	ldr.w	r2, [pc, #3272]	; 800f72c <checkFirstTime+0xda8>
 800ea64:	62da      	str	r2, [r3, #44]	; 0x2c
	    eepromConfig.gyroTCBiasIntercept[YAW  ] = 0.0f;
 800ea66:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ea6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ea6e:	f8df 2cbc 	ldr.w	r2, [pc, #3260]	; 800f72c <checkFirstTime+0xda8>
 800ea72:	631a      	str	r2, [r3, #48]	; 0x30

	    ///////////////////////////////

	    eepromConfig.magBias[XAXIS] = 0.0f;
 800ea74:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ea78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ea7c:	f8df 2cac 	ldr.w	r2, [pc, #3244]	; 800f72c <checkFirstTime+0xda8>
 800ea80:	635a      	str	r2, [r3, #52]	; 0x34
	    eepromConfig.magBias[YAXIS] = 0.0f;
 800ea82:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ea86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ea8a:	f8df 2ca0 	ldr.w	r2, [pc, #3232]	; 800f72c <checkFirstTime+0xda8>
 800ea8e:	639a      	str	r2, [r3, #56]	; 0x38
	    eepromConfig.magBias[ZAXIS] = 0.0f;
 800ea90:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ea94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ea98:	f8df 2c90 	ldr.w	r2, [pc, #3216]	; 800f72c <checkFirstTime+0xda8>
 800ea9c:	63da      	str	r2, [r3, #60]	; 0x3c

		///////////////////////////////

		eepromConfig.accelCutoff = 1.0f;
 800ea9e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eaa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eaa6:	f8df 2c8c 	ldr.w	r2, [pc, #3212]	; 800f734 <checkFirstTime+0xdb0>
 800eaaa:	641a      	str	r2, [r3, #64]	; 0x40

		///////////////////////////////

	    eepromConfig.KpAcc = 5.0f;    // proportional gain governs rate of convergence to accelerometer
 800eaac:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eab4:	f8df 2c80 	ldr.w	r2, [pc, #3200]	; 800f738 <checkFirstTime+0xdb4>
 800eab8:	645a      	str	r2, [r3, #68]	; 0x44
	    eepromConfig.KiAcc = 0.0f;    // integral gain governs rate of convergence of gyroscope biases
 800eaba:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eabe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eac2:	f8df 2c68 	ldr.w	r2, [pc, #3176]	; 800f72c <checkFirstTime+0xda8>
 800eac6:	649a      	str	r2, [r3, #72]	; 0x48
	    eepromConfig.KpMag = 5.0f;    // proportional gain governs rate of convergence to magnetometer
 800eac8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eacc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ead0:	f8df 2c64 	ldr.w	r2, [pc, #3172]	; 800f738 <checkFirstTime+0xdb4>
 800ead4:	64da      	str	r2, [r3, #76]	; 0x4c
	    eepromConfig.KiMag = 0.0f;    // integral gain governs rate of convergence of gyroscope biases
 800ead6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eada:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eade:	f8df 2c4c 	ldr.w	r2, [pc, #3148]	; 800f72c <checkFirstTime+0xda8>
 800eae2:	651a      	str	r2, [r3, #80]	; 0x50

	    ///////////////////////////////

	    eepromConfig.compFilterA =  0.005f;
 800eae4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eaec:	f8df 2c4c 	ldr.w	r2, [pc, #3148]	; 800f73c <checkFirstTime+0xdb8>
 800eaf0:	655a      	str	r2, [r3, #84]	; 0x54
	    eepromConfig.compFilterB =  0.005f;
 800eaf2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eaf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eafa:	f8df 2c40 	ldr.w	r2, [pc, #3136]	; 800f73c <checkFirstTime+0xdb8>
 800eafe:	659a      	str	r2, [r3, #88]	; 0x58

	    ///////////////////////////////////

        eepromConfig.rateScaling     = 300.0 / 180000.0 * PI;  // Stick to rate scaling for 300 DPS
 800eb00:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eb04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb08:	f8df 2c34 	ldr.w	r2, [pc, #3124]	; 800f740 <checkFirstTime+0xdbc>
 800eb0c:	65da      	str	r2, [r3, #92]	; 0x5c

        eepromConfig.attitudeScaling = 60.0  / 180000.0 * PI;  // Stick to att scaling for 60 degrees
 800eb0e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eb12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb16:	f8df 2c2c 	ldr.w	r2, [pc, #3116]	; 800f744 <checkFirstTime+0xdc0>
 800eb1a:	661a      	str	r2, [r3, #96]	; 0x60

        eepromConfig.nDotEdotScaling = 0.009f;      // Stick to nDot/eDot scaling (9 mps)/(1000 RX PWM Steps) = 0.009
 800eb1c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eb20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb24:	f8df 2c20 	ldr.w	r2, [pc, #3104]	; 800f748 <checkFirstTime+0xdc4>
 800eb28:	665a      	str	r2, [r3, #100]	; 0x64

        eepromConfig.hDotScaling     = 0.003f;      // Stick to hDot scaling (3 mps)/(1000 RX PWM Steps) = 0.003
 800eb2a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eb2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb32:	f8df 2c18 	ldr.w	r2, [pc, #3096]	; 800f74c <checkFirstTime+0xdc8>
 800eb36:	669a      	str	r2, [r3, #104]	; 0x68

        ///////////////////////////////

	    eepromConfig.receiverType  = PARALLEL_PWM;
 800eb38:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eb3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb40:	f04f 0201 	mov.w	r2, #1
 800eb44:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	    eepromConfig.spektrumChannels = 7;
 800eb48:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eb4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb50:	f04f 0207 	mov.w	r2, #7
 800eb54:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	    eepromConfig.spektrumHires = 0;
 800eb58:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eb5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb60:	f04f 0200 	mov.w	r2, #0
 800eb64:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

	    parseRcChannels("TAER1234");
 800eb68:	f64d 50f4 	movw	r0, #56820	; 0xddf4
 800eb6c:	f6c0 0002 	movt	r0, #2050	; 0x802
 800eb70:	f7ff fe3e 	bl	800e7f0 <parseRcChannels>

	    eepromConfig.escPwmRate   = 450;
 800eb74:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eb78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb7c:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800eb80:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
        eepromConfig.servoPwmRate = 50;
 800eb84:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eb88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb8c:	f04f 0232 	mov.w	r2, #50	; 0x32
 800eb90:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

        eepromConfig.mixerConfiguration = MIXERTYPE_QUADX;
 800eb94:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eb98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb9c:	f04f 0206 	mov.w	r2, #6
 800eba0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        eepromConfig.yawDirection = 1.0f;
 800eba4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ebac:	f8df 2b84 	ldr.w	r2, [pc, #2948]	; 800f734 <checkFirstTime+0xdb0>
 800ebb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        eepromConfig.midCommand   = 3000.0f;
 800ebb4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ebb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ebbc:	f8df 2b90 	ldr.w	r2, [pc, #2960]	; 800f750 <checkFirstTime+0xdcc>
 800ebc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        eepromConfig.minCheck     = (float)(MINCOMMAND + 200);
 800ebc4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ebc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ebcc:	f8df 2b84 	ldr.w	r2, [pc, #2948]	; 800f754 <checkFirstTime+0xdd0>
 800ebd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        eepromConfig.maxCheck     = (float)(MAXCOMMAND - 200);
 800ebd4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ebd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ebdc:	f8df 2b78 	ldr.w	r2, [pc, #2936]	; 800f758 <checkFirstTime+0xdd4>
 800ebe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        eepromConfig.minThrottle  = (float)(MINCOMMAND + 200);
 800ebe4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ebe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ebec:	f8df 2b64 	ldr.w	r2, [pc, #2916]	; 800f754 <checkFirstTime+0xdd0>
 800ebf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        eepromConfig.maxThrottle  = (float)(MAXCOMMAND);
 800ebf4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ebf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ebfc:	f8df 2b5c 	ldr.w	r2, [pc, #2908]	; 800f75c <checkFirstTime+0xdd8>
 800ec00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        eepromConfig.PID[ROLL_RATE_PID].B               =   1.0f;
 800ec04:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ec08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ec0c:	f8df 2b24 	ldr.w	r2, [pc, #2852]	; 800f734 <checkFirstTime+0xdb0>
 800ec10:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        eepromConfig.PID[ROLL_RATE_PID].P               = 250.0f;
 800ec14:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ec18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ec1c:	f8df 2b40 	ldr.w	r2, [pc, #2880]	; 800f760 <checkFirstTime+0xddc>
 800ec20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        eepromConfig.PID[ROLL_RATE_PID].I               = 100.0f;
 800ec24:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ec28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ec2c:	f8df 2b34 	ldr.w	r2, [pc, #2868]	; 800f764 <checkFirstTime+0xde0>
 800ec30:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        eepromConfig.PID[ROLL_RATE_PID].D               =   0.0f;
 800ec34:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ec38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ec3c:	f8df 2aec 	ldr.w	r2, [pc, #2796]	; 800f72c <checkFirstTime+0xda8>
 800ec40:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        eepromConfig.PID[ROLL_RATE_PID].iTerm           =   0.0f;
 800ec44:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ec48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ec4c:	f8df 2adc 	ldr.w	r2, [pc, #2780]	; 800f72c <checkFirstTime+0xda8>
 800ec50:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        eepromConfig.PID[ROLL_RATE_PID].windupGuard     = 100.0f;  // PWMs
 800ec54:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ec58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ec5c:	f8df 2b04 	ldr.w	r2, [pc, #2820]	; 800f764 <checkFirstTime+0xde0>
 800ec60:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        eepromConfig.PID[ROLL_RATE_PID].lastDcalcValue  =   0.0f;
 800ec64:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ec68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ec6c:	f8df 2abc 	ldr.w	r2, [pc, #2748]	; 800f72c <checkFirstTime+0xda8>
 800ec70:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        eepromConfig.PID[ROLL_RATE_PID].lastDterm       =   0.0f;
 800ec74:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ec78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ec7c:	f8df 2aac 	ldr.w	r2, [pc, #2732]	; 800f72c <checkFirstTime+0xda8>
 800ec80:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        eepromConfig.PID[ROLL_RATE_PID].lastLastDterm   =   0.0f;
 800ec84:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ec88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ec8c:	f8df 2a9c 	ldr.w	r2, [pc, #2716]	; 800f72c <checkFirstTime+0xda8>
 800ec90:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        eepromConfig.PID[ROLL_RATE_PID].dErrorCalc      =   D_ERROR;
 800ec94:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ec98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ec9c:	f04f 0201 	mov.w	r2, #1
 800eca0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
        eepromConfig.PID[ROLL_RATE_PID].type            =   OTHER;
 800eca4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ecac:	f04f 0200 	mov.w	r2, #0
 800ecb0:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd

        eepromConfig.PID[PITCH_RATE_PID].B              =   1.0f;
 800ecb4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ecb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ecbc:	f8df 2a74 	ldr.w	r2, [pc, #2676]	; 800f734 <checkFirstTime+0xdb0>
 800ecc0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        eepromConfig.PID[PITCH_RATE_PID].P              = 250.0f;
 800ecc4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ecc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eccc:	f8df 2a90 	ldr.w	r2, [pc, #2704]	; 800f760 <checkFirstTime+0xddc>
 800ecd0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        eepromConfig.PID[PITCH_RATE_PID].I              = 100.0f;
 800ecd4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ecd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ecdc:	f8df 2a84 	ldr.w	r2, [pc, #2692]	; 800f764 <checkFirstTime+0xde0>
 800ece0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        eepromConfig.PID[PITCH_RATE_PID].D              =   0.0f;
 800ece4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ece8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ecec:	f8df 2a3c 	ldr.w	r2, [pc, #2620]	; 800f72c <checkFirstTime+0xda8>
 800ecf0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        eepromConfig.PID[PITCH_RATE_PID].iTerm          =   0.0f;
 800ecf4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ecf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ecfc:	f8df 2a2c 	ldr.w	r2, [pc, #2604]	; 800f72c <checkFirstTime+0xda8>
 800ed00:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        eepromConfig.PID[PITCH_RATE_PID].windupGuard    = 100.0f;  // PWMs
 800ed04:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ed08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed0c:	f8df 2a54 	ldr.w	r2, [pc, #2644]	; 800f764 <checkFirstTime+0xde0>
 800ed10:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        eepromConfig.PID[PITCH_RATE_PID].lastDcalcValue =   0.0f;
 800ed14:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ed18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed1c:	f8df 2a0c 	ldr.w	r2, [pc, #2572]	; 800f72c <checkFirstTime+0xda8>
 800ed20:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        eepromConfig.PID[PITCH_RATE_PID].lastDterm      =   0.0f;
 800ed24:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ed28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed2c:	f8df 29fc 	ldr.w	r2, [pc, #2556]	; 800f72c <checkFirstTime+0xda8>
 800ed30:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
        eepromConfig.PID[PITCH_RATE_PID].lastLastDterm  =   0.0f;
 800ed34:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ed38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed3c:	f8df 29ec 	ldr.w	r2, [pc, #2540]	; 800f72c <checkFirstTime+0xda8>
 800ed40:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        eepromConfig.PID[PITCH_RATE_PID].dErrorCalc     =   D_ERROR;
 800ed44:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ed48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed4c:	f04f 0201 	mov.w	r2, #1
 800ed50:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        eepromConfig.PID[PITCH_RATE_PID].type           =   OTHER;
 800ed54:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ed58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed5c:	f04f 0200 	mov.w	r2, #0
 800ed60:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5

        eepromConfig.PID[YAW_RATE_PID].B                =   1.0f;
 800ed64:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ed68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed6c:	f8df 29c4 	ldr.w	r2, [pc, #2500]	; 800f734 <checkFirstTime+0xdb0>
 800ed70:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
        eepromConfig.PID[YAW_RATE_PID].P                = 350.0f;
 800ed74:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ed78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed7c:	f8df 29e8 	ldr.w	r2, [pc, #2536]	; 800f768 <checkFirstTime+0xde4>
 800ed80:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
        eepromConfig.PID[YAW_RATE_PID].I                = 100.0f;
 800ed84:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ed88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed8c:	f8df 29d4 	ldr.w	r2, [pc, #2516]	; 800f764 <checkFirstTime+0xde0>
 800ed90:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
        eepromConfig.PID[YAW_RATE_PID].D                =   0.0f;
 800ed94:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ed98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed9c:	f8df 298c 	ldr.w	r2, [pc, #2444]	; 800f72c <checkFirstTime+0xda8>
 800eda0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
        eepromConfig.PID[YAW_RATE_PID].iTerm            =   0.0f;
 800eda4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eda8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800edac:	f8df 297c 	ldr.w	r2, [pc, #2428]	; 800f72c <checkFirstTime+0xda8>
 800edb0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
        eepromConfig.PID[YAW_RATE_PID].windupGuard      = 100.0f;  // PWMs
 800edb4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800edb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800edbc:	f8df 29a4 	ldr.w	r2, [pc, #2468]	; 800f764 <checkFirstTime+0xde0>
 800edc0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        eepromConfig.PID[YAW_RATE_PID].lastDcalcValue   =   0.0f;
 800edc4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800edc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800edcc:	f8df 295c 	ldr.w	r2, [pc, #2396]	; 800f72c <checkFirstTime+0xda8>
 800edd0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        eepromConfig.PID[YAW_RATE_PID].lastDterm        =   0.0f;
 800edd4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800edd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eddc:	f8df 294c 	ldr.w	r2, [pc, #2380]	; 800f72c <checkFirstTime+0xda8>
 800ede0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        eepromConfig.PID[YAW_RATE_PID].lastLastDterm    =   0.0f;
 800ede4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ede8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800edec:	f8df 293c 	ldr.w	r2, [pc, #2364]	; 800f72c <checkFirstTime+0xda8>
 800edf0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        eepromConfig.PID[YAW_RATE_PID].dErrorCalc       =   D_ERROR;
 800edf4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800edf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800edfc:	f04f 0201 	mov.w	r2, #1
 800ee00:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        eepromConfig.PID[YAW_RATE_PID].type             =   OTHER;
 800ee04:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ee08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee0c:	f04f 0200 	mov.w	r2, #0
 800ee10:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

        eepromConfig.PID[ROLL_ATT_PID].B                =   1.0f;
 800ee14:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ee18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee1c:	f8df 2914 	ldr.w	r2, [pc, #2324]	; 800f734 <checkFirstTime+0xdb0>
 800ee20:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        eepromConfig.PID[ROLL_ATT_PID].P                =   2.0f;
 800ee24:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ee28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee2c:	f8df 293c 	ldr.w	r2, [pc, #2364]	; 800f76c <checkFirstTime+0xde8>
 800ee30:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        eepromConfig.PID[ROLL_ATT_PID].I                =   0.0f;
 800ee34:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ee38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee3c:	f8df 28ec 	ldr.w	r2, [pc, #2284]	; 800f72c <checkFirstTime+0xda8>
 800ee40:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        eepromConfig.PID[ROLL_ATT_PID].D                =   0.0f;
 800ee44:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ee48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee4c:	f8df 28dc 	ldr.w	r2, [pc, #2268]	; 800f72c <checkFirstTime+0xda8>
 800ee50:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        eepromConfig.PID[ROLL_ATT_PID].iTerm            =   0.0f;
 800ee54:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ee58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee5c:	f8df 28cc 	ldr.w	r2, [pc, #2252]	; 800f72c <checkFirstTime+0xda8>
 800ee60:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
        eepromConfig.PID[ROLL_ATT_PID].windupGuard      =   0.5f;  // radians/sec
 800ee64:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ee68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee6c:	f8df 2900 	ldr.w	r2, [pc, #2304]	; 800f770 <checkFirstTime+0xdec>
 800ee70:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
        eepromConfig.PID[ROLL_ATT_PID].lastDcalcValue   =   0.0f;
 800ee74:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ee78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee7c:	f8df 28ac 	ldr.w	r2, [pc, #2220]	; 800f72c <checkFirstTime+0xda8>
 800ee80:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        eepromConfig.PID[ROLL_ATT_PID].lastDterm        =   0.0f;
 800ee84:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ee88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee8c:	f8df 289c 	ldr.w	r2, [pc, #2204]	; 800f72c <checkFirstTime+0xda8>
 800ee90:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
        eepromConfig.PID[ROLL_ATT_PID].lastLastDterm    =   0.0f;
 800ee94:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ee98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee9c:	f8df 288c 	ldr.w	r2, [pc, #2188]	; 800f72c <checkFirstTime+0xda8>
 800eea0:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        eepromConfig.PID[ROLL_ATT_PID].dErrorCalc       =   D_ERROR;
 800eea4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eeac:	f04f 0201 	mov.w	r2, #1
 800eeb0:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
        eepromConfig.PID[ROLL_ATT_PID].type             =   ANGULAR;
 800eeb4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eeb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eebc:	f04f 0201 	mov.w	r2, #1
 800eec0:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135

        eepromConfig.PID[PITCH_ATT_PID].B               =   1.0f;
 800eec4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eecc:	f8df 2864 	ldr.w	r2, [pc, #2148]	; 800f734 <checkFirstTime+0xdb0>
 800eed0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
        eepromConfig.PID[PITCH_ATT_PID].P               =   2.0f;
 800eed4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eedc:	f8df 288c 	ldr.w	r2, [pc, #2188]	; 800f76c <checkFirstTime+0xde8>
 800eee0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        eepromConfig.PID[PITCH_ATT_PID].I               =   0.0f;
 800eee4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eeec:	f8df 283c 	ldr.w	r2, [pc, #2108]	; 800f72c <checkFirstTime+0xda8>
 800eef0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        eepromConfig.PID[PITCH_ATT_PID].D               =   0.0f;
 800eef4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eefc:	f8df 282c 	ldr.w	r2, [pc, #2092]	; 800f72c <checkFirstTime+0xda8>
 800ef00:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        eepromConfig.PID[PITCH_ATT_PID].iTerm           =   0.0f;
 800ef04:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ef08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ef0c:	f8df 281c 	ldr.w	r2, [pc, #2076]	; 800f72c <checkFirstTime+0xda8>
 800ef10:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        eepromConfig.PID[PITCH_ATT_PID].windupGuard     =   0.5f;  // radians/sec
 800ef14:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ef18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ef1c:	f8df 2850 	ldr.w	r2, [pc, #2128]	; 800f770 <checkFirstTime+0xdec>
 800ef20:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
        eepromConfig.PID[PITCH_ATT_PID].lastDcalcValue  =   0.0f;
 800ef24:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ef28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ef2c:	f8df 27fc 	ldr.w	r2, [pc, #2044]	; 800f72c <checkFirstTime+0xda8>
 800ef30:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
        eepromConfig.PID[PITCH_ATT_PID].lastDterm       =   0.0f;
 800ef34:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ef38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ef3c:	f8df 27ec 	ldr.w	r2, [pc, #2028]	; 800f72c <checkFirstTime+0xda8>
 800ef40:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
        eepromConfig.PID[PITCH_ATT_PID].lastLastDterm   =   0.0f;
 800ef44:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ef48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ef4c:	f8df 27dc 	ldr.w	r2, [pc, #2012]	; 800f72c <checkFirstTime+0xda8>
 800ef50:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
        eepromConfig.PID[PITCH_ATT_PID].dErrorCalc      =   D_ERROR;
 800ef54:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ef58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ef5c:	f04f 0201 	mov.w	r2, #1
 800ef60:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
        eepromConfig.PID[PITCH_ATT_PID].type            =   ANGULAR;
 800ef64:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ef68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ef6c:	f04f 0201 	mov.w	r2, #1
 800ef70:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d

        eepromConfig.PID[HEADING_PID].B                 =   1.0f;
 800ef74:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ef78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ef7c:	f8df 27b4 	ldr.w	r2, [pc, #1972]	; 800f734 <checkFirstTime+0xdb0>
 800ef80:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        eepromConfig.PID[HEADING_PID].P                 =   3.0f;
 800ef84:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ef88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ef8c:	f8df 27e4 	ldr.w	r2, [pc, #2020]	; 800f774 <checkFirstTime+0xdf0>
 800ef90:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        eepromConfig.PID[HEADING_PID].I                 =   0.0f;
 800ef94:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ef98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ef9c:	f8df 278c 	ldr.w	r2, [pc, #1932]	; 800f72c <checkFirstTime+0xda8>
 800efa0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        eepromConfig.PID[HEADING_PID].D                 =   0.0f;
 800efa4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800efa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800efac:	f8df 277c 	ldr.w	r2, [pc, #1916]	; 800f72c <checkFirstTime+0xda8>
 800efb0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        eepromConfig.PID[HEADING_PID].iTerm             =   0.0f;
 800efb4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800efb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800efbc:	f8df 276c 	ldr.w	r2, [pc, #1900]	; 800f72c <checkFirstTime+0xda8>
 800efc0:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        eepromConfig.PID[HEADING_PID].windupGuard       =   0.5f;  // radians/sec
 800efc4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800efc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800efcc:	f8df 27a0 	ldr.w	r2, [pc, #1952]	; 800f770 <checkFirstTime+0xdec>
 800efd0:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
        eepromConfig.PID[HEADING_PID].lastDcalcValue    =   0.0f;
 800efd4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800efd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800efdc:	f8df 274c 	ldr.w	r2, [pc, #1868]	; 800f72c <checkFirstTime+0xda8>
 800efe0:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        eepromConfig.PID[HEADING_PID].lastDterm         =   0.0f;
 800efe4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800efe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800efec:	f8df 273c 	ldr.w	r2, [pc, #1852]	; 800f72c <checkFirstTime+0xda8>
 800eff0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        eepromConfig.PID[HEADING_PID].lastLastDterm     =   0.0f;
 800eff4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800eff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800effc:	f8df 272c 	ldr.w	r2, [pc, #1836]	; 800f72c <checkFirstTime+0xda8>
 800f000:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        eepromConfig.PID[HEADING_PID].dErrorCalc        =   D_ERROR;
 800f004:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f008:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f00c:	f04f 0201 	mov.w	r2, #1
 800f010:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
        eepromConfig.PID[HEADING_PID].type              =   ANGULAR;
 800f014:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f018:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f01c:	f04f 0201 	mov.w	r2, #1
 800f020:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185

        eepromConfig.PID[NDOT_PID].B                    =   1.0f;
 800f024:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f028:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f02c:	f8df 2704 	ldr.w	r2, [pc, #1796]	; 800f734 <checkFirstTime+0xdb0>
 800f030:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        eepromConfig.PID[NDOT_PID].P                    =   3.0f;
 800f034:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f038:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f03c:	f8df 2734 	ldr.w	r2, [pc, #1844]	; 800f774 <checkFirstTime+0xdf0>
 800f040:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        eepromConfig.PID[NDOT_PID].I                    =   0.0f;
 800f044:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f048:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f04c:	f8df 26dc 	ldr.w	r2, [pc, #1756]	; 800f72c <checkFirstTime+0xda8>
 800f050:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
        eepromConfig.PID[NDOT_PID].D                    =   0.0f;
 800f054:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f058:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f05c:	f8df 26cc 	ldr.w	r2, [pc, #1740]	; 800f72c <checkFirstTime+0xda8>
 800f060:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
        eepromConfig.PID[NDOT_PID].iTerm                =   0.0f;
 800f064:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f068:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f06c:	f8df 26bc 	ldr.w	r2, [pc, #1724]	; 800f72c <checkFirstTime+0xda8>
 800f070:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
        eepromConfig.PID[NDOT_PID].windupGuard          =   0.5f;
 800f074:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f078:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f07c:	f8df 26f0 	ldr.w	r2, [pc, #1776]	; 800f770 <checkFirstTime+0xdec>
 800f080:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
        eepromConfig.PID[NDOT_PID].lastDcalcValue       =   0.0f;
 800f084:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f088:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f08c:	f8df 269c 	ldr.w	r2, [pc, #1692]	; 800f72c <checkFirstTime+0xda8>
 800f090:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
        eepromConfig.PID[NDOT_PID].lastDterm            =   0.0f;
 800f094:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f098:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f09c:	f8df 268c 	ldr.w	r2, [pc, #1676]	; 800f72c <checkFirstTime+0xda8>
 800f0a0:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
        eepromConfig.PID[NDOT_PID].lastLastDterm        =   0.0f;
 800f0a4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f0ac:	f8df 267c 	ldr.w	r2, [pc, #1660]	; 800f72c <checkFirstTime+0xda8>
 800f0b0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        eepromConfig.PID[NDOT_PID].dErrorCalc           =   D_ERROR;
 800f0b4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f0bc:	f04f 0201 	mov.w	r2, #1
 800f0c0:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
        eepromConfig.PID[NDOT_PID].type                 =   OTHER;
 800f0c4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f0c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f0cc:	f04f 0200 	mov.w	r2, #0
 800f0d0:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad

        eepromConfig.PID[EDOT_PID].B                    =   1.0f;
 800f0d4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f0d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f0dc:	f8df 2654 	ldr.w	r2, [pc, #1620]	; 800f734 <checkFirstTime+0xdb0>
 800f0e0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
        eepromConfig.PID[EDOT_PID].P                    =   3.0f;
 800f0e4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f0e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f0ec:	f8df 2684 	ldr.w	r2, [pc, #1668]	; 800f774 <checkFirstTime+0xdf0>
 800f0f0:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
        eepromConfig.PID[EDOT_PID].I                    =   0.0f;
 800f0f4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f0f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f0fc:	f8df 262c 	ldr.w	r2, [pc, #1580]	; 800f72c <checkFirstTime+0xda8>
 800f100:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
        eepromConfig.PID[EDOT_PID].D                    =   0.0f;
 800f104:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f108:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f10c:	f8df 261c 	ldr.w	r2, [pc, #1564]	; 800f72c <checkFirstTime+0xda8>
 800f110:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        eepromConfig.PID[EDOT_PID].iTerm                =   0.0f;
 800f114:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f118:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f11c:	f8df 260c 	ldr.w	r2, [pc, #1548]	; 800f72c <checkFirstTime+0xda8>
 800f120:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
        eepromConfig.PID[EDOT_PID].windupGuard          =   0.5f;
 800f124:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f128:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f12c:	f8df 2640 	ldr.w	r2, [pc, #1600]	; 800f770 <checkFirstTime+0xdec>
 800f130:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
        eepromConfig.PID[EDOT_PID].lastDcalcValue       =   0.0f;
 800f134:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f138:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f13c:	f8df 25ec 	ldr.w	r2, [pc, #1516]	; 800f72c <checkFirstTime+0xda8>
 800f140:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
        eepromConfig.PID[EDOT_PID].lastDterm            =   0.0f;
 800f144:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f148:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f14c:	f8df 25dc 	ldr.w	r2, [pc, #1500]	; 800f72c <checkFirstTime+0xda8>
 800f150:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
        eepromConfig.PID[EDOT_PID].lastLastDterm        =   0.0f;
 800f154:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f158:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f15c:	f8df 25cc 	ldr.w	r2, [pc, #1484]	; 800f72c <checkFirstTime+0xda8>
 800f160:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        eepromConfig.PID[EDOT_PID].dErrorCalc           =   D_ERROR;
 800f164:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f168:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f16c:	f04f 0201 	mov.w	r2, #1
 800f170:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
        eepromConfig.PID[EDOT_PID].type                 =   OTHER;
 800f174:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f178:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f17c:	f04f 0200 	mov.w	r2, #0
 800f180:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5

        eepromConfig.PID[HDOT_PID].B                    =   1.0f;
 800f184:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f188:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f18c:	f8df 25a4 	ldr.w	r2, [pc, #1444]	; 800f734 <checkFirstTime+0xdb0>
 800f190:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
        eepromConfig.PID[HDOT_PID].P                    =   2.0f;
 800f194:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f198:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f19c:	f8df 25cc 	ldr.w	r2, [pc, #1484]	; 800f76c <checkFirstTime+0xde8>
 800f1a0:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        eepromConfig.PID[HDOT_PID].I                    =   0.0f;
 800f1a4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f1a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f1ac:	f8df 257c 	ldr.w	r2, [pc, #1404]	; 800f72c <checkFirstTime+0xda8>
 800f1b0:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        eepromConfig.PID[HDOT_PID].D                    =   0.0f;
 800f1b4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f1b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f1bc:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 800f72c <checkFirstTime+0xda8>
 800f1c0:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
        eepromConfig.PID[HDOT_PID].iTerm                =   0.0f;
 800f1c4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f1c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f1cc:	f8df 255c 	ldr.w	r2, [pc, #1372]	; 800f72c <checkFirstTime+0xda8>
 800f1d0:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
        eepromConfig.PID[HDOT_PID].windupGuard          =   5.0f;
 800f1d4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f1dc:	f8df 2558 	ldr.w	r2, [pc, #1368]	; 800f738 <checkFirstTime+0xdb4>
 800f1e0:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
        eepromConfig.PID[HDOT_PID].lastDcalcValue       =   0.0f;
 800f1e4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f1e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f1ec:	f8df 253c 	ldr.w	r2, [pc, #1340]	; 800f72c <checkFirstTime+0xda8>
 800f1f0:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
        eepromConfig.PID[HDOT_PID].lastDterm            =   0.0f;
 800f1f4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f1f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f1fc:	f8df 252c 	ldr.w	r2, [pc, #1324]	; 800f72c <checkFirstTime+0xda8>
 800f200:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
        eepromConfig.PID[HDOT_PID].lastLastDterm        =   0.0f;
 800f204:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f208:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f20c:	f8df 251c 	ldr.w	r2, [pc, #1308]	; 800f72c <checkFirstTime+0xda8>
 800f210:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
        eepromConfig.PID[HDOT_PID].dErrorCalc           =   D_ERROR;
 800f214:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f218:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f21c:	f04f 0201 	mov.w	r2, #1
 800f220:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        eepromConfig.PID[HDOT_PID].type                 =   OTHER;
 800f224:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f228:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f22c:	f04f 0200 	mov.w	r2, #0
 800f230:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd

        eepromConfig.PID[N_PID].B                       =   1.0f;
 800f234:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f238:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f23c:	f8df 24f4 	ldr.w	r2, [pc, #1268]	; 800f734 <checkFirstTime+0xdb0>
 800f240:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        eepromConfig.PID[N_PID].P                       =   3.0f;
 800f244:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f248:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f24c:	f8df 2524 	ldr.w	r2, [pc, #1316]	; 800f774 <checkFirstTime+0xdf0>
 800f250:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        eepromConfig.PID[N_PID].I                       =   0.0f;
 800f254:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f258:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f25c:	f8df 24cc 	ldr.w	r2, [pc, #1228]	; 800f72c <checkFirstTime+0xda8>
 800f260:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        eepromConfig.PID[N_PID].D                       =   0.0f;
 800f264:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f268:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f26c:	f8df 24bc 	ldr.w	r2, [pc, #1212]	; 800f72c <checkFirstTime+0xda8>
 800f270:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        eepromConfig.PID[N_PID].iTerm                   =   0.0f;
 800f274:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f278:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f27c:	f8df 24ac 	ldr.w	r2, [pc, #1196]	; 800f72c <checkFirstTime+0xda8>
 800f280:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        eepromConfig.PID[N_PID].windupGuard             =   0.5f;
 800f284:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f288:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f28c:	f8df 24e0 	ldr.w	r2, [pc, #1248]	; 800f770 <checkFirstTime+0xdec>
 800f290:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
        eepromConfig.PID[N_PID].lastDcalcValue          =   0.0f;
 800f294:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f298:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f29c:	f8df 248c 	ldr.w	r2, [pc, #1164]	; 800f72c <checkFirstTime+0xda8>
 800f2a0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        eepromConfig.PID[N_PID].lastDterm               =   0.0f;
 800f2a4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f2a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f2ac:	f8df 247c 	ldr.w	r2, [pc, #1148]	; 800f72c <checkFirstTime+0xda8>
 800f2b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        eepromConfig.PID[N_PID].lastLastDterm           =   0.0f;
 800f2b4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f2b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f2bc:	f8df 246c 	ldr.w	r2, [pc, #1132]	; 800f72c <checkFirstTime+0xda8>
 800f2c0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
        eepromConfig.PID[N_PID].dErrorCalc              =   D_ERROR;
 800f2c4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f2c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f2cc:	f04f 0201 	mov.w	r2, #1
 800f2d0:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
        eepromConfig.PID[N_PID].type                    =   OTHER;
 800f2d4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f2d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f2dc:	f04f 0200 	mov.w	r2, #0
 800f2e0:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225

        eepromConfig.PID[E_PID].B                       =   1.0f;
 800f2e4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f2e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f2ec:	f8df 2444 	ldr.w	r2, [pc, #1092]	; 800f734 <checkFirstTime+0xdb0>
 800f2f0:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
        eepromConfig.PID[E_PID].P                       =   3.0f;
 800f2f4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f2f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f2fc:	f8df 2474 	ldr.w	r2, [pc, #1140]	; 800f774 <checkFirstTime+0xdf0>
 800f300:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
        eepromConfig.PID[E_PID].I                       =   0.0f;
 800f304:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f308:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f30c:	f8df 241c 	ldr.w	r2, [pc, #1052]	; 800f72c <checkFirstTime+0xda8>
 800f310:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
        eepromConfig.PID[E_PID].D                       =   0.0f;
 800f314:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f318:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f31c:	f8df 240c 	ldr.w	r2, [pc, #1036]	; 800f72c <checkFirstTime+0xda8>
 800f320:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
        eepromConfig.PID[E_PID].iTerm                   =   0.0f;
 800f324:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f328:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f32c:	4aff      	ldr	r2, [pc, #1020]	; (800f72c <checkFirstTime+0xda8>)
 800f32e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
        eepromConfig.PID[E_PID].windupGuard             =   0.5f;
 800f332:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f336:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f33a:	f8df 2434 	ldr.w	r2, [pc, #1076]	; 800f770 <checkFirstTime+0xdec>
 800f33e:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
        eepromConfig.PID[E_PID].lastDcalcValue          =   0.0f;
 800f342:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f346:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f34a:	4af8      	ldr	r2, [pc, #992]	; (800f72c <checkFirstTime+0xda8>)
 800f34c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
        eepromConfig.PID[E_PID].lastDterm               =   0.0f;
 800f350:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f354:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f358:	4af4      	ldr	r2, [pc, #976]	; (800f72c <checkFirstTime+0xda8>)
 800f35a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        eepromConfig.PID[E_PID].lastLastDterm           =   0.0f;
 800f35e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f362:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f366:	4af1      	ldr	r2, [pc, #964]	; (800f72c <checkFirstTime+0xda8>)
 800f368:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
        eepromConfig.PID[E_PID].dErrorCalc              =   D_ERROR;
 800f36c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f370:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f374:	f04f 0201 	mov.w	r2, #1
 800f378:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
        eepromConfig.PID[E_PID].type                    =   OTHER;
 800f37c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f380:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f384:	f04f 0200 	mov.w	r2, #0
 800f388:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d

        eepromConfig.PID[H_PID].B                       =   1.0f;
 800f38c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f390:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f394:	4ae7      	ldr	r2, [pc, #924]	; (800f734 <checkFirstTime+0xdb0>)
 800f396:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
        eepromConfig.PID[H_PID].P                       =   2.0f;
 800f39a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f39e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f3a2:	4af2      	ldr	r2, [pc, #968]	; (800f76c <checkFirstTime+0xde8>)
 800f3a4:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
        eepromConfig.PID[H_PID].I                       =   0.0f;
 800f3a8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f3ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f3b0:	4ade      	ldr	r2, [pc, #888]	; (800f72c <checkFirstTime+0xda8>)
 800f3b2:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
        eepromConfig.PID[H_PID].D                       =   0.0f;
 800f3b6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f3ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f3be:	4adb      	ldr	r2, [pc, #876]	; (800f72c <checkFirstTime+0xda8>)
 800f3c0:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
        eepromConfig.PID[H_PID].iTerm                   =   0.0f;
 800f3c4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f3c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f3cc:	4ad7      	ldr	r2, [pc, #860]	; (800f72c <checkFirstTime+0xda8>)
 800f3ce:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
        eepromConfig.PID[H_PID].windupGuard             =   5.0f;
 800f3d2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f3d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f3da:	4ad7      	ldr	r2, [pc, #860]	; (800f738 <checkFirstTime+0xdb4>)
 800f3dc:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
        eepromConfig.PID[H_PID].lastDcalcValue          =   0.0f;
 800f3e0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f3e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f3e8:	4ad0      	ldr	r2, [pc, #832]	; (800f72c <checkFirstTime+0xda8>)
 800f3ea:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
        eepromConfig.PID[H_PID].lastDterm               =   0.0f;
 800f3ee:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f3f6:	4acd      	ldr	r2, [pc, #820]	; (800f72c <checkFirstTime+0xda8>)
 800f3f8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        eepromConfig.PID[H_PID].lastLastDterm           =   0.0f;
 800f3fc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f400:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f404:	4ac9      	ldr	r2, [pc, #804]	; (800f72c <checkFirstTime+0xda8>)
 800f406:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
        eepromConfig.PID[H_PID].dErrorCalc              =   D_ERROR;
 800f40a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f40e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f412:	f04f 0201 	mov.w	r2, #1
 800f416:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        eepromConfig.PID[H_PID].type                    =   OTHER;
 800f41a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f41e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f422:	f04f 0200 	mov.w	r2, #0
 800f426:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275

        eepromConfig.gimbalRollServoMin   = 2000.0f;
 800f42a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f42e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f432:	4ad1      	ldr	r2, [pc, #836]	; (800f778 <checkFirstTime+0xdf4>)
 800f434:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
		eepromConfig.gimbalRollServoMid   = 3000.0f;
 800f438:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f43c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f440:	4ac3      	ldr	r2, [pc, #780]	; (800f750 <checkFirstTime+0xdcc>)
 800f442:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		eepromConfig.gimbalRollServoMax   = 4000.0f;
 800f446:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f44a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f44e:	4ac3      	ldr	r2, [pc, #780]	; (800f75c <checkFirstTime+0xdd8>)
 800f450:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
		eepromConfig.gimbalRollServoGain  = 1.0f;
 800f454:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f458:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f45c:	4ab5      	ldr	r2, [pc, #724]	; (800f734 <checkFirstTime+0xdb0>)
 800f45e:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284

		eepromConfig.gimbalPitchServoMin  = 2000.0f;
 800f462:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f466:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f46a:	4ac3      	ldr	r2, [pc, #780]	; (800f778 <checkFirstTime+0xdf4>)
 800f46c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		eepromConfig.gimbalPitchServoMid  = 3000.0f;
 800f470:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f474:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f478:	4ab5      	ldr	r2, [pc, #724]	; (800f750 <checkFirstTime+0xdcc>)
 800f47a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		eepromConfig.gimbalPitchServoMax  = 4000.0f;
 800f47e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f482:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f486:	4ab5      	ldr	r2, [pc, #724]	; (800f75c <checkFirstTime+0xdd8>)
 800f488:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		eepromConfig.gimbalPitchServoGain = 1.0f;
 800f48c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f490:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f494:	4aa7      	ldr	r2, [pc, #668]	; (800f734 <checkFirstTime+0xdb0>)
 800f496:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

        eepromConfig.rollDirectionLeft    = -1.0f;
 800f49a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f49e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f4a2:	4ab6      	ldr	r2, [pc, #728]	; (800f77c <checkFirstTime+0xdf8>)
 800f4a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
        eepromConfig.rollDirectionRight   =  1.0f;
 800f4a8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f4ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f4b0:	4aa0      	ldr	r2, [pc, #640]	; (800f734 <checkFirstTime+0xdb0>)
 800f4b2:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
        eepromConfig.pitchDirectionLeft   = -1.0f;
 800f4b6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f4be:	4aaf      	ldr	r2, [pc, #700]	; (800f77c <checkFirstTime+0xdf8>)
 800f4c0:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
        eepromConfig.pitchDirectionRight  =  1.0f;
 800f4c4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f4c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f4cc:	4a99      	ldr	r2, [pc, #612]	; (800f734 <checkFirstTime+0xdb0>)
 800f4ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

        eepromConfig.wingLeftMinimum      = 2000.0f;
 800f4d2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f4d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f4da:	4aa7      	ldr	r2, [pc, #668]	; (800f778 <checkFirstTime+0xdf4>)
 800f4dc:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
        eepromConfig.wingLeftMaximum      = 4000.0f;
 800f4e0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f4e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f4e8:	4a9c      	ldr	r2, [pc, #624]	; (800f75c <checkFirstTime+0xdd8>)
 800f4ea:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
        eepromConfig.wingRightMinimum     = 2000.0f;
 800f4ee:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f4f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f4f6:	4aa0      	ldr	r2, [pc, #640]	; (800f778 <checkFirstTime+0xdf4>)
 800f4f8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
        eepromConfig.wingRightMaximum     = 4000.0f;
 800f4fc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f500:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f504:	4a95      	ldr	r2, [pc, #596]	; (800f75c <checkFirstTime+0xdd8>)
 800f506:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4

        eepromConfig.biLeftServoMin       = 2000.0f;
 800f50a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f512:	4a99      	ldr	r2, [pc, #612]	; (800f778 <checkFirstTime+0xdf4>)
 800f514:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
        eepromConfig.biLeftServoMid       = 3000.0f;
 800f518:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f520:	4a8b      	ldr	r2, [pc, #556]	; (800f750 <checkFirstTime+0xdcc>)
 800f522:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
        eepromConfig.biLeftServoMax       = 4000.0f;
 800f526:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f52a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f52e:	4a8b      	ldr	r2, [pc, #556]	; (800f75c <checkFirstTime+0xdd8>)
 800f530:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

        eepromConfig.biRightServoMin      = 2000.0f;
 800f534:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f538:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f53c:	4a8e      	ldr	r2, [pc, #568]	; (800f778 <checkFirstTime+0xdf4>)
 800f53e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
        eepromConfig.biRightServoMid      = 3000.0f;
 800f542:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f546:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f54a:	4a81      	ldr	r2, [pc, #516]	; (800f750 <checkFirstTime+0xdcc>)
 800f54c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
        eepromConfig.biRightServoMax      = 4000.0f;
 800f550:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f554:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f558:	4a80      	ldr	r2, [pc, #512]	; (800f75c <checkFirstTime+0xdd8>)
 800f55a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

        eepromConfig.triYawServoMin       = 2000.0f;
 800f55e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f562:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f566:	4a84      	ldr	r2, [pc, #528]	; (800f778 <checkFirstTime+0xdf4>)
 800f568:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
        eepromConfig.triYawServoMid       = 3000.0f;
 800f56c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f570:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f574:	4a76      	ldr	r2, [pc, #472]	; (800f750 <checkFirstTime+0xdcc>)
 800f576:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        eepromConfig.triYawServoMax       = 4000.0f;
 800f57a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f57e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f582:	4a76      	ldr	r2, [pc, #472]	; (800f75c <checkFirstTime+0xdd8>)
 800f584:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

        eepromConfig.vTailAngle           = 40.0f;
 800f588:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f590:	4a7b      	ldr	r2, [pc, #492]	; (800f780 <checkFirstTime+0xdfc>)
 800f592:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc

        // Free Mix Defaults to Quad X
		eepromConfig.freeMixMotors        = 4;
 800f596:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f59a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f59e:	f04f 0204 	mov.w	r2, #4
 800f5a2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

		eepromConfig.freeMix[0][ROLL ]    =  1.0f;
 800f5a6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f5aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f5ae:	4a61      	ldr	r2, [pc, #388]	; (800f734 <checkFirstTime+0xdb0>)
 800f5b0:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
        eepromConfig.freeMix[0][PITCH]    = -1.0f;
 800f5b4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f5b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f5bc:	4a6f      	ldr	r2, [pc, #444]	; (800f77c <checkFirstTime+0xdf8>)
 800f5be:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
        eepromConfig.freeMix[0][YAW  ]    = -1.0f;
 800f5c2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f5c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f5ca:	4a6c      	ldr	r2, [pc, #432]	; (800f77c <checkFirstTime+0xdf8>)
 800f5cc:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec

        eepromConfig.freeMix[1][ROLL ]    = -1.0f;
 800f5d0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f5d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f5d8:	4a68      	ldr	r2, [pc, #416]	; (800f77c <checkFirstTime+0xdf8>)
 800f5da:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
        eepromConfig.freeMix[1][PITCH]    = -1.0f;
 800f5de:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f5e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f5e6:	4a65      	ldr	r2, [pc, #404]	; (800f77c <checkFirstTime+0xdf8>)
 800f5e8:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
        eepromConfig.freeMix[1][YAW  ]    =  1.0f;
 800f5ec:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f5f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f5f4:	4a4f      	ldr	r2, [pc, #316]	; (800f734 <checkFirstTime+0xdb0>)
 800f5f6:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8

        eepromConfig.freeMix[2][ROLL ]    = -1.0f;
 800f5fa:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f5fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f602:	4a5e      	ldr	r2, [pc, #376]	; (800f77c <checkFirstTime+0xdf8>)
 800f604:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
        eepromConfig.freeMix[2][PITCH]    =  1.0f;
 800f608:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f60c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f610:	4a48      	ldr	r2, [pc, #288]	; (800f734 <checkFirstTime+0xdb0>)
 800f612:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
        eepromConfig.freeMix[2][YAW  ]    = -1.0f;
 800f616:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f61a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f61e:	4a57      	ldr	r2, [pc, #348]	; (800f77c <checkFirstTime+0xdf8>)
 800f620:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

        eepromConfig.freeMix[3][ROLL ]    =  1.0f;
 800f624:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f628:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f62c:	4a41      	ldr	r2, [pc, #260]	; (800f734 <checkFirstTime+0xdb0>)
 800f62e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        eepromConfig.freeMix[3][PITCH]    =  1.0f;
 800f632:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f636:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f63a:	4a3e      	ldr	r2, [pc, #248]	; (800f734 <checkFirstTime+0xdb0>)
 800f63c:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
        eepromConfig.freeMix[3][YAW  ]    =  1.0f;
 800f640:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f644:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f648:	4a3a      	ldr	r2, [pc, #232]	; (800f734 <checkFirstTime+0xdb0>)
 800f64a:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310

        eepromConfig.freeMix[4][ROLL ]    =  0.0f;
 800f64e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f652:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f656:	4a35      	ldr	r2, [pc, #212]	; (800f72c <checkFirstTime+0xda8>)
 800f658:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
        eepromConfig.freeMix[4][PITCH]    =  0.0f;
 800f65c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f660:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f664:	4a31      	ldr	r2, [pc, #196]	; (800f72c <checkFirstTime+0xda8>)
 800f666:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
        eepromConfig.freeMix[4][YAW  ]    =  0.0f;
 800f66a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f66e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f672:	4a2e      	ldr	r2, [pc, #184]	; (800f72c <checkFirstTime+0xda8>)
 800f674:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c

        eepromConfig.freeMix[5][ROLL ]    =  0.0f;
 800f678:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f67c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f680:	4a2a      	ldr	r2, [pc, #168]	; (800f72c <checkFirstTime+0xda8>)
 800f682:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
        eepromConfig.freeMix[5][PITCH]    =  0.0f;
 800f686:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f68a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f68e:	4a27      	ldr	r2, [pc, #156]	; (800f72c <checkFirstTime+0xda8>)
 800f690:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
        eepromConfig.freeMix[5][YAW  ]    =  0.0f;
 800f694:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f698:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f69c:	4a23      	ldr	r2, [pc, #140]	; (800f72c <checkFirstTime+0xda8>)
 800f69e:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

        eepromConfig.osdEnabled           =  false;
 800f6a2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f6a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f6aa:	f04f 0200 	mov.w	r2, #0
 800f6ae:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
        eepromConfig.defaultVideoStandard =  NTSC;
 800f6b2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f6b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f6ba:	f04f 0200 	mov.w	r2, #0
 800f6be:	f883 2345 	strb.w	r2, [r3, #837]	; 0x345
        eepromConfig.metricUnits          =  false;
 800f6c2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f6c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f6ca:	f04f 0200 	mov.w	r2, #0
 800f6ce:	f883 2346 	strb.w	r2, [r3, #838]	; 0x346
        eepromConfig.osdDisplayAlt        =  true;
 800f6d2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f6d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f6da:	f04f 0201 	mov.w	r2, #1
 800f6de:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347
        eepromConfig.osdDisplayAH         =  true;
 800f6e2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f6e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f6ea:	f04f 0201 	mov.w	r2, #1
 800f6ee:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348
        eepromConfig.osdDisplayAtt        =  false;
 800f6f2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f6f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f6fa:	f04f 0200 	mov.w	r2, #0
 800f6fe:	f883 2349 	strb.w	r2, [r3, #841]	; 0x349
        eepromConfig.osdDisplayHdg        =  true;
 800f702:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f706:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f70a:	f04f 0201 	mov.w	r2, #1
 800f70e:	f883 234a 	strb.w	r2, [r3, #842]	; 0x34a

        eepromConfig.gpsType              =  NO_GPS;
 800f712:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f716:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f71a:	f04f 0200 	mov.w	r2, #0
 800f71e:	f883 234b 	strb.w	r2, [r3, #843]	; 0x34b

        writeEEPROM();
 800f722:	f7ff f8f1 	bl	800e908 <writeEEPROM>
	}
}
 800f726:	b005      	add	sp, #20
 800f728:	bd00      	pop	{pc}
 800f72a:	bf00      	nop
 800f72c:	00000000 	.word	0x00000000
 800f730:	3aa0ab72 	.word	0x3aa0ab72
 800f734:	3f800000 	.word	0x3f800000
 800f738:	40a00000 	.word	0x40a00000
 800f73c:	3ba3d70a 	.word	0x3ba3d70a
 800f740:	3bab92a6 	.word	0x3bab92a6
 800f744:	3a89421f 	.word	0x3a89421f
 800f748:	3c1374bc 	.word	0x3c1374bc
 800f74c:	3b449ba6 	.word	0x3b449ba6
 800f750:	453b8000 	.word	0x453b8000
 800f754:	45098000 	.word	0x45098000
 800f758:	456d8000 	.word	0x456d8000
 800f75c:	457a0000 	.word	0x457a0000
 800f760:	437a0000 	.word	0x437a0000
 800f764:	42c80000 	.word	0x42c80000
 800f768:	43af0000 	.word	0x43af0000
 800f76c:	40000000 	.word	0x40000000
 800f770:	3f000000 	.word	0x3f000000
 800f774:	40400000 	.word	0x40400000
 800f778:	44fa0000 	.word	0x44fa0000
 800f77c:	bf800000 	.word	0xbf800000
 800f780:	42200000 	.word	0x42200000
 800f784:	f3af 8000 	nop.w

0800f788 <createRotationMatrix>:
// Create Rotation Matrix
///////////////////////////////////////////////////////////////////////////////

void createRotationMatrix(void)
{
    rotationMatrix[0] = q0q0 +q1q1 - q2q2 - q3q3;
 800f788:	f643 2334 	movw	r3, #14900	; 0x3a34
 800f78c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f790:	ed93 7a00 	vldr	s14, [r3]
 800f794:	f643 2338 	movw	r3, #14904	; 0x3a38
 800f798:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f79c:	edd3 7a00 	vldr	s15, [r3]
 800f7a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f7a4:	f643 232c 	movw	r3, #14892	; 0x3a2c
 800f7a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f7ac:	edd3 7a00 	vldr	s15, [r3]
 800f7b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f7b4:	f643 233c 	movw	r3, #14908	; 0x3a3c
 800f7b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f7bc:	edd3 7a00 	vldr	s15, [r3]
 800f7c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7c4:	f643 2390 	movw	r3, #14992	; 0x3a90
 800f7c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f7cc:	edc3 7a00 	vstr	s15, [r3]

    rotationMatrix[1] = 2.0f * (q1q2 - q0q3);
 800f7d0:	f643 2328 	movw	r3, #14888	; 0x3a28
 800f7d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f7d8:	ed93 7a00 	vldr	s14, [r3]
 800f7dc:	f643 2348 	movw	r3, #14920	; 0x3a48
 800f7e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f7e4:	edd3 7a00 	vldr	s15, [r3]
 800f7e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f7f0:	f643 2390 	movw	r3, #14992	; 0x3a90
 800f7f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f7f8:	edc3 7a01 	vstr	s15, [r3, #4]

    rotationMatrix[2] = 2.0f * (q0q2 + q1q3);
 800f7fc:	f643 234c 	movw	r3, #14924	; 0x3a4c
 800f800:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f804:	ed93 7a00 	vldr	s14, [r3]
 800f808:	f643 2340 	movw	r3, #14912	; 0x3a40
 800f80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f810:	edd3 7a00 	vldr	s15, [r3]
 800f814:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f818:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f81c:	f643 2390 	movw	r3, #14992	; 0x3a90
 800f820:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f824:	edc3 7a02 	vstr	s15, [r3, #8]

    rotationMatrix[3] = 2.0f * (q1q2 + q0q3);
 800f828:	f643 2328 	movw	r3, #14888	; 0x3a28
 800f82c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f830:	ed93 7a00 	vldr	s14, [r3]
 800f834:	f643 2348 	movw	r3, #14920	; 0x3a48
 800f838:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f83c:	edd3 7a00 	vldr	s15, [r3]
 800f840:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f844:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f848:	f643 2390 	movw	r3, #14992	; 0x3a90
 800f84c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f850:	edc3 7a03 	vstr	s15, [r3, #12]

    rotationMatrix[4] = q0q0 - q1q1 + q2q2 - q3q3;
 800f854:	f643 2334 	movw	r3, #14900	; 0x3a34
 800f858:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f85c:	ed93 7a00 	vldr	s14, [r3]
 800f860:	f643 2338 	movw	r3, #14904	; 0x3a38
 800f864:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f868:	edd3 7a00 	vldr	s15, [r3]
 800f86c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f870:	f643 232c 	movw	r3, #14892	; 0x3a2c
 800f874:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f878:	edd3 7a00 	vldr	s15, [r3]
 800f87c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f880:	f643 233c 	movw	r3, #14908	; 0x3a3c
 800f884:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f888:	edd3 7a00 	vldr	s15, [r3]
 800f88c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f890:	f643 2390 	movw	r3, #14992	; 0x3a90
 800f894:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f898:	edc3 7a04 	vstr	s15, [r3, #16]

    rotationMatrix[5] = 2.0f * (q2q3 - q0q1);
 800f89c:	f643 2344 	movw	r3, #14916	; 0x3a44
 800f8a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8a4:	ed93 7a00 	vldr	s14, [r3]
 800f8a8:	f643 2330 	movw	r3, #14896	; 0x3a30
 800f8ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8b0:	edd3 7a00 	vldr	s15, [r3]
 800f8b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f8bc:	f643 2390 	movw	r3, #14992	; 0x3a90
 800f8c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8c4:	edc3 7a05 	vstr	s15, [r3, #20]

    rotationMatrix[6] = 2.0f * (q1q3 - q0q2);
 800f8c8:	f643 2340 	movw	r3, #14912	; 0x3a40
 800f8cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8d0:	ed93 7a00 	vldr	s14, [r3]
 800f8d4:	f643 234c 	movw	r3, #14924	; 0x3a4c
 800f8d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8dc:	edd3 7a00 	vldr	s15, [r3]
 800f8e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f8e8:	f643 2390 	movw	r3, #14992	; 0x3a90
 800f8ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8f0:	edc3 7a06 	vstr	s15, [r3, #24]

    rotationMatrix[7] = 2.0f * (q0q1 + q2q3);
 800f8f4:	f643 2330 	movw	r3, #14896	; 0x3a30
 800f8f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8fc:	ed93 7a00 	vldr	s14, [r3]
 800f900:	f643 2344 	movw	r3, #14916	; 0x3a44
 800f904:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f908:	edd3 7a00 	vldr	s15, [r3]
 800f90c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f910:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f914:	f643 2390 	movw	r3, #14992	; 0x3a90
 800f918:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f91c:	edc3 7a07 	vstr	s15, [r3, #28]

    rotationMatrix[8] = q0q0 - q1q1 - q2q2 + q3q3;
 800f920:	f643 2334 	movw	r3, #14900	; 0x3a34
 800f924:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f928:	ed93 7a00 	vldr	s14, [r3]
 800f92c:	f643 2338 	movw	r3, #14904	; 0x3a38
 800f930:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f934:	edd3 7a00 	vldr	s15, [r3]
 800f938:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f93c:	f643 232c 	movw	r3, #14892	; 0x3a2c
 800f940:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f944:	edd3 7a00 	vldr	s15, [r3]
 800f948:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f94c:	f643 233c 	movw	r3, #14908	; 0x3a3c
 800f950:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f954:	edd3 7a00 	vldr	s15, [r3]
 800f958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f95c:	f643 2390 	movw	r3, #14992	; 0x3a90
 800f960:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f964:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800f968:	4770      	bx	lr
 800f96a:	bf00      	nop

0800f96c <bodyAccelToEarthAccel>:
///////////////////////////////////////////////////////////////////////////////
// Rotate Body Accels to Earth Accels
///////////////////////////////////////////////////////////////////////////////

void bodyAccelToEarthAccel(void)
{
 800f96c:	b500      	push	{lr}
 800f96e:	b083      	sub	sp, #12
    matrixMultiply(3, 3, 1, earthAxisAccels, rotationMatrix, sensors.accel100Hz);
 800f970:	f643 2390 	movw	r3, #14992	; 0x3a90
 800f974:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f978:	9300      	str	r3, [sp, #0]
 800f97a:	4b12      	ldr	r3, [pc, #72]	; (800f9c4 <bodyAccelToEarthAccel+0x58>)
 800f97c:	9301      	str	r3, [sp, #4]
 800f97e:	f04f 0003 	mov.w	r0, #3
 800f982:	f04f 0103 	mov.w	r1, #3
 800f986:	f04f 0201 	mov.w	r2, #1
 800f98a:	f240 73ec 	movw	r3, #2028	; 0x7ec
 800f98e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f992:	f000 fd13 	bl	80103bc <matrixMultiply>

    earthAxisAccels[ZAXIS] += accelOneG;
 800f996:	f240 73ec 	movw	r3, #2028	; 0x7ec
 800f99a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f99e:	ed93 7a02 	vldr	s14, [r3, #8]
 800f9a2:	f240 0300 	movw	r3, #0
 800f9a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f9aa:	edd3 7a00 	vldr	s15, [r3]
 800f9ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9b2:	f240 73ec 	movw	r3, #2028	; 0x7ec
 800f9b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f9ba:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800f9be:	b003      	add	sp, #12
 800f9c0:	bd00      	pop	{pc}
 800f9c2:	bf00      	nop
 800f9c4:	20003ba4 	.word	0x20003ba4

0800f9c8 <processFlightCommands>:
///////////////////////////////////////////////////////////////////////////////
// Read Flight Commands
///////////////////////////////////////////////////////////////////////////////

void processFlightCommands(void)
{
 800f9c8:	b510      	push	{r4, lr}
 800f9ca:	b082      	sub	sp, #8
    uint8_t channel;

    if ( rcActive == true )
 800f9cc:	f240 731c 	movw	r3, #1820	; 0x71c
 800f9d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	f040 80df 	bne.w	800fb9a <processFlightCommands+0x1d2>
    {
		// Read receiver commands
        for (channel = 0; channel < 8; channel++)
 800f9dc:	f04f 0300 	mov.w	r3, #0
 800f9e0:	f88d 3007 	strb.w	r3, [sp, #7]
 800f9e4:	e021      	b.n	800fa2a <processFlightCommands+0x62>
            rxCommand[channel] = (float)rxRead(eepromConfig.rcMap[channel]);
 800f9e6:	f89d 4007 	ldrb.w	r4, [sp, #7]
 800f9ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f9ee:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800f9f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f9f6:	189b      	adds	r3, r3, r2
 800f9f8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7f5 fbef 	bl	80051e0 <rxRead>
 800fa02:	4603      	mov	r3, r0
 800fa04:	ee07 3a10 	vmov	s14, r3
 800fa08:	eef8 7a47 	vcvt.f32.u32	s15, s14
 800fa0c:	f240 0388 	movw	r3, #136	; 0x88
 800fa10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa14:	ea4f 0284 	mov.w	r2, r4, lsl #2
 800fa18:	189b      	adds	r3, r3, r2
 800fa1a:	edc3 7a00 	vstr	s15, [r3]
    uint8_t channel;

    if ( rcActive == true )
    {
		// Read receiver commands
        for (channel = 0; channel < 8; channel++)
 800fa1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fa22:	f103 0301 	add.w	r3, r3, #1
 800fa26:	f88d 3007 	strb.w	r3, [sp, #7]
 800fa2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fa2e:	2b07      	cmp	r3, #7
 800fa30:	d9d9      	bls.n	800f9e6 <processFlightCommands+0x1e>
            rxCommand[channel] = (float)rxRead(eepromConfig.rcMap[channel]);

        rxCommand[ROLL]  -= eepromConfig.midCommand;                  // Roll Range    -1000:1000
 800fa32:	f240 0388 	movw	r3, #136	; 0x88
 800fa36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa3a:	ed93 7a00 	vldr	s14, [r3]
 800fa3e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800fa42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa46:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800fa4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa4e:	f240 0388 	movw	r3, #136	; 0x88
 800fa52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa56:	edc3 7a00 	vstr	s15, [r3]
        rxCommand[PITCH] -= eepromConfig.midCommand;                  // Pitch Range   -1000:1000
 800fa5a:	f240 0388 	movw	r3, #136	; 0x88
 800fa5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa62:	ed93 7a01 	vldr	s14, [r3, #4]
 800fa66:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800fa6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa6e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800fa72:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa76:	f240 0388 	movw	r3, #136	; 0x88
 800fa7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa7e:	edc3 7a01 	vstr	s15, [r3, #4]
        rxCommand[YAW]   -= eepromConfig.midCommand;                  // Yaw Range     -1000:1000
 800fa82:	f240 0388 	movw	r3, #136	; 0x88
 800fa86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa8a:	ed93 7a02 	vldr	s14, [r3, #8]
 800fa8e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800fa92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa96:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800fa9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa9e:	f240 0388 	movw	r3, #136	; 0x88
 800faa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800faa6:	edc3 7a02 	vstr	s15, [r3, #8]

        rxCommand[THROTTLE] -= eepromConfig.midCommand - MIDCOMMAND;  // Throttle Range 2000:4000
 800faaa:	f240 0388 	movw	r3, #136	; 0x88
 800faae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fab2:	ed93 7a03 	vldr	s14, [r3, #12]
 800fab6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800faba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fabe:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 800fac2:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800fcf4 <processFlightCommands+0x32c>
 800fac6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800faca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800face:	f240 0388 	movw	r3, #136	; 0x88
 800fad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fad6:	edc3 7a03 	vstr	s15, [r3, #12]
        rxCommand[AUX1]     -= eepromConfig.midCommand - MIDCOMMAND;  // Aux1 Range     2000:4000
 800fada:	f240 0388 	movw	r3, #136	; 0x88
 800fade:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fae2:	ed93 7a04 	vldr	s14, [r3, #16]
 800fae6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800faea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800faee:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 800faf2:	eddf 7a80 	vldr	s15, [pc, #512]	; 800fcf4 <processFlightCommands+0x32c>
 800faf6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fafa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fafe:	f240 0388 	movw	r3, #136	; 0x88
 800fb02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb06:	edc3 7a04 	vstr	s15, [r3, #16]
        rxCommand[AUX2]     -= eepromConfig.midCommand - MIDCOMMAND;  // Aux2 Range     2000:4000
 800fb0a:	f240 0388 	movw	r3, #136	; 0x88
 800fb0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb12:	ed93 7a05 	vldr	s14, [r3, #20]
 800fb16:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800fb1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb1e:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 800fb22:	eddf 7a74 	vldr	s15, [pc, #464]	; 800fcf4 <processFlightCommands+0x32c>
 800fb26:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fb2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb2e:	f240 0388 	movw	r3, #136	; 0x88
 800fb32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb36:	edc3 7a05 	vstr	s15, [r3, #20]
        rxCommand[AUX3]     -= eepromConfig.midCommand - MIDCOMMAND;  // Aux3 Range     2000:4000
 800fb3a:	f240 0388 	movw	r3, #136	; 0x88
 800fb3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb42:	ed93 7a06 	vldr	s14, [r3, #24]
 800fb46:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800fb4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb4e:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 800fb52:	eddf 7a68 	vldr	s15, [pc, #416]	; 800fcf4 <processFlightCommands+0x32c>
 800fb56:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fb5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb5e:	f240 0388 	movw	r3, #136	; 0x88
 800fb62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb66:	edc3 7a06 	vstr	s15, [r3, #24]
        rxCommand[AUX4]     -= eepromConfig.midCommand - MIDCOMMAND;  // Aux4 Range     2000:4000
 800fb6a:	f240 0388 	movw	r3, #136	; 0x88
 800fb6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb72:	ed93 7a07 	vldr	s14, [r3, #28]
 800fb76:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800fb7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb7e:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 800fb82:	eddf 7a5c 	vldr	s15, [pc, #368]	; 800fcf4 <processFlightCommands+0x32c>
 800fb86:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fb8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb8e:	f240 0388 	movw	r3, #136	; 0x88
 800fb92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb96:	edc3 7a07 	vstr	s15, [r3, #28]
    }

    // Set past command in detent values
    for (channel = 0; channel < 3; channel++)
 800fb9a:	f04f 0300 	mov.w	r3, #0
 800fb9e:	f88d 3007 	strb.w	r3, [sp, #7]
 800fba2:	e013      	b.n	800fbcc <processFlightCommands+0x204>
    	previousCommandInDetent[channel] = commandInDetent[channel];
 800fba4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fba8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fbac:	f240 03a8 	movw	r3, #168	; 0xa8
 800fbb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fbb4:	5c59      	ldrb	r1, [r3, r1]
 800fbb6:	f240 03ac 	movw	r3, #172	; 0xac
 800fbba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fbbe:	5499      	strb	r1, [r3, r2]
        rxCommand[AUX3]     -= eepromConfig.midCommand - MIDCOMMAND;  // Aux3 Range     2000:4000
        rxCommand[AUX4]     -= eepromConfig.midCommand - MIDCOMMAND;  // Aux4 Range     2000:4000
    }

    // Set past command in detent values
    for (channel = 0; channel < 3; channel++)
 800fbc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fbc4:	f103 0301 	add.w	r3, r3, #1
 800fbc8:	f88d 3007 	strb.w	r3, [sp, #7]
 800fbcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fbd0:	2b02      	cmp	r3, #2
 800fbd2:	d9e7      	bls.n	800fba4 <processFlightCommands+0x1dc>
    	previousCommandInDetent[channel] = commandInDetent[channel];

    // Apply deadbands and set detent discretes'
    for (channel = 0; channel < 3; channel++)
 800fbd4:	f04f 0300 	mov.w	r3, #0
 800fbd8:	f88d 3007 	strb.w	r3, [sp, #7]
 800fbdc:	e0b4      	b.n	800fd48 <processFlightCommands+0x380>
    {
    	if ((rxCommand[channel] <= DEADBAND) && (rxCommand[channel] >= -DEADBAND))
 800fbde:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fbe2:	f240 0388 	movw	r3, #136	; 0x88
 800fbe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fbea:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800fbee:	189b      	adds	r3, r3, r2
 800fbf0:	ed93 7a00 	vldr	s14, [r3]
 800fbf4:	eef3 7a08 	vmov.f32	s15, #56	; 0x38
 800fbf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fbfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc00:	bf8c      	ite	hi
 800fc02:	2300      	movhi	r3, #0
 800fc04:	2301      	movls	r3, #1
 800fc06:	b2db      	uxtb	r3, r3
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d02b      	beq.n	800fc64 <processFlightCommands+0x29c>
 800fc0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fc10:	f240 0388 	movw	r3, #136	; 0x88
 800fc14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fc18:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800fc1c:	189b      	adds	r3, r3, r2
 800fc1e:	ed93 7a00 	vldr	s14, [r3]
 800fc22:	eefb 7a08 	vmov.f32	s15, #184	; 0xb8
 800fc26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc2e:	bfb4      	ite	lt
 800fc30:	2300      	movlt	r3, #0
 800fc32:	2301      	movge	r3, #1
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d014      	beq.n	800fc64 <processFlightCommands+0x29c>
        {
            rxCommand[channel] = 0;
 800fc3a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fc3e:	f240 0388 	movw	r3, #136	; 0x88
 800fc42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fc46:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800fc4a:	189b      	adds	r3, r3, r2
 800fc4c:	4a26      	ldr	r2, [pc, #152]	; (800fce8 <processFlightCommands+0x320>)
 800fc4e:	601a      	str	r2, [r3, #0]
  	        commandInDetent[channel] = true;
 800fc50:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fc54:	f240 03a8 	movw	r3, #168	; 0xa8
 800fc58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fc5c:	f04f 0101 	mov.w	r1, #1
 800fc60:	5499      	strb	r1, [r3, r2]
 800fc62:	e06b      	b.n	800fd3c <processFlightCommands+0x374>
  	    }
        else
  	    {
  	        commandInDetent[channel] = false;
 800fc64:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fc68:	f240 03a8 	movw	r3, #168	; 0xa8
 800fc6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fc70:	f04f 0100 	mov.w	r1, #0
 800fc74:	5499      	strb	r1, [r3, r2]
  	        if (rxCommand[channel] > 0)
 800fc76:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fc7a:	f240 0388 	movw	r3, #136	; 0x88
 800fc7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fc82:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800fc86:	189b      	adds	r3, r3, r2
 800fc88:	edd3 7a00 	vldr	s15, [r3]
 800fc8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc94:	bfd4      	ite	le
 800fc96:	2300      	movle	r3, #0
 800fc98:	2301      	movgt	r3, #1
 800fc9a:	b2db      	uxtb	r3, r3
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d02b      	beq.n	800fcf8 <processFlightCommands+0x330>
  	        {
  		        rxCommand[channel] = (rxCommand[channel] - DEADBAND) * DEADBAND_SLOPE;
 800fca0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fca4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fca8:	f240 0388 	movw	r3, #136	; 0x88
 800fcac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fcb0:	ea4f 0181 	mov.w	r1, r1, lsl #2
 800fcb4:	185b      	adds	r3, r3, r1
 800fcb6:	ed93 7a00 	vldr	s14, [r3]
 800fcba:	eef3 7a08 	vmov.f32	s15, #56	; 0x38
 800fcbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fcc2:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800fcec <processFlightCommands+0x324>
 800fcc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcca:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800fcf0 <processFlightCommands+0x328>
 800fcce:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800fcd2:	f240 0388 	movw	r3, #136	; 0x88
 800fcd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fcda:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800fcde:	189b      	adds	r3, r3, r2
 800fce0:	edc3 7a00 	vstr	s15, [r3]
 800fce4:	e02a      	b.n	800fd3c <processFlightCommands+0x374>
 800fce6:	bf00      	nop
 800fce8:	00000000 	.word	0x00000000
 800fcec:	447a0000 	.word	0x447a0000
 800fcf0:	44740000 	.word	0x44740000
 800fcf4:	453b8000 	.word	0x453b8000
  	        }
  	        else
  	        {
  	            rxCommand[channel] = (rxCommand[channel] + DEADBAND) * DEADBAND_SLOPE;
 800fcf8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fcfc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fd00:	f240 0388 	movw	r3, #136	; 0x88
 800fd04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fd08:	ea4f 0181 	mov.w	r1, r1, lsl #2
 800fd0c:	185b      	adds	r3, r3, r1
 800fd0e:	ed93 7a00 	vldr	s14, [r3]
 800fd12:	eef3 7a08 	vmov.f32	s15, #56	; 0x38
 800fd16:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fd1a:	ed5f 7a0c 	vldr	s15, [pc, #-48]	; 800fcec <processFlightCommands+0x324>
 800fd1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd22:	ed1f 7a0d 	vldr	s14, [pc, #-52]	; 800fcf0 <processFlightCommands+0x328>
 800fd26:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800fd2a:	f240 0388 	movw	r3, #136	; 0x88
 800fd2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fd32:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800fd36:	189b      	adds	r3, r3, r2
 800fd38:	edc3 7a00 	vstr	s15, [r3]
    // Set past command in detent values
    for (channel = 0; channel < 3; channel++)
    	previousCommandInDetent[channel] = commandInDetent[channel];

    // Apply deadbands and set detent discretes'
    for (channel = 0; channel < 3; channel++)
 800fd3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fd40:	f103 0301 	add.w	r3, r3, #1
 800fd44:	f88d 3007 	strb.w	r3, [sp, #7]
 800fd48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fd4c:	2b02      	cmp	r3, #2
 800fd4e:	f67f af46 	bls.w	800fbde <processFlightCommands+0x216>
    }

    ///////////////////////////////////

    // Check for low throttle
    if ( rxCommand[THROTTLE] < eepromConfig.minCheck )
 800fd52:	f240 0388 	movw	r3, #136	; 0x88
 800fd56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fd5a:	ed93 7a03 	vldr	s14, [r3, #12]
 800fd5e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800fd62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fd66:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800fd6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd72:	bf54      	ite	pl
 800fd74:	2300      	movpl	r3, #0
 800fd76:	2301      	movmi	r3, #1
 800fd78:	b2db      	uxtb	r3, r3
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	f000 80d4 	beq.w	800ff28 <processFlightCommands+0x560>
    {
		// Check for disarm command ( low throttle, left yaw ), will disarm immediately
		if ( (rxCommand[YAW] < (eepromConfig.minCheck - MIDCOMMAND)) && (armed == true) )
 800fd80:	f240 0388 	movw	r3, #136	; 0x88
 800fd84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fd88:	ed93 7a02 	vldr	s14, [r3, #8]
 800fd8c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800fd90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fd94:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 800fd98:	ed5f 7a2a 	vldr	s15, [pc, #-168]	; 800fcf4 <processFlightCommands+0x32c>
 800fd9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fda0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fda4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda8:	bf54      	ite	pl
 800fdaa:	2300      	movpl	r3, #0
 800fdac:	2301      	movmi	r3, #1
 800fdae:	b2db      	uxtb	r3, r3
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d011      	beq.n	800fdd8 <processFlightCommands+0x410>
 800fdb4:	f240 73fa 	movw	r3, #2042	; 0x7fa
 800fdb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	d10a      	bne.n	800fdd8 <processFlightCommands+0x410>
		{
			armed = false;
 800fdc2:	f240 73fa 	movw	r3, #2042	; 0x7fa
 800fdc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fdca:	f04f 0200 	mov.w	r2, #0
 800fdce:	701a      	strb	r2, [r3, #0]

			zeroPIDintegralError();
 800fdd0:	f004 ffba 	bl	8014d48 <zeroPIDintegralError>
			zeroPIDstates();
 800fdd4:	f005 f80e 	bl	8014df4 <zeroPIDstates>
		}

		// Check for gyro bias command ( low throttle, left yaw, aft pitch, right roll )
		if ( (rxCommand[YAW  ] < (eepromConfig.minCheck - MIDCOMMAND)) &&
 800fdd8:	f240 0388 	movw	r3, #136	; 0x88
 800fddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fde0:	ed93 7a02 	vldr	s14, [r3, #8]
 800fde4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800fde8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fdec:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 800fdf0:	ed5f 7a40 	vldr	s15, [pc, #-256]	; 800fcf4 <processFlightCommands+0x32c>
 800fdf4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fdf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fdfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe00:	bf54      	ite	pl
 800fe02:	2300      	movpl	r3, #0
 800fe04:	2301      	movmi	r3, #1
 800fe06:	b2db      	uxtb	r3, r3
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d037      	beq.n	800fe7c <processFlightCommands+0x4b4>
		     (rxCommand[ROLL ] > (eepromConfig.maxCheck - MIDCOMMAND)) &&
 800fe0c:	f240 0388 	movw	r3, #136	; 0x88
 800fe10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fe14:	ed93 7a00 	vldr	s14, [r3]
 800fe18:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800fe1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fe20:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 800fe24:	ed5f 7a4d 	vldr	s15, [pc, #-308]	; 800fcf4 <processFlightCommands+0x32c>
 800fe28:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fe2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fe30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe34:	bfd4      	ite	le
 800fe36:	2300      	movle	r3, #0
 800fe38:	2301      	movgt	r3, #1
 800fe3a:	b2db      	uxtb	r3, r3
			zeroPIDintegralError();
			zeroPIDstates();
		}

		// Check for gyro bias command ( low throttle, left yaw, aft pitch, right roll )
		if ( (rxCommand[YAW  ] < (eepromConfig.minCheck - MIDCOMMAND)) &&
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d01d      	beq.n	800fe7c <processFlightCommands+0x4b4>
		     (rxCommand[ROLL ] > (eepromConfig.maxCheck - MIDCOMMAND)) &&
		     (rxCommand[PITCH] < (eepromConfig.minCheck - MIDCOMMAND)) )
 800fe40:	f240 0388 	movw	r3, #136	; 0x88
 800fe44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fe48:	ed93 7a01 	vldr	s14, [r3, #4]
 800fe4c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800fe50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fe54:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 800fe58:	ed5f 7a5a 	vldr	s15, [pc, #-360]	; 800fcf4 <processFlightCommands+0x32c>
 800fe5c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fe60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fe64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe68:	bf54      	ite	pl
 800fe6a:	2300      	movpl	r3, #0
 800fe6c:	2301      	movmi	r3, #1
 800fe6e:	b2db      	uxtb	r3, r3
			zeroPIDstates();
		}

		// Check for gyro bias command ( low throttle, left yaw, aft pitch, right roll )
		if ( (rxCommand[YAW  ] < (eepromConfig.minCheck - MIDCOMMAND)) &&
		     (rxCommand[ROLL ] > (eepromConfig.maxCheck - MIDCOMMAND)) &&
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d003      	beq.n	800fe7c <processFlightCommands+0x4b4>
		     (rxCommand[PITCH] < (eepromConfig.minCheck - MIDCOMMAND)) )
		{
			// HJI computeMPU6000RTData();
			pulseMotors(3);
 800fe74:	f04f 0003 	mov.w	r0, #3
 800fe78:	f001 ff32 	bl	8011ce0 <pulseMotors>
		}

		// Check for arm command ( low throttle, right yaw), must be present for 1 sec before arming
		if ((rxCommand[YAW] > (eepromConfig.maxCheck - MIDCOMMAND) ) && (armed == false) && (execUp == true))
 800fe7c:	f240 0388 	movw	r3, #136	; 0x88
 800fe80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fe84:	ed93 7a02 	vldr	s14, [r3, #8]
 800fe88:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800fe8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fe90:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 800fe94:	ed5f 7a69 	vldr	s15, [pc, #-420]	; 800fcf4 <processFlightCommands+0x32c>
 800fe98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fe9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea4:	bfd4      	ite	le
 800fea6:	2300      	movle	r3, #0
 800fea8:	2301      	movgt	r3, #1
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	2b00      	cmp	r3, #0
 800feae:	d034      	beq.n	800ff1a <processFlightCommands+0x552>
 800feb0:	f240 73fa 	movw	r3, #2042	; 0x7fa
 800feb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800feb8:	781b      	ldrb	r3, [r3, #0]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d12d      	bne.n	800ff1a <processFlightCommands+0x552>
 800febe:	f240 737d 	movw	r3, #1917	; 0x77d
 800fec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fec6:	781b      	ldrb	r3, [r3, #0]
 800fec8:	2b01      	cmp	r3, #1
 800feca:	d126      	bne.n	800ff1a <processFlightCommands+0x552>
		{
			armingTimer++;
 800fecc:	f240 73fb 	movw	r3, #2043	; 0x7fb
 800fed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	f103 0301 	add.w	r3, r3, #1
 800feda:	b2da      	uxtb	r2, r3
 800fedc:	f240 73fb 	movw	r3, #2043	; 0x7fb
 800fee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fee4:	701a      	strb	r2, [r3, #0]

			if ( armingTimer > 50 )
 800fee6:	f240 73fb 	movw	r3, #2043	; 0x7fb
 800feea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	2b32      	cmp	r3, #50	; 0x32
 800fef2:	d919      	bls.n	800ff28 <processFlightCommands+0x560>
			{
				zeroPIDintegralError();
 800fef4:	f004 ff28 	bl	8014d48 <zeroPIDintegralError>
				zeroPIDstates();
 800fef8:	f004 ff7c 	bl	8014df4 <zeroPIDstates>
				armed = true;
 800fefc:	f240 73fa 	movw	r3, #2042	; 0x7fa
 800ff00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff04:	f04f 0201 	mov.w	r2, #1
 800ff08:	701a      	strb	r2, [r3, #0]
				armingTimer = 0;
 800ff0a:	f240 73fb 	movw	r3, #2043	; 0x7fb
 800ff0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff12:	f04f 0200 	mov.w	r2, #0
 800ff16:	701a      	strb	r2, [r3, #0]
		// Check for arm command ( low throttle, right yaw), must be present for 1 sec before arming
		if ((rxCommand[YAW] > (eepromConfig.maxCheck - MIDCOMMAND) ) && (armed == false) && (execUp == true))
		{
			armingTimer++;

			if ( armingTimer > 50 )
 800ff18:	e006      	b.n	800ff28 <processFlightCommands+0x560>
				armingTimer = 0;
			}
		}
		else
		{
			armingTimer = 0;
 800ff1a:	f240 73fb 	movw	r3, #2043	; 0x7fb
 800ff1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff22:	f04f 0200 	mov.w	r2, #0
 800ff26:	701a      	strb	r2, [r3, #0]
	}

	///////////////////////////////////

	// Check for armed true and throttle command > minThrottle
    if ((armed == true) && (rxCommand[THROTTLE] > eepromConfig.minThrottle))
 800ff28:	f240 73fa 	movw	r3, #2042	; 0x7fa
 800ff2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	2b01      	cmp	r3, #1
 800ff34:	d11d      	bne.n	800ff72 <processFlightCommands+0x5aa>
 800ff36:	f240 0388 	movw	r3, #136	; 0x88
 800ff3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff3e:	ed93 7a03 	vldr	s14, [r3, #12]
 800ff42:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 800ff46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff4a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800ff4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ff52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff56:	bfd4      	ite	le
 800ff58:	2300      	movle	r3, #0
 800ff5a:	2301      	movgt	r3, #1
 800ff5c:	b2db      	uxtb	r3, r3
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d007      	beq.n	800ff72 <processFlightCommands+0x5aa>
    	holdIntegrators = false;
 800ff62:	f240 03dc 	movw	r3, #220	; 0xdc
 800ff66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff6a:	f04f 0200 	mov.w	r2, #0
 800ff6e:	701a      	strb	r2, [r3, #0]
 800ff70:	e006      	b.n	800ff80 <processFlightCommands+0x5b8>
    else
    	holdIntegrators = true;
 800ff72:	f240 03dc 	movw	r3, #220	; 0xdc
 800ff76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff7a:	f04f 0201 	mov.w	r2, #1
 800ff7e:	701a      	strb	r2, [r3, #0]

    ///////////////////////////////////

    // Check AUX1 for rate, attitude, or GPS mode (3 Position Switch) NOT COMPLETE YET....

	if ((rxCommand[AUX1] > MIDCOMMAND) && (flightMode == RATE))
 800ff80:	f240 0388 	movw	r3, #136	; 0x88
 800ff84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff88:	ed93 7a04 	vldr	s14, [r3, #16]
 800ff8c:	ed5f 7aa7 	vldr	s15, [pc, #-668]	; 800fcf4 <processFlightCommands+0x32c>
 800ff90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ff94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff98:	bfd4      	ite	le
 800ff9a:	2300      	movle	r3, #0
 800ff9c:	2301      	movgt	r3, #1
 800ff9e:	b2db      	uxtb	r3, r3
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d02c      	beq.n	800fffe <processFlightCommands+0x636>
 800ffa4:	f240 73f8 	movw	r3, #2040	; 0x7f8
 800ffa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d125      	bne.n	800fffe <processFlightCommands+0x636>
	{
		flightMode = ATTITUDE;
 800ffb2:	f240 73f8 	movw	r3, #2040	; 0x7f8
 800ffb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ffba:	f04f 0201 	mov.w	r2, #1
 800ffbe:	701a      	strb	r2, [r3, #0]
		setPIDintegralError(ROLL_ATT_PID,  0.0f);
 800ffc0:	f04f 0003 	mov.w	r0, #3
 800ffc4:	496d      	ldr	r1, [pc, #436]	; (801017c <processFlightCommands+0x7b4>)
 800ffc6:	f004 fea7 	bl	8014d18 <setPIDintegralError>
		setPIDintegralError(PITCH_ATT_PID, 0.0f);
 800ffca:	f04f 0004 	mov.w	r0, #4
 800ffce:	496b      	ldr	r1, [pc, #428]	; (801017c <processFlightCommands+0x7b4>)
 800ffd0:	f004 fea2 	bl	8014d18 <setPIDintegralError>
		setPIDintegralError(HEADING_PID,   0.0f);
 800ffd4:	f04f 0005 	mov.w	r0, #5
 800ffd8:	4968      	ldr	r1, [pc, #416]	; (801017c <processFlightCommands+0x7b4>)
 800ffda:	f004 fe9d 	bl	8014d18 <setPIDintegralError>
		setPIDstates(ROLL_ATT_PID,  0.0f);
 800ffde:	f04f 0003 	mov.w	r0, #3
 800ffe2:	4966      	ldr	r1, [pc, #408]	; (801017c <processFlightCommands+0x7b4>)
 800ffe4:	f004 fecc 	bl	8014d80 <setPIDstates>
		setPIDstates(PITCH_ATT_PID, 0.0f);
 800ffe8:	f04f 0004 	mov.w	r0, #4
 800ffec:	4963      	ldr	r1, [pc, #396]	; (801017c <processFlightCommands+0x7b4>)
 800ffee:	f004 fec7 	bl	8014d80 <setPIDstates>
		setPIDstates(HEADING_PID,   0.0f);
 800fff2:	f04f 0005 	mov.w	r0, #5
 800fff6:	4961      	ldr	r1, [pc, #388]	; (801017c <processFlightCommands+0x7b4>)
 800fff8:	f004 fec2 	bl	8014d80 <setPIDstates>
 800fffc:	e03d      	b.n	801007a <processFlightCommands+0x6b2>
	}
	else if ((rxCommand[AUX1] <= MIDCOMMAND) && (flightMode == ATTITUDE))
 800fffe:	f240 0388 	movw	r3, #136	; 0x88
 8010002:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010006:	ed93 7a04 	vldr	s14, [r3, #16]
 801000a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8010178 <processFlightCommands+0x7b0>
 801000e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010016:	bf8c      	ite	hi
 8010018:	2300      	movhi	r3, #0
 801001a:	2301      	movls	r3, #1
 801001c:	b2db      	uxtb	r3, r3
 801001e:	2b00      	cmp	r3, #0
 8010020:	d02b      	beq.n	801007a <processFlightCommands+0x6b2>
 8010022:	f240 73f8 	movw	r3, #2040	; 0x7f8
 8010026:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	2b01      	cmp	r3, #1
 801002e:	d124      	bne.n	801007a <processFlightCommands+0x6b2>
	{
		flightMode = RATE;
 8010030:	f240 73f8 	movw	r3, #2040	; 0x7f8
 8010034:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010038:	f04f 0200 	mov.w	r2, #0
 801003c:	701a      	strb	r2, [r3, #0]
		setPIDintegralError(ROLL_RATE_PID,  0.0f);
 801003e:	f04f 0000 	mov.w	r0, #0
 8010042:	494e      	ldr	r1, [pc, #312]	; (801017c <processFlightCommands+0x7b4>)
 8010044:	f004 fe68 	bl	8014d18 <setPIDintegralError>
		setPIDintegralError(PITCH_RATE_PID, 0.0f);
 8010048:	f04f 0001 	mov.w	r0, #1
 801004c:	494b      	ldr	r1, [pc, #300]	; (801017c <processFlightCommands+0x7b4>)
 801004e:	f004 fe63 	bl	8014d18 <setPIDintegralError>
		setPIDintegralError(YAW_RATE_PID,   0.0f);
 8010052:	f04f 0002 	mov.w	r0, #2
 8010056:	4949      	ldr	r1, [pc, #292]	; (801017c <processFlightCommands+0x7b4>)
 8010058:	f004 fe5e 	bl	8014d18 <setPIDintegralError>
		setPIDstates(ROLL_RATE_PID,  0.0f);
 801005c:	f04f 0000 	mov.w	r0, #0
 8010060:	4946      	ldr	r1, [pc, #280]	; (801017c <processFlightCommands+0x7b4>)
 8010062:	f004 fe8d 	bl	8014d80 <setPIDstates>
		setPIDstates(PITCH_RATE_PID, 0.0f);
 8010066:	f04f 0001 	mov.w	r0, #1
 801006a:	4944      	ldr	r1, [pc, #272]	; (801017c <processFlightCommands+0x7b4>)
 801006c:	f004 fe88 	bl	8014d80 <setPIDstates>
		setPIDstates(YAW_RATE_PID,   0.0f);
 8010070:	f04f 0002 	mov.w	r0, #2
 8010074:	4941      	ldr	r1, [pc, #260]	; (801017c <processFlightCommands+0x7b4>)
 8010076:	f004 fe83 	bl	8014d80 <setPIDstates>
	}

	///////////////////////////////////

	if ((commandInDetent[YAW] == true) && (flightMode == ATTITUDE))
 801007a:	f240 03a8 	movw	r3, #168	; 0xa8
 801007e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010082:	789b      	ldrb	r3, [r3, #2]
 8010084:	2b01      	cmp	r3, #1
 8010086:	d10e      	bne.n	80100a6 <processFlightCommands+0x6de>
 8010088:	f240 73f8 	movw	r3, #2040	; 0x7f8
 801008c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010090:	781b      	ldrb	r3, [r3, #0]
 8010092:	2b01      	cmp	r3, #1
 8010094:	d107      	bne.n	80100a6 <processFlightCommands+0x6de>
	    headingHoldEngaged = true;
 8010096:	f240 73f9 	movw	r3, #2041	; 0x7f9
 801009a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801009e:	f04f 0201 	mov.w	r2, #1
 80100a2:	701a      	strb	r2, [r3, #0]
 80100a4:	e006      	b.n	80100b4 <processFlightCommands+0x6ec>
	else
	    headingHoldEngaged = false;
 80100a6:	f240 73f9 	movw	r3, #2041	; 0x7f9
 80100aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80100ae:	f04f 0200 	mov.w	r2, #0
 80100b2:	701a      	strb	r2, [r3, #0]

	///////////////////////////////////

	// Check AUX2 for altitude hold mode (2 Position Switch)

	if ((rxCommand[AUX2] > MIDCOMMAND) && (previousAUX2State <= MIDCOMMAND))      // Rising edge detection
 80100b4:	f240 0388 	movw	r3, #136	; 0x88
 80100b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80100bc:	ed93 7a05 	vldr	s14, [r3, #20]
 80100c0:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8010178 <processFlightCommands+0x7b0>
 80100c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100cc:	bfd4      	ite	le
 80100ce:	2300      	movle	r3, #0
 80100d0:	2301      	movgt	r3, #1
 80100d2:	b2db      	uxtb	r3, r3
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d01a      	beq.n	801010e <processFlightCommands+0x746>
 80100d8:	f240 03b0 	movw	r3, #176	; 0xb0
 80100dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80100e0:	881a      	ldrh	r2, [r3, #0]
 80100e2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d811      	bhi.n	801010e <processFlightCommands+0x746>
	{
		altitudeHoldState = ENGAGED;
 80100ea:	f240 73fc 	movw	r3, #2044	; 0x7fc
 80100ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80100f2:	f04f 0201 	mov.w	r2, #1
 80100f6:	701a      	strb	r2, [r3, #0]
		altitudeHoldThrottleValue = rxCommand[THROTTLE];
 80100f8:	f240 0388 	movw	r3, #136	; 0x88
 80100fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010100:	68da      	ldr	r2, [r3, #12]
 8010102:	f640 0300 	movw	r3, #2048	; 0x800
 8010106:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801010a:	601a      	str	r2, [r3, #0]
 801010c:	e021      	b.n	8010152 <processFlightCommands+0x78a>
	}
	else if ((rxCommand[AUX2] <= MIDCOMMAND) && (previousAUX2State > MIDCOMMAND)) // Falling edge detection
 801010e:	f240 0388 	movw	r3, #136	; 0x88
 8010112:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010116:	ed93 7a05 	vldr	s14, [r3, #20]
 801011a:	eddf 7a17 	vldr	s15, [pc, #92]	; 8010178 <processFlightCommands+0x7b0>
 801011e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010126:	bf8c      	ite	hi
 8010128:	2300      	movhi	r3, #0
 801012a:	2301      	movls	r3, #1
 801012c:	b2db      	uxtb	r3, r3
 801012e:	2b00      	cmp	r3, #0
 8010130:	d00f      	beq.n	8010152 <processFlightCommands+0x78a>
 8010132:	f240 03b0 	movw	r3, #176	; 0xb0
 8010136:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801013a:	881a      	ldrh	r2, [r3, #0]
 801013c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8010140:	429a      	cmp	r2, r3
 8010142:	d906      	bls.n	8010152 <processFlightCommands+0x78a>
	{
		altitudeHoldState = DISENGAGED;
 8010144:	f240 73fc 	movw	r3, #2044	; 0x7fc
 8010148:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801014c:	f04f 0200 	mov.w	r2, #0
 8010150:	701a      	strb	r2, [r3, #0]
	}

	previousAUX2State = rxCommand[AUX2];
 8010152:	f240 0388 	movw	r3, #136	; 0x88
 8010156:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801015a:	edd3 7a05 	vldr	s15, [r3, #20]
 801015e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010162:	ee17 3a90 	vmov	r3, s15
 8010166:	b29a      	uxth	r2, r3
 8010168:	f240 03b0 	movw	r3, #176	; 0xb0
 801016c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010170:	801a      	strh	r2, [r3, #0]


	///////////////////////////////////
}
 8010172:	b002      	add	sp, #8
 8010174:	bd10      	pop	{r4, pc}
 8010176:	bf00      	nop
 8010178:	453b8000 	.word	0x453b8000
 801017c:	00000000 	.word	0x00000000

08010180 <vectorDotProduct>:
//
//  Call as: vectorDotProduct(m, a, b)
///////////////////////////////////////////////////////////////////////////////

float vectorDotProduct(int length, float vector1[], float vector2[])
{
 8010180:	b086      	sub	sp, #24
 8010182:	9003      	str	r0, [sp, #12]
 8010184:	9102      	str	r1, [sp, #8]
 8010186:	9201      	str	r2, [sp, #4]
  float dotProduct = 0;
 8010188:	4b16      	ldr	r3, [pc, #88]	; (80101e4 <vectorDotProduct+0x64>)
 801018a:	9305      	str	r3, [sp, #20]
  uint8_t i;

  for (i = 0; i < length; i++)
 801018c:	f04f 0300 	mov.w	r3, #0
 8010190:	f88d 3013 	strb.w	r3, [sp, #19]
 8010194:	e01d      	b.n	80101d2 <vectorDotProduct+0x52>
  {
  dotProduct += vector1[i] * vector2[i];
 8010196:	f89d 3013 	ldrb.w	r3, [sp, #19]
 801019a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801019e:	9a02      	ldr	r2, [sp, #8]
 80101a0:	18d3      	adds	r3, r2, r3
 80101a2:	ed93 7a00 	vldr	s14, [r3]
 80101a6:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80101aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80101ae:	9a01      	ldr	r2, [sp, #4]
 80101b0:	18d3      	adds	r3, r2, r3
 80101b2:	edd3 7a00 	vldr	s15, [r3]
 80101b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101ba:	ed9d 7a05 	vldr	s14, [sp, #20]
 80101be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101c2:	edcd 7a05 	vstr	s15, [sp, #20]
float vectorDotProduct(int length, float vector1[], float vector2[])
{
  float dotProduct = 0;
  uint8_t i;

  for (i = 0; i < length; i++)
 80101c6:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80101ca:	f103 0301 	add.w	r3, r3, #1
 80101ce:	f88d 3013 	strb.w	r3, [sp, #19]
 80101d2:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80101d6:	9b03      	ldr	r3, [sp, #12]
 80101d8:	429a      	cmp	r2, r3
 80101da:	dbdc      	blt.n	8010196 <vectorDotProduct+0x16>
  {
  dotProduct += vector1[i] * vector2[i];
  }

  return dotProduct;
 80101dc:	9b05      	ldr	r3, [sp, #20]
}
 80101de:	4618      	mov	r0, r3
 80101e0:	b006      	add	sp, #24
 80101e2:	4770      	bx	lr
 80101e4:	00000000 	.word	0x00000000

080101e8 <vectorCrossProduct>:
//
//  Call as: vectorDotProduct(c, a, b)
///////////////////////////////////////////////////////////////////////////////

void vectorCrossProduct(float vectorC[3], float vectorA[3], float vectorB[3])
{
 80101e8:	b084      	sub	sp, #16
 80101ea:	9003      	str	r0, [sp, #12]
 80101ec:	9102      	str	r1, [sp, #8]
 80101ee:	9201      	str	r2, [sp, #4]
  vectorC[0] = (vectorA[1] * vectorB[2]) - (vectorA[2] * vectorB[1]);
 80101f0:	9b02      	ldr	r3, [sp, #8]
 80101f2:	f103 0304 	add.w	r3, r3, #4
 80101f6:	ed93 7a00 	vldr	s14, [r3]
 80101fa:	9b01      	ldr	r3, [sp, #4]
 80101fc:	f103 0308 	add.w	r3, r3, #8
 8010200:	edd3 7a00 	vldr	s15, [r3]
 8010204:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010208:	9b02      	ldr	r3, [sp, #8]
 801020a:	f103 0308 	add.w	r3, r3, #8
 801020e:	edd3 6a00 	vldr	s13, [r3]
 8010212:	9b01      	ldr	r3, [sp, #4]
 8010214:	f103 0304 	add.w	r3, r3, #4
 8010218:	edd3 7a00 	vldr	s15, [r3]
 801021c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010224:	9b03      	ldr	r3, [sp, #12]
 8010226:	edc3 7a00 	vstr	s15, [r3]
  vectorC[1] = (vectorA[2] * vectorB[0]) - (vectorA[0] * vectorB[2]);
 801022a:	9b03      	ldr	r3, [sp, #12]
 801022c:	f103 0304 	add.w	r3, r3, #4
 8010230:	9a02      	ldr	r2, [sp, #8]
 8010232:	f102 0208 	add.w	r2, r2, #8
 8010236:	ed92 7a00 	vldr	s14, [r2]
 801023a:	9a01      	ldr	r2, [sp, #4]
 801023c:	edd2 7a00 	vldr	s15, [r2]
 8010240:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010244:	9a02      	ldr	r2, [sp, #8]
 8010246:	edd2 6a00 	vldr	s13, [r2]
 801024a:	9a01      	ldr	r2, [sp, #4]
 801024c:	f102 0208 	add.w	r2, r2, #8
 8010250:	edd2 7a00 	vldr	s15, [r2]
 8010254:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010258:	ee77 7a67 	vsub.f32	s15, s14, s15
 801025c:	edc3 7a00 	vstr	s15, [r3]
  vectorC[2] = (vectorA[0] * vectorB[1]) - (vectorA[1] * vectorB[0]);
 8010260:	9b03      	ldr	r3, [sp, #12]
 8010262:	f103 0308 	add.w	r3, r3, #8
 8010266:	9a02      	ldr	r2, [sp, #8]
 8010268:	ed92 7a00 	vldr	s14, [r2]
 801026c:	9a01      	ldr	r2, [sp, #4]
 801026e:	f102 0204 	add.w	r2, r2, #4
 8010272:	edd2 7a00 	vldr	s15, [r2]
 8010276:	ee27 7a27 	vmul.f32	s14, s14, s15
 801027a:	9a02      	ldr	r2, [sp, #8]
 801027c:	f102 0204 	add.w	r2, r2, #4
 8010280:	edd2 6a00 	vldr	s13, [r2]
 8010284:	9a01      	ldr	r2, [sp, #4]
 8010286:	edd2 7a00 	vldr	s15, [r2]
 801028a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801028e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010292:	edc3 7a00 	vstr	s15, [r3]
}
 8010296:	b004      	add	sp, #16
 8010298:	4770      	bx	lr
 801029a:	bf00      	nop

0801029c <vectorScale>:
//
//  Call as: vectorScale(m, b, a, scalar)
///////////////////////////////////////////////////////////////////////////////

void vectorScale(int length, float scaledVector[], float inputVector[], float scalar)
{
 801029c:	b086      	sub	sp, #24
 801029e:	9003      	str	r0, [sp, #12]
 80102a0:	9102      	str	r1, [sp, #8]
 80102a2:	9201      	str	r2, [sp, #4]
 80102a4:	9300      	str	r3, [sp, #0]
  uint8_t i;

  for (i = 0; i < length; i++)
 80102a6:	f04f 0300 	mov.w	r3, #0
 80102aa:	f88d 3017 	strb.w	r3, [sp, #23]
 80102ae:	e019      	b.n	80102e4 <vectorScale+0x48>
  {
   scaledVector[i] = inputVector[i] * scalar;
 80102b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80102b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80102b8:	9a02      	ldr	r2, [sp, #8]
 80102ba:	18d3      	adds	r3, r2, r3
 80102bc:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80102c0:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80102c4:	9901      	ldr	r1, [sp, #4]
 80102c6:	188a      	adds	r2, r1, r2
 80102c8:	ed92 7a00 	vldr	s14, [r2]
 80102cc:	eddd 7a00 	vldr	s15, [sp]
 80102d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102d4:	edc3 7a00 	vstr	s15, [r3]

void vectorScale(int length, float scaledVector[], float inputVector[], float scalar)
{
  uint8_t i;

  for (i = 0; i < length; i++)
 80102d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80102dc:	f103 0301 	add.w	r3, r3, #1
 80102e0:	f88d 3017 	strb.w	r3, [sp, #23]
 80102e4:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80102e8:	9b03      	ldr	r3, [sp, #12]
 80102ea:	429a      	cmp	r2, r3
 80102ec:	dbe0      	blt.n	80102b0 <vectorScale+0x14>
  {
   scaledVector[i] = inputVector[i] * scalar;
  }
}
 80102ee:	b006      	add	sp, #24
 80102f0:	4770      	bx	lr
 80102f2:	bf00      	nop

080102f4 <vectorAdd>:
//
//  Call as: vectorAdd(m, c, b, a)
///////////////////////////////////////////////////////////////////////////////

void vectorAdd(int length, float vectorC[], float vectorA[], float vectorB[])
{
 80102f4:	b086      	sub	sp, #24
 80102f6:	9003      	str	r0, [sp, #12]
 80102f8:	9102      	str	r1, [sp, #8]
 80102fa:	9201      	str	r2, [sp, #4]
 80102fc:	9300      	str	r3, [sp, #0]
  uint8_t i;

  for(i = 0; i < length; i++)
 80102fe:	f04f 0300 	mov.w	r3, #0
 8010302:	f88d 3017 	strb.w	r3, [sp, #23]
 8010306:	e01f      	b.n	8010348 <vectorAdd+0x54>
  {
     vectorC[i] = vectorA[i] + vectorB[i];
 8010308:	f89d 3017 	ldrb.w	r3, [sp, #23]
 801030c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010310:	9a02      	ldr	r2, [sp, #8]
 8010312:	18d3      	adds	r3, r2, r3
 8010314:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010318:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801031c:	9901      	ldr	r1, [sp, #4]
 801031e:	188a      	adds	r2, r1, r2
 8010320:	ed92 7a00 	vldr	s14, [r2]
 8010324:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010328:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801032c:	9900      	ldr	r1, [sp, #0]
 801032e:	188a      	adds	r2, r1, r2
 8010330:	edd2 7a00 	vldr	s15, [r2]
 8010334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010338:	edc3 7a00 	vstr	s15, [r3]

void vectorAdd(int length, float vectorC[], float vectorA[], float vectorB[])
{
  uint8_t i;

  for(i = 0; i < length; i++)
 801033c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8010340:	f103 0301 	add.w	r3, r3, #1
 8010344:	f88d 3017 	strb.w	r3, [sp, #23]
 8010348:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801034c:	9b03      	ldr	r3, [sp, #12]
 801034e:	429a      	cmp	r2, r3
 8010350:	dbda      	blt.n	8010308 <vectorAdd+0x14>
  {
     vectorC[i] = vectorA[i] + vectorB[i];
  }
}
 8010352:	b006      	add	sp, #24
 8010354:	4770      	bx	lr
 8010356:	bf00      	nop

08010358 <vectorSubtract>:
//
//  Call as: vectorSubtract(m, c, b, a)
///////////////////////////////////////////////////////////////////////////////

void vectorSubtract(int length, float vectorC[], float vectorA[], float vectorB[])
{
 8010358:	b086      	sub	sp, #24
 801035a:	9003      	str	r0, [sp, #12]
 801035c:	9102      	str	r1, [sp, #8]
 801035e:	9201      	str	r2, [sp, #4]
 8010360:	9300      	str	r3, [sp, #0]
  uint8_t i;

  for(i = 0; i < length; i++)
 8010362:	f04f 0300 	mov.w	r3, #0
 8010366:	f88d 3017 	strb.w	r3, [sp, #23]
 801036a:	e01f      	b.n	80103ac <vectorSubtract+0x54>
  {
     vectorC[i] = vectorA[i] - vectorB[i];
 801036c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8010370:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010374:	9a02      	ldr	r2, [sp, #8]
 8010376:	18d3      	adds	r3, r2, r3
 8010378:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801037c:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8010380:	9901      	ldr	r1, [sp, #4]
 8010382:	188a      	adds	r2, r1, r2
 8010384:	ed92 7a00 	vldr	s14, [r2]
 8010388:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801038c:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8010390:	9900      	ldr	r1, [sp, #0]
 8010392:	188a      	adds	r2, r1, r2
 8010394:	edd2 7a00 	vldr	s15, [r2]
 8010398:	ee77 7a67 	vsub.f32	s15, s14, s15
 801039c:	edc3 7a00 	vstr	s15, [r3]

void vectorSubtract(int length, float vectorC[], float vectorA[], float vectorB[])
{
  uint8_t i;

  for(i = 0; i < length; i++)
 80103a0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80103a4:	f103 0301 	add.w	r3, r3, #1
 80103a8:	f88d 3017 	strb.w	r3, [sp, #23]
 80103ac:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80103b0:	9b03      	ldr	r3, [sp, #12]
 80103b2:	429a      	cmp	r2, r3
 80103b4:	dbda      	blt.n	801036c <vectorSubtract+0x14>
  {
     vectorC[i] = vectorA[i] - vectorB[i];
  }
}
 80103b6:	b006      	add	sp, #24
 80103b8:	4770      	bx	lr
 80103ba:	bf00      	nop

080103bc <matrixMultiply>:
//
//  Call as: matrixMultiply(m, n, p, C, A, B)
///////////////////////////////////////////////////////////////////////////////

void matrixMultiply(int aRows, int aCols_bRows, int bCols, float matrixC[], float matrixA[], float matrixB[])
{
 80103bc:	b086      	sub	sp, #24
 80103be:	9003      	str	r0, [sp, #12]
 80103c0:	9102      	str	r1, [sp, #8]
 80103c2:	9201      	str	r2, [sp, #4]
 80103c4:	9300      	str	r3, [sp, #0]
  uint8_t i, j, k;

  for (i = 0; i < aRows * bCols; i++)
 80103c6:	f04f 0300 	mov.w	r3, #0
 80103ca:	f88d 3017 	strb.w	r3, [sp, #23]
 80103ce:	e00d      	b.n	80103ec <matrixMultiply+0x30>
  {
    matrixC[i] = 0.0;
 80103d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80103d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80103d8:	9a00      	ldr	r2, [sp, #0]
 80103da:	18d3      	adds	r3, r2, r3
 80103dc:	4a3e      	ldr	r2, [pc, #248]	; (80104d8 <matrixMultiply+0x11c>)
 80103de:	601a      	str	r2, [r3, #0]

void matrixMultiply(int aRows, int aCols_bRows, int bCols, float matrixC[], float matrixA[], float matrixB[])
{
  uint8_t i, j, k;

  for (i = 0; i < aRows * bCols; i++)
 80103e0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80103e4:	f103 0301 	add.w	r3, r3, #1
 80103e8:	f88d 3017 	strb.w	r3, [sp, #23]
 80103ec:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80103f0:	9b03      	ldr	r3, [sp, #12]
 80103f2:	9901      	ldr	r1, [sp, #4]
 80103f4:	fb01 f303 	mul.w	r3, r1, r3
 80103f8:	429a      	cmp	r2, r3
 80103fa:	dbe9      	blt.n	80103d0 <matrixMultiply+0x14>
  {
    matrixC[i] = 0.0;
  }

  for (i = 0; i < aRows; i++)
 80103fc:	f04f 0300 	mov.w	r3, #0
 8010400:	f88d 3017 	strb.w	r3, [sp, #23]
 8010404:	e061      	b.n	80104ca <matrixMultiply+0x10e>
  {
    for(j = 0; j < aCols_bRows; j++)
 8010406:	f04f 0300 	mov.w	r3, #0
 801040a:	f88d 3016 	strb.w	r3, [sp, #22]
 801040e:	e051      	b.n	80104b4 <matrixMultiply+0xf8>
    {
      for(k = 0;  k < bCols; k++)
 8010410:	f04f 0300 	mov.w	r3, #0
 8010414:	f88d 3015 	strb.w	r3, [sp, #21]
 8010418:	e041      	b.n	801049e <matrixMultiply+0xe2>
      {
       matrixC[i * bCols + k] += matrixA[i * aCols_bRows + j] * matrixB[j * bCols + k];
 801041a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 801041e:	9a01      	ldr	r2, [sp, #4]
 8010420:	fb02 f203 	mul.w	r2, r2, r3
 8010424:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8010428:	18d3      	adds	r3, r2, r3
 801042a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801042e:	9a00      	ldr	r2, [sp, #0]
 8010430:	18d3      	adds	r3, r2, r3
 8010432:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010436:	9901      	ldr	r1, [sp, #4]
 8010438:	fb01 f102 	mul.w	r1, r1, r2
 801043c:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8010440:	188a      	adds	r2, r1, r2
 8010442:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8010446:	9900      	ldr	r1, [sp, #0]
 8010448:	188a      	adds	r2, r1, r2
 801044a:	ed92 7a00 	vldr	s14, [r2]
 801044e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010452:	9902      	ldr	r1, [sp, #8]
 8010454:	fb01 f102 	mul.w	r1, r1, r2
 8010458:	f89d 2016 	ldrb.w	r2, [sp, #22]
 801045c:	188a      	adds	r2, r1, r2
 801045e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8010462:	9906      	ldr	r1, [sp, #24]
 8010464:	188a      	adds	r2, r1, r2
 8010466:	edd2 6a00 	vldr	s13, [r2]
 801046a:	f89d 2016 	ldrb.w	r2, [sp, #22]
 801046e:	9901      	ldr	r1, [sp, #4]
 8010470:	fb01 f102 	mul.w	r1, r1, r2
 8010474:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8010478:	188a      	adds	r2, r1, r2
 801047a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801047e:	9907      	ldr	r1, [sp, #28]
 8010480:	188a      	adds	r2, r1, r2
 8010482:	edd2 7a00 	vldr	s15, [r2]
 8010486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801048a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801048e:	edc3 7a00 	vstr	s15, [r3]

  for (i = 0; i < aRows; i++)
  {
    for(j = 0; j < aCols_bRows; j++)
    {
      for(k = 0;  k < bCols; k++)
 8010492:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8010496:	f103 0301 	add.w	r3, r3, #1
 801049a:	f88d 3015 	strb.w	r3, [sp, #21]
 801049e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80104a2:	9b01      	ldr	r3, [sp, #4]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	dbb8      	blt.n	801041a <matrixMultiply+0x5e>
    matrixC[i] = 0.0;
  }

  for (i = 0; i < aRows; i++)
  {
    for(j = 0; j < aCols_bRows; j++)
 80104a8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80104ac:	f103 0301 	add.w	r3, r3, #1
 80104b0:	f88d 3016 	strb.w	r3, [sp, #22]
 80104b4:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80104b8:	9b02      	ldr	r3, [sp, #8]
 80104ba:	429a      	cmp	r2, r3
 80104bc:	dba8      	blt.n	8010410 <matrixMultiply+0x54>
  for (i = 0; i < aRows * bCols; i++)
  {
    matrixC[i] = 0.0;
  }

  for (i = 0; i < aRows; i++)
 80104be:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80104c2:	f103 0301 	add.w	r3, r3, #1
 80104c6:	f88d 3017 	strb.w	r3, [sp, #23]
 80104ca:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80104ce:	9b03      	ldr	r3, [sp, #12]
 80104d0:	429a      	cmp	r2, r3
 80104d2:	db98      	blt.n	8010406 <matrixMultiply+0x4a>
      {
       matrixC[i * bCols + k] += matrixA[i * aCols_bRows + j] * matrixB[j * bCols + k];
      }
    }
  }
}
 80104d4:	b006      	add	sp, #24
 80104d6:	4770      	bx	lr
 80104d8:	00000000 	.word	0x00000000

080104dc <matrixAdd>:
//
//  Call as: matrixAdd(m, n, C, A, B)
///////////////////////////////////////////////////////////////////////////////

void matrixAdd(int rows, int cols, float matrixC[], float matrixA[], float matrixB[])
{
 80104dc:	b086      	sub	sp, #24
 80104de:	9003      	str	r0, [sp, #12]
 80104e0:	9102      	str	r1, [sp, #8]
 80104e2:	9201      	str	r2, [sp, #4]
 80104e4:	9300      	str	r3, [sp, #0]
  uint8_t i;

  for (i = 0; i < rows * cols; i++)
 80104e6:	f04f 0300 	mov.w	r3, #0
 80104ea:	f88d 3017 	strb.w	r3, [sp, #23]
 80104ee:	e01f      	b.n	8010530 <matrixAdd+0x54>
  {
    matrixC[i] = matrixA[i] + matrixB[i];
 80104f0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80104f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80104f8:	9a01      	ldr	r2, [sp, #4]
 80104fa:	18d3      	adds	r3, r2, r3
 80104fc:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010500:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8010504:	9900      	ldr	r1, [sp, #0]
 8010506:	188a      	adds	r2, r1, r2
 8010508:	ed92 7a00 	vldr	s14, [r2]
 801050c:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010510:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8010514:	9906      	ldr	r1, [sp, #24]
 8010516:	188a      	adds	r2, r1, r2
 8010518:	edd2 7a00 	vldr	s15, [r2]
 801051c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010520:	edc3 7a00 	vstr	s15, [r3]

void matrixAdd(int rows, int cols, float matrixC[], float matrixA[], float matrixB[])
{
  uint8_t i;

  for (i = 0; i < rows * cols; i++)
 8010524:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8010528:	f103 0301 	add.w	r3, r3, #1
 801052c:	f88d 3017 	strb.w	r3, [sp, #23]
 8010530:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010534:	9b03      	ldr	r3, [sp, #12]
 8010536:	9902      	ldr	r1, [sp, #8]
 8010538:	fb01 f303 	mul.w	r3, r1, r3
 801053c:	429a      	cmp	r2, r3
 801053e:	dbd7      	blt.n	80104f0 <matrixAdd+0x14>
  {
    matrixC[i] = matrixA[i] + matrixB[i];
  }
}
 8010540:	b006      	add	sp, #24
 8010542:	4770      	bx	lr

08010544 <matrixSubtract>:
//
//  Call as: matrixSubtract(m, n, C, A, B)
///////////////////////////////////////////////////////////////////////////////

void matrixSubtract(int rows, int cols, float matrixC[], float matrixA[], float matrixB[])
{
 8010544:	b086      	sub	sp, #24
 8010546:	9003      	str	r0, [sp, #12]
 8010548:	9102      	str	r1, [sp, #8]
 801054a:	9201      	str	r2, [sp, #4]
 801054c:	9300      	str	r3, [sp, #0]
  uint8_t i;

  for (i = 0; i < rows * cols; i++)
 801054e:	f04f 0300 	mov.w	r3, #0
 8010552:	f88d 3017 	strb.w	r3, [sp, #23]
 8010556:	e01f      	b.n	8010598 <matrixSubtract+0x54>
  {
    matrixC[i] = matrixA[i] - matrixB[i];
 8010558:	f89d 3017 	ldrb.w	r3, [sp, #23]
 801055c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010560:	9a01      	ldr	r2, [sp, #4]
 8010562:	18d3      	adds	r3, r2, r3
 8010564:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010568:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801056c:	9900      	ldr	r1, [sp, #0]
 801056e:	188a      	adds	r2, r1, r2
 8010570:	ed92 7a00 	vldr	s14, [r2]
 8010574:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010578:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801057c:	9906      	ldr	r1, [sp, #24]
 801057e:	188a      	adds	r2, r1, r2
 8010580:	edd2 7a00 	vldr	s15, [r2]
 8010584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010588:	edc3 7a00 	vstr	s15, [r3]

void matrixSubtract(int rows, int cols, float matrixC[], float matrixA[], float matrixB[])
{
  uint8_t i;

  for (i = 0; i < rows * cols; i++)
 801058c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8010590:	f103 0301 	add.w	r3, r3, #1
 8010594:	f88d 3017 	strb.w	r3, [sp, #23]
 8010598:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801059c:	9b03      	ldr	r3, [sp, #12]
 801059e:	9902      	ldr	r1, [sp, #8]
 80105a0:	fb01 f303 	mul.w	r3, r1, r3
 80105a4:	429a      	cmp	r2, r3
 80105a6:	dbd7      	blt.n	8010558 <matrixSubtract+0x14>
  {
    matrixC[i] = matrixA[i] - matrixB[i];
  }
}
 80105a8:	b006      	add	sp, #24
 80105aa:	4770      	bx	lr

080105ac <matrixScale>:
//
//  Call as: matrixScale(m, n, C, S, B)
///////////////////////////////////////////////////////////////////////////////

void matrixScale(int rows, int cols, float matrixC[], float scaler, float matrixA[])
{
 80105ac:	b086      	sub	sp, #24
 80105ae:	9003      	str	r0, [sp, #12]
 80105b0:	9102      	str	r1, [sp, #8]
 80105b2:	9201      	str	r2, [sp, #4]
 80105b4:	9300      	str	r3, [sp, #0]
  uint8_t i;

  for (i = 0; i < rows * cols; i++)
 80105b6:	f04f 0300 	mov.w	r3, #0
 80105ba:	f88d 3017 	strb.w	r3, [sp, #23]
 80105be:	e019      	b.n	80105f4 <matrixScale+0x48>
  {
    matrixC[i] = scaler * matrixA[i];
 80105c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80105c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80105c8:	9a01      	ldr	r2, [sp, #4]
 80105ca:	18d3      	adds	r3, r2, r3
 80105cc:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80105d0:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80105d4:	9906      	ldr	r1, [sp, #24]
 80105d6:	188a      	adds	r2, r1, r2
 80105d8:	ed92 7a00 	vldr	s14, [r2]
 80105dc:	eddd 7a00 	vldr	s15, [sp]
 80105e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105e4:	edc3 7a00 	vstr	s15, [r3]

void matrixScale(int rows, int cols, float matrixC[], float scaler, float matrixA[])
{
  uint8_t i;

  for (i = 0; i < rows * cols; i++)
 80105e8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80105ec:	f103 0301 	add.w	r3, r3, #1
 80105f0:	f88d 3017 	strb.w	r3, [sp, #23]
 80105f4:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80105f8:	9b03      	ldr	r3, [sp, #12]
 80105fa:	9902      	ldr	r1, [sp, #8]
 80105fc:	fb01 f303 	mul.w	r3, r1, r3
 8010600:	429a      	cmp	r2, r3
 8010602:	dbdd      	blt.n	80105c0 <matrixScale+0x14>
  {
    matrixC[i] = scaler * matrixA[i];
  }
}
 8010604:	b006      	add	sp, #24
 8010606:	4770      	bx	lr

08010608 <matrixTranspose3x3>:
//
//  Call as: Transpose3x3(C, A)
///////////////////////////////////////////////////////////////////////////////

void matrixTranspose3x3(float matrixC[9], float matrixA[9])
{
 8010608:	b082      	sub	sp, #8
 801060a:	9001      	str	r0, [sp, #4]
 801060c:	9100      	str	r1, [sp, #0]
  matrixC[0] = matrixA[0];
 801060e:	9b00      	ldr	r3, [sp, #0]
 8010610:	681a      	ldr	r2, [r3, #0]
 8010612:	9b01      	ldr	r3, [sp, #4]
 8010614:	601a      	str	r2, [r3, #0]
  matrixC[1] = matrixA[3];
 8010616:	9b01      	ldr	r3, [sp, #4]
 8010618:	f103 0304 	add.w	r3, r3, #4
 801061c:	9a00      	ldr	r2, [sp, #0]
 801061e:	68d2      	ldr	r2, [r2, #12]
 8010620:	601a      	str	r2, [r3, #0]
  matrixC[2] = matrixA[6];
 8010622:	9b01      	ldr	r3, [sp, #4]
 8010624:	f103 0308 	add.w	r3, r3, #8
 8010628:	9a00      	ldr	r2, [sp, #0]
 801062a:	6992      	ldr	r2, [r2, #24]
 801062c:	601a      	str	r2, [r3, #0]
  matrixC[3] = matrixA[1];
 801062e:	9b01      	ldr	r3, [sp, #4]
 8010630:	f103 030c 	add.w	r3, r3, #12
 8010634:	9a00      	ldr	r2, [sp, #0]
 8010636:	6852      	ldr	r2, [r2, #4]
 8010638:	601a      	str	r2, [r3, #0]
  matrixC[4] = matrixA[4];
 801063a:	9b01      	ldr	r3, [sp, #4]
 801063c:	f103 0310 	add.w	r3, r3, #16
 8010640:	9a00      	ldr	r2, [sp, #0]
 8010642:	6912      	ldr	r2, [r2, #16]
 8010644:	601a      	str	r2, [r3, #0]
  matrixC[5] = matrixA[7];
 8010646:	9b01      	ldr	r3, [sp, #4]
 8010648:	f103 0314 	add.w	r3, r3, #20
 801064c:	9a00      	ldr	r2, [sp, #0]
 801064e:	69d2      	ldr	r2, [r2, #28]
 8010650:	601a      	str	r2, [r3, #0]
  matrixC[6] = matrixA[2];
 8010652:	9b01      	ldr	r3, [sp, #4]
 8010654:	f103 0318 	add.w	r3, r3, #24
 8010658:	9a00      	ldr	r2, [sp, #0]
 801065a:	6892      	ldr	r2, [r2, #8]
 801065c:	601a      	str	r2, [r3, #0]
  matrixC[7] = matrixA[5];
 801065e:	9b01      	ldr	r3, [sp, #4]
 8010660:	f103 031c 	add.w	r3, r3, #28
 8010664:	9a00      	ldr	r2, [sp, #0]
 8010666:	6952      	ldr	r2, [r2, #20]
 8010668:	601a      	str	r2, [r3, #0]
  matrixC[8] = matrixA[8];
 801066a:	9b01      	ldr	r3, [sp, #4]
 801066c:	f103 0320 	add.w	r3, r3, #32
 8010670:	9a00      	ldr	r2, [sp, #0]
 8010672:	6a12      	ldr	r2, [r2, #32]
 8010674:	601a      	str	r2, [r3, #0]
}
 8010676:	b002      	add	sp, #8
 8010678:	4770      	bx	lr
 801067a:	bf00      	nop

0801067c <matrixInverse3x3>:
//
//  Call as: Inverse3x3(C, A)
///////////////////////////////////////////////////////////////////////////////

void matrixInverse3x3(float matrixC[9], float matrixA[9])
{
 801067c:	b500      	push	{lr}
 801067e:	b0a1      	sub	sp, #132	; 0x84
 8010680:	9003      	str	r0, [sp, #12]
 8010682:	9102      	str	r1, [sp, #8]
  float det;
  float transposeA[9];
  float minors[9];
  float transposeMinors[9];

  det = matrixA[0] * (matrixA[4] * matrixA[8] - matrixA[5] * matrixA[7]) -
 8010684:	9b02      	ldr	r3, [sp, #8]
 8010686:	edd3 6a00 	vldr	s13, [r3]
 801068a:	9b02      	ldr	r3, [sp, #8]
 801068c:	f103 0310 	add.w	r3, r3, #16
 8010690:	ed93 7a00 	vldr	s14, [r3]
 8010694:	9b02      	ldr	r3, [sp, #8]
 8010696:	f103 0320 	add.w	r3, r3, #32
 801069a:	edd3 7a00 	vldr	s15, [r3]
 801069e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80106a2:	9b02      	ldr	r3, [sp, #8]
 80106a4:	f103 0314 	add.w	r3, r3, #20
 80106a8:	ed93 6a00 	vldr	s12, [r3]
 80106ac:	9b02      	ldr	r3, [sp, #8]
 80106ae:	f103 031c 	add.w	r3, r3, #28
 80106b2:	edd3 7a00 	vldr	s15, [r3]
 80106b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80106ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106be:	ee26 7aa7 	vmul.f32	s14, s13, s15
        matrixA[1] * (matrixA[3] * matrixA[8] - matrixA[5] * matrixA[6]) +
 80106c2:	9b02      	ldr	r3, [sp, #8]
 80106c4:	f103 0304 	add.w	r3, r3, #4
 80106c8:	ed93 6a00 	vldr	s12, [r3]
 80106cc:	9b02      	ldr	r3, [sp, #8]
 80106ce:	f103 030c 	add.w	r3, r3, #12
 80106d2:	edd3 6a00 	vldr	s13, [r3]
 80106d6:	9b02      	ldr	r3, [sp, #8]
 80106d8:	f103 0320 	add.w	r3, r3, #32
 80106dc:	edd3 7a00 	vldr	s15, [r3]
 80106e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80106e4:	9b02      	ldr	r3, [sp, #8]
 80106e6:	f103 0314 	add.w	r3, r3, #20
 80106ea:	edd3 5a00 	vldr	s11, [r3]
 80106ee:	9b02      	ldr	r3, [sp, #8]
 80106f0:	f103 0318 	add.w	r3, r3, #24
 80106f4:	edd3 7a00 	vldr	s15, [r3]
 80106f8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80106fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010700:	ee66 7a27 	vmul.f32	s15, s12, s15
  float det;
  float transposeA[9];
  float minors[9];
  float transposeMinors[9];

  det = matrixA[0] * (matrixA[4] * matrixA[8] - matrixA[5] * matrixA[7]) -
 8010704:	ee77 6a67 	vsub.f32	s13, s14, s15
        matrixA[1] * (matrixA[3] * matrixA[8] - matrixA[5] * matrixA[6]) +
        matrixA[2] * (matrixA[3] * matrixA[7] - matrixA[4] * matrixA[6]);
 8010708:	9b02      	ldr	r3, [sp, #8]
 801070a:	f103 0308 	add.w	r3, r3, #8
 801070e:	ed93 6a00 	vldr	s12, [r3]
 8010712:	9b02      	ldr	r3, [sp, #8]
 8010714:	f103 030c 	add.w	r3, r3, #12
 8010718:	ed93 7a00 	vldr	s14, [r3]
 801071c:	9b02      	ldr	r3, [sp, #8]
 801071e:	f103 031c 	add.w	r3, r3, #28
 8010722:	edd3 7a00 	vldr	s15, [r3]
 8010726:	ee27 7a27 	vmul.f32	s14, s14, s15
 801072a:	9b02      	ldr	r3, [sp, #8]
 801072c:	f103 0310 	add.w	r3, r3, #16
 8010730:	edd3 5a00 	vldr	s11, [r3]
 8010734:	9b02      	ldr	r3, [sp, #8]
 8010736:	f103 0318 	add.w	r3, r3, #24
 801073a:	edd3 7a00 	vldr	s15, [r3]
 801073e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8010742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010746:	ee66 7a27 	vmul.f32	s15, s12, s15
  float det;
  float transposeA[9];
  float minors[9];
  float transposeMinors[9];

  det = matrixA[0] * (matrixA[4] * matrixA[8] - matrixA[5] * matrixA[7]) -
 801074a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801074e:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
        matrixA[1] * (matrixA[3] * matrixA[8] - matrixA[5] * matrixA[6]) +
        matrixA[2] * (matrixA[3] * matrixA[7] - matrixA[4] * matrixA[6]);

  matrixTranspose3x3(transposeA, matrixA);
 8010752:	ab16      	add	r3, sp, #88	; 0x58
 8010754:	4618      	mov	r0, r3
 8010756:	9902      	ldr	r1, [sp, #8]
 8010758:	f7ff ff56 	bl	8010608 <matrixTranspose3x3>

  minors[0] = matrixA[4] * matrixA[8] - matrixA[5] * matrixA[7];
 801075c:	9b02      	ldr	r3, [sp, #8]
 801075e:	f103 0310 	add.w	r3, r3, #16
 8010762:	ed93 7a00 	vldr	s14, [r3]
 8010766:	9b02      	ldr	r3, [sp, #8]
 8010768:	f103 0320 	add.w	r3, r3, #32
 801076c:	edd3 7a00 	vldr	s15, [r3]
 8010770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010774:	9b02      	ldr	r3, [sp, #8]
 8010776:	f103 0314 	add.w	r3, r3, #20
 801077a:	edd3 6a00 	vldr	s13, [r3]
 801077e:	9b02      	ldr	r3, [sp, #8]
 8010780:	f103 031c 	add.w	r3, r3, #28
 8010784:	edd3 7a00 	vldr	s15, [r3]
 8010788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801078c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010790:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
  minors[1] = matrixA[5] * matrixA[6] - matrixA[3] * matrixA[8];
 8010794:	9b02      	ldr	r3, [sp, #8]
 8010796:	f103 0314 	add.w	r3, r3, #20
 801079a:	ed93 7a00 	vldr	s14, [r3]
 801079e:	9b02      	ldr	r3, [sp, #8]
 80107a0:	f103 0318 	add.w	r3, r3, #24
 80107a4:	edd3 7a00 	vldr	s15, [r3]
 80107a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80107ac:	9b02      	ldr	r3, [sp, #8]
 80107ae:	f103 030c 	add.w	r3, r3, #12
 80107b2:	edd3 6a00 	vldr	s13, [r3]
 80107b6:	9b02      	ldr	r3, [sp, #8]
 80107b8:	f103 0320 	add.w	r3, r3, #32
 80107bc:	edd3 7a00 	vldr	s15, [r3]
 80107c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80107c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107c8:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
  minors[2] = matrixA[3] * matrixA[7] - matrixA[4] * matrixA[6];
 80107cc:	9b02      	ldr	r3, [sp, #8]
 80107ce:	f103 030c 	add.w	r3, r3, #12
 80107d2:	ed93 7a00 	vldr	s14, [r3]
 80107d6:	9b02      	ldr	r3, [sp, #8]
 80107d8:	f103 031c 	add.w	r3, r3, #28
 80107dc:	edd3 7a00 	vldr	s15, [r3]
 80107e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80107e4:	9b02      	ldr	r3, [sp, #8]
 80107e6:	f103 0310 	add.w	r3, r3, #16
 80107ea:	edd3 6a00 	vldr	s13, [r3]
 80107ee:	9b02      	ldr	r3, [sp, #8]
 80107f0:	f103 0318 	add.w	r3, r3, #24
 80107f4:	edd3 7a00 	vldr	s15, [r3]
 80107f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80107fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010800:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
  minors[3] = matrixA[2] * matrixA[7] - matrixA[1] * matrixA[8];
 8010804:	9b02      	ldr	r3, [sp, #8]
 8010806:	f103 0308 	add.w	r3, r3, #8
 801080a:	ed93 7a00 	vldr	s14, [r3]
 801080e:	9b02      	ldr	r3, [sp, #8]
 8010810:	f103 031c 	add.w	r3, r3, #28
 8010814:	edd3 7a00 	vldr	s15, [r3]
 8010818:	ee27 7a27 	vmul.f32	s14, s14, s15
 801081c:	9b02      	ldr	r3, [sp, #8]
 801081e:	f103 0304 	add.w	r3, r3, #4
 8010822:	edd3 6a00 	vldr	s13, [r3]
 8010826:	9b02      	ldr	r3, [sp, #8]
 8010828:	f103 0320 	add.w	r3, r3, #32
 801082c:	edd3 7a00 	vldr	s15, [r3]
 8010830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010838:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
  minors[4] = matrixA[0] * matrixA[8] - matrixA[2] * matrixA[6];
 801083c:	9b02      	ldr	r3, [sp, #8]
 801083e:	ed93 7a00 	vldr	s14, [r3]
 8010842:	9b02      	ldr	r3, [sp, #8]
 8010844:	f103 0320 	add.w	r3, r3, #32
 8010848:	edd3 7a00 	vldr	s15, [r3]
 801084c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010850:	9b02      	ldr	r3, [sp, #8]
 8010852:	f103 0308 	add.w	r3, r3, #8
 8010856:	edd3 6a00 	vldr	s13, [r3]
 801085a:	9b02      	ldr	r3, [sp, #8]
 801085c:	f103 0318 	add.w	r3, r3, #24
 8010860:	edd3 7a00 	vldr	s15, [r3]
 8010864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010868:	ee77 7a67 	vsub.f32	s15, s14, s15
 801086c:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
  minors[5] = matrixA[1] * matrixA[6] - matrixA[0] * matrixA[7];
 8010870:	9b02      	ldr	r3, [sp, #8]
 8010872:	f103 0304 	add.w	r3, r3, #4
 8010876:	ed93 7a00 	vldr	s14, [r3]
 801087a:	9b02      	ldr	r3, [sp, #8]
 801087c:	f103 0318 	add.w	r3, r3, #24
 8010880:	edd3 7a00 	vldr	s15, [r3]
 8010884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010888:	9b02      	ldr	r3, [sp, #8]
 801088a:	edd3 6a00 	vldr	s13, [r3]
 801088e:	9b02      	ldr	r3, [sp, #8]
 8010890:	f103 031c 	add.w	r3, r3, #28
 8010894:	edd3 7a00 	vldr	s15, [r3]
 8010898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801089c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108a0:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
  minors[6] = matrixA[1] * matrixA[5] - matrixA[2] * matrixA[4];
 80108a4:	9b02      	ldr	r3, [sp, #8]
 80108a6:	f103 0304 	add.w	r3, r3, #4
 80108aa:	ed93 7a00 	vldr	s14, [r3]
 80108ae:	9b02      	ldr	r3, [sp, #8]
 80108b0:	f103 0314 	add.w	r3, r3, #20
 80108b4:	edd3 7a00 	vldr	s15, [r3]
 80108b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80108bc:	9b02      	ldr	r3, [sp, #8]
 80108be:	f103 0308 	add.w	r3, r3, #8
 80108c2:	edd3 6a00 	vldr	s13, [r3]
 80108c6:	9b02      	ldr	r3, [sp, #8]
 80108c8:	f103 0310 	add.w	r3, r3, #16
 80108cc:	edd3 7a00 	vldr	s15, [r3]
 80108d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80108d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108d8:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
  minors[7] = matrixA[2] * matrixA[3] - matrixA[0] * matrixA[5];
 80108dc:	9b02      	ldr	r3, [sp, #8]
 80108de:	f103 0308 	add.w	r3, r3, #8
 80108e2:	ed93 7a00 	vldr	s14, [r3]
 80108e6:	9b02      	ldr	r3, [sp, #8]
 80108e8:	f103 030c 	add.w	r3, r3, #12
 80108ec:	edd3 7a00 	vldr	s15, [r3]
 80108f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80108f4:	9b02      	ldr	r3, [sp, #8]
 80108f6:	edd3 6a00 	vldr	s13, [r3]
 80108fa:	9b02      	ldr	r3, [sp, #8]
 80108fc:	f103 0314 	add.w	r3, r3, #20
 8010900:	edd3 7a00 	vldr	s15, [r3]
 8010904:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010908:	ee77 7a67 	vsub.f32	s15, s14, s15
 801090c:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
  minors[8] = matrixA[0] * matrixA[4] - matrixA[1] * matrixA[3];
 8010910:	9b02      	ldr	r3, [sp, #8]
 8010912:	ed93 7a00 	vldr	s14, [r3]
 8010916:	9b02      	ldr	r3, [sp, #8]
 8010918:	f103 0310 	add.w	r3, r3, #16
 801091c:	edd3 7a00 	vldr	s15, [r3]
 8010920:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010924:	9b02      	ldr	r3, [sp, #8]
 8010926:	f103 0304 	add.w	r3, r3, #4
 801092a:	edd3 6a00 	vldr	s13, [r3]
 801092e:	9b02      	ldr	r3, [sp, #8]
 8010930:	f103 030c 	add.w	r3, r3, #12
 8010934:	edd3 7a00 	vldr	s15, [r3]
 8010938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801093c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010940:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54

  matrixTranspose3x3(transposeMinors, minors);
 8010944:	ab04      	add	r3, sp, #16
 8010946:	4618      	mov	r0, r3
 8010948:	ab0d      	add	r3, sp, #52	; 0x34
 801094a:	4619      	mov	r1, r3
 801094c:	f7ff fe5c 	bl	8010608 <matrixTranspose3x3>

  det = 1/det;
 8010950:	4b0a      	ldr	r3, [pc, #40]	; (801097c <matrixInverse3x3+0x300>)
 8010952:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 8010956:	ee07 3a10 	vmov	s14, r3
 801095a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801095e:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c

  matrixScale(3,3, matrixC, det, transposeMinors);
 8010962:	ab04      	add	r3, sp, #16
 8010964:	9300      	str	r3, [sp, #0]
 8010966:	f04f 0003 	mov.w	r0, #3
 801096a:	f04f 0103 	mov.w	r1, #3
 801096e:	9a03      	ldr	r2, [sp, #12]
 8010970:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010972:	f7ff fe1b 	bl	80105ac <matrixScale>
}
 8010976:	b021      	add	sp, #132	; 0x84
 8010978:	bd00      	pop	{pc}
 801097a:	bf00      	nop
 801097c:	3f800000 	.word	0x3f800000

08010980 <computeFourthOrder100Hz>:
///////////////////////////////////////////////////////////////////////////////
//  4th Order Low Pass Filter for 100 Hz Data
///////////////////////////////////////////////////////////////////////////////

float computeFourthOrder100Hz(float currentInput, fourthOrderData_t * filterParameters)
{
 8010980:	b084      	sub	sp, #16
 8010982:	9001      	str	r0, [sp, #4]
 8010984:	9100      	str	r1, [sp, #0]
    #define A3_100HZ -2.444765517272841f
    #define A4_100HZ  0.527149895089809f

    float output;

    output = B0_100HZ * currentInput +
 8010986:	ed9d 7a01 	vldr	s14, [sp, #4]
 801098a:	eddf 7a38 	vldr	s15, [pc, #224]	; 8010a6c <computeFourthOrder100Hz+0xec>
 801098e:	ee27 7a27 	vmul.f32	s14, s14, s15
             B1_100HZ * filterParameters->inputTm1  +
 8010992:	9b00      	ldr	r3, [sp, #0]
 8010994:	edd3 6a00 	vldr	s13, [r3]
 8010998:	eddf 7a35 	vldr	s15, [pc, #212]	; 8010a70 <computeFourthOrder100Hz+0xf0>
 801099c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    #define A3_100HZ -2.444765517272841f
    #define A4_100HZ  0.527149895089809f

    float output;

    output = B0_100HZ * currentInput +
 80109a0:	ee37 7a27 	vadd.f32	s14, s14, s15
             B1_100HZ * filterParameters->inputTm1  +
             B2_100HZ * filterParameters->inputTm2  +
 80109a4:	9b00      	ldr	r3, [sp, #0]
 80109a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80109aa:	eddf 7a32 	vldr	s15, [pc, #200]	; 8010a74 <computeFourthOrder100Hz+0xf4>
 80109ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
    #define A4_100HZ  0.527149895089809f

    float output;

    output = B0_100HZ * currentInput +
             B1_100HZ * filterParameters->inputTm1  +
 80109b2:	ee37 7a27 	vadd.f32	s14, s14, s15
             B2_100HZ * filterParameters->inputTm2  +
             B3_100HZ * filterParameters->inputTm3  +
 80109b6:	9b00      	ldr	r3, [sp, #0]
 80109b8:	edd3 6a02 	vldr	s13, [r3, #8]
 80109bc:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8010a70 <computeFourthOrder100Hz+0xf0>
 80109c0:	ee66 7aa7 	vmul.f32	s15, s13, s15

    float output;

    output = B0_100HZ * currentInput +
             B1_100HZ * filterParameters->inputTm1  +
             B2_100HZ * filterParameters->inputTm2  +
 80109c4:	ee37 7a27 	vadd.f32	s14, s14, s15
             B3_100HZ * filterParameters->inputTm3  +
             B4_100HZ * filterParameters->inputTm4  -
 80109c8:	9b00      	ldr	r3, [sp, #0]
 80109ca:	edd3 6a03 	vldr	s13, [r3, #12]
 80109ce:	eddf 7a27 	vldr	s15, [pc, #156]	; 8010a6c <computeFourthOrder100Hz+0xec>
 80109d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float output;

    output = B0_100HZ * currentInput +
             B1_100HZ * filterParameters->inputTm1  +
             B2_100HZ * filterParameters->inputTm2  +
             B3_100HZ * filterParameters->inputTm3  +
 80109d6:	ee37 7a27 	vadd.f32	s14, s14, s15
             B4_100HZ * filterParameters->inputTm4  -
             A1_100HZ * filterParameters->outputTm1 -
 80109da:	9b00      	ldr	r3, [sp, #0]
 80109dc:	edd3 6a04 	vldr	s13, [r3, #16]
 80109e0:	eddf 7a25 	vldr	s15, [pc, #148]	; 8010a78 <computeFourthOrder100Hz+0xf8>
 80109e4:	ee66 7aa7 	vmul.f32	s15, s13, s15

    output = B0_100HZ * currentInput +
             B1_100HZ * filterParameters->inputTm1  +
             B2_100HZ * filterParameters->inputTm2  +
             B3_100HZ * filterParameters->inputTm3  +
             B4_100HZ * filterParameters->inputTm4  -
 80109e8:	ee37 7a27 	vadd.f32	s14, s14, s15
             A1_100HZ * filterParameters->outputTm1 -
             A2_100HZ * filterParameters->outputTm2 -
 80109ec:	9b00      	ldr	r3, [sp, #0]
 80109ee:	edd3 6a05 	vldr	s13, [r3, #20]
 80109f2:	eddf 7a22 	vldr	s15, [pc, #136]	; 8010a7c <computeFourthOrder100Hz+0xfc>
 80109f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    output = B0_100HZ * currentInput +
             B1_100HZ * filterParameters->inputTm1  +
             B2_100HZ * filterParameters->inputTm2  +
             B3_100HZ * filterParameters->inputTm3  +
             B4_100HZ * filterParameters->inputTm4  -
             A1_100HZ * filterParameters->outputTm1 -
 80109fa:	ee37 7a67 	vsub.f32	s14, s14, s15
             A2_100HZ * filterParameters->outputTm2 -
             A3_100HZ * filterParameters->outputTm3 -
 80109fe:	9b00      	ldr	r3, [sp, #0]
 8010a00:	edd3 6a06 	vldr	s13, [r3, #24]
 8010a04:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8010a80 <computeFourthOrder100Hz+0x100>
 8010a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
             B1_100HZ * filterParameters->inputTm1  +
             B2_100HZ * filterParameters->inputTm2  +
             B3_100HZ * filterParameters->inputTm3  +
             B4_100HZ * filterParameters->inputTm4  -
             A1_100HZ * filterParameters->outputTm1 -
             A2_100HZ * filterParameters->outputTm2 -
 8010a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
             A3_100HZ * filterParameters->outputTm3 -
             A4_100HZ * filterParameters->outputTm4;
 8010a10:	9b00      	ldr	r3, [sp, #0]
 8010a12:	edd3 6a07 	vldr	s13, [r3, #28]
 8010a16:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8010a84 <computeFourthOrder100Hz+0x104>
 8010a1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    #define A3_100HZ -2.444765517272841f
    #define A4_100HZ  0.527149895089809f

    float output;

    output = B0_100HZ * currentInput +
 8010a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a22:	edcd 7a03 	vstr	s15, [sp, #12]
             A1_100HZ * filterParameters->outputTm1 -
             A2_100HZ * filterParameters->outputTm2 -
             A3_100HZ * filterParameters->outputTm3 -
             A4_100HZ * filterParameters->outputTm4;

    filterParameters->inputTm4 = filterParameters->inputTm3;
 8010a26:	9b00      	ldr	r3, [sp, #0]
 8010a28:	689a      	ldr	r2, [r3, #8]
 8010a2a:	9b00      	ldr	r3, [sp, #0]
 8010a2c:	60da      	str	r2, [r3, #12]
    filterParameters->inputTm3 = filterParameters->inputTm2;
 8010a2e:	9b00      	ldr	r3, [sp, #0]
 8010a30:	685a      	ldr	r2, [r3, #4]
 8010a32:	9b00      	ldr	r3, [sp, #0]
 8010a34:	609a      	str	r2, [r3, #8]
    filterParameters->inputTm2 = filterParameters->inputTm1;
 8010a36:	9b00      	ldr	r3, [sp, #0]
 8010a38:	681a      	ldr	r2, [r3, #0]
 8010a3a:	9b00      	ldr	r3, [sp, #0]
 8010a3c:	605a      	str	r2, [r3, #4]
    filterParameters->inputTm1 = currentInput;
 8010a3e:	9b00      	ldr	r3, [sp, #0]
 8010a40:	9a01      	ldr	r2, [sp, #4]
 8010a42:	601a      	str	r2, [r3, #0]

    filterParameters->outputTm4 = filterParameters->outputTm3;
 8010a44:	9b00      	ldr	r3, [sp, #0]
 8010a46:	699a      	ldr	r2, [r3, #24]
 8010a48:	9b00      	ldr	r3, [sp, #0]
 8010a4a:	61da      	str	r2, [r3, #28]
    filterParameters->outputTm3 = filterParameters->outputTm2;
 8010a4c:	9b00      	ldr	r3, [sp, #0]
 8010a4e:	695a      	ldr	r2, [r3, #20]
 8010a50:	9b00      	ldr	r3, [sp, #0]
 8010a52:	619a      	str	r2, [r3, #24]
    filterParameters->outputTm2 = filterParameters->outputTm1;
 8010a54:	9b00      	ldr	r3, [sp, #0]
 8010a56:	691a      	ldr	r2, [r3, #16]
 8010a58:	9b00      	ldr	r3, [sp, #0]
 8010a5a:	615a      	str	r2, [r3, #20]
    filterParameters->outputTm1 = output;
 8010a5c:	9b00      	ldr	r3, [sp, #0]
 8010a5e:	9a03      	ldr	r2, [sp, #12]
 8010a60:	611a      	str	r2, [r3, #16]

    return output;
 8010a62:	9b03      	ldr	r3, [sp, #12]
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	b004      	add	sp, #16
 8010a68:	4770      	bx	lr
 8010a6a:	bf00      	nop
 8010a6c:	3af83279 	.word	0x3af83279
 8010a70:	bb1181d5 	.word	0xbb1181d5
 8010a74:	3b5e1b1a 	.word	0x3b5e1b1a
 8010a78:	40572f38 	.word	0x40572f38
 8010a7c:	40890b20 	.word	0x40890b20
 8010a80:	401c770a 	.word	0x401c770a
 8010a84:	3f06f34c 	.word	0x3f06f34c

08010a88 <setupFourthOrder100Hz>:

///////////////////////////////////////////////////////////////////////////////

void setupFourthOrder100Hz(void)
{
    fourthOrder100Hz[AX_FILTER].inputTm1 = 0.0f;
 8010a88:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010a90:	4a46      	ldr	r2, [pc, #280]	; (8010bac <setupFourthOrder100Hz+0x124>)
 8010a92:	601a      	str	r2, [r3, #0]
    fourthOrder100Hz[AX_FILTER].inputTm2 = 0.0f;
 8010a94:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010a9c:	4a43      	ldr	r2, [pc, #268]	; (8010bac <setupFourthOrder100Hz+0x124>)
 8010a9e:	605a      	str	r2, [r3, #4]
    fourthOrder100Hz[AX_FILTER].inputTm3 = 0.0f;
 8010aa0:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010aa8:	4a40      	ldr	r2, [pc, #256]	; (8010bac <setupFourthOrder100Hz+0x124>)
 8010aaa:	609a      	str	r2, [r3, #8]
    fourthOrder100Hz[AX_FILTER].inputTm4 = 0.0f;
 8010aac:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ab4:	4a3d      	ldr	r2, [pc, #244]	; (8010bac <setupFourthOrder100Hz+0x124>)
 8010ab6:	60da      	str	r2, [r3, #12]

    fourthOrder100Hz[AX_FILTER].outputTm1 = 0.0f;
 8010ab8:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ac0:	4a3a      	ldr	r2, [pc, #232]	; (8010bac <setupFourthOrder100Hz+0x124>)
 8010ac2:	611a      	str	r2, [r3, #16]
    fourthOrder100Hz[AX_FILTER].outputTm2 = 0.0f;
 8010ac4:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010acc:	4a37      	ldr	r2, [pc, #220]	; (8010bac <setupFourthOrder100Hz+0x124>)
 8010ace:	615a      	str	r2, [r3, #20]
    fourthOrder100Hz[AX_FILTER].outputTm3 = 0.0f;
 8010ad0:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ad8:	4a34      	ldr	r2, [pc, #208]	; (8010bac <setupFourthOrder100Hz+0x124>)
 8010ada:	619a      	str	r2, [r3, #24]
    fourthOrder100Hz[AX_FILTER].outputTm4 = 0.0f;
 8010adc:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ae4:	4a31      	ldr	r2, [pc, #196]	; (8010bac <setupFourthOrder100Hz+0x124>)
 8010ae6:	61da      	str	r2, [r3, #28]

    /////////////////////////////////////

    fourthOrder100Hz[AY_FILTER].inputTm1 = 0.0f;
 8010ae8:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010af0:	4a2e      	ldr	r2, [pc, #184]	; (8010bac <setupFourthOrder100Hz+0x124>)
 8010af2:	621a      	str	r2, [r3, #32]
    fourthOrder100Hz[AY_FILTER].inputTm2 = 0.0f;
 8010af4:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010afc:	4a2b      	ldr	r2, [pc, #172]	; (8010bac <setupFourthOrder100Hz+0x124>)
 8010afe:	625a      	str	r2, [r3, #36]	; 0x24
    fourthOrder100Hz[AY_FILTER].inputTm3 = 0.0f;
 8010b00:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b08:	4a28      	ldr	r2, [pc, #160]	; (8010bac <setupFourthOrder100Hz+0x124>)
 8010b0a:	629a      	str	r2, [r3, #40]	; 0x28
    fourthOrder100Hz[AY_FILTER].inputTm4 = 0.0f;
 8010b0c:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b14:	4a25      	ldr	r2, [pc, #148]	; (8010bac <setupFourthOrder100Hz+0x124>)
 8010b16:	62da      	str	r2, [r3, #44]	; 0x2c

    fourthOrder100Hz[AY_FILTER].outputTm1 = 0.0f;
 8010b18:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b20:	4a22      	ldr	r2, [pc, #136]	; (8010bac <setupFourthOrder100Hz+0x124>)
 8010b22:	631a      	str	r2, [r3, #48]	; 0x30
    fourthOrder100Hz[AY_FILTER].outputTm2 = 0.0f;
 8010b24:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b2c:	4a1f      	ldr	r2, [pc, #124]	; (8010bac <setupFourthOrder100Hz+0x124>)
 8010b2e:	635a      	str	r2, [r3, #52]	; 0x34
    fourthOrder100Hz[AY_FILTER].outputTm3 = 0.0f;
 8010b30:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b38:	4a1c      	ldr	r2, [pc, #112]	; (8010bac <setupFourthOrder100Hz+0x124>)
 8010b3a:	639a      	str	r2, [r3, #56]	; 0x38
    fourthOrder100Hz[AY_FILTER].outputTm4 = 0.0f;
 8010b3c:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b44:	4a19      	ldr	r2, [pc, #100]	; (8010bac <setupFourthOrder100Hz+0x124>)
 8010b46:	63da      	str	r2, [r3, #60]	; 0x3c

    /////////////////////////////////////

    fourthOrder100Hz[AZ_FILTER].inputTm1 = -9.8065f;
 8010b48:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b50:	4a17      	ldr	r2, [pc, #92]	; (8010bb0 <setupFourthOrder100Hz+0x128>)
 8010b52:	641a      	str	r2, [r3, #64]	; 0x40
    fourthOrder100Hz[AZ_FILTER].inputTm2 = -9.8065f;
 8010b54:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b5c:	4a14      	ldr	r2, [pc, #80]	; (8010bb0 <setupFourthOrder100Hz+0x128>)
 8010b5e:	645a      	str	r2, [r3, #68]	; 0x44
    fourthOrder100Hz[AZ_FILTER].inputTm3 = -9.8065f;
 8010b60:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b68:	4a11      	ldr	r2, [pc, #68]	; (8010bb0 <setupFourthOrder100Hz+0x128>)
 8010b6a:	649a      	str	r2, [r3, #72]	; 0x48
    fourthOrder100Hz[AZ_FILTER].inputTm4 = -9.8065f;
 8010b6c:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b74:	4a0e      	ldr	r2, [pc, #56]	; (8010bb0 <setupFourthOrder100Hz+0x128>)
 8010b76:	64da      	str	r2, [r3, #76]	; 0x4c

    fourthOrder100Hz[AZ_FILTER].outputTm1 = -9.8065f;
 8010b78:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b80:	4a0b      	ldr	r2, [pc, #44]	; (8010bb0 <setupFourthOrder100Hz+0x128>)
 8010b82:	651a      	str	r2, [r3, #80]	; 0x50
    fourthOrder100Hz[AZ_FILTER].outputTm2 = -9.8065f;
 8010b84:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b8c:	4a08      	ldr	r2, [pc, #32]	; (8010bb0 <setupFourthOrder100Hz+0x128>)
 8010b8e:	655a      	str	r2, [r3, #84]	; 0x54
    fourthOrder100Hz[AZ_FILTER].outputTm3 = -9.8065f;
 8010b90:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b98:	4a05      	ldr	r2, [pc, #20]	; (8010bb0 <setupFourthOrder100Hz+0x128>)
 8010b9a:	659a      	str	r2, [r3, #88]	; 0x58
    fourthOrder100Hz[AZ_FILTER].outputTm4 = -9.8065f;
 8010b9c:	f643 3314 	movw	r3, #15124	; 0x3b14
 8010ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ba4:	4a02      	ldr	r2, [pc, #8]	; (8010bb0 <setupFourthOrder100Hz+0x128>)
 8010ba6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8010ba8:	4770      	bx	lr
 8010baa:	bf00      	nop
 8010bac:	00000000 	.word	0x00000000
 8010bb0:	c11ce76d 	.word	0xc11ce76d

08010bb4 <computeFourthOrder500Hz>:
///////////////////////////////////////////////////////////////////////////////
//  4th Order Low Pass Filter for 500 Hz Data
///////////////////////////////////////////////////////////////////////////////

float computeFourthOrder500Hz(float currentInput, fourthOrderData_t * filterParameters)
{
 8010bb4:	b084      	sub	sp, #16
 8010bb6:	9001      	str	r0, [sp, #4]
 8010bb8:	9100      	str	r1, [sp, #0]
    #define A3_500HZ -3.648875955419102f
    #define A4_500HZ  0.885247737995618f

    float output;

    output = B0_500HZ * currentInput +
 8010bba:	ed9d 7a01 	vldr	s14, [sp, #4]
 8010bbe:	eddf 7a38 	vldr	s15, [pc, #224]	; 8010ca0 <computeFourthOrder500Hz+0xec>
 8010bc2:	ee27 7a27 	vmul.f32	s14, s14, s15
    		 B1_500HZ * filterParameters->inputTm1  +
 8010bc6:	9b00      	ldr	r3, [sp, #0]
 8010bc8:	edd3 6a00 	vldr	s13, [r3]
 8010bcc:	eddf 7a35 	vldr	s15, [pc, #212]	; 8010ca4 <computeFourthOrder500Hz+0xf0>
 8010bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    #define A3_500HZ -3.648875955419102f
    #define A4_500HZ  0.885247737995618f

    float output;

    output = B0_500HZ * currentInput +
 8010bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
    		 B1_500HZ * filterParameters->inputTm1  +
    		 B2_500HZ * filterParameters->inputTm2  +
 8010bd8:	9b00      	ldr	r3, [sp, #0]
 8010bda:	edd3 6a01 	vldr	s13, [r3, #4]
 8010bde:	eddf 7a32 	vldr	s15, [pc, #200]	; 8010ca8 <computeFourthOrder500Hz+0xf4>
 8010be2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    #define A4_500HZ  0.885247737995618f

    float output;

    output = B0_500HZ * currentInput +
    		 B1_500HZ * filterParameters->inputTm1  +
 8010be6:	ee37 7a27 	vadd.f32	s14, s14, s15
    		 B2_500HZ * filterParameters->inputTm2  +
    		 B3_500HZ * filterParameters->inputTm3  +
 8010bea:	9b00      	ldr	r3, [sp, #0]
 8010bec:	edd3 6a02 	vldr	s13, [r3, #8]
 8010bf0:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8010ca4 <computeFourthOrder500Hz+0xf0>
 8010bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15

    float output;

    output = B0_500HZ * currentInput +
    		 B1_500HZ * filterParameters->inputTm1  +
    		 B2_500HZ * filterParameters->inputTm2  +
 8010bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
    		 B3_500HZ * filterParameters->inputTm3  +
    		 B4_500HZ * filterParameters->inputTm4  -
 8010bfc:	9b00      	ldr	r3, [sp, #0]
 8010bfe:	edd3 6a03 	vldr	s13, [r3, #12]
 8010c02:	eddf 7a27 	vldr	s15, [pc, #156]	; 8010ca0 <computeFourthOrder500Hz+0xec>
 8010c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float output;

    output = B0_500HZ * currentInput +
    		 B1_500HZ * filterParameters->inputTm1  +
    		 B2_500HZ * filterParameters->inputTm2  +
    		 B3_500HZ * filterParameters->inputTm3  +
 8010c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
    		 B4_500HZ * filterParameters->inputTm4  -
    		 A1_500HZ * filterParameters->outputTm1 -
 8010c0e:	9b00      	ldr	r3, [sp, #0]
 8010c10:	edd3 6a04 	vldr	s13, [r3, #16]
 8010c14:	eddf 7a25 	vldr	s15, [pc, #148]	; 8010cac <computeFourthOrder500Hz+0xf8>
 8010c18:	ee66 7aa7 	vmul.f32	s15, s13, s15

    output = B0_500HZ * currentInput +
    		 B1_500HZ * filterParameters->inputTm1  +
    		 B2_500HZ * filterParameters->inputTm2  +
    		 B3_500HZ * filterParameters->inputTm3  +
    		 B4_500HZ * filterParameters->inputTm4  -
 8010c1c:	ee37 7a27 	vadd.f32	s14, s14, s15
    		 A1_500HZ * filterParameters->outputTm1 -
    		 A2_500HZ * filterParameters->outputTm2 -
 8010c20:	9b00      	ldr	r3, [sp, #0]
 8010c22:	edd3 6a05 	vldr	s13, [r3, #20]
 8010c26:	eddf 7a22 	vldr	s15, [pc, #136]	; 8010cb0 <computeFourthOrder500Hz+0xfc>
 8010c2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    output = B0_500HZ * currentInput +
    		 B1_500HZ * filterParameters->inputTm1  +
    		 B2_500HZ * filterParameters->inputTm2  +
    		 B3_500HZ * filterParameters->inputTm3  +
    		 B4_500HZ * filterParameters->inputTm4  -
    		 A1_500HZ * filterParameters->outputTm1 -
 8010c2e:	ee37 7a67 	vsub.f32	s14, s14, s15
    		 A2_500HZ * filterParameters->outputTm2 -
    		 A3_500HZ * filterParameters->outputTm3 -
 8010c32:	9b00      	ldr	r3, [sp, #0]
 8010c34:	edd3 6a06 	vldr	s13, [r3, #24]
 8010c38:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8010cb4 <computeFourthOrder500Hz+0x100>
 8010c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    		 B1_500HZ * filterParameters->inputTm1  +
    		 B2_500HZ * filterParameters->inputTm2  +
    		 B3_500HZ * filterParameters->inputTm3  +
    		 B4_500HZ * filterParameters->inputTm4  -
    		 A1_500HZ * filterParameters->outputTm1 -
    		 A2_500HZ * filterParameters->outputTm2 -
 8010c40:	ee37 7a27 	vadd.f32	s14, s14, s15
    		 A3_500HZ * filterParameters->outputTm3 -
    		 A4_500HZ * filterParameters->outputTm4;
 8010c44:	9b00      	ldr	r3, [sp, #0]
 8010c46:	edd3 6a07 	vldr	s13, [r3, #28]
 8010c4a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8010cb8 <computeFourthOrder500Hz+0x104>
 8010c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    #define A3_500HZ -3.648875955419102f
    #define A4_500HZ  0.885247737995618f

    float output;

    output = B0_500HZ * currentInput +
 8010c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c56:	edcd 7a03 	vstr	s15, [sp, #12]
    		 A1_500HZ * filterParameters->outputTm1 -
    		 A2_500HZ * filterParameters->outputTm2 -
    		 A3_500HZ * filterParameters->outputTm3 -
    		 A4_500HZ * filterParameters->outputTm4;

    filterParameters->inputTm4 = filterParameters->inputTm3;
 8010c5a:	9b00      	ldr	r3, [sp, #0]
 8010c5c:	689a      	ldr	r2, [r3, #8]
 8010c5e:	9b00      	ldr	r3, [sp, #0]
 8010c60:	60da      	str	r2, [r3, #12]
    filterParameters->inputTm3 = filterParameters->inputTm2;
 8010c62:	9b00      	ldr	r3, [sp, #0]
 8010c64:	685a      	ldr	r2, [r3, #4]
 8010c66:	9b00      	ldr	r3, [sp, #0]
 8010c68:	609a      	str	r2, [r3, #8]
    filterParameters->inputTm2 = filterParameters->inputTm1;
 8010c6a:	9b00      	ldr	r3, [sp, #0]
 8010c6c:	681a      	ldr	r2, [r3, #0]
 8010c6e:	9b00      	ldr	r3, [sp, #0]
 8010c70:	605a      	str	r2, [r3, #4]
    filterParameters->inputTm1 = currentInput;
 8010c72:	9b00      	ldr	r3, [sp, #0]
 8010c74:	9a01      	ldr	r2, [sp, #4]
 8010c76:	601a      	str	r2, [r3, #0]

    filterParameters->outputTm4 = filterParameters->outputTm3;
 8010c78:	9b00      	ldr	r3, [sp, #0]
 8010c7a:	699a      	ldr	r2, [r3, #24]
 8010c7c:	9b00      	ldr	r3, [sp, #0]
 8010c7e:	61da      	str	r2, [r3, #28]
    filterParameters->outputTm3 = filterParameters->outputTm2;
 8010c80:	9b00      	ldr	r3, [sp, #0]
 8010c82:	695a      	ldr	r2, [r3, #20]
 8010c84:	9b00      	ldr	r3, [sp, #0]
 8010c86:	619a      	str	r2, [r3, #24]
    filterParameters->outputTm2 = filterParameters->outputTm1;
 8010c88:	9b00      	ldr	r3, [sp, #0]
 8010c8a:	691a      	ldr	r2, [r3, #16]
 8010c8c:	9b00      	ldr	r3, [sp, #0]
 8010c8e:	615a      	str	r2, [r3, #20]
    filterParameters->outputTm1 = output;
 8010c90:	9b00      	ldr	r3, [sp, #0]
 8010c92:	9a03      	ldr	r2, [sp, #12]
 8010c94:	611a      	str	r2, [r3, #16]

    return output;
 8010c96:	9b03      	ldr	r3, [sp, #12]
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	b004      	add	sp, #16
 8010c9c:	4770      	bx	lr
 8010c9e:	bf00      	nop
 8010ca0:	3a8178a0 	.word	0x3a8178a0
 8010ca4:	bb7691bd 	.word	0xbb7691bd
 8010ca8:	3bb5fc30 	.word	0x3bb5fc30
 8010cac:	40783347 	.word	0x40783347
 8010cb0:	40b48952 	.word	0x40b48952
 8010cb4:	4069872f 	.word	0x4069872f
 8010cb8:	3f629f99 	.word	0x3f629f99

08010cbc <setupFourthOrder500Hz>:

///////////////////////////////////////////////////////////////////////////////

void setupFourthOrder500Hz(void)
{
    fourthOrder500Hz[AX_FILTER].inputTm1 = 0.0f;
 8010cbc:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010cc4:	4a46      	ldr	r2, [pc, #280]	; (8010de0 <setupFourthOrder500Hz+0x124>)
 8010cc6:	601a      	str	r2, [r3, #0]
    fourthOrder500Hz[AX_FILTER].inputTm2 = 0.0f;
 8010cc8:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010cd0:	4a43      	ldr	r2, [pc, #268]	; (8010de0 <setupFourthOrder500Hz+0x124>)
 8010cd2:	605a      	str	r2, [r3, #4]
    fourthOrder500Hz[AX_FILTER].inputTm3 = 0.0f;
 8010cd4:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010cdc:	4a40      	ldr	r2, [pc, #256]	; (8010de0 <setupFourthOrder500Hz+0x124>)
 8010cde:	609a      	str	r2, [r3, #8]
    fourthOrder500Hz[AX_FILTER].inputTm4 = 0.0f;
 8010ce0:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ce8:	4a3d      	ldr	r2, [pc, #244]	; (8010de0 <setupFourthOrder500Hz+0x124>)
 8010cea:	60da      	str	r2, [r3, #12]

    fourthOrder500Hz[AX_FILTER].outputTm1 = 0.0f;
 8010cec:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010cf4:	4a3a      	ldr	r2, [pc, #232]	; (8010de0 <setupFourthOrder500Hz+0x124>)
 8010cf6:	611a      	str	r2, [r3, #16]
    fourthOrder500Hz[AX_FILTER].outputTm2 = 0.0f;
 8010cf8:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d00:	4a37      	ldr	r2, [pc, #220]	; (8010de0 <setupFourthOrder500Hz+0x124>)
 8010d02:	615a      	str	r2, [r3, #20]
    fourthOrder500Hz[AX_FILTER].outputTm3 = 0.0f;
 8010d04:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d0c:	4a34      	ldr	r2, [pc, #208]	; (8010de0 <setupFourthOrder500Hz+0x124>)
 8010d0e:	619a      	str	r2, [r3, #24]
    fourthOrder500Hz[AX_FILTER].outputTm4 = 0.0f;
 8010d10:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d18:	4a31      	ldr	r2, [pc, #196]	; (8010de0 <setupFourthOrder500Hz+0x124>)
 8010d1a:	61da      	str	r2, [r3, #28]

    /////////////////////////////////////

    fourthOrder500Hz[AY_FILTER].inputTm1 = 0.0f;
 8010d1c:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d24:	4a2e      	ldr	r2, [pc, #184]	; (8010de0 <setupFourthOrder500Hz+0x124>)
 8010d26:	621a      	str	r2, [r3, #32]
    fourthOrder500Hz[AY_FILTER].inputTm2 = 0.0f;
 8010d28:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d30:	4a2b      	ldr	r2, [pc, #172]	; (8010de0 <setupFourthOrder500Hz+0x124>)
 8010d32:	625a      	str	r2, [r3, #36]	; 0x24
    fourthOrder500Hz[AY_FILTER].inputTm3 = 0.0f;
 8010d34:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d3c:	4a28      	ldr	r2, [pc, #160]	; (8010de0 <setupFourthOrder500Hz+0x124>)
 8010d3e:	629a      	str	r2, [r3, #40]	; 0x28
    fourthOrder500Hz[AY_FILTER].inputTm4 = 0.0f;
 8010d40:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d48:	4a25      	ldr	r2, [pc, #148]	; (8010de0 <setupFourthOrder500Hz+0x124>)
 8010d4a:	62da      	str	r2, [r3, #44]	; 0x2c

    fourthOrder500Hz[AY_FILTER].outputTm1 = 0.0f;
 8010d4c:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d54:	4a22      	ldr	r2, [pc, #136]	; (8010de0 <setupFourthOrder500Hz+0x124>)
 8010d56:	631a      	str	r2, [r3, #48]	; 0x30
    fourthOrder500Hz[AY_FILTER].outputTm2 = 0.0f;
 8010d58:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d60:	4a1f      	ldr	r2, [pc, #124]	; (8010de0 <setupFourthOrder500Hz+0x124>)
 8010d62:	635a      	str	r2, [r3, #52]	; 0x34
    fourthOrder500Hz[AY_FILTER].outputTm3 = 0.0f;
 8010d64:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d6c:	4a1c      	ldr	r2, [pc, #112]	; (8010de0 <setupFourthOrder500Hz+0x124>)
 8010d6e:	639a      	str	r2, [r3, #56]	; 0x38
    fourthOrder500Hz[AY_FILTER].outputTm4 = 0.0f;
 8010d70:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d78:	4a19      	ldr	r2, [pc, #100]	; (8010de0 <setupFourthOrder500Hz+0x124>)
 8010d7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /////////////////////////////////////

    fourthOrder500Hz[AZ_FILTER].inputTm1 = -9.8065f;
 8010d7c:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d84:	4a17      	ldr	r2, [pc, #92]	; (8010de4 <setupFourthOrder500Hz+0x128>)
 8010d86:	641a      	str	r2, [r3, #64]	; 0x40
    fourthOrder500Hz[AZ_FILTER].inputTm2 = -9.8065f;
 8010d88:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d90:	4a14      	ldr	r2, [pc, #80]	; (8010de4 <setupFourthOrder500Hz+0x128>)
 8010d92:	645a      	str	r2, [r3, #68]	; 0x44
    fourthOrder500Hz[AZ_FILTER].inputTm3 = -9.8065f;
 8010d94:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d9c:	4a11      	ldr	r2, [pc, #68]	; (8010de4 <setupFourthOrder500Hz+0x128>)
 8010d9e:	649a      	str	r2, [r3, #72]	; 0x48
    fourthOrder500Hz[AZ_FILTER].inputTm4 = -9.8065f;
 8010da0:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010da8:	4a0e      	ldr	r2, [pc, #56]	; (8010de4 <setupFourthOrder500Hz+0x128>)
 8010daa:	64da      	str	r2, [r3, #76]	; 0x4c

    fourthOrder500Hz[AZ_FILTER].outputTm1 = -9.8065f;
 8010dac:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010db4:	4a0b      	ldr	r2, [pc, #44]	; (8010de4 <setupFourthOrder500Hz+0x128>)
 8010db6:	651a      	str	r2, [r3, #80]	; 0x50
    fourthOrder500Hz[AZ_FILTER].outputTm2 = -9.8065f;
 8010db8:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010dc0:	4a08      	ldr	r2, [pc, #32]	; (8010de4 <setupFourthOrder500Hz+0x128>)
 8010dc2:	655a      	str	r2, [r3, #84]	; 0x54
    fourthOrder500Hz[AZ_FILTER].outputTm3 = -9.8065f;
 8010dc4:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010dcc:	4a05      	ldr	r2, [pc, #20]	; (8010de4 <setupFourthOrder500Hz+0x128>)
 8010dce:	659a      	str	r2, [r3, #88]	; 0x58
    fourthOrder500Hz[AZ_FILTER].outputTm4 = -9.8065f;
 8010dd0:	f643 23b4 	movw	r3, #15028	; 0x3ab4
 8010dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010dd8:	4a02      	ldr	r2, [pc, #8]	; (8010de4 <setupFourthOrder500Hz+0x128>)
 8010dda:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8010ddc:	4770      	bx	lr
 8010dde:	bf00      	nop
 8010de0:	00000000 	.word	0x00000000
 8010de4:	c11ce76d 	.word	0xc11ce76d

08010de8 <main>:
char           numberString[32];

///////////////////////////////////////////////////////////////////////////////

int main(void)
{
 8010de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010dec:	b08b      	sub	sp, #44	; 0x2c
	///////////////////////////////////////////////////////////////////////////

	uint32_t currentTime;

    systemReady = false;
 8010dee:	f240 737c 	movw	r3, #1916	; 0x77c
 8010df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010df6:	f04f 0200 	mov.w	r2, #0
 8010dfa:	701a      	strb	r2, [r3, #0]

    systemInit();
 8010dfc:	f7f5 f836 	bl	8005e6c <systemInit>

    systemReady = true;
 8010e00:	f240 737c 	movw	r3, #1916	; 0x77c
 8010e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e08:	f04f 0201 	mov.w	r2, #1
 8010e0c:	701a      	strb	r2, [r3, #0]
 8010e0e:	e000      	b.n	8010e12 <main+0x2a>

			executionTime1Hz = micros() - currentTime;
        }

        ////////////////////////////////
    }
 8010e10:	bf00      	nop

    while (1)
    {
    	///////////////////////////////

        if (frame_50Hz)
 8010e12:	f240 7378 	movw	r3, #1912	; 0x778
 8010e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e1a:	781b      	ldrb	r3, [r3, #0]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	f000 808b 	beq.w	8010f38 <main+0x150>
        {
        	frame_50Hz = false;
 8010e22:	f240 7378 	movw	r3, #1912	; 0x778
 8010e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e2a:	f04f 0200 	mov.w	r2, #0
 8010e2e:	701a      	strb	r2, [r3, #0]

        	currentTime      = micros();
 8010e30:	f7f4 fff2 	bl	8005e18 <micros>
 8010e34:	9009      	str	r0, [sp, #36]	; 0x24
			deltaTime50Hz    = currentTime - previous50HzTime;
 8010e36:	f641 13e8 	movw	r3, #6632	; 0x19e8
 8010e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e42:	1ad2      	subs	r2, r2, r3
 8010e44:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8010e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e4c:	601a      	str	r2, [r3, #0]
			previous50HzTime = currentTime;
 8010e4e:	f641 13e8 	movw	r3, #6632	; 0x19e8
 8010e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e58:	601a      	str	r2, [r3, #0]

			processFlightCommands();
 8010e5a:	f7fe fdb5 	bl	800f9c8 <processFlightCommands>

			if (eepromConfig.osdEnabled)
 8010e5e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8010e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e66:	f893 3344 	ldrb.w	r3, [r3, #836]	; 0x344
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d05a      	beq.n	8010f24 <main+0x13c>
			{
				if (eepromConfig.osdDisplayAlt)
 8010e6e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8010e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e76:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d00a      	beq.n	8010e94 <main+0xac>
				    displayAltitude(sensors.pressureAlt10Hz, 0.0f, DISENGAGED);
 8010e7e:	f643 3398 	movw	r3, #15256	; 0x3b98
 8010e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e88:	4618      	mov	r0, r3
 8010e8a:	4986      	ldr	r1, [pc, #536]	; (80110a4 <main+0x2bc>)
 8010e8c:	f04f 0200 	mov.w	r2, #0
 8010e90:	f7ef fcfa 	bl	8000888 <displayAltitude>

				if (eepromConfig.osdDisplayAH)
 8010e94:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8010e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e9c:	f893 3348 	ldrb.w	r3, [r3, #840]	; 0x348
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d013      	beq.n	8010ecc <main+0xe4>
				    displayArtificialHorizon(sensors.attitude500Hz[ROLL], sensors.attitude500Hz[PITCH], flightMode);
 8010ea4:	f643 3398 	movw	r3, #15256	; 0x3b98
 8010ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010eac:	6999      	ldr	r1, [r3, #24]
 8010eae:	f643 3398 	movw	r3, #15256	; 0x3b98
 8010eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010eb6:	69da      	ldr	r2, [r3, #28]
 8010eb8:	f240 73f8 	movw	r3, #2040	; 0x7f8
 8010ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ec0:	781b      	ldrb	r3, [r3, #0]
 8010ec2:	4608      	mov	r0, r1
 8010ec4:	4611      	mov	r1, r2
 8010ec6:	461a      	mov	r2, r3
 8010ec8:	f7ef feb8 	bl	8000c3c <displayArtificialHorizon>

				if (eepromConfig.osdDisplayAtt)
 8010ecc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8010ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ed4:	f893 3349 	ldrb.w	r3, [r3, #841]	; 0x349
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d013      	beq.n	8010f04 <main+0x11c>
				    displayAttitude(sensors.attitude500Hz[ROLL], sensors.attitude500Hz[PITCH], flightMode);
 8010edc:	f643 3398 	movw	r3, #15256	; 0x3b98
 8010ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ee4:	6999      	ldr	r1, [r3, #24]
 8010ee6:	f643 3398 	movw	r3, #15256	; 0x3b98
 8010eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010eee:	69da      	ldr	r2, [r3, #28]
 8010ef0:	f240 73f8 	movw	r3, #2040	; 0x7f8
 8010ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ef8:	781b      	ldrb	r3, [r3, #0]
 8010efa:	4608      	mov	r0, r1
 8010efc:	4611      	mov	r1, r2
 8010efe:	461a      	mov	r2, r3
 8010f00:	f7ef fff8 	bl	8000ef4 <displayAttitude>

				if (eepromConfig.osdDisplayHdg)
 8010f04:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8010f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f0c:	f893 334a 	ldrb.w	r3, [r3, #842]	; 0x34a
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d007      	beq.n	8010f24 <main+0x13c>
				    displayHeading(sensors.attitude500Hz[YAW]);
 8010f14:	f643 3398 	movw	r3, #15256	; 0x3b98
 8010f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f1c:	6a1b      	ldr	r3, [r3, #32]
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7f0 fa90 	bl	8001444 <displayHeading>
			}

			executionTime50Hz = micros() - currentTime;
 8010f24:	f7f4 ff78 	bl	8005e18 <micros>
 8010f28:	4602      	mov	r2, r0
 8010f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f2c:	1ad2      	subs	r2, r2, r3
 8010f2e:	f641 2310 	movw	r3, #6672	; 0x1a10
 8010f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f36:	601a      	str	r2, [r3, #0]
        }

        ///////////////////////////////

        if (frame_10Hz)
 8010f38:	f240 7379 	movw	r3, #1913	; 0x779
 8010f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	f000 80c3 	beq.w	80110ce <main+0x2e6>
        {
        	frame_10Hz = false;
 8010f48:	f240 7379 	movw	r3, #1913	; 0x779
 8010f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f50:	f04f 0200 	mov.w	r2, #0
 8010f54:	701a      	strb	r2, [r3, #0]

        	currentTime      = micros();
 8010f56:	f7f4 ff5f 	bl	8005e18 <micros>
 8010f5a:	9009      	str	r0, [sp, #36]	; 0x24
			deltaTime10Hz    = currentTime - previous10HzTime;
 8010f5c:	f641 13d8 	movw	r3, #6616	; 0x19d8
 8010f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f68:	1ad2      	subs	r2, r2, r3
 8010f6a:	f641 231c 	movw	r3, #6684	; 0x1a1c
 8010f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f72:	601a      	str	r2, [r3, #0]
			previous10HzTime = currentTime;
 8010f74:	f641 13d8 	movw	r3, #6616	; 0x19d8
 8010f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f7e:	601a      	str	r2, [r3, #0]

			if (newMagData == true)
 8010f80:	f240 63ed 	movw	r3, #1773	; 0x6ed
 8010f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f88:	781b      	ldrb	r3, [r3, #0]
 8010f8a:	2b01      	cmp	r3, #1
 8010f8c:	d171      	bne.n	8011072 <main+0x28a>
			{
				sensors.mag10Hz[XAXIS] = -((float)rawMag[XAXIS].value * magScaleFactor[XAXIS] - eepromConfig.magBias[XAXIS]);
 8010f8e:	f640 0374 	movw	r3, #2164	; 0x874
 8010f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f96:	881b      	ldrh	r3, [r3, #0]
 8010f98:	b21b      	sxth	r3, r3
 8010f9a:	ee07 3a90 	vmov	s15, r3
 8010f9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010fa2:	f640 0384 	movw	r3, #2180	; 0x884
 8010fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010faa:	edd3 7a00 	vldr	s15, [r3]
 8010fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fb2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8010fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010fba:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8010fbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010fc2:	eef1 7a67 	vneg.f32	s15, s15
 8010fc6:	f643 3398 	movw	r3, #15256	; 0x3b98
 8010fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010fce:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			    sensors.mag10Hz[YAXIS] =   (float)rawMag[YAXIS].value * magScaleFactor[YAXIS] - eepromConfig.magBias[YAXIS];
 8010fd2:	f640 0374 	movw	r3, #2164	; 0x874
 8010fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010fda:	885b      	ldrh	r3, [r3, #2]
 8010fdc:	b21b      	sxth	r3, r3
 8010fde:	ee07 3a90 	vmov	s15, r3
 8010fe2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010fe6:	f640 0384 	movw	r3, #2180	; 0x884
 8010fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010fee:	edd3 7a01 	vldr	s15, [r3, #4]
 8010ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ff6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8010ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ffe:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8011002:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011006:	f643 3398 	movw	r3, #15256	; 0x3b98
 801100a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801100e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			    sensors.mag10Hz[ZAXIS] = -((float)rawMag[ZAXIS].value * magScaleFactor[ZAXIS] - eepromConfig.magBias[ZAXIS]);
 8011012:	f640 0374 	movw	r3, #2164	; 0x874
 8011016:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801101a:	889b      	ldrh	r3, [r3, #4]
 801101c:	b21b      	sxth	r3, r3
 801101e:	ee07 3a90 	vmov	s15, r3
 8011022:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011026:	f640 0384 	movw	r3, #2180	; 0x884
 801102a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801102e:	edd3 7a02 	vldr	s15, [r3, #8]
 8011032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011036:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801103a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801103e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8011042:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011046:	eef1 7a67 	vneg.f32	s15, s15
 801104a:	f643 3398 	movw	r3, #15256	; 0x3b98
 801104e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011052:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			    newMagData = false;
 8011056:	f240 63ed 	movw	r3, #1773	; 0x6ed
 801105a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801105e:	f04f 0200 	mov.w	r2, #0
 8011062:	701a      	strb	r2, [r3, #0]
			    magDataUpdate = true;
 8011064:	f240 63ec 	movw	r3, #1772	; 0x6ec
 8011068:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801106c:	f04f 0201 	mov.w	r2, #1
 8011070:	701a      	strb	r2, [r3, #0]
            }

        	switch (eepromConfig.gpsType)
 8011072:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011076:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801107a:	f893 334b 	ldrb.w	r3, [r3, #843]	; 0x34b
 801107e:	2b03      	cmp	r3, #3
 8011080:	d817      	bhi.n	80110b2 <main+0x2ca>
 8011082:	a201      	add	r2, pc, #4	; (adr r2, 8011088 <main+0x2a0>)
 8011084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011088:	080110b3 	.word	0x080110b3
 801108c:	08011099 	.word	0x08011099
 8011090:	0801109f 	.word	0x0801109f
 8011094:	080110ad 	.word	0x080110ad
			        break;

			    ///////////////////////

			    case MEDIATEK_3329_BINARY:  // MediaTek 3329 in binary mode
			    	decodeMediaTek3329BinaryMsg();
 8011098:	f7f0 fb06 	bl	80016a8 <decodeMediaTek3329BinaryMsg>
			    	break;
 801109c:	e009      	b.n	80110b2 <main+0x2ca>

				///////////////////////

				case MEDIATEK_3329_NMEA:    // MediaTek 3329 in NMEA mode
				    decodeNMEAsentence();
 801109e:	f7f1 f8e3 	bl	8002268 <decodeNMEAsentence>
	        	    break;
 80110a2:	e006      	b.n	80110b2 <main+0x2ca>
 80110a4:	00000000 	.word	0x00000000
 80110a8:	350637bd 	.word	0x350637bd

			    ///////////////////////

			    case UBLOX:                 // UBLOX in binary mode
			    	decodeUbloxMsg();
 80110ac:	f7f1 fb0e 	bl	80026cc <decodeUbloxMsg>
			    	break;
 80110b0:	bf00      	nop

			    ///////////////////////
			}

        	cliCom();
 80110b2:	f7f7 ff97 	bl	8008fe4 <cliCom>

        	rfCom();
 80110b6:	f003 ff69 	bl	8014f8c <rfCom>

            executionTime10Hz = micros() - currentTime;
 80110ba:	f7f4 fead 	bl	8005e18 <micros>
 80110be:	4602      	mov	r2, r0
 80110c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110c2:	1ad2      	subs	r2, r2, r3
 80110c4:	f641 13dc 	movw	r3, #6620	; 0x19dc
 80110c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80110cc:	601a      	str	r2, [r3, #0]
        }

        ///////////////////////////////

        if (frame_500Hz)
 80110ce:	f240 7376 	movw	r3, #1910	; 0x776
 80110d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80110d6:	781b      	ldrb	r3, [r3, #0]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	f000 81be 	beq.w	801145a <main+0x672>
        {
			frame_500Hz = false;
 80110de:	f240 7376 	movw	r3, #1910	; 0x776
 80110e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80110e6:	f04f 0200 	mov.w	r2, #0
 80110ea:	701a      	strb	r2, [r3, #0]

       	    currentTime       = micros();
 80110ec:	f7f4 fe94 	bl	8005e18 <micros>
 80110f0:	9009      	str	r0, [sp, #36]	; 0x24
       	    deltaTime500Hz    = currentTime - previous500HzTime;
 80110f2:	f641 2300 	movw	r3, #6656	; 0x1a00
 80110f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110fe:	1ad2      	subs	r2, r2, r3
 8011100:	f641 13f0 	movw	r3, #6640	; 0x19f0
 8011104:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011108:	601a      	str	r2, [r3, #0]
       	    previous500HzTime = currentTime;
 801110a:	f641 2300 	movw	r3, #6656	; 0x1a00
 801110e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011112:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011114:	601a      	str	r2, [r3, #0]

       	    TIM_Cmd(TIM6, DISABLE);
 8011116:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801111a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801111e:	f04f 0100 	mov.w	r1, #0
 8011122:	f00a fe4d 	bl	801bdc0 <TIM_Cmd>
       	 	timerValue = TIM_GetCounter(TIM6);
 8011126:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801112a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801112e:	f00a fd97 	bl	801bc60 <TIM_GetCounter>
 8011132:	4603      	mov	r3, r0
 8011134:	b29a      	uxth	r2, r3
 8011136:	f643 3374 	movw	r3, #15220	; 0x3b74
 801113a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801113e:	801a      	strh	r2, [r3, #0]
       	 	TIM_SetCounter(TIM6, 0);
 8011140:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011144:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8011148:	f04f 0100 	mov.w	r1, #0
 801114c:	f00a fd78 	bl	801bc40 <TIM_SetCounter>
       	 	TIM_Cmd(TIM6, ENABLE);
 8011150:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011154:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8011158:	f04f 0101 	mov.w	r1, #1
 801115c:	f00a fe30 	bl	801bdc0 <TIM_Cmd>

       	 	dt500Hz = (float)timerValue * 0.0000005f;  // For integrations in 500 Hz loop
 8011160:	f643 3374 	movw	r3, #15220	; 0x3b74
 8011164:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011168:	881b      	ldrh	r3, [r3, #0]
 801116a:	ee07 3a90 	vmov	s15, r3
 801116e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011172:	ed5f 7a33 	vldr	s15, [pc, #-204]	; 80110a8 <main+0x2c0>
 8011176:	ee67 7a27 	vmul.f32	s15, s14, s15
 801117a:	f641 2304 	movw	r3, #6660	; 0x1a04
 801117e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011182:	edc3 7a00 	vstr	s15, [r3]

            sensors.accel500Hz[XAXIS] = -((float)accelSummedSamples500Hz[XAXIS] / 2.0f - eepromConfig.accelBias[XAXIS]) * eepromConfig.accelScaleFactor[XAXIS];
 8011186:	f640 039c 	movw	r3, #2204	; 0x89c
 801118a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	ee07 3a90 	vmov	s15, r3
 8011194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011198:	eef0 7a00 	vmov.f32	s15, #0
 801119c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80111a0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80111a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80111a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80111ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80111b0:	eeb1 7a67 	vneg.f32	s14, s15
 80111b4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80111b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80111bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80111c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111c4:	f643 3398 	movw	r3, #15256	; 0x3b98
 80111c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80111cc:	edc3 7a00 	vstr	s15, [r3]
			sensors.accel500Hz[YAXIS] =  ((float)accelSummedSamples500Hz[YAXIS] / 2.0f - eepromConfig.accelBias[YAXIS]) * eepromConfig.accelScaleFactor[YAXIS];
 80111d0:	f640 039c 	movw	r3, #2204	; 0x89c
 80111d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80111d8:	685b      	ldr	r3, [r3, #4]
 80111da:	ee07 3a90 	vmov	s15, r3
 80111de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80111e2:	eef0 7a00 	vmov.f32	s15, #0
 80111e6:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80111ea:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80111ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80111f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80111f6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80111fa:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80111fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011202:	edd3 7a05 	vldr	s15, [r3, #20]
 8011206:	ee67 7a27 	vmul.f32	s15, s14, s15
 801120a:	f643 3398 	movw	r3, #15256	; 0x3b98
 801120e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011212:	edc3 7a01 	vstr	s15, [r3, #4]
			sensors.accel500Hz[ZAXIS] = -((float)accelSummedSamples500Hz[ZAXIS] / 2.0f - eepromConfig.accelBias[ZAXIS]) * eepromConfig.accelScaleFactor[ZAXIS];
 8011216:	f640 039c 	movw	r3, #2204	; 0x89c
 801121a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801121e:	689b      	ldr	r3, [r3, #8]
 8011220:	ee07 3a90 	vmov	s15, r3
 8011224:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011228:	eef0 7a00 	vmov.f32	s15, #0
 801122c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8011230:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011234:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011238:	ed93 7a03 	vldr	s14, [r3, #12]
 801123c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011240:	eeb1 7a67 	vneg.f32	s14, s15
 8011244:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011248:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801124c:	edd3 7a06 	vldr	s15, [r3, #24]
 8011250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011254:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011258:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801125c:	edc3 7a02 	vstr	s15, [r3, #8]

            sensors.accel500Hz[XAXIS] = computeFourthOrder500Hz(sensors.accel500Hz[XAXIS], &fourthOrder500Hz[AX_FILTER]);
 8011260:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011264:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	4618      	mov	r0, r3
 801126c:	f643 21b4 	movw	r1, #15028	; 0x3ab4
 8011270:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8011274:	f7ff fc9e 	bl	8010bb4 <computeFourthOrder500Hz>
 8011278:	4602      	mov	r2, r0
 801127a:	f643 3398 	movw	r3, #15256	; 0x3b98
 801127e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011282:	601a      	str	r2, [r3, #0]
            sensors.accel500Hz[YAXIS] = computeFourthOrder500Hz(sensors.accel500Hz[YAXIS], &fourthOrder500Hz[AY_FILTER]);
 8011284:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011288:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801128c:	685b      	ldr	r3, [r3, #4]
 801128e:	4618      	mov	r0, r3
 8011290:	49e2      	ldr	r1, [pc, #904]	; (801161c <main+0x834>)
 8011292:	f7ff fc8f 	bl	8010bb4 <computeFourthOrder500Hz>
 8011296:	4602      	mov	r2, r0
 8011298:	f643 3398 	movw	r3, #15256	; 0x3b98
 801129c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80112a0:	605a      	str	r2, [r3, #4]
            sensors.accel500Hz[ZAXIS] = computeFourthOrder500Hz(sensors.accel500Hz[ZAXIS], &fourthOrder500Hz[AZ_FILTER]);
 80112a2:	f643 3398 	movw	r3, #15256	; 0x3b98
 80112a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80112aa:	689b      	ldr	r3, [r3, #8]
 80112ac:	4618      	mov	r0, r3
 80112ae:	49dc      	ldr	r1, [pc, #880]	; (8011620 <main+0x838>)
 80112b0:	f7ff fc80 	bl	8010bb4 <computeFourthOrder500Hz>
 80112b4:	4602      	mov	r2, r0
 80112b6:	f643 3398 	movw	r3, #15256	; 0x3b98
 80112ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80112be:	609a      	str	r2, [r3, #8]

            sensors.gyro500Hz[ROLL ] =  ((float)gyroSummedSamples500Hz[ROLL]  / 2.0f - gyroRTBias[ROLL ]) * GYRO_SCALE_FACTOR;
 80112c0:	f640 0350 	movw	r3, #2128	; 0x850
 80112c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	ee07 3a90 	vmov	s15, r3
 80112ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80112d2:	eef0 7a00 	vmov.f32	s15, #0
 80112d6:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80112da:	f640 035c 	movw	r3, #2140	; 0x85c
 80112de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80112e2:	ed93 7a00 	vldr	s14, [r3]
 80112e6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80112ea:	eddf 7ace 	vldr	s15, [pc, #824]	; 8011624 <main+0x83c>
 80112ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112f2:	f643 3398 	movw	r3, #15256	; 0x3b98
 80112f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80112fa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			sensors.gyro500Hz[PITCH] =  ((float)gyroSummedSamples500Hz[PITCH] / 2.0f - gyroRTBias[PITCH]) * GYRO_SCALE_FACTOR;
 80112fe:	f640 0350 	movw	r3, #2128	; 0x850
 8011302:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011306:	685b      	ldr	r3, [r3, #4]
 8011308:	ee07 3a90 	vmov	s15, r3
 801130c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011310:	eef0 7a00 	vmov.f32	s15, #0
 8011314:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8011318:	f640 035c 	movw	r3, #2140	; 0x85c
 801131c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011320:	ed93 7a01 	vldr	s14, [r3, #4]
 8011324:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8011328:	eddf 7abe 	vldr	s15, [pc, #760]	; 8011624 <main+0x83c>
 801132c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011330:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011334:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011338:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
            sensors.gyro500Hz[YAW  ] = -((float)gyroSummedSamples500Hz[YAW]   / 2.0f - gyroRTBias[YAW  ]) * GYRO_SCALE_FACTOR;
 801133c:	f640 0350 	movw	r3, #2128	; 0x850
 8011340:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011344:	689b      	ldr	r3, [r3, #8]
 8011346:	ee07 3a90 	vmov	s15, r3
 801134a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801134e:	eef0 7a00 	vmov.f32	s15, #0
 8011352:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8011356:	f640 035c 	movw	r3, #2140	; 0x85c
 801135a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801135e:	ed93 7a02 	vldr	s14, [r3, #8]
 8011362:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011366:	eeb1 7a67 	vneg.f32	s14, s15
 801136a:	eddf 7aae 	vldr	s15, [pc, #696]	; 8011624 <main+0x83c>
 801136e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011372:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011376:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801137a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

            MargAHRSupdate( sensors.gyro500Hz[ROLL],   sensors.gyro500Hz[PITCH],  sensors.gyro500Hz[YAW],
 801137e:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011382:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011386:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011388:	f643 3398 	movw	r3, #15256	; 0x3b98
 801138c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011390:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8011392:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011396:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801139a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801139c:	f643 3398 	movw	r3, #15256	; 0x3b98
 80113a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80113a4:	681c      	ldr	r4, [r3, #0]
 80113a6:	f643 3398 	movw	r3, #15256	; 0x3b98
 80113aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80113ae:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80113b2:	f643 3398 	movw	r3, #15256	; 0x3b98
 80113b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80113ba:	f8d3 8008 	ldr.w	r8, [r3, #8]
 80113be:	f643 3398 	movw	r3, #15256	; 0x3b98
 80113c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80113c6:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80113ca:	f643 3398 	movw	r3, #15256	; 0x3b98
 80113ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80113d2:	f8d3 e034 	ldr.w	lr, [r3, #52]	; 0x34
 80113d6:	f643 3398 	movw	r3, #15256	; 0x3b98
 80113da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80113de:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80113e0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80113e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80113e8:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 80113ea:	f240 63ec 	movw	r3, #1772	; 0x6ec
 80113ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80113f2:	781d      	ldrb	r5, [r3, #0]
 80113f4:	f641 2304 	movw	r3, #6660	; 0x1a04
 80113f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	f8cd 9000 	str.w	r9, [sp]
 8011402:	f8cd 8004 	str.w	r8, [sp, #4]
 8011406:	f8cd c008 	str.w	ip, [sp, #8]
 801140a:	f8cd e00c 	str.w	lr, [sp, #12]
 801140e:	9704      	str	r7, [sp, #16]
 8011410:	9605      	str	r6, [sp, #20]
 8011412:	9506      	str	r5, [sp, #24]
 8011414:	9307      	str	r3, [sp, #28]
 8011416:	4623      	mov	r3, r4
 8011418:	f7f6 fcfa 	bl	8007e10 <MargAHRSupdate>
                            sensors.mag10Hz[XAXIS],    sensors.mag10Hz[YAXIS],    sensors.mag10Hz[ZAXIS],
                            eepromConfig.accelCutoff,
                            magDataUpdate,
                            dt500Hz );

            magDataUpdate = false;
 801141c:	f240 63ec 	movw	r3, #1772	; 0x6ec
 8011420:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011424:	f04f 0200 	mov.w	r2, #0
 8011428:	701a      	strb	r2, [r3, #0]

            computeAxisCommands(dt500Hz);
 801142a:	f641 2304 	movw	r3, #6660	; 0x1a04
 801142e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	4618      	mov	r0, r3
 8011436:	f7fd f85f 	bl	800e4f8 <computeAxisCommands>
            mixTable();
 801143a:	f000 fc7f 	bl	8011d3c <mixTable>
            writeServos();
 801143e:	f000 fbd9 	bl	8011bf4 <writeServos>
            writeMotors();
 8011442:	f000 fbf9 	bl	8011c38 <writeMotors>

       	    executionTime500Hz = micros() - currentTime;
 8011446:	f7f4 fce7 	bl	8005e18 <micros>
 801144a:	4602      	mov	r2, r0
 801144c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801144e:	1ad2      	subs	r2, r2, r3
 8011450:	f641 13f4 	movw	r3, #6644	; 0x19f4
 8011454:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011458:	601a      	str	r2, [r3, #0]
		}

        ///////////////////////////////

        if (frame_100Hz)
 801145a:	f240 7377 	movw	r3, #1911	; 0x777
 801145e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	2b00      	cmp	r3, #0
 8011466:	f000 82a9 	beq.w	80119bc <main+0xbd4>
        {
        	frame_100Hz = false;
 801146a:	f240 7377 	movw	r3, #1911	; 0x777
 801146e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011472:	f04f 0200 	mov.w	r2, #0
 8011476:	701a      	strb	r2, [r3, #0]

        	currentTime       = micros();
 8011478:	f7f4 fcce 	bl	8005e18 <micros>
 801147c:	9009      	str	r0, [sp, #36]	; 0x24
			deltaTime100Hz    = currentTime - previous100HzTime;
 801147e:	f641 2318 	movw	r3, #6680	; 0x1a18
 8011482:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801148a:	1ad2      	subs	r2, r2, r3
 801148c:	f641 13e4 	movw	r3, #6628	; 0x19e4
 8011490:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011494:	601a      	str	r2, [r3, #0]
			previous100HzTime = currentTime;
 8011496:	f641 2318 	movw	r3, #6680	; 0x1a18
 801149a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801149e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114a0:	601a      	str	r2, [r3, #0]

			TIM_Cmd(TIM7, DISABLE);
 80114a2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80114a6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80114aa:	f04f 0100 	mov.w	r1, #0
 80114ae:	f00a fc87 	bl	801bdc0 <TIM_Cmd>
			timerValue = TIM_GetCounter(TIM7);
 80114b2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80114b6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80114ba:	f00a fbd1 	bl	801bc60 <TIM_GetCounter>
 80114be:	4603      	mov	r3, r0
 80114c0:	b29a      	uxth	r2, r3
 80114c2:	f643 3374 	movw	r3, #15220	; 0x3b74
 80114c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80114ca:	801a      	strh	r2, [r3, #0]
			TIM_SetCounter(TIM7, 0);
 80114cc:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80114d0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80114d4:	f04f 0100 	mov.w	r1, #0
 80114d8:	f00a fbb2 	bl	801bc40 <TIM_SetCounter>
			TIM_Cmd(TIM7, ENABLE);
 80114dc:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80114e0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80114e4:	f04f 0101 	mov.w	r1, #1
 80114e8:	f00a fc6a 	bl	801bdc0 <TIM_Cmd>

			dt100Hz = (float)timerValue * 0.0000005f;  // For integrations in 100 Hz loop
 80114ec:	f643 3374 	movw	r3, #15220	; 0x3b74
 80114f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80114f4:	881b      	ldrh	r3, [r3, #0]
 80114f6:	ee07 3a90 	vmov	s15, r3
 80114fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80114fe:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8011628 <main+0x840>
 8011502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011506:	f641 2308 	movw	r3, #6664	; 0x1a08
 801150a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801150e:	edc3 7a00 	vstr	s15, [r3]

			sensors.accel100Hz[XAXIS] = -((float)accelSummedSamples100Hz[XAXIS] / 10.0f - eepromConfig.accelBias[XAXIS]) * eepromConfig.accelScaleFactor[XAXIS];
 8011512:	f640 0390 	movw	r3, #2192	; 0x890
 8011516:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	ee07 3a90 	vmov	s15, r3
 8011520:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011524:	eef2 7a04 	vmov.f32	s15, #36	; 0x24
 8011528:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801152c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011530:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011534:	ed93 7a01 	vldr	s14, [r3, #4]
 8011538:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801153c:	eeb1 7a67 	vneg.f32	s14, s15
 8011540:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011544:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011548:	edd3 7a04 	vldr	s15, [r3, #16]
 801154c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011550:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011554:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011558:	edc3 7a03 	vstr	s15, [r3, #12]
			sensors.accel100Hz[YAXIS] =  ((float)accelSummedSamples100Hz[YAXIS] / 10.0f - eepromConfig.accelBias[YAXIS]) * eepromConfig.accelScaleFactor[YAXIS];
 801155c:	f640 0390 	movw	r3, #2192	; 0x890
 8011560:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011564:	685b      	ldr	r3, [r3, #4]
 8011566:	ee07 3a90 	vmov	s15, r3
 801156a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801156e:	eef2 7a04 	vmov.f32	s15, #36	; 0x24
 8011572:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8011576:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801157a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801157e:	ed93 7a02 	vldr	s14, [r3, #8]
 8011582:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8011586:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801158a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801158e:	edd3 7a05 	vldr	s15, [r3, #20]
 8011592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011596:	f643 3398 	movw	r3, #15256	; 0x3b98
 801159a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801159e:	edc3 7a04 	vstr	s15, [r3, #16]
			sensors.accel100Hz[ZAXIS] = -((float)accelSummedSamples100Hz[ZAXIS] / 10.0f - eepromConfig.accelBias[ZAXIS]) * eepromConfig.accelScaleFactor[ZAXIS];
 80115a2:	f640 0390 	movw	r3, #2192	; 0x890
 80115a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80115aa:	689b      	ldr	r3, [r3, #8]
 80115ac:	ee07 3a90 	vmov	s15, r3
 80115b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80115b4:	eef2 7a04 	vmov.f32	s15, #36	; 0x24
 80115b8:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80115bc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80115c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80115c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80115c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80115cc:	eeb1 7a67 	vneg.f32	s14, s15
 80115d0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80115d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80115d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80115dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115e0:	f643 3398 	movw	r3, #15256	; 0x3b98
 80115e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80115e8:	edc3 7a05 	vstr	s15, [r3, #20]

        	sensors.accel100Hz[XAXIS] = computeFourthOrder100Hz(sensors.accel100Hz[XAXIS], &fourthOrder100Hz[AX_FILTER]);
 80115ec:	f643 3398 	movw	r3, #15256	; 0x3b98
 80115f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80115f4:	68db      	ldr	r3, [r3, #12]
 80115f6:	4618      	mov	r0, r3
 80115f8:	f643 3114 	movw	r1, #15124	; 0x3b14
 80115fc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8011600:	f7ff f9be 	bl	8010980 <computeFourthOrder100Hz>
 8011604:	4602      	mov	r2, r0
 8011606:	f643 3398 	movw	r3, #15256	; 0x3b98
 801160a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801160e:	60da      	str	r2, [r3, #12]
            sensors.accel100Hz[YAXIS] = computeFourthOrder100Hz(sensors.accel100Hz[YAXIS], &fourthOrder100Hz[AY_FILTER]);
 8011610:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011614:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011618:	e008      	b.n	801162c <main+0x844>
 801161a:	bf00      	nop
 801161c:	20003ad4 	.word	0x20003ad4
 8011620:	20003af4 	.word	0x20003af4
 8011624:	39a0221f 	.word	0x39a0221f
 8011628:	350637bd 	.word	0x350637bd
 801162c:	691b      	ldr	r3, [r3, #16]
 801162e:	4618      	mov	r0, r3
 8011630:	49db      	ldr	r1, [pc, #876]	; (80119a0 <main+0xbb8>)
 8011632:	f7ff f9a5 	bl	8010980 <computeFourthOrder100Hz>
 8011636:	4602      	mov	r2, r0
 8011638:	f643 3398 	movw	r3, #15256	; 0x3b98
 801163c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011640:	611a      	str	r2, [r3, #16]
            sensors.accel100Hz[ZAXIS] = computeFourthOrder100Hz(sensors.accel100Hz[ZAXIS], &fourthOrder100Hz[AZ_FILTER]);
 8011642:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011646:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801164a:	695b      	ldr	r3, [r3, #20]
 801164c:	4618      	mov	r0, r3
 801164e:	49d5      	ldr	r1, [pc, #852]	; (80119a4 <main+0xbbc>)
 8011650:	f7ff f996 	bl	8010980 <computeFourthOrder100Hz>
 8011654:	4602      	mov	r2, r0
 8011656:	f643 3398 	movw	r3, #15256	; 0x3b98
 801165a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801165e:	615a      	str	r2, [r3, #20]

            createRotationMatrix();
 8011660:	f7fe f892 	bl	800f788 <createRotationMatrix>
            bodyAccelToEarthAccel();
 8011664:	f7fe f982 	bl	800f96c <bodyAccelToEarthAccel>
            vertCompFilter(dt100Hz);
 8011668:	f641 2308 	movw	r3, #6664	; 0x1a08
 801166c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	4618      	mov	r0, r3
 8011674:	f006 fbe4 	bl	8017e40 <vertCompFilter>

            // High Speed Telemetry Test Code Begin
            if ( highSpeedTelem1Enabled == true )
 8011678:	f240 73df 	movw	r3, #2015	; 0x7df
 801167c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011680:	781b      	ldrb	r3, [r3, #0]
 8011682:	2b01      	cmp	r3, #1
 8011684:	d147      	bne.n	8011716 <main+0x92e>
            {
            	// 500 Hz Accels
            	ftoa(sensors.accel500Hz[XAXIS], numberString); telemetryPrint(numberString); telemetryPrint(",");
 8011686:	f643 3398 	movw	r3, #15256	; 0x3b98
 801168a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	4618      	mov	r0, r3
 8011692:	f643 3178 	movw	r1, #15224	; 0x3b78
 8011696:	f2c2 0100 	movt	r1, #8192	; 0x2000
 801169a:	f005 fad1 	bl	8016c40 <ftoa>
 801169e:	f643 3078 	movw	r0, #15224	; 0x3b78
 80116a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80116a6:	f7f4 ff6f 	bl	8006588 <telemetryPrint>
 80116aa:	f64d 6000 	movw	r0, #56832	; 0xde00
 80116ae:	f6c0 0002 	movt	r0, #2050	; 0x802
 80116b2:	f7f4 ff69 	bl	8006588 <telemetryPrint>
            	ftoa(sensors.accel500Hz[YAXIS], numberString); telemetryPrint(numberString); telemetryPrint(",");
 80116b6:	f643 3398 	movw	r3, #15256	; 0x3b98
 80116ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80116be:	685b      	ldr	r3, [r3, #4]
 80116c0:	4618      	mov	r0, r3
 80116c2:	f643 3178 	movw	r1, #15224	; 0x3b78
 80116c6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80116ca:	f005 fab9 	bl	8016c40 <ftoa>
 80116ce:	f643 3078 	movw	r0, #15224	; 0x3b78
 80116d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80116d6:	f7f4 ff57 	bl	8006588 <telemetryPrint>
 80116da:	f64d 6000 	movw	r0, #56832	; 0xde00
 80116de:	f6c0 0002 	movt	r0, #2050	; 0x802
 80116e2:	f7f4 ff51 	bl	8006588 <telemetryPrint>
            	ftoa(sensors.accel500Hz[ZAXIS], numberString); telemetryPrint(numberString); telemetryPrint("\n");
 80116e6:	f643 3398 	movw	r3, #15256	; 0x3b98
 80116ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80116ee:	689b      	ldr	r3, [r3, #8]
 80116f0:	4618      	mov	r0, r3
 80116f2:	f643 3178 	movw	r1, #15224	; 0x3b78
 80116f6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80116fa:	f005 faa1 	bl	8016c40 <ftoa>
 80116fe:	f643 3078 	movw	r0, #15224	; 0x3b78
 8011702:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8011706:	f7f4 ff3f 	bl	8006588 <telemetryPrint>
 801170a:	f64d 6004 	movw	r0, #56836	; 0xde04
 801170e:	f6c0 0002 	movt	r0, #2050	; 0x802
 8011712:	f7f4 ff39 	bl	8006588 <telemetryPrint>
            }

            if ( highSpeedTelem2Enabled == true )
 8011716:	f240 73e0 	movw	r3, #2016	; 0x7e0
 801171a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801171e:	781b      	ldrb	r3, [r3, #0]
 8011720:	2b01      	cmp	r3, #1
 8011722:	d147      	bne.n	80117b4 <main+0x9cc>
            {
            	// 500 Hz Gyros
            	ftoa(sensors.gyro500Hz[ROLL ], numberString); telemetryPrint(numberString); telemetryPrint(",");
 8011724:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011728:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801172e:	4618      	mov	r0, r3
 8011730:	f643 3178 	movw	r1, #15224	; 0x3b78
 8011734:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8011738:	f005 fa82 	bl	8016c40 <ftoa>
 801173c:	f643 3078 	movw	r0, #15224	; 0x3b78
 8011740:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8011744:	f7f4 ff20 	bl	8006588 <telemetryPrint>
 8011748:	f64d 6000 	movw	r0, #56832	; 0xde00
 801174c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8011750:	f7f4 ff1a 	bl	8006588 <telemetryPrint>
             	ftoa(sensors.gyro500Hz[PITCH], numberString); telemetryPrint(numberString); telemetryPrint(",");
 8011754:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011758:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801175c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801175e:	4618      	mov	r0, r3
 8011760:	f643 3178 	movw	r1, #15224	; 0x3b78
 8011764:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8011768:	f005 fa6a 	bl	8016c40 <ftoa>
 801176c:	f643 3078 	movw	r0, #15224	; 0x3b78
 8011770:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8011774:	f7f4 ff08 	bl	8006588 <telemetryPrint>
 8011778:	f64d 6000 	movw	r0, #56832	; 0xde00
 801177c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8011780:	f7f4 ff02 	bl	8006588 <telemetryPrint>
            	ftoa(sensors.gyro500Hz[YAW  ], numberString); telemetryPrint(numberString); telemetryPrint("\n");
 8011784:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011788:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801178e:	4618      	mov	r0, r3
 8011790:	f643 3178 	movw	r1, #15224	; 0x3b78
 8011794:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8011798:	f005 fa52 	bl	8016c40 <ftoa>
 801179c:	f643 3078 	movw	r0, #15224	; 0x3b78
 80117a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80117a4:	f7f4 fef0 	bl	8006588 <telemetryPrint>
 80117a8:	f64d 6004 	movw	r0, #56836	; 0xde04
 80117ac:	f6c0 0002 	movt	r0, #2050	; 0x802
 80117b0:	f7f4 feea 	bl	8006588 <telemetryPrint>
            }

            if ( highSpeedTelem3Enabled == true )
 80117b4:	f240 73e1 	movw	r3, #2017	; 0x7e1
 80117b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80117bc:	781b      	ldrb	r3, [r3, #0]
 80117be:	2b01      	cmp	r3, #1
 80117c0:	d12f      	bne.n	8011822 <main+0xa3a>
            {
            	// Roll Rate, Roll Rate Command
            	ftoa(sensors.gyro500Hz[ROLL], numberString); telemetryPrint(numberString); telemetryPrint(",");
 80117c2:	f643 3398 	movw	r3, #15256	; 0x3b98
 80117c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80117ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117cc:	4618      	mov	r0, r3
 80117ce:	f643 3178 	movw	r1, #15224	; 0x3b78
 80117d2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80117d6:	f005 fa33 	bl	8016c40 <ftoa>
 80117da:	f643 3078 	movw	r0, #15224	; 0x3b78
 80117de:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80117e2:	f7f4 fed1 	bl	8006588 <telemetryPrint>
 80117e6:	f64d 6000 	movw	r0, #56832	; 0xde00
 80117ea:	f6c0 0002 	movt	r0, #2050	; 0x802
 80117ee:	f7f4 fecb 	bl	8006588 <telemetryPrint>
            	ftoa(rxCommand[ROLL],         numberString); telemetryPrint(numberString); telemetryPrint("\n");
 80117f2:	f240 0388 	movw	r3, #136	; 0x88
 80117f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	4618      	mov	r0, r3
 80117fe:	f643 3178 	movw	r1, #15224	; 0x3b78
 8011802:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8011806:	f005 fa1b 	bl	8016c40 <ftoa>
 801180a:	f643 3078 	movw	r0, #15224	; 0x3b78
 801180e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8011812:	f7f4 feb9 	bl	8006588 <telemetryPrint>
 8011816:	f64d 6004 	movw	r0, #56836	; 0xde04
 801181a:	f6c0 0002 	movt	r0, #2050	; 0x802
 801181e:	f7f4 feb3 	bl	8006588 <telemetryPrint>
            }

            if ( highSpeedTelem4Enabled == true )
 8011822:	f240 73e2 	movw	r3, #2018	; 0x7e2
 8011826:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	2b01      	cmp	r3, #1
 801182e:	d12f      	bne.n	8011890 <main+0xaa8>
            {
            	// Pitch Rate, Pitch Rate Command
            	ftoa(sensors.gyro500Hz[PITCH], numberString); telemetryPrint(numberString); telemetryPrint(",");
 8011830:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011834:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801183a:	4618      	mov	r0, r3
 801183c:	f643 3178 	movw	r1, #15224	; 0x3b78
 8011840:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8011844:	f005 f9fc 	bl	8016c40 <ftoa>
 8011848:	f643 3078 	movw	r0, #15224	; 0x3b78
 801184c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8011850:	f7f4 fe9a 	bl	8006588 <telemetryPrint>
 8011854:	f64d 6000 	movw	r0, #56832	; 0xde00
 8011858:	f6c0 0002 	movt	r0, #2050	; 0x802
 801185c:	f7f4 fe94 	bl	8006588 <telemetryPrint>
            	ftoa(rxCommand[PITCH],         numberString); telemetryPrint(numberString); telemetryPrint("\n");
 8011860:	f240 0388 	movw	r3, #136	; 0x88
 8011864:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011868:	685b      	ldr	r3, [r3, #4]
 801186a:	4618      	mov	r0, r3
 801186c:	f643 3178 	movw	r1, #15224	; 0x3b78
 8011870:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8011874:	f005 f9e4 	bl	8016c40 <ftoa>
 8011878:	f643 3078 	movw	r0, #15224	; 0x3b78
 801187c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8011880:	f7f4 fe82 	bl	8006588 <telemetryPrint>
 8011884:	f64d 6004 	movw	r0, #56836	; 0xde04
 8011888:	f6c0 0002 	movt	r0, #2050	; 0x802
 801188c:	f7f4 fe7c 	bl	8006588 <telemetryPrint>
            }

            if ( highSpeedTelem5Enabled == true )
 8011890:	f240 73e3 	movw	r3, #2019	; 0x7e3
 8011894:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011898:	781b      	ldrb	r3, [r3, #0]
 801189a:	2b01      	cmp	r3, #1
 801189c:	d12f      	bne.n	80118fe <main+0xb16>
            {
            	// Yaw Rate, Yaw Rate Command
            	ftoa(sensors.gyro500Hz[YAW], numberString); telemetryPrint(numberString); telemetryPrint(",");
 801189e:	f643 3398 	movw	r3, #15256	; 0x3b98
 80118a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80118a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118a8:	4618      	mov	r0, r3
 80118aa:	f643 3178 	movw	r1, #15224	; 0x3b78
 80118ae:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80118b2:	f005 f9c5 	bl	8016c40 <ftoa>
 80118b6:	f643 3078 	movw	r0, #15224	; 0x3b78
 80118ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80118be:	f7f4 fe63 	bl	8006588 <telemetryPrint>
 80118c2:	f64d 6000 	movw	r0, #56832	; 0xde00
 80118c6:	f6c0 0002 	movt	r0, #2050	; 0x802
 80118ca:	f7f4 fe5d 	bl	8006588 <telemetryPrint>
            	ftoa(rxCommand[YAW],         numberString); telemetryPrint(numberString); telemetryPrint("\n");
 80118ce:	f240 0388 	movw	r3, #136	; 0x88
 80118d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80118d6:	689b      	ldr	r3, [r3, #8]
 80118d8:	4618      	mov	r0, r3
 80118da:	f643 3178 	movw	r1, #15224	; 0x3b78
 80118de:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80118e2:	f005 f9ad 	bl	8016c40 <ftoa>
 80118e6:	f643 3078 	movw	r0, #15224	; 0x3b78
 80118ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80118ee:	f7f4 fe4b 	bl	8006588 <telemetryPrint>
 80118f2:	f64d 6004 	movw	r0, #56836	; 0xde04
 80118f6:	f6c0 0002 	movt	r0, #2050	; 0x802
 80118fa:	f7f4 fe45 	bl	8006588 <telemetryPrint>
            }

            if ( highSpeedTelem6Enabled == true )
 80118fe:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8011902:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011906:	781b      	ldrb	r3, [r3, #0]
 8011908:	2b01      	cmp	r3, #1
 801190a:	d14d      	bne.n	80119a8 <main+0xbc0>
            {
            	// 500 Hz Attitudes
            	ftoa(sensors.attitude500Hz[ROLL ], numberString); telemetryPrint(numberString); telemetryPrint(",");
 801190c:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011910:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011914:	699b      	ldr	r3, [r3, #24]
 8011916:	4618      	mov	r0, r3
 8011918:	f643 3178 	movw	r1, #15224	; 0x3b78
 801191c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8011920:	f005 f98e 	bl	8016c40 <ftoa>
 8011924:	f643 3078 	movw	r0, #15224	; 0x3b78
 8011928:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801192c:	f7f4 fe2c 	bl	8006588 <telemetryPrint>
 8011930:	f64d 6000 	movw	r0, #56832	; 0xde00
 8011934:	f6c0 0002 	movt	r0, #2050	; 0x802
 8011938:	f7f4 fe26 	bl	8006588 <telemetryPrint>
            	ftoa(sensors.attitude500Hz[PITCH], numberString); telemetryPrint(numberString); telemetryPrint(",");
 801193c:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011940:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011944:	69db      	ldr	r3, [r3, #28]
 8011946:	4618      	mov	r0, r3
 8011948:	f643 3178 	movw	r1, #15224	; 0x3b78
 801194c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8011950:	f005 f976 	bl	8016c40 <ftoa>
 8011954:	f643 3078 	movw	r0, #15224	; 0x3b78
 8011958:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801195c:	f7f4 fe14 	bl	8006588 <telemetryPrint>
 8011960:	f64d 6000 	movw	r0, #56832	; 0xde00
 8011964:	f6c0 0002 	movt	r0, #2050	; 0x802
 8011968:	f7f4 fe0e 	bl	8006588 <telemetryPrint>
            	ftoa(sensors.attitude500Hz[YAW  ], numberString); telemetryPrint(numberString); telemetryPrint("\n");
 801196c:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011970:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011974:	6a1b      	ldr	r3, [r3, #32]
 8011976:	4618      	mov	r0, r3
 8011978:	f643 3178 	movw	r1, #15224	; 0x3b78
 801197c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8011980:	f005 f95e 	bl	8016c40 <ftoa>
 8011984:	f643 3078 	movw	r0, #15224	; 0x3b78
 8011988:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801198c:	f7f4 fdfc 	bl	8006588 <telemetryPrint>
 8011990:	f64d 6004 	movw	r0, #56836	; 0xde04
 8011994:	f6c0 0002 	movt	r0, #2050	; 0x802
 8011998:	f7f4 fdf6 	bl	8006588 <telemetryPrint>
 801199c:	e004      	b.n	80119a8 <main+0xbc0>
 801199e:	bf00      	nop
 80119a0:	20003b34 	.word	0x20003b34
 80119a4:	20003b54 	.word	0x20003b54
            }
            // High Speed Telemetry Test Code End

            executionTime100Hz = micros() - currentTime;
 80119a8:	f7f4 fa36 	bl	8005e18 <micros>
 80119ac:	4602      	mov	r2, r0
 80119ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119b0:	1ad2      	subs	r2, r2, r3
 80119b2:	f641 13e0 	movw	r3, #6624	; 0x19e0
 80119b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80119ba:	601a      	str	r2, [r3, #0]
        }

        ///////////////////////////////

        if (frame_5Hz)
 80119bc:	f240 737a 	movw	r3, #1914	; 0x77a
 80119c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80119c4:	781b      	ldrb	r3, [r3, #0]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d034      	beq.n	8011a34 <main+0xc4c>
        {
        	frame_5Hz = false;
 80119ca:	f240 737a 	movw	r3, #1914	; 0x77a
 80119ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80119d2:	f04f 0200 	mov.w	r2, #0
 80119d6:	701a      	strb	r2, [r3, #0]

        	currentTime     = micros();
 80119d8:	f7f4 fa1e 	bl	8005e18 <micros>
 80119dc:	9009      	str	r0, [sp, #36]	; 0x24
			deltaTime5Hz    = currentTime - previous5HzTime;
 80119de:	f641 13d0 	movw	r3, #6608	; 0x19d0
 80119e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80119ea:	1ad2      	subs	r2, r2, r3
 80119ec:	f641 13ec 	movw	r3, #6636	; 0x19ec
 80119f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80119f4:	601a      	str	r2, [r3, #0]
			previous5HzTime = currentTime;
 80119f6:	f641 13d0 	movw	r3, #6608	; 0x19d0
 80119fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80119fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a00:	601a      	str	r2, [r3, #0]

			if (execUp == true)
 8011a02:	f240 737d 	movw	r3, #1917	; 0x77d
 8011a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011a0a:	781b      	ldrb	r3, [r3, #0]
 8011a0c:	2b01      	cmp	r3, #1
 8011a0e:	d107      	bne.n	8011a20 <main+0xc38>
			    GREEN_W_LED_TOGGLE;
 8011a10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011a14:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8011a18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011a1c:	f005 f8a0 	bl	8016b60 <GPIO_ToggleBits>

        	executionTime5Hz = micros() - currentTime;
 8011a20:	f7f4 f9fa 	bl	8005e18 <micros>
 8011a24:	4602      	mov	r2, r0
 8011a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a28:	1ad2      	subs	r2, r2, r3
 8011a2a:	f641 13cc 	movw	r3, #6604	; 0x19cc
 8011a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011a32:	601a      	str	r2, [r3, #0]
        }

        ///////////////////////////////

        if (frame_1Hz)
 8011a34:	f240 737b 	movw	r3, #1915	; 0x77b
 8011a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011a3c:	781b      	ldrb	r3, [r3, #0]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	f43f a9e6 	beq.w	8010e10 <main+0x28>
        {
        	frame_1Hz = false;
 8011a44:	f240 737b 	movw	r3, #1915	; 0x77b
 8011a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011a4c:	f04f 0200 	mov.w	r2, #0
 8011a50:	701a      	strb	r2, [r3, #0]

        	currentTime     = micros();
 8011a52:	f7f4 f9e1 	bl	8005e18 <micros>
 8011a56:	9009      	str	r0, [sp, #36]	; 0x24
			deltaTime1Hz    = currentTime - previous1HzTime;
 8011a58:	f641 2314 	movw	r3, #6676	; 0x1a14
 8011a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a64:	1ad2      	subs	r2, r2, r3
 8011a66:	f641 13c8 	movw	r3, #6600	; 0x19c8
 8011a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011a6e:	601a      	str	r2, [r3, #0]
			previous1HzTime = currentTime;
 8011a70:	f641 2314 	movw	r3, #6676	; 0x1a14
 8011a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011a78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a7a:	601a      	str	r2, [r3, #0]

			if (execUp == true)
 8011a7c:	f240 737d 	movw	r3, #1917	; 0x77d
 8011a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011a84:	781b      	ldrb	r3, [r3, #0]
 8011a86:	2b01      	cmp	r3, #1
 8011a88:	d107      	bne.n	8011a9a <main+0xcb2>
				GREEN_E_LED_TOGGLE;
 8011a8a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011a8e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8011a92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011a96:	f005 f863 	bl	8016b60 <GPIO_ToggleBits>

			if (execUp == false)
 8011a9a:	f240 737d 	movw	r3, #1917	; 0x77d
 8011a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011aa2:	781b      	ldrb	r3, [r3, #0]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d10c      	bne.n	8011ac2 <main+0xcda>
			    execUpCount++;
 8011aa8:	f640 0304 	movw	r3, #2052	; 0x804
 8011aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011ab0:	781b      	ldrb	r3, [r3, #0]
 8011ab2:	f103 0301 	add.w	r3, r3, #1
 8011ab6:	b2da      	uxtb	r2, r3
 8011ab8:	f640 0304 	movw	r3, #2052	; 0x804
 8011abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011ac0:	701a      	strb	r2, [r3, #0]

			if (execUpCount == 5)
 8011ac2:	f640 0304 	movw	r3, #2052	; 0x804
 8011ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011aca:	781b      	ldrb	r3, [r3, #0]
 8011acc:	2b05      	cmp	r3, #5
 8011ace:	d106      	bne.n	8011ade <main+0xcf6>
			    execUp = true;
 8011ad0:	f240 737d 	movw	r3, #1917	; 0x77d
 8011ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011ad8:	f04f 0201 	mov.w	r2, #1
 8011adc:	701a      	strb	r2, [r3, #0]

			executionTime1Hz = micros() - currentTime;
 8011ade:	f7f4 f99b 	bl	8005e18 <micros>
 8011ae2:	4602      	mov	r2, r0
 8011ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ae6:	1ad2      	subs	r2, r2, r3
 8011ae8:	f641 13fc 	movw	r3, #6652	; 0x19fc
 8011aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011af0:	601a      	str	r2, [r3, #0]
        }

        ////////////////////////////////
    }
 8011af2:	f7ff b98d 	b.w	8010e10 <main+0x28>
 8011af6:	bf00      	nop

08011af8 <initMixer>:
// Initialize Mixer
///////////////////////////////////////////////////////////////////////////////

void initMixer(void)
{
    switch (eepromConfig.mixerConfiguration)
 8011af8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011b00:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011b04:	f103 33ff 	add.w	r3, r3, #4294967295
 8011b08:	2b14      	cmp	r3, #20
 8011b0a:	d871      	bhi.n	8011bf0 <initMixer+0xf8>
 8011b0c:	a201      	add	r2, pc, #4	; (adr r2, 8011b14 <initMixer+0x1c>)
 8011b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b12:	bf00      	nop
 8011b14:	08011b69 	.word	0x08011b69
 8011b18:	08011b79 	.word	0x08011b79
 8011b1c:	08011b89 	.word	0x08011b89
 8011b20:	08011b99 	.word	0x08011b99
 8011b24:	08011ba9 	.word	0x08011ba9
 8011b28:	08011ba9 	.word	0x08011ba9
 8011b2c:	08011ba9 	.word	0x08011ba9
 8011b30:	08011ba9 	.word	0x08011ba9
 8011b34:	08011ba9 	.word	0x08011ba9
 8011b38:	08011ba9 	.word	0x08011ba9
 8011b3c:	08011ba9 	.word	0x08011ba9
 8011b40:	08011ba9 	.word	0x08011ba9
 8011b44:	08011ba9 	.word	0x08011ba9
 8011b48:	08011bb9 	.word	0x08011bb9
 8011b4c:	08011bb9 	.word	0x08011bb9
 8011b50:	08011bb9 	.word	0x08011bb9
 8011b54:	08011bc9 	.word	0x08011bc9
 8011b58:	08011bc9 	.word	0x08011bc9
 8011b5c:	08011bc9 	.word	0x08011bc9
 8011b60:	08011bc9 	.word	0x08011bc9
 8011b64:	08011bd9 	.word	0x08011bd9
    {
        case MIXERTYPE_GIMBAL:
            numberMotor = 0;
 8011b68:	f643 7348 	movw	r3, #16200	; 0x3f48
 8011b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011b70:	f04f 0200 	mov.w	r2, #0
 8011b74:	701a      	strb	r2, [r3, #0]
            break;
 8011b76:	e03b      	b.n	8011bf0 <initMixer+0xf8>

        case MIXERTYPE_FLYING_WING:
	        numberMotor = 1;
 8011b78:	f643 7348 	movw	r3, #16200	; 0x3f48
 8011b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011b80:	f04f 0201 	mov.w	r2, #1
 8011b84:	701a      	strb	r2, [r3, #0]
	        break;
 8011b86:	e033      	b.n	8011bf0 <initMixer+0xf8>

        case MIXERTYPE_BI:
            numberMotor = 2;
 8011b88:	f643 7348 	movw	r3, #16200	; 0x3f48
 8011b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011b90:	f04f 0202 	mov.w	r2, #2
 8011b94:	701a      	strb	r2, [r3, #0]
            break;
 8011b96:	e02b      	b.n	8011bf0 <initMixer+0xf8>

        case MIXERTYPE_TRI:
            numberMotor = 3;
 8011b98:	f643 7348 	movw	r3, #16200	; 0x3f48
 8011b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011ba0:	f04f 0203 	mov.w	r2, #3
 8011ba4:	701a      	strb	r2, [r3, #0]
            break;
 8011ba6:	e023      	b.n	8011bf0 <initMixer+0xf8>
		case MIXERTYPE_VTAIL4_RY_COMP:
		case MIXERTYPE_VTAIL4_PY_COMP:
		case MIXERTYPE_VTAIL4_RP_COMP:
        case MIXERTYPE_VTAIL4_RPY_COMP:
        case MIXERTYPE_Y4:
            numberMotor = 4;
 8011ba8:	f643 7348 	movw	r3, #16200	; 0x3f48
 8011bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011bb0:	f04f 0204 	mov.w	r2, #4
 8011bb4:	701a      	strb	r2, [r3, #0]
            break;
 8011bb6:	e01b      	b.n	8011bf0 <initMixer+0xf8>

        case MIXERTYPE_HEX6P:
        case MIXERTYPE_HEX6X:
        case MIXERTYPE_Y6:
            numberMotor = 6;
 8011bb8:	f643 7348 	movw	r3, #16200	; 0x3f48
 8011bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011bc0:	f04f 0206 	mov.w	r2, #6
 8011bc4:	701a      	strb	r2, [r3, #0]
            break;
 8011bc6:	e013      	b.n	8011bf0 <initMixer+0xf8>

        case MIXERTYPE_OCTOF8P:
        case MIXERTYPE_OCTOF8X:
        case MIXERTYPE_OCTOX8P:
        case MIXERTYPE_OCTOX8X:
            numberMotor = 8;
 8011bc8:	f643 7348 	movw	r3, #16200	; 0x3f48
 8011bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011bd0:	f04f 0208 	mov.w	r2, #8
 8011bd4:	701a      	strb	r2, [r3, #0]
            break;
 8011bd6:	e00b      	b.n	8011bf0 <initMixer+0xf8>

        case MIXERTYPE_FREEMIX:
        	numberMotor = eepromConfig.freeMixMotors;
 8011bd8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011be0:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
 8011be4:	f643 7348 	movw	r3, #16200	; 0x3f48
 8011be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011bec:	701a      	strb	r2, [r3, #0]
        	break;
 8011bee:	bf00      	nop

    }
}
 8011bf0:	4770      	bx	lr
 8011bf2:	bf00      	nop

08011bf4 <writeServos>:
///////////////////////////////////////////////////////////////////////////////
// Write to Servos
///////////////////////////////////////////////////////////////////////////////

void writeServos(void)
{
 8011bf4:	b508      	push	{r3, lr}
    pwmServoWrite(0, (uint16_t)servo[0]);
 8011bf6:	f240 03d4 	movw	r3, #212	; 0xd4
 8011bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011bfe:	edd3 7a00 	vldr	s15, [r3]
 8011c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011c06:	ee17 3a90 	vmov	r3, s15
 8011c0a:	b29b      	uxth	r3, r3
 8011c0c:	f04f 0000 	mov.w	r0, #0
 8011c10:	4619      	mov	r1, r3
 8011c12:	f7f2 fd21 	bl	8004658 <pwmServoWrite>
    pwmServoWrite(1, (uint16_t)servo[1]);
 8011c16:	f240 03d4 	movw	r3, #212	; 0xd4
 8011c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8011c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011c26:	ee17 3a90 	vmov	r3, s15
 8011c2a:	b29b      	uxth	r3, r3
 8011c2c:	f04f 0001 	mov.w	r0, #1
 8011c30:	4619      	mov	r1, r3
 8011c32:	f7f2 fd11 	bl	8004658 <pwmServoWrite>
}
 8011c36:	bd08      	pop	{r3, pc}

08011c38 <writeMotors>:
///////////////////////////////////////////////////////////////////////////////
// Write to Motors
///////////////////////////////////////////////////////////////////////////////

void writeMotors(void)
{
 8011c38:	b500      	push	{lr}
 8011c3a:	b083      	sub	sp, #12
    uint8_t i;

    for (i = 0; i < numberMotor; i++)
 8011c3c:	f04f 0300 	mov.w	r3, #0
 8011c40:	f88d 3007 	strb.w	r3, [sp, #7]
 8011c44:	e01b      	b.n	8011c7e <writeMotors+0x46>
        pwmEscWrite(i, (uint16_t)motor[i]);
 8011c46:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011c4a:	f240 03b4 	movw	r3, #180	; 0xb4
 8011c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c52:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8011c56:	189b      	adds	r3, r3, r2
 8011c58:	edd3 7a00 	vldr	s15, [r3]
 8011c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011c60:	ee17 3a90 	vmov	r3, s15
 8011c64:	b29b      	uxth	r3, r3
 8011c66:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011c6a:	4610      	mov	r0, r2
 8011c6c:	4619      	mov	r1, r3
 8011c6e:	f7f2 fc4f 	bl	8004510 <pwmEscWrite>

void writeMotors(void)
{
    uint8_t i;

    for (i = 0; i < numberMotor; i++)
 8011c72:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011c76:	f103 0301 	add.w	r3, r3, #1
 8011c7a:	f88d 3007 	strb.w	r3, [sp, #7]
 8011c7e:	f643 7348 	movw	r3, #16200	; 0x3f48
 8011c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011c8c:	429a      	cmp	r2, r3
 8011c8e:	d3da      	bcc.n	8011c46 <writeMotors+0xe>
        pwmEscWrite(i, (uint16_t)motor[i]);
}
 8011c90:	b003      	add	sp, #12
 8011c92:	bd00      	pop	{pc}

08011c94 <writeAllMotors>:
///////////////////////////////////////////////////////////////////////////////
// Write to All Motors
///////////////////////////////////////////////////////////////////////////////

void writeAllMotors(float mc)
{
 8011c94:	b500      	push	{lr}
 8011c96:	b085      	sub	sp, #20
 8011c98:	9001      	str	r0, [sp, #4]
    uint8_t i;

    // Sends commands to all motors
    for (i = 0; i < numberMotor; i++)
 8011c9a:	f04f 0300 	mov.w	r3, #0
 8011c9e:	f88d 300f 	strb.w	r3, [sp, #15]
 8011ca2:	e010      	b.n	8011cc6 <writeAllMotors+0x32>
        motor[i] = mc;
 8011ca4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011ca8:	f240 03b4 	movw	r3, #180	; 0xb4
 8011cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011cb0:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8011cb4:	189b      	adds	r3, r3, r2
 8011cb6:	9a01      	ldr	r2, [sp, #4]
 8011cb8:	601a      	str	r2, [r3, #0]
void writeAllMotors(float mc)
{
    uint8_t i;

    // Sends commands to all motors
    for (i = 0; i < numberMotor; i++)
 8011cba:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011cbe:	f103 0301 	add.w	r3, r3, #1
 8011cc2:	f88d 300f 	strb.w	r3, [sp, #15]
 8011cc6:	f643 7348 	movw	r3, #16200	; 0x3f48
 8011cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011cce:	781b      	ldrb	r3, [r3, #0]
 8011cd0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	d3e5      	bcc.n	8011ca4 <writeAllMotors+0x10>
        motor[i] = mc;
    writeMotors();
 8011cd8:	f7ff ffae 	bl	8011c38 <writeMotors>
}
 8011cdc:	b005      	add	sp, #20
 8011cde:	bd00      	pop	{pc}

08011ce0 <pulseMotors>:
///////////////////////////////////////////////////////////////////////////////
// Pulse Motors
///////////////////////////////////////////////////////////////////////////////

void pulseMotors(uint8_t quantity)
{
 8011ce0:	b500      	push	{lr}
 8011ce2:	b085      	sub	sp, #20
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t i;

    for ( i = 0; i < quantity; i++ )
 8011cea:	f04f 0300 	mov.w	r3, #0
 8011cee:	f88d 300f 	strb.w	r3, [sp, #15]
 8011cf2:	e019      	b.n	8011d28 <pulseMotors+0x48>
    {
        writeAllMotors( eepromConfig.minThrottle );
 8011cf4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d00:	4618      	mov	r0, r3
 8011d02:	f7ff ffc7 	bl	8011c94 <writeAllMotors>
        delay(250);
 8011d06:	f04f 00fa 	mov.w	r0, #250	; 0xfa
 8011d0a:	f7f4 f9f3 	bl	80060f4 <delay>
        writeAllMotors( (float)MINCOMMAND );
 8011d0e:	480a      	ldr	r0, [pc, #40]	; (8011d38 <pulseMotors+0x58>)
 8011d10:	f7ff ffc0 	bl	8011c94 <writeAllMotors>
        delay(250);
 8011d14:	f04f 00fa 	mov.w	r0, #250	; 0xfa
 8011d18:	f7f4 f9ec 	bl	80060f4 <delay>

void pulseMotors(uint8_t quantity)
{
    uint8_t i;

    for ( i = 0; i < quantity; i++ )
 8011d1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011d20:	f103 0301 	add.w	r3, r3, #1
 8011d24:	f88d 300f 	strb.w	r3, [sp, #15]
 8011d28:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011d2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011d30:	429a      	cmp	r2, r3
 8011d32:	d3df      	bcc.n	8011cf4 <pulseMotors+0x14>
        writeAllMotors( eepromConfig.minThrottle );
        delay(250);
        writeAllMotors( (float)MINCOMMAND );
        delay(250);
    }
}
 8011d34:	b005      	add	sp, #20
 8011d36:	bd00      	pop	{pc}
 8011d38:	44fa0000 	.word	0x44fa0000

08011d3c <mixTable>:
///////////////////////////////////////////////////////////////////////////////

#define PIDMIX(X,Y,Z) rxCommand[THROTTLE] + axisPID[ROLL] * X + axisPID[PITCH] * Y + eepromConfig.yawDirection * axisPID[YAW] * Z

void mixTable(void)
{
 8011d3c:	b530      	push	{r4, r5, lr}
 8011d3e:	b083      	sub	sp, #12
        axisPID[YAW] = constrain(axisPID[YAW], -100 - fabs(rcCommand[YAW]), +100 + fabs(rcCommand[YAW]));
    }
    */
    ///////////////////////////////////

    switch ( eepromConfig.mixerConfiguration )
 8011d40:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011d48:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011d4c:	f103 33ff 	add.w	r3, r3, #4294967295
 8011d50:	2b14      	cmp	r3, #20
 8011d52:	f202 8585 	bhi.w	8014860 <mixTable+0x2b24>
 8011d56:	a201      	add	r2, pc, #4	; (adr r2, 8011d5c <mixTable+0x20>)
 8011d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d5c:	08011db1 	.word	0x08011db1
 8011d60:	08011e8d 	.word	0x08011e8d
 8011d64:	080120ad 	.word	0x080120ad
 8011d68:	08012259 	.word	0x08012259
 8011d6c:	08012405 	.word	0x08012405
 8011d70:	08012589 	.word	0x08012589
 8011d74:	080126ed 	.word	0x080126ed
 8011d78:	08012871 	.word	0x08012871
 8011d7c:	08012a09 	.word	0x08012a09
 8011d80:	08012bd1 	.word	0x08012bd1
 8011d84:	08012d7d 	.word	0x08012d7d
 8011d88:	08012f3d 	.word	0x08012f3d
 8011d8c:	08013111 	.word	0x08013111
 8011d90:	08013295 	.word	0x08013295
 8011d94:	080134f5 	.word	0x080134f5
 8011d98:	08013749 	.word	0x08013749
 8011d9c:	08013b75 	.word	0x08013b75
 8011da0:	08013e99 	.word	0x08013e99
 8011da4:	0801419b 	.word	0x0801419b
 8011da8:	080144a1 	.word	0x080144a1
 8011dac:	08014763 	.word	0x08014763
    {
        case MIXERTYPE_GIMBAL:
            servo[0] = constrain( eepromConfig.gimbalRollServoMid + eepromConfig.gimbalRollServoGain * sensors.attitude500Hz[ROLL] + rxCommand[ROLL],
 8011db0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011db8:	ed93 7a9f 	vldr	s14, [r3, #636]	; 0x27c
 8011dbc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011dc4:	edd3 6aa1 	vldr	s13, [r3, #644]	; 0x284
 8011dc8:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011dd0:	edd3 7a06 	vldr	s15, [r3, #24]
 8011dd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011dd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011ddc:	f240 0388 	movw	r3, #136	; 0x88
 8011de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011de4:	edd3 7a00 	vldr	s15, [r3]
 8011de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011dec:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011df4:	f8d3 2278 	ldr.w	r2, [r3, #632]	; 0x278
 8011df8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011e00:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 8011e04:	ee17 0a90 	vmov	r0, s15
 8011e08:	4611      	mov	r1, r2
 8011e0a:	461a      	mov	r2, r3
 8011e0c:	f004 fe80 	bl	8016b10 <constrain>
 8011e10:	4602      	mov	r2, r0
 8011e12:	f240 03d4 	movw	r3, #212	; 0xd4
 8011e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011e1a:	601a      	str	r2, [r3, #0]
                                  eepromConfig.gimbalRollServoMin, eepromConfig.gimbalRollServoMax );

            servo[1] = constrain( eepromConfig.gimbalPitchServoMid + eepromConfig.gimbalPitchServoGain * sensors.attitude500Hz[PITCH] + rxCommand[PITCH],
 8011e1c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011e24:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8011e28:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011e30:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8011e34:	f643 3398 	movw	r3, #15256	; 0x3b98
 8011e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011e3c:	edd3 7a07 	vldr	s15, [r3, #28]
 8011e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011e48:	f240 0388 	movw	r3, #136	; 0x88
 8011e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011e50:	edd3 7a01 	vldr	s15, [r3, #4]
 8011e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011e58:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011e60:	f8d3 2288 	ldr.w	r2, [r3, #648]	; 0x288
 8011e64:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011e6c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011e70:	ee17 0a90 	vmov	r0, s15
 8011e74:	4611      	mov	r1, r2
 8011e76:	461a      	mov	r2, r3
 8011e78:	f004 fe4a 	bl	8016b10 <constrain>
 8011e7c:	4602      	mov	r2, r0
 8011e7e:	f240 03d4 	movw	r3, #212	; 0xd4
 8011e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011e86:	605a      	str	r2, [r3, #4]
                                  eepromConfig.gimbalPitchServoMin, eepromConfig.gimbalPitchServoMax );
            break;
 8011e88:	f002 bcea 	b.w	8014860 <mixTable+0x2b24>

        ///////////////////////////////

        case MIXERTYPE_FLYING_WING:
            motor[0] = rxCommand[THROTTLE];
 8011e8c:	f240 0388 	movw	r3, #136	; 0x88
 8011e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011e94:	68da      	ldr	r2, [r3, #12]
 8011e96:	f240 03b4 	movw	r3, #180	; 0xb4
 8011e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011e9e:	601a      	str	r2, [r3, #0]
            if (flightMode != ATTITUDE)
 8011ea0:	f240 73f8 	movw	r3, #2040	; 0x7f8
 8011ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	2b01      	cmp	r3, #1
 8011eac:	d068      	beq.n	8011f80 <mixTable+0x244>
            {   // do not use sensors for correction, simple 2 channel mixing
            	servo[0] = eepromConfig.pitchDirectionLeft  * (rxCommand[PITCH] - eepromConfig.midCommand) +
 8011eae:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011eb6:	ed93 7aa8 	vldr	s14, [r3, #672]	; 0x2a0
 8011eba:	f240 0388 	movw	r3, #136	; 0x88
 8011ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011ec2:	edd3 6a01 	vldr	s13, [r3, #4]
 8011ec6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011ece:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8011ed2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011ed6:	ee27 7a27 	vmul.f32	s14, s14, s15
            			   eepromConfig.rollDirectionLeft   * (rxCommand[ROLL ] - eepromConfig.midCommand);
 8011eda:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011ee2:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 8011ee6:	f240 0388 	movw	r3, #136	; 0x88
 8011eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011eee:	ed93 6a00 	vldr	s12, [r3]
 8011ef2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011efa:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8011efe:	ee76 7a67 	vsub.f32	s15, s12, s15
 8011f02:	ee66 7aa7 	vmul.f32	s15, s13, s15

        case MIXERTYPE_FLYING_WING:
            motor[0] = rxCommand[THROTTLE];
            if (flightMode != ATTITUDE)
            {   // do not use sensors for correction, simple 2 channel mixing
            	servo[0] = eepromConfig.pitchDirectionLeft  * (rxCommand[PITCH] - eepromConfig.midCommand) +
 8011f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f0a:	f240 03d4 	movw	r3, #212	; 0xd4
 8011f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f12:	edc3 7a00 	vstr	s15, [r3]
            			   eepromConfig.rollDirectionLeft   * (rxCommand[ROLL ] - eepromConfig.midCommand);

            	servo[1] = eepromConfig.pitchDirectionRight * (rxCommand[PITCH] - eepromConfig.midCommand) +
 8011f16:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f1e:	ed93 7aa9 	vldr	s14, [r3, #676]	; 0x2a4
 8011f22:	f240 0388 	movw	r3, #136	; 0x88
 8011f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f2a:	edd3 6a01 	vldr	s13, [r3, #4]
 8011f2e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f36:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8011f3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
            			   eepromConfig.rollDirectionRight  * (rxCommand[ROLL]  - eepromConfig.midCommand);
 8011f42:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f4a:	edd3 6aa7 	vldr	s13, [r3, #668]	; 0x29c
 8011f4e:	f240 0388 	movw	r3, #136	; 0x88
 8011f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f56:	ed93 6a00 	vldr	s12, [r3]
 8011f5a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f62:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8011f66:	ee76 7a67 	vsub.f32	s15, s12, s15
 8011f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
            if (flightMode != ATTITUDE)
            {   // do not use sensors for correction, simple 2 channel mixing
            	servo[0] = eepromConfig.pitchDirectionLeft  * (rxCommand[PITCH] - eepromConfig.midCommand) +
            			   eepromConfig.rollDirectionLeft   * (rxCommand[ROLL ] - eepromConfig.midCommand);

            	servo[1] = eepromConfig.pitchDirectionRight * (rxCommand[PITCH] - eepromConfig.midCommand) +
 8011f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f72:	f240 03d4 	movw	r3, #212	; 0xd4
 8011f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f7a:	edc3 7a01 	vstr	s15, [r3, #4]
 8011f7e:	e047      	b.n	8012010 <mixTable+0x2d4>
            			   eepromConfig.rollDirectionRight  * (rxCommand[ROLL]  - eepromConfig.midCommand);
            }
            else
            {   // use sensors to correct (attitude only)
            	servo[0] = eepromConfig.pitchDirectionLeft  * axisPID[PITCH] +
 8011f80:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f88:	ed93 7aa8 	vldr	s14, [r3, #672]	; 0x2a0
 8011f8c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8011f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f94:	edd3 7a01 	vldr	s15, [r3, #4]
 8011f98:	ee27 7a27 	vmul.f32	s14, s14, s15
            			   eepromConfig.rollDirectionLeft   * axisPID[ROLL];
 8011f9c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011fa4:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 8011fa8:	f643 2370 	movw	r3, #14960	; 0x3a70
 8011fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011fb0:	edd3 7a00 	vldr	s15, [r3]
 8011fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
            	servo[1] = eepromConfig.pitchDirectionRight * (rxCommand[PITCH] - eepromConfig.midCommand) +
            			   eepromConfig.rollDirectionRight  * (rxCommand[ROLL]  - eepromConfig.midCommand);
            }
            else
            {   // use sensors to correct (attitude only)
            	servo[0] = eepromConfig.pitchDirectionLeft  * axisPID[PITCH] +
 8011fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011fbc:	f240 03d4 	movw	r3, #212	; 0xd4
 8011fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011fc4:	edc3 7a00 	vstr	s15, [r3]
            			   eepromConfig.rollDirectionLeft   * axisPID[ROLL];

            	servo[1] = eepromConfig.pitchDirectionRight * axisPID[PITCH] +
 8011fc8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011fd0:	ed93 7aa9 	vldr	s14, [r3, #676]	; 0x2a4
 8011fd4:	f643 2370 	movw	r3, #14960	; 0x3a70
 8011fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011fdc:	edd3 7a01 	vldr	s15, [r3, #4]
 8011fe0:	ee27 7a27 	vmul.f32	s14, s14, s15
            			   eepromConfig.rollDirectionRight  * axisPID[ROLL];
 8011fe4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8011fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011fec:	edd3 6aa7 	vldr	s13, [r3, #668]	; 0x29c
 8011ff0:	f643 2370 	movw	r3, #14960	; 0x3a70
 8011ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011ff8:	edd3 7a00 	vldr	s15, [r3]
 8011ffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
            else
            {   // use sensors to correct (attitude only)
            	servo[0] = eepromConfig.pitchDirectionLeft  * axisPID[PITCH] +
            			   eepromConfig.rollDirectionLeft   * axisPID[ROLL];

            	servo[1] = eepromConfig.pitchDirectionRight * axisPID[PITCH] +
 8012000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012004:	f240 03d4 	movw	r3, #212	; 0xd4
 8012008:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801200c:	edc3 7a01 	vstr	s15, [r3, #4]
            			   eepromConfig.rollDirectionRight  * axisPID[ROLL];
            }

            servo[0] = constrain(servo[0] + eepromConfig.midCommand, eepromConfig.wingLeftMinimum,
 8012010:	f240 03d4 	movw	r3, #212	; 0xd4
 8012014:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012018:	ed93 7a00 	vldr	s14, [r3]
 801201c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012020:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012024:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8012028:	ee77 7a27 	vadd.f32	s15, s14, s15
 801202c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012030:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012034:	f8d3 22a8 	ldr.w	r2, [r3, #680]	; 0x2a8
 8012038:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801203c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012040:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 8012044:	ee17 0a90 	vmov	r0, s15
 8012048:	4611      	mov	r1, r2
 801204a:	461a      	mov	r2, r3
 801204c:	f004 fd60 	bl	8016b10 <constrain>
 8012050:	4602      	mov	r2, r0
 8012052:	f240 03d4 	movw	r3, #212	; 0xd4
 8012056:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801205a:	601a      	str	r2, [r3, #0]
            		                                                 eepromConfig.wingLeftMaximum);

            servo[1] = constrain(servo[1] + eepromConfig.midCommand, eepromConfig.wingRightMinimum,
 801205c:	f240 03d4 	movw	r3, #212	; 0xd4
 8012060:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012064:	ed93 7a01 	vldr	s14, [r3, #4]
 8012068:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801206c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012070:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8012074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012078:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801207c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012080:	f8d3 22b0 	ldr.w	r2, [r3, #688]	; 0x2b0
 8012084:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012088:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801208c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012090:	ee17 0a90 	vmov	r0, s15
 8012094:	4611      	mov	r1, r2
 8012096:	461a      	mov	r2, r3
 8012098:	f004 fd3a 	bl	8016b10 <constrain>
 801209c:	4602      	mov	r2, r0
 801209e:	f240 03d4 	movw	r3, #212	; 0xd4
 80120a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80120a6:	605a      	str	r2, [r3, #4]
            		                                                 eepromConfig.wingRightMaximum);
            break;
 80120a8:	f002 bbda 	b.w	8014860 <mixTable+0x2b24>

        ///////////////////////////////

        case MIXERTYPE_BI:
            motor[0] = PIDMIX(  1.0f, 0.0f, 0.0f );        // Left Motor
 80120ac:	f240 0388 	movw	r3, #136	; 0x88
 80120b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80120b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80120b8:	f643 2370 	movw	r3, #14960	; 0x3a70
 80120bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80120c0:	edd3 7a00 	vldr	s15, [r3]
 80120c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80120c8:	f643 2370 	movw	r3, #14960	; 0x3a70
 80120cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80120d0:	edd3 6a01 	vldr	s13, [r3, #4]
 80120d4:	eddf 7aca 	vldr	s15, [pc, #808]	; 8012400 <mixTable+0x6c4>
 80120d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80120dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80120e0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80120e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80120e8:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80120ec:	f643 2370 	movw	r3, #14960	; 0x3a70
 80120f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80120f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80120f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80120fc:	eddf 6ac0 	vldr	s13, [pc, #768]	; 8012400 <mixTable+0x6c4>
 8012100:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012108:	f240 03b4 	movw	r3, #180	; 0xb4
 801210c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012110:	edc3 7a00 	vstr	s15, [r3]
            motor[1] = PIDMIX( -1.0f, 0.0f, 0.0f );        // Right Motor
 8012114:	f240 0388 	movw	r3, #136	; 0x88
 8012118:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801211c:	ed93 7a03 	vldr	s14, [r3, #12]
 8012120:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012124:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012128:	edd3 7a00 	vldr	s15, [r3]
 801212c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012130:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012134:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012138:	edd3 6a01 	vldr	s13, [r3, #4]
 801213c:	eddf 7ab0 	vldr	s15, [pc, #704]	; 8012400 <mixTable+0x6c4>
 8012140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012144:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012148:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801214c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012150:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012154:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012158:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801215c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012164:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8012400 <mixTable+0x6c4>
 8012168:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801216c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012170:	f240 03b4 	movw	r3, #180	; 0xb4
 8012174:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012178:	edc3 7a01 	vstr	s15, [r3, #4]

            servo[0] = constrain( eepromConfig.biLeftServoMid + (eepromConfig.yawDirection * axisPID[YAW]) + axisPID[PITCH],
 801217c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012180:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012184:	ed93 7aaf 	vldr	s14, [r3, #700]	; 0x2bc
 8012188:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801218c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012190:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012194:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012198:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801219c:	edd3 7a02 	vldr	s15, [r3, #8]
 80121a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80121a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80121a8:	f643 2370 	movw	r3, #14960	; 0x3a70
 80121ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80121b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80121b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80121b8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80121bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80121c0:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 80121c4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80121c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80121cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80121d0:	ee17 0a90 	vmov	r0, s15
 80121d4:	4611      	mov	r1, r2
 80121d6:	461a      	mov	r2, r3
 80121d8:	f004 fc9a 	bl	8016b10 <constrain>
 80121dc:	4602      	mov	r2, r0
 80121de:	f240 03d4 	movw	r3, #212	; 0xd4
 80121e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80121e6:	601a      	str	r2, [r3, #0]
                                  eepromConfig.biLeftServoMin, eepromConfig.biLeftServoMax );   // Left Servo

            servo[1] = constrain( eepromConfig.biRightServoMid + (eepromConfig.yawDirection * axisPID[YAW]) - axisPID[PITCH],
 80121e8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80121ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80121f0:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 80121f4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80121f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80121fc:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012200:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012204:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012208:	edd3 7a02 	vldr	s15, [r3, #8]
 801220c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012210:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012214:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012218:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801221c:	edd3 7a01 	vldr	s15, [r3, #4]
 8012220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012224:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012228:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801222c:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 8012230:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012234:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012238:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 801223c:	ee17 0a90 	vmov	r0, s15
 8012240:	4611      	mov	r1, r2
 8012242:	461a      	mov	r2, r3
 8012244:	f004 fc64 	bl	8016b10 <constrain>
 8012248:	4602      	mov	r2, r0
 801224a:	f240 03d4 	movw	r3, #212	; 0xd4
 801224e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012252:	605a      	str	r2, [r3, #4]
                                  eepromConfig.biRightServoMin, eepromConfig.biRightServoMax );   // Right Servo
            break;
 8012254:	f002 bb04 	b.w	8014860 <mixTable+0x2b24>

        ///////////////////////////////

        case MIXERTYPE_TRI:
            motor[0] = PIDMIX(  1.0f, -0.666667f, 0.0f );  // Left  CW
 8012258:	f240 0388 	movw	r3, #136	; 0x88
 801225c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012260:	ed93 7a03 	vldr	s14, [r3, #12]
 8012264:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012268:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801226c:	edd3 7a00 	vldr	s15, [r3]
 8012270:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012274:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012278:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801227c:	edd3 6a01 	vldr	s13, [r3, #4]
 8012280:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80123f8 <mixTable+0x6bc>
 8012284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012288:	ee37 7a27 	vadd.f32	s14, s14, s15
 801228c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012290:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012294:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012298:	f643 2370 	movw	r3, #14960	; 0x3a70
 801229c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80122a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80122a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80122a8:	eddf 6a55 	vldr	s13, [pc, #340]	; 8012400 <mixTable+0x6c4>
 80122ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80122b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80122b4:	f240 03b4 	movw	r3, #180	; 0xb4
 80122b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80122bc:	edc3 7a00 	vstr	s15, [r3]
            motor[1] = PIDMIX( -1.0f, -0.666667f, 0.0f );  // Right CCW
 80122c0:	f240 0388 	movw	r3, #136	; 0x88
 80122c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80122c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80122cc:	f643 2370 	movw	r3, #14960	; 0x3a70
 80122d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80122d4:	edd3 7a00 	vldr	s15, [r3]
 80122d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80122dc:	f643 2370 	movw	r3, #14960	; 0x3a70
 80122e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80122e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80122e8:	eddf 7a43 	vldr	s15, [pc, #268]	; 80123f8 <mixTable+0x6bc>
 80122ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80122f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80122f4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80122f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80122fc:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012300:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012304:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012308:	edd3 7a02 	vldr	s15, [r3, #8]
 801230c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012310:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8012400 <mixTable+0x6c4>
 8012314:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012318:	ee77 7a27 	vadd.f32	s15, s14, s15
 801231c:	f240 03b4 	movw	r3, #180	; 0xb4
 8012320:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012324:	edc3 7a01 	vstr	s15, [r3, #4]
            motor[2] = PIDMIX(  0.0f,  1.333333f, 0.0f );  // Rear  CW or CCW
 8012328:	f240 0388 	movw	r3, #136	; 0x88
 801232c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012330:	ed93 7a03 	vldr	s14, [r3, #12]
 8012334:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012338:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801233c:	edd3 6a00 	vldr	s13, [r3]
 8012340:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8012400 <mixTable+0x6c4>
 8012344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012348:	ee37 7a27 	vadd.f32	s14, s14, s15
 801234c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012350:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012354:	edd3 6a01 	vldr	s13, [r3, #4]
 8012358:	eddf 7a28 	vldr	s15, [pc, #160]	; 80123fc <mixTable+0x6c0>
 801235c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012364:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012368:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801236c:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012370:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012374:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012378:	edd3 7a02 	vldr	s15, [r3, #8]
 801237c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012380:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8012400 <mixTable+0x6c4>
 8012384:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012388:	ee77 7a27 	vadd.f32	s15, s14, s15
 801238c:	f240 03b4 	movw	r3, #180	; 0xb4
 8012390:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012394:	edc3 7a02 	vstr	s15, [r3, #8]

            servo[0] = constrain( eepromConfig.triYawServoMid + eepromConfig.yawDirection * axisPID[YAW],
 8012398:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801239c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80123a0:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80123a4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80123a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80123ac:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80123b0:	f643 2370 	movw	r3, #14960	; 0x3a70
 80123b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80123b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80123bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80123c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80123c4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80123c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80123cc:	f8d3 22d0 	ldr.w	r2, [r3, #720]	; 0x2d0
 80123d0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80123d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80123d8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80123dc:	ee17 0a90 	vmov	r0, s15
 80123e0:	4611      	mov	r1, r2
 80123e2:	461a      	mov	r2, r3
 80123e4:	f004 fb94 	bl	8016b10 <constrain>
 80123e8:	4602      	mov	r2, r0
 80123ea:	f240 03d4 	movw	r3, #212	; 0xd4
 80123ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80123f2:	601a      	str	r2, [r3, #0]
                                  eepromConfig.triYawServoMin, eepromConfig.triYawServoMax ); // Tail Servo
            break;
 80123f4:	f002 ba34 	b.w	8014860 <mixTable+0x2b24>
 80123f8:	bf2aaab0 	.word	0xbf2aaab0
 80123fc:	3faaaaa8 	.word	0x3faaaaa8
 8012400:	00000000 	.word	0x00000000

        ///////////////////////////////

        case MIXERTYPE_QUADP:
            motor[0] = PIDMIX(  0.0f, -1.0f, -1.0f );      // Front CW
 8012404:	f240 0388 	movw	r3, #136	; 0x88
 8012408:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801240c:	ed93 7a03 	vldr	s14, [r3, #12]
 8012410:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012414:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012418:	edd3 6a00 	vldr	s13, [r3]
 801241c:	ed5f 7a08 	vldr	s15, [pc, #-32]	; 8012400 <mixTable+0x6c4>
 8012420:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012424:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012428:	f643 2370 	movw	r3, #14960	; 0x3a70
 801242c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012430:	edd3 7a01 	vldr	s15, [r3, #4]
 8012434:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012438:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801243c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012440:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012444:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012448:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801244c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012458:	f240 03b4 	movw	r3, #180	; 0xb4
 801245c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012460:	edc3 7a00 	vstr	s15, [r3]
            motor[1] = PIDMIX( -1.0f,  0.0f,  1.0f );      // Right CCW
 8012464:	f240 0388 	movw	r3, #136	; 0x88
 8012468:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801246c:	ed93 7a03 	vldr	s14, [r3, #12]
 8012470:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012474:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012478:	edd3 7a00 	vldr	s15, [r3]
 801247c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012480:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012484:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012488:	edd3 6a01 	vldr	s13, [r3, #4]
 801248c:	ed5f 7a24 	vldr	s15, [pc, #-144]	; 8012400 <mixTable+0x6c4>
 8012490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012494:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012498:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801249c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80124a0:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80124a4:	f643 2370 	movw	r3, #14960	; 0x3a70
 80124a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80124ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80124b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80124b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80124b8:	f240 03b4 	movw	r3, #180	; 0xb4
 80124bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80124c0:	edc3 7a01 	vstr	s15, [r3, #4]
            motor[2] = PIDMIX(  0.0f,  1.0f, -1.0f );      // Rear  CW
 80124c4:	f240 0388 	movw	r3, #136	; 0x88
 80124c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80124cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80124d0:	f643 2370 	movw	r3, #14960	; 0x3a70
 80124d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80124d8:	edd3 6a00 	vldr	s13, [r3]
 80124dc:	ed5f 7a38 	vldr	s15, [pc, #-224]	; 8012400 <mixTable+0x6c4>
 80124e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80124e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80124e8:	f643 2370 	movw	r3, #14960	; 0x3a70
 80124ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80124f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80124f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80124f8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80124fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012500:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012504:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012508:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801250c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012510:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012518:	f240 03b4 	movw	r3, #180	; 0xb4
 801251c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012520:	edc3 7a02 	vstr	s15, [r3, #8]
            motor[3] = PIDMIX(  1.0f,  0.0f,  1.0f );      // Left  CCW
 8012524:	f240 0388 	movw	r3, #136	; 0x88
 8012528:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801252c:	ed93 7a03 	vldr	s14, [r3, #12]
 8012530:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012534:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012538:	edd3 7a00 	vldr	s15, [r3]
 801253c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012540:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012544:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012548:	edd3 6a01 	vldr	s13, [r3, #4]
 801254c:	ed5f 7a54 	vldr	s15, [pc, #-336]	; 8012400 <mixTable+0x6c4>
 8012550:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012554:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012558:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801255c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012560:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012564:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012568:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801256c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012578:	f240 03b4 	movw	r3, #180	; 0xb4
 801257c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012580:	edc3 7a03 	vstr	s15, [r3, #12]
            break;
 8012584:	f002 b96c 	b.w	8014860 <mixTable+0x2b24>

        ///////////////////////////////

        case MIXERTYPE_QUADX:
            motor[0] = PIDMIX(  1.0f, -1.0f, -1.0f );      // Front Left  CW
 8012588:	f240 0388 	movw	r3, #136	; 0x88
 801258c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012590:	ed93 7a03 	vldr	s14, [r3, #12]
 8012594:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012598:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801259c:	edd3 7a00 	vldr	s15, [r3]
 80125a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80125a4:	f643 2370 	movw	r3, #14960	; 0x3a70
 80125a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80125ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80125b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80125b4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80125b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80125bc:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80125c0:	f643 2370 	movw	r3, #14960	; 0x3a70
 80125c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80125c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80125cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80125d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80125d4:	f240 03b4 	movw	r3, #180	; 0xb4
 80125d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80125dc:	edc3 7a00 	vstr	s15, [r3]
            motor[1] = PIDMIX( -1.0f, -1.0f,  1.0f );      // Front Right CCW
 80125e0:	f240 0388 	movw	r3, #136	; 0x88
 80125e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80125e8:	ed93 7a03 	vldr	s14, [r3, #12]
 80125ec:	f643 2370 	movw	r3, #14960	; 0x3a70
 80125f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80125f4:	edd3 7a00 	vldr	s15, [r3]
 80125f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80125fc:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012600:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012604:	edd3 7a01 	vldr	s15, [r3, #4]
 8012608:	ee37 7a67 	vsub.f32	s14, s14, s15
 801260c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012610:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012614:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012618:	f643 2370 	movw	r3, #14960	; 0x3a70
 801261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012620:	edd3 7a02 	vldr	s15, [r3, #8]
 8012624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012628:	ee77 7a27 	vadd.f32	s15, s14, s15
 801262c:	f240 03b4 	movw	r3, #180	; 0xb4
 8012630:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012634:	edc3 7a01 	vstr	s15, [r3, #4]
            motor[2] = PIDMIX( -1.0f,  1.0f, -1.0f );      // Rear Right  CW
 8012638:	f240 0388 	movw	r3, #136	; 0x88
 801263c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012640:	ed93 7a03 	vldr	s14, [r3, #12]
 8012644:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012648:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801264c:	edd3 7a00 	vldr	s15, [r3]
 8012650:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012654:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012658:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801265c:	edd3 7a01 	vldr	s15, [r3, #4]
 8012660:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012664:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012668:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801266c:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012670:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012674:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012678:	edd3 7a02 	vldr	s15, [r3, #8]
 801267c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012684:	f240 03b4 	movw	r3, #180	; 0xb4
 8012688:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801268c:	edc3 7a02 	vstr	s15, [r3, #8]
            motor[3] = PIDMIX(  1.0f,  1.0f,  1.0f );      // Rear Left   CCW
 8012690:	f240 0388 	movw	r3, #136	; 0x88
 8012694:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012698:	ed93 7a03 	vldr	s14, [r3, #12]
 801269c:	f643 2370 	movw	r3, #14960	; 0x3a70
 80126a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80126a4:	edd3 7a00 	vldr	s15, [r3]
 80126a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80126ac:	f643 2370 	movw	r3, #14960	; 0x3a70
 80126b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80126b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80126b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80126bc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80126c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80126c4:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80126c8:	f643 2370 	movw	r3, #14960	; 0x3a70
 80126cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80126d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80126d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80126d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80126dc:	f240 03b4 	movw	r3, #180	; 0xb4
 80126e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80126e4:	edc3 7a03 	vstr	s15, [r3, #12]
            break;
 80126e8:	f002 b8ba 	b.w	8014860 <mixTable+0x2b24>

        ///////////////////////////////

        case MIXERTYPE_VTAIL4_NO_COMP:
            motor[0] = PIDMIX(  1.0f, -1.0f,  0.0f );      // Front Left  CCW - NOTE rotation difference for vtail configurations
 80126ec:	f240 0388 	movw	r3, #136	; 0x88
 80126f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80126f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80126f8:	f643 2370 	movw	r3, #14960	; 0x3a70
 80126fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012700:	edd3 7a00 	vldr	s15, [r3]
 8012704:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012708:	f643 2370 	movw	r3, #14960	; 0x3a70
 801270c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012710:	edd3 7a01 	vldr	s15, [r3, #4]
 8012714:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012718:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801271c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012720:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012724:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012728:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801272c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012734:	ed5f 6ace 	vldr	s13, [pc, #-824]	; 8012400 <mixTable+0x6c4>
 8012738:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801273c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012740:	f240 03b4 	movw	r3, #180	; 0xb4
 8012744:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012748:	edc3 7a00 	vstr	s15, [r3]
            motor[1] = PIDMIX( -1.0f, -1.0f,  0.0f );      // Front Right CW  - NOTE rotation difference for vtail configurations
 801274c:	f240 0388 	movw	r3, #136	; 0x88
 8012750:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012754:	ed93 7a03 	vldr	s14, [r3, #12]
 8012758:	f643 2370 	movw	r3, #14960	; 0x3a70
 801275c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012760:	edd3 7a00 	vldr	s15, [r3]
 8012764:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012768:	f643 2370 	movw	r3, #14960	; 0x3a70
 801276c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012770:	edd3 7a01 	vldr	s15, [r3, #4]
 8012774:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012778:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801277c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012780:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012784:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012788:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801278c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012794:	ed5f 6ae6 	vldr	s13, [pc, #-920]	; 8012400 <mixTable+0x6c4>
 8012798:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801279c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80127a0:	f240 03b4 	movw	r3, #180	; 0xb4
 80127a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80127a8:	edc3 7a01 	vstr	s15, [r3, #4]
            motor[2] = PIDMIX(  0.0f,  1.0f,  1.0f );      // Rear Right  CCW - NOTE rotation difference for vtail configurations
 80127ac:	f240 0388 	movw	r3, #136	; 0x88
 80127b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80127b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80127b8:	f643 2370 	movw	r3, #14960	; 0x3a70
 80127bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80127c0:	edd3 6a00 	vldr	s13, [r3]
 80127c4:	ed5f 7af2 	vldr	s15, [pc, #-968]	; 8012400 <mixTable+0x6c4>
 80127c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80127cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80127d0:	f643 2370 	movw	r3, #14960	; 0x3a70
 80127d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80127d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80127dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80127e0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80127e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80127e8:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80127ec:	f643 2370 	movw	r3, #14960	; 0x3a70
 80127f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80127f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80127f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80127fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012800:	f240 03b4 	movw	r3, #180	; 0xb4
 8012804:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012808:	edc3 7a02 	vstr	s15, [r3, #8]
            motor[3] = PIDMIX(  0.0f,  1.0f, -1.0f );      // Rear Left   CW  - NOTE rotation difference for vtail configurations
 801280c:	f240 0388 	movw	r3, #136	; 0x88
 8012810:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012814:	ed93 7a03 	vldr	s14, [r3, #12]
 8012818:	f643 2370 	movw	r3, #14960	; 0x3a70
 801281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012820:	edd3 6a00 	vldr	s13, [r3]
 8012824:	eddf 7ae8 	vldr	s15, [pc, #928]	; 8012bc8 <mixTable+0xe8c>
 8012828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801282c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012830:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012834:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012838:	edd3 7a01 	vldr	s15, [r3, #4]
 801283c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012840:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012844:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012848:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 801284c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012850:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012854:	edd3 7a02 	vldr	s15, [r3, #8]
 8012858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801285c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012860:	f240 03b4 	movw	r3, #180	; 0xb4
 8012864:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012868:	edc3 7a03 	vstr	s15, [r3, #12]
            break;
 801286c:	f001 bff8 	b.w	8014860 <mixTable+0x2b24>

        ///////////////////////////////

        case MIXERTYPE_VTAIL4_Y_COMP:
		    motor[0] = PIDMIX(  1.0f, -1.0f,  vTailThrust ); // Front Left  CCW - NOTE rotation difference for vtail configurations
 8012870:	f240 0388 	movw	r3, #136	; 0x88
 8012874:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012878:	ed93 7a03 	vldr	s14, [r3, #12]
 801287c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012880:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012884:	edd3 7a00 	vldr	s15, [r3]
 8012888:	ee37 7a27 	vadd.f32	s14, s14, s15
 801288c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012890:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012894:	edd3 7a01 	vldr	s15, [r3, #4]
 8012898:	ee37 7a67 	vsub.f32	s14, s14, s15
 801289c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80128a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80128a4:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80128a8:	f643 2370 	movw	r3, #14960	; 0x3a70
 80128ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80128b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80128b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80128b8:	f643 238c 	movw	r3, #14988	; 0x3a8c
 80128bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80128c0:	edd3 6a00 	vldr	s13, [r3]
 80128c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80128c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80128cc:	f240 03b4 	movw	r3, #180	; 0xb4
 80128d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80128d4:	edc3 7a00 	vstr	s15, [r3]
		    motor[1] = PIDMIX( -1.0f, -1.0f, -vTailThrust ); // Front Right CW  - NOTE rotation difference for vtail configurations
 80128d8:	f240 0388 	movw	r3, #136	; 0x88
 80128dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80128e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80128e4:	f643 2370 	movw	r3, #14960	; 0x3a70
 80128e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80128ec:	edd3 7a00 	vldr	s15, [r3]
 80128f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80128f4:	f643 2370 	movw	r3, #14960	; 0x3a70
 80128f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80128fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8012900:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012904:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012908:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801290c:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012910:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012914:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012918:	edd3 7a02 	vldr	s15, [r3, #8]
 801291c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012920:	f643 238c 	movw	r3, #14988	; 0x3a8c
 8012924:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012928:	edd3 6a00 	vldr	s13, [r3]
 801292c:	eef1 6a66 	vneg.f32	s13, s13
 8012930:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012938:	f240 03b4 	movw	r3, #180	; 0xb4
 801293c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012940:	edc3 7a01 	vstr	s15, [r3, #4]
		    motor[2] = PIDMIX(  0.0f,  1.0f,  1.0f        ); // Rear Right  CCW - NOTE rotation difference for vtail configurations
 8012944:	f240 0388 	movw	r3, #136	; 0x88
 8012948:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801294c:	ed93 7a03 	vldr	s14, [r3, #12]
 8012950:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012954:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012958:	edd3 6a00 	vldr	s13, [r3]
 801295c:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8012bc8 <mixTable+0xe8c>
 8012960:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012964:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012968:	f643 2370 	movw	r3, #14960	; 0x3a70
 801296c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012970:	edd3 7a01 	vldr	s15, [r3, #4]
 8012974:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012978:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801297c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012980:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012984:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012988:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801298c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012990:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012998:	f240 03b4 	movw	r3, #180	; 0xb4
 801299c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80129a0:	edc3 7a02 	vstr	s15, [r3, #8]
		    motor[3] = PIDMIX(  0.0f,  1.0f, -1.0f        ); // Rear Left   CW  - NOTE rotation difference for vtail configurations
 80129a4:	f240 0388 	movw	r3, #136	; 0x88
 80129a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80129ac:	ed93 7a03 	vldr	s14, [r3, #12]
 80129b0:	f643 2370 	movw	r3, #14960	; 0x3a70
 80129b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80129b8:	edd3 6a00 	vldr	s13, [r3]
 80129bc:	eddf 7a82 	vldr	s15, [pc, #520]	; 8012bc8 <mixTable+0xe8c>
 80129c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80129c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80129c8:	f643 2370 	movw	r3, #14960	; 0x3a70
 80129cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80129d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80129d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80129d8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80129dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80129e0:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80129e4:	f643 2370 	movw	r3, #14960	; 0x3a70
 80129e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80129ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80129f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80129f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80129f8:	f240 03b4 	movw	r3, #180	; 0xb4
 80129fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012a00:	edc3 7a03 	vstr	s15, [r3, #12]
		    break;
 8012a04:	f001 bf2c 	b.w	8014860 <mixTable+0x2b24>

        ///////////////////////////////

        case MIXERTYPE_VTAIL4_RY_COMP:
        	motor[0] = PIDMIX(  1.0f, -vTailThrust,  vTailThrust ); // Front Left  CCW - NOTE rotation difference for vtail configurations
 8012a08:	f240 0388 	movw	r3, #136	; 0x88
 8012a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012a10:	ed93 7a03 	vldr	s14, [r3, #12]
 8012a14:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012a1c:	edd3 7a00 	vldr	s15, [r3]
 8012a20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012a24:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012a2c:	edd3 6a01 	vldr	s13, [r3, #4]
 8012a30:	f643 238c 	movw	r3, #14988	; 0x3a8c
 8012a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012a38:	edd3 7a00 	vldr	s15, [r3]
 8012a3c:	eef1 7a67 	vneg.f32	s15, s15
 8012a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012a44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012a48:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012a4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012a50:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012a54:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012a5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012a64:	f643 238c 	movw	r3, #14988	; 0x3a8c
 8012a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012a6c:	edd3 6a00 	vldr	s13, [r3]
 8012a70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012a78:	f240 03b4 	movw	r3, #180	; 0xb4
 8012a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012a80:	edc3 7a00 	vstr	s15, [r3]
			motor[1] = PIDMIX( -1.0f, -vTailThrust, -vTailThrust ); // Front Right CW  - NOTE rotation difference for vtail configurations
 8012a84:	f240 0388 	movw	r3, #136	; 0x88
 8012a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012a8c:	ed93 7a03 	vldr	s14, [r3, #12]
 8012a90:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012a98:	edd3 7a00 	vldr	s15, [r3]
 8012a9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012aa0:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012aa8:	edd3 6a01 	vldr	s13, [r3, #4]
 8012aac:	f643 238c 	movw	r3, #14988	; 0x3a8c
 8012ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ab4:	edd3 7a00 	vldr	s15, [r3]
 8012ab8:	eef1 7a67 	vneg.f32	s15, s15
 8012abc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012ac4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012acc:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012ad0:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ad8:	edd3 7a02 	vldr	s15, [r3, #8]
 8012adc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ae0:	f643 238c 	movw	r3, #14988	; 0x3a8c
 8012ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ae8:	edd3 6a00 	vldr	s13, [r3]
 8012aec:	eef1 6a66 	vneg.f32	s13, s13
 8012af0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012af8:	f240 03b4 	movw	r3, #180	; 0xb4
 8012afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b00:	edc3 7a01 	vstr	s15, [r3, #4]
			motor[2] = PIDMIX(  0.0f,  1.0f,          1.0f       ); // Rear Right  CCW - NOTE rotation difference for vtail configurations
 8012b04:	f240 0388 	movw	r3, #136	; 0x88
 8012b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b0c:	ed93 7a03 	vldr	s14, [r3, #12]
 8012b10:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b18:	edd3 6a00 	vldr	s13, [r3]
 8012b1c:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8012bc8 <mixTable+0xe8c>
 8012b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b28:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b30:	edd3 7a01 	vldr	s15, [r3, #4]
 8012b34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b38:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b40:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012b44:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b58:	f240 03b4 	movw	r3, #180	; 0xb4
 8012b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b60:	edc3 7a02 	vstr	s15, [r3, #8]
			motor[3] = PIDMIX(  0.0f,  1.0f,         -1.0f       ); // Rear Left   CW  - NOTE rotation difference for vtail configurations
 8012b64:	f240 0388 	movw	r3, #136	; 0x88
 8012b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b6c:	ed93 7a03 	vldr	s14, [r3, #12]
 8012b70:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b78:	edd3 6a00 	vldr	s13, [r3]
 8012b7c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8012bc8 <mixTable+0xe8c>
 8012b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b88:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b90:	edd3 7a01 	vldr	s15, [r3, #4]
 8012b94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b98:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ba0:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012ba4:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012bac:	edd3 7a02 	vldr	s15, [r3, #8]
 8012bb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012bb8:	f240 03b4 	movw	r3, #180	; 0xb4
 8012bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012bc0:	edc3 7a03 	vstr	s15, [r3, #12]
			break;
 8012bc4:	f001 be4c 	b.w	8014860 <mixTable+0x2b24>
 8012bc8:	00000000 	.word	0x00000000
 8012bcc:	80000000 	.word	0x80000000

        ///////////////////////////////

        case MIXERTYPE_VTAIL4_PY_COMP:
            motor[0] = PIDMIX(  vTailThrust, -1.0f,  vTailThrust ); // Front Left  CCW - NOTE rotation difference for vtail configurations
 8012bd0:	f240 0388 	movw	r3, #136	; 0x88
 8012bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012bd8:	ed93 7a03 	vldr	s14, [r3, #12]
 8012bdc:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012be4:	edd3 6a00 	vldr	s13, [r3]
 8012be8:	f643 238c 	movw	r3, #14988	; 0x3a8c
 8012bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012bf0:	edd3 7a00 	vldr	s15, [r3]
 8012bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012bfc:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c04:	edd3 7a01 	vldr	s15, [r3, #4]
 8012c08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012c0c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c14:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012c18:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c20:	edd3 7a02 	vldr	s15, [r3, #8]
 8012c24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c28:	f643 238c 	movw	r3, #14988	; 0x3a8c
 8012c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c30:	edd3 6a00 	vldr	s13, [r3]
 8012c34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c3c:	f240 03b4 	movw	r3, #180	; 0xb4
 8012c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c44:	edc3 7a00 	vstr	s15, [r3]
			motor[1] = PIDMIX( -vTailThrust, -1.0f, -vTailThrust ); // Front Right CW  - NOTE rotation difference for vtail configurations
 8012c48:	f240 0388 	movw	r3, #136	; 0x88
 8012c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c50:	ed93 7a03 	vldr	s14, [r3, #12]
 8012c54:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c5c:	edd3 6a00 	vldr	s13, [r3]
 8012c60:	f643 238c 	movw	r3, #14988	; 0x3a8c
 8012c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c68:	edd3 7a00 	vldr	s15, [r3]
 8012c6c:	eef1 7a67 	vneg.f32	s15, s15
 8012c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c78:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c80:	edd3 7a01 	vldr	s15, [r3, #4]
 8012c84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012c88:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c90:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012c94:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ca4:	f643 238c 	movw	r3, #14988	; 0x3a8c
 8012ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012cac:	edd3 6a00 	vldr	s13, [r3]
 8012cb0:	eef1 6a66 	vneg.f32	s13, s13
 8012cb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012cbc:	f240 03b4 	movw	r3, #180	; 0xb4
 8012cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012cc4:	edc3 7a01 	vstr	s15, [r3, #4]
			motor[2] = PIDMIX( -1.0f,         1.0f,  1.0f        ); // Rear Right  CCW - NOTE rotation difference for vtail configurations
 8012cc8:	f240 0388 	movw	r3, #136	; 0x88
 8012ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012cd0:	ed93 7a03 	vldr	s14, [r3, #12]
 8012cd4:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012cdc:	edd3 7a00 	vldr	s15, [r3]
 8012ce0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012ce4:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012cec:	edd3 7a01 	vldr	s15, [r3, #4]
 8012cf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012cf4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012cfc:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012d00:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d08:	edd3 7a02 	vldr	s15, [r3, #8]
 8012d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d14:	f240 03b4 	movw	r3, #180	; 0xb4
 8012d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d1c:	edc3 7a02 	vstr	s15, [r3, #8]
			motor[3] = PIDMIX(  1.0f,         1.0f, -1.0f        ); // Rear Left   CW  - NOTE rotation difference for vtail configurations
 8012d20:	f240 0388 	movw	r3, #136	; 0x88
 8012d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d28:	ed93 7a03 	vldr	s14, [r3, #12]
 8012d2c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d34:	edd3 7a00 	vldr	s15, [r3]
 8012d38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012d3c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d44:	edd3 7a01 	vldr	s15, [r3, #4]
 8012d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012d4c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d54:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012d58:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d60:	edd3 7a02 	vldr	s15, [r3, #8]
 8012d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012d6c:	f240 03b4 	movw	r3, #180	; 0xb4
 8012d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d74:	edc3 7a03 	vstr	s15, [r3, #12]
			break;
 8012d78:	f001 bd72 	b.w	8014860 <mixTable+0x2b24>

        ///////////////////////////////

        case MIXERTYPE_VTAIL4_RP_COMP:
            motor[0] = PIDMIX(  vTailThrust, -vTailThrust,  0.0f ); // Front Left  CCW - NOTE rotation difference for vtail configurations
 8012d7c:	f240 0388 	movw	r3, #136	; 0x88
 8012d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d84:	ed93 7a03 	vldr	s14, [r3, #12]
 8012d88:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d90:	edd3 6a00 	vldr	s13, [r3]
 8012d94:	f643 238c 	movw	r3, #14988	; 0x3a8c
 8012d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d9c:	edd3 7a00 	vldr	s15, [r3]
 8012da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012da4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012da8:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012db0:	edd3 6a01 	vldr	s13, [r3, #4]
 8012db4:	f643 238c 	movw	r3, #14988	; 0x3a8c
 8012db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012dbc:	edd3 7a00 	vldr	s15, [r3]
 8012dc0:	eef1 7a67 	vneg.f32	s15, s15
 8012dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012dc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012dcc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012dd4:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012dd8:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012de0:	edd3 7a02 	vldr	s15, [r3, #8]
 8012de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012de8:	ed5f 6a89 	vldr	s13, [pc, #-548]	; 8012bc8 <mixTable+0xe8c>
 8012dec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012df4:	f240 03b4 	movw	r3, #180	; 0xb4
 8012df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012dfc:	edc3 7a00 	vstr	s15, [r3]
			motor[1] = PIDMIX( -vTailThrust, -vTailThrust, -0.0f ); // Front Right CW  - NOTE rotation difference for vtail configurations
 8012e00:	f240 0388 	movw	r3, #136	; 0x88
 8012e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e08:	ed93 7a03 	vldr	s14, [r3, #12]
 8012e0c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e14:	edd3 6a00 	vldr	s13, [r3]
 8012e18:	f643 238c 	movw	r3, #14988	; 0x3a8c
 8012e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e20:	edd3 7a00 	vldr	s15, [r3]
 8012e24:	eef1 7a67 	vneg.f32	s15, s15
 8012e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012e30:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e38:	edd3 6a01 	vldr	s13, [r3, #4]
 8012e3c:	f643 238c 	movw	r3, #14988	; 0x3a8c
 8012e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e44:	edd3 7a00 	vldr	s15, [r3]
 8012e48:	eef1 7a67 	vneg.f32	s15, s15
 8012e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012e54:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e5c:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012e60:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e68:	edd3 7a02 	vldr	s15, [r3, #8]
 8012e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e70:	ed5f 6aaa 	vldr	s13, [pc, #-680]	; 8012bcc <mixTable+0xe90>
 8012e74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012e7c:	f240 03b4 	movw	r3, #180	; 0xb4
 8012e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e84:	edc3 7a01 	vstr	s15, [r3, #4]
			motor[2] = PIDMIX( -1.0f,         1.0f,         1.0f ); // Rear Right  CCW - NOTE rotation difference for vtail configurations
 8012e88:	f240 0388 	movw	r3, #136	; 0x88
 8012e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e90:	ed93 7a03 	vldr	s14, [r3, #12]
 8012e94:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e9c:	edd3 7a00 	vldr	s15, [r3]
 8012ea0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012ea4:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012eac:	edd3 7a01 	vldr	s15, [r3, #4]
 8012eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012eb4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ebc:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012ec0:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ec8:	edd3 7a02 	vldr	s15, [r3, #8]
 8012ecc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012ed4:	f240 03b4 	movw	r3, #180	; 0xb4
 8012ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012edc:	edc3 7a02 	vstr	s15, [r3, #8]
			motor[3] = PIDMIX(  1.0f,         1.0f,        -1.0f ); // Rear Left   CW  - NOTE rotation difference for vtail configurations
 8012ee0:	f240 0388 	movw	r3, #136	; 0x88
 8012ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ee8:	ed93 7a03 	vldr	s14, [r3, #12]
 8012eec:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ef4:	edd3 7a00 	vldr	s15, [r3]
 8012ef8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012efc:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012f04:	edd3 7a01 	vldr	s15, [r3, #4]
 8012f08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f0c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012f14:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012f18:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012f20:	edd3 7a02 	vldr	s15, [r3, #8]
 8012f24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012f2c:	f240 03b4 	movw	r3, #180	; 0xb4
 8012f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012f34:	edc3 7a03 	vstr	s15, [r3, #12]
			break;
 8012f38:	f001 bc92 	b.w	8014860 <mixTable+0x2b24>

        ///////////////////////////////

        case MIXERTYPE_VTAIL4_RPY_COMP:
        	motor[0] = PIDMIX(  vTailThrust, -vTailThrust,  vTailThrust ); // Front Left  CCW - NOTE rotation difference for vtail configurations
 8012f3c:	f240 0388 	movw	r3, #136	; 0x88
 8012f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012f44:	ed93 7a03 	vldr	s14, [r3, #12]
 8012f48:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012f50:	edd3 6a00 	vldr	s13, [r3]
 8012f54:	f643 238c 	movw	r3, #14988	; 0x3a8c
 8012f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012f5c:	edd3 7a00 	vldr	s15, [r3]
 8012f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012f64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f68:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012f70:	edd3 6a01 	vldr	s13, [r3, #4]
 8012f74:	f643 238c 	movw	r3, #14988	; 0x3a8c
 8012f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012f7c:	edd3 7a00 	vldr	s15, [r3]
 8012f80:	eef1 7a67 	vneg.f32	s15, s15
 8012f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012f88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f8c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8012f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012f94:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8012f98:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012fa0:	edd3 7a02 	vldr	s15, [r3, #8]
 8012fa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012fa8:	f643 238c 	movw	r3, #14988	; 0x3a8c
 8012fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012fb0:	edd3 6a00 	vldr	s13, [r3]
 8012fb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012fbc:	f240 03b4 	movw	r3, #180	; 0xb4
 8012fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012fc4:	edc3 7a00 	vstr	s15, [r3]
			motor[1] = PIDMIX( -vTailThrust, -vTailThrust, -vTailThrust ); // Front Right CW  - NOTE rotation difference for vtail configurations
 8012fc8:	f240 0388 	movw	r3, #136	; 0x88
 8012fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012fd0:	ed93 7a03 	vldr	s14, [r3, #12]
 8012fd4:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012fdc:	edd3 6a00 	vldr	s13, [r3]
 8012fe0:	f643 238c 	movw	r3, #14988	; 0x3a8c
 8012fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012fe8:	edd3 7a00 	vldr	s15, [r3]
 8012fec:	eef1 7a67 	vneg.f32	s15, s15
 8012ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ff4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012ff8:	f643 2370 	movw	r3, #14960	; 0x3a70
 8012ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013000:	edd3 6a01 	vldr	s13, [r3, #4]
 8013004:	f643 238c 	movw	r3, #14988	; 0x3a8c
 8013008:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801300c:	edd3 7a00 	vldr	s15, [r3]
 8013010:	eef1 7a67 	vneg.f32	s15, s15
 8013014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013018:	ee37 7a27 	vadd.f32	s14, s14, s15
 801301c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013020:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013024:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013028:	f643 2370 	movw	r3, #14960	; 0x3a70
 801302c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013030:	edd3 7a02 	vldr	s15, [r3, #8]
 8013034:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013038:	f643 238c 	movw	r3, #14988	; 0x3a8c
 801303c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013040:	edd3 6a00 	vldr	s13, [r3]
 8013044:	eef1 6a66 	vneg.f32	s13, s13
 8013048:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801304c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013050:	f240 03b4 	movw	r3, #180	; 0xb4
 8013054:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013058:	edc3 7a01 	vstr	s15, [r3, #4]
			motor[2] = PIDMIX( -1.0f,         1.0f,         1.0f        ); // Rear Right  CCW - NOTE rotation difference for vtail configurations
 801305c:	f240 0388 	movw	r3, #136	; 0x88
 8013060:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013064:	ed93 7a03 	vldr	s14, [r3, #12]
 8013068:	f643 2370 	movw	r3, #14960	; 0x3a70
 801306c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013070:	edd3 7a00 	vldr	s15, [r3]
 8013074:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013078:	f643 2370 	movw	r3, #14960	; 0x3a70
 801307c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013080:	edd3 7a01 	vldr	s15, [r3, #4]
 8013084:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013088:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801308c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013090:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013094:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013098:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801309c:	edd3 7a02 	vldr	s15, [r3, #8]
 80130a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80130a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130a8:	f240 03b4 	movw	r3, #180	; 0xb4
 80130ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80130b0:	edc3 7a02 	vstr	s15, [r3, #8]
			motor[3] = PIDMIX(  1.0f,         1.0f,        -1.0f        ); // Rear Left   CW  - NOTE rotation difference for vtail configurations
 80130b4:	f240 0388 	movw	r3, #136	; 0x88
 80130b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80130bc:	ed93 7a03 	vldr	s14, [r3, #12]
 80130c0:	f643 2370 	movw	r3, #14960	; 0x3a70
 80130c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80130c8:	edd3 7a00 	vldr	s15, [r3]
 80130cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80130d0:	f643 2370 	movw	r3, #14960	; 0x3a70
 80130d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80130d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80130dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80130e0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80130e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80130e8:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80130ec:	f643 2370 	movw	r3, #14960	; 0x3a70
 80130f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80130f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80130f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80130fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013100:	f240 03b4 	movw	r3, #180	; 0xb4
 8013104:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013108:	edc3 7a03 	vstr	s15, [r3, #12]
			break;
 801310c:	f001 bba8 	b.w	8014860 <mixTable+0x2b24>

        ///////////////////////////////

        case MIXERTYPE_Y4:
            motor[0] = PIDMIX(  1.0f, -1.0f,  0.0f );      // Front Left  CW
 8013110:	f240 0388 	movw	r3, #136	; 0x88
 8013114:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013118:	ed93 7a03 	vldr	s14, [r3, #12]
 801311c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013120:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013124:	edd3 7a00 	vldr	s15, [r3]
 8013128:	ee37 7a27 	vadd.f32	s14, s14, s15
 801312c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013130:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013134:	edd3 7a01 	vldr	s15, [r3, #4]
 8013138:	ee37 7a67 	vsub.f32	s14, s14, s15
 801313c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013140:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013144:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013148:	f643 2370 	movw	r3, #14960	; 0x3a70
 801314c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013150:	edd3 7a02 	vldr	s15, [r3, #8]
 8013154:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013158:	eddf 6ae5 	vldr	s13, [pc, #916]	; 80134f0 <mixTable+0x17b4>
 801315c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013164:	f240 03b4 	movw	r3, #180	; 0xb4
 8013168:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801316c:	edc3 7a00 	vstr	s15, [r3]
            motor[1] = PIDMIX( -1.0f, -1.0f,  0.0f );      // Front Right CCW
 8013170:	f240 0388 	movw	r3, #136	; 0x88
 8013174:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013178:	ed93 7a03 	vldr	s14, [r3, #12]
 801317c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013180:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013184:	edd3 7a00 	vldr	s15, [r3]
 8013188:	ee37 7a67 	vsub.f32	s14, s14, s15
 801318c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013190:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013194:	edd3 7a01 	vldr	s15, [r3, #4]
 8013198:	ee37 7a67 	vsub.f32	s14, s14, s15
 801319c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80131a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80131a4:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80131a8:	f643 2370 	movw	r3, #14960	; 0x3a70
 80131ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80131b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80131b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80131b8:	eddf 6acd 	vldr	s13, [pc, #820]	; 80134f0 <mixTable+0x17b4>
 80131bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80131c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80131c4:	f240 03b4 	movw	r3, #180	; 0xb4
 80131c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80131cc:	edc3 7a01 	vstr	s15, [r3, #4]
            motor[2] = PIDMIX(  0.0f,  1.0f, -1.0f );      // Top Rear    CW
 80131d0:	f240 0388 	movw	r3, #136	; 0x88
 80131d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80131d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80131dc:	f643 2370 	movw	r3, #14960	; 0x3a70
 80131e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80131e4:	edd3 6a00 	vldr	s13, [r3]
 80131e8:	eddf 7ac1 	vldr	s15, [pc, #772]	; 80134f0 <mixTable+0x17b4>
 80131ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80131f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80131f4:	f643 2370 	movw	r3, #14960	; 0x3a70
 80131f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80131fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8013200:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013204:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013208:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801320c:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013210:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013214:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013218:	edd3 7a02 	vldr	s15, [r3, #8]
 801321c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013224:	f240 03b4 	movw	r3, #180	; 0xb4
 8013228:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801322c:	edc3 7a02 	vstr	s15, [r3, #8]
            motor[3] = PIDMIX(  0.0f,  1.0f,  1.0f );      // Bottom Rear CCW
 8013230:	f240 0388 	movw	r3, #136	; 0x88
 8013234:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013238:	ed93 7a03 	vldr	s14, [r3, #12]
 801323c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013240:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013244:	edd3 6a00 	vldr	s13, [r3]
 8013248:	eddf 7aa9 	vldr	s15, [pc, #676]	; 80134f0 <mixTable+0x17b4>
 801324c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013250:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013254:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013258:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801325c:	edd3 7a01 	vldr	s15, [r3, #4]
 8013260:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013264:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013268:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801326c:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013270:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013274:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013278:	edd3 7a02 	vldr	s15, [r3, #8]
 801327c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013284:	f240 03b4 	movw	r3, #180	; 0xb4
 8013288:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801328c:	edc3 7a03 	vstr	s15, [r3, #12]
            break;
 8013290:	f001 bae6 	b.w	8014860 <mixTable+0x2b24>

        ///////////////////////////////

        case MIXERTYPE_HEX6P:
            motor[0] = PIDMIX(  0.0f, -0.866025f, -1.0f ); // Front       CW
 8013294:	f240 0388 	movw	r3, #136	; 0x88
 8013298:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801329c:	ed93 7a03 	vldr	s14, [r3, #12]
 80132a0:	f643 2370 	movw	r3, #14960	; 0x3a70
 80132a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80132a8:	edd3 6a00 	vldr	s13, [r3]
 80132ac:	eddf 7a90 	vldr	s15, [pc, #576]	; 80134f0 <mixTable+0x17b4>
 80132b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80132b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80132b8:	f643 2370 	movw	r3, #14960	; 0x3a70
 80132bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80132c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80132c4:	eddf 7a88 	vldr	s15, [pc, #544]	; 80134e8 <mixTable+0x17ac>
 80132c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80132cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80132d0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80132d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80132d8:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80132dc:	f643 2370 	movw	r3, #14960	; 0x3a70
 80132e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80132e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80132e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80132ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80132f0:	f240 03b4 	movw	r3, #180	; 0xb4
 80132f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80132f8:	edc3 7a00 	vstr	s15, [r3]
            motor[1] = PIDMIX( -1.0f, -0.866025f,  1.0f ); // Front Right CCW
 80132fc:	f240 0388 	movw	r3, #136	; 0x88
 8013300:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013304:	ed93 7a03 	vldr	s14, [r3, #12]
 8013308:	f643 2370 	movw	r3, #14960	; 0x3a70
 801330c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013310:	edd3 7a00 	vldr	s15, [r3]
 8013314:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013318:	f643 2370 	movw	r3, #14960	; 0x3a70
 801331c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013320:	edd3 6a01 	vldr	s13, [r3, #4]
 8013324:	eddf 7a70 	vldr	s15, [pc, #448]	; 80134e8 <mixTable+0x17ac>
 8013328:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801332c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013330:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013334:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013338:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 801333c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013340:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013344:	edd3 7a02 	vldr	s15, [r3, #8]
 8013348:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801334c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013350:	f240 03b4 	movw	r3, #180	; 0xb4
 8013354:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013358:	edc3 7a01 	vstr	s15, [r3, #4]
            motor[2] = PIDMIX( -1.0f,  0.866025f, -1.0f ); // Rear Right  CW
 801335c:	f240 0388 	movw	r3, #136	; 0x88
 8013360:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013364:	ed93 7a03 	vldr	s14, [r3, #12]
 8013368:	f643 2370 	movw	r3, #14960	; 0x3a70
 801336c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013370:	edd3 7a00 	vldr	s15, [r3]
 8013374:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013378:	f643 2370 	movw	r3, #14960	; 0x3a70
 801337c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013380:	edd3 6a01 	vldr	s13, [r3, #4]
 8013384:	eddf 7a59 	vldr	s15, [pc, #356]	; 80134ec <mixTable+0x17b0>
 8013388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801338c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013390:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013394:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013398:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 801339c:	f643 2370 	movw	r3, #14960	; 0x3a70
 80133a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80133a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80133a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80133ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80133b0:	f240 03b4 	movw	r3, #180	; 0xb4
 80133b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80133b8:	edc3 7a02 	vstr	s15, [r3, #8]
            motor[3] = PIDMIX(  0.0f,  0.866025f,  1.0f ); // Rear        CCW
 80133bc:	f240 0388 	movw	r3, #136	; 0x88
 80133c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80133c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80133c8:	f643 2370 	movw	r3, #14960	; 0x3a70
 80133cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80133d0:	edd3 6a00 	vldr	s13, [r3]
 80133d4:	eddf 7a46 	vldr	s15, [pc, #280]	; 80134f0 <mixTable+0x17b4>
 80133d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80133dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80133e0:	f643 2370 	movw	r3, #14960	; 0x3a70
 80133e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80133e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80133ec:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80134ec <mixTable+0x17b0>
 80133f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80133f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80133f8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80133fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013400:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013404:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013408:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801340c:	edd3 7a02 	vldr	s15, [r3, #8]
 8013410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013418:	f240 03b4 	movw	r3, #180	; 0xb4
 801341c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013420:	edc3 7a03 	vstr	s15, [r3, #12]
            motor[4] = PIDMIX(  1.0f,  0.866025f, -1.0f ); // Rear Left   CW
 8013424:	f240 0388 	movw	r3, #136	; 0x88
 8013428:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801342c:	ed93 7a03 	vldr	s14, [r3, #12]
 8013430:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013434:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013438:	edd3 7a00 	vldr	s15, [r3]
 801343c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013440:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013444:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013448:	edd3 6a01 	vldr	s13, [r3, #4]
 801344c:	eddf 7a27 	vldr	s15, [pc, #156]	; 80134ec <mixTable+0x17b0>
 8013450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013454:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013458:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801345c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013460:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013464:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013468:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801346c:	edd3 7a02 	vldr	s15, [r3, #8]
 8013470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013478:	f240 03b4 	movw	r3, #180	; 0xb4
 801347c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013480:	edc3 7a04 	vstr	s15, [r3, #16]
            motor[5] = PIDMIX(  1.0f, -0.866025f,  1.0f ); // Front Left  CCW
 8013484:	f240 0388 	movw	r3, #136	; 0x88
 8013488:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801348c:	ed93 7a03 	vldr	s14, [r3, #12]
 8013490:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013494:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013498:	edd3 7a00 	vldr	s15, [r3]
 801349c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80134a0:	f643 2370 	movw	r3, #14960	; 0x3a70
 80134a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80134a8:	edd3 6a01 	vldr	s13, [r3, #4]
 80134ac:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80134e8 <mixTable+0x17ac>
 80134b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80134b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80134b8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80134bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80134c0:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80134c4:	f643 2370 	movw	r3, #14960	; 0x3a70
 80134c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80134cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80134d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80134d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134d8:	f240 03b4 	movw	r3, #180	; 0xb4
 80134dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80134e0:	edc3 7a05 	vstr	s15, [r3, #20]
            break;
 80134e4:	f001 b9bc 	b.w	8014860 <mixTable+0x2b24>
 80134e8:	bf5db3d0 	.word	0xbf5db3d0
 80134ec:	3f5db3d0 	.word	0x3f5db3d0
 80134f0:	00000000 	.word	0x00000000

        ///////////////////////////////

        case MIXERTYPE_HEX6X:
            motor[0] = PIDMIX(  0.866025f, -1.0f, -1.0f ); // Front Left  CW
 80134f4:	f240 0388 	movw	r3, #136	; 0x88
 80134f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80134fc:	ed93 7a03 	vldr	s14, [r3, #12]
 8013500:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013504:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013508:	edd3 6a00 	vldr	s13, [r3]
 801350c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80134ec <mixTable+0x17b0>
 8013510:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013514:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013518:	f643 2370 	movw	r3, #14960	; 0x3a70
 801351c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013520:	edd3 7a01 	vldr	s15, [r3, #4]
 8013524:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013528:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801352c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013530:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013534:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013538:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801353c:	edd3 7a02 	vldr	s15, [r3, #8]
 8013540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013548:	f240 03b4 	movw	r3, #180	; 0xb4
 801354c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013550:	edc3 7a00 	vstr	s15, [r3]
            motor[1] = PIDMIX( -0.866025f, -1.0f,  1.0f ); // Front Right CCW
 8013554:	f240 0388 	movw	r3, #136	; 0x88
 8013558:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801355c:	ed93 7a03 	vldr	s14, [r3, #12]
 8013560:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013564:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013568:	edd3 6a00 	vldr	s13, [r3]
 801356c:	ed5f 7a22 	vldr	s15, [pc, #-136]	; 80134e8 <mixTable+0x17ac>
 8013570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013574:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013578:	f643 2370 	movw	r3, #14960	; 0x3a70
 801357c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013580:	edd3 7a01 	vldr	s15, [r3, #4]
 8013584:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013588:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801358c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013590:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013594:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013598:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801359c:	edd3 7a02 	vldr	s15, [r3, #8]
 80135a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80135a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80135a8:	f240 03b4 	movw	r3, #180	; 0xb4
 80135ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80135b0:	edc3 7a01 	vstr	s15, [r3, #4]
            motor[2] = PIDMIX( -0.866025f,  0.0f, -1.0f ); // Right       CW
 80135b4:	f240 0388 	movw	r3, #136	; 0x88
 80135b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80135bc:	ed93 7a03 	vldr	s14, [r3, #12]
 80135c0:	f643 2370 	movw	r3, #14960	; 0x3a70
 80135c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80135c8:	edd3 6a00 	vldr	s13, [r3]
 80135cc:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80134e8 <mixTable+0x17ac>
 80135d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80135d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80135d8:	f643 2370 	movw	r3, #14960	; 0x3a70
 80135dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80135e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80135e4:	ed5f 7a3e 	vldr	s15, [pc, #-248]	; 80134f0 <mixTable+0x17b4>
 80135e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80135ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80135f0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80135f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80135f8:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80135fc:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013600:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013604:	edd3 7a02 	vldr	s15, [r3, #8]
 8013608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801360c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013610:	f240 03b4 	movw	r3, #180	; 0xb4
 8013614:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013618:	edc3 7a02 	vstr	s15, [r3, #8]
            motor[3] = PIDMIX( -0.866025f,  1.0f,  1.0f ); // Rear Right  CCW
 801361c:	f240 0388 	movw	r3, #136	; 0x88
 8013620:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013624:	ed93 7a03 	vldr	s14, [r3, #12]
 8013628:	f643 2370 	movw	r3, #14960	; 0x3a70
 801362c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013630:	edd3 6a00 	vldr	s13, [r3]
 8013634:	ed5f 7a54 	vldr	s15, [pc, #-336]	; 80134e8 <mixTable+0x17ac>
 8013638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801363c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013640:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013644:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013648:	edd3 7a01 	vldr	s15, [r3, #4]
 801364c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013650:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013654:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013658:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 801365c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013660:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013664:	edd3 7a02 	vldr	s15, [r3, #8]
 8013668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801366c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013670:	f240 03b4 	movw	r3, #180	; 0xb4
 8013674:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013678:	edc3 7a03 	vstr	s15, [r3, #12]
            motor[4] = PIDMIX(  0.866025f,  1.0f, -1.0f ); // Rear Left   CW
 801367c:	f240 0388 	movw	r3, #136	; 0x88
 8013680:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013684:	ed93 7a03 	vldr	s14, [r3, #12]
 8013688:	f643 2370 	movw	r3, #14960	; 0x3a70
 801368c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013690:	edd3 6a00 	vldr	s13, [r3]
 8013694:	ed5f 7a6b 	vldr	s15, [pc, #-428]	; 80134ec <mixTable+0x17b0>
 8013698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801369c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80136a0:	f643 2370 	movw	r3, #14960	; 0x3a70
 80136a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80136a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80136ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80136b0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80136b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80136b8:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80136bc:	f643 2370 	movw	r3, #14960	; 0x3a70
 80136c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80136c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80136c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80136cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80136d0:	f240 03b4 	movw	r3, #180	; 0xb4
 80136d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80136d8:	edc3 7a04 	vstr	s15, [r3, #16]
            motor[5] = PIDMIX(  0.866025f,  0.0f,  1.0f ); // Left        CCW
 80136dc:	f240 0388 	movw	r3, #136	; 0x88
 80136e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80136e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80136e8:	f643 2370 	movw	r3, #14960	; 0x3a70
 80136ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80136f0:	edd3 6a00 	vldr	s13, [r3]
 80136f4:	ed5f 7a83 	vldr	s15, [pc, #-524]	; 80134ec <mixTable+0x17b0>
 80136f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80136fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013700:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013704:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013708:	edd3 6a01 	vldr	s13, [r3, #4]
 801370c:	ed5f 7a88 	vldr	s15, [pc, #-544]	; 80134f0 <mixTable+0x17b4>
 8013710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013714:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013718:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801371c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013720:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013724:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013728:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801372c:	edd3 7a02 	vldr	s15, [r3, #8]
 8013730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013738:	f240 03b4 	movw	r3, #180	; 0xb4
 801373c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013740:	edc3 7a05 	vstr	s15, [r3, #20]
            break;
 8013744:	f001 b88c 	b.w	8014860 <mixTable+0x2b24>

        ///////////////////////////////

        case MIXERTYPE_Y6:
            motor[0] = PIDMIX(  1.0f, -0.666667, -1.0f );  // Top Left     CW
 8013748:	f240 0388 	movw	r3, #136	; 0x88
 801374c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013750:	ed93 7a03 	vldr	s14, [r3, #12]
 8013754:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013758:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801375c:	edd3 7a00 	vldr	s15, [r3]
 8013760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013764:	ee17 0a90 	vmov	r0, s15
 8013768:	f00c ffe0 	bl	802072c <__aeabi_f2d>
 801376c:	4604      	mov	r4, r0
 801376e:	460d      	mov	r5, r1
 8013770:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013774:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	4618      	mov	r0, r3
 801377c:	f00c ffd6 	bl	802072c <__aeabi_f2d>
 8013780:	4602      	mov	r2, r0
 8013782:	460b      	mov	r3, r1
 8013784:	4610      	mov	r0, r2
 8013786:	4619      	mov	r1, r3
 8013788:	a3f5      	add	r3, pc, #980	; (adr r3, 8013b60 <mixTable+0x1e24>)
 801378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801378e:	f00d f821 	bl	80207d4 <__aeabi_dmul>
 8013792:	4602      	mov	r2, r0
 8013794:	460b      	mov	r3, r1
 8013796:	4620      	mov	r0, r4
 8013798:	4629      	mov	r1, r5
 801379a:	f00c fe69 	bl	8020470 <__adddf3>
 801379e:	4602      	mov	r2, r0
 80137a0:	460b      	mov	r3, r1
 80137a2:	4614      	mov	r4, r2
 80137a4:	461d      	mov	r5, r3
 80137a6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80137aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80137ae:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80137b2:	f643 2370 	movw	r3, #14960	; 0x3a70
 80137b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80137ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80137be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80137c2:	eef1 7a67 	vneg.f32	s15, s15
 80137c6:	ee17 3a90 	vmov	r3, s15
 80137ca:	4618      	mov	r0, r3
 80137cc:	f00c ffae 	bl	802072c <__aeabi_f2d>
 80137d0:	4602      	mov	r2, r0
 80137d2:	460b      	mov	r3, r1
 80137d4:	4620      	mov	r0, r4
 80137d6:	4629      	mov	r1, r5
 80137d8:	f00c fe4a 	bl	8020470 <__adddf3>
 80137dc:	4602      	mov	r2, r0
 80137de:	460b      	mov	r3, r1
 80137e0:	4610      	mov	r0, r2
 80137e2:	4619      	mov	r1, r3
 80137e4:	f00d fa90 	bl	8020d08 <__aeabi_d2f>
 80137e8:	4602      	mov	r2, r0
 80137ea:	f240 03b4 	movw	r3, #180	; 0xb4
 80137ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80137f2:	601a      	str	r2, [r3, #0]
            motor[1] = PIDMIX( -1.0f, -0.666667, -1.0f );  // Top Right    CW
 80137f4:	f240 0388 	movw	r3, #136	; 0x88
 80137f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80137fc:	ed93 7a03 	vldr	s14, [r3, #12]
 8013800:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013804:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013808:	edd3 7a00 	vldr	s15, [r3]
 801380c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013810:	ee17 0a90 	vmov	r0, s15
 8013814:	f00c ff8a 	bl	802072c <__aeabi_f2d>
 8013818:	4604      	mov	r4, r0
 801381a:	460d      	mov	r5, r1
 801381c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013820:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013824:	685b      	ldr	r3, [r3, #4]
 8013826:	4618      	mov	r0, r3
 8013828:	f00c ff80 	bl	802072c <__aeabi_f2d>
 801382c:	4602      	mov	r2, r0
 801382e:	460b      	mov	r3, r1
 8013830:	4610      	mov	r0, r2
 8013832:	4619      	mov	r1, r3
 8013834:	a3ca      	add	r3, pc, #808	; (adr r3, 8013b60 <mixTable+0x1e24>)
 8013836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801383a:	f00c ffcb 	bl	80207d4 <__aeabi_dmul>
 801383e:	4602      	mov	r2, r0
 8013840:	460b      	mov	r3, r1
 8013842:	4620      	mov	r0, r4
 8013844:	4629      	mov	r1, r5
 8013846:	f00c fe13 	bl	8020470 <__adddf3>
 801384a:	4602      	mov	r2, r0
 801384c:	460b      	mov	r3, r1
 801384e:	4614      	mov	r4, r2
 8013850:	461d      	mov	r5, r3
 8013852:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013856:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801385a:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 801385e:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013862:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013866:	edd3 7a02 	vldr	s15, [r3, #8]
 801386a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801386e:	eef1 7a67 	vneg.f32	s15, s15
 8013872:	ee17 3a90 	vmov	r3, s15
 8013876:	4618      	mov	r0, r3
 8013878:	f00c ff58 	bl	802072c <__aeabi_f2d>
 801387c:	4602      	mov	r2, r0
 801387e:	460b      	mov	r3, r1
 8013880:	4620      	mov	r0, r4
 8013882:	4629      	mov	r1, r5
 8013884:	f00c fdf4 	bl	8020470 <__adddf3>
 8013888:	4602      	mov	r2, r0
 801388a:	460b      	mov	r3, r1
 801388c:	4610      	mov	r0, r2
 801388e:	4619      	mov	r1, r3
 8013890:	f00d fa3a 	bl	8020d08 <__aeabi_d2f>
 8013894:	4602      	mov	r2, r0
 8013896:	f240 03b4 	movw	r3, #180	; 0xb4
 801389a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801389e:	605a      	str	r2, [r3, #4]
            motor[2] = PIDMIX(  0.0f,  1.333333,  1.0f );  // Top Rear     CCW
 80138a0:	f240 0388 	movw	r3, #136	; 0x88
 80138a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80138a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80138ac:	f643 2370 	movw	r3, #14960	; 0x3a70
 80138b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80138b4:	edd3 6a00 	vldr	s13, [r3]
 80138b8:	eddf 7aab 	vldr	s15, [pc, #684]	; 8013b68 <mixTable+0x1e2c>
 80138bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80138c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80138c4:	ee17 0a90 	vmov	r0, s15
 80138c8:	f00c ff30 	bl	802072c <__aeabi_f2d>
 80138cc:	4604      	mov	r4, r0
 80138ce:	460d      	mov	r5, r1
 80138d0:	f643 2370 	movw	r3, #14960	; 0x3a70
 80138d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80138d8:	685b      	ldr	r3, [r3, #4]
 80138da:	4618      	mov	r0, r3
 80138dc:	f00c ff26 	bl	802072c <__aeabi_f2d>
 80138e0:	4602      	mov	r2, r0
 80138e2:	460b      	mov	r3, r1
 80138e4:	4610      	mov	r0, r2
 80138e6:	4619      	mov	r1, r3
 80138e8:	a39b      	add	r3, pc, #620	; (adr r3, 8013b58 <mixTable+0x1e1c>)
 80138ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138ee:	f00c ff71 	bl	80207d4 <__aeabi_dmul>
 80138f2:	4602      	mov	r2, r0
 80138f4:	460b      	mov	r3, r1
 80138f6:	4620      	mov	r0, r4
 80138f8:	4629      	mov	r1, r5
 80138fa:	f00c fdb9 	bl	8020470 <__adddf3>
 80138fe:	4602      	mov	r2, r0
 8013900:	460b      	mov	r3, r1
 8013902:	4614      	mov	r4, r2
 8013904:	461d      	mov	r5, r3
 8013906:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801390a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801390e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8013912:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013916:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801391a:	edd3 7a02 	vldr	s15, [r3, #8]
 801391e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013922:	ee17 0a90 	vmov	r0, s15
 8013926:	f00c ff01 	bl	802072c <__aeabi_f2d>
 801392a:	4602      	mov	r2, r0
 801392c:	460b      	mov	r3, r1
 801392e:	4620      	mov	r0, r4
 8013930:	4629      	mov	r1, r5
 8013932:	f00c fd9d 	bl	8020470 <__adddf3>
 8013936:	4602      	mov	r2, r0
 8013938:	460b      	mov	r3, r1
 801393a:	4610      	mov	r0, r2
 801393c:	4619      	mov	r1, r3
 801393e:	f00d f9e3 	bl	8020d08 <__aeabi_d2f>
 8013942:	4602      	mov	r2, r0
 8013944:	f240 03b4 	movw	r3, #180	; 0xb4
 8013948:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801394c:	609a      	str	r2, [r3, #8]
            motor[3] = PIDMIX(  1.0f, -0.666667,  1.0f );  // Bottom Left  CCW
 801394e:	f240 0388 	movw	r3, #136	; 0x88
 8013952:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013956:	ed93 7a03 	vldr	s14, [r3, #12]
 801395a:	f643 2370 	movw	r3, #14960	; 0x3a70
 801395e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013962:	edd3 7a00 	vldr	s15, [r3]
 8013966:	ee77 7a27 	vadd.f32	s15, s14, s15
 801396a:	ee17 0a90 	vmov	r0, s15
 801396e:	f00c fedd 	bl	802072c <__aeabi_f2d>
 8013972:	4604      	mov	r4, r0
 8013974:	460d      	mov	r5, r1
 8013976:	f643 2370 	movw	r3, #14960	; 0x3a70
 801397a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801397e:	685b      	ldr	r3, [r3, #4]
 8013980:	4618      	mov	r0, r3
 8013982:	f00c fed3 	bl	802072c <__aeabi_f2d>
 8013986:	4602      	mov	r2, r0
 8013988:	460b      	mov	r3, r1
 801398a:	4610      	mov	r0, r2
 801398c:	4619      	mov	r1, r3
 801398e:	a374      	add	r3, pc, #464	; (adr r3, 8013b60 <mixTable+0x1e24>)
 8013990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013994:	f00c ff1e 	bl	80207d4 <__aeabi_dmul>
 8013998:	4602      	mov	r2, r0
 801399a:	460b      	mov	r3, r1
 801399c:	4620      	mov	r0, r4
 801399e:	4629      	mov	r1, r5
 80139a0:	f00c fd66 	bl	8020470 <__adddf3>
 80139a4:	4602      	mov	r2, r0
 80139a6:	460b      	mov	r3, r1
 80139a8:	4614      	mov	r4, r2
 80139aa:	461d      	mov	r5, r3
 80139ac:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80139b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80139b4:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80139b8:	f643 2370 	movw	r3, #14960	; 0x3a70
 80139bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80139c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80139c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80139c8:	ee17 0a90 	vmov	r0, s15
 80139cc:	f00c feae 	bl	802072c <__aeabi_f2d>
 80139d0:	4602      	mov	r2, r0
 80139d2:	460b      	mov	r3, r1
 80139d4:	4620      	mov	r0, r4
 80139d6:	4629      	mov	r1, r5
 80139d8:	f00c fd4a 	bl	8020470 <__adddf3>
 80139dc:	4602      	mov	r2, r0
 80139de:	460b      	mov	r3, r1
 80139e0:	4610      	mov	r0, r2
 80139e2:	4619      	mov	r1, r3
 80139e4:	f00d f990 	bl	8020d08 <__aeabi_d2f>
 80139e8:	4602      	mov	r2, r0
 80139ea:	f240 03b4 	movw	r3, #180	; 0xb4
 80139ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80139f2:	60da      	str	r2, [r3, #12]
            motor[4] = PIDMIX( -1.0f, -0.666667,  1.0f );  // Bottom Right CCW
 80139f4:	f240 0388 	movw	r3, #136	; 0x88
 80139f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80139fc:	ed93 7a03 	vldr	s14, [r3, #12]
 8013a00:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013a08:	edd3 7a00 	vldr	s15, [r3]
 8013a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a10:	ee17 0a90 	vmov	r0, s15
 8013a14:	f00c fe8a 	bl	802072c <__aeabi_f2d>
 8013a18:	4604      	mov	r4, r0
 8013a1a:	460d      	mov	r5, r1
 8013a1c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013a24:	685b      	ldr	r3, [r3, #4]
 8013a26:	4618      	mov	r0, r3
 8013a28:	f00c fe80 	bl	802072c <__aeabi_f2d>
 8013a2c:	4602      	mov	r2, r0
 8013a2e:	460b      	mov	r3, r1
 8013a30:	4610      	mov	r0, r2
 8013a32:	4619      	mov	r1, r3
 8013a34:	a34a      	add	r3, pc, #296	; (adr r3, 8013b60 <mixTable+0x1e24>)
 8013a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a3a:	f00c fecb 	bl	80207d4 <__aeabi_dmul>
 8013a3e:	4602      	mov	r2, r0
 8013a40:	460b      	mov	r3, r1
 8013a42:	4620      	mov	r0, r4
 8013a44:	4629      	mov	r1, r5
 8013a46:	f00c fd13 	bl	8020470 <__adddf3>
 8013a4a:	4602      	mov	r2, r0
 8013a4c:	460b      	mov	r3, r1
 8013a4e:	4614      	mov	r4, r2
 8013a50:	461d      	mov	r5, r3
 8013a52:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013a5a:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8013a5e:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013a66:	edd3 7a02 	vldr	s15, [r3, #8]
 8013a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a6e:	ee17 0a90 	vmov	r0, s15
 8013a72:	f00c fe5b 	bl	802072c <__aeabi_f2d>
 8013a76:	4602      	mov	r2, r0
 8013a78:	460b      	mov	r3, r1
 8013a7a:	4620      	mov	r0, r4
 8013a7c:	4629      	mov	r1, r5
 8013a7e:	f00c fcf7 	bl	8020470 <__adddf3>
 8013a82:	4602      	mov	r2, r0
 8013a84:	460b      	mov	r3, r1
 8013a86:	4610      	mov	r0, r2
 8013a88:	4619      	mov	r1, r3
 8013a8a:	f00d f93d 	bl	8020d08 <__aeabi_d2f>
 8013a8e:	4602      	mov	r2, r0
 8013a90:	f240 03b4 	movw	r3, #180	; 0xb4
 8013a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013a98:	611a      	str	r2, [r3, #16]
            motor[5] = PIDMIX(  0.0f,  1.333333, -1.0f );  // Bottom Rear  CW
 8013a9a:	f240 0388 	movw	r3, #136	; 0x88
 8013a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013aa2:	ed93 7a03 	vldr	s14, [r3, #12]
 8013aa6:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013aae:	edd3 6a00 	vldr	s13, [r3]
 8013ab2:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8013b68 <mixTable+0x1e2c>
 8013ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013abe:	ee17 0a90 	vmov	r0, s15
 8013ac2:	f00c fe33 	bl	802072c <__aeabi_f2d>
 8013ac6:	4604      	mov	r4, r0
 8013ac8:	460d      	mov	r5, r1
 8013aca:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013ad2:	685b      	ldr	r3, [r3, #4]
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f00c fe29 	bl	802072c <__aeabi_f2d>
 8013ada:	4602      	mov	r2, r0
 8013adc:	460b      	mov	r3, r1
 8013ade:	4610      	mov	r0, r2
 8013ae0:	4619      	mov	r1, r3
 8013ae2:	a31d      	add	r3, pc, #116	; (adr r3, 8013b58 <mixTable+0x1e1c>)
 8013ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ae8:	f00c fe74 	bl	80207d4 <__aeabi_dmul>
 8013aec:	4602      	mov	r2, r0
 8013aee:	460b      	mov	r3, r1
 8013af0:	4620      	mov	r0, r4
 8013af2:	4629      	mov	r1, r5
 8013af4:	f00c fcbc 	bl	8020470 <__adddf3>
 8013af8:	4602      	mov	r2, r0
 8013afa:	460b      	mov	r3, r1
 8013afc:	4614      	mov	r4, r2
 8013afe:	461d      	mov	r5, r3
 8013b00:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013b08:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8013b0c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013b14:	edd3 7a02 	vldr	s15, [r3, #8]
 8013b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b1c:	eef1 7a67 	vneg.f32	s15, s15
 8013b20:	ee17 3a90 	vmov	r3, s15
 8013b24:	4618      	mov	r0, r3
 8013b26:	f00c fe01 	bl	802072c <__aeabi_f2d>
 8013b2a:	4602      	mov	r2, r0
 8013b2c:	460b      	mov	r3, r1
 8013b2e:	4620      	mov	r0, r4
 8013b30:	4629      	mov	r1, r5
 8013b32:	f00c fc9d 	bl	8020470 <__adddf3>
 8013b36:	4602      	mov	r2, r0
 8013b38:	460b      	mov	r3, r1
 8013b3a:	4610      	mov	r0, r2
 8013b3c:	4619      	mov	r1, r3
 8013b3e:	f00d f8e3 	bl	8020d08 <__aeabi_d2f>
 8013b42:	4602      	mov	r2, r0
 8013b44:	f240 03b4 	movw	r3, #180	; 0xb4
 8013b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013b4c:	615a      	str	r2, [r3, #20]
            break;
 8013b4e:	f000 be87 	b.w	8014860 <mixTable+0x2b24>
 8013b52:	bf00      	nop
 8013b54:	f3af 8000 	nop.w
 8013b58:	fbdad752 	.word	0xfbdad752
 8013b5c:	3ff55554 	.word	0x3ff55554
 8013b60:	084a515d 	.word	0x084a515d
 8013b64:	bfe55556 	.word	0xbfe55556
 8013b68:	00000000 	.word	0x00000000
 8013b6c:	3f333333 	.word	0x3f333333
 8013b70:	bf333333 	.word	0xbf333333

        ///////////////////////////////

        case MIXERTYPE_OCTOF8P:
            motor[0] = PIDMIX(  0.0f, -1.0f, -1.0f );      // Front       CW
 8013b74:	f240 0388 	movwcc	r3, #136	; 0x88
 8013b78:	f2c2 0300 	movtcs	r3, #8192	; 0x2000
 8013b7c:	ed93 7a03 	vldrcs	s14, [r3, #12]
 8013b80:	f643 2370 	movwcc	r3, #14960	; 0x3a70
 8013b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013b88:	edd3 6a00 	vldr	s13, [r3]
 8013b8c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 8013b68 <mixTable+0x1e2c>
 8013b90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013b94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013b98:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013ba0:	edd3 7a01 	vldr	s15, [r3, #4]
 8013ba4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013ba8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013bb0:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013bb4:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013bbc:	edd3 7a02 	vldr	s15, [r3, #8]
 8013bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013bc8:	f240 03b4 	movw	r3, #180	; 0xb4
 8013bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013bd0:	edc3 7a00 	vstr	s15, [r3]
            motor[1] = PIDMIX( -0.7f, -0.7f,  1.0f );      // Front Right CCW
 8013bd4:	f240 0388 	movw	r3, #136	; 0x88
 8013bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013bdc:	ed93 7a03 	vldr	s14, [r3, #12]
 8013be0:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013be8:	edd3 6a00 	vldr	s13, [r3]
 8013bec:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 8013b70 <mixTable+0x1e34>
 8013bf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013bf8:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c00:	edd3 6a01 	vldr	s13, [r3, #4]
 8013c04:	ed5f 7a26 	vldr	s15, [pc, #-152]	; 8013b70 <mixTable+0x1e34>
 8013c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013c0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013c10:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c18:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013c1c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c24:	edd3 7a02 	vldr	s15, [r3, #8]
 8013c28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013c30:	f240 03b4 	movw	r3, #180	; 0xb4
 8013c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c38:	edc3 7a01 	vstr	s15, [r3, #4]
            motor[2] = PIDMIX( -1.0f,  0.0f, -1.0f );      // Right       CW
 8013c3c:	f240 0388 	movw	r3, #136	; 0x88
 8013c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c44:	ed93 7a03 	vldr	s14, [r3, #12]
 8013c48:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c50:	edd3 7a00 	vldr	s15, [r3]
 8013c54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013c58:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c60:	edd3 6a01 	vldr	s13, [r3, #4]
 8013c64:	ed5f 7a40 	vldr	s15, [pc, #-256]	; 8013b68 <mixTable+0x1e2c>
 8013c68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013c6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013c70:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c78:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013c7c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c84:	edd3 7a02 	vldr	s15, [r3, #8]
 8013c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c90:	f240 03b4 	movw	r3, #180	; 0xb4
 8013c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c98:	edc3 7a02 	vstr	s15, [r3, #8]
            motor[3] = PIDMIX( -0.7f,  0.7f,  1.0f );      // Rear Right  CCW
 8013c9c:	f240 0388 	movw	r3, #136	; 0x88
 8013ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013ca4:	ed93 7a03 	vldr	s14, [r3, #12]
 8013ca8:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013cb0:	edd3 6a00 	vldr	s13, [r3]
 8013cb4:	ed5f 7a52 	vldr	s15, [pc, #-328]	; 8013b70 <mixTable+0x1e34>
 8013cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013cbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013cc0:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013cc8:	edd3 6a01 	vldr	s13, [r3, #4]
 8013ccc:	ed5f 7a59 	vldr	s15, [pc, #-356]	; 8013b6c <mixTable+0x1e30>
 8013cd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013cd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013cd8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013ce0:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013ce4:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013cec:	edd3 7a02 	vldr	s15, [r3, #8]
 8013cf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013cf8:	f240 03b4 	movw	r3, #180	; 0xb4
 8013cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d00:	edc3 7a03 	vstr	s15, [r3, #12]
            motor[4] = PIDMIX(  0.0f,  1.0f, -1.0f );      // Rear        CW
 8013d04:	f240 0388 	movw	r3, #136	; 0x88
 8013d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d0c:	ed93 7a03 	vldr	s14, [r3, #12]
 8013d10:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d18:	edd3 6a00 	vldr	s13, [r3]
 8013d1c:	ed5f 7a6e 	vldr	s15, [pc, #-440]	; 8013b68 <mixTable+0x1e2c>
 8013d20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013d24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013d28:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d30:	edd3 7a01 	vldr	s15, [r3, #4]
 8013d34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013d38:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d40:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013d44:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8013d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d58:	f240 03b4 	movw	r3, #180	; 0xb4
 8013d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d60:	edc3 7a04 	vstr	s15, [r3, #16]
            motor[5] = PIDMIX(  0.7f,  0.7f,  1.0f );      // Rear left   CCW
 8013d64:	f240 0388 	movw	r3, #136	; 0x88
 8013d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d6c:	ed93 7a03 	vldr	s14, [r3, #12]
 8013d70:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d78:	edd3 6a00 	vldr	s13, [r3]
 8013d7c:	ed5f 7a85 	vldr	s15, [pc, #-532]	; 8013b6c <mixTable+0x1e30>
 8013d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013d84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013d88:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d90:	edd3 6a01 	vldr	s13, [r3, #4]
 8013d94:	ed5f 7a8b 	vldr	s15, [pc, #-556]	; 8013b6c <mixTable+0x1e30>
 8013d98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013d9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013da0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013da8:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013dac:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013db4:	edd3 7a02 	vldr	s15, [r3, #8]
 8013db8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013dc0:	f240 03b4 	movw	r3, #180	; 0xb4
 8013dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013dc8:	edc3 7a05 	vstr	s15, [r3, #20]
            motor[6] = PIDMIX(  1.0f,  0.0f, -1.0f );      // Left        CW
 8013dcc:	f240 0388 	movw	r3, #136	; 0x88
 8013dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013dd4:	ed93 7a03 	vldr	s14, [r3, #12]
 8013dd8:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013de0:	edd3 7a00 	vldr	s15, [r3]
 8013de4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013de8:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013df0:	edd3 6a01 	vldr	s13, [r3, #4]
 8013df4:	ed5f 7aa4 	vldr	s15, [pc, #-656]	; 8013b68 <mixTable+0x1e2c>
 8013df8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013dfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013e00:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e08:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013e0c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e14:	edd3 7a02 	vldr	s15, [r3, #8]
 8013e18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013e20:	f240 03b4 	movw	r3, #180	; 0xb4
 8013e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e28:	edc3 7a06 	vstr	s15, [r3, #24]
            motor[7] = PIDMIX(  0.7f, -0.7f,  1.0f );      // Front Left  CCW
 8013e2c:	f240 0388 	movw	r3, #136	; 0x88
 8013e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e34:	ed93 7a03 	vldr	s14, [r3, #12]
 8013e38:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e40:	edd3 6a00 	vldr	s13, [r3]
 8013e44:	ed5f 7ab7 	vldr	s15, [pc, #-732]	; 8013b6c <mixTable+0x1e30>
 8013e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013e4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013e50:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e58:	edd3 6a01 	vldr	s13, [r3, #4]
 8013e5c:	ed5f 7abc 	vldr	s15, [pc, #-752]	; 8013b70 <mixTable+0x1e34>
 8013e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013e64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013e68:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e70:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013e74:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8013e80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e88:	f240 03b4 	movw	r3, #180	; 0xb4
 8013e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e90:	edc3 7a07 	vstr	s15, [r3, #28]
            break;
 8013e94:	f000 bce4 	b.w	8014860 <mixTable+0x2b24>

        ///////////////////////////////

        case MIXERTYPE_OCTOF8X:
            motor[0] = PIDMIX(  0.5f, -1.0f, -1.0f );      // Front Left      CW
 8013e98:	f240 0388 	movw	r3, #136	; 0x88
 8013e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013ea0:	ed93 7a03 	vldr	s14, [r3, #12]
 8013ea4:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013eac:	edd3 6a00 	vldr	s13, [r3]
 8013eb0:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8013eb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013eb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013ebc:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013ec4:	edd3 7a01 	vldr	s15, [r3, #4]
 8013ec8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013ecc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013ed4:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013ed8:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013ee0:	edd3 7a02 	vldr	s15, [r3, #8]
 8013ee4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013eec:	f240 03b4 	movw	r3, #180	; 0xb4
 8013ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013ef4:	edc3 7a00 	vstr	s15, [r3]
            motor[1] = PIDMIX( -0.5f, -1.0f,  1.0f );      // Front Right     CCW
 8013ef8:	f240 0388 	movw	r3, #136	; 0x88
 8013efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f00:	ed93 7a03 	vldr	s14, [r3, #12]
 8013f04:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f0c:	edd3 6a00 	vldr	s13, [r3]
 8013f10:	eefe 7a00 	vmov.f32	s15, #224	; 0xe0
 8013f14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013f18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013f1c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f24:	edd3 7a01 	vldr	s15, [r3, #4]
 8013f28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013f2c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f34:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013f38:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f40:	edd3 7a02 	vldr	s15, [r3, #8]
 8013f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f4c:	f240 03b4 	movw	r3, #180	; 0xb4
 8013f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f54:	edc3 7a01 	vstr	s15, [r3, #4]
            motor[2] = PIDMIX( -1.0f, -0.5f, -1.0f );      // Mid Front Right CW
 8013f58:	f240 0388 	movw	r3, #136	; 0x88
 8013f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f60:	ed93 7a03 	vldr	s14, [r3, #12]
 8013f64:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f6c:	edd3 7a00 	vldr	s15, [r3]
 8013f70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013f74:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f7c:	edd3 6a01 	vldr	s13, [r3, #4]
 8013f80:	eefe 7a00 	vmov.f32	s15, #224	; 0xe0
 8013f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013f88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013f8c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f94:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013f98:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013fa0:	edd3 7a02 	vldr	s15, [r3, #8]
 8013fa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013fac:	f240 03b4 	movw	r3, #180	; 0xb4
 8013fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013fb4:	edc3 7a02 	vstr	s15, [r3, #8]
            motor[3] = PIDMIX( -1.0f,  0.5f,  1.0f );      // Mid Rear Right  CCW
 8013fb8:	f240 0388 	movw	r3, #136	; 0x88
 8013fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013fc0:	ed93 7a03 	vldr	s14, [r3, #12]
 8013fc4:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013fcc:	edd3 7a00 	vldr	s15, [r3]
 8013fd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013fd4:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013fdc:	edd3 6a01 	vldr	s13, [r3, #4]
 8013fe0:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8013fe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013fe8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013fec:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8013ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013ff4:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8013ff8:	f643 2370 	movw	r3, #14960	; 0x3a70
 8013ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014000:	edd3 7a02 	vldr	s15, [r3, #8]
 8014004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014008:	ee77 7a27 	vadd.f32	s15, s14, s15
 801400c:	f240 03b4 	movw	r3, #180	; 0xb4
 8014010:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014014:	edc3 7a03 	vstr	s15, [r3, #12]
            motor[4] = PIDMIX( -0.5f,  1.0f, -1.0f );      // Rear Right      CW
 8014018:	f240 0388 	movw	r3, #136	; 0x88
 801401c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014020:	ed93 7a03 	vldr	s14, [r3, #12]
 8014024:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014028:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801402c:	edd3 6a00 	vldr	s13, [r3]
 8014030:	eefe 7a00 	vmov.f32	s15, #224	; 0xe0
 8014034:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014038:	ee37 7a27 	vadd.f32	s14, s14, s15
 801403c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014040:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014044:	edd3 7a01 	vldr	s15, [r3, #4]
 8014048:	ee37 7a27 	vadd.f32	s14, s14, s15
 801404c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8014050:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014054:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8014058:	f643 2370 	movw	r3, #14960	; 0x3a70
 801405c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014060:	edd3 7a02 	vldr	s15, [r3, #8]
 8014064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014068:	ee77 7a67 	vsub.f32	s15, s14, s15
 801406c:	f240 03b4 	movw	r3, #180	; 0xb4
 8014070:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014074:	edc3 7a04 	vstr	s15, [r3, #16]
            motor[5] = PIDMIX(  0.5f,  1.0f,  1.0f );      // Rear Left       CCW
 8014078:	f240 0388 	movw	r3, #136	; 0x88
 801407c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014080:	ed93 7a03 	vldr	s14, [r3, #12]
 8014084:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014088:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801408c:	edd3 6a00 	vldr	s13, [r3]
 8014090:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8014094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014098:	ee37 7a27 	vadd.f32	s14, s14, s15
 801409c:	f643 2370 	movw	r3, #14960	; 0x3a70
 80140a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80140a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80140a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80140ac:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80140b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80140b4:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80140b8:	f643 2370 	movw	r3, #14960	; 0x3a70
 80140bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80140c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80140c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80140c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80140cc:	f240 03b4 	movw	r3, #180	; 0xb4
 80140d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80140d4:	edc3 7a05 	vstr	s15, [r3, #20]
            motor[6] = PIDMIX(  1.0f,  0.5f, -1.0f );      // Mid Rear left   CW
 80140d8:	f240 0388 	movw	r3, #136	; 0x88
 80140dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80140e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80140e4:	f643 2370 	movw	r3, #14960	; 0x3a70
 80140e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80140ec:	edd3 7a00 	vldr	s15, [r3]
 80140f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80140f4:	f643 2370 	movw	r3, #14960	; 0x3a70
 80140f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80140fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8014100:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8014104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014108:	ee37 7a27 	vadd.f32	s14, s14, s15
 801410c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8014110:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014114:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8014118:	f643 2370 	movw	r3, #14960	; 0x3a70
 801411c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014120:	edd3 7a02 	vldr	s15, [r3, #8]
 8014124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014128:	ee77 7a67 	vsub.f32	s15, s14, s15
 801412c:	f240 03b4 	movw	r3, #180	; 0xb4
 8014130:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014134:	edc3 7a06 	vstr	s15, [r3, #24]
            motor[7] = PIDMIX(  1.0f, -0.5f,  1.0f );      // Mid Front Left  CCW
 8014138:	f240 0388 	movw	r3, #136	; 0x88
 801413c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014140:	ed93 7a03 	vldr	s14, [r3, #12]
 8014144:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014148:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801414c:	edd3 7a00 	vldr	s15, [r3]
 8014150:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014154:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014158:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801415c:	edd3 6a01 	vldr	s13, [r3, #4]
 8014160:	eefe 7a00 	vmov.f32	s15, #224	; 0xe0
 8014164:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014168:	ee37 7a27 	vadd.f32	s14, s14, s15
 801416c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8014170:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014174:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8014178:	f643 2370 	movw	r3, #14960	; 0x3a70
 801417c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014180:	edd3 7a02 	vldr	s15, [r3, #8]
 8014184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014188:	ee77 7a27 	vadd.f32	s15, s14, s15
 801418c:	f240 03b4 	movw	r3, #180	; 0xb4
 8014190:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014194:	edc3 7a07 	vstr	s15, [r3, #28]
            break;
 8014198:	e362      	b.n	8014860 <mixTable+0x2b24>

        ///////////////////////////////

        case MIXERTYPE_OCTOX8P:
            motor[0] = PIDMIX(  0.0f, -1.0f, -1.0f );      // Top Front    CW
 801419a:	f240 0388 	movw	r3, #136	; 0x88
 801419e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80141a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80141a6:	f643 2370 	movw	r3, #14960	; 0x3a70
 80141aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80141ae:	edd3 6a00 	vldr	s13, [r3]
 80141b2:	eddf 7aba 	vldr	s15, [pc, #744]	; 801449c <mixTable+0x2760>
 80141b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80141ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80141be:	f643 2370 	movw	r3, #14960	; 0x3a70
 80141c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80141c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80141ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80141ce:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80141d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80141d6:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80141da:	f643 2370 	movw	r3, #14960	; 0x3a70
 80141de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80141e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80141e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80141ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80141ee:	f240 03b4 	movw	r3, #180	; 0xb4
 80141f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80141f6:	edc3 7a00 	vstr	s15, [r3]
            motor[1] = PIDMIX( -1.0f,  0.0f,  1.0f );      // Top Right    CCW
 80141fa:	f240 0388 	movw	r3, #136	; 0x88
 80141fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014202:	ed93 7a03 	vldr	s14, [r3, #12]
 8014206:	f643 2370 	movw	r3, #14960	; 0x3a70
 801420a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801420e:	edd3 7a00 	vldr	s15, [r3]
 8014212:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014216:	f643 2370 	movw	r3, #14960	; 0x3a70
 801421a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801421e:	edd3 6a01 	vldr	s13, [r3, #4]
 8014222:	eddf 7a9e 	vldr	s15, [pc, #632]	; 801449c <mixTable+0x2760>
 8014226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801422a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801422e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8014232:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014236:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 801423a:	f643 2370 	movw	r3, #14960	; 0x3a70
 801423e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014242:	edd3 7a02 	vldr	s15, [r3, #8]
 8014246:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801424a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801424e:	f240 03b4 	movw	r3, #180	; 0xb4
 8014252:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014256:	edc3 7a01 	vstr	s15, [r3, #4]
            motor[2] = PIDMIX(  0.0f,  1.0f, -1.0f );      // Top Rear     CW
 801425a:	f240 0388 	movw	r3, #136	; 0x88
 801425e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014262:	ed93 7a03 	vldr	s14, [r3, #12]
 8014266:	f643 2370 	movw	r3, #14960	; 0x3a70
 801426a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801426e:	edd3 6a00 	vldr	s13, [r3]
 8014272:	eddf 7a8a 	vldr	s15, [pc, #552]	; 801449c <mixTable+0x2760>
 8014276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801427a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801427e:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014282:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014286:	edd3 7a01 	vldr	s15, [r3, #4]
 801428a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801428e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8014292:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014296:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 801429a:	f643 2370 	movw	r3, #14960	; 0x3a70
 801429e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80142a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80142a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80142aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80142ae:	f240 03b4 	movw	r3, #180	; 0xb4
 80142b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80142b6:	edc3 7a02 	vstr	s15, [r3, #8]
            motor[3] = PIDMIX(  1.0f,  0.0f,  1.0f );      // Top Left     CCW
 80142ba:	f240 0388 	movw	r3, #136	; 0x88
 80142be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80142c2:	ed93 7a03 	vldr	s14, [r3, #12]
 80142c6:	f643 2370 	movw	r3, #14960	; 0x3a70
 80142ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80142ce:	edd3 7a00 	vldr	s15, [r3]
 80142d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80142d6:	f643 2370 	movw	r3, #14960	; 0x3a70
 80142da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80142de:	edd3 6a01 	vldr	s13, [r3, #4]
 80142e2:	eddf 7a6e 	vldr	s15, [pc, #440]	; 801449c <mixTable+0x2760>
 80142e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80142ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80142ee:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80142f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80142f6:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80142fa:	f643 2370 	movw	r3, #14960	; 0x3a70
 80142fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014302:	edd3 7a02 	vldr	s15, [r3, #8]
 8014306:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801430a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801430e:	f240 03b4 	movw	r3, #180	; 0xb4
 8014312:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014316:	edc3 7a03 	vstr	s15, [r3, #12]
            motor[4] = PIDMIX(  0.0f, -1.0f, -1.0f );      // Bottom Front CCW
 801431a:	f240 0388 	movw	r3, #136	; 0x88
 801431e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014322:	ed93 7a03 	vldr	s14, [r3, #12]
 8014326:	f643 2370 	movw	r3, #14960	; 0x3a70
 801432a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801432e:	edd3 6a00 	vldr	s13, [r3]
 8014332:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801449c <mixTable+0x2760>
 8014336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801433a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801433e:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014342:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014346:	edd3 7a01 	vldr	s15, [r3, #4]
 801434a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801434e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8014352:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014356:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 801435a:	f643 2370 	movw	r3, #14960	; 0x3a70
 801435e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014362:	edd3 7a02 	vldr	s15, [r3, #8]
 8014366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801436a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801436e:	f240 03b4 	movw	r3, #180	; 0xb4
 8014372:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014376:	edc3 7a04 	vstr	s15, [r3, #16]
            motor[5] = PIDMIX( -1.0f,  0.0f,  1.0f );      // Bottom Right CW
 801437a:	f240 0388 	movw	r3, #136	; 0x88
 801437e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014382:	ed93 7a03 	vldr	s14, [r3, #12]
 8014386:	f643 2370 	movw	r3, #14960	; 0x3a70
 801438a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801438e:	edd3 7a00 	vldr	s15, [r3]
 8014392:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014396:	f643 2370 	movw	r3, #14960	; 0x3a70
 801439a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801439e:	edd3 6a01 	vldr	s13, [r3, #4]
 80143a2:	eddf 7a3e 	vldr	s15, [pc, #248]	; 801449c <mixTable+0x2760>
 80143a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80143aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80143ae:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80143b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80143b6:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80143ba:	f643 2370 	movw	r3, #14960	; 0x3a70
 80143be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80143c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80143c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80143ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80143ce:	f240 03b4 	movw	r3, #180	; 0xb4
 80143d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80143d6:	edc3 7a05 	vstr	s15, [r3, #20]
            motor[6] = PIDMIX(  0.0f,  1.0f, -1.0f );      // Bottom Rear  CCW
 80143da:	f240 0388 	movw	r3, #136	; 0x88
 80143de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80143e2:	ed93 7a03 	vldr	s14, [r3, #12]
 80143e6:	f643 2370 	movw	r3, #14960	; 0x3a70
 80143ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80143ee:	edd3 6a00 	vldr	s13, [r3]
 80143f2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801449c <mixTable+0x2760>
 80143f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80143fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80143fe:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014402:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014406:	edd3 7a01 	vldr	s15, [r3, #4]
 801440a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801440e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8014412:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014416:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 801441a:	f643 2370 	movw	r3, #14960	; 0x3a70
 801441e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014422:	edd3 7a02 	vldr	s15, [r3, #8]
 8014426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801442a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801442e:	f240 03b4 	movw	r3, #180	; 0xb4
 8014432:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014436:	edc3 7a06 	vstr	s15, [r3, #24]
            motor[7] = PIDMIX(  1.0f,  0.0f,  1.0f );      // Bottom Left  CW
 801443a:	f240 0388 	movw	r3, #136	; 0x88
 801443e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014442:	ed93 7a03 	vldr	s14, [r3, #12]
 8014446:	f643 2370 	movw	r3, #14960	; 0x3a70
 801444a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801444e:	edd3 7a00 	vldr	s15, [r3]
 8014452:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014456:	f643 2370 	movw	r3, #14960	; 0x3a70
 801445a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801445e:	edd3 6a01 	vldr	s13, [r3, #4]
 8014462:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801449c <mixTable+0x2760>
 8014466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801446a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801446e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8014472:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014476:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 801447a:	f643 2370 	movw	r3, #14960	; 0x3a70
 801447e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014482:	edd3 7a02 	vldr	s15, [r3, #8]
 8014486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801448a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801448e:	f240 03b4 	movw	r3, #180	; 0xb4
 8014492:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014496:	edc3 7a07 	vstr	s15, [r3, #28]
            break;
 801449a:	e1e1      	b.n	8014860 <mixTable+0x2b24>
 801449c:	00000000 	.word	0x00000000

        ///////////////////////////////

        case MIXERTYPE_OCTOX8X:
            motor[0] = PIDMIX(  1.0f, -1.0f, -1.0f );      // Top Front Left     CW
 80144a0:	f240 0388 	movw	r3, #136	; 0x88
 80144a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80144a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80144ac:	f643 2370 	movw	r3, #14960	; 0x3a70
 80144b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80144b4:	edd3 7a00 	vldr	s15, [r3]
 80144b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80144bc:	f643 2370 	movw	r3, #14960	; 0x3a70
 80144c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80144c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80144c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80144cc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80144d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80144d4:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80144d8:	f643 2370 	movw	r3, #14960	; 0x3a70
 80144dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80144e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80144e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80144e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144ec:	f240 03b4 	movw	r3, #180	; 0xb4
 80144f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80144f4:	edc3 7a00 	vstr	s15, [r3]
            motor[1] = PIDMIX( -1.0f, -1.0f,  1.0f );      // Top Front Right    CCW
 80144f8:	f240 0388 	movw	r3, #136	; 0x88
 80144fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014500:	ed93 7a03 	vldr	s14, [r3, #12]
 8014504:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014508:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801450c:	edd3 7a00 	vldr	s15, [r3]
 8014510:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014514:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014518:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801451c:	edd3 7a01 	vldr	s15, [r3, #4]
 8014520:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014524:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8014528:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801452c:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8014530:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014534:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014538:	edd3 7a02 	vldr	s15, [r3, #8]
 801453c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014544:	f240 03b4 	movw	r3, #180	; 0xb4
 8014548:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801454c:	edc3 7a01 	vstr	s15, [r3, #4]
            motor[2] = PIDMIX( -1.0f,  1.0f, -1.0f );      // Top Rear Right     CW
 8014550:	f240 0388 	movw	r3, #136	; 0x88
 8014554:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014558:	ed93 7a03 	vldr	s14, [r3, #12]
 801455c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014560:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014564:	edd3 7a00 	vldr	s15, [r3]
 8014568:	ee37 7a67 	vsub.f32	s14, s14, s15
 801456c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014570:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014574:	edd3 7a01 	vldr	s15, [r3, #4]
 8014578:	ee37 7a27 	vadd.f32	s14, s14, s15
 801457c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8014580:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014584:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8014588:	f643 2370 	movw	r3, #14960	; 0x3a70
 801458c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014590:	edd3 7a02 	vldr	s15, [r3, #8]
 8014594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014598:	ee77 7a67 	vsub.f32	s15, s14, s15
 801459c:	f240 03b4 	movw	r3, #180	; 0xb4
 80145a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80145a4:	edc3 7a02 	vstr	s15, [r3, #8]
            motor[3] = PIDMIX(  1.0f,  1.0f,  1.0f );      // Top Rear Left      CCW
 80145a8:	f240 0388 	movw	r3, #136	; 0x88
 80145ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80145b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80145b4:	f643 2370 	movw	r3, #14960	; 0x3a70
 80145b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80145bc:	edd3 7a00 	vldr	s15, [r3]
 80145c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80145c4:	f643 2370 	movw	r3, #14960	; 0x3a70
 80145c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80145cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80145d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80145d4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80145d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80145dc:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80145e0:	f643 2370 	movw	r3, #14960	; 0x3a70
 80145e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80145e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80145ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80145f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80145f4:	f240 03b4 	movw	r3, #180	; 0xb4
 80145f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80145fc:	edc3 7a03 	vstr	s15, [r3, #12]
            motor[4] = PIDMIX(  1.0f, -1.0f, -1.0f );      // Bottom Front Left  CCW
 8014600:	f240 0388 	movw	r3, #136	; 0x88
 8014604:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014608:	ed93 7a03 	vldr	s14, [r3, #12]
 801460c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014610:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014614:	edd3 7a00 	vldr	s15, [r3]
 8014618:	ee37 7a27 	vadd.f32	s14, s14, s15
 801461c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014620:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014624:	edd3 7a01 	vldr	s15, [r3, #4]
 8014628:	ee37 7a67 	vsub.f32	s14, s14, s15
 801462c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8014630:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014634:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8014638:	f643 2370 	movw	r3, #14960	; 0x3a70
 801463c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014640:	edd3 7a02 	vldr	s15, [r3, #8]
 8014644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014648:	ee77 7a67 	vsub.f32	s15, s14, s15
 801464c:	f240 03b4 	movw	r3, #180	; 0xb4
 8014650:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014654:	edc3 7a04 	vstr	s15, [r3, #16]
            motor[5] = PIDMIX( -1.0f, -1.0f,  1.0f );      // Bottom Front Right CW
 8014658:	f240 0388 	movw	r3, #136	; 0x88
 801465c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014660:	ed93 7a03 	vldr	s14, [r3, #12]
 8014664:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014668:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801466c:	edd3 7a00 	vldr	s15, [r3]
 8014670:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014674:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014678:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801467c:	edd3 7a01 	vldr	s15, [r3, #4]
 8014680:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014684:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8014688:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801468c:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8014690:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014694:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014698:	edd3 7a02 	vldr	s15, [r3, #8]
 801469c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80146a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146a4:	f240 03b4 	movw	r3, #180	; 0xb4
 80146a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80146ac:	edc3 7a05 	vstr	s15, [r3, #20]
            motor[6] = PIDMIX( -1.0f,  1.0f, -1.0f );      // Bottom Rear Right  CCW
 80146b0:	f240 0388 	movw	r3, #136	; 0x88
 80146b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80146b8:	ed93 7a03 	vldr	s14, [r3, #12]
 80146bc:	f643 2370 	movw	r3, #14960	; 0x3a70
 80146c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80146c4:	edd3 7a00 	vldr	s15, [r3]
 80146c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80146cc:	f643 2370 	movw	r3, #14960	; 0x3a70
 80146d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80146d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80146d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80146dc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80146e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80146e4:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80146e8:	f643 2370 	movw	r3, #14960	; 0x3a70
 80146ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80146f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80146f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80146f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146fc:	f240 03b4 	movw	r3, #180	; 0xb4
 8014700:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014704:	edc3 7a06 	vstr	s15, [r3, #24]
            motor[7] = PIDMIX(  1.0f,  1.0f,  1.0f );      // Bottom Rear Left   CW
 8014708:	f240 0388 	movw	r3, #136	; 0x88
 801470c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014710:	ed93 7a03 	vldr	s14, [r3, #12]
 8014714:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014718:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801471c:	edd3 7a00 	vldr	s15, [r3]
 8014720:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014724:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014728:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801472c:	edd3 7a01 	vldr	s15, [r3, #4]
 8014730:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014734:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8014738:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801473c:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8014740:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014744:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014748:	edd3 7a02 	vldr	s15, [r3, #8]
 801474c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014754:	f240 03b4 	movw	r3, #180	; 0xb4
 8014758:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801475c:	edc3 7a07 	vstr	s15, [r3, #28]
            break;
 8014760:	e07e      	b.n	8014860 <mixTable+0x2b24>

        ///////////////////////////////

        case MIXERTYPE_FREEMIX:
        	for ( i = 0; i < numberMotor; i++ )
 8014762:	f04f 0300 	mov.w	r3, #0
 8014766:	f88d 3005 	strb.w	r3, [sp, #5]
 801476a:	e06f      	b.n	801484c <mixTable+0x2b10>
        	{
        		motor[i] = PIDMIX ( eepromConfig.freeMix[i][ROLL],
 801476c:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8014770:	f240 0388 	movw	r3, #136	; 0x88
 8014774:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014778:	ed93 7a03 	vldr	s14, [r3, #12]
 801477c:	f643 2370 	movw	r3, #14960	; 0x3a70
 8014780:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014784:	edd3 6a00 	vldr	s13, [r3]
 8014788:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801478c:	f643 32fc 	movw	r2, #15356	; 0x3bfc
 8014790:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8014794:	460b      	mov	r3, r1
 8014796:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801479a:	185b      	adds	r3, r3, r1
 801479c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80147a0:	18d3      	adds	r3, r2, r3
 80147a2:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 80147a6:	edd3 7a00 	vldr	s15, [r3]
 80147aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80147ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80147b2:	f643 2370 	movw	r3, #14960	; 0x3a70
 80147b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80147ba:	edd3 6a01 	vldr	s13, [r3, #4]
 80147be:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80147c2:	f643 32fc 	movw	r2, #15356	; 0x3bfc
 80147c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80147ca:	460b      	mov	r3, r1
 80147cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80147d0:	185b      	adds	r3, r3, r1
 80147d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80147d6:	18d3      	adds	r3, r2, r3
 80147d8:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80147dc:	edd3 7a00 	vldr	s15, [r3]
 80147e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80147e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80147e8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80147ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80147f0:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80147f4:	f643 2370 	movw	r3, #14960	; 0x3a70
 80147f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80147fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8014800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014804:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8014808:	f643 32fc 	movw	r2, #15356	; 0x3bfc
 801480c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8014810:	460b      	mov	r3, r1
 8014812:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014816:	185b      	adds	r3, r3, r1
 8014818:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801481c:	18d3      	adds	r3, r2, r3
 801481e:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8014822:	edd3 6a00 	vldr	s13, [r3]
 8014826:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801482a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801482e:	f240 03b4 	movw	r3, #180	; 0xb4
 8014832:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014836:	ea4f 0280 	mov.w	r2, r0, lsl #2
 801483a:	189b      	adds	r3, r3, r2
 801483c:	edc3 7a00 	vstr	s15, [r3]
            break;

        ///////////////////////////////

        case MIXERTYPE_FREEMIX:
        	for ( i = 0; i < numberMotor; i++ )
 8014840:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014844:	f103 0301 	add.w	r3, r3, #1
 8014848:	f88d 3005 	strb.w	r3, [sp, #5]
 801484c:	f643 7348 	movw	r3, #16200	; 0x3f48
 8014850:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014854:	781b      	ldrb	r3, [r3, #0]
 8014856:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801485a:	429a      	cmp	r2, r3
 801485c:	d386      	bcc.n	801476c <mixTable+0x2a30>
        		motor[i] = PIDMIX ( eepromConfig.freeMix[i][ROLL],
        				            eepromConfig.freeMix[i][PITCH],
        				            eepromConfig.freeMix[i][YAW] );
        	}

        	break;
 801485e:	bf00      	nop

    ///////////////////////////////////

    // this is a way to still have good gyro corrections if any motor reaches its max.

    maxMotor = motor[0];
 8014860:	f240 03b4 	movw	r3, #180	; 0xb4
 8014864:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014868:	edd3 7a00 	vldr	s15, [r3]
 801486c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014870:	ee17 3a90 	vmov	r3, s15
 8014874:	f8ad 3006 	strh.w	r3, [sp, #6]

    for (i = 1; i < numberMotor; i++)
 8014878:	f04f 0301 	mov.w	r3, #1
 801487c:	f88d 3005 	strb.w	r3, [sp, #5]
 8014880:	e031      	b.n	80148e6 <mixTable+0x2baa>
        if (motor[i] > maxMotor)
 8014882:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014886:	f240 03b4 	movw	r3, #180	; 0xb4
 801488a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801488e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8014892:	189b      	adds	r3, r3, r2
 8014894:	ed93 7a00 	vldr	s14, [r3]
 8014898:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801489c:	ee06 3a90 	vmov	s13, r3
 80148a0:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 80148a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80148a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148ac:	bfd4      	ite	le
 80148ae:	2300      	movle	r3, #0
 80148b0:	2301      	movgt	r3, #1
 80148b2:	b2db      	uxtb	r3, r3
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d010      	beq.n	80148da <mixTable+0x2b9e>
            maxMotor = motor[i];
 80148b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80148bc:	f240 03b4 	movw	r3, #180	; 0xb4
 80148c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80148c4:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80148c8:	189b      	adds	r3, r3, r2
 80148ca:	edd3 7a00 	vldr	s15, [r3]
 80148ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80148d2:	ee17 3a90 	vmov	r3, s15
 80148d6:	f8ad 3006 	strh.w	r3, [sp, #6]

    // this is a way to still have good gyro corrections if any motor reaches its max.

    maxMotor = motor[0];

    for (i = 1; i < numberMotor; i++)
 80148da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80148de:	f103 0301 	add.w	r3, r3, #1
 80148e2:	f88d 3005 	strb.w	r3, [sp, #5]
 80148e6:	f643 7348 	movw	r3, #16200	; 0x3f48
 80148ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80148ee:	781b      	ldrb	r3, [r3, #0]
 80148f0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80148f4:	429a      	cmp	r2, r3
 80148f6:	d3c4      	bcc.n	8014882 <mixTable+0x2b46>
        if (motor[i] > maxMotor)
            maxMotor = motor[i];

    for (i = 0; i < numberMotor; i++)
 80148f8:	f04f 0300 	mov.w	r3, #0
 80148fc:	f88d 3005 	strb.w	r3, [sp, #5]
 8014900:	e09f      	b.n	8014a42 <mixTable+0x2d06>
    {
        if (maxMotor > eepromConfig.maxThrottle)
 8014902:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8014906:	ee07 3a90 	vmov	s15, r3
 801490a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801490e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8014912:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014916:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 801491a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801491e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014922:	bfd4      	ite	le
 8014924:	2300      	movle	r3, #0
 8014926:	2301      	movgt	r3, #1
 8014928:	b2db      	uxtb	r3, r3
 801492a:	2b00      	cmp	r3, #0
 801492c:	d025      	beq.n	801497a <mixTable+0x2c3e>
            motor[i] -= maxMotor - eepromConfig.maxThrottle;
 801492e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014932:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8014936:	f240 03b4 	movw	r3, #180	; 0xb4
 801493a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801493e:	ea4f 0181 	mov.w	r1, r1, lsl #2
 8014942:	185b      	adds	r3, r3, r1
 8014944:	ed93 7a00 	vldr	s14, [r3]
 8014948:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801494c:	ee07 3a90 	vmov	s15, r3
 8014950:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014954:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8014958:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801495c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8014960:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8014964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014968:	f240 03b4 	movw	r3, #180	; 0xb4
 801496c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014970:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8014974:	189b      	adds	r3, r3, r2
 8014976:	edc3 7a00 	vstr	s15, [r3]

        motor[i] = constrain(motor[i], eepromConfig.minThrottle, eepromConfig.maxThrottle);
 801497a:	f89d 4005 	ldrb.w	r4, [sp, #5]
 801497e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014982:	f240 03b4 	movw	r3, #180	; 0xb4
 8014986:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801498a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801498e:	189b      	adds	r3, r3, r2
 8014990:	6819      	ldr	r1, [r3, #0]
 8014992:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8014996:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801499a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 801499e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80149a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80149a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80149aa:	4608      	mov	r0, r1
 80149ac:	4611      	mov	r1, r2
 80149ae:	461a      	mov	r2, r3
 80149b0:	f002 f8ae 	bl	8016b10 <constrain>
 80149b4:	4602      	mov	r2, r0
 80149b6:	f240 03b4 	movw	r3, #180	; 0xb4
 80149ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80149be:	ea4f 0184 	mov.w	r1, r4, lsl #2
 80149c2:	185b      	adds	r3, r3, r1
 80149c4:	601a      	str	r2, [r3, #0]

        if ((rxCommand[THROTTLE]) < eepromConfig.minCheck)
 80149c6:	f240 0388 	movw	r3, #136	; 0x88
 80149ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80149ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80149d2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80149d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80149da:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80149de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80149e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149e6:	bf54      	ite	pl
 80149e8:	2300      	movpl	r3, #0
 80149ea:	2301      	movmi	r3, #1
 80149ec:	b2db      	uxtb	r3, r3
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d00f      	beq.n	8014a12 <mixTable+0x2cd6>
        {
            motor[i] = eepromConfig.minThrottle;
 80149f2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80149f6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80149fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80149fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8014a02:	f240 03b4 	movw	r3, #180	; 0xb4
 8014a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014a0a:	ea4f 0181 	mov.w	r1, r1, lsl #2
 8014a0e:	185b      	adds	r3, r3, r1
 8014a10:	601a      	str	r2, [r3, #0]
        }

        if ( armed == false )
 8014a12:	f240 73fa 	movw	r3, #2042	; 0x7fa
 8014a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014a1a:	781b      	ldrb	r3, [r3, #0]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d10a      	bne.n	8014a36 <mixTable+0x2cfa>
            motor[i] = (float)MINCOMMAND;
 8014a20:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014a24:	f240 03b4 	movw	r3, #180	; 0xb4
 8014a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014a2c:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8014a30:	189b      	adds	r3, r3, r2
 8014a32:	4a0a      	ldr	r2, [pc, #40]	; (8014a5c <mixTable+0x2d20>)
 8014a34:	601a      	str	r2, [r3, #0]

    for (i = 1; i < numberMotor; i++)
        if (motor[i] > maxMotor)
            maxMotor = motor[i];

    for (i = 0; i < numberMotor; i++)
 8014a36:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014a3a:	f103 0301 	add.w	r3, r3, #1
 8014a3e:	f88d 3005 	strb.w	r3, [sp, #5]
 8014a42:	f643 7348 	movw	r3, #16200	; 0x3f48
 8014a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014a4a:	781b      	ldrb	r3, [r3, #0]
 8014a4c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014a50:	429a      	cmp	r2, r3
 8014a52:	f4ff af56 	bcc.w	8014902 <mixTable+0x2bc6>
        }

        if ( armed == false )
            motor[i] = (float)MINCOMMAND;
    }
}
 8014a56:	b003      	add	sp, #12
 8014a58:	bd30      	pop	{r4, r5, pc}
 8014a5a:	bf00      	nop
 8014a5c:	44fa0000 	.word	0x44fa0000

08014a60 <initPID>:
float rc;

///////////////////////////////////////////////////////////////////////////////

void initPID(void)
{
 8014a60:	b082      	sub	sp, #8
    uint8_t index;

    rc = 1.0f / ( TWO_PI * F_CUT );
 8014a62:	f643 734c 	movw	r3, #16204	; 0x3f4c
 8014a66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014a6a:	4a2b      	ldr	r2, [pc, #172]	; (8014b18 <initPID+0xb8>)
 8014a6c:	601a      	str	r2, [r3, #0]

    for (index = 0; index < NUMBER_OF_PIDS; index++)
 8014a6e:	f04f 0300 	mov.w	r3, #0
 8014a72:	f88d 3007 	strb.w	r3, [sp, #7]
 8014a76:	e049      	b.n	8014b0c <initPID+0xac>
    {
    	eepromConfig.PID[index].iTerm          = 0.0f;
 8014a78:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014a7c:	f643 32fc 	movw	r2, #15356	; 0x3bfc
 8014a80:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8014a84:	460b      	mov	r3, r1
 8014a86:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8014a8a:	185b      	adds	r3, r3, r1
 8014a8c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8014a90:	18d3      	adds	r3, r2, r3
 8014a92:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 8014a96:	4a21      	ldr	r2, [pc, #132]	; (8014b1c <initPID+0xbc>)
 8014a98:	601a      	str	r2, [r3, #0]
    	eepromConfig.PID[index].lastDcalcValue = 0.0f;
 8014a9a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014a9e:	f643 32fc 	movw	r2, #15356	; 0x3bfc
 8014aa2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8014aa6:	460b      	mov	r3, r1
 8014aa8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8014aac:	185b      	adds	r3, r3, r1
 8014aae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8014ab2:	18d3      	adds	r3, r2, r3
 8014ab4:	f103 03b0 	add.w	r3, r3, #176	; 0xb0
 8014ab8:	4a18      	ldr	r2, [pc, #96]	; (8014b1c <initPID+0xbc>)
 8014aba:	601a      	str	r2, [r3, #0]
    	eepromConfig.PID[index].lastDterm      = 0.0f;
 8014abc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014ac0:	f643 32fc 	movw	r2, #15356	; 0x3bfc
 8014ac4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8014ac8:	460b      	mov	r3, r1
 8014aca:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8014ace:	185b      	adds	r3, r3, r1
 8014ad0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8014ad4:	18d3      	adds	r3, r2, r3
 8014ad6:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 8014ada:	4a10      	ldr	r2, [pc, #64]	; (8014b1c <initPID+0xbc>)
 8014adc:	601a      	str	r2, [r3, #0]
    	eepromConfig.PID[index].lastLastDterm  = 0.0f;
 8014ade:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014ae2:	f643 32fc 	movw	r2, #15356	; 0x3bfc
 8014ae6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8014aea:	460b      	mov	r3, r1
 8014aec:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8014af0:	185b      	adds	r3, r3, r1
 8014af2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8014af6:	18d3      	adds	r3, r2, r3
 8014af8:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8014afc:	4a07      	ldr	r2, [pc, #28]	; (8014b1c <initPID+0xbc>)
 8014afe:	601a      	str	r2, [r3, #0]
{
    uint8_t index;

    rc = 1.0f / ( TWO_PI * F_CUT );

    for (index = 0; index < NUMBER_OF_PIDS; index++)
 8014b00:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014b04:	f103 0301 	add.w	r3, r3, #1
 8014b08:	f88d 3007 	strb.w	r3, [sp, #7]
 8014b0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014b10:	2b0b      	cmp	r3, #11
 8014b12:	d9b1      	bls.n	8014a78 <initPID+0x18>
    	eepromConfig.PID[index].iTerm          = 0.0f;
    	eepromConfig.PID[index].lastDcalcValue = 0.0f;
    	eepromConfig.PID[index].lastDterm      = 0.0f;
    	eepromConfig.PID[index].lastLastDterm  = 0.0f;
	}
}
 8014b14:	b002      	add	sp, #8
 8014b16:	4770      	bx	lr
 8014b18:	3c026136 	.word	0x3c026136
 8014b1c:	00000000 	.word	0x00000000

08014b20 <updatePID>:

///////////////////////////////////////////////////////////////////////////////

float updatePID(float command, float state, float deltaT, uint8_t iHold, struct PIDdata *PIDparameters)
{
 8014b20:	b500      	push	{lr}
 8014b22:	b089      	sub	sp, #36	; 0x24
 8014b24:	9003      	str	r0, [sp, #12]
 8014b26:	9102      	str	r1, [sp, #8]
 8014b28:	9201      	str	r2, [sp, #4]
 8014b2a:	f88d 3003 	strb.w	r3, [sp, #3]
    float dTermFiltered;
    float dAverage;

    ///////////////////////////////////

    error = command - state;
 8014b2e:	ed9d 7a03 	vldr	s14, [sp, #12]
 8014b32:	eddd 7a02 	vldr	s15, [sp, #8]
 8014b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b3a:	edcd 7a07 	vstr	s15, [sp, #28]

    if (PIDparameters->type == ANGULAR)
 8014b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8014b44:	2b01      	cmp	r3, #1
 8014b46:	d103      	bne.n	8014b50 <updatePID+0x30>
        error = standardRadianFormat(error);
 8014b48:	9807      	ldr	r0, [sp, #28]
 8014b4a:	f002 ffe3 	bl	8017b14 <standardRadianFormat>
 8014b4e:	9007      	str	r0, [sp, #28]

    ///////////////////////////////////

    if ( iHold == false )
 8014b50:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d11f      	bne.n	8014b98 <updatePID+0x78>
    {
    	PIDparameters->iTerm += error * deltaT;
 8014b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b5a:	ed93 7a04 	vldr	s14, [r3, #16]
 8014b5e:	eddd 6a07 	vldr	s13, [sp, #28]
 8014b62:	eddd 7a01 	vldr	s15, [sp, #4]
 8014b66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b70:	edc3 7a04 	vstr	s15, [r3, #16]
    	PIDparameters->iTerm = constrain(PIDparameters->iTerm, -PIDparameters->windupGuard, PIDparameters->windupGuard);
 8014b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b76:	691a      	ldr	r2, [r3, #16]
 8014b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b7a:	edd3 7a05 	vldr	s15, [r3, #20]
 8014b7e:	eef1 7a67 	vneg.f32	s15, s15
 8014b82:	ee17 1a90 	vmov	r1, s15
 8014b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b88:	695b      	ldr	r3, [r3, #20]
 8014b8a:	4610      	mov	r0, r2
 8014b8c:	461a      	mov	r2, r3
 8014b8e:	f001 ffbf 	bl	8016b10 <constrain>
 8014b92:	4602      	mov	r2, r0
 8014b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b96:	611a      	str	r2, [r3, #16]
    }

    ///////////////////////////////////

    if (PIDparameters->dErrorCalc == D_ERROR)  // Calculate D term from error change
 8014b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014b9e:	2b01      	cmp	r3, #1
 8014ba0:	d110      	bne.n	8014bc4 <updatePID+0xa4>
    {
		dTerm = (error - PIDparameters->lastDcalcValue) / deltaT;
 8014ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ba4:	edd3 7a06 	vldr	s15, [r3, #24]
 8014ba8:	ed9d 7a07 	vldr	s14, [sp, #28]
 8014bac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014bb0:	eddd 7a01 	vldr	s15, [sp, #4]
 8014bb4:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8014bb8:	edcd 7a06 	vstr	s15, [sp, #24]
        PIDparameters->lastDcalcValue = error;
 8014bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bbe:	9a07      	ldr	r2, [sp, #28]
 8014bc0:	619a      	str	r2, [r3, #24]
 8014bc2:	e00f      	b.n	8014be4 <updatePID+0xc4>
	}
	else                                       // Calculate D term from state change
	{
		dTerm = (PIDparameters->lastDcalcValue - state) / deltaT;
 8014bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bc6:	ed93 7a06 	vldr	s14, [r3, #24]
 8014bca:	eddd 7a02 	vldr	s15, [sp, #8]
 8014bce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014bd2:	eddd 7a01 	vldr	s15, [sp, #4]
 8014bd6:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8014bda:	edcd 7a06 	vstr	s15, [sp, #24]
		PIDparameters->lastDcalcValue = state;
 8014bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014be0:	9a02      	ldr	r2, [sp, #8]
 8014be2:	619a      	str	r2, [r3, #24]
	}

    ///////////////////////////////////

    dTermFiltered = PIDparameters->lastDterm + deltaT / (rc + deltaT) * (dTerm - PIDparameters->lastDterm);
 8014be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014be6:	ed93 7a07 	vldr	s14, [r3, #28]
 8014bea:	f643 734c 	movw	r3, #16204	; 0x3f4c
 8014bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014bf2:	edd3 6a00 	vldr	s13, [r3]
 8014bf6:	eddd 7a01 	vldr	s15, [sp, #4]
 8014bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014bfe:	eddd 6a01 	vldr	s13, [sp, #4]
 8014c02:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 8014c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c08:	edd3 6a07 	vldr	s13, [r3, #28]
 8014c0c:	ed9d 6a06 	vldr	s12, [sp, #24]
 8014c10:	ee76 6a66 	vsub.f32	s13, s12, s13
 8014c14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c1c:	edcd 7a05 	vstr	s15, [sp, #20]

    dAverage = (dTermFiltered + PIDparameters->lastDterm + PIDparameters->lastLastDterm) * 0.333333f;
 8014c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c22:	ed93 7a07 	vldr	s14, [r3, #28]
 8014c26:	eddd 7a05 	vldr	s15, [sp, #20]
 8014c2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c30:	edd3 7a08 	vldr	s15, [r3, #32]
 8014c34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014c38:	eddf 7a36 	vldr	s15, [pc, #216]	; 8014d14 <updatePID+0x1f4>
 8014c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c40:	edcd 7a04 	vstr	s15, [sp, #16]

    PIDparameters->lastLastDterm = PIDparameters->lastDterm;
 8014c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c46:	69da      	ldr	r2, [r3, #28]
 8014c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c4a:	621a      	str	r2, [r3, #32]
    PIDparameters->lastDterm = dTermFiltered;
 8014c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c4e:	9a05      	ldr	r2, [sp, #20]
 8014c50:	61da      	str	r2, [r3, #28]

    ///////////////////////////////////

    if (PIDparameters->type == ANGULAR)
 8014c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8014c58:	2b01      	cmp	r3, #1
 8014c5a:	d12e      	bne.n	8014cba <updatePID+0x19a>
        return(standardRadianFormat(PIDparameters->P * PIDparameters->B * command +
 8014c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c5e:	ed93 7a01 	vldr	s14, [r3, #4]
 8014c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c64:	edd3 7a00 	vldr	s15, [r3]
 8014c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c6c:	ed9d 7a03 	vldr	s14, [sp, #12]
 8014c70:	ee27 7a87 	vmul.f32	s14, s15, s14
                                    PIDparameters->I * PIDparameters->iTerm       +
 8014c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c76:	edd3 6a02 	vldr	s13, [r3, #8]
 8014c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8014c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
    PIDparameters->lastDterm = dTermFiltered;

    ///////////////////////////////////

    if (PIDparameters->type == ANGULAR)
        return(standardRadianFormat(PIDparameters->P * PIDparameters->B * command +
 8014c84:	ee37 7a27 	vadd.f32	s14, s14, s15
                                    PIDparameters->I * PIDparameters->iTerm       +
                                    PIDparameters->D * dAverage                   -
 8014c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c8a:	edd3 6a03 	vldr	s13, [r3, #12]
 8014c8e:	eddd 7a04 	vldr	s15, [sp, #16]
 8014c92:	ee66 7aa7 	vmul.f32	s15, s13, s15

    ///////////////////////////////////

    if (PIDparameters->type == ANGULAR)
        return(standardRadianFormat(PIDparameters->P * PIDparameters->B * command +
                                    PIDparameters->I * PIDparameters->iTerm       +
 8014c96:	ee37 7a27 	vadd.f32	s14, s14, s15
                                    PIDparameters->D * dAverage                   -
                                    PIDparameters->P * state));
 8014c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c9c:	edd3 6a01 	vldr	s13, [r3, #4]
 8014ca0:	eddd 7a02 	vldr	s15, [sp, #8]
 8014ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    PIDparameters->lastDterm = dTermFiltered;

    ///////////////////////////////////

    if (PIDparameters->type == ANGULAR)
        return(standardRadianFormat(PIDparameters->P * PIDparameters->B * command +
 8014ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014cac:	ee17 0a90 	vmov	r0, s15
 8014cb0:	f002 ff30 	bl	8017b14 <standardRadianFormat>
 8014cb4:	ee07 0a90 	vmov	s15, r0
 8014cb8:	e027      	b.n	8014d0a <updatePID+0x1ea>
                                    PIDparameters->I * PIDparameters->iTerm       +
                                    PIDparameters->D * dAverage                   -
                                    PIDparameters->P * state));
    else
        return(PIDparameters->P * PIDparameters->B * command +
 8014cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cbc:	ed93 7a01 	vldr	s14, [r3, #4]
 8014cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cc2:	edd3 7a00 	vldr	s15, [r3]
 8014cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014cca:	ed9d 7a03 	vldr	s14, [sp, #12]
 8014cce:	ee27 7a87 	vmul.f32	s14, s15, s14
               PIDparameters->I * PIDparameters->iTerm       +
 8014cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cd4:	edd3 6a02 	vldr	s13, [r3, #8]
 8014cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cda:	edd3 7a04 	vldr	s15, [r3, #16]
 8014cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
        return(standardRadianFormat(PIDparameters->P * PIDparameters->B * command +
                                    PIDparameters->I * PIDparameters->iTerm       +
                                    PIDparameters->D * dAverage                   -
                                    PIDparameters->P * state));
    else
        return(PIDparameters->P * PIDparameters->B * command +
 8014ce2:	ee37 7a27 	vadd.f32	s14, s14, s15
               PIDparameters->I * PIDparameters->iTerm       +
               PIDparameters->D * dAverage                   -
 8014ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ce8:	edd3 6a03 	vldr	s13, [r3, #12]
 8014cec:	eddd 7a04 	vldr	s15, [sp, #16]
 8014cf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
                                    PIDparameters->I * PIDparameters->iTerm       +
                                    PIDparameters->D * dAverage                   -
                                    PIDparameters->P * state));
    else
        return(PIDparameters->P * PIDparameters->B * command +
               PIDparameters->I * PIDparameters->iTerm       +
 8014cf4:	ee37 7a27 	vadd.f32	s14, s14, s15
               PIDparameters->D * dAverage                   -
               PIDparameters->P * state);
 8014cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cfa:	edd3 6a01 	vldr	s13, [r3, #4]
 8014cfe:	eddd 7a02 	vldr	s15, [sp, #8]
 8014d02:	ee66 7aa7 	vmul.f32	s15, s13, s15
        return(standardRadianFormat(PIDparameters->P * PIDparameters->B * command +
                                    PIDparameters->I * PIDparameters->iTerm       +
                                    PIDparameters->D * dAverage                   -
                                    PIDparameters->P * state));
    else
        return(PIDparameters->P * PIDparameters->B * command +
 8014d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d0a:	ee17 3a90 	vmov	r3, s15
               PIDparameters->I * PIDparameters->iTerm       +
               PIDparameters->D * dAverage                   -
               PIDparameters->P * state);
}
 8014d0e:	4618      	mov	r0, r3
 8014d10:	b009      	add	sp, #36	; 0x24
 8014d12:	bd00      	pop	{pc}
 8014d14:	3eaaaa9f 	.word	0x3eaaaa9f

08014d18 <setPIDintegralError>:

///////////////////////////////////////////////////////////////////////////////

void setPIDintegralError(uint8_t IDPid, float value)
{
 8014d18:	b082      	sub	sp, #8
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	9100      	str	r1, [sp, #0]
 8014d1e:	f88d 3007 	strb.w	r3, [sp, #7]
	eepromConfig.PID[IDPid].iTerm = value;
 8014d22:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014d26:	f643 32fc 	movw	r2, #15356	; 0x3bfc
 8014d2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8014d2e:	460b      	mov	r3, r1
 8014d30:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8014d34:	185b      	adds	r3, r3, r1
 8014d36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8014d3a:	18d3      	adds	r3, r2, r3
 8014d3c:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 8014d40:	9a00      	ldr	r2, [sp, #0]
 8014d42:	601a      	str	r2, [r3, #0]
}
 8014d44:	b002      	add	sp, #8
 8014d46:	4770      	bx	lr

08014d48 <zeroPIDintegralError>:

///////////////////////////////////////////////////////////////////////////////

void zeroPIDintegralError(void)
{
 8014d48:	b500      	push	{lr}
 8014d4a:	b083      	sub	sp, #12
    uint8_t index;

    for (index = 0; index < NUMBER_OF_PIDS; index++)
 8014d4c:	f04f 0300 	mov.w	r3, #0
 8014d50:	f88d 3007 	strb.w	r3, [sp, #7]
 8014d54:	e00b      	b.n	8014d6e <zeroPIDintegralError+0x26>
         setPIDintegralError(index, 0.0f);
 8014d56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	4907      	ldr	r1, [pc, #28]	; (8014d7c <zeroPIDintegralError+0x34>)
 8014d5e:	f7ff ffdb 	bl	8014d18 <setPIDintegralError>

void zeroPIDintegralError(void)
{
    uint8_t index;

    for (index = 0; index < NUMBER_OF_PIDS; index++)
 8014d62:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014d66:	f103 0301 	add.w	r3, r3, #1
 8014d6a:	f88d 3007 	strb.w	r3, [sp, #7]
 8014d6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014d72:	2b0b      	cmp	r3, #11
 8014d74:	d9ef      	bls.n	8014d56 <zeroPIDintegralError+0xe>
         setPIDintegralError(index, 0.0f);
}
 8014d76:	b003      	add	sp, #12
 8014d78:	bd00      	pop	{pc}
 8014d7a:	bf00      	nop
 8014d7c:	00000000 	.word	0x00000000

08014d80 <setPIDstates>:

///////////////////////////////////////////////////////////////////////////////

void setPIDstates(uint8_t IDPid, float value)
{
 8014d80:	b082      	sub	sp, #8
 8014d82:	4603      	mov	r3, r0
 8014d84:	9100      	str	r1, [sp, #0]
 8014d86:	f88d 3007 	strb.w	r3, [sp, #7]
    eepromConfig.PID[IDPid].lastDcalcValue = value;
 8014d8a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014d8e:	f643 32fc 	movw	r2, #15356	; 0x3bfc
 8014d92:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8014d96:	460b      	mov	r3, r1
 8014d98:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8014d9c:	185b      	adds	r3, r3, r1
 8014d9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8014da2:	18d3      	adds	r3, r2, r3
 8014da4:	f103 03b0 	add.w	r3, r3, #176	; 0xb0
 8014da8:	9a00      	ldr	r2, [sp, #0]
 8014daa:	601a      	str	r2, [r3, #0]
    eepromConfig.PID[IDPid].lastDterm      = value;
 8014dac:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014db0:	f643 32fc 	movw	r2, #15356	; 0x3bfc
 8014db4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8014db8:	460b      	mov	r3, r1
 8014dba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8014dbe:	185b      	adds	r3, r3, r1
 8014dc0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8014dc4:	18d3      	adds	r3, r2, r3
 8014dc6:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 8014dca:	9a00      	ldr	r2, [sp, #0]
 8014dcc:	601a      	str	r2, [r3, #0]
    eepromConfig.PID[IDPid].lastLastDterm  = value;
 8014dce:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014dd2:	f643 32fc 	movw	r2, #15356	; 0x3bfc
 8014dd6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8014dda:	460b      	mov	r3, r1
 8014ddc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8014de0:	185b      	adds	r3, r3, r1
 8014de2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8014de6:	18d3      	adds	r3, r2, r3
 8014de8:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8014dec:	9a00      	ldr	r2, [sp, #0]
 8014dee:	601a      	str	r2, [r3, #0]
}
 8014df0:	b002      	add	sp, #8
 8014df2:	4770      	bx	lr

08014df4 <zeroPIDstates>:

///////////////////////////////////////////////////////////////////////////////

void zeroPIDstates(void)
{
 8014df4:	b500      	push	{lr}
 8014df6:	b083      	sub	sp, #12
    uint8_t index;

    for (index = 0; index < NUMBER_OF_PIDS; index++)
 8014df8:	f04f 0300 	mov.w	r3, #0
 8014dfc:	f88d 3007 	strb.w	r3, [sp, #7]
 8014e00:	e00b      	b.n	8014e1a <zeroPIDstates+0x26>
         setPIDstates(index, 0.0f);
 8014e02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014e06:	4618      	mov	r0, r3
 8014e08:	4907      	ldr	r1, [pc, #28]	; (8014e28 <zeroPIDstates+0x34>)
 8014e0a:	f7ff ffb9 	bl	8014d80 <setPIDstates>

void zeroPIDstates(void)
{
    uint8_t index;

    for (index = 0; index < NUMBER_OF_PIDS; index++)
 8014e0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014e12:	f103 0301 	add.w	r3, r3, #1
 8014e16:	f88d 3007 	strb.w	r3, [sp, #7]
 8014e1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014e1e:	2b0b      	cmp	r3, #11
 8014e20:	d9ef      	bls.n	8014e02 <zeroPIDstates+0xe>
         setPIDstates(index, 0.0f);
}
 8014e22:	b003      	add	sp, #12
 8014e24:	bd00      	pop	{pc}
 8014e26:	bf00      	nop
 8014e28:	00000000 	.word	0x00000000

08014e2c <readFloatRF>:
///////////////////////////////////////////////////////////////////////////////
// Read Float from RF Comm
///////////////////////////////////////////////////////////////////////////////

float readFloatRF(void)
{
 8014e2c:	b510      	push	{r4, lr}
 8014e2e:	b084      	sub	sp, #16
    uint8_t index    = 0;
 8014e30:	f04f 0300 	mov.w	r3, #0
 8014e34:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t timeout  = 0;
 8014e38:	f04f 0300 	mov.w	r3, #0
 8014e3c:	f88d 300e 	strb.w	r3, [sp, #14]
    char    data[13] = "";
 8014e40:	f04f 0300 	mov.w	r3, #0
 8014e44:	9300      	str	r3, [sp, #0]
 8014e46:	ab01      	add	r3, sp, #4
 8014e48:	f04f 0200 	mov.w	r2, #0
 8014e4c:	601a      	str	r2, [r3, #0]
 8014e4e:	f103 0304 	add.w	r3, r3, #4
 8014e52:	f04f 0200 	mov.w	r2, #0
 8014e56:	601a      	str	r2, [r3, #0]
 8014e58:	f103 0304 	add.w	r3, r3, #4
 8014e5c:	f04f 0200 	mov.w	r2, #0
 8014e60:	701a      	strb	r2, [r3, #0]
 8014e62:	f103 0301 	add.w	r3, r3, #1

    do
    {
        if (telemetryAvailable() == false)
 8014e66:	f7f1 fb09 	bl	800647c <telemetryAvailable>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d10a      	bne.n	8014e86 <readFloatRF+0x5a>
        {
            delay(10);
 8014e70:	f04f 000a 	mov.w	r0, #10
 8014e74:	f7f1 f93e 	bl	80060f4 <delay>
            timeout++;
 8014e78:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8014e7c:	f103 0301 	add.w	r3, r3, #1
 8014e80:	f88d 300e 	strb.w	r3, [sp, #14]
 8014e84:	e013      	b.n	8014eae <readFloatRF+0x82>
        }
        else
        {
            data[index] = telemetryRead();
 8014e86:	f89d 400f 	ldrb.w	r4, [sp, #15]
 8014e8a:	f7f1 fb0d 	bl	80064a8 <telemetryRead>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	461a      	mov	r2, r3
 8014e92:	a904      	add	r1, sp, #16
 8014e94:	190b      	adds	r3, r1, r4
 8014e96:	f803 2c10 	strb.w	r2, [r3, #-16]
            timeout = 0;
 8014e9a:	f04f 0300 	mov.w	r3, #0
 8014e9e:	f88d 300e 	strb.w	r3, [sp, #14]
            index++;
 8014ea2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8014ea6:	f103 0301 	add.w	r3, r3, #1
 8014eaa:	f88d 300f 	strb.w	r3, [sp, #15]
        }
    }
    while ((index == 0 || data[index-1] != ';') && (timeout < 5) && (index < sizeof(data)-1));
 8014eae:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d009      	beq.n	8014eca <readFloatRF+0x9e>
 8014eb6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8014eba:	f103 33ff 	add.w	r3, r3, #4294967295
 8014ebe:	aa04      	add	r2, sp, #16
 8014ec0:	18d3      	adds	r3, r2, r3
 8014ec2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8014ec6:	2b3b      	cmp	r3, #59	; 0x3b
 8014ec8:	d007      	beq.n	8014eda <readFloatRF+0xae>
 8014eca:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8014ece:	2b04      	cmp	r3, #4
 8014ed0:	d803      	bhi.n	8014eda <readFloatRF+0xae>
 8014ed2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8014ed6:	2b0b      	cmp	r3, #11
 8014ed8:	d9c5      	bls.n	8014e66 <readFloatRF+0x3a>

    data[index] = '\0';
 8014eda:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8014ede:	a904      	add	r1, sp, #16
 8014ee0:	18cb      	adds	r3, r1, r3
 8014ee2:	f04f 0200 	mov.w	r2, #0
 8014ee6:	f803 2c10 	strb.w	r2, [r3, #-16]

    return stringToFloat(data);
 8014eea:	466b      	mov	r3, sp
 8014eec:	4618      	mov	r0, r3
 8014eee:	f002 fe4b 	bl	8017b88 <stringToFloat>
 8014ef2:	4603      	mov	r3, r0
}
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	b004      	add	sp, #16
 8014ef8:	bd10      	pop	{r4, pc}
 8014efa:	bf00      	nop

08014efc <readRFPID>:
///////////////////////////////////////////////////////////////////////////////
// Read PID Values from RF Comm
///////////////////////////////////////////////////////////////////////////////

void readRFPID(unsigned char PIDid)
{
 8014efc:	b500      	push	{lr}
 8014efe:	b085      	sub	sp, #20
 8014f00:	4603      	mov	r3, r0
 8014f02:	f88d 3007 	strb.w	r3, [sp, #7]
  struct PIDdata* pid = &eepromConfig.PID[PIDid];
 8014f06:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014f0a:	4613      	mov	r3, r2
 8014f0c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8014f10:	189b      	adds	r3, r3, r2
 8014f12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8014f16:	461a      	mov	r2, r3
 8014f18:	4b1a      	ldr	r3, [pc, #104]	; (8014f84 <readRFPID+0x88>)
 8014f1a:	18d3      	adds	r3, r2, r3
 8014f1c:	9303      	str	r3, [sp, #12]

  pid->B              = readFloatRF();
 8014f1e:	f7ff ff85 	bl	8014e2c <readFloatRF>
 8014f22:	4602      	mov	r2, r0
 8014f24:	9b03      	ldr	r3, [sp, #12]
 8014f26:	601a      	str	r2, [r3, #0]
  pid->P              = readFloatRF();
 8014f28:	f7ff ff80 	bl	8014e2c <readFloatRF>
 8014f2c:	4602      	mov	r2, r0
 8014f2e:	9b03      	ldr	r3, [sp, #12]
 8014f30:	605a      	str	r2, [r3, #4]
  pid->I              = readFloatRF();
 8014f32:	f7ff ff7b 	bl	8014e2c <readFloatRF>
 8014f36:	4602      	mov	r2, r0
 8014f38:	9b03      	ldr	r3, [sp, #12]
 8014f3a:	609a      	str	r2, [r3, #8]
  pid->D              = readFloatRF();
 8014f3c:	f7ff ff76 	bl	8014e2c <readFloatRF>
 8014f40:	4602      	mov	r2, r0
 8014f42:	9b03      	ldr	r3, [sp, #12]
 8014f44:	60da      	str	r2, [r3, #12]
  pid->windupGuard    = readFloatRF();
 8014f46:	f7ff ff71 	bl	8014e2c <readFloatRF>
 8014f4a:	4602      	mov	r2, r0
 8014f4c:	9b03      	ldr	r3, [sp, #12]
 8014f4e:	615a      	str	r2, [r3, #20]
  pid->iTerm          = 0.0f;
 8014f50:	9b03      	ldr	r3, [sp, #12]
 8014f52:	4a0d      	ldr	r2, [pc, #52]	; (8014f88 <readRFPID+0x8c>)
 8014f54:	611a      	str	r2, [r3, #16]
  pid->lastDcalcValue = 0.0f;
 8014f56:	9b03      	ldr	r3, [sp, #12]
 8014f58:	4a0b      	ldr	r2, [pc, #44]	; (8014f88 <readRFPID+0x8c>)
 8014f5a:	619a      	str	r2, [r3, #24]
  pid->lastDterm      = 0.0f;
 8014f5c:	9b03      	ldr	r3, [sp, #12]
 8014f5e:	4a0a      	ldr	r2, [pc, #40]	; (8014f88 <readRFPID+0x8c>)
 8014f60:	61da      	str	r2, [r3, #28]
  pid->lastLastDterm  = 0.0f;
 8014f62:	9b03      	ldr	r3, [sp, #12]
 8014f64:	4a08      	ldr	r2, [pc, #32]	; (8014f88 <readRFPID+0x8c>)
 8014f66:	621a      	str	r2, [r3, #32]
  pid->dErrorCalc     = (uint8_t)readFloatRF();
 8014f68:	f7ff ff60 	bl	8014e2c <readFloatRF>
 8014f6c:	ee07 0a90 	vmov	s15, r0
 8014f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014f74:	ee17 3a90 	vmov	r3, s15
 8014f78:	b2da      	uxtb	r2, r3
 8014f7a:	9b03      	ldr	r3, [sp, #12]
 8014f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8014f80:	b005      	add	sp, #20
 8014f82:	bd00      	pop	{pc}
 8014f84:	20003c94 	.word	0x20003c94
 8014f88:	00000000 	.word	0x00000000

08014f8c <rfCom>:
///////////////////////////////////////////////////////////////////////////////
// RF Telem Communication
///////////////////////////////////////////////////////////////////////////////

void rfCom(void)
{
 8014f8c:	b500      	push	{lr}
 8014f8e:	b083      	sub	sp, #12
    if (telemetryAvailable() && !validRFCommand)
 8014f90:	f7f1 fa74 	bl	800647c <telemetryAvailable>
 8014f94:	4603      	mov	r3, r0
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d010      	beq.n	8014fbc <rfCom+0x30>
 8014f9a:	f640 0307 	movw	r3, #2055	; 0x807
 8014f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014fa2:	781b      	ldrb	r3, [r3, #0]
 8014fa4:	b2db      	uxtb	r3, r3
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d108      	bne.n	8014fbc <rfCom+0x30>
    	rfQueryType = telemetryRead();
 8014faa:	f7f1 fa7d 	bl	80064a8 <telemetryRead>
 8014fae:	4603      	mov	r3, r0
 8014fb0:	461a      	mov	r2, r3
 8014fb2:	f640 0306 	movw	r3, #2054	; 0x806
 8014fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014fba:	701a      	strb	r2, [r3, #0]

    switch (rfQueryType)
 8014fbc:	f640 0306 	movw	r3, #2054	; 0x806
 8014fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014fc4:	781b      	ldrb	r3, [r3, #0]
 8014fc6:	b2db      	uxtb	r3, r3
 8014fc8:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8014fcc:	2b48      	cmp	r3, #72	; 0x48
 8014fce:	f201 83c1 	bhi.w	8016754 <rfCom+0x17c8>
 8014fd2:	a201      	add	r2, pc, #4	; (adr r2, 8014fd8 <rfCom+0x4c>)
 8014fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fd8:	080163ed 	.word	0x080163ed
 8014fdc:	080162bb 	.word	0x080162bb
 8014fe0:	080162dd 	.word	0x080162dd
 8014fe4:	080162ff 	.word	0x080162ff
 8014fe8:	08016321 	.word	0x08016321
 8014fec:	08016343 	.word	0x08016343
 8014ff0:	08016365 	.word	0x08016365
 8014ff4:	08016387 	.word	0x08016387
 8014ff8:	080163a9 	.word	0x080163a9
 8014ffc:	080163cb 	.word	0x080163cb
 8015000:	08016755 	.word	0x08016755
 8015004:	08016755 	.word	0x08016755
 8015008:	08016755 	.word	0x08016755
 801500c:	08016755 	.word	0x08016755
 8015010:	08016755 	.word	0x08016755
 8015014:	08016679 	.word	0x08016679
 8015018:	08016755 	.word	0x08016755
 801501c:	08016401 	.word	0x08016401
 8015020:	08016433 	.word	0x08016433
 8015024:	08016465 	.word	0x08016465
 8015028:	08016497 	.word	0x08016497
 801502c:	080164c9 	.word	0x080164c9
 8015030:	080164fb 	.word	0x080164fb
 8015034:	0801652d 	.word	0x0801652d
 8015038:	0801655f 	.word	0x0801655f
 801503c:	08016591 	.word	0x08016591
 8015040:	080165c3 	.word	0x080165c3
 8015044:	080165f5 	.word	0x080165f5
 8015048:	08016627 	.word	0x08016627
 801504c:	08016755 	.word	0x08016755
 8015050:	08016755 	.word	0x08016755
 8015054:	08016755 	.word	0x08016755
 8015058:	08016755 	.word	0x08016755
 801505c:	08016755 	.word	0x08016755
 8015060:	08016755 	.word	0x08016755
 8015064:	08016755 	.word	0x08016755
 8015068:	08016755 	.word	0x08016755
 801506c:	08016755 	.word	0x08016755
 8015070:	08016755 	.word	0x08016755
 8015074:	08016659 	.word	0x08016659
 8015078:	08016755 	.word	0x08016755
 801507c:	08016755 	.word	0x08016755
 8015080:	08016755 	.word	0x08016755
 8015084:	08016755 	.word	0x08016755
 8015088:	08016755 	.word	0x08016755
 801508c:	08016755 	.word	0x08016755
 8015090:	08016755 	.word	0x08016755
 8015094:	08016755 	.word	0x08016755
 8015098:	08016755 	.word	0x08016755
 801509c:	080150fd 	.word	0x080150fd
 80150a0:	0801556d 	.word	0x0801556d
 80150a4:	080159dd 	.word	0x080159dd
 80150a8:	08015e4d 	.word	0x08015e4d
 80150ac:	08016755 	.word	0x08016755
 80150b0:	08016755 	.word	0x08016755
 80150b4:	08016755 	.word	0x08016755
 80150b8:	08016755 	.word	0x08016755
 80150bc:	08016755 	.word	0x08016755
 80150c0:	08016755 	.word	0x08016755
 80150c4:	08016755 	.word	0x08016755
 80150c8:	08016755 	.word	0x08016755
 80150cc:	08016755 	.word	0x08016755
 80150d0:	08016755 	.word	0x08016755
 80150d4:	08016755 	.word	0x08016755
 80150d8:	08016755 	.word	0x08016755
 80150dc:	08016755 	.word	0x08016755
 80150e0:	08016755 	.word	0x08016755
 80150e4:	08016755 	.word	0x08016755
 80150e8:	08016755 	.word	0x08016755
 80150ec:	08016755 	.word	0x08016755
 80150f0:	08016755 	.word	0x08016755
 80150f4:	08016755 	.word	0x08016755
 80150f8:	08016755 	.word	0x08016755
    {
        ///////////////////////////////

    case 'a': // Rate PIDs
        telemetryPrint("\n");
 80150fc:	f64d 6008 	movw	r0, #56840	; 0xde08
 8015100:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015104:	f7f1 fa40 	bl	8006588 <telemetryPrint>

        telemetryPrint("Roll Rate PID:  ");
 8015108:	f64d 600c 	movw	r0, #56844	; 0xde0c
 801510c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015110:	f7f1 fa3a 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_RATE_PID].B);           telemetryPrint(numberString);
 8015114:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015118:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801511c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015120:	4618      	mov	r0, r3
 8015122:	f00b fb03 	bl	802072c <__aeabi_f2d>
 8015126:	4602      	mov	r2, r0
 8015128:	460b      	mov	r3, r1
 801512a:	e9cd 2300 	strd	r2, r3, [sp]
 801512e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015132:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015136:	f04f 0110 	mov.w	r1, #16
 801513a:	f64d 6220 	movw	r2, #56864	; 0xde20
 801513e:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015142:	f00c fa01 	bl	8021548 <snprintf>
 8015146:	f643 3078 	movw	r0, #15224	; 0x3b78
 801514a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801514e:	f7f1 fa1b 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_RATE_PID].P);           telemetryPrint(numberString);
 8015152:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015156:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801515a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801515e:	4618      	mov	r0, r3
 8015160:	f00b fae4 	bl	802072c <__aeabi_f2d>
 8015164:	4602      	mov	r2, r0
 8015166:	460b      	mov	r3, r1
 8015168:	e9cd 2300 	strd	r2, r3, [sp]
 801516c:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015170:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015174:	f04f 0110 	mov.w	r1, #16
 8015178:	f64d 6220 	movw	r2, #56864	; 0xde20
 801517c:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015180:	f00c f9e2 	bl	8021548 <snprintf>
 8015184:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015188:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801518c:	f7f1 f9fc 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_RATE_PID].I);           telemetryPrint(numberString);
 8015190:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015194:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015198:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801519c:	4618      	mov	r0, r3
 801519e:	f00b fac5 	bl	802072c <__aeabi_f2d>
 80151a2:	4602      	mov	r2, r0
 80151a4:	460b      	mov	r3, r1
 80151a6:	e9cd 2300 	strd	r2, r3, [sp]
 80151aa:	f643 3078 	movw	r0, #15224	; 0x3b78
 80151ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80151b2:	f04f 0110 	mov.w	r1, #16
 80151b6:	f64d 6220 	movw	r2, #56864	; 0xde20
 80151ba:	f6c0 0202 	movt	r2, #2050	; 0x802
 80151be:	f00c f9c3 	bl	8021548 <snprintf>
 80151c2:	f643 3078 	movw	r0, #15224	; 0x3b78
 80151c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80151ca:	f7f1 f9dd 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_RATE_PID].D);           telemetryPrint(numberString);
 80151ce:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80151d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80151d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80151da:	4618      	mov	r0, r3
 80151dc:	f00b faa6 	bl	802072c <__aeabi_f2d>
 80151e0:	4602      	mov	r2, r0
 80151e2:	460b      	mov	r3, r1
 80151e4:	e9cd 2300 	strd	r2, r3, [sp]
 80151e8:	f643 3078 	movw	r0, #15224	; 0x3b78
 80151ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80151f0:	f04f 0110 	mov.w	r1, #16
 80151f4:	f64d 6220 	movw	r2, #56864	; 0xde20
 80151f8:	f6c0 0202 	movt	r2, #2050	; 0x802
 80151fc:	f00c f9a4 	bl	8021548 <snprintf>
 8015200:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015204:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015208:	f7f1 f9be 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_RATE_PID].windupGuard); telemetryPrint(numberString);
 801520c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015210:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015214:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015218:	4618      	mov	r0, r3
 801521a:	f00b fa87 	bl	802072c <__aeabi_f2d>
 801521e:	4602      	mov	r2, r0
 8015220:	460b      	mov	r3, r1
 8015222:	e9cd 2300 	strd	r2, r3, [sp]
 8015226:	f643 3078 	movw	r0, #15224	; 0x3b78
 801522a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801522e:	f04f 0110 	mov.w	r1, #16
 8015232:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015236:	f6c0 0202 	movt	r2, #2050	; 0x802
 801523a:	f00c f985 	bl	8021548 <snprintf>
 801523e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015242:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015246:	f7f1 f99f 	bl	8006588 <telemetryPrint>
        if  (eepromConfig.PID[ROLL_RATE_PID].dErrorCalc)
 801524a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801524e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015252:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8015256:	2b00      	cmp	r3, #0
 8015258:	d006      	beq.n	8015268 <rfCom+0x2dc>
            telemetryPrint("Error\n");
 801525a:	f64d 6028 	movw	r0, #56872	; 0xde28
 801525e:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015262:	f7f1 f991 	bl	8006588 <telemetryPrint>
 8015266:	e005      	b.n	8015274 <rfCom+0x2e8>
        else
            telemetryPrint("State\n");
 8015268:	f64d 6030 	movw	r0, #56880	; 0xde30
 801526c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015270:	f7f1 f98a 	bl	8006588 <telemetryPrint>

        telemetryPrint("Pitch Rate PID: ");
 8015274:	f64d 6038 	movw	r0, #56888	; 0xde38
 8015278:	f6c0 0002 	movt	r0, #2050	; 0x802
 801527c:	f7f1 f984 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_RATE_PID].B);           telemetryPrint(numberString);
 8015280:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015284:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015288:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801528c:	4618      	mov	r0, r3
 801528e:	f00b fa4d 	bl	802072c <__aeabi_f2d>
 8015292:	4602      	mov	r2, r0
 8015294:	460b      	mov	r3, r1
 8015296:	e9cd 2300 	strd	r2, r3, [sp]
 801529a:	f643 3078 	movw	r0, #15224	; 0x3b78
 801529e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80152a2:	f04f 0110 	mov.w	r1, #16
 80152a6:	f64d 6220 	movw	r2, #56864	; 0xde20
 80152aa:	f6c0 0202 	movt	r2, #2050	; 0x802
 80152ae:	f00c f94b 	bl	8021548 <snprintf>
 80152b2:	f643 3078 	movw	r0, #15224	; 0x3b78
 80152b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80152ba:	f7f1 f965 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_RATE_PID].P);           telemetryPrint(numberString);
 80152be:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80152c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80152c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80152ca:	4618      	mov	r0, r3
 80152cc:	f00b fa2e 	bl	802072c <__aeabi_f2d>
 80152d0:	4602      	mov	r2, r0
 80152d2:	460b      	mov	r3, r1
 80152d4:	e9cd 2300 	strd	r2, r3, [sp]
 80152d8:	f643 3078 	movw	r0, #15224	; 0x3b78
 80152dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80152e0:	f04f 0110 	mov.w	r1, #16
 80152e4:	f64d 6220 	movw	r2, #56864	; 0xde20
 80152e8:	f6c0 0202 	movt	r2, #2050	; 0x802
 80152ec:	f00c f92c 	bl	8021548 <snprintf>
 80152f0:	f643 3078 	movw	r0, #15224	; 0x3b78
 80152f4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80152f8:	f7f1 f946 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_RATE_PID].I);           telemetryPrint(numberString);
 80152fc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015300:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015304:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8015308:	4618      	mov	r0, r3
 801530a:	f00b fa0f 	bl	802072c <__aeabi_f2d>
 801530e:	4602      	mov	r2, r0
 8015310:	460b      	mov	r3, r1
 8015312:	e9cd 2300 	strd	r2, r3, [sp]
 8015316:	f643 3078 	movw	r0, #15224	; 0x3b78
 801531a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801531e:	f04f 0110 	mov.w	r1, #16
 8015322:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015326:	f6c0 0202 	movt	r2, #2050	; 0x802
 801532a:	f00c f90d 	bl	8021548 <snprintf>
 801532e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015332:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015336:	f7f1 f927 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_RATE_PID].D);           telemetryPrint(numberString);
 801533a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801533e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015342:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8015346:	4618      	mov	r0, r3
 8015348:	f00b f9f0 	bl	802072c <__aeabi_f2d>
 801534c:	4602      	mov	r2, r0
 801534e:	460b      	mov	r3, r1
 8015350:	e9cd 2300 	strd	r2, r3, [sp]
 8015354:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015358:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801535c:	f04f 0110 	mov.w	r1, #16
 8015360:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015364:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015368:	f00c f8ee 	bl	8021548 <snprintf>
 801536c:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015370:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015374:	f7f1 f908 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_RATE_PID].windupGuard); telemetryPrint(numberString);
 8015378:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801537c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015380:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8015384:	4618      	mov	r0, r3
 8015386:	f00b f9d1 	bl	802072c <__aeabi_f2d>
 801538a:	4602      	mov	r2, r0
 801538c:	460b      	mov	r3, r1
 801538e:	e9cd 2300 	strd	r2, r3, [sp]
 8015392:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015396:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801539a:	f04f 0110 	mov.w	r1, #16
 801539e:	f64d 6220 	movw	r2, #56864	; 0xde20
 80153a2:	f6c0 0202 	movt	r2, #2050	; 0x802
 80153a6:	f00c f8cf 	bl	8021548 <snprintf>
 80153aa:	f643 3078 	movw	r0, #15224	; 0x3b78
 80153ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80153b2:	f7f1 f8e9 	bl	8006588 <telemetryPrint>
        if  (eepromConfig.PID[PITCH_RATE_PID].dErrorCalc)
 80153b6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80153ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80153be:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d006      	beq.n	80153d4 <rfCom+0x448>
            telemetryPrint("Error\n");
 80153c6:	f64d 6028 	movw	r0, #56872	; 0xde28
 80153ca:	f6c0 0002 	movt	r0, #2050	; 0x802
 80153ce:	f7f1 f8db 	bl	8006588 <telemetryPrint>
 80153d2:	e005      	b.n	80153e0 <rfCom+0x454>
        else
            telemetryPrint("State\n");
 80153d4:	f64d 6030 	movw	r0, #56880	; 0xde30
 80153d8:	f6c0 0002 	movt	r0, #2050	; 0x802
 80153dc:	f7f1 f8d4 	bl	8006588 <telemetryPrint>

        telemetryPrint("Yaw Rate PID:   ");
 80153e0:	f64d 604c 	movw	r0, #56908	; 0xde4c
 80153e4:	f6c0 0002 	movt	r0, #2050	; 0x802
 80153e8:	f7f1 f8ce 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[YAW_RATE_PID].B);           telemetryPrint(numberString);
 80153ec:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80153f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80153f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80153f8:	4618      	mov	r0, r3
 80153fa:	f00b f997 	bl	802072c <__aeabi_f2d>
 80153fe:	4602      	mov	r2, r0
 8015400:	460b      	mov	r3, r1
 8015402:	e9cd 2300 	strd	r2, r3, [sp]
 8015406:	f643 3078 	movw	r0, #15224	; 0x3b78
 801540a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801540e:	f04f 0110 	mov.w	r1, #16
 8015412:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015416:	f6c0 0202 	movt	r2, #2050	; 0x802
 801541a:	f00c f895 	bl	8021548 <snprintf>
 801541e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015422:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015426:	f7f1 f8af 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[YAW_RATE_PID].P);           telemetryPrint(numberString);
 801542a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801542e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015432:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8015436:	4618      	mov	r0, r3
 8015438:	f00b f978 	bl	802072c <__aeabi_f2d>
 801543c:	4602      	mov	r2, r0
 801543e:	460b      	mov	r3, r1
 8015440:	e9cd 2300 	strd	r2, r3, [sp]
 8015444:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015448:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801544c:	f04f 0110 	mov.w	r1, #16
 8015450:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015454:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015458:	f00c f876 	bl	8021548 <snprintf>
 801545c:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015460:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015464:	f7f1 f890 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[YAW_RATE_PID].I);           telemetryPrint(numberString);
 8015468:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801546c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015474:	4618      	mov	r0, r3
 8015476:	f00b f959 	bl	802072c <__aeabi_f2d>
 801547a:	4602      	mov	r2, r0
 801547c:	460b      	mov	r3, r1
 801547e:	e9cd 2300 	strd	r2, r3, [sp]
 8015482:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015486:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801548a:	f04f 0110 	mov.w	r1, #16
 801548e:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015492:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015496:	f00c f857 	bl	8021548 <snprintf>
 801549a:	f643 3078 	movw	r0, #15224	; 0x3b78
 801549e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80154a2:	f7f1 f871 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[YAW_RATE_PID].D);           telemetryPrint(numberString);
 80154a6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80154aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80154ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80154b2:	4618      	mov	r0, r3
 80154b4:	f00b f93a 	bl	802072c <__aeabi_f2d>
 80154b8:	4602      	mov	r2, r0
 80154ba:	460b      	mov	r3, r1
 80154bc:	e9cd 2300 	strd	r2, r3, [sp]
 80154c0:	f643 3078 	movw	r0, #15224	; 0x3b78
 80154c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80154c8:	f04f 0110 	mov.w	r1, #16
 80154cc:	f64d 6220 	movw	r2, #56864	; 0xde20
 80154d0:	f6c0 0202 	movt	r2, #2050	; 0x802
 80154d4:	f00c f838 	bl	8021548 <snprintf>
 80154d8:	f643 3078 	movw	r0, #15224	; 0x3b78
 80154dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80154e0:	f7f1 f852 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[YAW_RATE_PID].windupGuard); telemetryPrint(numberString);
 80154e4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80154e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80154ec:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80154f0:	4618      	mov	r0, r3
 80154f2:	f00b f91b 	bl	802072c <__aeabi_f2d>
 80154f6:	4602      	mov	r2, r0
 80154f8:	460b      	mov	r3, r1
 80154fa:	e9cd 2300 	strd	r2, r3, [sp]
 80154fe:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015502:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015506:	f04f 0110 	mov.w	r1, #16
 801550a:	f64d 6220 	movw	r2, #56864	; 0xde20
 801550e:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015512:	f00c f819 	bl	8021548 <snprintf>
 8015516:	f643 3078 	movw	r0, #15224	; 0x3b78
 801551a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801551e:	f7f1 f833 	bl	8006588 <telemetryPrint>
        if  (eepromConfig.PID[YAW_RATE_PID].dErrorCalc)
 8015522:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015526:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801552a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801552e:	2b00      	cmp	r3, #0
 8015530:	d006      	beq.n	8015540 <rfCom+0x5b4>
            telemetryPrint("Error\n");
 8015532:	f64d 6028 	movw	r0, #56872	; 0xde28
 8015536:	f6c0 0002 	movt	r0, #2050	; 0x802
 801553a:	f7f1 f825 	bl	8006588 <telemetryPrint>
 801553e:	e005      	b.n	801554c <rfCom+0x5c0>
        else
            telemetryPrint("State\n");
 8015540:	f64d 6030 	movw	r0, #56880	; 0xde30
 8015544:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015548:	f7f1 f81e 	bl	8006588 <telemetryPrint>

        rfQueryType = 'x';
 801554c:	f640 0306 	movw	r3, #2054	; 0x806
 8015550:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015554:	f04f 0278 	mov.w	r2, #120	; 0x78
 8015558:	701a      	strb	r2, [r3, #0]
        validRFCommand = false;
 801555a:	f640 0307 	movw	r3, #2055	; 0x807
 801555e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015562:	f04f 0200 	mov.w	r2, #0
 8015566:	701a      	strb	r2, [r3, #0]
        break;
 8015568:	f001 b8f4 	b.w	8016754 <rfCom+0x17c8>

    ///////////////////////////////

    case 'b': // Attitude PIDs
        telemetryPrint("\n");
 801556c:	f64d 6008 	movw	r0, #56840	; 0xde08
 8015570:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015574:	f7f1 f808 	bl	8006588 <telemetryPrint>

        telemetryPrint("Roll Attitude PID:  ");
 8015578:	f64d 6060 	movw	r0, #56928	; 0xde60
 801557c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015580:	f7f1 f802 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_ATT_PID].B);           telemetryPrint(numberString);
 8015584:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015588:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801558c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8015590:	4618      	mov	r0, r3
 8015592:	f00b f8cb 	bl	802072c <__aeabi_f2d>
 8015596:	4602      	mov	r2, r0
 8015598:	460b      	mov	r3, r1
 801559a:	e9cd 2300 	strd	r2, r3, [sp]
 801559e:	f643 3078 	movw	r0, #15224	; 0x3b78
 80155a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80155a6:	f04f 0110 	mov.w	r1, #16
 80155aa:	f64d 6220 	movw	r2, #56864	; 0xde20
 80155ae:	f6c0 0202 	movt	r2, #2050	; 0x802
 80155b2:	f00b ffc9 	bl	8021548 <snprintf>
 80155b6:	f643 3078 	movw	r0, #15224	; 0x3b78
 80155ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80155be:	f7f0 ffe3 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_ATT_PID].P);           telemetryPrint(numberString);
 80155c2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80155c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80155ca:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80155ce:	4618      	mov	r0, r3
 80155d0:	f00b f8ac 	bl	802072c <__aeabi_f2d>
 80155d4:	4602      	mov	r2, r0
 80155d6:	460b      	mov	r3, r1
 80155d8:	e9cd 2300 	strd	r2, r3, [sp]
 80155dc:	f643 3078 	movw	r0, #15224	; 0x3b78
 80155e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80155e4:	f04f 0110 	mov.w	r1, #16
 80155e8:	f64d 6220 	movw	r2, #56864	; 0xde20
 80155ec:	f6c0 0202 	movt	r2, #2050	; 0x802
 80155f0:	f00b ffaa 	bl	8021548 <snprintf>
 80155f4:	f643 3078 	movw	r0, #15224	; 0x3b78
 80155f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80155fc:	f7f0 ffc4 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_ATT_PID].I);           telemetryPrint(numberString);
 8015600:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015604:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015608:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 801560c:	4618      	mov	r0, r3
 801560e:	f00b f88d 	bl	802072c <__aeabi_f2d>
 8015612:	4602      	mov	r2, r0
 8015614:	460b      	mov	r3, r1
 8015616:	e9cd 2300 	strd	r2, r3, [sp]
 801561a:	f643 3078 	movw	r0, #15224	; 0x3b78
 801561e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015622:	f04f 0110 	mov.w	r1, #16
 8015626:	f64d 6220 	movw	r2, #56864	; 0xde20
 801562a:	f6c0 0202 	movt	r2, #2050	; 0x802
 801562e:	f00b ff8b 	bl	8021548 <snprintf>
 8015632:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015636:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801563a:	f7f0 ffa5 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_ATT_PID].D);           telemetryPrint(numberString);
 801563e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015642:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015646:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801564a:	4618      	mov	r0, r3
 801564c:	f00b f86e 	bl	802072c <__aeabi_f2d>
 8015650:	4602      	mov	r2, r0
 8015652:	460b      	mov	r3, r1
 8015654:	e9cd 2300 	strd	r2, r3, [sp]
 8015658:	f643 3078 	movw	r0, #15224	; 0x3b78
 801565c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015660:	f04f 0110 	mov.w	r1, #16
 8015664:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015668:	f6c0 0202 	movt	r2, #2050	; 0x802
 801566c:	f00b ff6c 	bl	8021548 <snprintf>
 8015670:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015674:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015678:	f7f0 ff86 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[ROLL_ATT_PID].windupGuard); telemetryPrint(numberString);
 801567c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015680:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015684:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8015688:	4618      	mov	r0, r3
 801568a:	f00b f84f 	bl	802072c <__aeabi_f2d>
 801568e:	4602      	mov	r2, r0
 8015690:	460b      	mov	r3, r1
 8015692:	e9cd 2300 	strd	r2, r3, [sp]
 8015696:	f643 3078 	movw	r0, #15224	; 0x3b78
 801569a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801569e:	f04f 0110 	mov.w	r1, #16
 80156a2:	f64d 6220 	movw	r2, #56864	; 0xde20
 80156a6:	f6c0 0202 	movt	r2, #2050	; 0x802
 80156aa:	f00b ff4d 	bl	8021548 <snprintf>
 80156ae:	f643 3078 	movw	r0, #15224	; 0x3b78
 80156b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80156b6:	f7f0 ff67 	bl	8006588 <telemetryPrint>
        if  (eepromConfig.PID[ROLL_ATT_PID].dErrorCalc)
 80156ba:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80156be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80156c2:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d006      	beq.n	80156d8 <rfCom+0x74c>
            telemetryPrint("Error\n");
 80156ca:	f64d 6028 	movw	r0, #56872	; 0xde28
 80156ce:	f6c0 0002 	movt	r0, #2050	; 0x802
 80156d2:	f7f0 ff59 	bl	8006588 <telemetryPrint>
 80156d6:	e005      	b.n	80156e4 <rfCom+0x758>
        else
            telemetryPrint("State\n");
 80156d8:	f64d 6030 	movw	r0, #56880	; 0xde30
 80156dc:	f6c0 0002 	movt	r0, #2050	; 0x802
 80156e0:	f7f0 ff52 	bl	8006588 <telemetryPrint>

        telemetryPrint("Pitch Attitude PID: ");
 80156e4:	f64d 6078 	movw	r0, #56952	; 0xde78
 80156e8:	f6c0 0002 	movt	r0, #2050	; 0x802
 80156ec:	f7f0 ff4c 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_ATT_PID].B);           telemetryPrint(numberString);
 80156f0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80156f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80156f8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80156fc:	4618      	mov	r0, r3
 80156fe:	f00b f815 	bl	802072c <__aeabi_f2d>
 8015702:	4602      	mov	r2, r0
 8015704:	460b      	mov	r3, r1
 8015706:	e9cd 2300 	strd	r2, r3, [sp]
 801570a:	f643 3078 	movw	r0, #15224	; 0x3b78
 801570e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015712:	f04f 0110 	mov.w	r1, #16
 8015716:	f64d 6220 	movw	r2, #56864	; 0xde20
 801571a:	f6c0 0202 	movt	r2, #2050	; 0x802
 801571e:	f00b ff13 	bl	8021548 <snprintf>
 8015722:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015726:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801572a:	f7f0 ff2d 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_ATT_PID].P);           telemetryPrint(numberString);
 801572e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015732:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015736:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801573a:	4618      	mov	r0, r3
 801573c:	f00a fff6 	bl	802072c <__aeabi_f2d>
 8015740:	4602      	mov	r2, r0
 8015742:	460b      	mov	r3, r1
 8015744:	e9cd 2300 	strd	r2, r3, [sp]
 8015748:	f643 3078 	movw	r0, #15224	; 0x3b78
 801574c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015750:	f04f 0110 	mov.w	r1, #16
 8015754:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015758:	f6c0 0202 	movt	r2, #2050	; 0x802
 801575c:	f00b fef4 	bl	8021548 <snprintf>
 8015760:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015764:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015768:	f7f0 ff0e 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_ATT_PID].I);           telemetryPrint(numberString);
 801576c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015770:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015774:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015778:	4618      	mov	r0, r3
 801577a:	f00a ffd7 	bl	802072c <__aeabi_f2d>
 801577e:	4602      	mov	r2, r0
 8015780:	460b      	mov	r3, r1
 8015782:	e9cd 2300 	strd	r2, r3, [sp]
 8015786:	f643 3078 	movw	r0, #15224	; 0x3b78
 801578a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801578e:	f04f 0110 	mov.w	r1, #16
 8015792:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015796:	f6c0 0202 	movt	r2, #2050	; 0x802
 801579a:	f00b fed5 	bl	8021548 <snprintf>
 801579e:	f643 3078 	movw	r0, #15224	; 0x3b78
 80157a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80157a6:	f7f0 feef 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_ATT_PID].D);           telemetryPrint(numberString);
 80157aa:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80157ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80157b2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80157b6:	4618      	mov	r0, r3
 80157b8:	f00a ffb8 	bl	802072c <__aeabi_f2d>
 80157bc:	4602      	mov	r2, r0
 80157be:	460b      	mov	r3, r1
 80157c0:	e9cd 2300 	strd	r2, r3, [sp]
 80157c4:	f643 3078 	movw	r0, #15224	; 0x3b78
 80157c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80157cc:	f04f 0110 	mov.w	r1, #16
 80157d0:	f64d 6220 	movw	r2, #56864	; 0xde20
 80157d4:	f6c0 0202 	movt	r2, #2050	; 0x802
 80157d8:	f00b feb6 	bl	8021548 <snprintf>
 80157dc:	f643 3078 	movw	r0, #15224	; 0x3b78
 80157e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80157e4:	f7f0 fed0 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[PITCH_ATT_PID].windupGuard); telemetryPrint(numberString);
 80157e8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80157ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80157f0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80157f4:	4618      	mov	r0, r3
 80157f6:	f00a ff99 	bl	802072c <__aeabi_f2d>
 80157fa:	4602      	mov	r2, r0
 80157fc:	460b      	mov	r3, r1
 80157fe:	e9cd 2300 	strd	r2, r3, [sp]
 8015802:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015806:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801580a:	f04f 0110 	mov.w	r1, #16
 801580e:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015812:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015816:	f00b fe97 	bl	8021548 <snprintf>
 801581a:	f643 3078 	movw	r0, #15224	; 0x3b78
 801581e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015822:	f7f0 feb1 	bl	8006588 <telemetryPrint>
        if  (eepromConfig.PID[PITCH_ATT_PID].dErrorCalc)
 8015826:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801582a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801582e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8015832:	2b00      	cmp	r3, #0
 8015834:	d006      	beq.n	8015844 <rfCom+0x8b8>
            telemetryPrint("Error\n");
 8015836:	f64d 6028 	movw	r0, #56872	; 0xde28
 801583a:	f6c0 0002 	movt	r0, #2050	; 0x802
 801583e:	f7f0 fea3 	bl	8006588 <telemetryPrint>
 8015842:	e005      	b.n	8015850 <rfCom+0x8c4>
        else
            telemetryPrint("State\n");
 8015844:	f64d 6030 	movw	r0, #56880	; 0xde30
 8015848:	f6c0 0002 	movt	r0, #2050	; 0x802
 801584c:	f7f0 fe9c 	bl	8006588 <telemetryPrint>

        telemetryPrint("Heading PID:        ");
 8015850:	f64d 6090 	movw	r0, #56976	; 0xde90
 8015854:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015858:	f7f0 fe96 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HEADING_PID].B);           telemetryPrint(numberString);
 801585c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015860:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015864:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8015868:	4618      	mov	r0, r3
 801586a:	f00a ff5f 	bl	802072c <__aeabi_f2d>
 801586e:	4602      	mov	r2, r0
 8015870:	460b      	mov	r3, r1
 8015872:	e9cd 2300 	strd	r2, r3, [sp]
 8015876:	f643 3078 	movw	r0, #15224	; 0x3b78
 801587a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801587e:	f04f 0110 	mov.w	r1, #16
 8015882:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015886:	f6c0 0202 	movt	r2, #2050	; 0x802
 801588a:	f00b fe5d 	bl	8021548 <snprintf>
 801588e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015892:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015896:	f7f0 fe77 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HEADING_PID].P);           telemetryPrint(numberString);
 801589a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801589e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80158a2:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80158a6:	4618      	mov	r0, r3
 80158a8:	f00a ff40 	bl	802072c <__aeabi_f2d>
 80158ac:	4602      	mov	r2, r0
 80158ae:	460b      	mov	r3, r1
 80158b0:	e9cd 2300 	strd	r2, r3, [sp]
 80158b4:	f643 3078 	movw	r0, #15224	; 0x3b78
 80158b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80158bc:	f04f 0110 	mov.w	r1, #16
 80158c0:	f64d 6220 	movw	r2, #56864	; 0xde20
 80158c4:	f6c0 0202 	movt	r2, #2050	; 0x802
 80158c8:	f00b fe3e 	bl	8021548 <snprintf>
 80158cc:	f643 3078 	movw	r0, #15224	; 0x3b78
 80158d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80158d4:	f7f0 fe58 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HEADING_PID].I);           telemetryPrint(numberString);
 80158d8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80158dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80158e0:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80158e4:	4618      	mov	r0, r3
 80158e6:	f00a ff21 	bl	802072c <__aeabi_f2d>
 80158ea:	4602      	mov	r2, r0
 80158ec:	460b      	mov	r3, r1
 80158ee:	e9cd 2300 	strd	r2, r3, [sp]
 80158f2:	f643 3078 	movw	r0, #15224	; 0x3b78
 80158f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80158fa:	f04f 0110 	mov.w	r1, #16
 80158fe:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015902:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015906:	f00b fe1f 	bl	8021548 <snprintf>
 801590a:	f643 3078 	movw	r0, #15224	; 0x3b78
 801590e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015912:	f7f0 fe39 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HEADING_PID].D);           telemetryPrint(numberString);
 8015916:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801591a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801591e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8015922:	4618      	mov	r0, r3
 8015924:	f00a ff02 	bl	802072c <__aeabi_f2d>
 8015928:	4602      	mov	r2, r0
 801592a:	460b      	mov	r3, r1
 801592c:	e9cd 2300 	strd	r2, r3, [sp]
 8015930:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015934:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015938:	f04f 0110 	mov.w	r1, #16
 801593c:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015940:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015944:	f00b fe00 	bl	8021548 <snprintf>
 8015948:	f643 3078 	movw	r0, #15224	; 0x3b78
 801594c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015950:	f7f0 fe1a 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HEADING_PID].windupGuard); telemetryPrint(numberString);
 8015954:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015958:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801595c:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8015960:	4618      	mov	r0, r3
 8015962:	f00a fee3 	bl	802072c <__aeabi_f2d>
 8015966:	4602      	mov	r2, r0
 8015968:	460b      	mov	r3, r1
 801596a:	e9cd 2300 	strd	r2, r3, [sp]
 801596e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015972:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015976:	f04f 0110 	mov.w	r1, #16
 801597a:	f64d 6220 	movw	r2, #56864	; 0xde20
 801597e:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015982:	f00b fde1 	bl	8021548 <snprintf>
 8015986:	f643 3078 	movw	r0, #15224	; 0x3b78
 801598a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801598e:	f7f0 fdfb 	bl	8006588 <telemetryPrint>
        if  (eepromConfig.PID[HEADING_PID].dErrorCalc)
 8015992:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015996:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801599a:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d006      	beq.n	80159b0 <rfCom+0xa24>
            telemetryPrint("Error\n");
 80159a2:	f64d 6028 	movw	r0, #56872	; 0xde28
 80159a6:	f6c0 0002 	movt	r0, #2050	; 0x802
 80159aa:	f7f0 fded 	bl	8006588 <telemetryPrint>
 80159ae:	e005      	b.n	80159bc <rfCom+0xa30>
        else
            telemetryPrint("State\n");
 80159b0:	f64d 6030 	movw	r0, #56880	; 0xde30
 80159b4:	f6c0 0002 	movt	r0, #2050	; 0x802
 80159b8:	f7f0 fde6 	bl	8006588 <telemetryPrint>

        rfQueryType = 'x';
 80159bc:	f640 0306 	movw	r3, #2054	; 0x806
 80159c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80159c4:	f04f 0278 	mov.w	r2, #120	; 0x78
 80159c8:	701a      	strb	r2, [r3, #0]
        validRFCommand = false;
 80159ca:	f640 0307 	movw	r3, #2055	; 0x807
 80159ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80159d2:	f04f 0200 	mov.w	r2, #0
 80159d6:	701a      	strb	r2, [r3, #0]
        break;
 80159d8:	f000 bebc 	b.w	8016754 <rfCom+0x17c8>

    ///////////////////////////////

    case 'c': // Velocity PIDs
        telemetryPrint("\n");
 80159dc:	f64d 6008 	movw	r0, #56840	; 0xde08
 80159e0:	f6c0 0002 	movt	r0, #2050	; 0x802
 80159e4:	f7f0 fdd0 	bl	8006588 <telemetryPrint>

        telemetryPrint("nDot PID:  ");
 80159e8:	f64d 60a8 	movw	r0, #57000	; 0xdea8
 80159ec:	f6c0 0002 	movt	r0, #2050	; 0x802
 80159f0:	f7f0 fdca 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[NDOT_PID].B);           telemetryPrint(numberString);
 80159f4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80159f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80159fc:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8015a00:	4618      	mov	r0, r3
 8015a02:	f00a fe93 	bl	802072c <__aeabi_f2d>
 8015a06:	4602      	mov	r2, r0
 8015a08:	460b      	mov	r3, r1
 8015a0a:	e9cd 2300 	strd	r2, r3, [sp]
 8015a0e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015a12:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015a16:	f04f 0110 	mov.w	r1, #16
 8015a1a:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015a1e:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015a22:	f00b fd91 	bl	8021548 <snprintf>
 8015a26:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015a2a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015a2e:	f7f0 fdab 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[NDOT_PID].P);           telemetryPrint(numberString);
 8015a32:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015a3a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f00a fe74 	bl	802072c <__aeabi_f2d>
 8015a44:	4602      	mov	r2, r0
 8015a46:	460b      	mov	r3, r1
 8015a48:	e9cd 2300 	strd	r2, r3, [sp]
 8015a4c:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015a50:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015a54:	f04f 0110 	mov.w	r1, #16
 8015a58:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015a5c:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015a60:	f00b fd72 	bl	8021548 <snprintf>
 8015a64:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015a68:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015a6c:	f7f0 fd8c 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[NDOT_PID].I);           telemetryPrint(numberString);
 8015a70:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015a78:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	f00a fe55 	bl	802072c <__aeabi_f2d>
 8015a82:	4602      	mov	r2, r0
 8015a84:	460b      	mov	r3, r1
 8015a86:	e9cd 2300 	strd	r2, r3, [sp]
 8015a8a:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015a8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015a92:	f04f 0110 	mov.w	r1, #16
 8015a96:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015a9a:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015a9e:	f00b fd53 	bl	8021548 <snprintf>
 8015aa2:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015aa6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015aaa:	f7f0 fd6d 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[NDOT_PID].D);           telemetryPrint(numberString);
 8015aae:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015ab6:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8015aba:	4618      	mov	r0, r3
 8015abc:	f00a fe36 	bl	802072c <__aeabi_f2d>
 8015ac0:	4602      	mov	r2, r0
 8015ac2:	460b      	mov	r3, r1
 8015ac4:	e9cd 2300 	strd	r2, r3, [sp]
 8015ac8:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015acc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015ad0:	f04f 0110 	mov.w	r1, #16
 8015ad4:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015ad8:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015adc:	f00b fd34 	bl	8021548 <snprintf>
 8015ae0:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015ae4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015ae8:	f7f0 fd4e 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[NDOT_PID].windupGuard); telemetryPrint(numberString);
 8015aec:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015af4:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8015af8:	4618      	mov	r0, r3
 8015afa:	f00a fe17 	bl	802072c <__aeabi_f2d>
 8015afe:	4602      	mov	r2, r0
 8015b00:	460b      	mov	r3, r1
 8015b02:	e9cd 2300 	strd	r2, r3, [sp]
 8015b06:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015b0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015b0e:	f04f 0110 	mov.w	r1, #16
 8015b12:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015b16:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015b1a:	f00b fd15 	bl	8021548 <snprintf>
 8015b1e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015b22:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015b26:	f7f0 fd2f 	bl	8006588 <telemetryPrint>
        if  (eepromConfig.PID[NDOT_PID].dErrorCalc)
 8015b2a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015b32:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d006      	beq.n	8015b48 <rfCom+0xbbc>
            telemetryPrint("Error\n");
 8015b3a:	f64d 6028 	movw	r0, #56872	; 0xde28
 8015b3e:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015b42:	f7f0 fd21 	bl	8006588 <telemetryPrint>
 8015b46:	e005      	b.n	8015b54 <rfCom+0xbc8>
        else
            telemetryPrint("State\n");
 8015b48:	f64d 6030 	movw	r0, #56880	; 0xde30
 8015b4c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015b50:	f7f0 fd1a 	bl	8006588 <telemetryPrint>

        telemetryPrint("eDot PID:  ");
 8015b54:	f64d 60b4 	movw	r0, #57012	; 0xdeb4
 8015b58:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015b5c:	f7f0 fd14 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[EDOT_PID].B);           telemetryPrint(numberString);
 8015b60:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015b68:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	f00a fddd 	bl	802072c <__aeabi_f2d>
 8015b72:	4602      	mov	r2, r0
 8015b74:	460b      	mov	r3, r1
 8015b76:	e9cd 2300 	strd	r2, r3, [sp]
 8015b7a:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015b7e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015b82:	f04f 0110 	mov.w	r1, #16
 8015b86:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015b8a:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015b8e:	f00b fcdb 	bl	8021548 <snprintf>
 8015b92:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015b96:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015b9a:	f7f0 fcf5 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[EDOT_PID].P);           telemetryPrint(numberString);
 8015b9e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015ba6:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8015baa:	4618      	mov	r0, r3
 8015bac:	f00a fdbe 	bl	802072c <__aeabi_f2d>
 8015bb0:	4602      	mov	r2, r0
 8015bb2:	460b      	mov	r3, r1
 8015bb4:	e9cd 2300 	strd	r2, r3, [sp]
 8015bb8:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015bbc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015bc0:	f04f 0110 	mov.w	r1, #16
 8015bc4:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015bc8:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015bcc:	f00b fcbc 	bl	8021548 <snprintf>
 8015bd0:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015bd4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015bd8:	f7f0 fcd6 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[EDOT_PID].I);           telemetryPrint(numberString);
 8015bdc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015be4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8015be8:	4618      	mov	r0, r3
 8015bea:	f00a fd9f 	bl	802072c <__aeabi_f2d>
 8015bee:	4602      	mov	r2, r0
 8015bf0:	460b      	mov	r3, r1
 8015bf2:	e9cd 2300 	strd	r2, r3, [sp]
 8015bf6:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015bfa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015bfe:	f04f 0110 	mov.w	r1, #16
 8015c02:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015c06:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015c0a:	f00b fc9d 	bl	8021548 <snprintf>
 8015c0e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015c12:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015c16:	f7f0 fcb7 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[EDOT_PID].D);           telemetryPrint(numberString);
 8015c1a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015c22:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8015c26:	4618      	mov	r0, r3
 8015c28:	f00a fd80 	bl	802072c <__aeabi_f2d>
 8015c2c:	4602      	mov	r2, r0
 8015c2e:	460b      	mov	r3, r1
 8015c30:	e9cd 2300 	strd	r2, r3, [sp]
 8015c34:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015c38:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015c3c:	f04f 0110 	mov.w	r1, #16
 8015c40:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015c44:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015c48:	f00b fc7e 	bl	8021548 <snprintf>
 8015c4c:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015c50:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015c54:	f7f0 fc98 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[EDOT_PID].windupGuard); telemetryPrint(numberString);
 8015c58:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015c60:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8015c64:	4618      	mov	r0, r3
 8015c66:	f00a fd61 	bl	802072c <__aeabi_f2d>
 8015c6a:	4602      	mov	r2, r0
 8015c6c:	460b      	mov	r3, r1
 8015c6e:	e9cd 2300 	strd	r2, r3, [sp]
 8015c72:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015c76:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015c7a:	f04f 0110 	mov.w	r1, #16
 8015c7e:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015c82:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015c86:	f00b fc5f 	bl	8021548 <snprintf>
 8015c8a:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015c8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015c92:	f7f0 fc79 	bl	8006588 <telemetryPrint>
        if  (eepromConfig.PID[EDOT_PID].dErrorCalc)
 8015c96:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015c9e:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d006      	beq.n	8015cb4 <rfCom+0xd28>
            telemetryPrint("Error\n");
 8015ca6:	f64d 6028 	movw	r0, #56872	; 0xde28
 8015caa:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015cae:	f7f0 fc6b 	bl	8006588 <telemetryPrint>
 8015cb2:	e005      	b.n	8015cc0 <rfCom+0xd34>
        else
            telemetryPrint("State\n");
 8015cb4:	f64d 6030 	movw	r0, #56880	; 0xde30
 8015cb8:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015cbc:	f7f0 fc64 	bl	8006588 <telemetryPrint>

        telemetryPrint("hDot PID:  ");
 8015cc0:	f64d 60c0 	movw	r0, #57024	; 0xdec0
 8015cc4:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015cc8:	f7f0 fc5e 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HDOT_PID].B);           telemetryPrint(numberString);
 8015ccc:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015cd4:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8015cd8:	4618      	mov	r0, r3
 8015cda:	f00a fd27 	bl	802072c <__aeabi_f2d>
 8015cde:	4602      	mov	r2, r0
 8015ce0:	460b      	mov	r3, r1
 8015ce2:	e9cd 2300 	strd	r2, r3, [sp]
 8015ce6:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015cea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015cee:	f04f 0110 	mov.w	r1, #16
 8015cf2:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015cf6:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015cfa:	f00b fc25 	bl	8021548 <snprintf>
 8015cfe:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015d02:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015d06:	f7f0 fc3f 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HDOT_PID].P);           telemetryPrint(numberString);
 8015d0a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015d12:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8015d16:	4618      	mov	r0, r3
 8015d18:	f00a fd08 	bl	802072c <__aeabi_f2d>
 8015d1c:	4602      	mov	r2, r0
 8015d1e:	460b      	mov	r3, r1
 8015d20:	e9cd 2300 	strd	r2, r3, [sp]
 8015d24:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015d28:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015d2c:	f04f 0110 	mov.w	r1, #16
 8015d30:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015d34:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015d38:	f00b fc06 	bl	8021548 <snprintf>
 8015d3c:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015d40:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015d44:	f7f0 fc20 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HDOT_PID].I);           telemetryPrint(numberString);
 8015d48:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015d50:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8015d54:	4618      	mov	r0, r3
 8015d56:	f00a fce9 	bl	802072c <__aeabi_f2d>
 8015d5a:	4602      	mov	r2, r0
 8015d5c:	460b      	mov	r3, r1
 8015d5e:	e9cd 2300 	strd	r2, r3, [sp]
 8015d62:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015d66:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015d6a:	f04f 0110 	mov.w	r1, #16
 8015d6e:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015d72:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015d76:	f00b fbe7 	bl	8021548 <snprintf>
 8015d7a:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015d7e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015d82:	f7f0 fc01 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HDOT_PID].D);           telemetryPrint(numberString);
 8015d86:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015d8e:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8015d92:	4618      	mov	r0, r3
 8015d94:	f00a fcca 	bl	802072c <__aeabi_f2d>
 8015d98:	4602      	mov	r2, r0
 8015d9a:	460b      	mov	r3, r1
 8015d9c:	e9cd 2300 	strd	r2, r3, [sp]
 8015da0:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015da4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015da8:	f04f 0110 	mov.w	r1, #16
 8015dac:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015db0:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015db4:	f00b fbc8 	bl	8021548 <snprintf>
 8015db8:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015dbc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015dc0:	f7f0 fbe2 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[HDOT_PID].windupGuard); telemetryPrint(numberString);
 8015dc4:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015dcc:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f00a fcab 	bl	802072c <__aeabi_f2d>
 8015dd6:	4602      	mov	r2, r0
 8015dd8:	460b      	mov	r3, r1
 8015dda:	e9cd 2300 	strd	r2, r3, [sp]
 8015dde:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015de2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015de6:	f04f 0110 	mov.w	r1, #16
 8015dea:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015dee:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015df2:	f00b fba9 	bl	8021548 <snprintf>
 8015df6:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015dfa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015dfe:	f7f0 fbc3 	bl	8006588 <telemetryPrint>
        if  (eepromConfig.PID[HDOT_PID].dErrorCalc)
 8015e02:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015e0a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d006      	beq.n	8015e20 <rfCom+0xe94>
            telemetryPrint("Error\n");
 8015e12:	f64d 6028 	movw	r0, #56872	; 0xde28
 8015e16:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015e1a:	f7f0 fbb5 	bl	8006588 <telemetryPrint>
 8015e1e:	e005      	b.n	8015e2c <rfCom+0xea0>
        else
            telemetryPrint("State\n");
 8015e20:	f64d 6030 	movw	r0, #56880	; 0xde30
 8015e24:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015e28:	f7f0 fbae 	bl	8006588 <telemetryPrint>

        rfQueryType = 'x';
 8015e2c:	f640 0306 	movw	r3, #2054	; 0x806
 8015e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015e34:	f04f 0278 	mov.w	r2, #120	; 0x78
 8015e38:	701a      	strb	r2, [r3, #0]
        validRFCommand = false;
 8015e3a:	f640 0307 	movw	r3, #2055	; 0x807
 8015e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015e42:	f04f 0200 	mov.w	r2, #0
 8015e46:	701a      	strb	r2, [r3, #0]
        break;
 8015e48:	f000 bc84 	b.w	8016754 <rfCom+0x17c8>

    ///////////////////////////////

    case 'd': // Position PIDs
        telemetryPrint("\n");
 8015e4c:	f64d 6008 	movw	r0, #56840	; 0xde08
 8015e50:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015e54:	f7f0 fb98 	bl	8006588 <telemetryPrint>

        telemetryPrint("n PID:  ");
 8015e58:	f64d 60cc 	movw	r0, #57036	; 0xdecc
 8015e5c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015e60:	f7f0 fb92 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[N_PID].B);           telemetryPrint(numberString);
 8015e64:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015e6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015e70:	4618      	mov	r0, r3
 8015e72:	f00a fc5b 	bl	802072c <__aeabi_f2d>
 8015e76:	4602      	mov	r2, r0
 8015e78:	460b      	mov	r3, r1
 8015e7a:	e9cd 2300 	strd	r2, r3, [sp]
 8015e7e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015e82:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015e86:	f04f 0110 	mov.w	r1, #16
 8015e8a:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015e8e:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015e92:	f00b fb59 	bl	8021548 <snprintf>
 8015e96:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015e9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015e9e:	f7f0 fb73 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[N_PID].P);           telemetryPrint(numberString);
 8015ea2:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015eaa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8015eae:	4618      	mov	r0, r3
 8015eb0:	f00a fc3c 	bl	802072c <__aeabi_f2d>
 8015eb4:	4602      	mov	r2, r0
 8015eb6:	460b      	mov	r3, r1
 8015eb8:	e9cd 2300 	strd	r2, r3, [sp]
 8015ebc:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015ec0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015ec4:	f04f 0110 	mov.w	r1, #16
 8015ec8:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015ecc:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015ed0:	f00b fb3a 	bl	8021548 <snprintf>
 8015ed4:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015ed8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015edc:	f7f0 fb54 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[N_PID].I);           telemetryPrint(numberString);
 8015ee0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015ee8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8015eec:	4618      	mov	r0, r3
 8015eee:	f00a fc1d 	bl	802072c <__aeabi_f2d>
 8015ef2:	4602      	mov	r2, r0
 8015ef4:	460b      	mov	r3, r1
 8015ef6:	e9cd 2300 	strd	r2, r3, [sp]
 8015efa:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015efe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015f02:	f04f 0110 	mov.w	r1, #16
 8015f06:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015f0a:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015f0e:	f00b fb1b 	bl	8021548 <snprintf>
 8015f12:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015f16:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015f1a:	f7f0 fb35 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[N_PID].D);           telemetryPrint(numberString);
 8015f1e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015f26:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	f00a fbfe 	bl	802072c <__aeabi_f2d>
 8015f30:	4602      	mov	r2, r0
 8015f32:	460b      	mov	r3, r1
 8015f34:	e9cd 2300 	strd	r2, r3, [sp]
 8015f38:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015f3c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015f40:	f04f 0110 	mov.w	r1, #16
 8015f44:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015f48:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015f4c:	f00b fafc 	bl	8021548 <snprintf>
 8015f50:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015f54:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015f58:	f7f0 fb16 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[N_PID].windupGuard); telemetryPrint(numberString);
 8015f5c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015f64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015f68:	4618      	mov	r0, r3
 8015f6a:	f00a fbdf 	bl	802072c <__aeabi_f2d>
 8015f6e:	4602      	mov	r2, r0
 8015f70:	460b      	mov	r3, r1
 8015f72:	e9cd 2300 	strd	r2, r3, [sp]
 8015f76:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015f7a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015f7e:	f04f 0110 	mov.w	r1, #16
 8015f82:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015f86:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015f8a:	f00b fadd 	bl	8021548 <snprintf>
 8015f8e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015f92:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015f96:	f7f0 faf7 	bl	8006588 <telemetryPrint>
        if  (eepromConfig.PID[N_PID].dErrorCalc)
 8015f9a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015fa2:	f893 3224 	ldrb.w	r3, [r3, #548]	; 0x224
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d006      	beq.n	8015fb8 <rfCom+0x102c>
            telemetryPrint("Error\n");
 8015faa:	f64d 6028 	movw	r0, #56872	; 0xde28
 8015fae:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015fb2:	f7f0 fae9 	bl	8006588 <telemetryPrint>
 8015fb6:	e005      	b.n	8015fc4 <rfCom+0x1038>
        else
            telemetryPrint("State\n");
 8015fb8:	f64d 6030 	movw	r0, #56880	; 0xde30
 8015fbc:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015fc0:	f7f0 fae2 	bl	8006588 <telemetryPrint>

        telemetryPrint("e PID:  ");
 8015fc4:	f64d 60d8 	movw	r0, #57048	; 0xded8
 8015fc8:	f6c0 0002 	movt	r0, #2050	; 0x802
 8015fcc:	f7f0 fadc 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[E_PID].B);           telemetryPrint(numberString);
 8015fd0:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8015fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015fd8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f00a fba5 	bl	802072c <__aeabi_f2d>
 8015fe2:	4602      	mov	r2, r0
 8015fe4:	460b      	mov	r3, r1
 8015fe6:	e9cd 2300 	strd	r2, r3, [sp]
 8015fea:	f643 3078 	movw	r0, #15224	; 0x3b78
 8015fee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015ff2:	f04f 0110 	mov.w	r1, #16
 8015ff6:	f64d 6220 	movw	r2, #56864	; 0xde20
 8015ffa:	f6c0 0202 	movt	r2, #2050	; 0x802
 8015ffe:	f00b faa3 	bl	8021548 <snprintf>
 8016002:	f643 3078 	movw	r0, #15224	; 0x3b78
 8016006:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801600a:	f7f0 fabd 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[E_PID].P);           telemetryPrint(numberString);
 801600e:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8016012:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016016:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 801601a:	4618      	mov	r0, r3
 801601c:	f00a fb86 	bl	802072c <__aeabi_f2d>
 8016020:	4602      	mov	r2, r0
 8016022:	460b      	mov	r3, r1
 8016024:	e9cd 2300 	strd	r2, r3, [sp]
 8016028:	f643 3078 	movw	r0, #15224	; 0x3b78
 801602c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016030:	f04f 0110 	mov.w	r1, #16
 8016034:	f64d 6220 	movw	r2, #56864	; 0xde20
 8016038:	f6c0 0202 	movt	r2, #2050	; 0x802
 801603c:	f00b fa84 	bl	8021548 <snprintf>
 8016040:	f643 3078 	movw	r0, #15224	; 0x3b78
 8016044:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016048:	f7f0 fa9e 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[E_PID].I);           telemetryPrint(numberString);
 801604c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8016050:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016054:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8016058:	4618      	mov	r0, r3
 801605a:	f00a fb67 	bl	802072c <__aeabi_f2d>
 801605e:	4602      	mov	r2, r0
 8016060:	460b      	mov	r3, r1
 8016062:	e9cd 2300 	strd	r2, r3, [sp]
 8016066:	f643 3078 	movw	r0, #15224	; 0x3b78
 801606a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801606e:	f04f 0110 	mov.w	r1, #16
 8016072:	f64d 6220 	movw	r2, #56864	; 0xde20
 8016076:	f6c0 0202 	movt	r2, #2050	; 0x802
 801607a:	f00b fa65 	bl	8021548 <snprintf>
 801607e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8016082:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016086:	f7f0 fa7f 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[E_PID].D);           telemetryPrint(numberString);
 801608a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801608e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016092:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8016096:	4618      	mov	r0, r3
 8016098:	f00a fb48 	bl	802072c <__aeabi_f2d>
 801609c:	4602      	mov	r2, r0
 801609e:	460b      	mov	r3, r1
 80160a0:	e9cd 2300 	strd	r2, r3, [sp]
 80160a4:	f643 3078 	movw	r0, #15224	; 0x3b78
 80160a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80160ac:	f04f 0110 	mov.w	r1, #16
 80160b0:	f64d 6220 	movw	r2, #56864	; 0xde20
 80160b4:	f6c0 0202 	movt	r2, #2050	; 0x802
 80160b8:	f00b fa46 	bl	8021548 <snprintf>
 80160bc:	f643 3078 	movw	r0, #15224	; 0x3b78
 80160c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80160c4:	f7f0 fa60 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[E_PID].windupGuard); telemetryPrint(numberString);
 80160c8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80160cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80160d0:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 80160d4:	4618      	mov	r0, r3
 80160d6:	f00a fb29 	bl	802072c <__aeabi_f2d>
 80160da:	4602      	mov	r2, r0
 80160dc:	460b      	mov	r3, r1
 80160de:	e9cd 2300 	strd	r2, r3, [sp]
 80160e2:	f643 3078 	movw	r0, #15224	; 0x3b78
 80160e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80160ea:	f04f 0110 	mov.w	r1, #16
 80160ee:	f64d 6220 	movw	r2, #56864	; 0xde20
 80160f2:	f6c0 0202 	movt	r2, #2050	; 0x802
 80160f6:	f00b fa27 	bl	8021548 <snprintf>
 80160fa:	f643 3078 	movw	r0, #15224	; 0x3b78
 80160fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016102:	f7f0 fa41 	bl	8006588 <telemetryPrint>
        if  (eepromConfig.PID[E_PID].dErrorCalc)
 8016106:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801610a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801610e:	f893 324c 	ldrb.w	r3, [r3, #588]	; 0x24c
 8016112:	2b00      	cmp	r3, #0
 8016114:	d006      	beq.n	8016124 <rfCom+0x1198>
            telemetryPrint("Error\n");
 8016116:	f64d 6028 	movw	r0, #56872	; 0xde28
 801611a:	f6c0 0002 	movt	r0, #2050	; 0x802
 801611e:	f7f0 fa33 	bl	8006588 <telemetryPrint>
 8016122:	e005      	b.n	8016130 <rfCom+0x11a4>
        else
            telemetryPrint("State\n");
 8016124:	f64d 6030 	movw	r0, #56880	; 0xde30
 8016128:	f6c0 0002 	movt	r0, #2050	; 0x802
 801612c:	f7f0 fa2c 	bl	8006588 <telemetryPrint>

        telemetryPrint("h PID:  ");
 8016130:	f64d 60e4 	movw	r0, #57060	; 0xdee4
 8016134:	f6c0 0002 	movt	r0, #2050	; 0x802
 8016138:	f7f0 fa26 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[H_PID].B);           telemetryPrint(numberString);
 801613c:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8016140:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016144:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8016148:	4618      	mov	r0, r3
 801614a:	f00a faef 	bl	802072c <__aeabi_f2d>
 801614e:	4602      	mov	r2, r0
 8016150:	460b      	mov	r3, r1
 8016152:	e9cd 2300 	strd	r2, r3, [sp]
 8016156:	f643 3078 	movw	r0, #15224	; 0x3b78
 801615a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801615e:	f04f 0110 	mov.w	r1, #16
 8016162:	f64d 6220 	movw	r2, #56864	; 0xde20
 8016166:	f6c0 0202 	movt	r2, #2050	; 0x802
 801616a:	f00b f9ed 	bl	8021548 <snprintf>
 801616e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8016172:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016176:	f7f0 fa07 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[H_PID].P);           telemetryPrint(numberString);
 801617a:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 801617e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016182:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 8016186:	4618      	mov	r0, r3
 8016188:	f00a fad0 	bl	802072c <__aeabi_f2d>
 801618c:	4602      	mov	r2, r0
 801618e:	460b      	mov	r3, r1
 8016190:	e9cd 2300 	strd	r2, r3, [sp]
 8016194:	f643 3078 	movw	r0, #15224	; 0x3b78
 8016198:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801619c:	f04f 0110 	mov.w	r1, #16
 80161a0:	f64d 6220 	movw	r2, #56864	; 0xde20
 80161a4:	f6c0 0202 	movt	r2, #2050	; 0x802
 80161a8:	f00b f9ce 	bl	8021548 <snprintf>
 80161ac:	f643 3078 	movw	r0, #15224	; 0x3b78
 80161b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80161b4:	f7f0 f9e8 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[H_PID].I);           telemetryPrint(numberString);
 80161b8:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80161bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80161c0:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 80161c4:	4618      	mov	r0, r3
 80161c6:	f00a fab1 	bl	802072c <__aeabi_f2d>
 80161ca:	4602      	mov	r2, r0
 80161cc:	460b      	mov	r3, r1
 80161ce:	e9cd 2300 	strd	r2, r3, [sp]
 80161d2:	f643 3078 	movw	r0, #15224	; 0x3b78
 80161d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80161da:	f04f 0110 	mov.w	r1, #16
 80161de:	f64d 6220 	movw	r2, #56864	; 0xde20
 80161e2:	f6c0 0202 	movt	r2, #2050	; 0x802
 80161e6:	f00b f9af 	bl	8021548 <snprintf>
 80161ea:	f643 3078 	movw	r0, #15224	; 0x3b78
 80161ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80161f2:	f7f0 f9c9 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[H_PID].D);           telemetryPrint(numberString);
 80161f6:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 80161fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80161fe:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8016202:	4618      	mov	r0, r3
 8016204:	f00a fa92 	bl	802072c <__aeabi_f2d>
 8016208:	4602      	mov	r2, r0
 801620a:	460b      	mov	r3, r1
 801620c:	e9cd 2300 	strd	r2, r3, [sp]
 8016210:	f643 3078 	movw	r0, #15224	; 0x3b78
 8016214:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016218:	f04f 0110 	mov.w	r1, #16
 801621c:	f64d 6220 	movw	r2, #56864	; 0xde20
 8016220:	f6c0 0202 	movt	r2, #2050	; 0x802
 8016224:	f00b f990 	bl	8021548 <snprintf>
 8016228:	f643 3078 	movw	r0, #15224	; 0x3b78
 801622c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016230:	f7f0 f9aa 	bl	8006588 <telemetryPrint>
        snprintf(numberString, 16, "%8.4f, ", eepromConfig.PID[H_PID].windupGuard); telemetryPrint(numberString);
 8016234:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8016238:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801623c:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8016240:	4618      	mov	r0, r3
 8016242:	f00a fa73 	bl	802072c <__aeabi_f2d>
 8016246:	4602      	mov	r2, r0
 8016248:	460b      	mov	r3, r1
 801624a:	e9cd 2300 	strd	r2, r3, [sp]
 801624e:	f643 3078 	movw	r0, #15224	; 0x3b78
 8016252:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016256:	f04f 0110 	mov.w	r1, #16
 801625a:	f64d 6220 	movw	r2, #56864	; 0xde20
 801625e:	f6c0 0202 	movt	r2, #2050	; 0x802
 8016262:	f00b f971 	bl	8021548 <snprintf>
 8016266:	f643 3078 	movw	r0, #15224	; 0x3b78
 801626a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801626e:	f7f0 f98b 	bl	8006588 <telemetryPrint>
        if  (eepromConfig.PID[H_PID].dErrorCalc)
 8016272:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8016276:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801627a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801627e:	2b00      	cmp	r3, #0
 8016280:	d006      	beq.n	8016290 <rfCom+0x1304>
            telemetryPrint("Error\n");
 8016282:	f64d 6028 	movw	r0, #56872	; 0xde28
 8016286:	f6c0 0002 	movt	r0, #2050	; 0x802
 801628a:	f7f0 f97d 	bl	8006588 <telemetryPrint>
 801628e:	e005      	b.n	801629c <rfCom+0x1310>
        else
            telemetryPrint("State\n");
 8016290:	f64d 6030 	movw	r0, #56880	; 0xde30
 8016294:	f6c0 0002 	movt	r0, #2050	; 0x802
 8016298:	f7f0 f976 	bl	8006588 <telemetryPrint>

        rfQueryType = 'x';
 801629c:	f640 0306 	movw	r3, #2054	; 0x806
 80162a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80162a4:	f04f 0278 	mov.w	r2, #120	; 0x78
 80162a8:	701a      	strb	r2, [r3, #0]
        validRFCommand = false;
 80162aa:	f640 0307 	movw	r3, #2055	; 0x807
 80162ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80162b2:	f04f 0200 	mov.w	r2, #0
 80162b6:	701a      	strb	r2, [r3, #0]
        break;
 80162b8:	e24c      	b.n	8016754 <rfCom+0x17c8>
        	break;

        ///////////////////////////////

        case '1': // Turn high speed telemetry 1 on
        	highSpeedTelemDisable();
 80162ba:	f7f2 fd51 	bl	8008d60 <highSpeedTelemDisable>
          	highSpeedTelem1Enabled = true;
 80162be:	f240 73df 	movw	r3, #2015	; 0x7df
 80162c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80162c6:	f04f 0201 	mov.w	r2, #1
 80162ca:	701a      	strb	r2, [r3, #0]

        	rfQueryType = 'x';
 80162cc:	f640 0306 	movw	r3, #2054	; 0x806
 80162d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80162d4:	f04f 0278 	mov.w	r2, #120	; 0x78
 80162d8:	701a      	strb	r2, [r3, #0]
            break;
 80162da:	e23b      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case '2': // Turn high speed telemetry 2 on
           	highSpeedTelemDisable();
 80162dc:	f7f2 fd40 	bl	8008d60 <highSpeedTelemDisable>
           	highSpeedTelem2Enabled = true;
 80162e0:	f240 73e0 	movw	r3, #2016	; 0x7e0
 80162e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80162e8:	f04f 0201 	mov.w	r2, #1
 80162ec:	701a      	strb	r2, [r3, #0]

            rfQueryType = 'x';
 80162ee:	f640 0306 	movw	r3, #2054	; 0x806
 80162f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80162f6:	f04f 0278 	mov.w	r2, #120	; 0x78
 80162fa:	701a      	strb	r2, [r3, #0]
           	break;
 80162fc:	e22a      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case '3': // Turn high speed telemetry 3 on
           	highSpeedTelemDisable();
 80162fe:	f7f2 fd2f 	bl	8008d60 <highSpeedTelemDisable>
           	highSpeedTelem3Enabled = true;
 8016302:	f240 73e1 	movw	r3, #2017	; 0x7e1
 8016306:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801630a:	f04f 0201 	mov.w	r2, #1
 801630e:	701a      	strb	r2, [r3, #0]

            rfQueryType = 'x';
 8016310:	f640 0306 	movw	r3, #2054	; 0x806
 8016314:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016318:	f04f 0278 	mov.w	r2, #120	; 0x78
 801631c:	701a      	strb	r2, [r3, #0]
           	break;
 801631e:	e219      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case '4': // Turn high speed telemetry 4 on
           	highSpeedTelemDisable();
 8016320:	f7f2 fd1e 	bl	8008d60 <highSpeedTelemDisable>
           	highSpeedTelem4Enabled = true;
 8016324:	f240 73e2 	movw	r3, #2018	; 0x7e2
 8016328:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801632c:	f04f 0201 	mov.w	r2, #1
 8016330:	701a      	strb	r2, [r3, #0]

            rfQueryType = 'x';
 8016332:	f640 0306 	movw	r3, #2054	; 0x806
 8016336:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801633a:	f04f 0278 	mov.w	r2, #120	; 0x78
 801633e:	701a      	strb	r2, [r3, #0]
           	break;
 8016340:	e208      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case '5': // Turn high speed telemetry 5 on
           	highSpeedTelemDisable();
 8016342:	f7f2 fd0d 	bl	8008d60 <highSpeedTelemDisable>
           	highSpeedTelem5Enabled = true;
 8016346:	f240 73e3 	movw	r3, #2019	; 0x7e3
 801634a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801634e:	f04f 0201 	mov.w	r2, #1
 8016352:	701a      	strb	r2, [r3, #0]

            rfQueryType = 'x';
 8016354:	f640 0306 	movw	r3, #2054	; 0x806
 8016358:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801635c:	f04f 0278 	mov.w	r2, #120	; 0x78
 8016360:	701a      	strb	r2, [r3, #0]
           	break;
 8016362:	e1f7      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case '6': // Turn high speed telemetry 6 on
           	highSpeedTelemDisable();
 8016364:	f7f2 fcfc 	bl	8008d60 <highSpeedTelemDisable>
           	highSpeedTelem6Enabled = true;
 8016368:	f240 73e4 	movw	r3, #2020	; 0x7e4
 801636c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016370:	f04f 0201 	mov.w	r2, #1
 8016374:	701a      	strb	r2, [r3, #0]

            rfQueryType = 'x';
 8016376:	f640 0306 	movw	r3, #2054	; 0x806
 801637a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801637e:	f04f 0278 	mov.w	r2, #120	; 0x78
 8016382:	701a      	strb	r2, [r3, #0]
           	break;
 8016384:	e1e6      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case '7': // Turn high speed telemetry 7 on
           	highSpeedTelemDisable();
 8016386:	f7f2 fceb 	bl	8008d60 <highSpeedTelemDisable>
           	highSpeedTelem7Enabled = true;
 801638a:	f240 73e5 	movw	r3, #2021	; 0x7e5
 801638e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016392:	f04f 0201 	mov.w	r2, #1
 8016396:	701a      	strb	r2, [r3, #0]

            rfQueryType = 'x';
 8016398:	f640 0306 	movw	r3, #2054	; 0x806
 801639c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80163a0:	f04f 0278 	mov.w	r2, #120	; 0x78
 80163a4:	701a      	strb	r2, [r3, #0]
           	break;
 80163a6:	e1d5      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case '8': // Turn high speed telemetry 8 on
           	highSpeedTelemDisable();
 80163a8:	f7f2 fcda 	bl	8008d60 <highSpeedTelemDisable>
           	highSpeedTelem8Enabled = true;
 80163ac:	f240 73e6 	movw	r3, #2022	; 0x7e6
 80163b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80163b4:	f04f 0201 	mov.w	r2, #1
 80163b8:	701a      	strb	r2, [r3, #0]

            rfQueryType = 'x';
 80163ba:	f640 0306 	movw	r3, #2054	; 0x806
 80163be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80163c2:	f04f 0278 	mov.w	r2, #120	; 0x78
 80163c6:	701a      	strb	r2, [r3, #0]
           	break;
 80163c8:	e1c4      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case '9': // Turn high speed telemetry 9 on
           	highSpeedTelemDisable();
 80163ca:	f7f2 fcc9 	bl	8008d60 <highSpeedTelemDisable>
           	highSpeedTelem9Enabled = true;
 80163ce:	f240 73e7 	movw	r3, #2023	; 0x7e7
 80163d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80163d6:	f04f 0201 	mov.w	r2, #1
 80163da:	701a      	strb	r2, [r3, #0]

            rfQueryType = 'x';
 80163dc:	f640 0306 	movw	r3, #2054	; 0x806
 80163e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80163e4:	f04f 0278 	mov.w	r2, #120	; 0x78
 80163e8:	701a      	strb	r2, [r3, #0]
           	break;
 80163ea:	e1b3      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case '0': // Disable high speed telemetry 0
           	highSpeedTelemDisable();
 80163ec:	f7f2 fcb8 	bl	8008d60 <highSpeedTelemDisable>

            rfQueryType = 'x';
 80163f0:	f640 0306 	movw	r3, #2054	; 0x806
 80163f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80163f8:	f04f 0278 	mov.w	r2, #120	; 0x78
 80163fc:	701a      	strb	r2, [r3, #0]
           	break;
 80163fe:	e1a9      	b.n	8016754 <rfCom+0x17c8>
        ///////////////////////////////////////////////////////////////////////

        ///////////////////////////////

        case 'A': // Read Roll Rate PID Values
            readRFPID(ROLL_RATE_PID);
 8016400:	f04f 0000 	mov.w	r0, #0
 8016404:	f7fe fd7a 	bl	8014efc <readRFPID>
            telemetryPrint( "\nRoll Rate PID Received....\n" );
 8016408:	f64d 60f0 	movw	r0, #57072	; 0xdef0
 801640c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8016410:	f7f0 f8ba 	bl	8006588 <telemetryPrint>

        	rfQueryType = 'a';
 8016414:	f640 0306 	movw	r3, #2054	; 0x806
 8016418:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801641c:	f04f 0261 	mov.w	r2, #97	; 0x61
 8016420:	701a      	strb	r2, [r3, #0]
        	validRFCommand = true;
 8016422:	f640 0307 	movw	r3, #2055	; 0x807
 8016426:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801642a:	f04f 0201 	mov.w	r2, #1
 801642e:	701a      	strb	r2, [r3, #0]
        	break;
 8016430:	e190      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case 'B': // Read Pitch Rate PID Values
            readRFPID(PITCH_RATE_PID);
 8016432:	f04f 0001 	mov.w	r0, #1
 8016436:	f7fe fd61 	bl	8014efc <readRFPID>
            telemetryPrint( "\nPitch Rate PID Received....\n" );
 801643a:	f64d 7010 	movw	r0, #57104	; 0xdf10
 801643e:	f6c0 0002 	movt	r0, #2050	; 0x802
 8016442:	f7f0 f8a1 	bl	8006588 <telemetryPrint>

        	rfQueryType = 'a';
 8016446:	f640 0306 	movw	r3, #2054	; 0x806
 801644a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801644e:	f04f 0261 	mov.w	r2, #97	; 0x61
 8016452:	701a      	strb	r2, [r3, #0]
        	validRFCommand = true;
 8016454:	f640 0307 	movw	r3, #2055	; 0x807
 8016458:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801645c:	f04f 0201 	mov.w	r2, #1
 8016460:	701a      	strb	r2, [r3, #0]
        	break;
 8016462:	e177      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case 'C': // Read Yaw Rate PID Values
            readRFPID(YAW_RATE_PID);
 8016464:	f04f 0002 	mov.w	r0, #2
 8016468:	f7fe fd48 	bl	8014efc <readRFPID>
            telemetryPrint( "\nYaw Rate PID Received....\n" );
 801646c:	f64d 7030 	movw	r0, #57136	; 0xdf30
 8016470:	f6c0 0002 	movt	r0, #2050	; 0x802
 8016474:	f7f0 f888 	bl	8006588 <telemetryPrint>

        	rfQueryType = 'a';
 8016478:	f640 0306 	movw	r3, #2054	; 0x806
 801647c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016480:	f04f 0261 	mov.w	r2, #97	; 0x61
 8016484:	701a      	strb	r2, [r3, #0]
        	validRFCommand = true;
 8016486:	f640 0307 	movw	r3, #2055	; 0x807
 801648a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801648e:	f04f 0201 	mov.w	r2, #1
 8016492:	701a      	strb	r2, [r3, #0]
        	break;
 8016494:	e15e      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case 'D': // Read Roll Attitude PID Values
            readRFPID(ROLL_ATT_PID);
 8016496:	f04f 0003 	mov.w	r0, #3
 801649a:	f7fe fd2f 	bl	8014efc <readRFPID>
            telemetryPrint( "\nRoll Attitude PID Received....\n" );
 801649e:	f64d 704c 	movw	r0, #57164	; 0xdf4c
 80164a2:	f6c0 0002 	movt	r0, #2050	; 0x802
 80164a6:	f7f0 f86f 	bl	8006588 <telemetryPrint>

        	rfQueryType = 'b';
 80164aa:	f640 0306 	movw	r3, #2054	; 0x806
 80164ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80164b2:	f04f 0262 	mov.w	r2, #98	; 0x62
 80164b6:	701a      	strb	r2, [r3, #0]
        	validRFCommand = true;
 80164b8:	f640 0307 	movw	r3, #2055	; 0x807
 80164bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80164c0:	f04f 0201 	mov.w	r2, #1
 80164c4:	701a      	strb	r2, [r3, #0]
        	break;
 80164c6:	e145      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case 'E': // Read Pitch Attitude PID Values
            readRFPID(PITCH_ATT_PID);
 80164c8:	f04f 0004 	mov.w	r0, #4
 80164cc:	f7fe fd16 	bl	8014efc <readRFPID>
            telemetryPrint( "\nPitch Attitude PID Received....\n" );
 80164d0:	f64d 7070 	movw	r0, #57200	; 0xdf70
 80164d4:	f6c0 0002 	movt	r0, #2050	; 0x802
 80164d8:	f7f0 f856 	bl	8006588 <telemetryPrint>

        	rfQueryType = 'b';
 80164dc:	f640 0306 	movw	r3, #2054	; 0x806
 80164e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80164e4:	f04f 0262 	mov.w	r2, #98	; 0x62
 80164e8:	701a      	strb	r2, [r3, #0]
        	validRFCommand = true;
 80164ea:	f640 0307 	movw	r3, #2055	; 0x807
 80164ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80164f2:	f04f 0201 	mov.w	r2, #1
 80164f6:	701a      	strb	r2, [r3, #0]
        	break;
 80164f8:	e12c      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case 'F': // Read Heading Hold PID Values
            readRFPID(HEADING_PID);
 80164fa:	f04f 0005 	mov.w	r0, #5
 80164fe:	f7fe fcfd 	bl	8014efc <readRFPID>
            telemetryPrint( "\nHeading PID Received....\n" );
 8016502:	f64d 7094 	movw	r0, #57236	; 0xdf94
 8016506:	f6c0 0002 	movt	r0, #2050	; 0x802
 801650a:	f7f0 f83d 	bl	8006588 <telemetryPrint>

        	rfQueryType = 'b';
 801650e:	f640 0306 	movw	r3, #2054	; 0x806
 8016512:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016516:	f04f 0262 	mov.w	r2, #98	; 0x62
 801651a:	701a      	strb	r2, [r3, #0]
        	validRFCommand = true;
 801651c:	f640 0307 	movw	r3, #2055	; 0x807
 8016520:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016524:	f04f 0201 	mov.w	r2, #1
 8016528:	701a      	strb	r2, [r3, #0]
        	break;
 801652a:	e113      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case 'G': // Read nDot PID Values
            readRFPID(NDOT_PID);
 801652c:	f04f 0006 	mov.w	r0, #6
 8016530:	f7fe fce4 	bl	8014efc <readRFPID>
            telemetryPrint( "\nnDot PID Received....\n" );
 8016534:	f64d 70b0 	movw	r0, #57264	; 0xdfb0
 8016538:	f6c0 0002 	movt	r0, #2050	; 0x802
 801653c:	f7f0 f824 	bl	8006588 <telemetryPrint>

        	rfQueryType = 'c';
 8016540:	f640 0306 	movw	r3, #2054	; 0x806
 8016544:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016548:	f04f 0263 	mov.w	r2, #99	; 0x63
 801654c:	701a      	strb	r2, [r3, #0]
        	validRFCommand = true;
 801654e:	f640 0307 	movw	r3, #2055	; 0x807
 8016552:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016556:	f04f 0201 	mov.w	r2, #1
 801655a:	701a      	strb	r2, [r3, #0]
        	break;
 801655c:	e0fa      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case 'H': // Read eDot PID Values
            readRFPID(EDOT_PID);
 801655e:	f04f 0007 	mov.w	r0, #7
 8016562:	f7fe fccb 	bl	8014efc <readRFPID>
            telemetryPrint( "\neDot PID Received....\n" );
 8016566:	f64d 70c8 	movw	r0, #57288	; 0xdfc8
 801656a:	f6c0 0002 	movt	r0, #2050	; 0x802
 801656e:	f7f0 f80b 	bl	8006588 <telemetryPrint>

            rfQueryType = 'c';
 8016572:	f640 0306 	movw	r3, #2054	; 0x806
 8016576:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801657a:	f04f 0263 	mov.w	r2, #99	; 0x63
 801657e:	701a      	strb	r2, [r3, #0]
            validRFCommand = true;
 8016580:	f640 0307 	movw	r3, #2055	; 0x807
 8016584:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016588:	f04f 0201 	mov.w	r2, #1
 801658c:	701a      	strb	r2, [r3, #0]
            break;
 801658e:	e0e1      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case 'I': // Read hDot PID Values
            readRFPID(HDOT_PID);
 8016590:	f04f 0008 	mov.w	r0, #8
 8016594:	f7fe fcb2 	bl	8014efc <readRFPID>
            telemetryPrint( "\nhDot PID Received....\n" );
 8016598:	f64d 70e0 	movw	r0, #57312	; 0xdfe0
 801659c:	f6c0 0002 	movt	r0, #2050	; 0x802
 80165a0:	f7ef fff2 	bl	8006588 <telemetryPrint>

          	rfQueryType = 'c';
 80165a4:	f640 0306 	movw	r3, #2054	; 0x806
 80165a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80165ac:	f04f 0263 	mov.w	r2, #99	; 0x63
 80165b0:	701a      	strb	r2, [r3, #0]
          	validRFCommand = true;
 80165b2:	f640 0307 	movw	r3, #2055	; 0x807
 80165b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80165ba:	f04f 0201 	mov.w	r2, #1
 80165be:	701a      	strb	r2, [r3, #0]
          	break;
 80165c0:	e0c8      	b.n	8016754 <rfCom+0x17c8>

       	///////////////////////////////

        case 'J': // Read n PID Values
            readRFPID(N_PID);
 80165c2:	f04f 0009 	mov.w	r0, #9
 80165c6:	f7fe fc99 	bl	8014efc <readRFPID>
            telemetryPrint( "\nn PID Received....\n" );
 80165ca:	f64d 70f8 	movw	r0, #57336	; 0xdff8
 80165ce:	f6c0 0002 	movt	r0, #2050	; 0x802
 80165d2:	f7ef ffd9 	bl	8006588 <telemetryPrint>

            rfQueryType = 'd';
 80165d6:	f640 0306 	movw	r3, #2054	; 0x806
 80165da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80165de:	f04f 0264 	mov.w	r2, #100	; 0x64
 80165e2:	701a      	strb	r2, [r3, #0]
            validRFCommand = true;
 80165e4:	f640 0307 	movw	r3, #2055	; 0x807
 80165e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80165ec:	f04f 0201 	mov.w	r2, #1
 80165f0:	701a      	strb	r2, [r3, #0]
            break;
 80165f2:	e0af      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case 'K': // Read e PID Values
            readRFPID(E_PID);
 80165f4:	f04f 000a 	mov.w	r0, #10
 80165f8:	f7fe fc80 	bl	8014efc <readRFPID>
            telemetryPrint( "\ne PID Received....\n" );
 80165fc:	f24e 0010 	movw	r0, #57360	; 0xe010
 8016600:	f6c0 0002 	movt	r0, #2050	; 0x802
 8016604:	f7ef ffc0 	bl	8006588 <telemetryPrint>

            rfQueryType = 'd';
 8016608:	f640 0306 	movw	r3, #2054	; 0x806
 801660c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016610:	f04f 0264 	mov.w	r2, #100	; 0x64
 8016614:	701a      	strb	r2, [r3, #0]
            validRFCommand = true;
 8016616:	f640 0307 	movw	r3, #2055	; 0x807
 801661a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801661e:	f04f 0201 	mov.w	r2, #1
 8016622:	701a      	strb	r2, [r3, #0]
            break;
 8016624:	e096      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case 'L': // Read h PID Values
            readRFPID(H_PID);
 8016626:	f04f 000b 	mov.w	r0, #11
 801662a:	f7fe fc67 	bl	8014efc <readRFPID>
            telemetryPrint( "\nh PID Received....\n" );
 801662e:	f24e 0028 	movw	r0, #57384	; 0xe028
 8016632:	f6c0 0002 	movt	r0, #2050	; 0x802
 8016636:	f7ef ffa7 	bl	8006588 <telemetryPrint>

            rfQueryType = 'd';
 801663a:	f640 0306 	movw	r3, #2054	; 0x806
 801663e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016642:	f04f 0264 	mov.w	r2, #100	; 0x64
 8016646:	701a      	strb	r2, [r3, #0]
            validRFCommand = true;
 8016648:	f640 0307 	movw	r3, #2055	; 0x807
 801664c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016650:	f04f 0201 	mov.w	r2, #1
 8016654:	701a      	strb	r2, [r3, #0]
            break;
 8016656:	e07d      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case 'W': // Write EEPROM Parameters
            telemetryPrint("\nWriting EEPROM Parameters....\n");
 8016658:	f24e 0040 	movw	r0, #57408	; 0xe040
 801665c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8016660:	f7ef ff92 	bl	8006588 <telemetryPrint>
            writeEEPROM();
 8016664:	f7f8 f950 	bl	800e908 <writeEEPROM>

            rfQueryType = 'x';
 8016668:	f640 0306 	movw	r3, #2054	; 0x806
 801666c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016670:	f04f 0278 	mov.w	r2, #120	; 0x78
 8016674:	701a      	strb	r2, [r3, #0]
         	break;
 8016676:	e06d      	b.n	8016754 <rfCom+0x17c8>

        ///////////////////////////////

        case '?': // Command Summary

        	telemetryPrint("\n");
 8016678:	f64d 6008 	movw	r0, #56840	; 0xde08
 801667c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8016680:	f7ef ff82 	bl	8006588 <telemetryPrint>
        	telemetryPrint("'a' Rate PIDs                              'A' Set Roll Rate PID Data   AB;P;I;D;windupGuard;dErrorCalc\n");
 8016684:	f24e 0060 	movw	r0, #57440	; 0xe060
 8016688:	f6c0 0002 	movt	r0, #2050	; 0x802
 801668c:	f7ef ff7c 	bl	8006588 <telemetryPrint>
   		    telemetryPrint("'b' Attitude PIDs                          'B' Set Pitch Rate PID Data  BB;P;I;D;windupGuard;dErrorCalc\n");
 8016690:	f24e 00cc 	movw	r0, #57548	; 0xe0cc
 8016694:	f6c0 0002 	movt	r0, #2050	; 0x802
 8016698:	f7ef ff76 	bl	8006588 <telemetryPrint>
   		    telemetryPrint("'c' Velocity PIDs                          'C' Set Yaw Rate PID Data    CB;P;I;D;windupGuard;dErrorCalc\n");
 801669c:	f24e 1038 	movw	r0, #57656	; 0xe138
 80166a0:	f6c0 0002 	movt	r0, #2050	; 0x802
 80166a4:	f7ef ff70 	bl	8006588 <telemetryPrint>
   		    telemetryPrint("'d' Position PIDs                          'D' Set Roll Att PID Data    DB;P;I;D;windupGuard;dErrorCalc\n");
 80166a8:	f24e 10a4 	movw	r0, #57764	; 0xe1a4
 80166ac:	f6c0 0002 	movt	r0, #2050	; 0x802
 80166b0:	f7ef ff6a 	bl	8006588 <telemetryPrint>
   		    telemetryPrint("'x' Terminate Serial Communication         'E' Set Pitch Att PID Data   EB;P;I;D;windupGuard;dErrorCalc\n");
 80166b4:	f24e 2010 	movw	r0, #57872	; 0xe210
 80166b8:	f6c0 0002 	movt	r0, #2050	; 0x802
 80166bc:	f7ef ff64 	bl	8006588 <telemetryPrint>
   		    telemetryPrint("'1' High Speed Telemetry 1 Enable          'F' Set Hdg Hold PID Data    FB;P;I;D;windupGuard;dErrorCalc\n");
 80166c0:	f24e 207c 	movw	r0, #57980	; 0xe27c
 80166c4:	f6c0 0002 	movt	r0, #2050	; 0x802
 80166c8:	f7ef ff5e 	bl	8006588 <telemetryPrint>
   		    telemetryPrint("'2' High Speed Telemetry 2 Enable          'G' Set nDot PID Data        GB;P;I;D;windupGuard;dErrorCalc\n");
 80166cc:	f24e 20e8 	movw	r0, #58088	; 0xe2e8
 80166d0:	f6c0 0002 	movt	r0, #2050	; 0x802
 80166d4:	f7ef ff58 	bl	8006588 <telemetryPrint>
   		    telemetryPrint("'3' High Speed Telemetry 3 Enable          'H' Set eDot PID Data        HB;P;I;D;windupGuard;dErrorCalc\n");
 80166d8:	f24e 3054 	movw	r0, #58196	; 0xe354
 80166dc:	f6c0 0002 	movt	r0, #2050	; 0x802
 80166e0:	f7ef ff52 	bl	8006588 <telemetryPrint>
   		    telemetryPrint("'4' High Speed Telemetry 4 Enable          'I' Set hDot PID Data        IB;P;I;D;windupGuard;dErrorCalc\n");
 80166e4:	f24e 30c0 	movw	r0, #58304	; 0xe3c0
 80166e8:	f6c0 0002 	movt	r0, #2050	; 0x802
 80166ec:	f7ef ff4c 	bl	8006588 <telemetryPrint>
   		    telemetryPrint("'5' High Speed Telemetry 5 Enable          'J' Set n PID Data           JB;P;I;D;windupGuard;dErrorCalc\n");
 80166f0:	f24e 402c 	movw	r0, #58412	; 0xe42c
 80166f4:	f6c0 0002 	movt	r0, #2050	; 0x802
 80166f8:	f7ef ff46 	bl	8006588 <telemetryPrint>
   		    telemetryPrint("'6' High Speed Telemetry 6 Enable          'K' Set e PID Data           KB;P;I;D;windupGuard;dErrorCalc\n");
 80166fc:	f24e 4098 	movw	r0, #58520	; 0xe498
 8016700:	f6c0 0002 	movt	r0, #2050	; 0x802
 8016704:	f7ef ff40 	bl	8006588 <telemetryPrint>
   		    telemetryPrint("'7' High Speed Telemetry 7 Enable          'L' Set h PID Data           LB;P;I;D;windupGuard;dErrorCalc\n");
 8016708:	f24e 5004 	movw	r0, #58628	; 0xe504
 801670c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8016710:	f7ef ff3a 	bl	8006588 <telemetryPrint>
		   	telemetryPrint("'8' High Speed Telemetry 8 Enable          'W' Write EEPROM Parameters\n");
 8016714:	f24e 5070 	movw	r0, #58736	; 0xe570
 8016718:	f6c0 0002 	movt	r0, #2050	; 0x802
 801671c:	f7ef ff34 	bl	8006588 <telemetryPrint>
		   	telemetryPrint("'9' High Speed Telemetry 9 Enable\n");
 8016720:	f24e 50b8 	movw	r0, #58808	; 0xe5b8
 8016724:	f6c0 0002 	movt	r0, #2050	; 0x802
 8016728:	f7ef ff2e 	bl	8006588 <telemetryPrint>
		   	telemetryPrint("'0' High Speed Telemetry Disable           '?' Command Summary\n");
 801672c:	f24e 50dc 	movw	r0, #58844	; 0xe5dc
 8016730:	f6c0 0002 	movt	r0, #2050	; 0x802
 8016734:	f7ef ff28 	bl	8006588 <telemetryPrint>
   		    telemetryPrint("\n");
 8016738:	f64d 6008 	movw	r0, #56840	; 0xde08
 801673c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8016740:	f7ef ff22 	bl	8006588 <telemetryPrint>

  		    rfQueryType = 'x';
 8016744:	f640 0306 	movw	r3, #2054	; 0x806
 8016748:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801674c:	f04f 0278 	mov.w	r2, #120	; 0x78
 8016750:	701a      	strb	r2, [r3, #0]
  		    break;
 8016752:	bf00      	nop

            ///////////////////////////////
    }
}
 8016754:	b003      	add	sp, #12
 8016756:	bd00      	pop	{pc}

08016758 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8016758:	4770      	bx	lr
 801675a:	bf00      	nop

0801675c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 801675c:	e7fe      	b.n	801675c <HardFault_Handler>
 801675e:	bf00      	nop

08016760 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8016760:	e7fe      	b.n	8016760 <MemManage_Handler>
 8016762:	bf00      	nop

08016764 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8016764:	e7fe      	b.n	8016764 <BusFault_Handler>
 8016766:	bf00      	nop

08016768 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8016768:	e7fe      	b.n	8016768 <UsageFault_Handler>
 801676a:	bf00      	nop

0801676c <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 801676c:	4770      	bx	lr
 801676e:	bf00      	nop

08016770 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8016770:	4770      	bx	lr
 8016772:	bf00      	nop

08016774 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8016774:	4770      	bx	lr
 8016776:	bf00      	nop

08016778 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8016778:	b508      	push	{r3, lr}
  /* FPU settings ------------------------------------------------------------*/
  // HJI #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801677a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 801677e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8016782:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8016786:	f2ce 0200 	movt	r2, #57344	; 0xe000
 801678a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 801678e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8016792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  // HJI #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8016796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801679a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801679e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80167a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80167a6:	6812      	ldr	r2, [r2, #0]
 80167a8:	f042 0201 	orr.w	r2, r2, #1
 80167ac:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80167ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80167b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80167b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80167ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80167be:	6859      	ldr	r1, [r3, #4]
 80167c0:	f24c 030c 	movw	r3, #49164	; 0xc00c
 80167c4:	f6cf 037f 	movt	r3, #63615	; 0xf87f
 80167c8:	400b      	ands	r3, r1
 80167ca:	6053      	str	r3, [r2, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80167cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80167d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80167d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80167d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80167dc:	6812      	ldr	r2, [r2, #0]
 80167de:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80167e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80167e6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80167e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80167ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80167f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80167f4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80167f8:	6812      	ldr	r2, [r2, #0]
 80167fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80167fe:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8016800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016804:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016808:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801680c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8016810:	6852      	ldr	r2, [r2, #4]
 8016812:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8016816:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8016818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801681c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016820:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016824:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8016828:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801682a:	f022 020f 	bic.w	r2, r2, #15
 801682e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8016830:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016834:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8016838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801683c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016840:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8016842:	f64f 43cc 	movw	r3, #64716	; 0xfccc
 8016846:	f6cf 7300 	movt	r3, #65280	; 0xff00
 801684a:	400b      	ands	r3, r1
 801684c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 801684e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016852:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016856:	f04f 0200 	mov.w	r2, #0
 801685a:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors,
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 801685c:	f000 f8a2 	bl	80169a4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8016860:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8016864:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8016868:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801686c:	609a      	str	r2, [r3, #8]
#endif
}
 801686e:	bd08      	pop	{r3, pc}

08016870 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8016870:	b084      	sub	sp, #16
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 8016872:	f04f 0300 	mov.w	r3, #0
 8016876:	9303      	str	r3, [sp, #12]
 8016878:	f04f 0300 	mov.w	r3, #0
 801687c:	9302      	str	r3, [sp, #8]
 801687e:	f04f 0300 	mov.w	r3, #0
 8016882:	9301      	str	r3, [sp, #4]
 8016884:	f04f 0300 	mov.w	r3, #0
 8016888:	9300      	str	r3, [sp, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 801688a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801688e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016892:	685b      	ldr	r3, [r3, #4]
 8016894:	f003 030c 	and.w	r3, r3, #12
 8016898:	9303      	str	r3, [sp, #12]

  switch (tmp)
 801689a:	9b03      	ldr	r3, [sp, #12]
 801689c:	2b04      	cmp	r3, #4
 801689e:	d00d      	beq.n	80168bc <SystemCoreClockUpdate+0x4c>
 80168a0:	2b08      	cmp	r3, #8
 80168a2:	d015      	beq.n	80168d0 <SystemCoreClockUpdate+0x60>
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d153      	bne.n	8016950 <SystemCoreClockUpdate+0xe0>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80168a8:	f240 03e0 	movw	r3, #224	; 0xe0
 80168ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80168b0:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 80168b4:	f2c0 027a 	movt	r2, #122	; 0x7a
 80168b8:	601a      	str	r2, [r3, #0]
      break;
 80168ba:	e053      	b.n	8016964 <SystemCoreClockUpdate+0xf4>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80168bc:	f240 03e0 	movw	r3, #224	; 0xe0
 80168c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80168c4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 80168c8:	f2c0 027a 	movt	r2, #122	; 0x7a
 80168cc:	601a      	str	r2, [r3, #0]
      break;
 80168ce:	e049      	b.n	8016964 <SystemCoreClockUpdate+0xf4>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80168d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80168d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80168d8:	685b      	ldr	r3, [r3, #4]
 80168da:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80168de:	9302      	str	r3, [sp, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80168e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80168e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80168e8:	685b      	ldr	r3, [r3, #4]
 80168ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80168ee:	9301      	str	r3, [sp, #4]
      pllmull = ( pllmull >> 18) + 2;
 80168f0:	9b02      	ldr	r3, [sp, #8]
 80168f2:	ea4f 4393 	mov.w	r3, r3, lsr #18
 80168f6:	f103 0302 	add.w	r3, r3, #2
 80168fa:	9302      	str	r3, [sp, #8]

      if (pllsource == 0x00)
 80168fc:	9b01      	ldr	r3, [sp, #4]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d10c      	bne.n	801691c <SystemCoreClockUpdate+0xac>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8016902:	9a02      	ldr	r2, [sp, #8]
 8016904:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8016908:	f2c0 033d 	movt	r3, #61	; 0x3d
 801690c:	fb03 f202 	mul.w	r2, r3, r2
 8016910:	f240 03e0 	movw	r3, #224	; 0xe0
 8016914:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016918:	601a      	str	r2, [r3, #0]
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
      }
      break;
 801691a:	e023      	b.n	8016964 <SystemCoreClockUpdate+0xf4>
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 801691c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016920:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016926:	f003 030f 	and.w	r3, r3, #15
 801692a:	f103 0301 	add.w	r3, r3, #1
 801692e:	9300      	str	r3, [sp, #0]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 8016930:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8016934:	f2c0 037a 	movt	r3, #122	; 0x7a
 8016938:	9a00      	ldr	r2, [sp, #0]
 801693a:	fbb3 f3f2 	udiv	r3, r3, r2
 801693e:	9a02      	ldr	r2, [sp, #8]
 8016940:	fb02 f203 	mul.w	r2, r2, r3
 8016944:	f240 03e0 	movw	r3, #224	; 0xe0
 8016948:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801694c:	601a      	str	r2, [r3, #0]
      }
      break;
 801694e:	e009      	b.n	8016964 <SystemCoreClockUpdate+0xf4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8016950:	f240 03e0 	movw	r3, #224	; 0xe0
 8016954:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016958:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 801695c:	f2c0 027a 	movt	r2, #122	; 0x7a
 8016960:	601a      	str	r2, [r3, #0]
      break;
 8016962:	bf00      	nop
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8016964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016968:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801696c:	685b      	ldr	r3, [r3, #4]
 801696e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016972:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8016976:	f240 03e4 	movw	r3, #228	; 0xe4
 801697a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801697e:	5c9b      	ldrb	r3, [r3, r2]
 8016980:	b2db      	uxtb	r3, r3
 8016982:	9303      	str	r3, [sp, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8016984:	f240 03e0 	movw	r3, #224	; 0xe0
 8016988:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801698c:	681a      	ldr	r2, [r3, #0]
 801698e:	9b03      	ldr	r3, [sp, #12]
 8016990:	fa22 f203 	lsr.w	r2, r2, r3
 8016994:	f240 03e0 	movw	r3, #224	; 0xe0
 8016998:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801699c:	601a      	str	r2, [r3, #0]
}
 801699e:	b004      	add	sp, #16
 80169a0:	4770      	bx	lr
 80169a2:	bf00      	nop

080169a4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80169a4:	b082      	sub	sp, #8
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80169a6:	f04f 0300 	mov.w	r3, #0
 80169aa:	9301      	str	r3, [sp, #4]
 80169ac:	f04f 0300 	mov.w	r3, #0
 80169b0:	9300      	str	r3, [sp, #0]
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration -----------*/
  /* Enable HSE */
  RCC->CR |= (uint32_t)(RCC_CR_HSEON | RCC_CR_HSEBYP);
 80169b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80169b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80169ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80169be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80169c2:	6812      	ldr	r2, [r2, #0]
 80169c4:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 80169c8:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80169ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80169ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80169d8:	9300      	str	r3, [sp, #0]
    StartUpCounter++;
 80169da:	9b01      	ldr	r3, [sp, #4]
 80169dc:	f103 0301 	add.w	r3, r3, #1
 80169e0:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80169e2:	9b00      	ldr	r3, [sp, #0]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d103      	bne.n	80169f0 <SetSysClock+0x4c>
 80169e8:	9b01      	ldr	r3, [sp, #4]
 80169ea:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80169ee:	d1ec      	bne.n	80169ca <SetSysClock+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80169f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80169f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d003      	beq.n	8016a0a <SetSysClock+0x66>
  {
    HSEStatus = (uint32_t)0x01;
 8016a02:	f04f 0301 	mov.w	r3, #1
 8016a06:	9300      	str	r3, [sp, #0]
 8016a08:	e002      	b.n	8016a10 <SetSysClock+0x6c>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8016a0a:	f04f 0300 	mov.w	r3, #0
 8016a0e:	9300      	str	r3, [sp, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8016a10:	9b00      	ldr	r3, [sp, #0]
 8016a12:	2b01      	cmp	r3, #1
 8016a14:	d178      	bne.n	8016b08 <SetSysClock+0x164>
  {
    /* Disable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = (uint32_t)FLASH_ACR_LATENCY_1;
 8016a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016a1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016a1e:	f04f 0202 	mov.w	r2, #2
 8016a22:	601a      	str	r2, [r3, #0]

     /* HCLK = SYSCLK / 1 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8016a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016a28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016a2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016a30:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8016a34:	6852      	ldr	r2, [r2, #4]
 8016a36:	605a      	str	r2, [r3, #4]

     /* PCLK2 = HCLK / 2 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV2;
 8016a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016a3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016a40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016a44:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8016a48:	6852      	ldr	r2, [r2, #4]
 8016a4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8016a4e:	605a      	str	r2, [r3, #4]

     /* PCLK1 = HCLK / 2 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8016a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016a58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8016a60:	6852      	ldr	r2, [r2, #4]
 8016a62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8016a66:	605a      	str	r2, [r3, #4]

    /* PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8016a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016a6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016a70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016a74:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8016a78:	6852      	ldr	r2, [r2, #4]
 8016a7a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8016a7e:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL9);
 8016a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016a84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016a88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016a8c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8016a90:	6852      	ldr	r2, [r2, #4]
 8016a92:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8016a96:	605a      	str	r2, [r3, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8016a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016a9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016aa0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016aa4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8016aa8:	6812      	ldr	r2, [r2, #0]
 8016aaa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8016aae:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8016ab0:	bf00      	nop
 8016ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016ab6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d0f6      	beq.n	8016ab2 <SetSysClock+0x10e>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8016ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016ac8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016acc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016ad0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8016ad4:	6852      	ldr	r2, [r2, #4]
 8016ad6:	f022 0203 	bic.w	r2, r2, #3
 8016ada:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8016adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016ae4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016ae8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8016aec:	6852      	ldr	r2, [r2, #4]
 8016aee:	f042 0202 	orr.w	r2, r2, #2
 8016af2:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8016af4:	bf00      	nop
 8016af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016afa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016afe:	685b      	ldr	r3, [r3, #4]
 8016b00:	f003 030c 	and.w	r3, r3, #12
 8016b04:	2b08      	cmp	r3, #8
 8016b06:	d1f6      	bne.n	8016af6 <SetSysClock+0x152>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 8016b08:	b002      	add	sp, #8
 8016b0a:	4770      	bx	lr
 8016b0c:	0000      	movs	r0, r0
	...

08016b10 <constrain>:
///////////////////////////////////////////////////////////////////////////////
// Constrain
///////////////////////////////////////////////////////////////////////////////

float constrain(float input, float minValue, float maxValue)
{
 8016b10:	b084      	sub	sp, #16
 8016b12:	9003      	str	r0, [sp, #12]
 8016b14:	9102      	str	r1, [sp, #8]
 8016b16:	9201      	str	r2, [sp, #4]
    if (input < minValue)
 8016b18:	ed9d 7a03 	vldr	s14, [sp, #12]
 8016b1c:	eddd 7a02 	vldr	s15, [sp, #8]
 8016b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b28:	bf54      	ite	pl
 8016b2a:	2300      	movpl	r3, #0
 8016b2c:	2301      	movmi	r3, #1
 8016b2e:	b2db      	uxtb	r3, r3
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d001      	beq.n	8016b38 <constrain+0x28>
        return minValue;
 8016b34:	9b02      	ldr	r3, [sp, #8]
 8016b36:	e010      	b.n	8016b5a <constrain+0x4a>
    else if (input > maxValue)
 8016b38:	ed9d 7a03 	vldr	s14, [sp, #12]
 8016b3c:	eddd 7a01 	vldr	s15, [sp, #4]
 8016b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b48:	bfd4      	ite	le
 8016b4a:	2300      	movle	r3, #0
 8016b4c:	2301      	movgt	r3, #1
 8016b4e:	b2db      	uxtb	r3, r3
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d001      	beq.n	8016b58 <constrain+0x48>
        return maxValue;
 8016b54:	9b01      	ldr	r3, [sp, #4]
 8016b56:	e000      	b.n	8016b5a <constrain+0x4a>
    else
        return input;
 8016b58:	9b03      	ldr	r3, [sp, #12]
}
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	b004      	add	sp, #16
 8016b5e:	4770      	bx	lr

08016b60 <GPIO_ToggleBits>:
///////////////////////////////////////////////////////////////////////////////
// GPIO_ToggleBits
///////////////////////////////////////////////////////////////////////////////

void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8016b60:	b082      	sub	sp, #8
 8016b62:	9001      	str	r0, [sp, #4]
 8016b64:	460b      	mov	r3, r1
 8016b66:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8016b6a:	9b01      	ldr	r3, [sp, #4]
 8016b6c:	8a9b      	ldrh	r3, [r3, #20]
 8016b6e:	b29a      	uxth	r2, r3
 8016b70:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016b74:	4053      	eors	r3, r2
 8016b76:	b29a      	uxth	r2, r3
 8016b78:	9b01      	ldr	r3, [sp, #4]
 8016b7a:	829a      	strh	r2, [r3, #20]
}
 8016b7c:	b002      	add	sp, #8
 8016b7e:	4770      	bx	lr

08016b80 <i2a>:
**           range errors on the radix default it to base10
** Code from http://groups.google.com/group/comp.lang.c/msg/66552ef8b04fe1ab?pli=1
*/

static char *i2a(unsigned i, char *a, unsigned r)
{
 8016b80:	b500      	push	{lr}
 8016b82:	b085      	sub	sp, #20
 8016b84:	9003      	str	r0, [sp, #12]
 8016b86:	9102      	str	r1, [sp, #8]
 8016b88:	9201      	str	r2, [sp, #4]
    if (i / r > 0)
 8016b8a:	9a03      	ldr	r2, [sp, #12]
 8016b8c:	9b01      	ldr	r3, [sp, #4]
 8016b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d009      	beq.n	8016baa <i2a+0x2a>
        a = i2a(i / r, a, r);
 8016b96:	9a03      	ldr	r2, [sp, #12]
 8016b98:	9b01      	ldr	r3, [sp, #4]
 8016b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	9902      	ldr	r1, [sp, #8]
 8016ba2:	9a01      	ldr	r2, [sp, #4]
 8016ba4:	f7ff ffec 	bl	8016b80 <i2a>
 8016ba8:	9002      	str	r0, [sp, #8]
    *a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[i % r];
 8016baa:	9b03      	ldr	r3, [sp, #12]
 8016bac:	9a01      	ldr	r2, [sp, #4]
 8016bae:	fbb3 f2f2 	udiv	r2, r3, r2
 8016bb2:	9901      	ldr	r1, [sp, #4]
 8016bb4:	fb01 f202 	mul.w	r2, r1, r2
 8016bb8:	1a9a      	subs	r2, r3, r2
 8016bba:	f24e 631c 	movw	r3, #58908	; 0xe61c
 8016bbe:	f6c0 0302 	movt	r3, #2050	; 0x802
 8016bc2:	5c9a      	ldrb	r2, [r3, r2]
 8016bc4:	9b02      	ldr	r3, [sp, #8]
 8016bc6:	701a      	strb	r2, [r3, #0]
    return a + 1;
 8016bc8:	9b02      	ldr	r3, [sp, #8]
 8016bca:	f103 0301 	add.w	r3, r3, #1
}
 8016bce:	4618      	mov	r0, r3
 8016bd0:	b005      	add	sp, #20
 8016bd2:	bd00      	pop	{pc}

08016bd4 <itoa>:

char *itoa(int i, char *a, int r)
{
 8016bd4:	b500      	push	{lr}
 8016bd6:	b085      	sub	sp, #20
 8016bd8:	9003      	str	r0, [sp, #12]
 8016bda:	9102      	str	r1, [sp, #8]
 8016bdc:	9201      	str	r2, [sp, #4]
    if ((r < 2) || (r > 36))
 8016bde:	9b01      	ldr	r3, [sp, #4]
 8016be0:	2b01      	cmp	r3, #1
 8016be2:	dd02      	ble.n	8016bea <itoa+0x16>
 8016be4:	9b01      	ldr	r3, [sp, #4]
 8016be6:	2b24      	cmp	r3, #36	; 0x24
 8016be8:	dd02      	ble.n	8016bf0 <itoa+0x1c>
        r = 10;
 8016bea:	f04f 030a 	mov.w	r3, #10
 8016bee:	9301      	str	r3, [sp, #4]
    if (i < 0) {
 8016bf0:	9b03      	ldr	r3, [sp, #12]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	da14      	bge.n	8016c20 <itoa+0x4c>
        *a = '-';
 8016bf6:	9b02      	ldr	r3, [sp, #8]
 8016bf8:	f04f 022d 	mov.w	r2, #45	; 0x2d
 8016bfc:	701a      	strb	r2, [r3, #0]
        *i2a(-(unsigned) i, a + 1, r) = 0;
 8016bfe:	9b03      	ldr	r3, [sp, #12]
 8016c00:	f1c3 0100 	rsb	r1, r3, #0
 8016c04:	9b02      	ldr	r3, [sp, #8]
 8016c06:	f103 0201 	add.w	r2, r3, #1
 8016c0a:	9b01      	ldr	r3, [sp, #4]
 8016c0c:	4608      	mov	r0, r1
 8016c0e:	4611      	mov	r1, r2
 8016c10:	461a      	mov	r2, r3
 8016c12:	f7ff ffb5 	bl	8016b80 <i2a>
 8016c16:	4603      	mov	r3, r0
 8016c18:	f04f 0200 	mov.w	r2, #0
 8016c1c:	701a      	strb	r2, [r3, #0]
 8016c1e:	e00a      	b.n	8016c36 <itoa+0x62>
    } else
        *i2a(i, a, r) = 0;
 8016c20:	9a03      	ldr	r2, [sp, #12]
 8016c22:	9b01      	ldr	r3, [sp, #4]
 8016c24:	4610      	mov	r0, r2
 8016c26:	9902      	ldr	r1, [sp, #8]
 8016c28:	461a      	mov	r2, r3
 8016c2a:	f7ff ffa9 	bl	8016b80 <i2a>
 8016c2e:	4603      	mov	r3, r0
 8016c30:	f04f 0200 	mov.w	r2, #0
 8016c34:	701a      	strb	r2, [r3, #0]

    return a;
 8016c36:	9b02      	ldr	r3, [sp, #8]
}
 8016c38:	4618      	mov	r0, r3
 8016c3a:	b005      	add	sp, #20
 8016c3c:	bd00      	pop	{pc}
 8016c3e:	bf00      	nop

08016c40 <ftoa>:
///////////////////////////////////////////////////////////////////////////////
// FTOA
///////////////////////////////////////////////////////////////////////////////

char *ftoa(float x, char *floatString)
{
 8016c40:	b500      	push	{lr}
 8016c42:	b08d      	sub	sp, #52	; 0x34
 8016c44:	9001      	str	r0, [sp, #4]
 8016c46:	9100      	str	r1, [sp, #0]
    int32_t value;
    char intString1[12];
    char intString2[12] = { 0, };
 8016c48:	ab03      	add	r3, sp, #12
 8016c4a:	f04f 0200 	mov.w	r2, #0
 8016c4e:	601a      	str	r2, [r3, #0]
 8016c50:	f103 0304 	add.w	r3, r3, #4
 8016c54:	f04f 0200 	mov.w	r2, #0
 8016c58:	601a      	str	r2, [r3, #0]
 8016c5a:	f103 0304 	add.w	r3, r3, #4
 8016c5e:	f04f 0200 	mov.w	r2, #0
 8016c62:	601a      	str	r2, [r3, #0]
 8016c64:	f103 0304 	add.w	r3, r3, #4
    char *decimalPoint = ".";
 8016c68:	f24e 6344 	movw	r3, #58948	; 0xe644
 8016c6c:	f6c0 0302 	movt	r3, #2050	; 0x802
 8016c70:	930b      	str	r3, [sp, #44]	; 0x2c
    uint8_t dpLocation;

    if (x > 0)                  // Rounding for x.xxx display format
 8016c72:	eddd 7a01 	vldr	s15, [sp, #4]
 8016c76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c7e:	bfd4      	ite	le
 8016c80:	2300      	movle	r3, #0
 8016c82:	2301      	movgt	r3, #1
 8016c84:	b2db      	uxtb	r3, r3
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d008      	beq.n	8016c9c <ftoa+0x5c>
        x += 0.0005f;
 8016c8a:	ed9d 7a01 	vldr	s14, [sp, #4]
 8016c8e:	eddf 7a51 	vldr	s15, [pc, #324]	; 8016dd4 <ftoa+0x194>
 8016c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c96:	edcd 7a01 	vstr	s15, [sp, #4]
 8016c9a:	e007      	b.n	8016cac <ftoa+0x6c>
    else
        x -= 0.0005f;
 8016c9c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8016ca0:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8016dd4 <ftoa+0x194>
 8016ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016ca8:	edcd 7a01 	vstr	s15, [sp, #4]

    value = (int32_t) (x * 1000.0f);    // Convert float * 1000 to an integer
 8016cac:	ed9d 7a01 	vldr	s14, [sp, #4]
 8016cb0:	eddf 7a49 	vldr	s15, [pc, #292]	; 8016dd8 <ftoa+0x198>
 8016cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016cb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016cbc:	ee17 3a90 	vmov	r3, s15
 8016cc0:	930a      	str	r3, [sp, #40]	; 0x28

    itoa(abs(value), intString1, 10);   // Create string from abs of integer value
 8016cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	bfb8      	it	lt
 8016cc8:	425b      	neglt	r3, r3
 8016cca:	4618      	mov	r0, r3
 8016ccc:	ab06      	add	r3, sp, #24
 8016cce:	4619      	mov	r1, r3
 8016cd0:	f04f 020a 	mov.w	r2, #10
 8016cd4:	f7ff ff7e 	bl	8016bd4 <itoa>

    if (value >= 0)
 8016cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	db04      	blt.n	8016ce8 <ftoa+0xa8>
        intString2[0] = ' ';    // Positive number, add a pad space
 8016cde:	f04f 0320 	mov.w	r3, #32
 8016ce2:	f88d 300c 	strb.w	r3, [sp, #12]
 8016ce6:	e003      	b.n	8016cf0 <ftoa+0xb0>
    else
        intString2[0] = '-';    // Negative number, add a negative sign
 8016ce8:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8016cec:	f88d 300c 	strb.w	r3, [sp, #12]

    if (strlen(intString1) == 1) {
 8016cf0:	ab06      	add	r3, sp, #24
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f00a fd58 	bl	80217a8 <strlen>
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	2b01      	cmp	r3, #1
 8016cfc:	d112      	bne.n	8016d24 <ftoa+0xe4>
        intString2[1] = '0';
 8016cfe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d02:	f88d 300d 	strb.w	r3, [sp, #13]
        intString2[2] = '0';
 8016d06:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d0a:	f88d 300e 	strb.w	r3, [sp, #14]
        intString2[3] = '0';
 8016d0e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d12:	f88d 300f 	strb.w	r3, [sp, #15]
        strcat(intString2, intString1);
 8016d16:	ab03      	add	r3, sp, #12
 8016d18:	4618      	mov	r0, r3
 8016d1a:	ab06      	add	r3, sp, #24
 8016d1c:	4619      	mov	r1, r3
 8016d1e:	f00a fc49 	bl	80215b4 <strcat>
 8016d22:	e02d      	b.n	8016d80 <ftoa+0x140>
    } else if (strlen(intString1) == 2) {
 8016d24:	ab06      	add	r3, sp, #24
 8016d26:	4618      	mov	r0, r3
 8016d28:	f00a fd3e 	bl	80217a8 <strlen>
 8016d2c:	4603      	mov	r3, r0
 8016d2e:	2b02      	cmp	r3, #2
 8016d30:	d10e      	bne.n	8016d50 <ftoa+0x110>
        intString2[1] = '0';
 8016d32:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d36:	f88d 300d 	strb.w	r3, [sp, #13]
        intString2[2] = '0';
 8016d3a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d3e:	f88d 300e 	strb.w	r3, [sp, #14]
        strcat(intString2, intString1);
 8016d42:	ab03      	add	r3, sp, #12
 8016d44:	4618      	mov	r0, r3
 8016d46:	ab06      	add	r3, sp, #24
 8016d48:	4619      	mov	r1, r3
 8016d4a:	f00a fc33 	bl	80215b4 <strcat>
 8016d4e:	e017      	b.n	8016d80 <ftoa+0x140>
    } else if (strlen(intString1) == 3) {
 8016d50:	ab06      	add	r3, sp, #24
 8016d52:	4618      	mov	r0, r3
 8016d54:	f00a fd28 	bl	80217a8 <strlen>
 8016d58:	4603      	mov	r3, r0
 8016d5a:	2b03      	cmp	r3, #3
 8016d5c:	d10a      	bne.n	8016d74 <ftoa+0x134>
        intString2[1] = '0';
 8016d5e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d62:	f88d 300d 	strb.w	r3, [sp, #13]
        strcat(intString2, intString1);
 8016d66:	ab03      	add	r3, sp, #12
 8016d68:	4618      	mov	r0, r3
 8016d6a:	ab06      	add	r3, sp, #24
 8016d6c:	4619      	mov	r1, r3
 8016d6e:	f00a fc21 	bl	80215b4 <strcat>
 8016d72:	e005      	b.n	8016d80 <ftoa+0x140>
    } else {
        strcat(intString2, intString1);
 8016d74:	ab03      	add	r3, sp, #12
 8016d76:	4618      	mov	r0, r3
 8016d78:	ab06      	add	r3, sp, #24
 8016d7a:	4619      	mov	r1, r3
 8016d7c:	f00a fc1a 	bl	80215b4 <strcat>
    }

    dpLocation = strlen(intString2) - 3;
 8016d80:	ab03      	add	r3, sp, #12
 8016d82:	4618      	mov	r0, r3
 8016d84:	f00a fd10 	bl	80217a8 <strlen>
 8016d88:	4603      	mov	r3, r0
 8016d8a:	b2db      	uxtb	r3, r3
 8016d8c:	f1a3 0303 	sub.w	r3, r3, #3
 8016d90:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

    strncpy(floatString, intString2, dpLocation);
 8016d94:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8016d98:	9800      	ldr	r0, [sp, #0]
 8016d9a:	aa03      	add	r2, sp, #12
 8016d9c:	4611      	mov	r1, r2
 8016d9e:	461a      	mov	r2, r3
 8016da0:	f00a fd86 	bl	80218b0 <strncpy>
    floatString[dpLocation] = '\0';
 8016da4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8016da8:	9a00      	ldr	r2, [sp, #0]
 8016daa:	18d3      	adds	r3, r2, r3
 8016dac:	f04f 0200 	mov.w	r2, #0
 8016db0:	701a      	strb	r2, [r3, #0]
    strcat(floatString, decimalPoint);
 8016db2:	9800      	ldr	r0, [sp, #0]
 8016db4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016db6:	f00a fbfd 	bl	80215b4 <strcat>
    strcat(floatString, intString2 + dpLocation);
 8016dba:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8016dbe:	aa03      	add	r2, sp, #12
 8016dc0:	18d3      	adds	r3, r2, r3
 8016dc2:	9800      	ldr	r0, [sp, #0]
 8016dc4:	4619      	mov	r1, r3
 8016dc6:	f00a fbf5 	bl	80215b4 <strcat>

    return floatString;
 8016dca:	9b00      	ldr	r3, [sp, #0]
}
 8016dcc:	4618      	mov	r0, r3
 8016dce:	b00d      	add	sp, #52	; 0x34
 8016dd0:	bd00      	pop	{pc}
 8016dd2:	bf00      	nop
 8016dd4:	3a03126f 	.word	0x3a03126f
 8016dd8:	447a0000 	.word	0x447a0000

08016ddc <_sbrk>:
 Increase program data space.
 Malloc and related functions depend on this
 */

caddr_t _sbrk(int incr)
{
 8016ddc:	b410      	push	{r4}
 8016dde:	b085      	sub	sp, #20
 8016de0:	9001      	str	r0, [sp, #4]
    static char *heap_end;
    char *prev_heap_end;

    char * stack;

    if (heap_end == 0)
 8016de2:	f640 0308 	movw	r3, #2056	; 0x808
 8016de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d108      	bne.n	8016e02 <_sbrk+0x26>
        heap_end = &_ebss;
 8016df0:	f640 0308 	movw	r3, #2056	; 0x808
 8016df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016df8:	f643 725c 	movw	r2, #16220	; 0x3f5c
 8016dfc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8016e00:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 8016e02:	f640 0308 	movw	r3, #2056	; 0x808
 8016e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	9303      	str	r3, [sp, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8016e0e:	f3ef 8408 	mrs	r4, MSP
  return(result);
 8016e12:	4623      	mov	r3, r4

    stack = (char*) __get_MSP();
 8016e14:	9302      	str	r3, [sp, #8]
    if (heap_end + incr >  stack)
 8016e16:	f640 0308 	movw	r3, #2056	; 0x808
 8016e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016e1e:	681a      	ldr	r2, [r3, #0]
 8016e20:	9b01      	ldr	r3, [sp, #4]
 8016e22:	18d2      	adds	r2, r2, r3
 8016e24:	9b02      	ldr	r3, [sp, #8]
 8016e26:	429a      	cmp	r2, r3
 8016e28:	d902      	bls.n	8016e30 <_sbrk+0x54>
    {
        // HJI errno = ENOMEM;
        return  (caddr_t) -1;
 8016e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8016e2e:	e00c      	b.n	8016e4a <_sbrk+0x6e>
    }

    heap_end += incr;
 8016e30:	f640 0308 	movw	r3, #2056	; 0x808
 8016e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016e38:	681a      	ldr	r2, [r3, #0]
 8016e3a:	9b01      	ldr	r3, [sp, #4]
 8016e3c:	18d2      	adds	r2, r2, r3
 8016e3e:	f640 0308 	movw	r3, #2056	; 0x808
 8016e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016e46:	601a      	str	r2, [r3, #0]
    return (caddr_t) prev_heap_end;
 8016e48:	9b03      	ldr	r3, [sp, #12]
}
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	b005      	add	sp, #20
 8016e4e:	bc10      	pop	{r4}
 8016e50:	4770      	bx	lr
 8016e52:	bf00      	nop

08016e54 <sphereFit>:
                   uint16_t MaxIterations,
                   float    Err,
		           uint16_t Population[][3],
		           float    SphereOrigin[],
		           float    * SphereRadius)
{
 8016e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e56:	b0c9      	sub	sp, #292	; 0x124
 8016e58:	ac03      	add	r4, sp, #12
 8016e5a:	6020      	str	r0, [r4, #0]
 8016e5c:	a801      	add	r0, sp, #4
 8016e5e:	6003      	str	r3, [r0, #0]
 8016e60:	f10d 030a 	add.w	r3, sp, #10
 8016e64:	8019      	strh	r1, [r3, #0]
 8016e66:	ab02      	add	r3, sp, #8
 8016e68:	801a      	strh	r2, [r3, #0]
	float    R2, C[3], C2[3], Delta[3], Denom[3];
	float    F0, F1, F2, F3, F4;
	float    di2[3];
	float    SizeR;

    for (c = XAXIS; c <= ZAXIS; c++)
 8016e6a:	f04f 0300 	mov.w	r3, #0
 8016e6e:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8016e72:	e084      	b.n	8016f7e <sphereFit+0x12a>
	{
		s[c] = s2[c] = s3[c] = sum[c] = x2sum[c] = y2sum[c] = z2sum[c] = 0.0f;
 8016e74:	f89d 611f 	ldrb.w	r6, [sp, #287]	; 0x11f
 8016e78:	f89d 211f 	ldrb.w	r2, [sp, #287]	; 0x11f
 8016e7c:	f89d 111f 	ldrb.w	r1, [sp, #287]	; 0x11f
 8016e80:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
 8016e84:	f89d 411f 	ldrb.w	r4, [sp, #287]	; 0x11f
 8016e88:	f89d 511f 	ldrb.w	r5, [sp, #287]	; 0x11f
 8016e8c:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8016e90:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8016e94:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 8016e98:	4467      	add	r7, ip
 8016e9a:	f1a7 07d4 	sub.w	r7, r7, #212	; 0xd4
 8016e9e:	f8df ec6c 	ldr.w	lr, [pc, #3180]	; 8017b0c <sphereFit+0xcb8>
 8016ea2:	f8c7 e000 	str.w	lr, [r7]
 8016ea6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016eaa:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 8016eae:	4463      	add	r3, ip
 8016eb0:	f1a3 03d4 	sub.w	r3, r3, #212	; 0xd4
 8016eb4:	681f      	ldr	r7, [r3, #0]
 8016eb6:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8016eba:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 8016ebe:	4463      	add	r3, ip
 8016ec0:	f843 7cc8 	str.w	r7, [r3, #-200]
 8016ec4:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8016ec8:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 8016ecc:	4463      	add	r3, ip
 8016ece:	f853 5cc8 	ldr.w	r5, [r3, #-200]
 8016ed2:	ea4f 0384 	mov.w	r3, r4, lsl #2
 8016ed6:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 8016eda:	4463      	add	r3, ip
 8016edc:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 8016ee0:	601d      	str	r5, [r3, #0]
 8016ee2:	ea4f 0384 	mov.w	r3, r4, lsl #2
 8016ee6:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 8016eea:	4463      	add	r3, ip
 8016eec:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 8016ef0:	681c      	ldr	r4, [r3, #0]
 8016ef2:	ea4f 0380 	mov.w	r3, r0, lsl #2
 8016ef6:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 8016efa:	4463      	add	r3, ip
 8016efc:	f843 4c98 	str.w	r4, [r3, #-152]
 8016f00:	ea4f 0380 	mov.w	r3, r0, lsl #2
 8016f04:	a848      	add	r0, sp, #288	; 0x120
 8016f06:	18c3      	adds	r3, r0, r3
 8016f08:	f853 0c98 	ldr.w	r0, [r3, #-152]
 8016f0c:	ea4f 0381 	mov.w	r3, r1, lsl #2
 8016f10:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 8016f14:	4463      	add	r3, ip
 8016f16:	f1a3 038c 	sub.w	r3, r3, #140	; 0x8c
 8016f1a:	6018      	str	r0, [r3, #0]
 8016f1c:	ea4f 0381 	mov.w	r3, r1, lsl #2
 8016f20:	a848      	add	r0, sp, #288	; 0x120
 8016f22:	18c3      	adds	r3, r0, r3
 8016f24:	f1a3 038c 	sub.w	r3, r3, #140	; 0x8c
 8016f28:	6819      	ldr	r1, [r3, #0]
 8016f2a:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8016f2e:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 8016f32:	4463      	add	r3, ip
 8016f34:	f843 1c80 	str.w	r1, [r3, #-128]
 8016f38:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8016f3c:	a848      	add	r0, sp, #288	; 0x120
 8016f3e:	18c3      	adds	r3, r0, r3
 8016f40:	f853 2c80 	ldr.w	r2, [r3, #-128]
 8016f44:	ea4f 0386 	mov.w	r3, r6, lsl #2
 8016f48:	a948      	add	r1, sp, #288	; 0x120
 8016f4a:	18cb      	adds	r3, r1, r3
 8016f4c:	f1a3 0374 	sub.w	r3, r3, #116	; 0x74
 8016f50:	601a      	str	r2, [r3, #0]

		Population[0][c] = Population[1][c] = 0;
 8016f52:	f89d 111f 	ldrb.w	r1, [sp, #287]	; 0x11f
 8016f56:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8016f58:	f103 0306 	add.w	r3, r3, #6
 8016f5c:	f89d 211f 	ldrb.w	r2, [sp, #287]	; 0x11f
 8016f60:	f04f 0000 	mov.w	r0, #0
 8016f64:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
 8016f68:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8016f6c:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8016f6e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	float    R2, C[3], C2[3], Delta[3], Denom[3];
	float    F0, F1, F2, F3, F4;
	float    di2[3];
	float    SizeR;

    for (c = XAXIS; c <= ZAXIS; c++)
 8016f72:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8016f76:	f103 0301 	add.w	r3, r3, #1
 8016f7a:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8016f7e:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8016f82:	2b02      	cmp	r3, #2
 8016f84:	f67f af76 	bls.w	8016e74 <sphereFit+0x20>
		s[c] = s2[c] = s3[c] = sum[c] = x2sum[c] = y2sum[c] = z2sum[c] = 0.0f;

		Population[0][c] = Population[1][c] = 0;
	}

	xy_sum = xz_sum = yz_sum = 0.0f;
 8016f88:	f8df 3b80 	ldr.w	r3, [pc, #2944]	; 8017b0c <sphereFit+0xcb8>
 8016f8c:	9343      	str	r3, [sp, #268]	; 0x10c
 8016f8e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016f90:	9344      	str	r3, [sp, #272]	; 0x110
 8016f92:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8016f94:	9345      	str	r3, [sp, #276]	; 0x114

	for (i = 0; i < N; i++)
 8016f96:	f04f 0300 	mov.w	r3, #0
 8016f9a:	f8ad 311c 	strh.w	r3, [sp, #284]	; 0x11c
 8016f9e:	e1db      	b.n	8017358 <sphereFit+0x504>
	{
		for (c = XAXIS; c <= ZAXIS; c++)
 8016fa0:	f04f 0300 	mov.w	r3, #0
 8016fa4:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8016fa8:	e0d5      	b.n	8017156 <sphereFit+0x302>
		{
			di2[c] = SQR(d[i][c]);
 8016faa:	f89d 111f 	ldrb.w	r1, [sp, #287]	; 0x11f
 8016fae:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 8016fb2:	4613      	mov	r3, r2
 8016fb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016fb8:	189b      	adds	r3, r3, r2
 8016fba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016fbe:	aa03      	add	r2, sp, #12
 8016fc0:	6812      	ldr	r2, [r2, #0]
 8016fc2:	18d2      	adds	r2, r2, r3
 8016fc4:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8016fc8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016fcc:	18d3      	adds	r3, r2, r3
 8016fce:	ed93 7a00 	vldr	s14, [r3]
 8016fd2:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 8016fd6:	4613      	mov	r3, r2
 8016fd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016fdc:	189b      	adds	r3, r3, r2
 8016fde:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016fe2:	aa03      	add	r2, sp, #12
 8016fe4:	6812      	ldr	r2, [r2, #0]
 8016fe6:	18d2      	adds	r2, r2, r3
 8016fe8:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8016fec:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016ff0:	18d3      	adds	r3, r2, r3
 8016ff2:	edd3 7a00 	vldr	s15, [r3]
 8016ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016ffa:	ea4f 0381 	mov.w	r3, r1, lsl #2
 8016ffe:	aa04      	add	r2, sp, #16
 8017000:	18d3      	adds	r3, r2, r3
 8017002:	edc3 7a00 	vstr	s15, [r3]

			s[c]  += d[i][c];
 8017006:	f89d 111f 	ldrb.w	r1, [sp, #287]	; 0x11f
 801700a:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 801700e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017012:	aa48      	add	r2, sp, #288	; 0x120
 8017014:	18d3      	adds	r3, r2, r3
 8017016:	f1a3 0374 	sub.w	r3, r3, #116	; 0x74
 801701a:	ed93 7a00 	vldr	s14, [r3]
 801701e:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 8017022:	4613      	mov	r3, r2
 8017024:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017028:	189b      	adds	r3, r3, r2
 801702a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801702e:	aa03      	add	r2, sp, #12
 8017030:	6812      	ldr	r2, [r2, #0]
 8017032:	18d2      	adds	r2, r2, r3
 8017034:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017038:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801703c:	18d3      	adds	r3, r2, r3
 801703e:	edd3 7a00 	vldr	s15, [r3]
 8017042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017046:	ea4f 0381 	mov.w	r3, r1, lsl #2
 801704a:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 801704e:	4463      	add	r3, ip
 8017050:	f1a3 0374 	sub.w	r3, r3, #116	; 0x74
 8017054:	edc3 7a00 	vstr	s15, [r3]
			s2[c] += di2[c];
 8017058:	f89d 211f 	ldrb.w	r2, [sp, #287]	; 0x11f
 801705c:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017060:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017064:	a848      	add	r0, sp, #288	; 0x120
 8017066:	18c3      	adds	r3, r0, r3
 8017068:	ed13 7a20 	vldr	s14, [r3, #-128]	; 0xffffff80
 801706c:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017070:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017074:	a904      	add	r1, sp, #16
 8017076:	18cb      	adds	r3, r1, r3
 8017078:	edd3 7a00 	vldr	s15, [r3]
 801707c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017080:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8017084:	a948      	add	r1, sp, #288	; 0x120
 8017086:	18cb      	adds	r3, r1, r3
 8017088:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
			s3[c] += di2[c] * d[i][c];
 801708c:	f89d 111f 	ldrb.w	r1, [sp, #287]	; 0x11f
 8017090:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017094:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017098:	aa48      	add	r2, sp, #288	; 0x120
 801709a:	18d3      	adds	r3, r2, r3
 801709c:	f1a3 038c 	sub.w	r3, r3, #140	; 0x8c
 80170a0:	ed93 7a00 	vldr	s14, [r3]
 80170a4:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80170a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80170ac:	aa04      	add	r2, sp, #16
 80170ae:	18d3      	adds	r3, r2, r3
 80170b0:	edd3 6a00 	vldr	s13, [r3]
 80170b4:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 80170b8:	4613      	mov	r3, r2
 80170ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80170be:	189b      	adds	r3, r3, r2
 80170c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80170c4:	aa03      	add	r2, sp, #12
 80170c6:	6812      	ldr	r2, [r2, #0]
 80170c8:	18d2      	adds	r2, r2, r3
 80170ca:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80170ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80170d2:	18d3      	adds	r3, r2, r3
 80170d4:	edd3 7a00 	vldr	s15, [r3]
 80170d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80170dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80170e0:	ea4f 0381 	mov.w	r3, r1, lsl #2
 80170e4:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 80170e8:	4463      	add	r3, ip
 80170ea:	f1a3 038c 	sub.w	r3, r3, #140	; 0x8c
 80170ee:	edc3 7a00 	vstr	s15, [r3]

			Population[d[i][c] > 0.0f][c]++;
 80170f2:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 80170f6:	4613      	mov	r3, r2
 80170f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80170fc:	189b      	adds	r3, r3, r2
 80170fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017102:	aa03      	add	r2, sp, #12
 8017104:	6812      	ldr	r2, [r2, #0]
 8017106:	18d2      	adds	r2, r2, r3
 8017108:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 801710c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017110:	18d3      	adds	r3, r2, r3
 8017112:	edd3 7a00 	vldr	s15, [r3]
 8017116:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801711a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801711e:	bfd4      	ite	le
 8017120:	2300      	movle	r3, #0
 8017122:	2301      	movgt	r3, #1
 8017124:	b2db      	uxtb	r3, r3
 8017126:	2b00      	cmp	r3, #0
 8017128:	d002      	beq.n	8017130 <sphereFit+0x2dc>
 801712a:	f04f 0306 	mov.w	r3, #6
 801712e:	e001      	b.n	8017134 <sphereFit+0x2e0>
 8017130:	f04f 0300 	mov.w	r3, #0
 8017134:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8017136:	18d3      	adds	r3, r2, r3
 8017138:	f89d 211f 	ldrb.w	r2, [sp, #287]	; 0x11f
 801713c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8017140:	f101 0101 	add.w	r1, r1, #1
 8017144:	b289      	uxth	r1, r1
 8017146:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	xy_sum = xz_sum = yz_sum = 0.0f;

	for (i = 0; i < N; i++)
	{
		for (c = XAXIS; c <= ZAXIS; c++)
 801714a:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 801714e:	f103 0301 	add.w	r3, r3, #1
 8017152:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8017156:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 801715a:	2b02      	cmp	r3, #2
 801715c:	f67f af25 	bls.w	8016faa <sphereFit+0x156>
			s3[c] += di2[c] * d[i][c];

			Population[d[i][c] > 0.0f][c]++;
		}

		xy_sum += d[i][XAXIS] * d[i][YAXIS];
 8017160:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 8017164:	4613      	mov	r3, r2
 8017166:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801716a:	189b      	adds	r3, r3, r2
 801716c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017170:	aa03      	add	r2, sp, #12
 8017172:	6812      	ldr	r2, [r2, #0]
 8017174:	18d3      	adds	r3, r2, r3
 8017176:	ed93 7a00 	vldr	s14, [r3]
 801717a:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 801717e:	4613      	mov	r3, r2
 8017180:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017184:	189b      	adds	r3, r3, r2
 8017186:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801718a:	aa03      	add	r2, sp, #12
 801718c:	6812      	ldr	r2, [r2, #0]
 801718e:	18d3      	adds	r3, r2, r3
 8017190:	edd3 7a01 	vldr	s15, [r3, #4]
 8017194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017198:	ed9d 7a45 	vldr	s14, [sp, #276]	; 0x114
 801719c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80171a0:	edcd 7a45 	vstr	s15, [sp, #276]	; 0x114
		xz_sum += d[i][XAXIS] * d[i][ZAXIS];
 80171a4:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 80171a8:	4613      	mov	r3, r2
 80171aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80171ae:	189b      	adds	r3, r3, r2
 80171b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80171b4:	aa03      	add	r2, sp, #12
 80171b6:	6812      	ldr	r2, [r2, #0]
 80171b8:	18d3      	adds	r3, r2, r3
 80171ba:	ed93 7a00 	vldr	s14, [r3]
 80171be:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 80171c2:	4613      	mov	r3, r2
 80171c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80171c8:	189b      	adds	r3, r3, r2
 80171ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80171ce:	aa03      	add	r2, sp, #12
 80171d0:	6812      	ldr	r2, [r2, #0]
 80171d2:	18d3      	adds	r3, r2, r3
 80171d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80171d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80171dc:	ed9d 7a44 	vldr	s14, [sp, #272]	; 0x110
 80171e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80171e4:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
		yz_sum += d[i][YAXIS] * d[i][ZAXIS];
 80171e8:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 80171ec:	4613      	mov	r3, r2
 80171ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80171f2:	189b      	adds	r3, r3, r2
 80171f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80171f8:	aa03      	add	r2, sp, #12
 80171fa:	6812      	ldr	r2, [r2, #0]
 80171fc:	18d3      	adds	r3, r2, r3
 80171fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8017202:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 8017206:	4613      	mov	r3, r2
 8017208:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801720c:	189b      	adds	r3, r3, r2
 801720e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017212:	aa03      	add	r2, sp, #12
 8017214:	6812      	ldr	r2, [r2, #0]
 8017216:	18d3      	adds	r3, r2, r3
 8017218:	edd3 7a02 	vldr	s15, [r3, #8]
 801721c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017220:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8017224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017228:	edcd 7a43 	vstr	s15, [sp, #268]	; 0x10c

		x2sum[YAXIS] += di2[XAXIS] * d[i][YAXIS];
 801722c:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 8017230:	ab04      	add	r3, sp, #16
 8017232:	edd3 6a00 	vldr	s13, [r3]
 8017236:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 801723a:	4613      	mov	r3, r2
 801723c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017240:	189b      	adds	r3, r3, r2
 8017242:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017246:	aa03      	add	r2, sp, #12
 8017248:	6812      	ldr	r2, [r2, #0]
 801724a:	18d3      	adds	r3, r2, r3
 801724c:	edd3 7a01 	vldr	s15, [r3, #4]
 8017250:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017258:	edcd 7a1a 	vstr	s15, [sp, #104]	; 0x68
		x2sum[ZAXIS] += di2[XAXIS] * d[i][ZAXIS];
 801725c:	ed9d 7a1b 	vldr	s14, [sp, #108]	; 0x6c
 8017260:	ab04      	add	r3, sp, #16
 8017262:	edd3 6a00 	vldr	s13, [r3]
 8017266:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 801726a:	4613      	mov	r3, r2
 801726c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017270:	189b      	adds	r3, r3, r2
 8017272:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017276:	aa03      	add	r2, sp, #12
 8017278:	6812      	ldr	r2, [r2, #0]
 801727a:	18d3      	adds	r3, r2, r3
 801727c:	edd3 7a02 	vldr	s15, [r3, #8]
 8017280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017288:	edcd 7a1b 	vstr	s15, [sp, #108]	; 0x6c

		y2sum[XAXIS] += di2[YAXIS] * d[i][XAXIS];
 801728c:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8017290:	ab04      	add	r3, sp, #16
 8017292:	edd3 6a01 	vldr	s13, [r3, #4]
 8017296:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 801729a:	4613      	mov	r3, r2
 801729c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80172a0:	189b      	adds	r3, r3, r2
 80172a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80172a6:	aa03      	add	r2, sp, #12
 80172a8:	6812      	ldr	r2, [r2, #0]
 80172aa:	18d3      	adds	r3, r2, r3
 80172ac:	edd3 7a00 	vldr	s15, [r3]
 80172b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80172b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80172b8:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
		y2sum[ZAXIS] += di2[YAXIS] * d[i][ZAXIS];
 80172bc:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 80172c0:	ab04      	add	r3, sp, #16
 80172c2:	edd3 6a01 	vldr	s13, [r3, #4]
 80172c6:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 80172ca:	4613      	mov	r3, r2
 80172cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80172d0:	189b      	adds	r3, r3, r2
 80172d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80172d6:	aa03      	add	r2, sp, #12
 80172d8:	6812      	ldr	r2, [r2, #0]
 80172da:	18d3      	adds	r3, r2, r3
 80172dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80172e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80172e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80172e8:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60

		z2sum[XAXIS] += di2[ZAXIS] * d[i][XAXIS];
 80172ec:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
 80172f0:	ab04      	add	r3, sp, #16
 80172f2:	edd3 6a02 	vldr	s13, [r3, #8]
 80172f6:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 80172fa:	4613      	mov	r3, r2
 80172fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017300:	189b      	adds	r3, r3, r2
 8017302:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017306:	aa03      	add	r2, sp, #12
 8017308:	6812      	ldr	r2, [r2, #0]
 801730a:	18d3      	adds	r3, r2, r3
 801730c:	edd3 7a00 	vldr	s15, [r3]
 8017310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017318:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
		z2sum[YAXIS] += di2[ZAXIS] * d[i][YAXIS];
 801731c:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 8017320:	ab04      	add	r3, sp, #16
 8017322:	edd3 6a02 	vldr	s13, [r3, #8]
 8017326:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 801732a:	4613      	mov	r3, r2
 801732c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017330:	189b      	adds	r3, r3, r2
 8017332:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017336:	aa03      	add	r2, sp, #12
 8017338:	6812      	ldr	r2, [r2, #0]
 801733a:	18d3      	adds	r3, r2, r3
 801733c:	edd3 7a01 	vldr	s15, [r3, #4]
 8017340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017348:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
		Population[0][c] = Population[1][c] = 0;
	}

	xy_sum = xz_sum = yz_sum = 0.0f;

	for (i = 0; i < N; i++)
 801734c:	f8bd 311c 	ldrh.w	r3, [sp, #284]	; 0x11c
 8017350:	f103 0301 	add.w	r3, r3, #1
 8017354:	f8ad 311c 	strh.w	r3, [sp, #284]	; 0x11c
 8017358:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 801735c:	f10d 030a 	add.w	r3, sp, #10
 8017360:	881b      	ldrh	r3, [r3, #0]
 8017362:	429a      	cmp	r2, r3
 8017364:	f4ff ae1c 	bcc.w	8016fa0 <sphereFit+0x14c>

		z2sum[XAXIS] += di2[ZAXIS] * d[i][XAXIS];
		z2sum[YAXIS] += di2[ZAXIS] * d[i][YAXIS];
	}

	SizeR = 1.0f / (float) N;
 8017368:	f10d 030a 	add.w	r3, sp, #10
 801736c:	881b      	ldrh	r3, [r3, #0]
 801736e:	ee07 3a10 	vmov	s14, r3
 8017372:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8017376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 801737a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801737e:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
	for (c = XAXIS; c <= ZAXIS; c++)
 8017382:	f04f 0300 	mov.w	r3, #0
 8017386:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 801738a:	e048      	b.n	801741e <sphereFit+0x5ca>
	{
		sum[c]  = s[c]  * SizeR; //sum( X[n]   )
 801738c:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017390:	f89d 211f 	ldrb.w	r2, [sp, #287]	; 0x11f
 8017394:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8017398:	a848      	add	r0, sp, #288	; 0x120
 801739a:	1882      	adds	r2, r0, r2
 801739c:	f1a2 0274 	sub.w	r2, r2, #116	; 0x74
 80173a0:	ed92 7a00 	vldr	s14, [r2]
 80173a4:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 80173a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80173ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80173b0:	a948      	add	r1, sp, #288	; 0x120
 80173b2:	18cb      	adds	r3, r1, r3
 80173b4:	ed43 7a26 	vstr	s15, [r3, #-152]	; 0xffffff68
		sum2[c] = s2[c] * SizeR; //sum( X[n]^2 )
 80173b8:	f89d 211f 	ldrb.w	r2, [sp, #287]	; 0x11f
 80173bc:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80173c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80173c4:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 80173c8:	4463      	add	r3, ip
 80173ca:	ed13 7a20 	vldr	s14, [r3, #-128]	; 0xffffff80
 80173ce:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 80173d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80173d6:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80173da:	a848      	add	r0, sp, #288	; 0x120
 80173dc:	18c3      	adds	r3, r0, r3
 80173de:	f1a3 03a4 	sub.w	r3, r3, #164	; 0xa4
 80173e2:	edc3 7a00 	vstr	s15, [r3]
		sum3[c] = s3[c] * SizeR; //sum( X[n]^3 )
 80173e6:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80173ea:	f89d 211f 	ldrb.w	r2, [sp, #287]	; 0x11f
 80173ee:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80173f2:	a948      	add	r1, sp, #288	; 0x120
 80173f4:	188a      	adds	r2, r1, r2
 80173f6:	f1a2 028c 	sub.w	r2, r2, #140	; 0x8c
 80173fa:	ed92 7a00 	vldr	s14, [r2]
 80173fe:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 8017402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017406:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801740a:	aa48      	add	r2, sp, #288	; 0x120
 801740c:	18d3      	adds	r3, r2, r3
 801740e:	ed43 7a2c 	vstr	s15, [r3, #-176]	; 0xffffff50
		z2sum[XAXIS] += di2[ZAXIS] * d[i][XAXIS];
		z2sum[YAXIS] += di2[ZAXIS] * d[i][YAXIS];
	}

	SizeR = 1.0f / (float) N;
	for (c = XAXIS; c <= ZAXIS; c++)
 8017412:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017416:	f103 0301 	add.w	r3, r3, #1
 801741a:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 801741e:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017422:	2b02      	cmp	r3, #2
 8017424:	d9b2      	bls.n	801738c <sphereFit+0x538>
		sum[c]  = s[c]  * SizeR; //sum( X[n]   )
		sum2[c] = s2[c] * SizeR; //sum( X[n]^2 )
		sum3[c] = s3[c] * SizeR; //sum( X[n]^3 )
	}

	XY = xy_sum * SizeR;         //sum( X[n] * Y[n] )
 8017426:	ed9d 7a45 	vldr	s14, [sp, #276]	; 0x114
 801742a:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 801742e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017432:	edcd 7a3e 	vstr	s15, [sp, #248]	; 0xf8
	XZ = xz_sum * SizeR;         //sum( X[n] * Z[n] )
 8017436:	ed9d 7a44 	vldr	s14, [sp, #272]	; 0x110
 801743a:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 801743e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017442:	edcd 7a3d 	vstr	s15, [sp, #244]	; 0xf4
	YZ = yz_sum * SizeR;         //sum( Y[n] * Z[n] )
 8017446:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801744a:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 801744e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017452:	edcd 7a3c 	vstr	s15, [sp, #240]	; 0xf0

	X2Y = x2sum[YAXIS] * SizeR;  //sum( X[n]^2 * Y[n] )
 8017456:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 801745a:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 801745e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017462:	edcd 7a3b 	vstr	s15, [sp, #236]	; 0xec
	X2Z = x2sum[ZAXIS] * SizeR;  //sum( X[n]^2 * Z[n] )
 8017466:	ed9d 7a1b 	vldr	s14, [sp, #108]	; 0x6c
 801746a:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 801746e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017472:	edcd 7a3a 	vstr	s15, [sp, #232]	; 0xe8
	Y2X = y2sum[XAXIS] * SizeR;  //sum( Y[n]^2 * X[n] )
 8017476:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 801747a:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 801747e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017482:	edcd 7a39 	vstr	s15, [sp, #228]	; 0xe4
	Y2Z = y2sum[ZAXIS] * SizeR;  //sum( Y[n]^2 * Z[n] )
 8017486:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 801748a:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 801748e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017492:	edcd 7a38 	vstr	s15, [sp, #224]	; 0xe0
	Z2X = z2sum[XAXIS] * SizeR;  //sum( Z[n]^2 * X[n] )
 8017496:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
 801749a:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 801749e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80174a2:	edcd 7a37 	vstr	s15, [sp, #220]	; 0xdc
	Z2Y = z2sum[YAXIS] * SizeR;  //sum( Z[n]^2 * Y[n] )
 80174a6:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 80174aa:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 80174ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80174b2:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8

	//Reduction of multiplications
	F0 = sum2[XAXIS] + sum2[YAXIS] + sum2[ZAXIS];
 80174b6:	ed9d 7a1f 	vldr	s14, [sp, #124]	; 0x7c
 80174ba:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80174be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80174c2:	eddd 7a21 	vldr	s15, [sp, #132]	; 0x84
 80174c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80174ca:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
	F1 = 0.5f * F0;
 80174ce:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 80174d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 80174d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80174da:	edcd 7a34 	vstr	s15, [sp, #208]	; 0xd0
	F2 = -8.0f * (sum3[XAXIS] + Y2X + Z2X);
 80174de:	ed9d 7a1c 	vldr	s14, [sp, #112]	; 0x70
 80174e2:	eddd 7a39 	vldr	s15, [sp, #228]	; 0xe4
 80174e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80174ea:	eddd 7a37 	vldr	s15, [sp, #220]	; 0xdc
 80174ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80174f2:	eefa 7a00 	vmov.f32	s15, #160	; 0xa0
 80174f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80174fa:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
	F3 = -8.0f * (X2Y + sum3[YAXIS] + Z2Y);
 80174fe:	ed9d 7a1d 	vldr	s14, [sp, #116]	; 0x74
 8017502:	eddd 7a3b 	vldr	s15, [sp, #236]	; 0xec
 8017506:	ee37 7a27 	vadd.f32	s14, s14, s15
 801750a:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801750e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017512:	eefa 7a00 	vmov.f32	s15, #160	; 0xa0
 8017516:	ee67 7a27 	vmul.f32	s15, s14, s15
 801751a:	edcd 7a32 	vstr	s15, [sp, #200]	; 0xc8
	F4 = -8.0f * (X2Z + Y2Z + sum3[ZAXIS]);
 801751e:	ed9d 7a3a 	vldr	s14, [sp, #232]	; 0xe8
 8017522:	eddd 7a38 	vldr	s15, [sp, #224]	; 0xe0
 8017526:	ee37 7a27 	vadd.f32	s14, s14, s15
 801752a:	eddd 7a1e 	vldr	s15, [sp, #120]	; 0x78
 801752e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017532:	eefa 7a00 	vmov.f32	s15, #160	; 0xa0
 8017536:	ee67 7a27 	vmul.f32	s15, s14, s15
 801753a:	edcd 7a31 	vstr	s15, [sp, #196]	; 0xc4

	for (c = XAXIS; c <= ZAXIS; c++)
 801753e:	f04f 0300 	mov.w	r3, #0
 8017542:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8017546:	e033      	b.n	80175b0 <sphereFit+0x75c>
	{
		C[c]  = sum[c];
 8017548:	f89d 111f 	ldrb.w	r1, [sp, #287]	; 0x11f
 801754c:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017550:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017554:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 8017558:	4463      	add	r3, ip
 801755a:	f853 2c98 	ldr.w	r2, [r3, #-152]
 801755e:	ea4f 0381 	mov.w	r3, r1, lsl #2
 8017562:	a848      	add	r0, sp, #288	; 0x120
 8017564:	18c3      	adds	r3, r0, r3
 8017566:	f843 2ce0 	str.w	r2, [r3, #-224]
		C2[c] = SQR(C[c]);
 801756a:	f89d 211f 	ldrb.w	r2, [sp, #287]	; 0x11f
 801756e:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017572:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017576:	a948      	add	r1, sp, #288	; 0x120
 8017578:	18cb      	adds	r3, r1, r3
 801757a:	ed13 7a38 	vldr	s14, [r3, #-224]	; 0xffffff20
 801757e:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017582:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017586:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 801758a:	4463      	add	r3, ip
 801758c:	ed53 7a38 	vldr	s15, [r3, #-224]	; 0xffffff20
 8017590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017594:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8017598:	a848      	add	r0, sp, #288	; 0x120
 801759a:	18c3      	adds	r3, r0, r3
 801759c:	f1a3 03ec 	sub.w	r3, r3, #236	; 0xec
 80175a0:	edc3 7a00 	vstr	s15, [r3]
	F1 = 0.5f * F0;
	F2 = -8.0f * (sum3[XAXIS] + Y2X + Z2X);
	F3 = -8.0f * (X2Y + sum3[YAXIS] + Z2Y);
	F4 = -8.0f * (X2Z + Y2Z + sum3[ZAXIS]);

	for (c = XAXIS; c <= ZAXIS; c++)
 80175a4:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80175a8:	f103 0301 	add.w	r3, r3, #1
 80175ac:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 80175b0:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80175b4:	2b02      	cmp	r3, #2
 80175b6:	d9c7      	bls.n	8017548 <sphereFit+0x6f4>
	{
		C[c]  = sum[c];
		C2[c] = SQR(C[c]);
	}

	QS = C2[XAXIS] + C2[YAXIS] + C2[ZAXIS];
 80175b8:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 80175bc:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80175c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80175c4:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80175c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80175cc:	edcd 7a30 	vstr	s15, [sp, #192]	; 0xc0
	QB = -2.0f * (SQR(C[XAXIS]) + SQR(C[YAXIS]) + SQR(C[ZAXIS]));
 80175d0:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 80175d4:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 80175d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80175dc:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
 80175e0:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 80175e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80175e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80175ec:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
 80175f0:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 80175f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80175f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80175fc:	eef8 7a00 	vmov.f32	s15, #128	; 0x80
 8017600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017604:	edcd 7a2f 	vstr	s15, [sp, #188]	; 0xbc
	R2 = F0 + QB + QS;
 8017608:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 801760c:	eddd 7a2f 	vldr	s15, [sp, #188]	; 0xbc
 8017610:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017614:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8017618:	ee77 7a27 	vadd.f32	s15, s14, s15
 801761c:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
	Q0 = 0.5f * (QS - R2);
 8017620:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 8017624:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8017628:	ee37 7a67 	vsub.f32	s14, s14, s15
 801762c:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8017630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017634:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
	Q1 = F1 + Q0;
 8017638:	ed9d 7a34 	vldr	s14, [sp, #208]	; 0xd0
 801763c:	eddd 7a42 	vldr	s15, [sp, #264]	; 0x108
 8017640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017644:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
	Q2 = 8.0f * (QS - R2 + QB + F0);
 8017648:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 801764c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8017650:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017654:	eddd 7a2f 	vldr	s15, [sp, #188]	; 0xbc
 8017658:	ee37 7a27 	vadd.f32	s14, s14, s15
 801765c:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 8017660:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017664:	eef2 7a00 	vmov.f32	s15, #32
 8017668:	ee67 7a27 	vmul.f32	s15, s14, s15
 801766c:	edcd 7a40 	vstr	s15, [sp, #256]	; 0x100

	Iterations = 0;
 8017670:	f04f 0300 	mov.w	r3, #0
 8017674:	f8ad 311a 	strh.w	r3, [sp, #282]	; 0x11a

	do
	{
	    for (c = XAXIS; c <= ZAXIS; c++)
 8017678:	f04f 0300 	mov.w	r3, #0
 801767c:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8017680:	e057      	b.n	8017732 <sphereFit+0x8de>
		{
			Denom[c] = Q2 + 16.0f * (C2[c] - 2.0f * C[c] * sum[c] + sum2[c]);
 8017682:	f89d 211f 	ldrb.w	r2, [sp, #287]	; 0x11f
 8017686:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 801768a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801768e:	a948      	add	r1, sp, #288	; 0x120
 8017690:	18cb      	adds	r3, r1, r3
 8017692:	f1a3 03ec 	sub.w	r3, r3, #236	; 0xec
 8017696:	ed93 7a00 	vldr	s14, [r3]
 801769a:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 801769e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80176a2:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 80176a6:	4463      	add	r3, ip
 80176a8:	ed53 7a38 	vldr	s15, [r3, #-224]	; 0xffffff20
 80176ac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80176b0:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80176b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80176b8:	a848      	add	r0, sp, #288	; 0x120
 80176ba:	18c3      	adds	r3, r0, r3
 80176bc:	ed53 7a26 	vldr	s15, [r3, #-152]	; 0xffffff68
 80176c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80176c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80176c8:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80176cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80176d0:	a948      	add	r1, sp, #288	; 0x120
 80176d2:	18cb      	adds	r3, r1, r3
 80176d4:	f1a3 03a4 	sub.w	r3, r3, #164	; 0xa4
 80176d8:	edd3 7a00 	vldr	s15, [r3]
 80176dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80176e0:	eef3 7a00 	vmov.f32	s15, #48	; 0x30
 80176e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80176e8:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 80176ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80176f0:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80176f4:	aa07      	add	r2, sp, #28
 80176f6:	18d3      	adds	r3, r2, r3
 80176f8:	edc3 7a00 	vstr	s15, [r3]
			if (Denom[c] == 0.0f)
 80176fc:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017700:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017704:	aa07      	add	r2, sp, #28
 8017706:	18d3      	adds	r3, r2, r3
 8017708:	edd3 7a00 	vldr	s15, [r3]
 801770c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017714:	d107      	bne.n	8017726 <sphereFit+0x8d2>
				Denom[c] = 1.0f;
 8017716:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 801771a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801771e:	aa07      	add	r2, sp, #28
 8017720:	18d3      	adds	r3, r2, r3
 8017722:	4afb      	ldr	r2, [pc, #1004]	; (8017b10 <sphereFit+0xcbc>)
 8017724:	601a      	str	r2, [r3, #0]

	Iterations = 0;

	do
	{
	    for (c = XAXIS; c <= ZAXIS; c++)
 8017726:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 801772a:	f103 0301 	add.w	r3, r3, #1
 801772e:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8017732:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017736:	2b02      	cmp	r3, #2
 8017738:	d9a3      	bls.n	8017682 <sphereFit+0x82e>
			Denom[c] = Q2 + 16.0f * (C2[c] - 2.0f * C[c] * sum[c] + sum2[c]);
			if (Denom[c] == 0.0f)
				Denom[c] = 1.0f;
		}

		Delta[XAXIS] = -((F2 + 16.0f * (C[YAXIS] * XY + C[ZAXIS] * XZ + sum[XAXIS] * (-C2[XAXIS] - Q0)
 801773a:	ed9d 7a11 	vldr	s14, [sp, #68]	; 0x44
 801773e:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 8017742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017746:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
 801774a:	eddd 7a3d 	vldr	s15, [sp, #244]	; 0xf4
 801774e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017752:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017756:	eddd 6a22 	vldr	s13, [sp, #136]	; 0x88
 801775a:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801775e:	eeb1 6a67 	vneg.f32	s12, s15
 8017762:	eddd 7a42 	vldr	s15, [sp, #264]	; 0x108
 8017766:	ee76 7a67 	vsub.f32	s15, s12, s15
 801776a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801776e:	ee37 7a27 	vadd.f32	s14, s14, s15
				       + C[XAXIS] * (sum2[XAXIS] + Q1 - C[ZAXIS] * sum[ZAXIS] - C[YAXIS] * sum[YAXIS]))) / Denom[XAXIS]);
 8017772:	eddd 6a10 	vldr	s13, [sp, #64]	; 0x40
 8017776:	ed9d 6a1f 	vldr	s12, [sp, #124]	; 0x7c
 801777a:	eddd 7a41 	vldr	s15, [sp, #260]	; 0x104
 801777e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8017782:	eddd 5a12 	vldr	s11, [sp, #72]	; 0x48
 8017786:	eddd 7a24 	vldr	s15, [sp, #144]	; 0x90
 801778a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801778e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8017792:	eddd 5a11 	vldr	s11, [sp, #68]	; 0x44
 8017796:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 801779a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801779e:	ee76 7a67 	vsub.f32	s15, s12, s15
 80177a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80177a6:	ee37 7a27 	vadd.f32	s14, s14, s15
			Denom[c] = Q2 + 16.0f * (C2[c] - 2.0f * C[c] * sum[c] + sum2[c]);
			if (Denom[c] == 0.0f)
				Denom[c] = 1.0f;
		}

		Delta[XAXIS] = -((F2 + 16.0f * (C[YAXIS] * XY + C[ZAXIS] * XZ + sum[XAXIS] * (-C2[XAXIS] - Q0)
 80177aa:	eef3 7a00 	vmov.f32	s15, #48	; 0x30
 80177ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80177b2:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80177b6:	ee37 7a87 	vadd.f32	s14, s15, s14
				       + C[XAXIS] * (sum2[XAXIS] + Q1 - C[ZAXIS] * sum[ZAXIS] - C[YAXIS] * sum[YAXIS]))) / Denom[XAXIS]);
 80177ba:	ab07      	add	r3, sp, #28
 80177bc:	edd3 7a00 	vldr	s15, [r3]
 80177c0:	eec7 7a27 	vdiv.f32	s15, s14, s15
			Denom[c] = Q2 + 16.0f * (C2[c] - 2.0f * C[c] * sum[c] + sum2[c]);
			if (Denom[c] == 0.0f)
				Denom[c] = 1.0f;
		}

		Delta[XAXIS] = -((F2 + 16.0f * (C[YAXIS] * XY + C[ZAXIS] * XZ + sum[XAXIS] * (-C2[XAXIS] - Q0)
 80177c4:	eef1 7a67 	vneg.f32	s15, s15
 80177c8:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
				       + C[XAXIS] * (sum2[XAXIS] + Q1 - C[ZAXIS] * sum[ZAXIS] - C[YAXIS] * sum[YAXIS]))) / Denom[XAXIS]);

		Delta[YAXIS] = -((F3 + 16.0f * (C[XAXIS] * XY + C[ZAXIS] * YZ + sum[YAXIS] * (-C2[YAXIS] - Q0)
 80177cc:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 80177d0:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 80177d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80177d8:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
 80177dc:	eddd 7a3c 	vldr	s15, [sp, #240]	; 0xf0
 80177e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80177e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80177e8:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80177ec:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80177f0:	eeb1 6a67 	vneg.f32	s12, s15
 80177f4:	eddd 7a42 	vldr	s15, [sp, #264]	; 0x108
 80177f8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80177fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017800:	ee37 7a27 	vadd.f32	s14, s14, s15
				       + C[YAXIS] * (sum2[YAXIS] + Q1 - C[XAXIS] * sum[XAXIS] - C[ZAXIS] * sum[ZAXIS]))) / Denom[YAXIS]);
 8017804:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
 8017808:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 801780c:	eddd 7a41 	vldr	s15, [sp, #260]	; 0x104
 8017810:	ee36 6a27 	vadd.f32	s12, s12, s15
 8017814:	eddd 5a10 	vldr	s11, [sp, #64]	; 0x40
 8017818:	eddd 7a22 	vldr	s15, [sp, #136]	; 0x88
 801781c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8017820:	ee36 6a67 	vsub.f32	s12, s12, s15
 8017824:	eddd 5a12 	vldr	s11, [sp, #72]	; 0x48
 8017828:	eddd 7a24 	vldr	s15, [sp, #144]	; 0x90
 801782c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8017830:	ee76 7a67 	vsub.f32	s15, s12, s15
 8017834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017838:	ee37 7a27 	vadd.f32	s14, s14, s15
		}

		Delta[XAXIS] = -((F2 + 16.0f * (C[YAXIS] * XY + C[ZAXIS] * XZ + sum[XAXIS] * (-C2[XAXIS] - Q0)
				       + C[XAXIS] * (sum2[XAXIS] + Q1 - C[ZAXIS] * sum[ZAXIS] - C[YAXIS] * sum[YAXIS]))) / Denom[XAXIS]);

		Delta[YAXIS] = -((F3 + 16.0f * (C[XAXIS] * XY + C[ZAXIS] * YZ + sum[YAXIS] * (-C2[YAXIS] - Q0)
 801783c:	eef3 7a00 	vmov.f32	s15, #48	; 0x30
 8017840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017844:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
 8017848:	ee37 7a87 	vadd.f32	s14, s15, s14
				       + C[YAXIS] * (sum2[YAXIS] + Q1 - C[XAXIS] * sum[XAXIS] - C[ZAXIS] * sum[ZAXIS]))) / Denom[YAXIS]);
 801784c:	ab07      	add	r3, sp, #28
 801784e:	edd3 7a01 	vldr	s15, [r3, #4]
 8017852:	eec7 7a27 	vdiv.f32	s15, s14, s15
		}

		Delta[XAXIS] = -((F2 + 16.0f * (C[YAXIS] * XY + C[ZAXIS] * XZ + sum[XAXIS] * (-C2[XAXIS] - Q0)
				       + C[XAXIS] * (sum2[XAXIS] + Q1 - C[ZAXIS] * sum[ZAXIS] - C[YAXIS] * sum[YAXIS]))) / Denom[XAXIS]);

		Delta[YAXIS] = -((F3 + 16.0f * (C[XAXIS] * XY + C[ZAXIS] * YZ + sum[YAXIS] * (-C2[YAXIS] - Q0)
 8017856:	eef1 7a67 	vneg.f32	s15, s15
 801785a:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
				       + C[YAXIS] * (sum2[YAXIS] + Q1 - C[XAXIS] * sum[XAXIS] - C[ZAXIS] * sum[ZAXIS]))) / Denom[YAXIS]);

		Delta[ZAXIS] = -((F4 + 16.0f * (C[XAXIS] * XZ + C[YAXIS] * YZ + sum[ZAXIS] * (-C2[ZAXIS] - Q0)
 801785e:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 8017862:	eddd 7a3d 	vldr	s15, [sp, #244]	; 0xf4
 8017866:	ee27 7a27 	vmul.f32	s14, s14, s15
 801786a:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
 801786e:	eddd 7a3c 	vldr	s15, [sp, #240]	; 0xf0
 8017872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017876:	ee37 7a27 	vadd.f32	s14, s14, s15
 801787a:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
 801787e:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8017882:	eeb1 6a67 	vneg.f32	s12, s15
 8017886:	eddd 7a42 	vldr	s15, [sp, #264]	; 0x108
 801788a:	ee76 7a67 	vsub.f32	s15, s12, s15
 801788e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017892:	ee37 7a27 	vadd.f32	s14, s14, s15
				       + C[ZAXIS] * (sum2[ZAXIS] + Q1 - C[XAXIS] * sum[XAXIS] - C[YAXIS] * sum[YAXIS]))) / Denom[ZAXIS]);
 8017896:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
 801789a:	ed9d 6a21 	vldr	s12, [sp, #132]	; 0x84
 801789e:	eddd 7a41 	vldr	s15, [sp, #260]	; 0x104
 80178a2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80178a6:	eddd 5a10 	vldr	s11, [sp, #64]	; 0x40
 80178aa:	eddd 7a22 	vldr	s15, [sp, #136]	; 0x88
 80178ae:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80178b2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80178b6:	eddd 5a11 	vldr	s11, [sp, #68]	; 0x44
 80178ba:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 80178be:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80178c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80178c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80178ca:	ee37 7a27 	vadd.f32	s14, s14, s15
				       + C[XAXIS] * (sum2[XAXIS] + Q1 - C[ZAXIS] * sum[ZAXIS] - C[YAXIS] * sum[YAXIS]))) / Denom[XAXIS]);

		Delta[YAXIS] = -((F3 + 16.0f * (C[XAXIS] * XY + C[ZAXIS] * YZ + sum[YAXIS] * (-C2[YAXIS] - Q0)
				       + C[YAXIS] * (sum2[YAXIS] + Q1 - C[XAXIS] * sum[XAXIS] - C[ZAXIS] * sum[ZAXIS]))) / Denom[YAXIS]);

		Delta[ZAXIS] = -((F4 + 16.0f * (C[XAXIS] * XZ + C[YAXIS] * YZ + sum[ZAXIS] * (-C2[ZAXIS] - Q0)
 80178ce:	eef3 7a00 	vmov.f32	s15, #48	; 0x30
 80178d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80178d6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80178da:	ee37 7a87 	vadd.f32	s14, s15, s14
				       + C[ZAXIS] * (sum2[ZAXIS] + Q1 - C[XAXIS] * sum[XAXIS] - C[YAXIS] * sum[YAXIS]))) / Denom[ZAXIS]);
 80178de:	ab07      	add	r3, sp, #28
 80178e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80178e4:	eec7 7a27 	vdiv.f32	s15, s14, s15
				       + C[XAXIS] * (sum2[XAXIS] + Q1 - C[ZAXIS] * sum[ZAXIS] - C[YAXIS] * sum[YAXIS]))) / Denom[XAXIS]);

		Delta[YAXIS] = -((F3 + 16.0f * (C[XAXIS] * XY + C[ZAXIS] * YZ + sum[YAXIS] * (-C2[YAXIS] - Q0)
				       + C[YAXIS] * (sum2[YAXIS] + Q1 - C[XAXIS] * sum[XAXIS] - C[ZAXIS] * sum[ZAXIS]))) / Denom[YAXIS]);

		Delta[ZAXIS] = -((F4 + 16.0f * (C[XAXIS] * XZ + C[YAXIS] * YZ + sum[ZAXIS] * (-C2[ZAXIS] - Q0)
 80178e8:	eef1 7a67 	vneg.f32	s15, s15
 80178ec:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
				       + C[ZAXIS] * (sum2[ZAXIS] + Q1 - C[XAXIS] * sum[XAXIS] - C[YAXIS] * sum[YAXIS]))) / Denom[ZAXIS]);

		for (c = XAXIS; c <= ZAXIS; c++)
 80178f0:	f04f 0300 	mov.w	r3, #0
 80178f4:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 80178f8:	e03d      	b.n	8017976 <sphereFit+0xb22>
		{
			C[c] += Delta[c];
 80178fa:	f89d 211f 	ldrb.w	r2, [sp, #287]	; 0x11f
 80178fe:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017902:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017906:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 801790a:	4463      	add	r3, ip
 801790c:	ed13 7a38 	vldr	s14, [r3, #-224]	; 0xffffff20
 8017910:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017914:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017918:	a848      	add	r0, sp, #288	; 0x120
 801791a:	18c3      	adds	r3, r0, r3
 801791c:	ed53 7a3e 	vldr	s15, [r3, #-248]	; 0xffffff08
 8017920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017924:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8017928:	a948      	add	r1, sp, #288	; 0x120
 801792a:	18cb      	adds	r3, r1, r3
 801792c:	ed43 7a38 	vstr	s15, [r3, #-224]	; 0xffffff20
			C2[c] = SQR(C[c]);
 8017930:	f89d 211f 	ldrb.w	r2, [sp, #287]	; 0x11f
 8017934:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017938:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801793c:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 8017940:	4463      	add	r3, ip
 8017942:	ed13 7a38 	vldr	s14, [r3, #-224]	; 0xffffff20
 8017946:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 801794a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801794e:	a848      	add	r0, sp, #288	; 0x120
 8017950:	18c3      	adds	r3, r0, r3
 8017952:	ed53 7a38 	vldr	s15, [r3, #-224]	; 0xffffff20
 8017956:	ee67 7a27 	vmul.f32	s15, s14, s15
 801795a:	ea4f 0382 	mov.w	r3, r2, lsl #2
 801795e:	a948      	add	r1, sp, #288	; 0x120
 8017960:	18cb      	adds	r3, r1, r3
 8017962:	f1a3 03ec 	sub.w	r3, r3, #236	; 0xec
 8017966:	edc3 7a00 	vstr	s15, [r3]
				       + C[YAXIS] * (sum2[YAXIS] + Q1 - C[XAXIS] * sum[XAXIS] - C[ZAXIS] * sum[ZAXIS]))) / Denom[YAXIS]);

		Delta[ZAXIS] = -((F4 + 16.0f * (C[XAXIS] * XZ + C[YAXIS] * YZ + sum[ZAXIS] * (-C2[ZAXIS] - Q0)
				       + C[ZAXIS] * (sum2[ZAXIS] + Q1 - C[XAXIS] * sum[XAXIS] - C[YAXIS] * sum[YAXIS]))) / Denom[ZAXIS]);

		for (c = XAXIS; c <= ZAXIS; c++)
 801796a:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 801796e:	f103 0301 	add.w	r3, r3, #1
 8017972:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8017976:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 801797a:	2b02      	cmp	r3, #2
 801797c:	d9bd      	bls.n	80178fa <sphereFit+0xaa6>
		{
			C[c] += Delta[c];
			C2[c] = SQR(C[c]);
		}

		QS = C2[XAXIS] + C2[YAXIS] + C2[ZAXIS];
 801797e:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8017982:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8017986:	ee37 7a27 	vadd.f32	s14, s14, s15
 801798a:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 801798e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017992:	edcd 7a30 	vstr	s15, [sp, #192]	; 0xc0
		QB = -2.0f * (C[XAXIS] * sum[XAXIS] + C[YAXIS] * sum[YAXIS] + C[ZAXIS] * sum[ZAXIS]);
 8017996:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 801799a:	eddd 7a22 	vldr	s15, [sp, #136]	; 0x88
 801799e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80179a2:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
 80179a6:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 80179aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80179ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80179b2:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
 80179b6:	eddd 7a24 	vldr	s15, [sp, #144]	; 0x90
 80179ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80179be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80179c2:	eef8 7a00 	vmov.f32	s15, #128	; 0x80
 80179c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80179ca:	edcd 7a2f 	vstr	s15, [sp, #188]	; 0xbc
		R2 = F0 + QB + QS;
 80179ce:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 80179d2:	eddd 7a2f 	vldr	s15, [sp, #188]	; 0xbc
 80179d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80179da:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80179de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80179e2:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
		Q0 = 0.5f * (QS - R2);
 80179e6:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 80179ea:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80179ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80179f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 80179f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80179fa:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
		Q1 = F1 + Q0;
 80179fe:	ed9d 7a34 	vldr	s14, [sp, #208]	; 0xd0
 8017a02:	eddd 7a42 	vldr	s15, [sp, #264]	; 0x108
 8017a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017a0a:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
		Q2 = 8.0f * (QS - R2 + QB + F0);
 8017a0e:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 8017a12:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8017a16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017a1a:	eddd 7a2f 	vldr	s15, [sp, #188]	; 0xbc
 8017a1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017a22:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 8017a26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017a2a:	eef2 7a00 	vmov.f32	s15, #32
 8017a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017a32:	edcd 7a40 	vstr	s15, [sp, #256]	; 0x100

		Iterations++;
 8017a36:	f8bd 311a 	ldrh.w	r3, [sp, #282]	; 0x11a
 8017a3a:	f103 0301 	add.w	r3, r3, #1
 8017a3e:	f8ad 311a 	strh.w	r3, [sp, #282]	; 0x11a
	}
	while ((Iterations < 50) || ((Iterations < MaxIterations) && ((SQR(Delta[XAXIS]) + SQR(Delta[YAXIS]) + SQR(Delta[ZAXIS])) > Err)));
 8017a42:	f8bd 311a 	ldrh.w	r3, [sp, #282]	; 0x11a
 8017a46:	2b31      	cmp	r3, #49	; 0x31
 8017a48:	f67f ae16 	bls.w	8017678 <sphereFit+0x824>
 8017a4c:	f8bd 211a 	ldrh.w	r2, [sp, #282]	; 0x11a
 8017a50:	ab02      	add	r3, sp, #8
 8017a52:	881b      	ldrh	r3, [r3, #0]
 8017a54:	429a      	cmp	r2, r3
 8017a56:	d223      	bcs.n	8017aa0 <sphereFit+0xc4c>
 8017a58:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 8017a5c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8017a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017a64:	eddd 6a0b 	vldr	s13, [sp, #44]	; 0x2c
 8017a68:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8017a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017a70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017a74:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
 8017a78:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8017a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017a84:	ab01      	add	r3, sp, #4
 8017a86:	edd3 7a00 	vldr	s15, [r3]
 8017a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a92:	bfd4      	ite	le
 8017a94:	2300      	movle	r3, #0
 8017a96:	2301      	movgt	r3, #1
 8017a98:	b2db      	uxtb	r3, r3
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	f47f adec 	bne.w	8017678 <sphereFit+0x824>

	for (c = XAXIS; c <= ZAXIS; c++)
 8017aa0:	f04f 0300 	mov.w	r3, #0
 8017aa4:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8017aa8:	e015      	b.n	8017ad6 <sphereFit+0xc82>
		SphereOrigin[c] = C[c];
 8017aaa:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017aae:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017ab2:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 8017ab4:	18d2      	adds	r2, r2, r3
 8017ab6:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017aba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017abe:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 8017ac2:	4463      	add	r3, ip
 8017ac4:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 8017ac8:	6013      	str	r3, [r2, #0]

		Iterations++;
	}
	while ((Iterations < 50) || ((Iterations < MaxIterations) && ((SQR(Delta[XAXIS]) + SQR(Delta[YAXIS]) + SQR(Delta[ZAXIS])) > Err)));

	for (c = XAXIS; c <= ZAXIS; c++)
 8017aca:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017ace:	f103 0301 	add.w	r3, r3, #1
 8017ad2:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8017ad6:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8017ada:	2b02      	cmp	r3, #2
 8017adc:	d9e5      	bls.n	8017aaa <sphereFit+0xc56>
		SphereOrigin[c] = C[c];

	*SphereRadius = sqrt(R2);
 8017ade:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8017ae0:	f008 fe24 	bl	802072c <__aeabi_f2d>
 8017ae4:	4602      	mov	r2, r0
 8017ae6:	460b      	mov	r3, r1
 8017ae8:	4610      	mov	r0, r2
 8017aea:	4619      	mov	r1, r3
 8017aec:	f006 fd5e 	bl	801e5ac <sqrt>
 8017af0:	4602      	mov	r2, r0
 8017af2:	460b      	mov	r3, r1
 8017af4:	4610      	mov	r0, r2
 8017af6:	4619      	mov	r1, r3
 8017af8:	f009 f906 	bl	8020d08 <__aeabi_d2f>
 8017afc:	4602      	mov	r2, r0
 8017afe:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8017b00:	601a      	str	r2, [r3, #0]

	return (Iterations);
 8017b02:	f8bd 311a 	ldrh.w	r3, [sp, #282]	; 0x11a
}
 8017b06:	4618      	mov	r0, r3
 8017b08:	b049      	add	sp, #292	; 0x124
 8017b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b0c:	00000000 	.word	0x00000000
 8017b10:	3f800000 	.word	0x3f800000

08017b14 <standardRadianFormat>:
///////////////////////////////////////////////////////////////////////////////
//  Standard Radian Format Limiter
////////////////////////////////////////////////////////////////////////////////

float standardRadianFormat(float angle)
{
 8017b14:	b082      	sub	sp, #8
 8017b16:	9001      	str	r0, [sp, #4]
    if (angle >= PI)
 8017b18:	ed9d 7a01 	vldr	s14, [sp, #4]
 8017b1c:	eddf 7a17 	vldr	s15, [pc, #92]	; 8017b7c <standardRadianFormat+0x68>
 8017b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b28:	bfb4      	ite	lt
 8017b2a:	2300      	movlt	r3, #0
 8017b2c:	2301      	movge	r3, #1
 8017b2e:	b2db      	uxtb	r3, r3
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d006      	beq.n	8017b42 <standardRadianFormat+0x2e>
        return (angle - 2 * PI);
 8017b34:	ed9d 7a01 	vldr	s14, [sp, #4]
 8017b38:	eddf 7a11 	vldr	s15, [pc, #68]	; 8017b80 <standardRadianFormat+0x6c>
 8017b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017b40:	e016      	b.n	8017b70 <standardRadianFormat+0x5c>
    else if (angle < -PI)
 8017b42:	ed9d 7a01 	vldr	s14, [sp, #4]
 8017b46:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8017b84 <standardRadianFormat+0x70>
 8017b4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b52:	bf54      	ite	pl
 8017b54:	2300      	movpl	r3, #0
 8017b56:	2301      	movmi	r3, #1
 8017b58:	b2db      	uxtb	r3, r3
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d006      	beq.n	8017b6c <standardRadianFormat+0x58>
        return (angle + 2 * PI);
 8017b5e:	ed9d 7a01 	vldr	s14, [sp, #4]
 8017b62:	eddf 7a07 	vldr	s15, [pc, #28]	; 8017b80 <standardRadianFormat+0x6c>
 8017b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017b6a:	e001      	b.n	8017b70 <standardRadianFormat+0x5c>
    else
        return (angle);
 8017b6c:	eddd 7a01 	vldr	s15, [sp, #4]
 8017b70:	ee17 3a90 	vmov	r3, s15
}
 8017b74:	4618      	mov	r0, r3
 8017b76:	b002      	add	sp, #8
 8017b78:	4770      	bx	lr
 8017b7a:	bf00      	nop
 8017b7c:	40490fdb 	.word	0x40490fdb
 8017b80:	40c90fdb 	.word	0x40c90fdb
 8017b84:	c0490fdb 	.word	0xc0490fdb

08017b88 <stringToFloat>:

#define white_space(c) ((c) == ' ' || (c) == '\t')
#define valid_digit(c) ((c) >= '0' && (c) <= '9')

float stringToFloat(const char *p)
{
 8017b88:	b530      	push	{r4, r5, lr}
 8017b8a:	b08f      	sub	sp, #60	; 0x3c
 8017b8c:	9001      	str	r0, [sp, #4]
    int frac;
    double sign, value, scale;

    // Skip leading white space, if any.

    while (white_space(*p) ) {
 8017b8e:	e003      	b.n	8017b98 <stringToFloat+0x10>
        p += 1;
 8017b90:	9b01      	ldr	r3, [sp, #4]
 8017b92:	f103 0301 	add.w	r3, r3, #1
 8017b96:	9301      	str	r3, [sp, #4]
    int frac;
    double sign, value, scale;

    // Skip leading white space, if any.

    while (white_space(*p) ) {
 8017b98:	9b01      	ldr	r3, [sp, #4]
 8017b9a:	781b      	ldrb	r3, [r3, #0]
 8017b9c:	2b20      	cmp	r3, #32
 8017b9e:	d0f7      	beq.n	8017b90 <stringToFloat+0x8>
 8017ba0:	9b01      	ldr	r3, [sp, #4]
 8017ba2:	781b      	ldrb	r3, [r3, #0]
 8017ba4:	2b09      	cmp	r3, #9
 8017ba6:	d0f3      	beq.n	8017b90 <stringToFloat+0x8>
        p += 1;
    }

    // Get sign, if any.

    sign = 1.0;
 8017ba8:	a399      	add	r3, pc, #612	; (adr r3, 8017e10 <stringToFloat+0x288>)
 8017baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (*p == '-') {
 8017bb2:	9b01      	ldr	r3, [sp, #4]
 8017bb4:	781b      	ldrb	r3, [r3, #0]
 8017bb6:	2b2d      	cmp	r3, #45	; 0x2d
 8017bb8:	d109      	bne.n	8017bce <stringToFloat+0x46>
        sign = -1.0;
 8017bba:	a397      	add	r3, pc, #604	; (adr r3, 8017e18 <stringToFloat+0x290>)
 8017bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
        p += 1;
 8017bc4:	9b01      	ldr	r3, [sp, #4]
 8017bc6:	f103 0301 	add.w	r3, r3, #1
 8017bca:	9301      	str	r3, [sp, #4]
 8017bcc:	e007      	b.n	8017bde <stringToFloat+0x56>

    } else if (*p == '+') {
 8017bce:	9b01      	ldr	r3, [sp, #4]
 8017bd0:	781b      	ldrb	r3, [r3, #0]
 8017bd2:	2b2b      	cmp	r3, #43	; 0x2b
 8017bd4:	d103      	bne.n	8017bde <stringToFloat+0x56>
        p += 1;
 8017bd6:	9b01      	ldr	r3, [sp, #4]
 8017bd8:	f103 0301 	add.w	r3, r3, #1
 8017bdc:	9301      	str	r3, [sp, #4]
    }

    // Get digits before decimal point or exponent, if any.

    value = 0.0;
 8017bde:	a390      	add	r3, pc, #576	; (adr r3, 8017e20 <stringToFloat+0x298>)
 8017be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017be4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    while (valid_digit(*p)) {
 8017be8:	e01f      	b.n	8017c2a <stringToFloat+0xa2>
        value = value * 10.0 + (*p - '0');
 8017bea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017bee:	a38e      	add	r3, pc, #568	; (adr r3, 8017e28 <stringToFloat+0x2a0>)
 8017bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bf4:	f008 fdee 	bl	80207d4 <__aeabi_dmul>
 8017bf8:	4602      	mov	r2, r0
 8017bfa:	460b      	mov	r3, r1
 8017bfc:	4614      	mov	r4, r2
 8017bfe:	461d      	mov	r5, r3
 8017c00:	9b01      	ldr	r3, [sp, #4]
 8017c02:	781b      	ldrb	r3, [r3, #0]
 8017c04:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8017c08:	4618      	mov	r0, r3
 8017c0a:	f008 fd7d 	bl	8020708 <__aeabi_i2d>
 8017c0e:	4602      	mov	r2, r0
 8017c10:	460b      	mov	r3, r1
 8017c12:	4620      	mov	r0, r4
 8017c14:	4629      	mov	r1, r5
 8017c16:	f008 fc2b 	bl	8020470 <__adddf3>
 8017c1a:	4602      	mov	r2, r0
 8017c1c:	460b      	mov	r3, r1
 8017c1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
        p += 1;
 8017c22:	9b01      	ldr	r3, [sp, #4]
 8017c24:	f103 0301 	add.w	r3, r3, #1
 8017c28:	9301      	str	r3, [sp, #4]
    }

    // Get digits before decimal point or exponent, if any.

    value = 0.0;
    while (valid_digit(*p)) {
 8017c2a:	9b01      	ldr	r3, [sp, #4]
 8017c2c:	781b      	ldrb	r3, [r3, #0]
 8017c2e:	2b2f      	cmp	r3, #47	; 0x2f
 8017c30:	d903      	bls.n	8017c3a <stringToFloat+0xb2>
 8017c32:	9b01      	ldr	r3, [sp, #4]
 8017c34:	781b      	ldrb	r3, [r3, #0]
 8017c36:	2b39      	cmp	r3, #57	; 0x39
 8017c38:	d9d7      	bls.n	8017bea <stringToFloat+0x62>
        p += 1;
    }

    // Get digits after decimal point, if any.

    if (*p == '.') {
 8017c3a:	9b01      	ldr	r3, [sp, #4]
 8017c3c:	781b      	ldrb	r3, [r3, #0]
 8017c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8017c40:	d139      	bne.n	8017cb6 <stringToFloat+0x12e>
        double pow10 = 10.0;
 8017c42:	a379      	add	r3, pc, #484	; (adr r3, 8017e28 <stringToFloat+0x2a0>)
 8017c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c48:	e9cd 2304 	strd	r2, r3, [sp, #16]
        p += 1;
 8017c4c:	9b01      	ldr	r3, [sp, #4]
 8017c4e:	f103 0301 	add.w	r3, r3, #1
 8017c52:	9301      	str	r3, [sp, #4]

        while (valid_digit(*p)) {
 8017c54:	e027      	b.n	8017ca6 <stringToFloat+0x11e>
            value += (*p - '0') / pow10;
 8017c56:	9b01      	ldr	r3, [sp, #4]
 8017c58:	781b      	ldrb	r3, [r3, #0]
 8017c5a:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8017c5e:	4618      	mov	r0, r3
 8017c60:	f008 fd52 	bl	8020708 <__aeabi_i2d>
 8017c64:	4602      	mov	r2, r0
 8017c66:	460b      	mov	r3, r1
 8017c68:	4610      	mov	r0, r2
 8017c6a:	4619      	mov	r1, r3
 8017c6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017c70:	f008 feda 	bl	8020a28 <__aeabi_ddiv>
 8017c74:	4602      	mov	r2, r0
 8017c76:	460b      	mov	r3, r1
 8017c78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017c7c:	f008 fbf8 	bl	8020470 <__adddf3>
 8017c80:	4602      	mov	r2, r0
 8017c82:	460b      	mov	r3, r1
 8017c84:	e9cd 2308 	strd	r2, r3, [sp, #32]
            pow10 *= 10.0;
 8017c88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017c8c:	a366      	add	r3, pc, #408	; (adr r3, 8017e28 <stringToFloat+0x2a0>)
 8017c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c92:	f008 fd9f 	bl	80207d4 <__aeabi_dmul>
 8017c96:	4602      	mov	r2, r0
 8017c98:	460b      	mov	r3, r1
 8017c9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
            p += 1;
 8017c9e:	9b01      	ldr	r3, [sp, #4]
 8017ca0:	f103 0301 	add.w	r3, r3, #1
 8017ca4:	9301      	str	r3, [sp, #4]

    if (*p == '.') {
        double pow10 = 10.0;
        p += 1;

        while (valid_digit(*p)) {
 8017ca6:	9b01      	ldr	r3, [sp, #4]
 8017ca8:	781b      	ldrb	r3, [r3, #0]
 8017caa:	2b2f      	cmp	r3, #47	; 0x2f
 8017cac:	d903      	bls.n	8017cb6 <stringToFloat+0x12e>
 8017cae:	9b01      	ldr	r3, [sp, #4]
 8017cb0:	781b      	ldrb	r3, [r3, #0]
 8017cb2:	2b39      	cmp	r3, #57	; 0x39
 8017cb4:	d9cf      	bls.n	8017c56 <stringToFloat+0xce>
        }
    }

    // Handle exponent, if any.

    scale = 1.0;
 8017cb6:	a356      	add	r3, pc, #344	; (adr r3, 8017e10 <stringToFloat+0x288>)
 8017cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cbc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if ((*p == 'e') || (*p == 'E')) {
 8017cc0:	9b01      	ldr	r3, [sp, #4]
 8017cc2:	781b      	ldrb	r3, [r3, #0]
 8017cc4:	2b65      	cmp	r3, #101	; 0x65
 8017cc6:	d003      	beq.n	8017cd0 <stringToFloat+0x148>
 8017cc8:	9b01      	ldr	r3, [sp, #4]
 8017cca:	781b      	ldrb	r3, [r3, #0]
 8017ccc:	2b45      	cmp	r3, #69	; 0x45
 8017cce:	d178      	bne.n	8017dc2 <stringToFloat+0x23a>
        unsigned int expon;
        p += 1;
 8017cd0:	9b01      	ldr	r3, [sp, #4]
 8017cd2:	f103 0301 	add.w	r3, r3, #1
 8017cd6:	9301      	str	r3, [sp, #4]

        // Get sign of exponent, if any.

        frac = 0;
 8017cd8:	f04f 0300 	mov.w	r3, #0
 8017cdc:	930d      	str	r3, [sp, #52]	; 0x34
        if (*p == '-') {
 8017cde:	9b01      	ldr	r3, [sp, #4]
 8017ce0:	781b      	ldrb	r3, [r3, #0]
 8017ce2:	2b2d      	cmp	r3, #45	; 0x2d
 8017ce4:	d107      	bne.n	8017cf6 <stringToFloat+0x16e>
            frac = 1;
 8017ce6:	f04f 0301 	mov.w	r3, #1
 8017cea:	930d      	str	r3, [sp, #52]	; 0x34
            p += 1;
 8017cec:	9b01      	ldr	r3, [sp, #4]
 8017cee:	f103 0301 	add.w	r3, r3, #1
 8017cf2:	9301      	str	r3, [sp, #4]
 8017cf4:	e007      	b.n	8017d06 <stringToFloat+0x17e>

        } else if (*p == '+') {
 8017cf6:	9b01      	ldr	r3, [sp, #4]
 8017cf8:	781b      	ldrb	r3, [r3, #0]
 8017cfa:	2b2b      	cmp	r3, #43	; 0x2b
 8017cfc:	d103      	bne.n	8017d06 <stringToFloat+0x17e>
            p += 1;
 8017cfe:	9b01      	ldr	r3, [sp, #4]
 8017d00:	f103 0301 	add.w	r3, r3, #1
 8017d04:	9301      	str	r3, [sp, #4]
        }

        // Get digits of exponent, if any.

        expon = 0;
 8017d06:	f04f 0300 	mov.w	r3, #0
 8017d0a:	9303      	str	r3, [sp, #12]
        while (valid_digit(*p)) {
 8017d0c:	e011      	b.n	8017d32 <stringToFloat+0x1aa>
            expon = expon * 10 + (*p - '0');
 8017d0e:	9a03      	ldr	r2, [sp, #12]
 8017d10:	4613      	mov	r3, r2
 8017d12:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017d16:	189b      	adds	r3, r3, r2
 8017d18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017d1c:	461a      	mov	r2, r3
 8017d1e:	9b01      	ldr	r3, [sp, #4]
 8017d20:	781b      	ldrb	r3, [r3, #0]
 8017d22:	18d3      	adds	r3, r2, r3
 8017d24:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8017d28:	9303      	str	r3, [sp, #12]
            p += 1;
 8017d2a:	9b01      	ldr	r3, [sp, #4]
 8017d2c:	f103 0301 	add.w	r3, r3, #1
 8017d30:	9301      	str	r3, [sp, #4]
        }

        // Get digits of exponent, if any.

        expon = 0;
        while (valid_digit(*p)) {
 8017d32:	9b01      	ldr	r3, [sp, #4]
 8017d34:	781b      	ldrb	r3, [r3, #0]
 8017d36:	2b2f      	cmp	r3, #47	; 0x2f
 8017d38:	d903      	bls.n	8017d42 <stringToFloat+0x1ba>
 8017d3a:	9b01      	ldr	r3, [sp, #4]
 8017d3c:	781b      	ldrb	r3, [r3, #0]
 8017d3e:	2b39      	cmp	r3, #57	; 0x39
 8017d40:	d9e5      	bls.n	8017d0e <stringToFloat+0x186>
            expon = expon * 10 + (*p - '0');
            p += 1;
        }
        if (expon > 308) expon = 308;
 8017d42:	9b03      	ldr	r3, [sp, #12]
 8017d44:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8017d48:	d912      	bls.n	8017d70 <stringToFloat+0x1e8>
 8017d4a:	f44f 739a 	mov.w	r3, #308	; 0x134
 8017d4e:	9303      	str	r3, [sp, #12]

        // Calculate scaling factor.

        while (expon >= 50) { scale *= 1E50; expon -= 50; }
 8017d50:	e00e      	b.n	8017d70 <stringToFloat+0x1e8>
 8017d52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017d56:	a336      	add	r3, pc, #216	; (adr r3, 8017e30 <stringToFloat+0x2a8>)
 8017d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d5c:	f008 fd3a 	bl	80207d4 <__aeabi_dmul>
 8017d60:	4602      	mov	r2, r0
 8017d62:	460b      	mov	r3, r1
 8017d64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017d68:	9b03      	ldr	r3, [sp, #12]
 8017d6a:	f1a3 0332 	sub.w	r3, r3, #50	; 0x32
 8017d6e:	9303      	str	r3, [sp, #12]
 8017d70:	9b03      	ldr	r3, [sp, #12]
 8017d72:	2b31      	cmp	r3, #49	; 0x31
 8017d74:	d8ed      	bhi.n	8017d52 <stringToFloat+0x1ca>
        while (expon >=  8) { scale *= 1E8;  expon -=  8; }
 8017d76:	e00e      	b.n	8017d96 <stringToFloat+0x20e>
 8017d78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017d7c:	a32e      	add	r3, pc, #184	; (adr r3, 8017e38 <stringToFloat+0x2b0>)
 8017d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d82:	f008 fd27 	bl	80207d4 <__aeabi_dmul>
 8017d86:	4602      	mov	r2, r0
 8017d88:	460b      	mov	r3, r1
 8017d8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017d8e:	9b03      	ldr	r3, [sp, #12]
 8017d90:	f1a3 0308 	sub.w	r3, r3, #8
 8017d94:	9303      	str	r3, [sp, #12]
 8017d96:	9b03      	ldr	r3, [sp, #12]
 8017d98:	2b07      	cmp	r3, #7
 8017d9a:	d8ed      	bhi.n	8017d78 <stringToFloat+0x1f0>
        while (expon >   0) { scale *= 10.0; expon -=  1; }
 8017d9c:	e00e      	b.n	8017dbc <stringToFloat+0x234>
 8017d9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017da2:	a321      	add	r3, pc, #132	; (adr r3, 8017e28 <stringToFloat+0x2a0>)
 8017da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017da8:	f008 fd14 	bl	80207d4 <__aeabi_dmul>
 8017dac:	4602      	mov	r2, r0
 8017dae:	460b      	mov	r3, r1
 8017db0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017db4:	9b03      	ldr	r3, [sp, #12]
 8017db6:	f103 33ff 	add.w	r3, r3, #4294967295
 8017dba:	9303      	str	r3, [sp, #12]
 8017dbc:	9b03      	ldr	r3, [sp, #12]
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d1ed      	bne.n	8017d9e <stringToFloat+0x216>
    }

    // Return signed and scaled floating point result.

    return sign * (frac ? (value / scale) : (value * scale));
 8017dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d008      	beq.n	8017dda <stringToFloat+0x252>
 8017dc8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017dcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017dd0:	f008 fe2a 	bl	8020a28 <__aeabi_ddiv>
 8017dd4:	4602      	mov	r2, r0
 8017dd6:	460b      	mov	r3, r1
 8017dd8:	e007      	b.n	8017dea <stringToFloat+0x262>
 8017dda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017dde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017de2:	f008 fcf7 	bl	80207d4 <__aeabi_dmul>
 8017de6:	4602      	mov	r2, r0
 8017de8:	460b      	mov	r3, r1
 8017dea:	4610      	mov	r0, r2
 8017dec:	4619      	mov	r1, r3
 8017dee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017df2:	f008 fcef 	bl	80207d4 <__aeabi_dmul>
 8017df6:	4602      	mov	r2, r0
 8017df8:	460b      	mov	r3, r1
 8017dfa:	4610      	mov	r0, r2
 8017dfc:	4619      	mov	r1, r3
 8017dfe:	f008 ff83 	bl	8020d08 <__aeabi_d2f>
 8017e02:	4603      	mov	r3, r0
}
 8017e04:	4618      	mov	r0, r3
 8017e06:	b00f      	add	sp, #60	; 0x3c
 8017e08:	bd30      	pop	{r4, r5, pc}
 8017e0a:	bf00      	nop
 8017e0c:	f3af 8000 	nop.w
 8017e10:	00000000 	.word	0x00000000
 8017e14:	3ff00000 	.word	0x3ff00000
 8017e18:	00000000 	.word	0x00000000
 8017e1c:	bff00000 	.word	0xbff00000
	...
 8017e2c:	40240000 	.word	0x40240000
 8017e30:	c57e649a 	.word	0xc57e649a
 8017e34:	4a511b0e 	.word	0x4a511b0e
 8017e38:	00000000 	.word	0x00000000
 8017e3c:	4197d784 	.word	0x4197d784

08017e40 <vertCompFilter>:
///////////////////////////////////////////////////////////////////////////////
// Vertical Complementary Filter
///////////////////////////////////////////////////////////////////////////////

void vertCompFilter(float dt)
{
 8017e40:	b082      	sub	sp, #8
 8017e42:	9001      	str	r0, [sp, #4]
    if ((execUp == true) && (previousExecUp == false))
 8017e44:	f240 737d 	movw	r3, #1917	; 0x77d
 8017e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017e4c:	781b      	ldrb	r3, [r3, #0]
 8017e4e:	2b01      	cmp	r3, #1
 8017e50:	d110      	bne.n	8017e74 <vertCompFilter+0x34>
 8017e52:	f640 0314 	movw	r3, #2068	; 0x814
 8017e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017e5a:	781b      	ldrb	r3, [r3, #0]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d109      	bne.n	8017e74 <vertCompFilter+0x34>
    	hEstimate = sensors.pressureAlt10Hz;
 8017e60:	f643 3398 	movw	r3, #15256	; 0x3b98
 8017e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017e68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8017e6a:	f643 7350 	movw	r3, #16208	; 0x3f50
 8017e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017e72:	601a      	str	r2, [r3, #0]

    previousExecUp = execUp;
 8017e74:	f240 737d 	movw	r3, #1917	; 0x77d
 8017e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017e7c:	781a      	ldrb	r2, [r3, #0]
 8017e7e:	f640 0314 	movw	r3, #2068	; 0x814
 8017e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017e86:	701a      	strb	r2, [r3, #0]

	if (execUp == true)
 8017e88:	f240 737d 	movw	r3, #1917	; 0x77d
 8017e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017e90:	781b      	ldrb	r3, [r3, #0]
 8017e92:	2b01      	cmp	r3, #1
 8017e94:	d16f      	bne.n	8017f76 <vertCompFilter+0x136>
    {
    	accelZ = -earthAxisAccels[ZAXIS] + eepromConfig.compFilterB * estimationError;
 8017e96:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8017e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017e9e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8017ea2:	f640 030c 	movw	r3, #2060	; 0x80c
 8017ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017eaa:	edd3 7a00 	vldr	s15, [r3]
 8017eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017eb2:	f240 73ec 	movw	r3, #2028	; 0x7ec
 8017eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017eba:	ed93 7a02 	vldr	s14, [r3, #8]
 8017ebe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017ec2:	f643 7354 	movw	r3, #16212	; 0x3f54
 8017ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017eca:	edc3 7a00 	vstr	s15, [r3]

        hDotEstimate += accelZ * dt;
 8017ece:	f643 7354 	movw	r3, #16212	; 0x3f54
 8017ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017ed6:	ed93 7a00 	vldr	s14, [r3]
 8017eda:	eddd 7a01 	vldr	s15, [sp, #4]
 8017ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017ee2:	f640 0310 	movw	r3, #2064	; 0x810
 8017ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017eea:	ed93 7a00 	vldr	s14, [r3]
 8017eee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017ef2:	f640 0310 	movw	r3, #2064	; 0x810
 8017ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017efa:	edc3 7a00 	vstr	s15, [r3]

        hEstimate += (hDotEstimate + eepromConfig.compFilterA * estimationError) * dt;
 8017efe:	f643 33fc 	movw	r3, #15356	; 0x3bfc
 8017f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017f06:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8017f0a:	f640 030c 	movw	r3, #2060	; 0x80c
 8017f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017f12:	edd3 7a00 	vldr	s15, [r3]
 8017f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017f1a:	f640 0310 	movw	r3, #2064	; 0x810
 8017f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017f22:	ed93 7a00 	vldr	s14, [r3]
 8017f26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8017f2a:	eddd 7a01 	vldr	s15, [sp, #4]
 8017f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017f32:	f643 7350 	movw	r3, #16208	; 0x3f50
 8017f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017f3a:	ed93 7a00 	vldr	s14, [r3]
 8017f3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017f42:	f643 7350 	movw	r3, #16208	; 0x3f50
 8017f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017f4a:	edc3 7a00 	vstr	s15, [r3]

        estimationError = sensors.pressureAlt10Hz - hEstimate;
 8017f4e:	f643 3398 	movw	r3, #15256	; 0x3b98
 8017f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017f56:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8017f5a:	f643 7350 	movw	r3, #16208	; 0x3f50
 8017f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017f62:	edd3 7a00 	vldr	s15, [r3]
 8017f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017f6a:	f640 030c 	movw	r3, #2060	; 0x80c
 8017f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017f72:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8017f76:	b002      	add	sp, #8
 8017f78:	4770      	bx	lr
 8017f7a:	bf00      	nop

08017f7c <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
  *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8017f7c:	b082      	sub	sp, #8
 8017f7e:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8017f80:	9b01      	ldr	r3, [sp, #4]
 8017f82:	681a      	ldr	r2, [r3, #0]
 8017f84:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8017f88:	4013      	ands	r3, r2
 8017f8a:	9a01      	ldr	r2, [sp, #4]
 8017f8c:	6013      	str	r3, [r2, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8017f8e:	9b01      	ldr	r3, [sp, #4]
 8017f90:	f04f 0200 	mov.w	r2, #0
 8017f94:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8017f96:	9b01      	ldr	r3, [sp, #4]
 8017f98:	f04f 0200 	mov.w	r2, #0
 8017f9c:	605a      	str	r2, [r3, #4]

  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8017f9e:	9b01      	ldr	r3, [sp, #4]
 8017fa0:	f04f 0200 	mov.w	r2, #0
 8017fa4:	609a      	str	r2, [r3, #8]

  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8017fa6:	9b01      	ldr	r3, [sp, #4]
 8017fa8:	f04f 0200 	mov.w	r2, #0
 8017fac:	60da      	str	r2, [r3, #12]

  if (DMAy_Channelx == DMA1_Channel1)
 8017fae:	9a01      	ldr	r2, [sp, #4]
 8017fb0:	f04f 0308 	mov.w	r3, #8
 8017fb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8017fb8:	429a      	cmp	r2, r3
 8017fba:	d10c      	bne.n	8017fd6 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 8017fbc:	f04f 0300 	mov.w	r3, #0
 8017fc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8017fc4:	f04f 0200 	mov.w	r2, #0
 8017fc8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8017fcc:	6852      	ldr	r2, [r2, #4]
 8017fce:	f042 020f 	orr.w	r2, r2, #15
 8017fd2:	605a      	str	r2, [r3, #4]
 8017fd4:	e0da      	b.n	801818c <DMA_DeInit+0x210>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8017fd6:	9a01      	ldr	r2, [sp, #4]
 8017fd8:	f04f 031c 	mov.w	r3, #28
 8017fdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8017fe0:	429a      	cmp	r2, r3
 8017fe2:	d10c      	bne.n	8017ffe <DMA_DeInit+0x82>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8017fe4:	f04f 0300 	mov.w	r3, #0
 8017fe8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8017fec:	f04f 0200 	mov.w	r2, #0
 8017ff0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8017ff4:	6852      	ldr	r2, [r2, #4]
 8017ff6:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8017ffa:	605a      	str	r2, [r3, #4]
 8017ffc:	e0c6      	b.n	801818c <DMA_DeInit+0x210>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8017ffe:	9a01      	ldr	r2, [sp, #4]
 8018000:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018004:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018008:	429a      	cmp	r2, r3
 801800a:	d10c      	bne.n	8018026 <DMA_DeInit+0xaa>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 801800c:	f04f 0300 	mov.w	r3, #0
 8018010:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018014:	f04f 0200 	mov.w	r2, #0
 8018018:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801801c:	6852      	ldr	r2, [r2, #4]
 801801e:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 8018022:	605a      	str	r2, [r3, #4]
 8018024:	e0b2      	b.n	801818c <DMA_DeInit+0x210>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8018026:	9a01      	ldr	r2, [sp, #4]
 8018028:	f04f 0344 	mov.w	r3, #68	; 0x44
 801802c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018030:	429a      	cmp	r2, r3
 8018032:	d10c      	bne.n	801804e <DMA_DeInit+0xd2>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 8018034:	f04f 0300 	mov.w	r3, #0
 8018038:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801803c:	f04f 0200 	mov.w	r2, #0
 8018040:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018044:	6852      	ldr	r2, [r2, #4]
 8018046:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 801804a:	605a      	str	r2, [r3, #4]
 801804c:	e09e      	b.n	801818c <DMA_DeInit+0x210>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 801804e:	9a01      	ldr	r2, [sp, #4]
 8018050:	f04f 0358 	mov.w	r3, #88	; 0x58
 8018054:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018058:	429a      	cmp	r2, r3
 801805a:	d10c      	bne.n	8018076 <DMA_DeInit+0xfa>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 801805c:	f04f 0300 	mov.w	r3, #0
 8018060:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018064:	f04f 0200 	mov.w	r2, #0
 8018068:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801806c:	6852      	ldr	r2, [r2, #4]
 801806e:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8018072:	605a      	str	r2, [r3, #4]
 8018074:	e08a      	b.n	801818c <DMA_DeInit+0x210>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 8018076:	9a01      	ldr	r2, [sp, #4]
 8018078:	f04f 036c 	mov.w	r3, #108	; 0x6c
 801807c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018080:	429a      	cmp	r2, r3
 8018082:	d10c      	bne.n	801809e <DMA_DeInit+0x122>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 8018084:	f04f 0300 	mov.w	r3, #0
 8018088:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801808c:	f04f 0200 	mov.w	r2, #0
 8018090:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018094:	6852      	ldr	r2, [r2, #4]
 8018096:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 801809a:	605a      	str	r2, [r3, #4]
 801809c:	e076      	b.n	801818c <DMA_DeInit+0x210>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 801809e:	9a01      	ldr	r2, [sp, #4]
 80180a0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80180a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80180a8:	429a      	cmp	r2, r3
 80180aa:	d10c      	bne.n	80180c6 <DMA_DeInit+0x14a>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 80180ac:	f04f 0300 	mov.w	r3, #0
 80180b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80180b4:	f04f 0200 	mov.w	r2, #0
 80180b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80180bc:	6852      	ldr	r2, [r2, #4]
 80180be:	f042 6270 	orr.w	r2, r2, #251658240	; 0xf000000
 80180c2:	605a      	str	r2, [r3, #4]
 80180c4:	e062      	b.n	801818c <DMA_DeInit+0x210>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 80180c6:	9a01      	ldr	r2, [sp, #4]
 80180c8:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80180cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80180d0:	429a      	cmp	r2, r3
 80180d2:	d10c      	bne.n	80180ee <DMA_DeInit+0x172>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 80180d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80180d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80180dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80180e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80180e4:	6852      	ldr	r2, [r2, #4]
 80180e6:	f042 020f 	orr.w	r2, r2, #15
 80180ea:	605a      	str	r2, [r3, #4]
 80180ec:	e04e      	b.n	801818c <DMA_DeInit+0x210>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 80180ee:	9a01      	ldr	r2, [sp, #4]
 80180f0:	f240 431c 	movw	r3, #1052	; 0x41c
 80180f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80180f8:	429a      	cmp	r2, r3
 80180fa:	d10c      	bne.n	8018116 <DMA_DeInit+0x19a>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 80180fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018100:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018104:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018108:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801810c:	6852      	ldr	r2, [r2, #4]
 801810e:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8018112:	605a      	str	r2, [r3, #4]
 8018114:	e03a      	b.n	801818c <DMA_DeInit+0x210>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8018116:	9a01      	ldr	r2, [sp, #4]
 8018118:	f44f 6386 	mov.w	r3, #1072	; 0x430
 801811c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018120:	429a      	cmp	r2, r3
 8018122:	d10c      	bne.n	801813e <DMA_DeInit+0x1c2>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 8018124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018128:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801812c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018130:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018134:	6852      	ldr	r2, [r2, #4]
 8018136:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 801813a:	605a      	str	r2, [r3, #4]
 801813c:	e026      	b.n	801818c <DMA_DeInit+0x210>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 801813e:	9a01      	ldr	r2, [sp, #4]
 8018140:	f240 4344 	movw	r3, #1092	; 0x444
 8018144:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018148:	429a      	cmp	r2, r3
 801814a:	d10c      	bne.n	8018166 <DMA_DeInit+0x1ea>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 801814c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018150:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018158:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801815c:	6852      	ldr	r2, [r2, #4]
 801815e:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 8018162:	605a      	str	r2, [r3, #4]
 8018164:	e012      	b.n	801818c <DMA_DeInit+0x210>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8018166:	9a01      	ldr	r2, [sp, #4]
 8018168:	f44f 638b 	mov.w	r3, #1112	; 0x458
 801816c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018170:	429a      	cmp	r2, r3
 8018172:	d10b      	bne.n	801818c <DMA_DeInit+0x210>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 8018174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018178:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801817c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018180:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018184:	6852      	ldr	r2, [r2, #4]
 8018186:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 801818a:	605a      	str	r2, [r3, #4]
    }
  }
}
 801818c:	b002      	add	sp, #8
 801818e:	4770      	bx	lr

08018190 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8018190:	b084      	sub	sp, #16
 8018192:	9001      	str	r0, [sp, #4]
 8018194:	9100      	str	r1, [sp, #0]
  uint32_t tmpreg = 0;
 8018196:	f04f 0300 	mov.w	r3, #0
 801819a:	9303      	str	r3, [sp, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 801819c:	9b01      	ldr	r3, [sp, #4]
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	9303      	str	r3, [sp, #12]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 80181a2:	9b03      	ldr	r3, [sp, #12]
 80181a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80181a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80181ac:	9303      	str	r3, [sp, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80181ae:	9b00      	ldr	r3, [sp, #0]
 80181b0:	689a      	ldr	r2, [r3, #8]
 80181b2:	9b00      	ldr	r3, [sp, #0]
 80181b4:	6a1b      	ldr	r3, [r3, #32]
 80181b6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80181b8:	9b00      	ldr	r3, [sp, #0]
 80181ba:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80181bc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80181be:	9b00      	ldr	r3, [sp, #0]
 80181c0:	695b      	ldr	r3, [r3, #20]
 80181c2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80181c4:	9b00      	ldr	r3, [sp, #0]
 80181c6:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80181c8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80181ca:	9b00      	ldr	r3, [sp, #0]
 80181cc:	69db      	ldr	r3, [r3, #28]
 80181ce:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80181d0:	9b00      	ldr	r3, [sp, #0]
 80181d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80181d4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80181d6:	9b00      	ldr	r3, [sp, #0]
 80181d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181da:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80181dc:	9a03      	ldr	r2, [sp, #12]
 80181de:	4313      	orrs	r3, r2
 80181e0:	9303      	str	r3, [sp, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80181e2:	9b01      	ldr	r3, [sp, #4]
 80181e4:	9a03      	ldr	r2, [sp, #12]
 80181e6:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80181e8:	9b00      	ldr	r3, [sp, #0]
 80181ea:	899b      	ldrh	r3, [r3, #12]
 80181ec:	461a      	mov	r2, r3
 80181ee:	9b01      	ldr	r3, [sp, #4]
 80181f0:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80181f2:	9b00      	ldr	r3, [sp, #0]
 80181f4:	681a      	ldr	r2, [r3, #0]
 80181f6:	9b01      	ldr	r3, [sp, #4]
 80181f8:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80181fa:	9b00      	ldr	r3, [sp, #0]
 80181fc:	685a      	ldr	r2, [r3, #4]
 80181fe:	9b01      	ldr	r3, [sp, #4]
 8018200:	60da      	str	r2, [r3, #12]
}
 8018202:	b004      	add	sp, #16
 8018204:	4770      	bx	lr
 8018206:	bf00      	nop

08018208 <DMA_StructInit>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8018208:	b082      	sub	sp, #8
 801820a:	9001      	str	r0, [sp, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 801820c:	9b01      	ldr	r3, [sp, #4]
 801820e:	f04f 0200 	mov.w	r2, #0
 8018212:	601a      	str	r2, [r3, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 8018214:	9b01      	ldr	r3, [sp, #4]
 8018216:	f04f 0200 	mov.w	r2, #0
 801821a:	605a      	str	r2, [r3, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 801821c:	9b01      	ldr	r3, [sp, #4]
 801821e:	f04f 0200 	mov.w	r2, #0
 8018222:	609a      	str	r2, [r3, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8018224:	9b01      	ldr	r3, [sp, #4]
 8018226:	f04f 0200 	mov.w	r2, #0
 801822a:	819a      	strh	r2, [r3, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 801822c:	9b01      	ldr	r3, [sp, #4]
 801822e:	f04f 0200 	mov.w	r2, #0
 8018232:	611a      	str	r2, [r3, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8018234:	9b01      	ldr	r3, [sp, #4]
 8018236:	f04f 0200 	mov.w	r2, #0
 801823a:	615a      	str	r2, [r3, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 801823c:	9b01      	ldr	r3, [sp, #4]
 801823e:	f04f 0200 	mov.w	r2, #0
 8018242:	619a      	str	r2, [r3, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8018244:	9b01      	ldr	r3, [sp, #4]
 8018246:	f04f 0200 	mov.w	r2, #0
 801824a:	61da      	str	r2, [r3, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 801824c:	9b01      	ldr	r3, [sp, #4]
 801824e:	f04f 0200 	mov.w	r2, #0
 8018252:	621a      	str	r2, [r3, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8018254:	9b01      	ldr	r3, [sp, #4]
 8018256:	f04f 0200 	mov.w	r2, #0
 801825a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 801825c:	9b01      	ldr	r3, [sp, #4]
 801825e:	f04f 0200 	mov.w	r2, #0
 8018262:	629a      	str	r2, [r3, #40]	; 0x28
}
 8018264:	b002      	add	sp, #8
 8018266:	4770      	bx	lr

08018268 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8018268:	b082      	sub	sp, #8
 801826a:	9001      	str	r0, [sp, #4]
 801826c:	460b      	mov	r3, r1
 801826e:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8018272:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018276:	2b00      	cmp	r3, #0
 8018278:	d006      	beq.n	8018288 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 801827a:	9b01      	ldr	r3, [sp, #4]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	f043 0201 	orr.w	r2, r3, #1
 8018282:	9b01      	ldr	r3, [sp, #4]
 8018284:	601a      	str	r2, [r3, #0]
 8018286:	e006      	b.n	8018296 <DMA_Cmd+0x2e>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8018288:	9b01      	ldr	r3, [sp, #4]
 801828a:	681a      	ldr	r2, [r3, #0]
 801828c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8018290:	4013      	ands	r3, r2
 8018292:	9a01      	ldr	r2, [sp, #4]
 8018294:	6013      	str	r3, [r2, #0]
  }
}
 8018296:	b002      	add	sp, #8
 8018298:	4770      	bx	lr
 801829a:	bf00      	nop

0801829c <DMA_SetCurrDataCounter>:
  *         transfer.   
  * @note   This function can only be used when the DMAy_Channelx is disabled.
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 801829c:	b082      	sub	sp, #8
 801829e:	9001      	str	r0, [sp, #4]
 80182a0:	460b      	mov	r3, r1
 80182a2:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;
 80182a6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80182aa:	9b01      	ldr	r3, [sp, #4]
 80182ac:	605a      	str	r2, [r3, #4]
}
 80182ae:	b002      	add	sp, #8
 80182b0:	4770      	bx	lr
 80182b2:	bf00      	nop

080182b4 <DMA_GetCurrDataCounter>:
  *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *         transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
 80182b4:	b082      	sub	sp, #8
 80182b6:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 80182b8:	9b01      	ldr	r3, [sp, #4]
 80182ba:	685b      	ldr	r3, [r3, #4]
 80182bc:	b29b      	uxth	r3, r3
}
 80182be:	4618      	mov	r0, r3
 80182c0:	b002      	add	sp, #8
 80182c2:	4770      	bx	lr

080182c4 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 80182c4:	b084      	sub	sp, #16
 80182c6:	9003      	str	r0, [sp, #12]
 80182c8:	9102      	str	r1, [sp, #8]
 80182ca:	4613      	mov	r3, r2
 80182cc:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80182d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d006      	beq.n	80182e6 <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 80182d8:	9b03      	ldr	r3, [sp, #12]
 80182da:	681a      	ldr	r2, [r3, #0]
 80182dc:	9b02      	ldr	r3, [sp, #8]
 80182de:	431a      	orrs	r2, r3
 80182e0:	9b03      	ldr	r3, [sp, #12]
 80182e2:	601a      	str	r2, [r3, #0]
 80182e4:	e007      	b.n	80182f6 <DMA_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 80182e6:	9b03      	ldr	r3, [sp, #12]
 80182e8:	681a      	ldr	r2, [r3, #0]
 80182ea:	9b02      	ldr	r3, [sp, #8]
 80182ec:	ea6f 0303 	mvn.w	r3, r3
 80182f0:	401a      	ands	r2, r3
 80182f2:	9b03      	ldr	r3, [sp, #12]
 80182f4:	601a      	str	r2, [r3, #0]
  }
}
 80182f6:	b004      	add	sp, #16
 80182f8:	4770      	bx	lr
 80182fa:	bf00      	nop

080182fc <DMA_GetFlagStatus>:
  *    DMAy_FLAG_TEx). 
  *      
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 80182fc:	b084      	sub	sp, #16
 80182fe:	9001      	str	r0, [sp, #4]
  FlagStatus bitstatus = RESET;
 8018300:	f04f 0300 	mov.w	r3, #0
 8018304:	f88d 300f 	strb.w	r3, [sp, #15]
  uint32_t tmpreg = 0;
 8018308:	f04f 0300 	mov.w	r3, #0
 801830c:	9302      	str	r3, [sp, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 801830e:	9b01      	ldr	r3, [sp, #4]
 8018310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018314:	2b00      	cmp	r3, #0
 8018316:	d006      	beq.n	8018326 <DMA_GetFlagStatus+0x2a>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8018318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801831c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	9302      	str	r3, [sp, #8]
 8018324:	e005      	b.n	8018332 <DMA_GetFlagStatus+0x36>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 8018326:	f04f 0300 	mov.w	r3, #0
 801832a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	9302      	str	r3, [sp, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8018332:	9a02      	ldr	r2, [sp, #8]
 8018334:	9b01      	ldr	r3, [sp, #4]
 8018336:	4013      	ands	r3, r2
 8018338:	2b00      	cmp	r3, #0
 801833a:	d004      	beq.n	8018346 <DMA_GetFlagStatus+0x4a>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 801833c:	f04f 0301 	mov.w	r3, #1
 8018340:	f88d 300f 	strb.w	r3, [sp, #15]
 8018344:	e003      	b.n	801834e <DMA_GetFlagStatus+0x52>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8018346:	f04f 0300 	mov.w	r3, #0
 801834a:	f88d 300f 	strb.w	r3, [sp, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 801834e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8018352:	4618      	mov	r0, r3
 8018354:	b004      	add	sp, #16
 8018356:	4770      	bx	lr

08018358 <DMA_ClearFlag>:
  *    Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).
  *
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8018358:	b082      	sub	sp, #8
 801835a:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

/* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 801835c:	9b01      	ldr	r3, [sp, #4]
 801835e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018362:	2b00      	cmp	r3, #0
 8018364:	d006      	beq.n	8018374 <DMA_ClearFlag+0x1c>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8018366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801836a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801836e:	9a01      	ldr	r2, [sp, #4]
 8018370:	605a      	str	r2, [r3, #4]
 8018372:	e005      	b.n	8018380 <DMA_ClearFlag+0x28>
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 8018374:	f04f 0300 	mov.w	r3, #0
 8018378:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801837c:	9a01      	ldr	r2, [sp, #4]
 801837e:	605a      	str	r2, [r3, #4]
  }
}
 8018380:	b002      	add	sp, #8
 8018382:	4770      	bx	lr

08018384 <DMA_GetITStatus>:
  *    DMAy_IT_HTx or DMAy_IT_TEx). 
  *      
  * @retval The new state of DMAy_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
{
 8018384:	b084      	sub	sp, #16
 8018386:	9001      	str	r0, [sp, #4]
  ITStatus bitstatus = RESET;
 8018388:	f04f 0300 	mov.w	r3, #0
 801838c:	f88d 300f 	strb.w	r3, [sp, #15]
  uint32_t tmpreg = 0;
 8018390:	f04f 0300 	mov.w	r3, #0
 8018394:	9302      	str	r3, [sp, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMA */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 8018396:	9b01      	ldr	r3, [sp, #4]
 8018398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801839c:	2b00      	cmp	r3, #0
 801839e:	d006      	beq.n	80183ae <DMA_GetITStatus+0x2a>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 80183a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80183a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	9302      	str	r3, [sp, #8]
 80183ac:	e005      	b.n	80183ba <DMA_GetITStatus+0x36>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 80183ae:	f04f 0300 	mov.w	r3, #0
 80183b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	9302      	str	r3, [sp, #8]
  }

  /* Check the status of the specified DMAy interrupt */
  if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 80183ba:	9a02      	ldr	r2, [sp, #8]
 80183bc:	9b01      	ldr	r3, [sp, #4]
 80183be:	4013      	ands	r3, r2
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d004      	beq.n	80183ce <DMA_GetITStatus+0x4a>
  {
    /* DMAy_IT is set */
    bitstatus = SET;
 80183c4:	f04f 0301 	mov.w	r3, #1
 80183c8:	f88d 300f 	strb.w	r3, [sp, #15]
 80183cc:	e003      	b.n	80183d6 <DMA_GetITStatus+0x52>
  }
  else
  {
    /* DMAy_IT is reset */
    bitstatus = RESET;
 80183ce:	f04f 0300 	mov.w	r3, #0
 80183d2:	f88d 300f 	strb.w	r3, [sp, #15]
  }
  /* Return the DMAy_IT status */
  return  bitstatus;
 80183d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 80183da:	4618      	mov	r0, r3
 80183dc:	b004      	add	sp, #16
 80183de:	4770      	bx	lr

080183e0 <DMA_ClearITPendingBit>:
  *    DMAy_IT_TEx).  
  *        
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMAy_IT)
{
 80183e0:	b082      	sub	sp, #8
 80183e2:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
  
  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 80183e4:	9b01      	ldr	r3, [sp, #4]
 80183e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d006      	beq.n	80183fc <DMA_ClearITPendingBit+0x1c>
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
 80183ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80183f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80183f6:	9a01      	ldr	r2, [sp, #4]
 80183f8:	605a      	str	r2, [r3, #4]
 80183fa:	e005      	b.n	8018408 <DMA_ClearITPendingBit+0x28>
  }
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA1->IFCR = DMAy_IT;
 80183fc:	f04f 0300 	mov.w	r3, #0
 8018400:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018404:	9a01      	ldr	r2, [sp, #4]
 8018406:	605a      	str	r2, [r3, #4]
  }
}
 8018408:	b002      	add	sp, #8
 801840a:	4770      	bx	lr

0801840c <FLASH_SetLatency>:
  *            @arg FLASH_Latency_1: FLASH One Latency cycle
  *            @arg FLASH_Latency_2: FLASH Two Latency cycles      
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 801840c:	b084      	sub	sp, #16
 801840e:	9001      	str	r0, [sp, #4]
   uint32_t tmpreg = 0;
 8018410:	f04f 0300 	mov.w	r3, #0
 8018414:	9303      	str	r3, [sp, #12]
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 8018416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801841a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	9303      	str	r3, [sp, #12]
  
  /* Sets the Latency value */
  tmpreg &= (uint32_t) (~((uint32_t)FLASH_ACR_LATENCY));
 8018422:	9b03      	ldr	r3, [sp, #12]
 8018424:	f023 0303 	bic.w	r3, r3, #3
 8018428:	9303      	str	r3, [sp, #12]
  tmpreg |= FLASH_Latency;
 801842a:	9a03      	ldr	r2, [sp, #12]
 801842c:	9b01      	ldr	r3, [sp, #4]
 801842e:	4313      	orrs	r3, r2
 8018430:	9303      	str	r3, [sp, #12]
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 8018432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018436:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801843a:	9a03      	ldr	r2, [sp, #12]
 801843c:	601a      	str	r2, [r3, #0]
}
 801843e:	b004      	add	sp, #16
 8018440:	4770      	bx	lr
 8018442:	bf00      	nop

08018444 <FLASH_HalfCycleAccessCmd>:
  *            @arg FLASH_HalfCycleAccess_Enable: FLASH Half Cycle Enable
  *            @arg FLASH_HalfCycleAccess_Disable: FLASH Half Cycle Disable
  * @retval None
  */
void FLASH_HalfCycleAccessCmd(FunctionalState NewState)
{
 8018444:	b082      	sub	sp, #8
 8018446:	4603      	mov	r3, r0
 8018448:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if(NewState != DISABLE)
 801844c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d00c      	beq.n	801846e <FLASH_HalfCycleAccessCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_HLFCYA;
 8018454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018458:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801845c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018460:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018464:	6812      	ldr	r2, [r2, #0]
 8018466:	f042 0208 	orr.w	r2, r2, #8
 801846a:	601a      	str	r2, [r3, #0]
 801846c:	e00b      	b.n	8018486 <FLASH_HalfCycleAccessCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_HLFCYA));
 801846e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018472:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018476:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801847a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801847e:	6812      	ldr	r2, [r2, #0]
 8018480:	f022 0208 	bic.w	r2, r2, #8
 8018484:	601a      	str	r2, [r3, #0]
  }
}
 8018486:	b002      	add	sp, #8
 8018488:	4770      	bx	lr
 801848a:	bf00      	nop

0801848c <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 801848c:	b082      	sub	sp, #8
 801848e:	4603      	mov	r3, r0
 8018490:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if(NewState != DISABLE)
 8018494:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d00c      	beq.n	80184b6 <FLASH_PrefetchBufferCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 801849c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80184a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80184a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80184a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80184ac:	6812      	ldr	r2, [r2, #0]
 80184ae:	f042 0210 	orr.w	r2, r2, #16
 80184b2:	601a      	str	r2, [r3, #0]
 80184b4:	e00b      	b.n	80184ce <FLASH_PrefetchBufferCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_PRFTBE));
 80184b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80184ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80184be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80184c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80184c6:	6812      	ldr	r2, [r2, #0]
 80184c8:	f022 0210 	bic.w	r2, r2, #16
 80184cc:	601a      	str	r2, [r3, #0]
  }
}
 80184ce:	b002      	add	sp, #8
 80184d0:	4770      	bx	lr
 80184d2:	bf00      	nop

080184d4 <FLASH_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 80184d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80184d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80184dc:	691b      	ldr	r3, [r3, #16]
 80184de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d011      	beq.n	801850a <FLASH_Unlock+0x36>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 80184e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80184ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80184ee:	f240 1223 	movw	r2, #291	; 0x123
 80184f2:	f2c4 5267 	movt	r2, #17767	; 0x4567
 80184f6:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 80184f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80184fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018500:	f648 12ab 	movw	r2, #35243	; 0x89ab
 8018504:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 8018508:	605a      	str	r2, [r3, #4]
  }  
}
 801850a:	4770      	bx	lr

0801850c <FLASH_Lock>:
  * @retval None
  */
void FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 801850c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018510:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018514:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018518:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801851c:	6912      	ldr	r2, [r2, #16]
 801851e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8018522:	611a      	str	r2, [r3, #16]
}
 8018524:	4770      	bx	lr
 8018526:	bf00      	nop

08018528 <FLASH_ErasePage>:
  *         is the start address of a page (multiple of 1024 bytes).  
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8018528:	b500      	push	{lr}
 801852a:	b085      	sub	sp, #20
 801852c:	9001      	str	r0, [sp, #4]
  FLASH_Status status = FLASH_COMPLETE;
 801852e:	f04f 0304 	mov.w	r3, #4
 8018532:	f88d 300f 	strb.w	r3, [sp, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018536:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 801853a:	f000 fd89 	bl	8019050 <FLASH_WaitForLastOperation>
 801853e:	4603      	mov	r3, r0
 8018540:	f88d 300f 	strb.w	r3, [sp, #15]
  
  if(status == FLASH_COMPLETE)
 8018544:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018548:	2b04      	cmp	r3, #4
 801854a:	d130      	bne.n	80185ae <FLASH_ErasePage+0x86>
  { 
    /* If the previous operation is completed, proceed to erase the page */
    FLASH->CR |= FLASH_CR_PER;
 801854c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018550:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018554:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018558:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801855c:	6912      	ldr	r2, [r2, #16]
 801855e:	f042 0202 	orr.w	r2, r2, #2
 8018562:	611a      	str	r2, [r3, #16]
    FLASH->AR  = Page_Address; 
 8018564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018568:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801856c:	9a01      	ldr	r2, [sp, #4]
 801856e:	615a      	str	r2, [r3, #20]
    FLASH->CR |= FLASH_CR_STRT;
 8018570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018574:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018578:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801857c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018580:	6912      	ldr	r2, [r2, #16]
 8018582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018586:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018588:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 801858c:	f000 fd60 	bl	8019050 <FLASH_WaitForLastOperation>
 8018590:	4603      	mov	r3, r0
 8018592:	f88d 300f 	strb.w	r3, [sp, #15]
    
    /* Disable the PER Bit */
    FLASH->CR &= ~FLASH_CR_PER;
 8018596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801859a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801859e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80185a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80185a6:	6912      	ldr	r2, [r2, #16]
 80185a8:	f022 0202 	bic.w	r2, r2, #2
 80185ac:	611a      	str	r2, [r3, #16]
  }
    
  /* Return the Erase Status */
  return status;
 80185ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 80185b2:	4618      	mov	r0, r3
 80185b4:	b005      	add	sp, #20
 80185b6:	bd00      	pop	{pc}

080185b8 <FLASH_EraseAllPages>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseAllPages(void)
{
 80185b8:	b500      	push	{lr}
 80185ba:	b083      	sub	sp, #12
  FLASH_Status status = FLASH_COMPLETE;
 80185bc:	f04f 0304 	mov.w	r3, #4
 80185c0:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80185c4:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80185c8:	f000 fd42 	bl	8019050 <FLASH_WaitForLastOperation>
 80185cc:	4603      	mov	r3, r0
 80185ce:	f88d 3007 	strb.w	r3, [sp, #7]
  
  if(status == FLASH_COMPLETE)
 80185d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80185d6:	2b04      	cmp	r3, #4
 80185d8:	d12a      	bne.n	8018630 <FLASH_EraseAllPages+0x78>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= FLASH_CR_MER;
 80185da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80185de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80185e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80185e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80185ea:	6912      	ldr	r2, [r2, #16]
 80185ec:	f042 0204 	orr.w	r2, r2, #4
 80185f0:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_STRT;
 80185f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80185f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80185fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80185fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018602:	6912      	ldr	r2, [r2, #16]
 8018604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018608:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 801860a:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 801860e:	f000 fd1f 	bl	8019050 <FLASH_WaitForLastOperation>
 8018612:	4603      	mov	r3, r0
 8018614:	f88d 3007 	strb.w	r3, [sp, #7]

    /* Disable the MER Bit */
    FLASH->CR &= ~FLASH_CR_MER;
 8018618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801861c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018620:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018624:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018628:	6912      	ldr	r2, [r2, #16]
 801862a:	f022 0204 	bic.w	r2, r2, #4
 801862e:	611a      	str	r2, [r3, #16]
  }

  /* Return the Erase Status */
  return status;
 8018630:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
 8018634:	4618      	mov	r0, r3
 8018636:	b003      	add	sp, #12
 8018638:	bd00      	pop	{pc}
 801863a:	bf00      	nop

0801863c <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 801863c:	b500      	push	{lr}
 801863e:	b085      	sub	sp, #20
 8018640:	9001      	str	r0, [sp, #4]
 8018642:	9100      	str	r1, [sp, #0]
  FLASH_Status status = FLASH_COMPLETE;
 8018644:	f04f 0304 	mov.w	r3, #4
 8018648:	f88d 300f 	strb.w	r3, [sp, #15]
  __IO uint32_t tmp = 0;
 801864c:	f04f 0300 	mov.w	r3, #0
 8018650:	9302      	str	r3, [sp, #8]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018652:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018656:	f000 fcfb 	bl	8019050 <FLASH_WaitForLastOperation>
 801865a:	4603      	mov	r3, r0
 801865c:	f88d 300f 	strb.w	r3, [sp, #15]
  
  if(status == FLASH_COMPLETE)
 8018660:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018664:	2b04      	cmp	r3, #4
 8018666:	d144      	bne.n	80186f2 <FLASH_ProgramWord+0xb6>
  {
    /* If the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= FLASH_CR_PG;
 8018668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801866c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018670:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018674:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018678:	6912      	ldr	r2, [r2, #16]
 801867a:	f042 0201 	orr.w	r2, r2, #1
 801867e:	611a      	str	r2, [r3, #16]
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
 8018680:	9b01      	ldr	r3, [sp, #4]
 8018682:	9a00      	ldr	r2, [sp, #0]
 8018684:	b292      	uxth	r2, r2
 8018686:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018688:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 801868c:	f000 fce0 	bl	8019050 <FLASH_WaitForLastOperation>
 8018690:	4603      	mov	r3, r0
 8018692:	f88d 300f 	strb.w	r3, [sp, #15]
 
    if(status == FLASH_COMPLETE)
 8018696:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801869a:	2b04      	cmp	r3, #4
 801869c:	d11d      	bne.n	80186da <FLASH_ProgramWord+0x9e>
    {
      /* If the previous operation is completed, proceed to program the new second 
      half word */
      tmp = Address + 2;
 801869e:	9b01      	ldr	r3, [sp, #4]
 80186a0:	f103 0302 	add.w	r3, r3, #2
 80186a4:	9302      	str	r3, [sp, #8]

      *(__IO uint16_t*) tmp = Data >> 16;
 80186a6:	9b02      	ldr	r3, [sp, #8]
 80186a8:	9a00      	ldr	r2, [sp, #0]
 80186aa:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80186ae:	b292      	uxth	r2, r2
 80186b0:	801a      	strh	r2, [r3, #0]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80186b2:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80186b6:	f000 fccb 	bl	8019050 <FLASH_WaitForLastOperation>
 80186ba:	4603      	mov	r3, r0
 80186bc:	f88d 300f 	strb.w	r3, [sp, #15]
        
      /* Disable the PG Bit */
      FLASH->CR &= ~FLASH_CR_PG;
 80186c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80186c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80186c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80186cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80186d0:	6912      	ldr	r2, [r2, #16]
 80186d2:	f022 0201 	bic.w	r2, r2, #1
 80186d6:	611a      	str	r2, [r3, #16]
 80186d8:	e00b      	b.n	80186f2 <FLASH_ProgramWord+0xb6>
    }
    else
    {
      /* Disable the PG Bit */
      FLASH->CR &= ~FLASH_CR_PG;
 80186da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80186de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80186e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80186e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80186ea:	6912      	ldr	r2, [r2, #16]
 80186ec:	f022 0201 	bic.w	r2, r2, #1
 80186f0:	611a      	str	r2, [r3, #16]
    }
  }
   
  /* Return the Program Status */
  return status;
 80186f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 80186f6:	4618      	mov	r0, r3
 80186f8:	b005      	add	sp, #20
 80186fa:	bd00      	pop	{pc}

080186fc <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 80186fc:	b500      	push	{lr}
 80186fe:	b085      	sub	sp, #20
 8018700:	9001      	str	r0, [sp, #4]
 8018702:	460b      	mov	r3, r1
 8018704:	f8ad 3002 	strh.w	r3, [sp, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8018708:	f04f 0304 	mov.w	r3, #4
 801870c:	f88d 300f 	strb.w	r3, [sp, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018710:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018714:	f000 fc9c 	bl	8019050 <FLASH_WaitForLastOperation>
 8018718:	4603      	mov	r3, r0
 801871a:	f88d 300f 	strb.w	r3, [sp, #15]
  
  if(status == FLASH_COMPLETE)
 801871e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018722:	2b04      	cmp	r3, #4
 8018724:	d122      	bne.n	801876c <FLASH_ProgramHalfWord+0x70>
  {
    /* If the previous operation is completed, proceed to program the new data */
    FLASH->CR |= FLASH_CR_PG;
 8018726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801872a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801872e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018732:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018736:	6912      	ldr	r2, [r2, #16]
 8018738:	f042 0201 	orr.w	r2, r2, #1
 801873c:	611a      	str	r2, [r3, #16]
  
    *(__IO uint16_t*)Address = Data;
 801873e:	9b01      	ldr	r3, [sp, #4]
 8018740:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8018744:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018746:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 801874a:	f000 fc81 	bl	8019050 <FLASH_WaitForLastOperation>
 801874e:	4603      	mov	r3, r0
 8018750:	f88d 300f 	strb.w	r3, [sp, #15]
    
    /* Disable the PG Bit */
    FLASH->CR &= ~FLASH_CR_PG;
 8018754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018758:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801875c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018760:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018764:	6912      	ldr	r2, [r2, #16]
 8018766:	f022 0201 	bic.w	r2, r2, #1
 801876a:	611a      	str	r2, [r3, #16]
  } 
  
  /* Return the Program Status */
  return status;
 801876c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8018770:	4618      	mov	r0, r3
 8018772:	b005      	add	sp, #20
 8018774:	bd00      	pop	{pc}
 8018776:	bf00      	nop

08018778 <FLASH_OB_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_OPTWRE) == RESET)
 8018778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801877c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018780:	691b      	ldr	r3, [r3, #16]
 8018782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018786:	2b00      	cmp	r3, #0
 8018788:	d111      	bne.n	80187ae <FLASH_OB_Unlock+0x36>
  { 
    /* Unlocking the option bytes block access */
    FLASH->OPTKEYR = FLASH_OPTKEY1;
 801878a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801878e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018792:	f240 1223 	movw	r2, #291	; 0x123
 8018796:	f2c4 5267 	movt	r2, #17767	; 0x4567
 801879a:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPTKEY2;
 801879c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80187a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80187a4:	f648 12ab 	movw	r2, #35243	; 0x89ab
 80187a8:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 80187ac:	609a      	str	r2, [r3, #8]
  }
}
 80187ae:	4770      	bx	lr

080187b0 <FLASH_OB_Lock>:
  * @retval None
  */
void FLASH_OB_Lock(void)
{
  /* Set the OPTWREN Bit to lock the option bytes block access */
  FLASH->CR &= ~FLASH_CR_OPTWRE;
 80187b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80187b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80187b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80187bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80187c0:	6912      	ldr	r2, [r2, #16]
 80187c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80187c6:	611a      	str	r2, [r3, #16]
}
 80187c8:	4770      	bx	lr
 80187ca:	bf00      	nop

080187cc <FLASH_OB_Launch>:
  * @retval None
  */
void FLASH_OB_Launch(void)
{
  /* Set the OBL_Launch bit to launch the option byte loading */
  FLASH->CR |= FLASH_CR_OBL_LAUNCH; 
 80187cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80187d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80187d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80187d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80187dc:	6912      	ldr	r2, [r2, #16]
 80187de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80187e2:	611a      	str	r2, [r3, #16]
}
 80187e4:	4770      	bx	lr
 80187e6:	bf00      	nop

080187e8 <FLASH_OB_Erase>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_Erase(void)
{
 80187e8:	b500      	push	{lr}
 80187ea:	b083      	sub	sp, #12
  uint16_t rdptmp = OB_RDP_Level_0;
 80187ec:	f04f 03aa 	mov.w	r3, #170	; 0xaa
 80187f0:	f8ad 3006 	strh.w	r3, [sp, #6]

  FLASH_Status status = FLASH_COMPLETE;
 80187f4:	f04f 0304 	mov.w	r3, #4
 80187f8:	f88d 3005 	strb.w	r3, [sp, #5]

  /* Get the actual read protection Option Byte value */ 
  if(FLASH_OB_GetRDP() != RESET)
 80187fc:	f000 fb82 	bl	8018f04 <FLASH_OB_GetRDP>
 8018800:	4603      	mov	r3, r0
 8018802:	2b00      	cmp	r3, #0
 8018804:	d003      	beq.n	801880e <FLASH_OB_Erase+0x26>
  {
    rdptmp = 0x00;  
 8018806:	f04f 0300 	mov.w	r3, #0
 801880a:	f8ad 3006 	strh.w	r3, [sp, #6]
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 801880e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018812:	f000 fc1d 	bl	8019050 <FLASH_WaitForLastOperation>
 8018816:	4603      	mov	r3, r0
 8018818:	f88d 3005 	strb.w	r3, [sp, #5]

  if(status == FLASH_COMPLETE)
 801881c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018820:	2b04      	cmp	r3, #4
 8018822:	d169      	bne.n	80188f8 <FLASH_OB_Erase+0x110>
  {   
    /* If the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= FLASH_CR_OPTER;
 8018824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018828:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801882c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018830:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018834:	6912      	ldr	r2, [r2, #16]
 8018836:	f042 0220 	orr.w	r2, r2, #32
 801883a:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_STRT;
 801883c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018840:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018844:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018848:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801884c:	6912      	ldr	r2, [r2, #16]
 801884e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018852:	611a      	str	r2, [r3, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018854:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018858:	f000 fbfa 	bl	8019050 <FLASH_WaitForLastOperation>
 801885c:	4603      	mov	r3, r0
 801885e:	f88d 3005 	strb.w	r3, [sp, #5]
    
    if(status == FLASH_COMPLETE)
 8018862:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018866:	2b04      	cmp	r3, #4
 8018868:	d136      	bne.n	80188d8 <FLASH_OB_Erase+0xf0>
    {
      /* If the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= ~FLASH_CR_OPTER;
 801886a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801886e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018876:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801887a:	6912      	ldr	r2, [r2, #16]
 801887c:	f022 0220 	bic.w	r2, r2, #32
 8018880:	611a      	str	r2, [r3, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= FLASH_CR_OPTPG;
 8018882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018886:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801888a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801888e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018892:	6912      	ldr	r2, [r2, #16]
 8018894:	f042 0210 	orr.w	r2, r2, #16
 8018898:	611a      	str	r2, [r3, #16]

      /* Restore the last read protection Option Byte value */
      OB->RDP = (uint16_t)rdptmp; 
 801889a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801889e:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 80188a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80188a6:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80188a8:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80188ac:	f000 fbd0 	bl	8019050 <FLASH_WaitForLastOperation>
 80188b0:	4603      	mov	r3, r0
 80188b2:	f88d 3005 	strb.w	r3, [sp, #5]
 
      if(status != FLASH_TIMEOUT)
 80188b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80188ba:	2b05      	cmp	r3, #5
 80188bc:	d01c      	beq.n	80188f8 <FLASH_OB_Erase+0x110>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= ~FLASH_CR_OPTPG;
 80188be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80188c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80188c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80188ca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80188ce:	6912      	ldr	r2, [r2, #16]
 80188d0:	f022 0210 	bic.w	r2, r2, #16
 80188d4:	611a      	str	r2, [r3, #16]
 80188d6:	e00f      	b.n	80188f8 <FLASH_OB_Erase+0x110>
      }
    }
    else
    {
      if (status != FLASH_TIMEOUT)
 80188d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80188dc:	2b05      	cmp	r3, #5
 80188de:	d00b      	beq.n	80188f8 <FLASH_OB_Erase+0x110>
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= ~FLASH_CR_OPTPG;
 80188e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80188e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80188e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80188ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80188f0:	6912      	ldr	r2, [r2, #16]
 80188f2:	f022 0210 	bic.w	r2, r2, #16
 80188f6:	611a      	str	r2, [r3, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
 80188f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
}
 80188fc:	4618      	mov	r0, r3
 80188fe:	b003      	add	sp, #12
 8018900:	bd00      	pop	{pc}
 8018902:	bf00      	nop

08018904 <FLASH_OB_EnableWRP>:
  *     @arg OB_WRP_AllPages
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_EnableWRP(uint32_t OB_WRP)
{
 8018904:	b500      	push	{lr}
 8018906:	b085      	sub	sp, #20
 8018908:	9001      	str	r0, [sp, #4]
  uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF;
 801890a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801890e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018916:	f8ad 300a 	strh.w	r3, [sp, #10]
  
  FLASH_Status status = FLASH_COMPLETE;
 801891a:	f04f 0304 	mov.w	r3, #4
 801891e:	f88d 300f 	strb.w	r3, [sp, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
    
  OB_WRP = (uint32_t)(~OB_WRP);
 8018922:	9b01      	ldr	r3, [sp, #4]
 8018924:	ea6f 0303 	mvn.w	r3, r3
 8018928:	9301      	str	r3, [sp, #4]
  WRP0_Data = (uint16_t)(OB_WRP & OB_WRP0_WRP0);
 801892a:	9b01      	ldr	r3, [sp, #4]
 801892c:	b29b      	uxth	r3, r3
 801892e:	b2db      	uxtb	r3, r3
 8018930:	f8ad 300c 	strh.w	r3, [sp, #12]
  WRP1_Data = (uint16_t)((OB_WRP & OB_WRP0_nWRP0) >> 8);
 8018934:	9b01      	ldr	r3, [sp, #4]
 8018936:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801893a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801893e:	f8ad 300a 	strh.w	r3, [sp, #10]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018942:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018946:	f000 fb83 	bl	8019050 <FLASH_WaitForLastOperation>
 801894a:	4603      	mov	r3, r0
 801894c:	f88d 300f 	strb.w	r3, [sp, #15]
  
  if(status == FLASH_COMPLETE)
 8018950:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018954:	2b04      	cmp	r3, #4
 8018956:	d143      	bne.n	80189e0 <FLASH_OB_EnableWRP+0xdc>
  {
    FLASH->CR |= FLASH_CR_OPTPG;
 8018958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801895c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018960:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018964:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018968:	6912      	ldr	r2, [r2, #16]
 801896a:	f042 0210 	orr.w	r2, r2, #16
 801896e:	611a      	str	r2, [r3, #16]

    if(WRP0_Data != 0xFF)
 8018970:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018974:	2bff      	cmp	r3, #255	; 0xff
 8018976:	d00d      	beq.n	8018994 <FLASH_OB_EnableWRP+0x90>
    {
      OB->WRP0 = WRP0_Data;
 8018978:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801897c:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8018980:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8018984:	811a      	strh	r2, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018986:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 801898a:	f000 fb61 	bl	8019050 <FLASH_WaitForLastOperation>
 801898e:	4603      	mov	r3, r0
 8018990:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8018994:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018998:	2b04      	cmp	r3, #4
 801899a:	d111      	bne.n	80189c0 <FLASH_OB_EnableWRP+0xbc>
 801899c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80189a0:	2bff      	cmp	r3, #255	; 0xff
 80189a2:	d00d      	beq.n	80189c0 <FLASH_OB_EnableWRP+0xbc>
    {
      OB->WRP1 = WRP1_Data;
 80189a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80189a8:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 80189ac:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80189b0:	815a      	strh	r2, [r3, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80189b2:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80189b6:	f000 fb4b 	bl	8019050 <FLASH_WaitForLastOperation>
 80189ba:	4603      	mov	r3, r0
 80189bc:	f88d 300f 	strb.w	r3, [sp, #15]
    }
          
    if(status != FLASH_TIMEOUT)
 80189c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80189c4:	2b05      	cmp	r3, #5
 80189c6:	d00b      	beq.n	80189e0 <FLASH_OB_EnableWRP+0xdc>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 80189c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80189cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80189d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80189d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80189d8:	6912      	ldr	r2, [r2, #16]
 80189da:	f022 0210 	bic.w	r2, r2, #16
 80189de:	611a      	str	r2, [r3, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;      
 80189e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 80189e4:	4618      	mov	r0, r3
 80189e6:	b005      	add	sp, #20
 80189e8:	bd00      	pop	{pc}
 80189ea:	bf00      	nop

080189ec <FLASH_OB_RDPConfig>:
  *     @arg OB_RDP_Level_2: Chip protection
  *     @retval FLASH Status: The returned value can be: 
  * FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 80189ec:	b500      	push	{lr}
 80189ee:	b085      	sub	sp, #20
 80189f0:	4603      	mov	r3, r0
 80189f2:	f88d 3007 	strb.w	r3, [sp, #7]
  FLASH_Status status = FLASH_COMPLETE;
 80189f6:	f04f 0304 	mov.w	r3, #4
 80189fa:	f88d 300f 	strb.w	r3, [sp, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80189fe:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018a02:	f000 fb25 	bl	8019050 <FLASH_WaitForLastOperation>
 8018a06:	4603      	mov	r3, r0
 8018a08:	f88d 300f 	strb.w	r3, [sp, #15]
  
  if(status == FLASH_COMPLETE)
 8018a0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018a10:	2b04      	cmp	r3, #4
 8018a12:	d16a      	bne.n	8018aea <FLASH_OB_RDPConfig+0xfe>
  {
    FLASH->CR |= FLASH_CR_OPTER;
 8018a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018a18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018a1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018a20:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018a24:	6912      	ldr	r2, [r2, #16]
 8018a26:	f042 0220 	orr.w	r2, r2, #32
 8018a2a:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8018a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018a30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018a34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018a38:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018a3c:	6912      	ldr	r2, [r2, #16]
 8018a3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018a42:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018a44:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018a48:	f000 fb02 	bl	8019050 <FLASH_WaitForLastOperation>
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	f88d 300f 	strb.w	r3, [sp, #15]
    
    if(status == FLASH_COMPLETE)
 8018a52:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018a56:	2b04      	cmp	r3, #4
 8018a58:	d137      	bne.n	8018aca <FLASH_OB_RDPConfig+0xde>
    {
      /* If the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= ~FLASH_CR_OPTER;
 8018a5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018a5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018a66:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018a6a:	6912      	ldr	r2, [r2, #16]
 8018a6c:	f022 0220 	bic.w	r2, r2, #32
 8018a70:	611a      	str	r2, [r3, #16]
      
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= FLASH_CR_OPTPG;
 8018a72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018a76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018a7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018a82:	6912      	ldr	r2, [r2, #16]
 8018a84:	f042 0210 	orr.w	r2, r2, #16
 8018a88:	611a      	str	r2, [r3, #16]
       
      OB->RDP = OB_RDP;
 8018a8a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8018a8e:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8018a92:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8018a96:	b292      	uxth	r2, r2
 8018a98:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT); 
 8018a9a:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018a9e:	f000 fad7 	bl	8019050 <FLASH_WaitForLastOperation>
 8018aa2:	4603      	mov	r3, r0
 8018aa4:	f88d 300f 	strb.w	r3, [sp, #15]
    
      if(status != FLASH_TIMEOUT)
 8018aa8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018aac:	2b05      	cmp	r3, #5
 8018aae:	d01c      	beq.n	8018aea <FLASH_OB_RDPConfig+0xfe>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= ~FLASH_CR_OPTPG;
 8018ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018ab4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018ab8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018abc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018ac0:	6912      	ldr	r2, [r2, #16]
 8018ac2:	f022 0210 	bic.w	r2, r2, #16
 8018ac6:	611a      	str	r2, [r3, #16]
 8018ac8:	e00f      	b.n	8018aea <FLASH_OB_RDPConfig+0xfe>
      }
    }
    else 
    {
      if(status != FLASH_TIMEOUT)
 8018aca:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018ace:	2b05      	cmp	r3, #5
 8018ad0:	d00b      	beq.n	8018aea <FLASH_OB_RDPConfig+0xfe>
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= ~FLASH_CR_OPTER;
 8018ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018ad6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018ade:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018ae2:	6912      	ldr	r2, [r2, #16]
 8018ae4:	f022 0220 	bic.w	r2, r2, #32
 8018ae8:	611a      	str	r2, [r3, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;             
 8018aea:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8018aee:	4618      	mov	r0, r3
 8018af0:	b005      	add	sp, #20
 8018af2:	bd00      	pop	{pc}

08018af4 <FLASH_OB_UserConfig>:
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 8018af4:	b500      	push	{lr}
 8018af6:	b085      	sub	sp, #20
 8018af8:	4613      	mov	r3, r2
 8018afa:	4602      	mov	r2, r0
 8018afc:	f88d 2007 	strb.w	r2, [sp, #7]
 8018b00:	460a      	mov	r2, r1
 8018b02:	f88d 2006 	strb.w	r2, [sp, #6]
 8018b06:	f88d 3005 	strb.w	r3, [sp, #5]
  FLASH_Status status = FLASH_COMPLETE; 
 8018b0a:	f04f 0304 	mov.w	r3, #4
 8018b0e:	f88d 300f 	strb.w	r3, [sp, #15]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8018b12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018b16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018b1a:	f240 1223 	movw	r2, #291	; 0x123
 8018b1e:	f2c4 5267 	movt	r2, #17767	; 0x4567
 8018b22:	609a      	str	r2, [r3, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 8018b24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018b28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018b2c:	f648 12ab 	movw	r2, #35243	; 0x89ab
 8018b30:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 8018b34:	609a      	str	r2, [r3, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018b36:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018b3a:	f000 fa89 	bl	8019050 <FLASH_WaitForLastOperation>
 8018b3e:	4603      	mov	r3, r0
 8018b40:	f88d 300f 	strb.w	r3, [sp, #15]
  
  if(status == FLASH_COMPLETE)
 8018b44:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018b48:	2b04      	cmp	r3, #4
 8018b4a:	d134      	bne.n	8018bb6 <FLASH_OB_UserConfig+0xc2>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8018b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018b50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018b54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018b58:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018b5c:	6912      	ldr	r2, [r2, #16]
 8018b5e:	f042 0210 	orr.w	r2, r2, #16
 8018b62:	611a      	str	r2, [r3, #16]
           
    OB->USER = (uint8_t)((uint8_t)(OB_IWDG | OB_STOP) | (uint8_t)(OB_STDBY |0xF8));
 8018b64:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8018b68:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8018b6c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8018b70:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8018b74:	430a      	orrs	r2, r1
 8018b76:	b2d1      	uxtb	r1, r2
 8018b78:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8018b7c:	430a      	orrs	r2, r1
 8018b7e:	b2d2      	uxtb	r2, r2
 8018b80:	f062 0207 	orn	r2, r2, #7
 8018b84:	b2d2      	uxtb	r2, r2
 8018b86:	805a      	strh	r2, [r3, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018b88:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018b8c:	f000 fa60 	bl	8019050 <FLASH_WaitForLastOperation>
 8018b90:	4603      	mov	r3, r0
 8018b92:	f88d 300f 	strb.w	r3, [sp, #15]

    if(status != FLASH_TIMEOUT)
 8018b96:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018b9a:	2b05      	cmp	r3, #5
 8018b9c:	d00b      	beq.n	8018bb6 <FLASH_OB_UserConfig+0xc2>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8018b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018ba2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018baa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018bae:	6912      	ldr	r2, [r2, #16]
 8018bb0:	f022 0210 	bic.w	r2, r2, #16
 8018bb4:	611a      	str	r2, [r3, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
 8018bb6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8018bba:	4618      	mov	r0, r3
 8018bbc:	b005      	add	sp, #20
 8018bbe:	bd00      	pop	{pc}

08018bc0 <FLASH_OB_BOOTConfig>:
  *     @arg OB_BOOT1_RESET: BOOT1 Reset
  *     @arg OB_BOOT1_SET: BOOT1 Set
  * @retval None
  */
FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1)
{
 8018bc0:	b500      	push	{lr}
 8018bc2:	b085      	sub	sp, #20
 8018bc4:	4603      	mov	r3, r0
 8018bc6:	f88d 3007 	strb.w	r3, [sp, #7]
  FLASH_Status status = FLASH_COMPLETE; 
 8018bca:	f04f 0304 	mov.w	r3, #4
 8018bce:	f88d 300f 	strb.w	r3, [sp, #15]

  /* Check the parameters */
  assert_param(IS_OB_BOOT1(OB_BOOT1));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8018bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018bd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018bda:	f240 1223 	movw	r2, #291	; 0x123
 8018bde:	f2c4 5267 	movt	r2, #17767	; 0x4567
 8018be2:	609a      	str	r2, [r3, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 8018be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018be8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018bec:	f648 12ab 	movw	r2, #35243	; 0x89ab
 8018bf0:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 8018bf4:	609a      	str	r2, [r3, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018bf6:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018bfa:	f000 fa29 	bl	8019050 <FLASH_WaitForLastOperation>
 8018bfe:	4603      	mov	r3, r0
 8018c00:	f88d 300f 	strb.w	r3, [sp, #15]
  
  if(status == FLASH_COMPLETE)
 8018c04:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018c08:	2b04      	cmp	r3, #4
 8018c0a:	d12c      	bne.n	8018c66 <FLASH_OB_BOOTConfig+0xa6>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8018c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018c10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018c14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018c18:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018c1c:	6912      	ldr	r2, [r2, #16]
 8018c1e:	f042 0210 	orr.w	r2, r2, #16
 8018c22:	611a      	str	r2, [r3, #16]
           
	OB->USER = OB_BOOT1|0xEF;
 8018c24:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8018c28:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8018c2c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8018c30:	f062 0210 	orn	r2, r2, #16
 8018c34:	b2d2      	uxtb	r2, r2
 8018c36:	805a      	strh	r2, [r3, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018c38:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018c3c:	f000 fa08 	bl	8019050 <FLASH_WaitForLastOperation>
 8018c40:	4603      	mov	r3, r0
 8018c42:	f88d 300f 	strb.w	r3, [sp, #15]

    if(status != FLASH_TIMEOUT)
 8018c46:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018c4a:	2b05      	cmp	r3, #5
 8018c4c:	d00b      	beq.n	8018c66 <FLASH_OB_BOOTConfig+0xa6>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8018c4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018c52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018c56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018c5a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018c5e:	6912      	ldr	r2, [r2, #16]
 8018c60:	f022 0210 	bic.w	r2, r2, #16
 8018c64:	611a      	str	r2, [r3, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
 8018c66:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	b005      	add	sp, #20
 8018c6e:	bd00      	pop	{pc}

08018c70 <FLASH_OB_VDDAConfig>:
  *     @arg OB_VDDA_ANALOG_ON: Analog monitoring on VDDA Power source ON
  *     @arg OB_VDDA_ANALOG_OFF: Analog monitoring on VDDA Power source OFF
  * @retval None
  */
FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG)
{
 8018c70:	b500      	push	{lr}
 8018c72:	b085      	sub	sp, #20
 8018c74:	4603      	mov	r3, r0
 8018c76:	f88d 3007 	strb.w	r3, [sp, #7]
  FLASH_Status status = FLASH_COMPLETE; 
 8018c7a:	f04f 0304 	mov.w	r3, #4
 8018c7e:	f88d 300f 	strb.w	r3, [sp, #15]

  /* Check the parameters */
  assert_param(IS_OB_VDDA_ANALOG(OB_VDDA_ANALOG));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8018c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018c86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018c8a:	f240 1223 	movw	r2, #291	; 0x123
 8018c8e:	f2c4 5267 	movt	r2, #17767	; 0x4567
 8018c92:	609a      	str	r2, [r3, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 8018c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018c98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018c9c:	f648 12ab 	movw	r2, #35243	; 0x89ab
 8018ca0:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 8018ca4:	609a      	str	r2, [r3, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018ca6:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018caa:	f000 f9d1 	bl	8019050 <FLASH_WaitForLastOperation>
 8018cae:	4603      	mov	r3, r0
 8018cb0:	f88d 300f 	strb.w	r3, [sp, #15]
  
  if(status == FLASH_COMPLETE)
 8018cb4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018cb8:	2b04      	cmp	r3, #4
 8018cba:	d12c      	bne.n	8018d16 <FLASH_OB_VDDAConfig+0xa6>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8018cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018cc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018cc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018cc8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018ccc:	6912      	ldr	r2, [r2, #16]
 8018cce:	f042 0210 	orr.w	r2, r2, #16
 8018cd2:	611a      	str	r2, [r3, #16]
           
	OB->USER = OB_VDDA_ANALOG |0xDF;
 8018cd4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8018cd8:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8018cdc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8018ce0:	f062 0220 	orn	r2, r2, #32
 8018ce4:	b2d2      	uxtb	r2, r2
 8018ce6:	805a      	strh	r2, [r3, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018ce8:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018cec:	f000 f9b0 	bl	8019050 <FLASH_WaitForLastOperation>
 8018cf0:	4603      	mov	r3, r0
 8018cf2:	f88d 300f 	strb.w	r3, [sp, #15]

    if(status != FLASH_TIMEOUT)
 8018cf6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018cfa:	2b05      	cmp	r3, #5
 8018cfc:	d00b      	beq.n	8018d16 <FLASH_OB_VDDAConfig+0xa6>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8018cfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018d02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018d06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018d0a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018d0e:	6912      	ldr	r2, [r2, #16]
 8018d10:	f022 0210 	bic.w	r2, r2, #16
 8018d14:	611a      	str	r2, [r3, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
 8018d16:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	b005      	add	sp, #20
 8018d1e:	bd00      	pop	{pc}

08018d20 <FLASH_OB_SRAMParityConfig>:
  *             @arg OB_SRAM_PARITY_SET: Set SRAM partiy.
  *             @arg OB_SRAM_PARITY_RESET: Reset SRAM partiy.
  * @retval None
  */
FLASH_Status FLASH_OB_SRAMParityConfig(uint8_t OB_SRAM_Parity)
{
 8018d20:	b500      	push	{lr}
 8018d22:	b085      	sub	sp, #20
 8018d24:	4603      	mov	r3, r0
 8018d26:	f88d 3007 	strb.w	r3, [sp, #7]
  FLASH_Status status = FLASH_COMPLETE; 
 8018d2a:	f04f 0304 	mov.w	r3, #4
 8018d2e:	f88d 300f 	strb.w	r3, [sp, #15]

  /* Check the parameters */
  assert_param(IS_OB_SRAM_PARITY(OB_SRAM_Parity));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018d32:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018d36:	f000 f98b 	bl	8019050 <FLASH_WaitForLastOperation>
 8018d3a:	4603      	mov	r3, r0
 8018d3c:	f88d 300f 	strb.w	r3, [sp, #15]
  
  if(status == FLASH_COMPLETE)
 8018d40:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018d44:	2b04      	cmp	r3, #4
 8018d46:	d12c      	bne.n	8018da2 <FLASH_OB_SRAMParityConfig+0x82>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8018d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018d4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018d50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018d54:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018d58:	6912      	ldr	r2, [r2, #16]
 8018d5a:	f042 0210 	orr.w	r2, r2, #16
 8018d5e:	611a      	str	r2, [r3, #16]

    OB->USER = OB_SRAM_Parity | 0xBF;
 8018d60:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8018d64:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8018d68:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8018d6c:	f062 0240 	orn	r2, r2, #64	; 0x40
 8018d70:	b2d2      	uxtb	r2, r2
 8018d72:	805a      	strh	r2, [r3, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018d74:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018d78:	f000 f96a 	bl	8019050 <FLASH_WaitForLastOperation>
 8018d7c:	4603      	mov	r3, r0
 8018d7e:	f88d 300f 	strb.w	r3, [sp, #15]

    if(status != FLASH_TIMEOUT)
 8018d82:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018d86:	2b05      	cmp	r3, #5
 8018d88:	d00b      	beq.n	8018da2 <FLASH_OB_SRAMParityConfig+0x82>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8018d8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018d8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018d96:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018d9a:	6912      	ldr	r2, [r2, #16]
 8018d9c:	f022 0210 	bic.w	r2, r2, #16
 8018da0:	611a      	str	r2, [r3, #16]
    }
  }
  /* Return the Option Byte program Status */
  return status;
 8018da2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8018da6:	4618      	mov	r0, r3
 8018da8:	b005      	add	sp, #20
 8018daa:	bd00      	pop	{pc}

08018dac <FLASH_OB_WriteUser>:
  *     @arg OB_VDDA_ANALOG_ON / OB_VDDA_ANALOG_OFF: Analog monitoring on VDDA Power source ON / OFF
  * @retval FLASH Status: The returned value can be: 
  * FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER)
{
 8018dac:	b500      	push	{lr}
 8018dae:	b085      	sub	sp, #20
 8018db0:	4603      	mov	r3, r0
 8018db2:	f88d 3007 	strb.w	r3, [sp, #7]
  FLASH_Status status = FLASH_COMPLETE; 
 8018db6:	f04f 0304 	mov.w	r3, #4
 8018dba:	f88d 300f 	strb.w	r3, [sp, #15]

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8018dbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018dc2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018dc6:	f240 1223 	movw	r2, #291	; 0x123
 8018dca:	f2c4 5267 	movt	r2, #17767	; 0x4567
 8018dce:	609a      	str	r2, [r3, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 8018dd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018dd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018dd8:	f648 12ab 	movw	r2, #35243	; 0x89ab
 8018ddc:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 8018de0:	609a      	str	r2, [r3, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018de2:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018de6:	f000 f933 	bl	8019050 <FLASH_WaitForLastOperation>
 8018dea:	4603      	mov	r3, r0
 8018dec:	f88d 300f 	strb.w	r3, [sp, #15]
  
  if(status == FLASH_COMPLETE)
 8018df0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018df4:	2b04      	cmp	r3, #4
 8018df6:	d12c      	bne.n	8018e52 <FLASH_OB_WriteUser+0xa6>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8018df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018dfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018e00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018e04:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018e08:	6912      	ldr	r2, [r2, #16]
 8018e0a:	f042 0210 	orr.w	r2, r2, #16
 8018e0e:	611a      	str	r2, [r3, #16]
           
	  OB->USER = OB_USER | 0x88;
 8018e10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8018e14:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8018e18:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8018e1c:	f062 0277 	orn	r2, r2, #119	; 0x77
 8018e20:	b2d2      	uxtb	r2, r2
 8018e22:	805a      	strh	r2, [r3, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018e24:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018e28:	f000 f912 	bl	8019050 <FLASH_WaitForLastOperation>
 8018e2c:	4603      	mov	r3, r0
 8018e2e:	f88d 300f 	strb.w	r3, [sp, #15]

    if(status != FLASH_TIMEOUT)
 8018e32:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018e36:	2b05      	cmp	r3, #5
 8018e38:	d00b      	beq.n	8018e52 <FLASH_OB_WriteUser+0xa6>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8018e3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018e3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018e42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018e46:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018e4a:	6912      	ldr	r2, [r2, #16]
 8018e4c:	f022 0210 	bic.w	r2, r2, #16
 8018e50:	611a      	str	r2, [r3, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
 8018e52:	f89d 300f 	ldrb.w	r3, [sp, #15]

}
 8018e56:	4618      	mov	r0, r3
 8018e58:	b005      	add	sp, #20
 8018e5a:	bd00      	pop	{pc}

08018e5c <FLASH_ProgramOptionByteData>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
{
 8018e5c:	b500      	push	{lr}
 8018e5e:	b085      	sub	sp, #20
 8018e60:	9001      	str	r0, [sp, #4]
 8018e62:	460b      	mov	r3, r1
 8018e64:	f88d 3003 	strb.w	r3, [sp, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8018e68:	f04f 0304 	mov.w	r3, #4
 8018e6c:	f88d 300f 	strb.w	r3, [sp, #15]
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018e70:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018e74:	f000 f8ec 	bl	8019050 <FLASH_WaitForLastOperation>
 8018e78:	4603      	mov	r3, r0
 8018e7a:	f88d 300f 	strb.w	r3, [sp, #15]

  if(status == FLASH_COMPLETE)
 8018e7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018e82:	2b04      	cmp	r3, #4
 8018e84:	d127      	bne.n	8018ed6 <FLASH_ProgramOptionByteData+0x7a>
  {
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8018e86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018e8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018e8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018e92:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018e96:	6912      	ldr	r2, [r2, #16]
 8018e98:	f042 0210 	orr.w	r2, r2, #16
 8018e9c:	611a      	str	r2, [r3, #16]
    *(__IO uint16_t*)Address = Data;
 8018e9e:	9b01      	ldr	r3, [sp, #4]
 8018ea0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8018ea4:	b292      	uxth	r2, r2
 8018ea6:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8018ea8:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8018eac:	f000 f8d0 	bl	8019050 <FLASH_WaitForLastOperation>
 8018eb0:	4603      	mov	r3, r0
 8018eb2:	f88d 300f 	strb.w	r3, [sp, #15]
    
    if(status != FLASH_TIMEOUT)
 8018eb6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018eba:	2b05      	cmp	r3, #5
 8018ebc:	d00b      	beq.n	8018ed6 <FLASH_ProgramOptionByteData+0x7a>
    {
      /* If the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8018ebe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018ec2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018ec6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018eca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018ece:	6912      	ldr	r2, [r2, #16]
 8018ed0:	f022 0210 	bic.w	r2, r2, #16
 8018ed4:	611a      	str	r2, [r3, #16]
    }
  }
  /* Return the Option Byte Data Program Status */
  return status;
 8018ed6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8018eda:	4618      	mov	r0, r3
 8018edc:	b005      	add	sp, #20
 8018ede:	bd00      	pop	{pc}

08018ee0 <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes .
  */
uint8_t FLASH_OB_GetUser(void)
{
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OBR >> 8);
 8018ee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018ee4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018ee8:	69db      	ldr	r3, [r3, #28]
 8018eea:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8018eee:	b2db      	uxtb	r3, r3
}
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	4770      	bx	lr

08018ef4 <FLASH_OB_GetWRP>:
  * @retval The FLASH Write Protection Option Bytes value
  */
uint32_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (uint32_t)(FLASH->WRPR);
 8018ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018ef8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018efc:	6a1b      	ldr	r3, [r3, #32]
}
 8018efe:	4618      	mov	r0, r3
 8018f00:	4770      	bx	lr
 8018f02:	bf00      	nop

08018f04 <FLASH_OB_GetRDP>:
  * @brief  Checks whether the FLASH Read out Protection Status is set or not.
  * @param  None
  * @retval FLASH ReadOut Protection Status(SET or RESET)
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 8018f04:	b082      	sub	sp, #8
  FlagStatus readstatus = RESET;
 8018f06:	f04f 0300 	mov.w	r3, #0
 8018f0a:	f88d 3007 	strb.w	r3, [sp, #7]
  
  if ((uint8_t)(FLASH->OBR & (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2)) != RESET)
 8018f0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018f12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018f16:	69db      	ldr	r3, [r3, #28]
 8018f18:	b2db      	uxtb	r3, r3
 8018f1a:	f003 0306 	and.w	r3, r3, #6
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d004      	beq.n	8018f2c <FLASH_OB_GetRDP+0x28>
  {
    readstatus = SET;
 8018f22:	f04f 0301 	mov.w	r3, #1
 8018f26:	f88d 3007 	strb.w	r3, [sp, #7]
 8018f2a:	e003      	b.n	8018f34 <FLASH_OB_GetRDP+0x30>
  }
  else
  {
    readstatus = RESET;
 8018f2c:	f04f 0300 	mov.w	r3, #0
 8018f30:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  return readstatus;
 8018f34:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
 8018f38:	4618      	mov	r0, r3
 8018f3a:	b002      	add	sp, #8
 8018f3c:	4770      	bx	lr
 8018f3e:	bf00      	nop

08018f40 <FLASH_ITConfig>:
  *     @arg FLASH_IT_EOP: FLASH end of programming Interrupt
  *     @arg FLASH_IT_ERR: FLASH Error Interrupt 
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 8018f40:	b082      	sub	sp, #8
 8018f42:	9001      	str	r0, [sp, #4]
 8018f44:	460b      	mov	r3, r1
 8018f46:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8018f4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d00c      	beq.n	8018f6c <FLASH_ITConfig+0x2c>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8018f52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018f56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018f5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018f5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018f62:	6911      	ldr	r1, [r2, #16]
 8018f64:	9a01      	ldr	r2, [sp, #4]
 8018f66:	430a      	orrs	r2, r1
 8018f68:	611a      	str	r2, [r3, #16]
 8018f6a:	e00d      	b.n	8018f88 <FLASH_ITConfig+0x48>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 8018f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018f70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018f74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018f78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018f7c:	6911      	ldr	r1, [r2, #16]
 8018f7e:	9a01      	ldr	r2, [sp, #4]
 8018f80:	ea6f 0202 	mvn.w	r2, r2
 8018f84:	400a      	ands	r2, r1
 8018f86:	611a      	str	r2, [r3, #16]
  }
}
 8018f88:	b002      	add	sp, #8
 8018f8a:	4770      	bx	lr

08018f8c <FLASH_GetFlagStatus>:
  *     @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag
  *     @arg FLASH_FLAG_EOP: FLASH End of Programming flag        
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 8018f8c:	b084      	sub	sp, #16
 8018f8e:	9001      	str	r0, [sp, #4]
  FlagStatus bitstatus = RESET;
 8018f90:	f04f 0300 	mov.w	r3, #0
 8018f94:	f88d 300f 	strb.w	r3, [sp, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 8018f98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018fa0:	68da      	ldr	r2, [r3, #12]
 8018fa2:	9b01      	ldr	r3, [sp, #4]
 8018fa4:	4013      	ands	r3, r2
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d004      	beq.n	8018fb4 <FLASH_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 8018faa:	f04f 0301 	mov.w	r3, #1
 8018fae:	f88d 300f 	strb.w	r3, [sp, #15]
 8018fb2:	e003      	b.n	8018fbc <FLASH_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8018fb4:	f04f 0300 	mov.w	r3, #0
 8018fb8:	f88d 300f 	strb.w	r3, [sp, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 8018fbc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	b004      	add	sp, #16
 8018fc4:	4770      	bx	lr
 8018fc6:	bf00      	nop

08018fc8 <FLASH_ClearFlag>:
  *     @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag
  *     @arg FLASH_FLAG_EOP: FLASH End of Programming flag                
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8018fc8:	b082      	sub	sp, #8
 8018fca:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8018fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018fd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018fd4:	9a01      	ldr	r2, [sp, #4]
 8018fd6:	60da      	str	r2, [r3, #12]
}
 8018fd8:	b002      	add	sp, #8
 8018fda:	4770      	bx	lr

08018fdc <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_BUSY, FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8018fdc:	b082      	sub	sp, #8
  FLASH_Status FLASHstatus = FLASH_COMPLETE;
 8018fde:	f04f 0304 	mov.w	r3, #4
 8018fe2:	f88d 3007 	strb.w	r3, [sp, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8018fe6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018fea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018fee:	68db      	ldr	r3, [r3, #12]
 8018ff0:	f003 0301 	and.w	r3, r3, #1
 8018ff4:	b2db      	uxtb	r3, r3
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d004      	beq.n	8019004 <FLASH_GetStatus+0x28>
  {
    FLASHstatus = FLASH_BUSY;
 8018ffa:	f04f 0301 	mov.w	r3, #1
 8018ffe:	f88d 3007 	strb.w	r3, [sp, #7]
 8019002:	e01f      	b.n	8019044 <FLASH_GetStatus+0x68>
  }
  else 
  {  
    if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 8019004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019008:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801900c:	68db      	ldr	r3, [r3, #12]
 801900e:	f003 0310 	and.w	r3, r3, #16
 8019012:	2b00      	cmp	r3, #0
 8019014:	d004      	beq.n	8019020 <FLASH_GetStatus+0x44>
    { 
      FLASHstatus = FLASH_ERROR_WRP;
 8019016:	f04f 0302 	mov.w	r3, #2
 801901a:	f88d 3007 	strb.w	r3, [sp, #7]
 801901e:	e011      	b.n	8019044 <FLASH_GetStatus+0x68>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
 8019020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019024:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8019028:	68db      	ldr	r3, [r3, #12]
 801902a:	f003 0304 	and.w	r3, r3, #4
 801902e:	2b00      	cmp	r3, #0
 8019030:	d004      	beq.n	801903c <FLASH_GetStatus+0x60>
      {
        FLASHstatus = FLASH_ERROR_PROGRAM; 
 8019032:	f04f 0303 	mov.w	r3, #3
 8019036:	f88d 3007 	strb.w	r3, [sp, #7]
 801903a:	e003      	b.n	8019044 <FLASH_GetStatus+0x68>
      }
      else
      {
        FLASHstatus = FLASH_COMPLETE;
 801903c:	f04f 0304 	mov.w	r3, #4
 8019040:	f88d 3007 	strb.w	r3, [sp, #7]
      }
    }
  }
  /* Return the FLASH Status */
  return FLASHstatus;
 8019044:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
 8019048:	4618      	mov	r0, r3
 801904a:	b002      	add	sp, #8
 801904c:	4770      	bx	lr
 801904e:	bf00      	nop

08019050 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8019050:	b500      	push	{lr}
 8019052:	b085      	sub	sp, #20
 8019054:	9001      	str	r0, [sp, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8019056:	f04f 0304 	mov.w	r3, #4
 801905a:	f88d 300f 	strb.w	r3, [sp, #15]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 801905e:	f7ff ffbd 	bl	8018fdc <FLASH_GetStatus>
 8019062:	4603      	mov	r3, r0
 8019064:	f88d 300f 	strb.w	r3, [sp, #15]
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8019068:	e008      	b.n	801907c <FLASH_WaitForLastOperation+0x2c>
  {
    status = FLASH_GetStatus();
 801906a:	f7ff ffb7 	bl	8018fdc <FLASH_GetStatus>
 801906e:	4603      	mov	r3, r0
 8019070:	f88d 300f 	strb.w	r3, [sp, #15]
    Timeout--;
 8019074:	9b01      	ldr	r3, [sp, #4]
 8019076:	f103 33ff 	add.w	r3, r3, #4294967295
 801907a:	9301      	str	r3, [sp, #4]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 801907c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8019080:	2b01      	cmp	r3, #1
 8019082:	d102      	bne.n	801908a <FLASH_WaitForLastOperation+0x3a>
 8019084:	9b01      	ldr	r3, [sp, #4]
 8019086:	2b00      	cmp	r3, #0
 8019088:	d1ef      	bne.n	801906a <FLASH_WaitForLastOperation+0x1a>
  {
    status = FLASH_GetStatus();
    Timeout--;
  }
  
  if(Timeout == 0x00 )
 801908a:	9b01      	ldr	r3, [sp, #4]
 801908c:	2b00      	cmp	r3, #0
 801908e:	d103      	bne.n	8019098 <FLASH_WaitForLastOperation+0x48>
  {
    status = FLASH_TIMEOUT;
 8019090:	f04f 0305 	mov.w	r3, #5
 8019094:	f88d 300f 	strb.w	r3, [sp, #15]
  }
  /* Return the operation status */
  return status;
 8019098:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 801909c:	4618      	mov	r0, r3
 801909e:	b005      	add	sp, #20
 80190a0:	bd00      	pop	{pc}
 80190a2:	bf00      	nop

080190a4 <GPIO_DeInit>:
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80190a4:	b500      	push	{lr}
 80190a6:	b083      	sub	sp, #12
 80190a8:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 80190aa:	9b01      	ldr	r3, [sp, #4]
 80190ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80190b0:	d10c      	bne.n	80190cc <GPIO_DeInit+0x28>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80190b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80190b6:	f04f 0101 	mov.w	r1, #1
 80190ba:	f001 fdf3 	bl	801aca4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 80190be:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80190c2:	f04f 0100 	mov.w	r1, #0
 80190c6:	f001 fded 	bl	801aca4 <RCC_AHBPeriphResetCmd>
 80190ca:	e062      	b.n	8019192 <GPIO_DeInit+0xee>
  }
  else if(GPIOx == GPIOB)
 80190cc:	9a01      	ldr	r2, [sp, #4]
 80190ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80190d2:	f6c4 0300 	movt	r3, #18432	; 0x4800
 80190d6:	429a      	cmp	r2, r3
 80190d8:	d10c      	bne.n	80190f4 <GPIO_DeInit+0x50>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80190da:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80190de:	f04f 0101 	mov.w	r1, #1
 80190e2:	f001 fddf 	bl	801aca4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 80190e6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80190ea:	f04f 0100 	mov.w	r1, #0
 80190ee:	f001 fdd9 	bl	801aca4 <RCC_AHBPeriphResetCmd>
 80190f2:	e04e      	b.n	8019192 <GPIO_DeInit+0xee>
  }
  else if(GPIOx == GPIOC)
 80190f4:	9a01      	ldr	r2, [sp, #4]
 80190f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80190fa:	f6c4 0300 	movt	r3, #18432	; 0x4800
 80190fe:	429a      	cmp	r2, r3
 8019100:	d10c      	bne.n	801911c <GPIO_DeInit+0x78>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8019102:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8019106:	f04f 0101 	mov.w	r1, #1
 801910a:	f001 fdcb 	bl	801aca4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 801910e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8019112:	f04f 0100 	mov.w	r1, #0
 8019116:	f001 fdc5 	bl	801aca4 <RCC_AHBPeriphResetCmd>
 801911a:	e03a      	b.n	8019192 <GPIO_DeInit+0xee>
  }
  else if(GPIOx == GPIOD)
 801911c:	9a01      	ldr	r2, [sp, #4]
 801911e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8019122:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8019126:	429a      	cmp	r2, r3
 8019128:	d10c      	bne.n	8019144 <GPIO_DeInit+0xa0>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 801912a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801912e:	f04f 0101 	mov.w	r1, #1
 8019132:	f001 fdb7 	bl	801aca4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 8019136:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801913a:	f04f 0100 	mov.w	r1, #0
 801913e:	f001 fdb1 	bl	801aca4 <RCC_AHBPeriphResetCmd>
 8019142:	e026      	b.n	8019192 <GPIO_DeInit+0xee>
  }
  else if(GPIOx == GPIOE)
 8019144:	9a01      	ldr	r2, [sp, #4]
 8019146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801914a:	f6c4 0300 	movt	r3, #18432	; 0x4800
 801914e:	429a      	cmp	r2, r3
 8019150:	d10c      	bne.n	801916c <GPIO_DeInit+0xc8>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 8019152:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8019156:	f04f 0101 	mov.w	r1, #1
 801915a:	f001 fda3 	bl	801aca4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 801915e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8019162:	f04f 0100 	mov.w	r1, #0
 8019166:	f001 fd9d 	bl	801aca4 <RCC_AHBPeriphResetCmd>
 801916a:	e012      	b.n	8019192 <GPIO_DeInit+0xee>
  }
  else
  {
    if(GPIOx == GPIOF)
 801916c:	9a01      	ldr	r2, [sp, #4]
 801916e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8019172:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8019176:	429a      	cmp	r2, r3
 8019178:	d10b      	bne.n	8019192 <GPIO_DeInit+0xee>
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 801917a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 801917e:	f04f 0101 	mov.w	r1, #1
 8019182:	f001 fd8f 	bl	801aca4 <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8019186:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 801918a:	f04f 0100 	mov.w	r1, #0
 801918e:	f001 fd89 	bl	801aca4 <RCC_AHBPeriphResetCmd>
    }
  }
}
 8019192:	b003      	add	sp, #12
 8019194:	bd00      	pop	{pc}
 8019196:	bf00      	nop

08019198 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8019198:	b086      	sub	sp, #24
 801919a:	9001      	str	r0, [sp, #4]
 801919c:	9100      	str	r1, [sp, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 801919e:	f04f 0300 	mov.w	r3, #0
 80191a2:	9305      	str	r3, [sp, #20]
 80191a4:	f04f 0300 	mov.w	r3, #0
 80191a8:	9304      	str	r3, [sp, #16]
 80191aa:	f04f 0300 	mov.w	r3, #0
 80191ae:	9303      	str	r3, [sp, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80191b0:	f04f 0300 	mov.w	r3, #0
 80191b4:	9305      	str	r3, [sp, #20]
 80191b6:	e08c      	b.n	80192d2 <GPIO_Init+0x13a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80191b8:	9b05      	ldr	r3, [sp, #20]
 80191ba:	f04f 0201 	mov.w	r2, #1
 80191be:	fa02 f303 	lsl.w	r3, r2, r3
 80191c2:	9304      	str	r3, [sp, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80191c4:	9b00      	ldr	r3, [sp, #0]
 80191c6:	681a      	ldr	r2, [r3, #0]
 80191c8:	9b04      	ldr	r3, [sp, #16]
 80191ca:	4013      	ands	r3, r2
 80191cc:	9303      	str	r3, [sp, #12]

    if (currentpin == pos)
 80191ce:	9a03      	ldr	r2, [sp, #12]
 80191d0:	9b04      	ldr	r3, [sp, #16]
 80191d2:	429a      	cmp	r2, r3
 80191d4:	d179      	bne.n	80192ca <GPIO_Init+0x132>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80191d6:	9b00      	ldr	r3, [sp, #0]
 80191d8:	791b      	ldrb	r3, [r3, #4]
 80191da:	2b01      	cmp	r3, #1
 80191dc:	d003      	beq.n	80191e6 <GPIO_Init+0x4e>
 80191de:	9b00      	ldr	r3, [sp, #0]
 80191e0:	791b      	ldrb	r3, [r3, #4]
 80191e2:	2b02      	cmp	r3, #2
 80191e4:	d13a      	bne.n	801925c <GPIO_Init+0xc4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80191e6:	9b01      	ldr	r3, [sp, #4]
 80191e8:	689a      	ldr	r2, [r3, #8]
 80191ea:	9b05      	ldr	r3, [sp, #20]
 80191ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80191f0:	f04f 0103 	mov.w	r1, #3
 80191f4:	fa01 f303 	lsl.w	r3, r1, r3
 80191f8:	ea6f 0303 	mvn.w	r3, r3
 80191fc:	401a      	ands	r2, r3
 80191fe:	9b01      	ldr	r3, [sp, #4]
 8019200:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8019202:	9b01      	ldr	r3, [sp, #4]
 8019204:	689a      	ldr	r2, [r3, #8]
 8019206:	9b00      	ldr	r3, [sp, #0]
 8019208:	795b      	ldrb	r3, [r3, #5]
 801920a:	4619      	mov	r1, r3
 801920c:	9b05      	ldr	r3, [sp, #20]
 801920e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019212:	fa01 f303 	lsl.w	r3, r1, r3
 8019216:	431a      	orrs	r2, r3
 8019218:	9b01      	ldr	r3, [sp, #4]
 801921a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 801921c:	9b01      	ldr	r3, [sp, #4]
 801921e:	889b      	ldrh	r3, [r3, #4]
 8019220:	b29a      	uxth	r2, r3
 8019222:	9b05      	ldr	r3, [sp, #20]
 8019224:	b29b      	uxth	r3, r3
 8019226:	f04f 0101 	mov.w	r1, #1
 801922a:	fa01 f303 	lsl.w	r3, r1, r3
 801922e:	b29b      	uxth	r3, r3
 8019230:	ea6f 0303 	mvn.w	r3, r3
 8019234:	b29b      	uxth	r3, r3
 8019236:	4013      	ands	r3, r2
 8019238:	b29a      	uxth	r2, r3
 801923a:	9b01      	ldr	r3, [sp, #4]
 801923c:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 801923e:	9b01      	ldr	r3, [sp, #4]
 8019240:	889b      	ldrh	r3, [r3, #4]
 8019242:	b29a      	uxth	r2, r3
 8019244:	9b00      	ldr	r3, [sp, #0]
 8019246:	799b      	ldrb	r3, [r3, #6]
 8019248:	4619      	mov	r1, r3
 801924a:	9b05      	ldr	r3, [sp, #20]
 801924c:	b29b      	uxth	r3, r3
 801924e:	fa01 f303 	lsl.w	r3, r1, r3
 8019252:	b29b      	uxth	r3, r3
 8019254:	4313      	orrs	r3, r2
 8019256:	b29a      	uxth	r2, r3
 8019258:	9b01      	ldr	r3, [sp, #4]
 801925a:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 801925c:	9b01      	ldr	r3, [sp, #4]
 801925e:	681a      	ldr	r2, [r3, #0]
 8019260:	9b05      	ldr	r3, [sp, #20]
 8019262:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019266:	f04f 0103 	mov.w	r1, #3
 801926a:	fa01 f303 	lsl.w	r3, r1, r3
 801926e:	ea6f 0303 	mvn.w	r3, r3
 8019272:	401a      	ands	r2, r3
 8019274:	9b01      	ldr	r3, [sp, #4]
 8019276:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8019278:	9b01      	ldr	r3, [sp, #4]
 801927a:	681a      	ldr	r2, [r3, #0]
 801927c:	9b00      	ldr	r3, [sp, #0]
 801927e:	791b      	ldrb	r3, [r3, #4]
 8019280:	4619      	mov	r1, r3
 8019282:	9b05      	ldr	r3, [sp, #20]
 8019284:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019288:	fa01 f303 	lsl.w	r3, r1, r3
 801928c:	431a      	orrs	r2, r3
 801928e:	9b01      	ldr	r3, [sp, #4]
 8019290:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8019292:	9b01      	ldr	r3, [sp, #4]
 8019294:	68da      	ldr	r2, [r3, #12]
 8019296:	9b05      	ldr	r3, [sp, #20]
 8019298:	b29b      	uxth	r3, r3
 801929a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801929e:	f04f 0103 	mov.w	r1, #3
 80192a2:	fa01 f303 	lsl.w	r3, r1, r3
 80192a6:	ea6f 0303 	mvn.w	r3, r3
 80192aa:	401a      	ands	r2, r3
 80192ac:	9b01      	ldr	r3, [sp, #4]
 80192ae:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80192b0:	9b01      	ldr	r3, [sp, #4]
 80192b2:	68da      	ldr	r2, [r3, #12]
 80192b4:	9b00      	ldr	r3, [sp, #0]
 80192b6:	79db      	ldrb	r3, [r3, #7]
 80192b8:	4619      	mov	r1, r3
 80192ba:	9b05      	ldr	r3, [sp, #20]
 80192bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80192c0:	fa01 f303 	lsl.w	r3, r1, r3
 80192c4:	431a      	orrs	r2, r3
 80192c6:	9b01      	ldr	r3, [sp, #4]
 80192c8:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80192ca:	9b05      	ldr	r3, [sp, #20]
 80192cc:	f103 0301 	add.w	r3, r3, #1
 80192d0:	9305      	str	r3, [sp, #20]
 80192d2:	9b05      	ldr	r3, [sp, #20]
 80192d4:	2b0f      	cmp	r3, #15
 80192d6:	f67f af6f 	bls.w	80191b8 <GPIO_Init+0x20>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80192da:	b006      	add	sp, #24
 80192dc:	4770      	bx	lr
 80192de:	bf00      	nop

080192e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80192e0:	b082      	sub	sp, #8
 80192e2:	9001      	str	r0, [sp, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80192e4:	9b01      	ldr	r3, [sp, #4]
 80192e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80192ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80192ec:	9b01      	ldr	r3, [sp, #4]
 80192ee:	f04f 0200 	mov.w	r2, #0
 80192f2:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80192f4:	9b01      	ldr	r3, [sp, #4]
 80192f6:	f04f 0202 	mov.w	r2, #2
 80192fa:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80192fc:	9b01      	ldr	r3, [sp, #4]
 80192fe:	f04f 0200 	mov.w	r2, #0
 8019302:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8019304:	9b01      	ldr	r3, [sp, #4]
 8019306:	f04f 0200 	mov.w	r2, #0
 801930a:	71da      	strb	r2, [r3, #7]
}
 801930c:	b002      	add	sp, #8
 801930e:	4770      	bx	lr

08019310 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8019310:	b084      	sub	sp, #16
 8019312:	9001      	str	r0, [sp, #4]
 8019314:	460b      	mov	r3, r1
 8019316:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmp = 0x00010000;
 801931a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801931e:	9303      	str	r3, [sp, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8019320:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019324:	9a03      	ldr	r2, [sp, #12]
 8019326:	4313      	orrs	r3, r2
 8019328:	9303      	str	r3, [sp, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 801932a:	9b01      	ldr	r3, [sp, #4]
 801932c:	9a03      	ldr	r2, [sp, #12]
 801932e:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8019330:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019334:	9b01      	ldr	r3, [sp, #4]
 8019336:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8019338:	9b01      	ldr	r3, [sp, #4]
 801933a:	9a03      	ldr	r2, [sp, #12]
 801933c:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 801933e:	9b01      	ldr	r3, [sp, #4]
 8019340:	69db      	ldr	r3, [r3, #28]
 8019342:	9303      	str	r3, [sp, #12]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8019344:	9b01      	ldr	r3, [sp, #4]
 8019346:	69db      	ldr	r3, [r3, #28]
 8019348:	9303      	str	r3, [sp, #12]
}
 801934a:	b004      	add	sp, #16
 801934c:	4770      	bx	lr
 801934e:	bf00      	nop

08019350 <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8019350:	b084      	sub	sp, #16
 8019352:	9001      	str	r0, [sp, #4]
 8019354:	460b      	mov	r3, r1
 8019356:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint8_t bitstatus = 0x00;
 801935a:	f04f 0300 	mov.w	r3, #0
 801935e:	f88d 300f 	strb.w	r3, [sp, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8019362:	9b01      	ldr	r3, [sp, #4]
 8019364:	8a1b      	ldrh	r3, [r3, #16]
 8019366:	b29a      	uxth	r2, r3
 8019368:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801936c:	4013      	ands	r3, r2
 801936e:	b29b      	uxth	r3, r3
 8019370:	2b00      	cmp	r3, #0
 8019372:	d004      	beq.n	801937e <GPIO_ReadInputDataBit+0x2e>
  {
    bitstatus = (uint8_t)Bit_SET;
 8019374:	f04f 0301 	mov.w	r3, #1
 8019378:	f88d 300f 	strb.w	r3, [sp, #15]
 801937c:	e003      	b.n	8019386 <GPIO_ReadInputDataBit+0x36>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 801937e:	f04f 0300 	mov.w	r3, #0
 8019382:	f88d 300f 	strb.w	r3, [sp, #15]
  }
  return bitstatus;
 8019386:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 801938a:	4618      	mov	r0, r3
 801938c:	b004      	add	sp, #16
 801938e:	4770      	bx	lr

08019390 <GPIO_ReadInputData>:
  * @brief  Reads the specified input port pin.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval The input port pin value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8019390:	b082      	sub	sp, #8
 8019392:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8019394:	9b01      	ldr	r3, [sp, #4]
 8019396:	8a1b      	ldrh	r3, [r3, #16]
 8019398:	b29b      	uxth	r3, r3
}
 801939a:	4618      	mov	r0, r3
 801939c:	b002      	add	sp, #8
 801939e:	4770      	bx	lr

080193a0 <GPIO_ReadOutputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80193a0:	b084      	sub	sp, #16
 80193a2:	9001      	str	r0, [sp, #4]
 80193a4:	460b      	mov	r3, r1
 80193a6:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint8_t bitstatus = 0x00;
 80193aa:	f04f 0300 	mov.w	r3, #0
 80193ae:	f88d 300f 	strb.w	r3, [sp, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80193b2:	9b01      	ldr	r3, [sp, #4]
 80193b4:	8a9b      	ldrh	r3, [r3, #20]
 80193b6:	b29a      	uxth	r2, r3
 80193b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80193bc:	4013      	ands	r3, r2
 80193be:	b29b      	uxth	r3, r3
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d004      	beq.n	80193ce <GPIO_ReadOutputDataBit+0x2e>
  {
    bitstatus = (uint8_t)Bit_SET;
 80193c4:	f04f 0301 	mov.w	r3, #1
 80193c8:	f88d 300f 	strb.w	r3, [sp, #15]
 80193cc:	e003      	b.n	80193d6 <GPIO_ReadOutputDataBit+0x36>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80193ce:	f04f 0300 	mov.w	r3, #0
 80193d2:	f88d 300f 	strb.w	r3, [sp, #15]
  }
  return bitstatus;
 80193d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 80193da:	4618      	mov	r0, r3
 80193dc:	b004      	add	sp, #16
 80193de:	4770      	bx	lr

080193e0 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 80193e0:	b082      	sub	sp, #8
 80193e2:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->ODR);
 80193e4:	9b01      	ldr	r3, [sp, #4]
 80193e6:	8a9b      	ldrh	r3, [r3, #20]
 80193e8:	b29b      	uxth	r3, r3
}
 80193ea:	4618      	mov	r0, r3
 80193ec:	b002      	add	sp, #8
 80193ee:	4770      	bx	lr

080193f0 <GPIO_SetBits>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80193f0:	b082      	sub	sp, #8
 80193f2:	9001      	str	r0, [sp, #4]
 80193f4:	460b      	mov	r3, r1
 80193f6:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80193fa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80193fe:	9b01      	ldr	r3, [sp, #4]
 8019400:	619a      	str	r2, [r3, #24]
}
 8019402:	b002      	add	sp, #8
 8019404:	4770      	bx	lr
 8019406:	bf00      	nop

08019408 <GPIO_ResetBits>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8019408:	b082      	sub	sp, #8
 801940a:	9001      	str	r0, [sp, #4]
 801940c:	460b      	mov	r3, r1
 801940e:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8019412:	9b01      	ldr	r3, [sp, #4]
 8019414:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019418:	851a      	strh	r2, [r3, #40]	; 0x28
}
 801941a:	b002      	add	sp, #8
 801941c:	4770      	bx	lr
 801941e:	bf00      	nop

08019420 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8019420:	b082      	sub	sp, #8
 8019422:	9001      	str	r0, [sp, #4]
 8019424:	4613      	mov	r3, r2
 8019426:	460a      	mov	r2, r1
 8019428:	f8ad 2002 	strh.w	r2, [sp, #2]
 801942c:	f88d 3001 	strb.w	r3, [sp, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8019430:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d004      	beq.n	8019442 <GPIO_WriteBit+0x22>
  {
    GPIOx->BSRR = GPIO_Pin;
 8019438:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801943c:	9b01      	ldr	r3, [sp, #4]
 801943e:	619a      	str	r2, [r3, #24]
 8019440:	e003      	b.n	801944a <GPIO_WriteBit+0x2a>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 8019442:	9b01      	ldr	r3, [sp, #4]
 8019444:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019448:	851a      	strh	r2, [r3, #40]	; 0x28
  }
}
 801944a:	b002      	add	sp, #8
 801944c:	4770      	bx	lr
 801944e:	bf00      	nop

08019450 <GPIO_Write>:
  * @param  PortVal: specifies the value to be written to the port output data 
  *                  register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8019450:	b082      	sub	sp, #8
 8019452:	9001      	str	r0, [sp, #4]
 8019454:	460b      	mov	r3, r1
 8019456:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 801945a:	9b01      	ldr	r3, [sp, #4]
 801945c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019460:	829a      	strh	r2, [r3, #20]
}
 8019462:	b002      	add	sp, #8
 8019464:	4770      	bx	lr
 8019466:	bf00      	nop

08019468 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8019468:	b084      	sub	sp, #16
 801946a:	9001      	str	r0, [sp, #4]
 801946c:	4613      	mov	r3, r2
 801946e:	460a      	mov	r2, r1
 8019470:	f8ad 2002 	strh.w	r2, [sp, #2]
 8019474:	f88d 3001 	strb.w	r3, [sp, #1]
  uint32_t temp = 0x00;
 8019478:	f04f 0300 	mov.w	r3, #0
 801947c:	9303      	str	r3, [sp, #12]
  uint32_t temp_2 = 0x00;
 801947e:	f04f 0300 	mov.w	r3, #0
 8019482:	9302      	str	r3, [sp, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8019484:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8019488:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801948c:	f003 0307 	and.w	r3, r3, #7
 8019490:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019494:	fa02 f303 	lsl.w	r3, r2, r3
 8019498:	9303      	str	r3, [sp, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 801949a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801949e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80194a2:	b29b      	uxth	r3, r3
 80194a4:	461a      	mov	r2, r3
 80194a6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80194aa:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80194ae:	b29b      	uxth	r3, r3
 80194b0:	4619      	mov	r1, r3
 80194b2:	9b01      	ldr	r3, [sp, #4]
 80194b4:	f101 0108 	add.w	r1, r1, #8
 80194b8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80194bc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80194c0:	f003 0307 	and.w	r3, r3, #7
 80194c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80194c8:	f04f 000f 	mov.w	r0, #15
 80194cc:	fa00 f303 	lsl.w	r3, r0, r3
 80194d0:	ea6f 0303 	mvn.w	r3, r3
 80194d4:	4019      	ands	r1, r3
 80194d6:	9b01      	ldr	r3, [sp, #4]
 80194d8:	f102 0208 	add.w	r2, r2, #8
 80194dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80194e0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80194e4:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80194e8:	b29b      	uxth	r3, r3
 80194ea:	461a      	mov	r2, r3
 80194ec:	9b01      	ldr	r3, [sp, #4]
 80194ee:	f102 0208 	add.w	r2, r2, #8
 80194f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80194f6:	9b03      	ldr	r3, [sp, #12]
 80194f8:	4313      	orrs	r3, r2
 80194fa:	9302      	str	r3, [sp, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80194fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019500:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8019504:	b29b      	uxth	r3, r3
 8019506:	461a      	mov	r2, r3
 8019508:	9b01      	ldr	r3, [sp, #4]
 801950a:	f102 0208 	add.w	r2, r2, #8
 801950e:	9902      	ldr	r1, [sp, #8]
 8019510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8019514:	b004      	add	sp, #16
 8019516:	4770      	bx	lr

08019518 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8019518:	b500      	push	{lr}
 801951a:	b083      	sub	sp, #12
 801951c:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 801951e:	9a01      	ldr	r2, [sp, #4]
 8019520:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8019524:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8019528:	429a      	cmp	r2, r3
 801952a:	d10c      	bne.n	8019546 <I2C_DeInit+0x2e>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 801952c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8019530:	f04f 0101 	mov.w	r1, #1
 8019534:	f001 fc02 	bl	801ad3c <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 8019538:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 801953c:	f04f 0100 	mov.w	r1, #0
 8019540:	f001 fbfc 	bl	801ad3c <RCC_APB1PeriphResetCmd>
 8019544:	e00b      	b.n	801955e <I2C_DeInit+0x46>
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8019546:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 801954a:	f04f 0101 	mov.w	r1, #1
 801954e:	f001 fbf5 	bl	801ad3c <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8019552:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8019556:	f04f 0100 	mov.w	r1, #0
 801955a:	f001 fbef 	bl	801ad3c <RCC_APB1PeriphResetCmd>
  }
}
 801955e:	b003      	add	sp, #12
 8019560:	bd00      	pop	{pc}
 8019562:	bf00      	nop

08019564 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *         contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8019564:	b084      	sub	sp, #16
 8019566:	9001      	str	r0, [sp, #4]
 8019568:	9100      	str	r1, [sp, #0]
  uint32_t tmpreg = 0;
 801956a:	f04f 0300 	mov.w	r3, #0
 801956e:	9303      	str	r3, [sp, #12]
  assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
  assert_param(IS_I2C_ACK(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

  /* Disable I2Cx Peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 8019570:	9b01      	ldr	r3, [sp, #4]
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	f023 0201 	bic.w	r2, r3, #1
 8019578:	9b01      	ldr	r3, [sp, #4]
 801957a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx FILTERS Configuration ------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 801957c:	9b01      	ldr	r3, [sp, #4]
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	9303      	str	r3, [sp, #12]
  /* Clear I2Cx CR1 register */
  tmpreg &= CR1_CLEAR_MASK;
 8019582:	9a03      	ldr	r2, [sp, #12]
 8019584:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8019588:	f2c0 03cf 	movt	r3, #207	; 0xcf
 801958c:	4013      	ands	r3, r2
 801958e:	9303      	str	r3, [sp, #12]
  /* Configure I2Cx: analog and digital filter */
  /* Set ANFOFF bit according to I2C_AnalogFilter value */
  /* Set DFN bits according to I2C_DigitalFilter value */
  tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 8019590:	9b00      	ldr	r3, [sp, #0]
 8019592:	685a      	ldr	r2, [r3, #4]
 8019594:	9b00      	ldr	r3, [sp, #0]
 8019596:	689b      	ldr	r3, [r3, #8]
 8019598:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801959c:	4313      	orrs	r3, r2
 801959e:	9a03      	ldr	r2, [sp, #12]
 80195a0:	4313      	orrs	r3, r2
 80195a2:	9303      	str	r3, [sp, #12]
  
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80195a4:	9b01      	ldr	r3, [sp, #4]
 80195a6:	9a03      	ldr	r2, [sp, #12]
 80195a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMING Configuration -------------------*/
  /* Configure I2Cx: Timing */
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 80195aa:	9b00      	ldr	r3, [sp, #0]
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80195b2:	9b01      	ldr	r3, [sp, #4]
 80195b4:	611a      	str	r2, [r3, #16]

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80195b6:	9b01      	ldr	r3, [sp, #4]
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	f043 0201 	orr.w	r2, r3, #1
 80195be:	9b01      	ldr	r3, [sp, #4]
 80195c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
 80195c2:	f04f 0300 	mov.w	r3, #0
 80195c6:	9303      	str	r3, [sp, #12]
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 80195c8:	9b01      	ldr	r3, [sp, #4]
 80195ca:	9a03      	ldr	r2, [sp, #12]
 80195cc:	609a      	str	r2, [r3, #8]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
 80195ce:	9b01      	ldr	r3, [sp, #4]
 80195d0:	9a03      	ldr	r2, [sp, #12]
 80195d2:	60da      	str	r2, [r3, #12]
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 80195d4:	9b00      	ldr	r3, [sp, #0]
 80195d6:	699a      	ldr	r2, [r3, #24]
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
 80195d8:	9b00      	ldr	r3, [sp, #0]
 80195da:	691b      	ldr	r3, [r3, #16]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 80195dc:	4313      	orrs	r3, r2
 80195de:	9303      	str	r3, [sp, #12]
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
 80195e0:	9b01      	ldr	r3, [sp, #4]
 80195e2:	9a03      	ldr	r2, [sp, #12]
 80195e4:	609a      	str	r2, [r3, #8]
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 80195e6:	9b01      	ldr	r3, [sp, #4]
 80195e8:	689b      	ldr	r3, [r3, #8]
 80195ea:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80195ee:	9b01      	ldr	r3, [sp, #4]
 80195f0:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx MODE Configuration ---------------------*/
  /* Configure I2Cx: mode */
  /* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
  tmpreg = I2C_InitStruct->I2C_Mode;
 80195f2:	9b00      	ldr	r3, [sp, #0]
 80195f4:	68db      	ldr	r3, [r3, #12]
 80195f6:	9303      	str	r3, [sp, #12]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 |= tmpreg;
 80195f8:	9b01      	ldr	r3, [sp, #4]
 80195fa:	681a      	ldr	r2, [r3, #0]
 80195fc:	9b03      	ldr	r3, [sp, #12]
 80195fe:	431a      	orrs	r2, r3
 8019600:	9b01      	ldr	r3, [sp, #4]
 8019602:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx ACK Configuration ----------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8019604:	9b01      	ldr	r3, [sp, #4]
 8019606:	685b      	ldr	r3, [r3, #4]
 8019608:	9303      	str	r3, [sp, #12]
  /* Clear I2Cx CR2 register */
  tmpreg &= CR2_CLEAR_MASK;
 801960a:	9b03      	ldr	r3, [sp, #12]
 801960c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8019610:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8019614:	9303      	str	r3, [sp, #12]
  /* Configure I2Cx: acknowledgement */
  /* Set NACK bit according to I2C_Ack value */
  tmpreg |= I2C_InitStruct->I2C_Ack;
 8019616:	9b00      	ldr	r3, [sp, #0]
 8019618:	695b      	ldr	r3, [r3, #20]
 801961a:	9a03      	ldr	r2, [sp, #12]
 801961c:	4313      	orrs	r3, r2
 801961e:	9303      	str	r3, [sp, #12]
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8019620:	9b01      	ldr	r3, [sp, #4]
 8019622:	9a03      	ldr	r2, [sp, #12]
 8019624:	605a      	str	r2, [r3, #4]
}
 8019626:	b004      	add	sp, #16
 8019628:	4770      	bx	lr
 801962a:	bf00      	nop

0801962c <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 801962c:	b082      	sub	sp, #8
 801962e:	9001      	str	r0, [sp, #4]
  /*---------------- Reset I2C init structure parameters values --------------*/
  /* Initialize the I2C_Timing member */
  I2C_InitStruct->I2C_Timing = 0;
 8019630:	9b01      	ldr	r3, [sp, #4]
 8019632:	f04f 0200 	mov.w	r2, #0
 8019636:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_AnalogFilter member */
  I2C_InitStruct->I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 8019638:	9b01      	ldr	r3, [sp, #4]
 801963a:	f04f 0200 	mov.w	r2, #0
 801963e:	605a      	str	r2, [r3, #4]
  /* Initialize the I2C_DigitalFilter member */
  I2C_InitStruct->I2C_DigitalFilter = 0;
 8019640:	9b01      	ldr	r3, [sp, #4]
 8019642:	f04f 0200 	mov.w	r2, #0
 8019646:	609a      	str	r2, [r3, #8]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8019648:	9b01      	ldr	r3, [sp, #4]
 801964a:	f04f 0200 	mov.w	r2, #0
 801964e:	60da      	str	r2, [r3, #12]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8019650:	9b01      	ldr	r3, [sp, #4]
 8019652:	f04f 0200 	mov.w	r2, #0
 8019656:	611a      	str	r2, [r3, #16]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8019658:	9b01      	ldr	r3, [sp, #4]
 801965a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801965e:	615a      	str	r2, [r3, #20]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8019660:	9b01      	ldr	r3, [sp, #4]
 8019662:	f04f 0200 	mov.w	r2, #0
 8019666:	619a      	str	r2, [r3, #24]
}
 8019668:	b002      	add	sp, #8
 801966a:	4770      	bx	lr

0801966c <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 801966c:	b082      	sub	sp, #8
 801966e:	9001      	str	r0, [sp, #4]
 8019670:	460b      	mov	r3, r1
 8019672:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8019676:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801967a:	2b00      	cmp	r3, #0
 801967c:	d006      	beq.n	801968c <I2C_Cmd+0x20>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 801967e:	9b01      	ldr	r3, [sp, #4]
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	f043 0201 	orr.w	r2, r3, #1
 8019686:	9b01      	ldr	r3, [sp, #4]
 8019688:	601a      	str	r2, [r3, #0]
 801968a:	e005      	b.n	8019698 <I2C_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 801968c:	9b01      	ldr	r3, [sp, #4]
 801968e:	681b      	ldr	r3, [r3, #0]
 8019690:	f023 0201 	bic.w	r2, r3, #1
 8019694:	9b01      	ldr	r3, [sp, #4]
 8019696:	601a      	str	r2, [r3, #0]
  }
}
 8019698:	b002      	add	sp, #8
 801969a:	4770      	bx	lr

0801969c <I2C_SoftwareResetCmd>:
  * @brief  Enables or disables the specified I2C software reset.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx)
{
 801969c:	b082      	sub	sp, #8
 801969e:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Disable peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 80196a0:	9b01      	ldr	r3, [sp, #4]
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	f023 0201 	bic.w	r2, r3, #1
 80196a8:	9b01      	ldr	r3, [sp, #4]
 80196aa:	601a      	str	r2, [r3, #0]

  /* Perform a dummy read to delay the disable of peripheral for minimum
     3 APB clock cycles to perform the software reset functionality */
  *(__IO uint32_t *)(uint32_t)I2Cx; 
 80196ac:	9b01      	ldr	r3, [sp, #4]
 80196ae:	681b      	ldr	r3, [r3, #0]

  /* Enable peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80196b0:	9b01      	ldr	r3, [sp, #4]
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	f043 0201 	orr.w	r2, r3, #1
 80196b8:	9b01      	ldr	r3, [sp, #4]
 80196ba:	601a      	str	r2, [r3, #0]
}
 80196bc:	b002      	add	sp, #8
 80196be:	4770      	bx	lr

080196c0 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint32_t I2C_IT, FunctionalState NewState)
{
 80196c0:	b084      	sub	sp, #16
 80196c2:	9003      	str	r0, [sp, #12]
 80196c4:	9102      	str	r1, [sp, #8]
 80196c6:	4613      	mov	r3, r2
 80196c8:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80196cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d006      	beq.n	80196e2 <I2C_ITConfig+0x22>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR1 |= I2C_IT;
 80196d4:	9b03      	ldr	r3, [sp, #12]
 80196d6:	681a      	ldr	r2, [r3, #0]
 80196d8:	9b02      	ldr	r3, [sp, #8]
 80196da:	431a      	orrs	r2, r3
 80196dc:	9b03      	ldr	r3, [sp, #12]
 80196de:	601a      	str	r2, [r3, #0]
 80196e0:	e007      	b.n	80196f2 <I2C_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_IT);
 80196e2:	9b03      	ldr	r3, [sp, #12]
 80196e4:	681a      	ldr	r2, [r3, #0]
 80196e6:	9b02      	ldr	r3, [sp, #8]
 80196e8:	ea6f 0303 	mvn.w	r3, r3
 80196ec:	401a      	ands	r2, r3
 80196ee:	9b03      	ldr	r3, [sp, #12]
 80196f0:	601a      	str	r2, [r3, #0]
  }
}
 80196f2:	b004      	add	sp, #16
 80196f4:	4770      	bx	lr
 80196f6:	bf00      	nop

080196f8 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80196f8:	b082      	sub	sp, #8
 80196fa:	9001      	str	r0, [sp, #4]
 80196fc:	460b      	mov	r3, r1
 80196fe:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8019702:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019706:	2b00      	cmp	r3, #0
 8019708:	d006      	beq.n	8019718 <I2C_StretchClockCmd+0x20>
  {
    /* Enable clock stretching */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_NOSTRETCH);    
 801970a:	9b01      	ldr	r3, [sp, #4]
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8019712:	9b01      	ldr	r3, [sp, #4]
 8019714:	601a      	str	r2, [r3, #0]
 8019716:	e005      	b.n	8019724 <I2C_StretchClockCmd+0x2c>
  }
  else
  {
    /* Disable clock stretching  */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8019718:	9b01      	ldr	r3, [sp, #4]
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8019720:	9b01      	ldr	r3, [sp, #4]
 8019722:	601a      	str	r2, [r3, #0]
  }
}
 8019724:	b002      	add	sp, #8
 8019726:	4770      	bx	lr

08019728 <I2C_StopModeCmd>:
  * @param  NewState: new state of the I2Cx stop mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StopModeCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8019728:	b082      	sub	sp, #8
 801972a:	9001      	str	r0, [sp, #4]
 801972c:	460b      	mov	r3, r1
 801972e:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8019732:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019736:	2b00      	cmp	r3, #0
 8019738:	d006      	beq.n	8019748 <I2C_StopModeCmd+0x20>
  {
    /* Enable wakeup from stop mode */
    I2Cx->CR1 |= I2C_CR1_WUPEN;   
 801973a:	9b01      	ldr	r3, [sp, #4]
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8019742:	9b01      	ldr	r3, [sp, #4]
 8019744:	601a      	str	r2, [r3, #0]
 8019746:	e005      	b.n	8019754 <I2C_StopModeCmd+0x2c>
  }
  else
  {
    /* Disable wakeup from stop mode */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_WUPEN); 
 8019748:	9b01      	ldr	r3, [sp, #4]
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8019750:	9b01      	ldr	r3, [sp, #4]
 8019752:	601a      	str	r2, [r3, #0]
  }
}
 8019754:	b002      	add	sp, #8
 8019756:	4770      	bx	lr

08019758 <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C own address 2.
  *   This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8019758:	b082      	sub	sp, #8
 801975a:	9001      	str	r0, [sp, #4]
 801975c:	460b      	mov	r3, r1
 801975e:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8019762:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019766:	2b00      	cmp	r3, #0
 8019768:	d006      	beq.n	8019778 <I2C_DualAddressCmd+0x20>
  {
    /* Enable own address 2 */
    I2Cx->OAR2 |= I2C_OAR2_OA2EN;
 801976a:	9b01      	ldr	r3, [sp, #4]
 801976c:	68db      	ldr	r3, [r3, #12]
 801976e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8019772:	9b01      	ldr	r3, [sp, #4]
 8019774:	60da      	str	r2, [r3, #12]
 8019776:	e005      	b.n	8019784 <I2C_DualAddressCmd+0x2c>
  }
  else
  {
    /* Disable own address 2 */
    I2Cx->OAR2 &= (uint32_t)~((uint32_t)I2C_OAR2_OA2EN);
 8019778:	9b01      	ldr	r3, [sp, #4]
 801977a:	68db      	ldr	r3, [r3, #12]
 801977c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8019780:	9b01      	ldr	r3, [sp, #4]
 8019782:	60da      	str	r2, [r3, #12]
  }
}    
 8019784:	b002      	add	sp, #8
 8019786:	4770      	bx	lr

08019788 <I2C_OwnAddress2Config>:
  *     @arg I2C_OA2_Mask06: OA2[6:1] are masked and don't care.
  *     @arg I2C_OA2_Mask07: OA2[7:1] are masked and don't care.
  * @retval None
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Mask)
{
 8019788:	b084      	sub	sp, #16
 801978a:	9001      	str	r0, [sp, #4]
 801978c:	4613      	mov	r3, r2
 801978e:	460a      	mov	r2, r1
 8019790:	f8ad 2002 	strh.w	r2, [sp, #2]
 8019794:	f88d 3001 	strb.w	r3, [sp, #1]
  uint32_t tmpreg = 0;
 8019798:	f04f 0300 	mov.w	r3, #0
 801979c:	9303      	str	r3, [sp, #12]
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_OWN_ADDRESS2(Address));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(Mask));
  
  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 801979e:	9b01      	ldr	r3, [sp, #4]
 80197a0:	68db      	ldr	r3, [r3, #12]
 80197a2:	9303      	str	r3, [sp, #12]

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 80197a4:	9b03      	ldr	r3, [sp, #12]
 80197a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80197aa:	f023 030e 	bic.w	r3, r3, #14
 80197ae:	9303      	str	r3, [sp, #12]

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 80197b0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80197b4:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;
 80197b8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80197bc:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80197c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 80197c4:	4313      	orrs	r3, r2
 80197c6:	9a03      	ldr	r2, [sp, #12]
 80197c8:	4313      	orrs	r3, r2
 80197ca:	9303      	str	r3, [sp, #12]
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 80197cc:	9b01      	ldr	r3, [sp, #4]
 80197ce:	9a03      	ldr	r2, [sp, #12]
 80197d0:	60da      	str	r2, [r3, #12]
}
 80197d2:	b004      	add	sp, #16
 80197d4:	4770      	bx	lr
 80197d6:	bf00      	nop

080197d8 <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C general call mode.
  *   This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80197d8:	b082      	sub	sp, #8
 80197da:	9001      	str	r0, [sp, #4]
 80197dc:	460b      	mov	r3, r1
 80197de:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80197e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d006      	beq.n	80197f8 <I2C_GeneralCallCmd+0x20>
  {
    /* Enable general call mode */
    I2Cx->CR1 |= I2C_CR1_GCEN;
 80197ea:	9b01      	ldr	r3, [sp, #4]
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80197f2:	9b01      	ldr	r3, [sp, #4]
 80197f4:	601a      	str	r2, [r3, #0]
 80197f6:	e005      	b.n	8019804 <I2C_GeneralCallCmd+0x2c>
  }
  else
  {
    /* Disable general call mode */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_GCEN);
 80197f8:	9b01      	ldr	r3, [sp, #4]
 80197fa:	681b      	ldr	r3, [r3, #0]
 80197fc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8019800:	9b01      	ldr	r3, [sp, #4]
 8019802:	601a      	str	r2, [r3, #0]
  }
} 
 8019804:	b002      	add	sp, #8
 8019806:	4770      	bx	lr

08019808 <I2C_SlaveByteControlCmd>:
  * @param  NewState: new state of the I2C slave byte control.
  *   This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void I2C_SlaveByteControlCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8019808:	b082      	sub	sp, #8
 801980a:	9001      	str	r0, [sp, #4]
 801980c:	460b      	mov	r3, r1
 801980e:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8019812:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019816:	2b00      	cmp	r3, #0
 8019818:	d006      	beq.n	8019828 <I2C_SlaveByteControlCmd+0x20>
  {
    /* Enable slave byte control */
    I2Cx->CR1 |= I2C_CR1_SBC;
 801981a:	9b01      	ldr	r3, [sp, #4]
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019822:	9b01      	ldr	r3, [sp, #4]
 8019824:	601a      	str	r2, [r3, #0]
 8019826:	e005      	b.n	8019834 <I2C_SlaveByteControlCmd+0x2c>
  }
  else
  {
    /* Disable slave byte control */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_SBC);
 8019828:	9b01      	ldr	r3, [sp, #4]
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8019830:	9b01      	ldr	r3, [sp, #4]
 8019832:	601a      	str	r2, [r3, #0]
  }
}
 8019834:	b002      	add	sp, #8
 8019836:	4770      	bx	lr

08019838 <I2C_SlaveAddressConfig>:
  * @param  Address: specifies the slave address to be programmed.
  * @note   This function should be called before generating start condition.  
  * @retval None
  */
void I2C_SlaveAddressConfig(I2C_TypeDef* I2Cx, uint16_t Address)
{
 8019838:	b084      	sub	sp, #16
 801983a:	9001      	str	r0, [sp, #4]
 801983c:	460b      	mov	r3, r1
 801983e:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpreg = 0;
 8019842:	f04f 0300 	mov.w	r3, #0
 8019846:	9303      	str	r3, [sp, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));
               
  /* Get the old register value */
  tmpreg = I2Cx->CR2;
 8019848:	9b01      	ldr	r3, [sp, #4]
 801984a:	685b      	ldr	r3, [r3, #4]
 801984c:	9303      	str	r3, [sp, #12]

  /* Reset I2Cx SADD bit [9:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_SADD);
 801984e:	9b03      	ldr	r3, [sp, #12]
 8019850:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8019854:	f023 0307 	bic.w	r3, r3, #7
 8019858:	9303      	str	r3, [sp, #12]

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)((uint32_t)Address & I2C_CR2_SADD);
 801985a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801985e:	ea4f 5383 	mov.w	r3, r3, lsl #22
 8019862:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8019866:	9a03      	ldr	r2, [sp, #12]
 8019868:	4313      	orrs	r3, r2
 801986a:	9303      	str	r3, [sp, #12]

  /* Store the new register value */
  I2Cx->CR2 = tmpreg;
 801986c:	9b01      	ldr	r3, [sp, #4]
 801986e:	9a03      	ldr	r2, [sp, #12]
 8019870:	605a      	str	r2, [r3, #4]
}
 8019872:	b004      	add	sp, #16
 8019874:	4770      	bx	lr
 8019876:	bf00      	nop

08019878 <I2C_10BitAddressingModeCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note   This function should be called before generating start condition.  
  * @retval None
  */
void I2C_10BitAddressingModeCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8019878:	b082      	sub	sp, #8
 801987a:	9001      	str	r0, [sp, #4]
 801987c:	460b      	mov	r3, r1
 801987e:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8019882:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d006      	beq.n	8019898 <I2C_10BitAddressingModeCmd+0x20>
  {
    /* Enable 10-bit addressing mode */
    I2Cx->CR2 |= I2C_CR2_ADD10;
 801988a:	9b01      	ldr	r3, [sp, #4]
 801988c:	685b      	ldr	r3, [r3, #4]
 801988e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8019892:	9b01      	ldr	r3, [sp, #4]
 8019894:	605a      	str	r2, [r3, #4]
 8019896:	e005      	b.n	80198a4 <I2C_10BitAddressingModeCmd+0x2c>
  }
  else
  {
    /* Disable 10-bit addressing mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_ADD10);
 8019898:	9b01      	ldr	r3, [sp, #4]
 801989a:	685b      	ldr	r3, [r3, #4]
 801989c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80198a0:	9b01      	ldr	r3, [sp, #4]
 80198a2:	605a      	str	r2, [r3, #4]
  }
} 
 80198a4:	b002      	add	sp, #8
 80198a6:	4770      	bx	lr

080198a8 <I2C_AutoEndCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note   This function has effect if Reload mode is disabled.   
  * @retval None
  */
void I2C_AutoEndCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80198a8:	b082      	sub	sp, #8
 80198aa:	9001      	str	r0, [sp, #4]
 80198ac:	460b      	mov	r3, r1
 80198ae:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80198b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d006      	beq.n	80198c8 <I2C_AutoEndCmd+0x20>
  {
    /* Enable Auto end mode */
    I2Cx->CR2 |= I2C_CR2_AUTOEND;
 80198ba:	9b01      	ldr	r3, [sp, #4]
 80198bc:	685b      	ldr	r3, [r3, #4]
 80198be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80198c2:	9b01      	ldr	r3, [sp, #4]
 80198c4:	605a      	str	r2, [r3, #4]
 80198c6:	e005      	b.n	80198d4 <I2C_AutoEndCmd+0x2c>
  }
  else
  {
    /* Disable Auto end mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_AUTOEND);
 80198c8:	9b01      	ldr	r3, [sp, #4]
 80198ca:	685b      	ldr	r3, [r3, #4]
 80198cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80198d0:	9b01      	ldr	r3, [sp, #4]
 80198d2:	605a      	str	r2, [r3, #4]
  }
} 
 80198d4:	b002      	add	sp, #8
 80198d6:	4770      	bx	lr

080198d8 <I2C_ReloadCmd>:
  * @param  NewState: new state of the nbytes reload mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ReloadCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80198d8:	b082      	sub	sp, #8
 80198da:	9001      	str	r0, [sp, #4]
 80198dc:	460b      	mov	r3, r1
 80198de:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80198e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d006      	beq.n	80198f8 <I2C_ReloadCmd+0x20>
  {
    /* Enable Auto Reload mode */
    I2Cx->CR2 |= I2C_CR2_RELOAD;
 80198ea:	9b01      	ldr	r3, [sp, #4]
 80198ec:	685b      	ldr	r3, [r3, #4]
 80198ee:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80198f2:	9b01      	ldr	r3, [sp, #4]
 80198f4:	605a      	str	r2, [r3, #4]
 80198f6:	e005      	b.n	8019904 <I2C_ReloadCmd+0x2c>
  }
  else
  {
    /* Disable Auto Reload mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RELOAD);
 80198f8:	9b01      	ldr	r3, [sp, #4]
 80198fa:	685b      	ldr	r3, [r3, #4]
 80198fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8019900:	9b01      	ldr	r3, [sp, #4]
 8019902:	605a      	str	r2, [r3, #4]
  }
}
 8019904:	b002      	add	sp, #8
 8019906:	4770      	bx	lr

08019908 <I2C_NumberOfBytesConfig>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Number_Bytes: specifies the number of bytes to be programmed.
  * @retval None
  */
void I2C_NumberOfBytesConfig(I2C_TypeDef* I2Cx, uint8_t Number_Bytes)
{
 8019908:	b084      	sub	sp, #16
 801990a:	9001      	str	r0, [sp, #4]
 801990c:	460b      	mov	r3, r1
 801990e:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t tmpreg = 0;
 8019912:	f04f 0300 	mov.w	r3, #0
 8019916:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->CR2;
 8019918:	9b01      	ldr	r3, [sp, #4]
 801991a:	685b      	ldr	r3, [r3, #4]
 801991c:	9303      	str	r3, [sp, #12]

  /* Reset I2Cx Nbytes bit [7:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_NBYTES);
 801991e:	9b03      	ldr	r3, [sp, #12]
 8019920:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8019924:	9303      	str	r3, [sp, #12]

  /* Set I2Cx Nbytes */
  tmpreg |= (uint32_t)(((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES);
 8019926:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801992a:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801992e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8019932:	9a03      	ldr	r2, [sp, #12]
 8019934:	4313      	orrs	r3, r2
 8019936:	9303      	str	r3, [sp, #12]

  /* Store the new register value */
  I2Cx->CR2 = tmpreg;
 8019938:	9b01      	ldr	r3, [sp, #4]
 801993a:	9a03      	ldr	r2, [sp, #12]
 801993c:	605a      	str	r2, [r3, #4]
}  
 801993e:	b004      	add	sp, #16
 8019940:	4770      	bx	lr
 8019942:	bf00      	nop

08019944 <I2C_MasterRequestConfig>:
  *     @arg I2C_Direction_Transmitter: Master request a write transfer
  *     @arg I2C_Direction_Receiver: Master request a read transfer 
  * @retval None
  */
void I2C_MasterRequestConfig(I2C_TypeDef* I2Cx, uint16_t I2C_Direction)
{
 8019944:	b082      	sub	sp, #8
 8019946:	9001      	str	r0, [sp, #4]
 8019948:	460b      	mov	r3, r1
 801994a:	f8ad 3002 	strh.w	r3, [sp, #2]
/* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction == I2C_Direction_Transmitter)
 801994e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019952:	2b00      	cmp	r3, #0
 8019954:	d106      	bne.n	8019964 <I2C_MasterRequestConfig+0x20>
  {
    /* Request a write Transfer */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RD_WRN);
 8019956:	9b01      	ldr	r3, [sp, #4]
 8019958:	685b      	ldr	r3, [r3, #4]
 801995a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801995e:	9b01      	ldr	r3, [sp, #4]
 8019960:	605a      	str	r2, [r3, #4]
 8019962:	e005      	b.n	8019970 <I2C_MasterRequestConfig+0x2c>
  }
  else
  {
    /* Request a read Transfer */
    I2Cx->CR2 |= I2C_CR2_RD_WRN;
 8019964:	9b01      	ldr	r3, [sp, #4]
 8019966:	685b      	ldr	r3, [r3, #4]
 8019968:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801996c:	9b01      	ldr	r3, [sp, #4]
 801996e:	605a      	str	r2, [r3, #4]
  }
}  
 8019970:	b002      	add	sp, #8
 8019972:	4770      	bx	lr

08019974 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8019974:	b082      	sub	sp, #8
 8019976:	9001      	str	r0, [sp, #4]
 8019978:	460b      	mov	r3, r1
 801997a:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801997e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019982:	2b00      	cmp	r3, #0
 8019984:	d006      	beq.n	8019994 <I2C_GenerateSTART+0x20>
  {
    /* Generate a START condition */
    I2Cx->CR2 |= I2C_CR2_START;
 8019986:	9b01      	ldr	r3, [sp, #4]
 8019988:	685b      	ldr	r3, [r3, #4]
 801998a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801998e:	9b01      	ldr	r3, [sp, #4]
 8019990:	605a      	str	r2, [r3, #4]
 8019992:	e005      	b.n	80199a0 <I2C_GenerateSTART+0x2c>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_START);
 8019994:	9b01      	ldr	r3, [sp, #4]
 8019996:	685b      	ldr	r3, [r3, #4]
 8019998:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801999c:	9b01      	ldr	r3, [sp, #4]
 801999e:	605a      	str	r2, [r3, #4]
  }
}  
 80199a0:	b002      	add	sp, #8
 80199a2:	4770      	bx	lr

080199a4 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80199a4:	b082      	sub	sp, #8
 80199a6:	9001      	str	r0, [sp, #4]
 80199a8:	460b      	mov	r3, r1
 80199aa:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80199ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d006      	beq.n	80199c4 <I2C_GenerateSTOP+0x20>
  {
    /* Generate a STOP condition */
    I2Cx->CR2 |= I2C_CR2_STOP;
 80199b6:	9b01      	ldr	r3, [sp, #4]
 80199b8:	685b      	ldr	r3, [r3, #4]
 80199ba:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80199be:	9b01      	ldr	r3, [sp, #4]
 80199c0:	605a      	str	r2, [r3, #4]
 80199c2:	e005      	b.n	80199d0 <I2C_GenerateSTOP+0x2c>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_STOP);
 80199c4:	9b01      	ldr	r3, [sp, #4]
 80199c6:	685b      	ldr	r3, [r3, #4]
 80199c8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80199cc:	9b01      	ldr	r3, [sp, #4]
 80199ce:	605a      	str	r2, [r3, #4]
  }
}  
 80199d0:	b002      	add	sp, #8
 80199d2:	4770      	bx	lr

080199d4 <I2C_10BitAddressHeaderCmd>:
  * @note   This mode can be used only when switching from master transmitter mode 
  *         to master receiver mode.        
  * @retval None
  */
void I2C_10BitAddressHeaderCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80199d4:	b082      	sub	sp, #8
 80199d6:	9001      	str	r0, [sp, #4]
 80199d8:	460b      	mov	r3, r1
 80199da:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80199de:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d006      	beq.n	80199f4 <I2C_10BitAddressHeaderCmd+0x20>
  {
    /* Enable 10-bit header only mode */
    I2Cx->CR2 |= I2C_CR2_HEAD10R;
 80199e6:	9b01      	ldr	r3, [sp, #4]
 80199e8:	685b      	ldr	r3, [r3, #4]
 80199ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80199ee:	9b01      	ldr	r3, [sp, #4]
 80199f0:	605a      	str	r2, [r3, #4]
 80199f2:	e005      	b.n	8019a00 <I2C_10BitAddressHeaderCmd+0x2c>
  }
  else
  {
    /* Disable 10-bit header only mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_HEAD10R);
 80199f4:	9b01      	ldr	r3, [sp, #4]
 80199f6:	685b      	ldr	r3, [r3, #4]
 80199f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80199fc:	9b01      	ldr	r3, [sp, #4]
 80199fe:	605a      	str	r2, [r3, #4]
  }
}    
 8019a00:	b002      	add	sp, #8
 8019a02:	4770      	bx	lr

08019a04 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the Acknowledge.
  *   This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8019a04:	b082      	sub	sp, #8
 8019a06:	9001      	str	r0, [sp, #4]
 8019a08:	460b      	mov	r3, r1
 8019a0a:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8019a0e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d006      	beq.n	8019a24 <I2C_AcknowledgeConfig+0x20>
  {
    /* Enable ACK generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_NACK);    
 8019a16:	9b01      	ldr	r3, [sp, #4]
 8019a18:	685b      	ldr	r3, [r3, #4]
 8019a1a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8019a1e:	9b01      	ldr	r3, [sp, #4]
 8019a20:	605a      	str	r2, [r3, #4]
 8019a22:	e005      	b.n	8019a30 <I2C_AcknowledgeConfig+0x2c>
  }
  else
  {
    /* Enable NACK generation */
    I2Cx->CR2 |= I2C_CR2_NACK;
 8019a24:	9b01      	ldr	r3, [sp, #4]
 8019a26:	685b      	ldr	r3, [r3, #4]
 8019a28:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8019a2c:	9b01      	ldr	r3, [sp, #4]
 8019a2e:	605a      	str	r2, [r3, #4]
  }
}
 8019a30:	b002      	add	sp, #8
 8019a32:	4770      	bx	lr

08019a34 <I2C_GetAddressMatched>:
  * @brief  Returns the I2C slave matched address .
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the slave matched address .
  */
uint8_t I2C_GetAddressMatched(I2C_TypeDef* I2Cx)
{
 8019a34:	b082      	sub	sp, #8
 8019a36:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  return (uint8_t)(((uint32_t)I2Cx->ISR & I2C_ISR_ADDCODE) >> 16) ;
 8019a38:	9b01      	ldr	r3, [sp, #4]
 8019a3a:	699b      	ldr	r3, [r3, #24]
 8019a3c:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
 8019a40:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8019a44:	b2db      	uxtb	r3, r3
}
 8019a46:	4618      	mov	r0, r3
 8019a48:	b002      	add	sp, #8
 8019a4a:	4770      	bx	lr

08019a4c <I2C_GetTransferDirection>:
  * @brief  Returns the I2C slave received request.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received request.
  */
uint16_t I2C_GetTransferDirection(I2C_TypeDef* I2Cx)
{
 8019a4c:	b084      	sub	sp, #16
 8019a4e:	9001      	str	r0, [sp, #4]
  uint32_t tmpreg = 0;
 8019a50:	f04f 0300 	mov.w	r3, #0
 8019a54:	9302      	str	r3, [sp, #8]
  uint16_t direction = 0;
 8019a56:	f04f 0300 	mov.w	r3, #0
 8019a5a:	f8ad 300e 	strh.w	r3, [sp, #14]
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  tmpreg = (uint32_t)(I2Cx->ISR & I2C_ISR_DIR);
 8019a5e:	9b01      	ldr	r3, [sp, #4]
 8019a60:	699b      	ldr	r3, [r3, #24]
 8019a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019a66:	9302      	str	r3, [sp, #8]
  
  /* If write transfer is requested */
  if (tmpreg == 0)
 8019a68:	9b02      	ldr	r3, [sp, #8]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d104      	bne.n	8019a78 <I2C_GetTransferDirection+0x2c>
  {
    /* write transfer is requested */
    direction = I2C_Direction_Transmitter;
 8019a6e:	f04f 0300 	mov.w	r3, #0
 8019a72:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019a76:	e003      	b.n	8019a80 <I2C_GetTransferDirection+0x34>
  }
  else
  {
    /* Read transfer is requested */
    direction = I2C_Direction_Receiver;
 8019a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019a7c:	f8ad 300e 	strh.w	r3, [sp, #14]
  }  
  return direction;
 8019a80:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
 8019a84:	4618      	mov	r0, r3
 8019a86:	b004      	add	sp, #16
 8019a88:	4770      	bx	lr
 8019a8a:	bf00      	nop

08019a8c <I2C_TransferHandling>:
  *     @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *     @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 8019a8c:	b086      	sub	sp, #24
 8019a8e:	9003      	str	r0, [sp, #12]
 8019a90:	9301      	str	r3, [sp, #4]
 8019a92:	460b      	mov	r3, r1
 8019a94:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019a98:	4613      	mov	r3, r2
 8019a9a:	f88d 3009 	strb.w	r3, [sp, #9]
  uint32_t tmpreg = 0;
 8019a9e:	f04f 0300 	mov.w	r3, #0
 8019aa2:	9305      	str	r3, [sp, #20]
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 8019aa4:	9b03      	ldr	r3, [sp, #12]
 8019aa6:	685b      	ldr	r3, [r3, #4]
 8019aa8:	9305      	str	r3, [sp, #20]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8019aaa:	9a05      	ldr	r2, [sp, #20]
 8019aac:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8019ab0:	f6cf 4300 	movt	r3, #64512	; 0xfc00
 8019ab4:	4013      	ands	r3, r2
 8019ab6:	9305      	str	r3, [sp, #20]
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 8019ab8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019abc:	ea4f 5383 	mov.w	r3, r3, lsl #22
 8019ac0:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8019ac4:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8019ac8:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8019acc:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8019ad0:	431a      	orrs	r2, r3
 8019ad2:	9b01      	ldr	r3, [sp, #4]
 8019ad4:	431a      	orrs	r2, r3
 8019ad6:	9b06      	ldr	r3, [sp, #24]
 8019ad8:	4313      	orrs	r3, r2
 8019ada:	9a05      	ldr	r2, [sp, #20]
 8019adc:	4313      	orrs	r3, r2
 8019ade:	9305      	str	r3, [sp, #20]
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 8019ae0:	9b03      	ldr	r3, [sp, #12]
 8019ae2:	9a05      	ldr	r2, [sp, #20]
 8019ae4:	605a      	str	r2, [r3, #4]
}  
 8019ae6:	b006      	add	sp, #24
 8019ae8:	4770      	bx	lr
 8019aea:	bf00      	nop

08019aec <I2C_SMBusAlertCmd>:
  * @param  NewState: new state of the I2Cx SMBus alert.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SMBusAlertCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8019aec:	b082      	sub	sp, #8
 8019aee:	9001      	str	r0, [sp, #4]
 8019af0:	460b      	mov	r3, r1
 8019af2:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8019af6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d006      	beq.n	8019b0c <I2C_SMBusAlertCmd+0x20>
  {
    /* Enable SMBus alert */
    I2Cx->CR1 |= I2C_CR1_ALERTEN;   
 8019afe:	9b01      	ldr	r3, [sp, #4]
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8019b06:	9b01      	ldr	r3, [sp, #4]
 8019b08:	601a      	str	r2, [r3, #0]
 8019b0a:	e005      	b.n	8019b18 <I2C_SMBusAlertCmd+0x2c>
  }
  else
  {
    /* Disable SMBus alert */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_ALERTEN); 
 8019b0c:	9b01      	ldr	r3, [sp, #4]
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8019b14:	9b01      	ldr	r3, [sp, #4]
 8019b16:	601a      	str	r2, [r3, #0]
  }
}
 8019b18:	b002      	add	sp, #8
 8019b1a:	4770      	bx	lr

08019b1c <I2C_ClockTimeoutCmd>:
  * @param  NewState: new state of the I2Cx clock Timeout.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ClockTimeoutCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8019b1c:	b082      	sub	sp, #8
 8019b1e:	9001      	str	r0, [sp, #4]
 8019b20:	460b      	mov	r3, r1
 8019b22:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8019b26:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d006      	beq.n	8019b3c <I2C_ClockTimeoutCmd+0x20>
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIMOUTEN;   
 8019b2e:	9b01      	ldr	r3, [sp, #4]
 8019b30:	695b      	ldr	r3, [r3, #20]
 8019b32:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8019b36:	9b01      	ldr	r3, [sp, #4]
 8019b38:	615a      	str	r2, [r3, #20]
 8019b3a:	e005      	b.n	8019b48 <I2C_ClockTimeoutCmd+0x2c>
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMOUTEN); 
 8019b3c:	9b01      	ldr	r3, [sp, #4]
 8019b3e:	695b      	ldr	r3, [r3, #20]
 8019b40:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8019b44:	9b01      	ldr	r3, [sp, #4]
 8019b46:	615a      	str	r2, [r3, #20]
  }
}
 8019b48:	b002      	add	sp, #8
 8019b4a:	4770      	bx	lr

08019b4c <I2C_ExtendedClockTimeoutCmd>:
  * @param  NewState: new state of the I2Cx Extended clock Timeout.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ExtendedClockTimeoutCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8019b4c:	b082      	sub	sp, #8
 8019b4e:	9001      	str	r0, [sp, #4]
 8019b50:	460b      	mov	r3, r1
 8019b52:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8019b56:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d006      	beq.n	8019b6c <I2C_ExtendedClockTimeoutCmd+0x20>
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
 8019b5e:	9b01      	ldr	r3, [sp, #4]
 8019b60:	695b      	ldr	r3, [r3, #20]
 8019b62:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8019b66:	9b01      	ldr	r3, [sp, #4]
 8019b68:	615a      	str	r2, [r3, #20]
 8019b6a:	e005      	b.n	8019b78 <I2C_ExtendedClockTimeoutCmd+0x2c>
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TEXTEN); 
 8019b6c:	9b01      	ldr	r3, [sp, #4]
 8019b6e:	695b      	ldr	r3, [r3, #20]
 8019b70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019b74:	9b01      	ldr	r3, [sp, #4]
 8019b76:	615a      	str	r2, [r3, #20]
  }
}
 8019b78:	b002      	add	sp, #8
 8019b7a:	4770      	bx	lr

08019b7c <I2C_IdleClockTimeoutCmd>:
  * @param  NewState: new state of the I2Cx Idle clock Timeout.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_IdleClockTimeoutCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8019b7c:	b082      	sub	sp, #8
 8019b7e:	9001      	str	r0, [sp, #4]
 8019b80:	460b      	mov	r3, r1
 8019b82:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8019b86:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d006      	beq.n	8019b9c <I2C_IdleClockTimeoutCmd+0x20>
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIDLE;   
 8019b8e:	9b01      	ldr	r3, [sp, #4]
 8019b90:	695b      	ldr	r3, [r3, #20]
 8019b92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8019b96:	9b01      	ldr	r3, [sp, #4]
 8019b98:	615a      	str	r2, [r3, #20]
 8019b9a:	e005      	b.n	8019ba8 <I2C_IdleClockTimeoutCmd+0x2c>
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIDLE); 
 8019b9c:	9b01      	ldr	r3, [sp, #4]
 8019b9e:	695b      	ldr	r3, [r3, #20]
 8019ba0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8019ba4:	9b01      	ldr	r3, [sp, #4]
 8019ba6:	615a      	str	r2, [r3, #20]
  }
}
 8019ba8:	b002      	add	sp, #8
 8019baa:	4770      	bx	lr

08019bac <I2C_TimeoutAConfig>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Timeout: specifies the TimeoutA to be programmed. 
  * @retval None
  */
void I2C_TimeoutAConfig(I2C_TypeDef* I2Cx, uint16_t Timeout)
{
 8019bac:	b084      	sub	sp, #16
 8019bae:	9001      	str	r0, [sp, #4]
 8019bb0:	460b      	mov	r3, r1
 8019bb2:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpreg = 0;
 8019bb6:	f04f 0300 	mov.w	r3, #0
 8019bba:	9303      	str	r3, [sp, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_TIMEOUT(Timeout));
    
  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;
 8019bbc:	9b01      	ldr	r3, [sp, #4]
 8019bbe:	695b      	ldr	r3, [r3, #20]
 8019bc0:	9303      	str	r3, [sp, #12]

  /* Reset I2Cx TIMEOUTA bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTA);
 8019bc2:	9b03      	ldr	r3, [sp, #12]
 8019bc4:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 8019bc8:	f023 031f 	bic.w	r3, r3, #31
 8019bcc:	9303      	str	r3, [sp, #12]

  /* Set I2Cx TIMEOUTA */
  tmpreg |= (uint32_t)((uint32_t)Timeout & I2C_TIMEOUTR_TIMEOUTA) ;
 8019bce:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019bd2:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8019bd6:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8019bda:	9a03      	ldr	r2, [sp, #12]
 8019bdc:	4313      	orrs	r3, r2
 8019bde:	9303      	str	r3, [sp, #12]

  /* Store the new register value */
  I2Cx->TIMEOUTR = tmpreg;
 8019be0:	9b01      	ldr	r3, [sp, #4]
 8019be2:	9a03      	ldr	r2, [sp, #12]
 8019be4:	615a      	str	r2, [r3, #20]
}
 8019be6:	b004      	add	sp, #16
 8019be8:	4770      	bx	lr
 8019bea:	bf00      	nop

08019bec <I2C_TimeoutBConfig>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Timeout: specifies the TimeoutB to be programmed. 
  * @retval None
  */
void I2C_TimeoutBConfig(I2C_TypeDef* I2Cx, uint16_t Timeout)
{
 8019bec:	b084      	sub	sp, #16
 8019bee:	9001      	str	r0, [sp, #4]
 8019bf0:	460b      	mov	r3, r1
 8019bf2:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpreg = 0;
 8019bf6:	f04f 0300 	mov.w	r3, #0
 8019bfa:	9303      	str	r3, [sp, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_TIMEOUT(Timeout));

  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;
 8019bfc:	9b01      	ldr	r3, [sp, #4]
 8019bfe:	695b      	ldr	r3, [r3, #20]
 8019c00:	9303      	str	r3, [sp, #12]

  /* Reset I2Cx TIMEOUTB bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTB);
 8019c02:	9b03      	ldr	r3, [sp, #12]
 8019c04:	f023 637e 	bic.w	r3, r3, #266338304	; 0xfe00000
 8019c08:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8019c0c:	9303      	str	r3, [sp, #12]

  /* Set I2Cx TIMEOUTB */
  tmpreg |= (uint32_t)(((uint32_t)Timeout << 16) & I2C_TIMEOUTR_TIMEOUTB) ;
 8019c0e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019c12:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8019c16:	f04f 0300 	mov.w	r3, #0
 8019c1a:	f6c0 73ff 	movt	r3, #4095	; 0xfff
 8019c1e:	4013      	ands	r3, r2
 8019c20:	9a03      	ldr	r2, [sp, #12]
 8019c22:	4313      	orrs	r3, r2
 8019c24:	9303      	str	r3, [sp, #12]

  /* Store the new register value */
  I2Cx->TIMEOUTR = tmpreg;
 8019c26:	9b01      	ldr	r3, [sp, #4]
 8019c28:	9a03      	ldr	r2, [sp, #12]
 8019c2a:	615a      	str	r2, [r3, #20]
}
 8019c2c:	b004      	add	sp, #16
 8019c2e:	4770      	bx	lr

08019c30 <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC calculation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8019c30:	b082      	sub	sp, #8
 8019c32:	9001      	str	r0, [sp, #4]
 8019c34:	460b      	mov	r3, r1
 8019c36:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8019c3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d006      	beq.n	8019c50 <I2C_CalculatePEC+0x20>
  {
    /* Enable PEC calculation */
    I2Cx->CR1 |= I2C_CR1_PECEN;   
 8019c42:	9b01      	ldr	r3, [sp, #4]
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8019c4a:	9b01      	ldr	r3, [sp, #4]
 8019c4c:	601a      	str	r2, [r3, #0]
 8019c4e:	e005      	b.n	8019c5c <I2C_CalculatePEC+0x2c>
  }
  else
  {
    /* Disable PEC calculation */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PECEN); 
 8019c50:	9b01      	ldr	r3, [sp, #4]
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8019c58:	9b01      	ldr	r3, [sp, #4]
 8019c5a:	601a      	str	r2, [r3, #0]
  }
}
 8019c5c:	b002      	add	sp, #8
 8019c5e:	4770      	bx	lr

08019c60 <I2C_PECRequestCmd>:
  * @param  NewState: new state of the I2Cx PEC request.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_PECRequestCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8019c60:	b082      	sub	sp, #8
 8019c62:	9001      	str	r0, [sp, #4]
 8019c64:	460b      	mov	r3, r1
 8019c66:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8019c6a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d006      	beq.n	8019c80 <I2C_PECRequestCmd+0x20>
  {
    /* Enable PEC transmission/reception request */
    I2Cx->CR1 |= I2C_CR2_PECBYTE;   
 8019c72:	9b01      	ldr	r3, [sp, #4]
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8019c7a:	9b01      	ldr	r3, [sp, #4]
 8019c7c:	601a      	str	r2, [r3, #0]
 8019c7e:	e005      	b.n	8019c8c <I2C_PECRequestCmd+0x2c>
  }
  else
  {
    /* Disable PEC transmission/reception request */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR2_PECBYTE); 
 8019c80:	9b01      	ldr	r3, [sp, #4]
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8019c88:	9b01      	ldr	r3, [sp, #4]
 8019c8a:	601a      	str	r2, [r3, #0]
  }
}
 8019c8c:	b002      	add	sp, #8
 8019c8e:	4770      	bx	lr

08019c90 <I2C_GetPEC>:
  * @brief  Returns the I2C PEC.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the PEC .
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 8019c90:	b082      	sub	sp, #8
 8019c92:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  return (uint8_t)((uint32_t)I2Cx->PECR & I2C_PECR_PEC);
 8019c94:	9b01      	ldr	r3, [sp, #4]
 8019c96:	6a1b      	ldr	r3, [r3, #32]
 8019c98:	b2db      	uxtb	r3, r3
}
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	b002      	add	sp, #8
 8019c9e:	4770      	bx	lr

08019ca0 <I2C_ReadRegister>:
  *     @arg I2C_Register_RXDR: RXDR register.
  *     @arg I2C_Register_TXDR: TXDR register.
  * @retval The value of the read register.
  */
uint32_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8019ca0:	b084      	sub	sp, #16
 8019ca2:	9001      	str	r0, [sp, #4]
 8019ca4:	460b      	mov	r3, r1
 8019ca6:	f88d 3003 	strb.w	r3, [sp, #3]
  __IO uint32_t tmp = 0;
 8019caa:	f04f 0300 	mov.w	r3, #0
 8019cae:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t)I2Cx;
 8019cb0:	9b01      	ldr	r3, [sp, #4]
 8019cb2:	9303      	str	r3, [sp, #12]
  tmp += I2C_Register;
 8019cb4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8019cb8:	9b03      	ldr	r3, [sp, #12]
 8019cba:	18d3      	adds	r3, r2, r3
 8019cbc:	9303      	str	r3, [sp, #12]

  /* Return the selected register value */
  return (*(__IO uint32_t *) tmp);
 8019cbe:	9b03      	ldr	r3, [sp, #12]
 8019cc0:	681b      	ldr	r3, [r3, #0]
}
 8019cc2:	4618      	mov	r0, r3
 8019cc4:	b004      	add	sp, #16
 8019cc6:	4770      	bx	lr

08019cc8 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8019cc8:	b082      	sub	sp, #8
 8019cca:	9001      	str	r0, [sp, #4]
 8019ccc:	460b      	mov	r3, r1
 8019cce:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 8019cd2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8019cd6:	9b01      	ldr	r3, [sp, #4]
 8019cd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8019cda:	b002      	add	sp, #8
 8019cdc:	4770      	bx	lr
 8019cde:	bf00      	nop

08019ce0 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8019ce0:	b082      	sub	sp, #8
 8019ce2:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 8019ce4:	9b01      	ldr	r3, [sp, #4]
 8019ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ce8:	b2db      	uxtb	r3, r3
}  
 8019cea:	4618      	mov	r0, r3
 8019cec:	b002      	add	sp, #8
 8019cee:	4770      	bx	lr

08019cf0 <I2C_DMACmd>:
  * @param  NewState: new state of the selected I2C DMA transfer request.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, uint32_t I2C_DMAReq, FunctionalState NewState)
{
 8019cf0:	b084      	sub	sp, #16
 8019cf2:	9003      	str	r0, [sp, #12]
 8019cf4:	9102      	str	r1, [sp, #8]
 8019cf6:	4613      	mov	r3, r2
 8019cf8:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));

  if (NewState != DISABLE)
 8019cfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d006      	beq.n	8019d12 <I2C_DMACmd+0x22>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR1 |= I2C_DMAReq;
 8019d04:	9b03      	ldr	r3, [sp, #12]
 8019d06:	681a      	ldr	r2, [r3, #0]
 8019d08:	9b02      	ldr	r3, [sp, #8]
 8019d0a:	431a      	orrs	r2, r3
 8019d0c:	9b03      	ldr	r3, [sp, #12]
 8019d0e:	601a      	str	r2, [r3, #0]
 8019d10:	e007      	b.n	8019d22 <I2C_DMACmd+0x32>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR1 &= (uint32_t)~I2C_DMAReq;
 8019d12:	9b03      	ldr	r3, [sp, #12]
 8019d14:	681a      	ldr	r2, [r3, #0]
 8019d16:	9b02      	ldr	r3, [sp, #8]
 8019d18:	ea6f 0303 	mvn.w	r3, r3
 8019d1c:	401a      	ands	r2, r3
 8019d1e:	9b03      	ldr	r3, [sp, #12]
 8019d20:	601a      	str	r2, [r3, #0]
  }
}
 8019d22:	b004      	add	sp, #16
 8019d24:	4770      	bx	lr
 8019d26:	bf00      	nop

08019d28 <I2C_GetFlagStatus>:
  *     @arg I2C_FLAG_ALERT: SMBus Alert
  *     @arg I2C_FLAG_BUSY: Bus busy
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8019d28:	b084      	sub	sp, #16
 8019d2a:	9001      	str	r0, [sp, #4]
 8019d2c:	9100      	str	r1, [sp, #0]
  uint32_t tmpreg = 0;
 8019d2e:	f04f 0300 	mov.w	r3, #0
 8019d32:	9302      	str	r3, [sp, #8]
  FlagStatus bitstatus = RESET;
 8019d34:	f04f 0300 	mov.w	r3, #0
 8019d38:	f88d 300f 	strb.w	r3, [sp, #15]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8019d3c:	9b01      	ldr	r3, [sp, #4]
 8019d3e:	699b      	ldr	r3, [r3, #24]
 8019d40:	9302      	str	r3, [sp, #8]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 8019d42:	9a02      	ldr	r2, [sp, #8]
 8019d44:	9b00      	ldr	r3, [sp, #0]
 8019d46:	4013      	ands	r3, r2
 8019d48:	9302      	str	r3, [sp, #8]
  
  if(tmpreg != 0)
 8019d4a:	9b02      	ldr	r3, [sp, #8]
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d004      	beq.n	8019d5a <I2C_GetFlagStatus+0x32>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8019d50:	f04f 0301 	mov.w	r3, #1
 8019d54:	f88d 300f 	strb.w	r3, [sp, #15]
 8019d58:	e003      	b.n	8019d62 <I2C_GetFlagStatus+0x3a>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8019d5a:	f04f 0300 	mov.w	r3, #0
 8019d5e:	f88d 300f 	strb.w	r3, [sp, #15]
  }
  return bitstatus;
 8019d62:	f89d 300f 	ldrb.w	r3, [sp, #15]
}  
 8019d66:	4618      	mov	r0, r3
 8019d68:	b004      	add	sp, #16
 8019d6a:	4770      	bx	lr

08019d6c <I2C_ClearFlag>:
  *     @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
  *     @arg I2C_FLAG_ALERT: SMBus Alert
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{ 
 8019d6c:	b082      	sub	sp, #8
 8019d6e:	9001      	str	r0, [sp, #4]
 8019d70:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 8019d72:	9b01      	ldr	r3, [sp, #4]
 8019d74:	9a00      	ldr	r2, [sp, #0]
 8019d76:	61da      	str	r2, [r3, #28]
  }
 8019d78:	b002      	add	sp, #8
 8019d7a:	4770      	bx	lr

08019d7c <I2C_GetITStatus>:
  *     @arg I2C_IT_TIMEOUT: Timeout or Tlow detection flag
  *     @arg I2C_IT_ALERT: SMBus Alert
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8019d7c:	b086      	sub	sp, #24
 8019d7e:	9001      	str	r0, [sp, #4]
 8019d80:	9100      	str	r1, [sp, #0]
  uint32_t tmpreg = 0;
 8019d82:	f04f 0300 	mov.w	r3, #0
 8019d86:	9303      	str	r3, [sp, #12]
  ITStatus bitstatus = RESET;
 8019d88:	f04f 0300 	mov.w	r3, #0
 8019d8c:	f88d 3017 	strb.w	r3, [sp, #23]
  uint32_t enablestatus = 0;
 8019d90:	f04f 0300 	mov.w	r3, #0
 8019d94:	9304      	str	r3, [sp, #16]
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  /* If Error interrupt */
  if((uint32_t)(I2C_IT & ERROR_IT_MASK))
 8019d96:	9b00      	ldr	r3, [sp, #0]
 8019d98:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d005      	beq.n	8019dac <I2C_GetITStatus+0x30>
  {
    enablestatus = (uint32_t)((I2C_CR1_ERRIE) & (I2Cx->CR1));
 8019da0:	9b01      	ldr	r3, [sp, #4]
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019da8:	9304      	str	r3, [sp, #16]
 8019daa:	e00f      	b.n	8019dcc <I2C_GetITStatus+0x50>
  }
  /* If TC interrupt */
  else if((uint32_t)(I2C_IT & TC_IT_MASK))
 8019dac:	9b00      	ldr	r3, [sp, #0]
 8019dae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d005      	beq.n	8019dc2 <I2C_GetITStatus+0x46>
  {
    enablestatus = (uint32_t)((I2C_CR1_TCIE) & (I2Cx->CR1));
 8019db6:	9b01      	ldr	r3, [sp, #4]
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019dbe:	9304      	str	r3, [sp, #16]
 8019dc0:	e004      	b.n	8019dcc <I2C_GetITStatus+0x50>
  }
  else
  {
    enablestatus = (uint32_t)((I2C_IT) & (I2Cx->CR1));
 8019dc2:	9b01      	ldr	r3, [sp, #4]
 8019dc4:	681a      	ldr	r2, [r3, #0]
 8019dc6:	9b00      	ldr	r3, [sp, #0]
 8019dc8:	4013      	ands	r3, r2
 8019dca:	9304      	str	r3, [sp, #16]
  }
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8019dcc:	9b01      	ldr	r3, [sp, #4]
 8019dce:	699b      	ldr	r3, [r3, #24]
 8019dd0:	9303      	str	r3, [sp, #12]

  /* Get flag status */
  tmpreg &= I2C_IT;
 8019dd2:	9a03      	ldr	r2, [sp, #12]
 8019dd4:	9b00      	ldr	r3, [sp, #0]
 8019dd6:	4013      	ands	r3, r2
 8019dd8:	9303      	str	r3, [sp, #12]

  /* Check the status of the specified I2C flag */
  if((tmpreg != RESET) && enablestatus)
 8019dda:	9b03      	ldr	r3, [sp, #12]
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d007      	beq.n	8019df0 <I2C_GetITStatus+0x74>
 8019de0:	9b04      	ldr	r3, [sp, #16]
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d004      	beq.n	8019df0 <I2C_GetITStatus+0x74>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8019de6:	f04f 0301 	mov.w	r3, #1
 8019dea:	f88d 3017 	strb.w	r3, [sp, #23]
 8019dee:	e003      	b.n	8019df8 <I2C_GetITStatus+0x7c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8019df0:	f04f 0300 	mov.w	r3, #0
 8019df4:	f88d 3017 	strb.w	r3, [sp, #23]
  }

  /* Return the I2C_IT status */
  return bitstatus;
 8019df8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
 8019dfc:	4618      	mov	r0, r3
 8019dfe:	b006      	add	sp, #24
 8019e00:	4770      	bx	lr
 8019e02:	bf00      	nop

08019e04 <I2C_ClearITPendingBit>:
  *     @arg I2C_IT_TIMEOUT: Timeout or Tlow detection flag
  *     @arg I2C_IT_ALERT: SMBus Alert
  * @retval The new state of I2C_IT (SET or RESET).
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8019e04:	b082      	sub	sp, #8
 8019e06:	9001      	str	r0, [sp, #4]
 8019e08:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_IT;
 8019e0a:	9b01      	ldr	r3, [sp, #4]
 8019e0c:	9a00      	ldr	r2, [sp, #0]
 8019e0e:	61da      	str	r2, [r3, #28]
}
 8019e10:	b002      	add	sp, #8
 8019e12:	4770      	bx	lr

08019e14 <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8019e14:	b082      	sub	sp, #8
 8019e16:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8019e18:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8019e1c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8019e20:	9a01      	ldr	r2, [sp, #4]
 8019e22:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
 8019e26:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8019e2a:	60da      	str	r2, [r3, #12]
}
 8019e2c:	b002      	add	sp, #8
 8019e2e:	4770      	bx	lr

08019e30 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8019e30:	b086      	sub	sp, #24
 8019e32:	9001      	str	r0, [sp, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8019e34:	f04f 0300 	mov.w	r3, #0
 8019e38:	9305      	str	r3, [sp, #20]
 8019e3a:	f04f 0300 	mov.w	r3, #0
 8019e3e:	9304      	str	r3, [sp, #16]
 8019e40:	f04f 030f 	mov.w	r3, #15
 8019e44:	9303      	str	r3, [sp, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8019e46:	9b01      	ldr	r3, [sp, #4]
 8019e48:	78db      	ldrb	r3, [r3, #3]
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d047      	beq.n	8019ede <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8019e4e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8019e52:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8019e56:	68db      	ldr	r3, [r3, #12]
 8019e58:	ea6f 0303 	mvn.w	r3, r3
 8019e5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8019e60:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8019e64:	9305      	str	r3, [sp, #20]
    tmppre = (0x4 - tmppriority);
 8019e66:	9b05      	ldr	r3, [sp, #20]
 8019e68:	f1c3 0304 	rsb	r3, r3, #4
 8019e6c:	9304      	str	r3, [sp, #16]
    tmpsub = tmpsub >> tmppriority;
 8019e6e:	9b05      	ldr	r3, [sp, #20]
 8019e70:	9a03      	ldr	r2, [sp, #12]
 8019e72:	fa22 f303 	lsr.w	r3, r2, r3
 8019e76:	9303      	str	r3, [sp, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8019e78:	9b01      	ldr	r3, [sp, #4]
 8019e7a:	785b      	ldrb	r3, [r3, #1]
 8019e7c:	461a      	mov	r2, r3
 8019e7e:	9b04      	ldr	r3, [sp, #16]
 8019e80:	fa02 f303 	lsl.w	r3, r2, r3
 8019e84:	9305      	str	r3, [sp, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8019e86:	9b01      	ldr	r3, [sp, #4]
 8019e88:	789b      	ldrb	r3, [r3, #2]
 8019e8a:	461a      	mov	r2, r3
 8019e8c:	9b03      	ldr	r3, [sp, #12]
 8019e8e:	4013      	ands	r3, r2
 8019e90:	9a05      	ldr	r2, [sp, #20]
 8019e92:	4313      	orrs	r3, r2
 8019e94:	9305      	str	r3, [sp, #20]
    tmppriority = tmppriority << 0x04;
 8019e96:	9b05      	ldr	r3, [sp, #20]
 8019e98:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8019e9c:	9305      	str	r3, [sp, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8019e9e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8019ea2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8019ea6:	9a01      	ldr	r2, [sp, #4]
 8019ea8:	7812      	ldrb	r2, [r2, #0]
 8019eaa:	4611      	mov	r1, r2
 8019eac:	9a05      	ldr	r2, [sp, #20]
 8019eae:	b2d2      	uxtb	r2, r2
 8019eb0:	185b      	adds	r3, r3, r1
 8019eb2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8019eb6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8019eba:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8019ebe:	9a01      	ldr	r2, [sp, #4]
 8019ec0:	7812      	ldrb	r2, [r2, #0]
 8019ec2:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8019ec6:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8019ec8:	9901      	ldr	r1, [sp, #4]
 8019eca:	7809      	ldrb	r1, [r1, #0]
 8019ecc:	f001 011f 	and.w	r1, r1, #31
 8019ed0:	f04f 0001 	mov.w	r0, #1
 8019ed4:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8019ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8019edc:	e014      	b.n	8019f08 <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8019ede:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8019ee2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8019ee6:	9a01      	ldr	r2, [sp, #4]
 8019ee8:	7812      	ldrb	r2, [r2, #0]
 8019eea:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8019eee:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8019ef0:	9901      	ldr	r1, [sp, #4]
 8019ef2:	7809      	ldrb	r1, [r1, #0]
 8019ef4:	f001 011f 	and.w	r1, r1, #31
 8019ef8:	f04f 0001 	mov.w	r0, #1
 8019efc:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8019f00:	f102 0220 	add.w	r2, r2, #32
 8019f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8019f08:	b006      	add	sp, #24
 8019f0a:	4770      	bx	lr

08019f0c <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8019f0c:	b082      	sub	sp, #8
 8019f0e:	9001      	str	r0, [sp, #4]
 8019f10:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8019f12:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8019f16:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8019f1a:	9a00      	ldr	r2, [sp, #0]
 8019f1c:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8019f20:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8019f24:	9901      	ldr	r1, [sp, #4]
 8019f26:	430a      	orrs	r2, r1
 8019f28:	609a      	str	r2, [r3, #8]
}
 8019f2a:	b002      	add	sp, #8
 8019f2c:	4770      	bx	lr
 8019f2e:	bf00      	nop

08019f30 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8019f30:	b082      	sub	sp, #8
 8019f32:	4602      	mov	r2, r0
 8019f34:	460b      	mov	r3, r1
 8019f36:	f88d 2007 	strb.w	r2, [sp, #7]
 8019f3a:	f88d 3006 	strb.w	r3, [sp, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8019f3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d00d      	beq.n	8019f62 <NVIC_SystemLPConfig+0x32>
  {
    SCB->SCR |= LowPowerMode;
 8019f46:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8019f4a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8019f4e:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8019f52:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8019f56:	6911      	ldr	r1, [r2, #16]
 8019f58:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8019f5c:	430a      	orrs	r2, r1
 8019f5e:	611a      	str	r2, [r3, #16]
 8019f60:	e00e      	b.n	8019f80 <NVIC_SystemLPConfig+0x50>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8019f62:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8019f66:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8019f6a:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8019f6e:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8019f72:	6911      	ldr	r1, [r2, #16]
 8019f74:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8019f78:	ea6f 0202 	mvn.w	r2, r2
 8019f7c:	400a      	ands	r2, r1
 8019f7e:	611a      	str	r2, [r3, #16]
  }
}
 8019f80:	b002      	add	sp, #8
 8019f82:	4770      	bx	lr

08019f84 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8019f84:	b082      	sub	sp, #8
 8019f86:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8019f88:	9b01      	ldr	r3, [sp, #4]
 8019f8a:	2b04      	cmp	r3, #4
 8019f8c:	d10c      	bne.n	8019fa8 <SysTick_CLKSourceConfig+0x24>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8019f8e:	f24e 0310 	movw	r3, #57360	; 0xe010
 8019f92:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8019f96:	f24e 0210 	movw	r2, #57360	; 0xe010
 8019f9a:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8019f9e:	6812      	ldr	r2, [r2, #0]
 8019fa0:	f042 0204 	orr.w	r2, r2, #4
 8019fa4:	601a      	str	r2, [r3, #0]
 8019fa6:	e00b      	b.n	8019fc0 <SysTick_CLKSourceConfig+0x3c>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8019fa8:	f24e 0310 	movw	r3, #57360	; 0xe010
 8019fac:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8019fb0:	f24e 0210 	movw	r2, #57360	; 0xe010
 8019fb4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8019fb8:	6812      	ldr	r2, [r2, #0]
 8019fba:	f022 0204 	bic.w	r2, r2, #4
 8019fbe:	601a      	str	r2, [r3, #0]
  }
}
 8019fc0:	b002      	add	sp, #8
 8019fc2:	4770      	bx	lr

08019fc4 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8019fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019fc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8019fcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019fd0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8019fd4:	6812      	ldr	r2, [r2, #0]
 8019fd6:	f042 0201 	orr.w	r2, r2, #1
 8019fda:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFC000;
 8019fdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019fe0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8019fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019fe8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8019fec:	6859      	ldr	r1, [r3, #4]
 8019fee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8019ff2:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8019ff6:	400b      	ands	r3, r1
 8019ff8:	6053      	str	r3, [r2, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8019ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019ffe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a002:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a006:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801a00a:	6812      	ldr	r2, [r2, #0]
 801a00c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 801a010:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801a014:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801a016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a01a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a01e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a022:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801a026:	6812      	ldr	r2, [r2, #0]
 801a028:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801a02c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 801a02e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a032:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a036:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a03a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801a03e:	6852      	ldr	r2, [r2, #4]
 801a040:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 801a044:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;
 801a046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a04a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a04e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a052:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801a056:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801a058:	f422 527e 	bic.w	r2, r2, #16256	; 0x3f80
 801a05c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 801a060:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00FCCC;
 801a062:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a066:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801a06a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a06e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a072:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801a074:	f64f 43cc 	movw	r3, #64716	; 0xfccc
 801a078:	f6c0 7300 	movt	r3, #3840	; 0xf00
 801a07c:	400b      	ands	r3, r1
 801a07e:	6313      	str	r3, [r2, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 801a080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a084:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a088:	f04f 0200 	mov.w	r2, #0
 801a08c:	609a      	str	r2, [r3, #8]
}
 801a08e:	4770      	bx	lr

0801a090 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: turn ON the HSE oscillator
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 801a090:	b082      	sub	sp, #8
 801a092:	4603      	mov	r3, r0
 801a094:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 801a098:	f241 0302 	movw	r3, #4098	; 0x1002
 801a09c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a0a0:	f04f 0200 	mov.w	r2, #0
 801a0a4:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 801a0a6:	f241 0302 	movw	r3, #4098	; 0x1002
 801a0aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a0ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801a0b2:	701a      	strb	r2, [r3, #0]

}
 801a0b4:	b002      	add	sp, #8
 801a0b6:	4770      	bx	lr

0801a0b8 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 801a0b8:	b500      	push	{lr}
 801a0ba:	b083      	sub	sp, #12
  __IO uint32_t StartUpCounter = 0;
 801a0bc:	f04f 0300 	mov.w	r3, #0
 801a0c0:	9300      	str	r3, [sp, #0]
  ErrorStatus status = ERROR;
 801a0c2:	f04f 0300 	mov.w	r3, #0
 801a0c6:	f88d 3007 	strb.w	r3, [sp, #7]
  FlagStatus HSEStatus = RESET;
 801a0ca:	f04f 0300 	mov.w	r3, #0
 801a0ce:	f88d 3006 	strb.w	r3, [sp, #6]
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 801a0d2:	f04f 0011 	mov.w	r0, #17
 801a0d6:	f000 fe87 	bl	801ade8 <RCC_GetFlagStatus>
 801a0da:	4603      	mov	r3, r0
 801a0dc:	f88d 3006 	strb.w	r3, [sp, #6]
    StartUpCounter++;  
 801a0e0:	9b00      	ldr	r3, [sp, #0]
 801a0e2:	f103 0301 	add.w	r3, r3, #1
 801a0e6:	9300      	str	r3, [sp, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 801a0e8:	9b00      	ldr	r3, [sp, #0]
 801a0ea:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 801a0ee:	d003      	beq.n	801a0f8 <RCC_WaitForHSEStartUp+0x40>
 801a0f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d0ec      	beq.n	801a0d2 <RCC_WaitForHSEStartUp+0x1a>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 801a0f8:	f04f 0011 	mov.w	r0, #17
 801a0fc:	f000 fe74 	bl	801ade8 <RCC_GetFlagStatus>
 801a100:	4603      	mov	r3, r0
 801a102:	2b00      	cmp	r3, #0
 801a104:	d004      	beq.n	801a110 <RCC_WaitForHSEStartUp+0x58>
  {
    status = SUCCESS;
 801a106:	f04f 0301 	mov.w	r3, #1
 801a10a:	f88d 3007 	strb.w	r3, [sp, #7]
 801a10e:	e003      	b.n	801a118 <RCC_WaitForHSEStartUp+0x60>
  }
  else
  {
    status = ERROR;
 801a110:	f04f 0300 	mov.w	r3, #0
 801a114:	f88d 3007 	strb.w	r3, [sp, #7]
  }  
  return (status);
 801a118:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
 801a11c:	4618      	mov	r0, r3
 801a11e:	b003      	add	sp, #12
 801a120:	bd00      	pop	{pc}
 801a122:	bf00      	nop

0801a124 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the HSI calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 801a124:	b084      	sub	sp, #16
 801a126:	4603      	mov	r3, r0
 801a128:	f88d 3007 	strb.w	r3, [sp, #7]
  uint32_t tmpreg = 0;
 801a12c:	f04f 0300 	mov.w	r3, #0
 801a130:	9303      	str	r3, [sp, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 801a132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a136:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	9303      	str	r3, [sp, #12]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 801a13e:	9b03      	ldr	r3, [sp, #12]
 801a140:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801a144:	9303      	str	r3, [sp, #12]
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 801a146:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801a14a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801a14e:	9a03      	ldr	r2, [sp, #12]
 801a150:	4313      	orrs	r3, r2
 801a152:	9303      	str	r3, [sp, #12]
  
  /* Store the new value */
  RCC->CR = tmpreg;
 801a154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a158:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a15c:	9a03      	ldr	r2, [sp, #12]
 801a15e:	601a      	str	r2, [r3, #0]
}
 801a160:	b004      	add	sp, #16
 801a162:	4770      	bx	lr

0801a164 <RCC_HSICmd>:
  * @param  NewState: new state of the HSI.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 801a164:	b082      	sub	sp, #8
 801a166:	4603      	mov	r3, r0
 801a168:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 801a16c:	f04f 0300 	mov.w	r3, #0
 801a170:	f2c4 2342 	movt	r3, #16962	; 0x4242
 801a174:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801a178:	601a      	str	r2, [r3, #0]
}
 801a17a:	b002      	add	sp, #8
 801a17c:	4770      	bx	lr
 801a17e:	bf00      	nop

0801a180 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: turn ON the LSE oscillator
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint32_t RCC_LSE)
{
 801a180:	b082      	sub	sp, #8
 801a182:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 801a184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a188:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a18c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a190:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801a194:	6a12      	ldr	r2, [r2, #32]
 801a196:	f022 0201 	bic.w	r2, r2, #1
 801a19a:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 801a19c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a1a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a1a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a1a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801a1ac:	6a12      	ldr	r2, [r2, #32]
 801a1ae:	f022 0204 	bic.w	r2, r2, #4
 801a1b2:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 801a1b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a1b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a1bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a1c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801a1c4:	6a11      	ldr	r1, [r2, #32]
 801a1c6:	9a01      	ldr	r2, [sp, #4]
 801a1c8:	430a      	orrs	r2, r1
 801a1ca:	621a      	str	r2, [r3, #32]
}
 801a1cc:	b002      	add	sp, #8
 801a1ce:	4770      	bx	lr

0801a1d0 <RCC_LSEDriveConfig>:
  *     @arg RCC_LSEDrive_MediumHigh: LSE oscillator medium high drive capability.
  *     @arg RCC_LSEDrive_High: LSE oscillator high drive capability.
  * @retval None
  */
void RCC_LSEDriveConfig(uint32_t RCC_LSEDrive)
{
 801a1d0:	b082      	sub	sp, #8
 801a1d2:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 801a1d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a1d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a1dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a1e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801a1e4:	6a12      	ldr	r2, [r2, #32]
 801a1e6:	f022 0218 	bic.w	r2, r2, #24
 801a1ea:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 801a1ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a1f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a1f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a1f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801a1fc:	6a11      	ldr	r1, [r2, #32]
 801a1fe:	9a01      	ldr	r2, [sp, #4]
 801a200:	430a      	orrs	r2, r1
 801a202:	621a      	str	r2, [r3, #32]
}
 801a204:	b002      	add	sp, #8
 801a206:	4770      	bx	lr

0801a208 <RCC_LSICmd>:
  * @param  NewState: new state of the LSI.
  *         This parameter can be: ENABLE or DISABLE. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 801a208:	b082      	sub	sp, #8
 801a20a:	4603      	mov	r3, r0
 801a20c:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 801a210:	f44f 6390 	mov.w	r3, #1152	; 0x480
 801a214:	f2c4 2342 	movt	r3, #16962	; 0x4242
 801a218:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801a21c:	601a      	str	r2, [r3, #0]
}
 801a21e:	b002      	add	sp, #8
 801a220:	4770      	bx	lr
 801a222:	bf00      	nop

0801a224 <RCC_PLLConfig>:
  *   This parameter can be RCC_PLLMul_x where x:[2,16] 
  *                                               
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 801a224:	b082      	sub	sp, #8
 801a226:	9001      	str	r0, [sp, #4]
 801a228:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
  
  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 801a22a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a22e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a232:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a236:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801a23a:	6852      	ldr	r2, [r2, #4]
 801a23c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 801a240:	605a      	str	r2, [r3, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 801a242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a246:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a24a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a24e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801a252:	6851      	ldr	r1, [r2, #4]
 801a254:	9801      	ldr	r0, [sp, #4]
 801a256:	9a00      	ldr	r2, [sp, #0]
 801a258:	4302      	orrs	r2, r0
 801a25a:	430a      	orrs	r2, r1
 801a25c:	605a      	str	r2, [r3, #4]
}
 801a25e:	b002      	add	sp, #8
 801a260:	4770      	bx	lr
 801a262:	bf00      	nop

0801a264 <RCC_PLLCmd>:
  * @param  NewState: new state of the PLL.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 801a264:	b082      	sub	sp, #8
 801a266:	4603      	mov	r3, r0
 801a268:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 801a26c:	f04f 0360 	mov.w	r3, #96	; 0x60
 801a270:	f2c4 2342 	movt	r3, #16962	; 0x4242
 801a274:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801a278:	601a      	str	r2, [r3, #0]
}
 801a27a:	b002      	add	sp, #8
 801a27c:	4770      	bx	lr
 801a27e:	bf00      	nop

0801a280 <RCC_PREDIV1Config>:
  * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
  *         This parameter can be RCC_PREDIV1_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Div)
{
 801a280:	b084      	sub	sp, #16
 801a282:	9001      	str	r0, [sp, #4]
  uint32_t tmpreg = 0;
 801a284:	f04f 0300 	mov.w	r3, #0
 801a288:	9303      	str	r3, [sp, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 801a28a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a28e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a294:	9303      	str	r3, [sp, #12]
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 801a296:	9b03      	ldr	r3, [sp, #12]
 801a298:	f023 030f 	bic.w	r3, r3, #15
 801a29c:	9303      	str	r3, [sp, #12]

  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 801a29e:	9a03      	ldr	r2, [sp, #12]
 801a2a0:	9b01      	ldr	r3, [sp, #4]
 801a2a2:	4313      	orrs	r3, r2
 801a2a4:	9303      	str	r3, [sp, #12]

  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 801a2a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a2aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a2ae:	9a03      	ldr	r2, [sp, #12]
 801a2b0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801a2b2:	b004      	add	sp, #16
 801a2b4:	4770      	bx	lr
 801a2b6:	bf00      	nop

0801a2b8 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 801a2b8:	b082      	sub	sp, #8
 801a2ba:	4603      	mov	r3, r0
 801a2bc:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 801a2c0:	f04f 034c 	mov.w	r3, #76	; 0x4c
 801a2c4:	f2c4 2342 	movt	r3, #16962	; 0x4242
 801a2c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801a2cc:	601a      	str	r2, [r3, #0]
}
 801a2ce:	b002      	add	sp, #8
 801a2d0:	4770      	bx	lr
 801a2d2:	bf00      	nop

0801a2d4 <RCC_MCOConfig>:
  *     @arg RCC_MCOSource_HSE: HSE oscillator clock selected.
  *     @arg RCC_MCOSource_PLLCLK_Div2: PLL clock selected.
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCOSource)
{
 801a2d4:	b082      	sub	sp, #8
 801a2d6:	4603      	mov	r3, r0
 801a2d8:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
    
  /* Select MCO clock source and prescaler */
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource; 
 801a2dc:	f241 0307 	movw	r3, #4103	; 0x1007
 801a2e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a2e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801a2e8:	701a      	strb	r2, [r3, #0]
}
 801a2ea:	b002      	add	sp, #8
 801a2ec:	4770      	bx	lr
 801a2ee:	bf00      	nop

0801a2f0 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 801a2f0:	b084      	sub	sp, #16
 801a2f2:	9001      	str	r0, [sp, #4]
  uint32_t tmpreg = 0;
 801a2f4:	f04f 0300 	mov.w	r3, #0
 801a2f8:	9303      	str	r3, [sp, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 801a2fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a2fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a302:	685b      	ldr	r3, [r3, #4]
 801a304:	9303      	str	r3, [sp, #12]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 801a306:	9b03      	ldr	r3, [sp, #12]
 801a308:	f023 0303 	bic.w	r3, r3, #3
 801a30c:	9303      	str	r3, [sp, #12]
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 801a30e:	9a03      	ldr	r2, [sp, #12]
 801a310:	9b01      	ldr	r3, [sp, #4]
 801a312:	4313      	orrs	r3, r2
 801a314:	9303      	str	r3, [sp, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 801a316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a31a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a31e:	9a03      	ldr	r2, [sp, #12]
 801a320:	605a      	str	r2, [r3, #4]
}
 801a322:	b004      	add	sp, #16
 801a324:	4770      	bx	lr
 801a326:	bf00      	nop

0801a328 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock  
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 801a328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a32c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a330:	685b      	ldr	r3, [r3, #4]
 801a332:	b2db      	uxtb	r3, r3
 801a334:	f003 030c 	and.w	r3, r3, #12
 801a338:	b2db      	uxtb	r3, r3
}
 801a33a:	4618      	mov	r0, r3
 801a33c:	4770      	bx	lr
 801a33e:	bf00      	nop

0801a340 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 801a340:	b084      	sub	sp, #16
 801a342:	9001      	str	r0, [sp, #4]
  uint32_t tmpreg = 0;
 801a344:	f04f 0300 	mov.w	r3, #0
 801a348:	9303      	str	r3, [sp, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 801a34a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a34e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a352:	685b      	ldr	r3, [r3, #4]
 801a354:	9303      	str	r3, [sp, #12]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 801a356:	9b03      	ldr	r3, [sp, #12]
 801a358:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801a35c:	9303      	str	r3, [sp, #12]
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 801a35e:	9a03      	ldr	r2, [sp, #12]
 801a360:	9b01      	ldr	r3, [sp, #4]
 801a362:	4313      	orrs	r3, r2
 801a364:	9303      	str	r3, [sp, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 801a366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a36a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a36e:	9a03      	ldr	r2, [sp, #12]
 801a370:	605a      	str	r2, [r3, #4]
}
 801a372:	b004      	add	sp, #16
 801a374:	4770      	bx	lr
 801a376:	bf00      	nop

0801a378 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 801a378:	b084      	sub	sp, #16
 801a37a:	9001      	str	r0, [sp, #4]
  uint32_t tmpreg = 0;
 801a37c:	f04f 0300 	mov.w	r3, #0
 801a380:	9303      	str	r3, [sp, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 801a382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a386:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a38a:	685b      	ldr	r3, [r3, #4]
 801a38c:	9303      	str	r3, [sp, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 801a38e:	9b03      	ldr	r3, [sp, #12]
 801a390:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801a394:	9303      	str	r3, [sp, #12]
  
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 801a396:	9a03      	ldr	r2, [sp, #12]
 801a398:	9b01      	ldr	r3, [sp, #4]
 801a39a:	4313      	orrs	r3, r2
 801a39c:	9303      	str	r3, [sp, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 801a39e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a3a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a3a6:	9a03      	ldr	r2, [sp, #12]
 801a3a8:	605a      	str	r2, [r3, #4]
}
 801a3aa:	b004      	add	sp, #16
 801a3ac:	4770      	bx	lr
 801a3ae:	bf00      	nop

0801a3b0 <RCC_PCLK2Config>:
  *             @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *             @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 801a3b0:	b084      	sub	sp, #16
 801a3b2:	9001      	str	r0, [sp, #4]
  uint32_t tmpreg = 0;
 801a3b4:	f04f 0300 	mov.w	r3, #0
 801a3b8:	9303      	str	r3, [sp, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 801a3ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a3be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a3c2:	685b      	ldr	r3, [r3, #4]
 801a3c4:	9303      	str	r3, [sp, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 801a3c6:	9b03      	ldr	r3, [sp, #12]
 801a3c8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 801a3cc:	9303      	str	r3, [sp, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 801a3ce:	9b01      	ldr	r3, [sp, #4]
 801a3d0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801a3d4:	9a03      	ldr	r2, [sp, #12]
 801a3d6:	4313      	orrs	r3, r2
 801a3d8:	9303      	str	r3, [sp, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 801a3da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a3de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a3e2:	9a03      	ldr	r2, [sp, #12]
 801a3e4:	605a      	str	r2, [r3, #4]
}
 801a3e6:	b004      	add	sp, #16
 801a3e8:	4770      	bx	lr
 801a3ea:	bf00      	nop

0801a3ec <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 801a3ec:	b08a      	sub	sp, #40	; 0x28
 801a3ee:	9001      	str	r0, [sp, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 801a3f0:	f04f 0300 	mov.w	r3, #0
 801a3f4:	9308      	str	r3, [sp, #32]
 801a3f6:	f04f 0300 	mov.w	r3, #0
 801a3fa:	9307      	str	r3, [sp, #28]
 801a3fc:	f04f 0300 	mov.w	r3, #0
 801a400:	9306      	str	r3, [sp, #24]
 801a402:	f04f 0300 	mov.w	r3, #0
 801a406:	9305      	str	r3, [sp, #20]
 801a408:	f04f 0300 	mov.w	r3, #0
 801a40c:	9304      	str	r3, [sp, #16]
 801a40e:	f04f 0300 	mov.w	r3, #0
 801a412:	9309      	str	r3, [sp, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 801a414:	f04f 0300 	mov.w	r3, #0
 801a418:	9303      	str	r3, [sp, #12]
 801a41a:	f04f 0300 	mov.w	r3, #0
 801a41e:	9302      	str	r3, [sp, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 801a420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a424:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a428:	685b      	ldr	r3, [r3, #4]
 801a42a:	f003 030c 	and.w	r3, r3, #12
 801a42e:	9308      	str	r3, [sp, #32]
  
  switch (tmp)
 801a430:	9b08      	ldr	r3, [sp, #32]
 801a432:	2b04      	cmp	r3, #4
 801a434:	d00a      	beq.n	801a44c <RCC_GetClocksFreq+0x60>
 801a436:	2b08      	cmp	r3, #8
 801a438:	d00f      	beq.n	801a45a <RCC_GetClocksFreq+0x6e>
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d148      	bne.n	801a4d0 <RCC_GetClocksFreq+0xe4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 801a43e:	9a01      	ldr	r2, [sp, #4]
 801a440:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 801a444:	f2c0 037a 	movt	r3, #122	; 0x7a
 801a448:	6013      	str	r3, [r2, #0]
      break;
 801a44a:	e048      	b.n	801a4de <RCC_GetClocksFreq+0xf2>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 801a44c:	9a01      	ldr	r2, [sp, #4]
 801a44e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 801a452:	f2c0 037a 	movt	r3, #122	; 0x7a
 801a456:	6013      	str	r3, [r2, #0]
      break;
 801a458:	e041      	b.n	801a4de <RCC_GetClocksFreq+0xf2>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 801a45a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a45e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a462:	685b      	ldr	r3, [r3, #4]
 801a464:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 801a468:	9307      	str	r3, [sp, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 801a46a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a46e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a472:	685b      	ldr	r3, [r3, #4]
 801a474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a478:	9306      	str	r3, [sp, #24]
      pllmull = ( pllmull >> 18) + 2;
 801a47a:	9b07      	ldr	r3, [sp, #28]
 801a47c:	ea4f 4393 	mov.w	r3, r3, lsr #18
 801a480:	f103 0302 	add.w	r3, r3, #2
 801a484:	9307      	str	r3, [sp, #28]
      
      if (pllsource == 0x00)
 801a486:	9b06      	ldr	r3, [sp, #24]
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d108      	bne.n	801a49e <RCC_GetClocksFreq+0xb2>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 801a48c:	9a07      	ldr	r2, [sp, #28]
 801a48e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 801a492:	f2c0 033d 	movt	r3, #61	; 0x3d
 801a496:	fb03 f302 	mul.w	r3, r3, r2
 801a49a:	9309      	str	r3, [sp, #36]	; 0x24
 801a49c:	e014      	b.n	801a4c8 <RCC_GetClocksFreq+0xdc>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 801a49e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a4a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4a8:	f003 030f 	and.w	r3, r3, #15
 801a4ac:	f103 0301 	add.w	r3, r3, #1
 801a4b0:	9305      	str	r3, [sp, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 801a4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 801a4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
 801a4ba:	9a05      	ldr	r2, [sp, #20]
 801a4bc:	fbb3 f3f2 	udiv	r3, r3, r2
 801a4c0:	9a07      	ldr	r2, [sp, #28]
 801a4c2:	fb02 f303 	mul.w	r3, r2, r3
 801a4c6:	9309      	str	r3, [sp, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 801a4c8:	9b01      	ldr	r3, [sp, #4]
 801a4ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a4cc:	601a      	str	r2, [r3, #0]
      break;
 801a4ce:	e006      	b.n	801a4de <RCC_GetClocksFreq+0xf2>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 801a4d0:	9a01      	ldr	r2, [sp, #4]
 801a4d2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 801a4d6:	f2c0 037a 	movt	r3, #122	; 0x7a
 801a4da:	6013      	str	r3, [r2, #0]
      break;
 801a4dc:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 801a4de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a4e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a4e6:	685b      	ldr	r3, [r3, #4]
 801a4e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a4ec:	9308      	str	r3, [sp, #32]
  tmp = tmp >> 4;
 801a4ee:	9b08      	ldr	r3, [sp, #32]
 801a4f0:	ea4f 1313 	mov.w	r3, r3, lsr #4
 801a4f4:	9308      	str	r3, [sp, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 801a4f6:	f240 03f4 	movw	r3, #244	; 0xf4
 801a4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801a4fe:	9a08      	ldr	r2, [sp, #32]
 801a500:	189b      	adds	r3, r3, r2
 801a502:	781b      	ldrb	r3, [r3, #0]
 801a504:	b2db      	uxtb	r3, r3
 801a506:	9302      	str	r3, [sp, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 801a508:	9b01      	ldr	r3, [sp, #4]
 801a50a:	681a      	ldr	r2, [r3, #0]
 801a50c:	9b02      	ldr	r3, [sp, #8]
 801a50e:	fa22 f203 	lsr.w	r2, r2, r3
 801a512:	9b01      	ldr	r3, [sp, #4]
 801a514:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 801a516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a51a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a51e:	685b      	ldr	r3, [r3, #4]
 801a520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a524:	9308      	str	r3, [sp, #32]
  tmp = tmp >> 8;
 801a526:	9b08      	ldr	r3, [sp, #32]
 801a528:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801a52c:	9308      	str	r3, [sp, #32]
  presc = APBAHBPrescTable[tmp];
 801a52e:	f240 03f4 	movw	r3, #244	; 0xf4
 801a532:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801a536:	9a08      	ldr	r2, [sp, #32]
 801a538:	189b      	adds	r3, r3, r2
 801a53a:	781b      	ldrb	r3, [r3, #0]
 801a53c:	b2db      	uxtb	r3, r3
 801a53e:	9304      	str	r3, [sp, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 801a540:	9b01      	ldr	r3, [sp, #4]
 801a542:	685a      	ldr	r2, [r3, #4]
 801a544:	9b04      	ldr	r3, [sp, #16]
 801a546:	fa22 f203 	lsr.w	r2, r2, r3
 801a54a:	9b01      	ldr	r3, [sp, #4]
 801a54c:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 801a54e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a552:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a556:	685b      	ldr	r3, [r3, #4]
 801a558:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 801a55c:	9308      	str	r3, [sp, #32]
  tmp = tmp >> 11;
 801a55e:	9b08      	ldr	r3, [sp, #32]
 801a560:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 801a564:	9308      	str	r3, [sp, #32]
  apb2presc = APBAHBPrescTable[tmp];
 801a566:	f240 03f4 	movw	r3, #244	; 0xf4
 801a56a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801a56e:	9a08      	ldr	r2, [sp, #32]
 801a570:	189b      	adds	r3, r3, r2
 801a572:	781b      	ldrb	r3, [r3, #0]
 801a574:	b2db      	uxtb	r3, r3
 801a576:	9303      	str	r3, [sp, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 801a578:	9b01      	ldr	r3, [sp, #4]
 801a57a:	685a      	ldr	r2, [r3, #4]
 801a57c:	9b03      	ldr	r3, [sp, #12]
 801a57e:	fa22 f203 	lsr.w	r2, r2, r3
 801a582:	9b01      	ldr	r3, [sp, #4]
 801a584:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 801a586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a58a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a590:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801a594:	9308      	str	r3, [sp, #32]
  tmp = tmp >> 4;
 801a596:	9b08      	ldr	r3, [sp, #32]
 801a598:	ea4f 1313 	mov.w	r3, r3, lsr #4
 801a59c:	9308      	str	r3, [sp, #32]
  presc = ADCPrescTable[tmp];
 801a59e:	f240 1304 	movw	r3, #260	; 0x104
 801a5a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801a5a6:	9a08      	ldr	r2, [sp, #32]
 801a5a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801a5ac:	b29b      	uxth	r3, r3
 801a5ae:	9304      	str	r3, [sp, #16]
  if ((presc & 0x10) != 0)
 801a5b0:	9b04      	ldr	r3, [sp, #16]
 801a5b2:	f003 0310 	and.w	r3, r3, #16
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d006      	beq.n	801a5c8 <RCC_GetClocksFreq+0x1dc>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 801a5ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a5bc:	9b04      	ldr	r3, [sp, #16]
 801a5be:	fbb2 f2f3 	udiv	r2, r2, r3
 801a5c2:	9b01      	ldr	r3, [sp, #4]
 801a5c4:	611a      	str	r2, [r3, #16]
 801a5c6:	e003      	b.n	801a5d0 <RCC_GetClocksFreq+0x1e4>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 801a5c8:	9b01      	ldr	r3, [sp, #4]
 801a5ca:	681a      	ldr	r2, [r3, #0]
 801a5cc:	9b01      	ldr	r3, [sp, #4]
 801a5ce:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 801a5d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a5d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5da:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 801a5de:	9308      	str	r3, [sp, #32]
  tmp = tmp >> 9;
 801a5e0:	9b08      	ldr	r3, [sp, #32]
 801a5e2:	ea4f 2353 	mov.w	r3, r3, lsr #9
 801a5e6:	9308      	str	r3, [sp, #32]
  presc = ADCPrescTable[tmp];
 801a5e8:	f240 1304 	movw	r3, #260	; 0x104
 801a5ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801a5f0:	9a08      	ldr	r2, [sp, #32]
 801a5f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801a5f6:	b29b      	uxth	r3, r3
 801a5f8:	9304      	str	r3, [sp, #16]
  if ((presc & 0x10) != 0)
 801a5fa:	9b04      	ldr	r3, [sp, #16]
 801a5fc:	f003 0310 	and.w	r3, r3, #16
 801a600:	2b00      	cmp	r3, #0
 801a602:	d006      	beq.n	801a612 <RCC_GetClocksFreq+0x226>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 801a604:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a606:	9b04      	ldr	r3, [sp, #16]
 801a608:	fbb2 f2f3 	udiv	r2, r2, r3
 801a60c:	9b01      	ldr	r3, [sp, #4]
 801a60e:	615a      	str	r2, [r3, #20]
 801a610:	e003      	b.n	801a61a <RCC_GetClocksFreq+0x22e>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 801a612:	9b01      	ldr	r3, [sp, #4]
 801a614:	681a      	ldr	r2, [r3, #0]
 801a616:	9b01      	ldr	r3, [sp, #4]
 801a618:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 801a61a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a61e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a624:	f003 0310 	and.w	r3, r3, #16
 801a628:	2b00      	cmp	r3, #0
 801a62a:	d106      	bne.n	801a63a <RCC_GetClocksFreq+0x24e>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 801a62c:	9a01      	ldr	r2, [sp, #4]
 801a62e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 801a632:	f2c0 037a 	movt	r3, #122	; 0x7a
 801a636:	6193      	str	r3, [r2, #24]
 801a638:	e003      	b.n	801a642 <RCC_GetClocksFreq+0x256>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 801a63a:	9b01      	ldr	r3, [sp, #4]
 801a63c:	681a      	ldr	r2, [r3, #0]
 801a63e:	9b01      	ldr	r3, [sp, #4]
 801a640:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 801a642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a646:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a64c:	f003 0320 	and.w	r3, r3, #32
 801a650:	2b00      	cmp	r3, #0
 801a652:	d106      	bne.n	801a662 <RCC_GetClocksFreq+0x276>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 801a654:	9a01      	ldr	r2, [sp, #4]
 801a656:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 801a65a:	f2c0 037a 	movt	r3, #122	; 0x7a
 801a65e:	61d3      	str	r3, [r2, #28]
 801a660:	e003      	b.n	801a66a <RCC_GetClocksFreq+0x27e>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 801a662:	9b01      	ldr	r3, [sp, #4]
 801a664:	681a      	ldr	r2, [r3, #0]
 801a666:	9b01      	ldr	r3, [sp, #4]
 801a668:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 801a66a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a66e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a678:	2b00      	cmp	r3, #0
 801a67a:	d00e      	beq.n	801a69a <RCC_GetClocksFreq+0x2ae>
 801a67c:	9b01      	ldr	r3, [sp, #4]
 801a67e:	681a      	ldr	r2, [r3, #0]
 801a680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a682:	429a      	cmp	r2, r3
 801a684:	d109      	bne.n	801a69a <RCC_GetClocksFreq+0x2ae>
  && (apb2presc == ahbpresc)) 
 801a686:	9a03      	ldr	r2, [sp, #12]
 801a688:	9b02      	ldr	r3, [sp, #8]
 801a68a:	429a      	cmp	r2, r3
 801a68c:	d105      	bne.n	801a69a <RCC_GetClocksFreq+0x2ae>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 801a68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a690:	ea4f 0243 	mov.w	r2, r3, lsl #1
 801a694:	9b01      	ldr	r3, [sp, #4]
 801a696:	621a      	str	r2, [r3, #32]
 801a698:	e003      	b.n	801a6a2 <RCC_GetClocksFreq+0x2b6>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 801a69a:	9b01      	ldr	r3, [sp, #4]
 801a69c:	68da      	ldr	r2, [r3, #12]
 801a69e:	9b01      	ldr	r3, [sp, #4]
 801a6a0:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 801a6a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a6a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a6ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d00e      	beq.n	801a6d2 <RCC_GetClocksFreq+0x2e6>
 801a6b4:	9b01      	ldr	r3, [sp, #4]
 801a6b6:	681a      	ldr	r2, [r3, #0]
 801a6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6ba:	429a      	cmp	r2, r3
 801a6bc:	d109      	bne.n	801a6d2 <RCC_GetClocksFreq+0x2e6>
  && (apb2presc == ahbpresc))
 801a6be:	9a03      	ldr	r2, [sp, #12]
 801a6c0:	9b02      	ldr	r3, [sp, #8]
 801a6c2:	429a      	cmp	r2, r3
 801a6c4:	d105      	bne.n	801a6d2 <RCC_GetClocksFreq+0x2e6>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 801a6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6c8:	ea4f 0243 	mov.w	r2, r3, lsl #1
 801a6cc:	9b01      	ldr	r3, [sp, #4]
 801a6ce:	625a      	str	r2, [r3, #36]	; 0x24
 801a6d0:	e003      	b.n	801a6da <RCC_GetClocksFreq+0x2ee>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 801a6d2:	9b01      	ldr	r3, [sp, #4]
 801a6d4:	68da      	ldr	r2, [r3, #12]
 801a6d6:	9b01      	ldr	r3, [sp, #4]
 801a6d8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 801a6da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a6de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a6e4:	f003 0303 	and.w	r3, r3, #3
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d104      	bne.n	801a6f6 <RCC_GetClocksFreq+0x30a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 801a6ec:	9b01      	ldr	r3, [sp, #4]
 801a6ee:	68da      	ldr	r2, [r3, #12]
 801a6f0:	9b01      	ldr	r3, [sp, #4]
 801a6f2:	629a      	str	r2, [r3, #40]	; 0x28
 801a6f4:	e02a      	b.n	801a74c <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 801a6f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a6fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a700:	f003 0303 	and.w	r3, r3, #3
 801a704:	2b01      	cmp	r3, #1
 801a706:	d104      	bne.n	801a712 <RCC_GetClocksFreq+0x326>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 801a708:	9b01      	ldr	r3, [sp, #4]
 801a70a:	681a      	ldr	r2, [r3, #0]
 801a70c:	9b01      	ldr	r3, [sp, #4]
 801a70e:	629a      	str	r2, [r3, #40]	; 0x28
 801a710:	e01c      	b.n	801a74c <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 801a712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a716:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a71c:	f003 0303 	and.w	r3, r3, #3
 801a720:	2b02      	cmp	r3, #2
 801a722:	d104      	bne.n	801a72e <RCC_GetClocksFreq+0x342>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 801a724:	9b01      	ldr	r3, [sp, #4]
 801a726:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a72a:	629a      	str	r2, [r3, #40]	; 0x28
 801a72c:	e00e      	b.n	801a74c <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 801a72e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a732:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a738:	f003 0303 	and.w	r3, r3, #3
 801a73c:	2b03      	cmp	r3, #3
 801a73e:	d105      	bne.n	801a74c <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 801a740:	9a01      	ldr	r2, [sp, #4]
 801a742:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 801a746:	f2c0 037a 	movt	r3, #122	; 0x7a
 801a74a:	6293      	str	r3, [r2, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 801a74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a750:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a756:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d104      	bne.n	801a768 <RCC_GetClocksFreq+0x37c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 801a75e:	9b01      	ldr	r3, [sp, #4]
 801a760:	689a      	ldr	r2, [r3, #8]
 801a762:	9b01      	ldr	r3, [sp, #4]
 801a764:	62da      	str	r2, [r3, #44]	; 0x2c
 801a766:	e02d      	b.n	801a7c4 <RCC_GetClocksFreq+0x3d8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 801a768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a76c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a772:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801a776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a77a:	d104      	bne.n	801a786 <RCC_GetClocksFreq+0x39a>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 801a77c:	9b01      	ldr	r3, [sp, #4]
 801a77e:	681a      	ldr	r2, [r3, #0]
 801a780:	9b01      	ldr	r3, [sp, #4]
 801a782:	62da      	str	r2, [r3, #44]	; 0x2c
 801a784:	e01e      	b.n	801a7c4 <RCC_GetClocksFreq+0x3d8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 801a786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a78a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a790:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801a794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801a798:	d104      	bne.n	801a7a4 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 801a79a:	9b01      	ldr	r3, [sp, #4]
 801a79c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a7a0:	62da      	str	r2, [r3, #44]	; 0x2c
 801a7a2:	e00f      	b.n	801a7c4 <RCC_GetClocksFreq+0x3d8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 801a7a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a7a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a7ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801a7b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801a7b6:	d105      	bne.n	801a7c4 <RCC_GetClocksFreq+0x3d8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 801a7b8:	9a01      	ldr	r2, [sp, #4]
 801a7ba:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 801a7be:	f2c0 037a 	movt	r3, #122	; 0x7a
 801a7c2:	62d3      	str	r3, [r2, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 801a7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a7cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a7ce:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	d104      	bne.n	801a7e0 <RCC_GetClocksFreq+0x3f4>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 801a7d6:	9b01      	ldr	r3, [sp, #4]
 801a7d8:	689a      	ldr	r2, [r3, #8]
 801a7da:	9b01      	ldr	r3, [sp, #4]
 801a7dc:	631a      	str	r2, [r3, #48]	; 0x30
 801a7de:	e02d      	b.n	801a83c <RCC_GetClocksFreq+0x450>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 801a7e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a7e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a7ea:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 801a7ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801a7f2:	d104      	bne.n	801a7fe <RCC_GetClocksFreq+0x412>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 801a7f4:	9b01      	ldr	r3, [sp, #4]
 801a7f6:	681a      	ldr	r2, [r3, #0]
 801a7f8:	9b01      	ldr	r3, [sp, #4]
 801a7fa:	631a      	str	r2, [r3, #48]	; 0x30
 801a7fc:	e01e      	b.n	801a83c <RCC_GetClocksFreq+0x450>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 801a7fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a802:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a808:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 801a80c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801a810:	d104      	bne.n	801a81c <RCC_GetClocksFreq+0x430>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 801a812:	9b01      	ldr	r3, [sp, #4]
 801a814:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a818:	631a      	str	r2, [r3, #48]	; 0x30
 801a81a:	e00f      	b.n	801a83c <RCC_GetClocksFreq+0x450>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 801a81c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a820:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a826:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 801a82a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 801a82e:	d105      	bne.n	801a83c <RCC_GetClocksFreq+0x450>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 801a830:	9a01      	ldr	r2, [sp, #4]
 801a832:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 801a836:	f2c0 037a 	movt	r3, #122	; 0x7a
 801a83a:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 801a83c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a840:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a846:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d104      	bne.n	801a858 <RCC_GetClocksFreq+0x46c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 801a84e:	9b01      	ldr	r3, [sp, #4]
 801a850:	689a      	ldr	r2, [r3, #8]
 801a852:	9b01      	ldr	r3, [sp, #4]
 801a854:	635a      	str	r2, [r3, #52]	; 0x34
 801a856:	e02d      	b.n	801a8b4 <RCC_GetClocksFreq+0x4c8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 801a858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a85c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a862:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 801a866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a86a:	d104      	bne.n	801a876 <RCC_GetClocksFreq+0x48a>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 801a86c:	9b01      	ldr	r3, [sp, #4]
 801a86e:	681a      	ldr	r2, [r3, #0]
 801a870:	9b01      	ldr	r3, [sp, #4]
 801a872:	635a      	str	r2, [r3, #52]	; 0x34
 801a874:	e01e      	b.n	801a8b4 <RCC_GetClocksFreq+0x4c8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 801a876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a87a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a87e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a880:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 801a884:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a888:	d104      	bne.n	801a894 <RCC_GetClocksFreq+0x4a8>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 801a88a:	9b01      	ldr	r3, [sp, #4]
 801a88c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a890:	635a      	str	r2, [r3, #52]	; 0x34
 801a892:	e00f      	b.n	801a8b4 <RCC_GetClocksFreq+0x4c8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 801a894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a898:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a89e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 801a8a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801a8a6:	d105      	bne.n	801a8b4 <RCC_GetClocksFreq+0x4c8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 801a8a8:	9a01      	ldr	r2, [sp, #4]
 801a8aa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 801a8ae:	f2c0 037a 	movt	r3, #122	; 0x7a
 801a8b2:	6353      	str	r3, [r2, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 801a8b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a8b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8be:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d104      	bne.n	801a8d0 <RCC_GetClocksFreq+0x4e4>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 801a8c6:	9b01      	ldr	r3, [sp, #4]
 801a8c8:	689a      	ldr	r2, [r3, #8]
 801a8ca:	9b01      	ldr	r3, [sp, #4]
 801a8cc:	639a      	str	r2, [r3, #56]	; 0x38
 801a8ce:	e02d      	b.n	801a92c <RCC_GetClocksFreq+0x540>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 801a8d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a8d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8da:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 801a8de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801a8e2:	d104      	bne.n	801a8ee <RCC_GetClocksFreq+0x502>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 801a8e4:	9b01      	ldr	r3, [sp, #4]
 801a8e6:	681a      	ldr	r2, [r3, #0]
 801a8e8:	9b01      	ldr	r3, [sp, #4]
 801a8ea:	639a      	str	r2, [r3, #56]	; 0x38
 801a8ec:	e01e      	b.n	801a92c <RCC_GetClocksFreq+0x540>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 801a8ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a8f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a8f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8f8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 801a8fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801a900:	d104      	bne.n	801a90c <RCC_GetClocksFreq+0x520>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 801a902:	9b01      	ldr	r3, [sp, #4]
 801a904:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a908:	639a      	str	r2, [r3, #56]	; 0x38
 801a90a:	e00f      	b.n	801a92c <RCC_GetClocksFreq+0x540>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 801a90c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a910:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a916:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 801a91a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801a91e:	d105      	bne.n	801a92c <RCC_GetClocksFreq+0x540>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 801a920:	9a01      	ldr	r2, [sp, #4]
 801a922:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 801a926:	f2c0 037a 	movt	r3, #122	; 0x7a
 801a92a:	6393      	str	r3, [r2, #56]	; 0x38
  } 
}
 801a92c:	b00a      	add	sp, #40	; 0x28
 801a92e:	4770      	bx	lr

0801a930 <RCC_ADCCLKConfig>:
  *     @arg RCC_ADC34PLLCLK_Div128: ADC34 clock = PLLCLK/128                                  
  *     @arg RCC_ADC34PLLCLK_Div256: ADC34 clock = PLLCLK/256
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PLLCLK)
{
 801a930:	b084      	sub	sp, #16
 801a932:	9001      	str	r0, [sp, #4]
  uint32_t tmp = 0;
 801a934:	f04f 0300 	mov.w	r3, #0
 801a938:	9303      	str	r3, [sp, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PLLCLK));

  tmp = (RCC_PLLCLK >> 28);
 801a93a:	9b01      	ldr	r3, [sp, #4]
 801a93c:	ea4f 7313 	mov.w	r3, r3, lsr #28
 801a940:	9303      	str	r3, [sp, #12]
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
 801a942:	9b03      	ldr	r3, [sp, #12]
 801a944:	2b00      	cmp	r3, #0
 801a946:	d00c      	beq.n	801a962 <RCC_ADCCLKConfig+0x32>
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 801a948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a94c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a950:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a954:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801a958:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801a95a:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 801a95e:	62da      	str	r2, [r3, #44]	; 0x2c
 801a960:	e00b      	b.n	801a97a <RCC_ADCCLKConfig+0x4a>
  }
   /* Clears ADCPRE12 bits */
  else
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 801a962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a966:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a96a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a96e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801a972:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801a974:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 801a978:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  /* Set ADCPRE bits according to RCC_PLLCLK value */
  RCC->CFGR2 |= RCC_PLLCLK;
 801a97a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a97e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a982:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a986:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801a98a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801a98c:	9a01      	ldr	r2, [sp, #4]
 801a98e:	430a      	orrs	r2, r1
 801a990:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801a992:	b004      	add	sp, #16
 801a994:	4770      	bx	lr
 801a996:	bf00      	nop

0801a998 <RCC_I2CCLKConfig>:
  *     @arg RCC_I2CxCLK_SYSCLK: I2Cx clock = System Clock
  *          (x can be 1 or 2).  
  * @retval None
  */
void RCC_I2CCLKConfig(uint32_t RCC_I2CCLK)
{ 
 801a998:	b084      	sub	sp, #16
 801a99a:	9001      	str	r0, [sp, #4]
  uint32_t tmp = 0;
 801a99c:	f04f 0300 	mov.w	r3, #0
 801a9a0:	9303      	str	r3, [sp, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  tmp = (RCC_I2CCLK >> 28);
 801a9a2:	9b01      	ldr	r3, [sp, #4]
 801a9a4:	ea4f 7313 	mov.w	r3, r3, lsr #28
 801a9a8:	9303      	str	r3, [sp, #12]
  
  /* Clear I2CSW bit */
  if (tmp != 0)
 801a9aa:	9b03      	ldr	r3, [sp, #12]
 801a9ac:	2b00      	cmp	r3, #0
 801a9ae:	d00c      	beq.n	801a9ca <RCC_I2CCLKConfig+0x32>
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
 801a9b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a9b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a9b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a9bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801a9c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801a9c2:	f022 0220 	bic.w	r2, r2, #32
 801a9c6:	631a      	str	r2, [r3, #48]	; 0x30
 801a9c8:	e00b      	b.n	801a9e2 <RCC_I2CCLKConfig+0x4a>
  }
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 801a9ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a9ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a9d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a9d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801a9da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801a9dc:	f022 0210 	bic.w	r2, r2, #16
 801a9e0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 801a9e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a9e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801a9ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a9ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801a9f2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801a9f4:	9a01      	ldr	r2, [sp, #4]
 801a9f6:	430a      	orrs	r2, r1
 801a9f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 801a9fa:	b004      	add	sp, #16
 801a9fc:	4770      	bx	lr
 801a9fe:	bf00      	nop

0801aa00 <RCC_TIMCLKConfig>:
  *     @arg RCC_TIMxCLK_PLLCLK: TIMx clock = PLL output (running up to 144 MHz)
  *          (x can be 1 or 8).
  * @retval None
  */
void RCC_TIMCLKConfig(uint32_t RCC_TIMCLK)
{ 
 801aa00:	b084      	sub	sp, #16
 801aa02:	9001      	str	r0, [sp, #4]
  uint32_t tmp = 0;
 801aa04:	f04f 0300 	mov.w	r3, #0
 801aa08:	9303      	str	r3, [sp, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK(RCC_TIMCLK));

  tmp = (RCC_TIMCLK >> 28);
 801aa0a:	9b01      	ldr	r3, [sp, #4]
 801aa0c:	ea4f 7313 	mov.w	r3, r3, lsr #28
 801aa10:	9303      	str	r3, [sp, #12]
  
  /* Clear I2CSW bit */
  if (tmp != 0)
 801aa12:	9b03      	ldr	r3, [sp, #12]
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d00c      	beq.n	801aa32 <RCC_TIMCLKConfig+0x32>
  {
    RCC->CFGR3 &= ~RCC_CFGR3_TIM8SW;
 801aa18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801aa1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801aa20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801aa24:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801aa28:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801aa2a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801aa2e:	631a      	str	r2, [r3, #48]	; 0x30
 801aa30:	e00b      	b.n	801aa4a <RCC_TIMCLKConfig+0x4a>
  }
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_TIM1SW;
 801aa32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801aa36:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801aa3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801aa3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801aa42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801aa44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801aa48:	631a      	str	r2, [r3, #48]	; 0x30
  }
  /* Set I2CSW bits according to RCC_TIMCLK value */
  RCC->CFGR3 |= RCC_TIMCLK;
 801aa4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801aa4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801aa52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801aa56:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801aa5a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801aa5c:	9a01      	ldr	r2, [sp, #4]
 801aa5e:	430a      	orrs	r2, r1
 801aa60:	631a      	str	r2, [r3, #48]	; 0x30
}
 801aa62:	b004      	add	sp, #16
 801aa64:	4770      	bx	lr
 801aa66:	bf00      	nop

0801aa68 <RCC_USARTCLKConfig>:
  *     @arg RCC_USARTxCLK_HSI: USART clock = HSI Clock
  *          (x can be 1, 2, 3, 4 or 5).  
  * @retval None
  */
void RCC_USARTCLKConfig(uint32_t RCC_USARTCLK)
{ 
 801aa68:	b084      	sub	sp, #16
 801aa6a:	9001      	str	r0, [sp, #4]
  uint32_t tmp = 0;
 801aa6c:	f04f 0300 	mov.w	r3, #0
 801aa70:	9303      	str	r3, [sp, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  tmp = (RCC_USARTCLK >> 28);
 801aa72:	9b01      	ldr	r3, [sp, #4]
 801aa74:	ea4f 7313 	mov.w	r3, r3, lsr #28
 801aa78:	9303      	str	r3, [sp, #12]

  /* Clear USARTSW[1:0] bit */
  switch (tmp)
 801aa7a:	9b03      	ldr	r3, [sp, #12]
 801aa7c:	f103 33ff 	add.w	r3, r3, #4294967295
 801aa80:	2b04      	cmp	r3, #4
 801aa82:	d84e      	bhi.n	801ab22 <RCC_USARTCLKConfig+0xba>
 801aa84:	a201      	add	r2, pc, #4	; (adr r2, 801aa8c <RCC_USARTCLKConfig+0x24>)
 801aa86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aa8a:	bf00      	nop
 801aa8c:	0801aaa1 	.word	0x0801aaa1
 801aa90:	0801aabb 	.word	0x0801aabb
 801aa94:	0801aad5 	.word	0x0801aad5
 801aa98:	0801aaef 	.word	0x0801aaef
 801aa9c:	0801ab09 	.word	0x0801ab09
  {
    case 0x01:  /* clear USART1SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 801aaa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801aaa4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801aaa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801aaac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801aab0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801aab2:	f022 0203 	bic.w	r2, r2, #3
 801aab6:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 801aab8:	e034      	b.n	801ab24 <RCC_USARTCLKConfig+0xbc>
    case 0x02:  /* clear USART2SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 801aaba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801aabe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801aac2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801aac6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801aaca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801aacc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 801aad0:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 801aad2:	e027      	b.n	801ab24 <RCC_USARTCLKConfig+0xbc>
    case 0x03:  /* clear USART3SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 801aad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801aad8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801aadc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801aae0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801aae4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801aae6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 801aaea:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 801aaec:	e01a      	b.n	801ab24 <RCC_USARTCLKConfig+0xbc>
    case 0x04:  /* clear UART4SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART4SW;
 801aaee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801aaf2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801aaf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801aafa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801aafe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801ab00:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 801ab04:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 801ab06:	e00d      	b.n	801ab24 <RCC_USARTCLKConfig+0xbc>
    case 0x05:  /* clear UART5SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART5SW;
 801ab08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ab0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801ab10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ab14:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801ab18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801ab1a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 801ab1e:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 801ab20:	e000      	b.n	801ab24 <RCC_USARTCLKConfig+0xbc>
    default:
      break;
 801ab22:	bf00      	nop
  }

  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 801ab24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ab28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801ab2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ab30:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801ab34:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801ab36:	9a01      	ldr	r2, [sp, #4]
 801ab38:	430a      	orrs	r2, r1
 801ab3a:	631a      	str	r2, [r3, #48]	; 0x30
}
 801ab3c:	b004      	add	sp, #16
 801ab3e:	4770      	bx	lr

0801ab40 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 801ab40:	b082      	sub	sp, #8
 801ab42:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 801ab44:	f04f 03d8 	mov.w	r3, #216	; 0xd8
 801ab48:	f2c4 2342 	movt	r3, #16962	; 0x4242
 801ab4c:	9a01      	ldr	r2, [sp, #4]
 801ab4e:	601a      	str	r2, [r3, #0]
}
 801ab50:	b002      	add	sp, #8
 801ab52:	4770      	bx	lr

0801ab54 <RCC_RTCCLKConfig>:
  * @note     The maximum input clock frequency for RTC is 2MHz (when using HSE as
  *           RTC clock source).             
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 801ab54:	b082      	sub	sp, #8
 801ab56:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 801ab58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ab5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801ab60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ab64:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801ab68:	6a11      	ldr	r1, [r2, #32]
 801ab6a:	9a01      	ldr	r2, [sp, #4]
 801ab6c:	430a      	orrs	r2, r1
 801ab6e:	621a      	str	r2, [r3, #32]
}
 801ab70:	b002      	add	sp, #8
 801ab72:	4770      	bx	lr

0801ab74 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 801ab74:	b082      	sub	sp, #8
 801ab76:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 801ab78:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 801ab7c:	f2c4 2342 	movt	r3, #16962	; 0x4242
 801ab80:	9a01      	ldr	r2, [sp, #4]
 801ab82:	601a      	str	r2, [r3, #0]
}
 801ab84:	b002      	add	sp, #8
 801ab86:	4770      	bx	lr

0801ab88 <RCC_RTCCLKCmd>:
  * @param  NewState: new state of the RTC clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 801ab88:	b082      	sub	sp, #8
 801ab8a:	4603      	mov	r3, r0
 801ab8c:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 801ab90:	f240 433c 	movw	r3, #1084	; 0x43c
 801ab94:	f2c4 2342 	movt	r3, #16962	; 0x4242
 801ab98:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801ab9c:	601a      	str	r2, [r3, #0]
}
 801ab9e:	b002      	add	sp, #8
 801aba0:	4770      	bx	lr
 801aba2:	bf00      	nop

0801aba4 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 801aba4:	b082      	sub	sp, #8
 801aba6:	4603      	mov	r3, r0
 801aba8:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 801abac:	f44f 6388 	mov.w	r3, #1088	; 0x440
 801abb0:	f2c4 2342 	movt	r3, #16962	; 0x4242
 801abb4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801abb8:	601a      	str	r2, [r3, #0]
}
 801abba:	b002      	add	sp, #8
 801abbc:	4770      	bx	lr
 801abbe:	bf00      	nop

0801abc0 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 801abc0:	b082      	sub	sp, #8
 801abc2:	9001      	str	r0, [sp, #4]
 801abc4:	460b      	mov	r3, r1
 801abc6:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801abca:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d00c      	beq.n	801abec <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 801abd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801abd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801abda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801abde:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801abe2:	6951      	ldr	r1, [r2, #20]
 801abe4:	9a01      	ldr	r2, [sp, #4]
 801abe6:	430a      	orrs	r2, r1
 801abe8:	615a      	str	r2, [r3, #20]
 801abea:	e00d      	b.n	801ac08 <RCC_AHBPeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 801abec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801abf0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801abf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801abf8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801abfc:	6951      	ldr	r1, [r2, #20]
 801abfe:	9a01      	ldr	r2, [sp, #4]
 801ac00:	ea6f 0202 	mvn.w	r2, r2
 801ac04:	400a      	ands	r2, r1
 801ac06:	615a      	str	r2, [r3, #20]
  }
}
 801ac08:	b002      	add	sp, #8
 801ac0a:	4770      	bx	lr

0801ac0c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 801ac0c:	b082      	sub	sp, #8
 801ac0e:	9001      	str	r0, [sp, #4]
 801ac10:	460b      	mov	r3, r1
 801ac12:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801ac16:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d00c      	beq.n	801ac38 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 801ac1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ac22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801ac26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ac2a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801ac2e:	6991      	ldr	r1, [r2, #24]
 801ac30:	9a01      	ldr	r2, [sp, #4]
 801ac32:	430a      	orrs	r2, r1
 801ac34:	619a      	str	r2, [r3, #24]
 801ac36:	e00d      	b.n	801ac54 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 801ac38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ac3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801ac40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ac44:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801ac48:	6991      	ldr	r1, [r2, #24]
 801ac4a:	9a01      	ldr	r2, [sp, #4]
 801ac4c:	ea6f 0202 	mvn.w	r2, r2
 801ac50:	400a      	ands	r2, r1
 801ac52:	619a      	str	r2, [r3, #24]
  }
}
 801ac54:	b002      	add	sp, #8
 801ac56:	4770      	bx	lr

0801ac58 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 801ac58:	b082      	sub	sp, #8
 801ac5a:	9001      	str	r0, [sp, #4]
 801ac5c:	460b      	mov	r3, r1
 801ac5e:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801ac62:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	d00c      	beq.n	801ac84 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 801ac6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ac6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801ac72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ac76:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801ac7a:	69d1      	ldr	r1, [r2, #28]
 801ac7c:	9a01      	ldr	r2, [sp, #4]
 801ac7e:	430a      	orrs	r2, r1
 801ac80:	61da      	str	r2, [r3, #28]
 801ac82:	e00d      	b.n	801aca0 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 801ac84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ac88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801ac8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ac90:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801ac94:	69d1      	ldr	r1, [r2, #28]
 801ac96:	9a01      	ldr	r2, [sp, #4]
 801ac98:	ea6f 0202 	mvn.w	r2, r2
 801ac9c:	400a      	ands	r2, r1
 801ac9e:	61da      	str	r2, [r3, #28]
  }
}
 801aca0:	b002      	add	sp, #8
 801aca2:	4770      	bx	lr

0801aca4 <RCC_AHBPeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 801aca4:	b082      	sub	sp, #8
 801aca6:	9001      	str	r0, [sp, #4]
 801aca8:	460b      	mov	r3, r1
 801acaa:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801acae:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d00c      	beq.n	801acd0 <RCC_AHBPeriphResetCmd+0x2c>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 801acb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801acba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801acbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801acc2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801acc6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801acc8:	9a01      	ldr	r2, [sp, #4]
 801acca:	430a      	orrs	r2, r1
 801accc:	629a      	str	r2, [r3, #40]	; 0x28
 801acce:	e00d      	b.n	801acec <RCC_AHBPeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 801acd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801acd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801acd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801acdc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801ace0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801ace2:	9a01      	ldr	r2, [sp, #4]
 801ace4:	ea6f 0202 	mvn.w	r2, r2
 801ace8:	400a      	ands	r2, r1
 801acea:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 801acec:	b002      	add	sp, #8
 801acee:	4770      	bx	lr

0801acf0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 801acf0:	b082      	sub	sp, #8
 801acf2:	9001      	str	r0, [sp, #4]
 801acf4:	460b      	mov	r3, r1
 801acf6:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801acfa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d00c      	beq.n	801ad1c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 801ad02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ad06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801ad0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ad0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801ad12:	68d1      	ldr	r1, [r2, #12]
 801ad14:	9a01      	ldr	r2, [sp, #4]
 801ad16:	430a      	orrs	r2, r1
 801ad18:	60da      	str	r2, [r3, #12]
 801ad1a:	e00d      	b.n	801ad38 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 801ad1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ad20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801ad24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ad28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801ad2c:	68d1      	ldr	r1, [r2, #12]
 801ad2e:	9a01      	ldr	r2, [sp, #4]
 801ad30:	ea6f 0202 	mvn.w	r2, r2
 801ad34:	400a      	ands	r2, r1
 801ad36:	60da      	str	r2, [r3, #12]
  }
}
 801ad38:	b002      	add	sp, #8
 801ad3a:	4770      	bx	lr

0801ad3c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 801ad3c:	b082      	sub	sp, #8
 801ad3e:	9001      	str	r0, [sp, #4]
 801ad40:	460b      	mov	r3, r1
 801ad42:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801ad46:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d00c      	beq.n	801ad68 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 801ad4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ad52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801ad56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ad5a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801ad5e:	6911      	ldr	r1, [r2, #16]
 801ad60:	9a01      	ldr	r2, [sp, #4]
 801ad62:	430a      	orrs	r2, r1
 801ad64:	611a      	str	r2, [r3, #16]
 801ad66:	e00d      	b.n	801ad84 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 801ad68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ad6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801ad70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ad74:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801ad78:	6911      	ldr	r1, [r2, #16]
 801ad7a:	9a01      	ldr	r2, [sp, #4]
 801ad7c:	ea6f 0202 	mvn.w	r2, r2
 801ad80:	400a      	ands	r2, r1
 801ad82:	611a      	str	r2, [r3, #16]
  }
}
 801ad84:	b002      	add	sp, #8
 801ad86:	4770      	bx	lr

0801ad88 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 801ad88:	b082      	sub	sp, #8
 801ad8a:	4602      	mov	r2, r0
 801ad8c:	460b      	mov	r3, r1
 801ad8e:	f88d 2007 	strb.w	r2, [sp, #7]
 801ad92:	f88d 3006 	strb.w	r3, [sp, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801ad96:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d00f      	beq.n	801adbe <RCC_ITConfig+0x36>
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 801ad9e:	f241 0309 	movw	r3, #4105	; 0x1009
 801ada2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801ada6:	f241 0209 	movw	r2, #4105	; 0x1009
 801adaa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801adae:	7812      	ldrb	r2, [r2, #0]
 801adb0:	b2d1      	uxtb	r1, r2
 801adb2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801adb6:	430a      	orrs	r2, r1
 801adb8:	b2d2      	uxtb	r2, r2
 801adba:	701a      	strb	r2, [r3, #0]
 801adbc:	e011      	b.n	801ade2 <RCC_ITConfig+0x5a>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 801adbe:	f241 0309 	movw	r3, #4105	; 0x1009
 801adc2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801adc6:	f241 0209 	movw	r2, #4105	; 0x1009
 801adca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801adce:	7812      	ldrb	r2, [r2, #0]
 801add0:	b2d1      	uxtb	r1, r2
 801add2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801add6:	ea6f 0202 	mvn.w	r2, r2
 801adda:	b2d2      	uxtb	r2, r2
 801addc:	400a      	ands	r2, r1
 801adde:	b2d2      	uxtb	r2, r2
 801ade0:	701a      	strb	r2, [r3, #0]
  }
}
 801ade2:	b002      	add	sp, #8
 801ade4:	4770      	bx	lr
 801ade6:	bf00      	nop

0801ade8 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 801ade8:	b086      	sub	sp, #24
 801adea:	4603      	mov	r3, r0
 801adec:	f88d 3007 	strb.w	r3, [sp, #7]
  uint32_t tmp = 0;
 801adf0:	f04f 0300 	mov.w	r3, #0
 801adf4:	9303      	str	r3, [sp, #12]
  uint32_t statusreg = 0;
 801adf6:	f04f 0300 	mov.w	r3, #0
 801adfa:	9305      	str	r3, [sp, #20]
  FlagStatus bitstatus = RESET;
 801adfc:	f04f 0300 	mov.w	r3, #0
 801ae00:	f88d 3013 	strb.w	r3, [sp, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 801ae04:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801ae08:	ea4f 1353 	mov.w	r3, r3, lsr #5
 801ae0c:	b2db      	uxtb	r3, r3
 801ae0e:	9303      	str	r3, [sp, #12]

   if (tmp == 0)               /* The flag to check is in CR register */
 801ae10:	9b03      	ldr	r3, [sp, #12]
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	d106      	bne.n	801ae24 <RCC_GetFlagStatus+0x3c>
  {
    statusreg = RCC->CR;
 801ae16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ae1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	9305      	str	r3, [sp, #20]
 801ae22:	e019      	b.n	801ae58 <RCC_GetFlagStatus+0x70>
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 801ae24:	9b03      	ldr	r3, [sp, #12]
 801ae26:	2b01      	cmp	r3, #1
 801ae28:	d106      	bne.n	801ae38 <RCC_GetFlagStatus+0x50>
  {
    statusreg = RCC->BDCR;
 801ae2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ae2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801ae32:	6a1b      	ldr	r3, [r3, #32]
 801ae34:	9305      	str	r3, [sp, #20]
 801ae36:	e00f      	b.n	801ae58 <RCC_GetFlagStatus+0x70>
  }
  else if (tmp == 4)          /* The flag to check is in CFGR register */
 801ae38:	9b03      	ldr	r3, [sp, #12]
 801ae3a:	2b04      	cmp	r3, #4
 801ae3c:	d106      	bne.n	801ae4c <RCC_GetFlagStatus+0x64>
  {
    statusreg = RCC->CFGR;
 801ae3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ae42:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801ae46:	685b      	ldr	r3, [r3, #4]
 801ae48:	9305      	str	r3, [sp, #20]
 801ae4a:	e005      	b.n	801ae58 <RCC_GetFlagStatus+0x70>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 801ae4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ae50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801ae54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae56:	9305      	str	r3, [sp, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 801ae58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801ae5c:	f003 031f 	and.w	r3, r3, #31
 801ae60:	9303      	str	r3, [sp, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 801ae62:	9b03      	ldr	r3, [sp, #12]
 801ae64:	9a05      	ldr	r2, [sp, #20]
 801ae66:	fa22 f303 	lsr.w	r3, r2, r3
 801ae6a:	f003 0301 	and.w	r3, r3, #1
 801ae6e:	b2db      	uxtb	r3, r3
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d004      	beq.n	801ae7e <RCC_GetFlagStatus+0x96>
  {
    bitstatus = SET;
 801ae74:	f04f 0301 	mov.w	r3, #1
 801ae78:	f88d 3013 	strb.w	r3, [sp, #19]
 801ae7c:	e003      	b.n	801ae86 <RCC_GetFlagStatus+0x9e>
  }
  else
  {
    bitstatus = RESET;
 801ae7e:	f04f 0300 	mov.w	r3, #0
 801ae82:	f88d 3013 	strb.w	r3, [sp, #19]
  }
  /* Return the flag status */
  return bitstatus;
 801ae86:	f89d 3013 	ldrb.w	r3, [sp, #19]
}
 801ae8a:	4618      	mov	r0, r3
 801ae8c:	b006      	add	sp, #24
 801ae8e:	4770      	bx	lr

0801ae90 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 801ae90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ae94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801ae98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ae9c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801aea0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801aea2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 801aea6:	625a      	str	r2, [r3, #36]	; 0x24
}
 801aea8:	4770      	bx	lr
 801aeaa:	bf00      	nop

0801aeac <RCC_GetITStatus>:
  *     @arg RCC_IT_PLLRDY: PLL ready interrupt
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 801aeac:	b084      	sub	sp, #16
 801aeae:	4603      	mov	r3, r0
 801aeb0:	f88d 3007 	strb.w	r3, [sp, #7]
  ITStatus bitstatus = RESET;
 801aeb4:	f04f 0300 	mov.w	r3, #0
 801aeb8:	f88d 300f 	strb.w	r3, [sp, #15]
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 801aebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801aec0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801aec4:	689a      	ldr	r2, [r3, #8]
 801aec6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801aeca:	4013      	ands	r3, r2
 801aecc:	2b00      	cmp	r3, #0
 801aece:	d004      	beq.n	801aeda <RCC_GetITStatus+0x2e>
  {
    bitstatus = SET;
 801aed0:	f04f 0301 	mov.w	r3, #1
 801aed4:	f88d 300f 	strb.w	r3, [sp, #15]
 801aed8:	e003      	b.n	801aee2 <RCC_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 801aeda:	f04f 0300 	mov.w	r3, #0
 801aede:	f88d 300f 	strb.w	r3, [sp, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 801aee2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 801aee6:	4618      	mov	r0, r3
 801aee8:	b004      	add	sp, #16
 801aeea:	4770      	bx	lr

0801aeec <RCC_ClearITPendingBit>:
  *     @arg RCC_IT_PLLRDY: PLL ready interrupt
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 801aeec:	b082      	sub	sp, #8
 801aeee:	4603      	mov	r3, r0
 801aef0:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 801aef4:	f241 030a 	movw	r3, #4106	; 0x100a
 801aef8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801aefc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801af00:	701a      	strb	r2, [r3, #0]
}
 801af02:	b002      	add	sp, #8
 801af04:	4770      	bx	lr
 801af06:	bf00      	nop

0801af08 <SPI_I2S_DeInit>:
  * @param  SPIx: To select the SPIx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 801af08:	b500      	push	{lr}
 801af0a:	b083      	sub	sp, #12
 801af0c:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 801af0e:	9a01      	ldr	r2, [sp, #4]
 801af10:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 801af14:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801af18:	429a      	cmp	r2, r3
 801af1a:	d10c      	bne.n	801af36 <SPI_I2S_DeInit+0x2e>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 801af1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801af20:	f04f 0101 	mov.w	r1, #1
 801af24:	f7ff fee4 	bl	801acf0 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 801af28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801af2c:	f04f 0100 	mov.w	r1, #0
 801af30:	f7ff fede 	bl	801acf0 <RCC_APB2PeriphResetCmd>
 801af34:	e026      	b.n	801af84 <SPI_I2S_DeInit+0x7c>
  }
  else if (SPIx == SPI2)
 801af36:	9a01      	ldr	r2, [sp, #4]
 801af38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801af3c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801af40:	429a      	cmp	r2, r3
 801af42:	d10c      	bne.n	801af5e <SPI_I2S_DeInit+0x56>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 801af44:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801af48:	f04f 0101 	mov.w	r1, #1
 801af4c:	f7ff fef6 	bl	801ad3c <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 801af50:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801af54:	f04f 0100 	mov.w	r1, #0
 801af58:	f7ff fef0 	bl	801ad3c <RCC_APB1PeriphResetCmd>
 801af5c:	e012      	b.n	801af84 <SPI_I2S_DeInit+0x7c>
  }
  else
  {
    if (SPIx == SPI3)
 801af5e:	9a01      	ldr	r2, [sp, #4]
 801af60:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801af64:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801af68:	429a      	cmp	r2, r3
 801af6a:	d10b      	bne.n	801af84 <SPI_I2S_DeInit+0x7c>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 801af6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801af70:	f04f 0101 	mov.w	r1, #1
 801af74:	f7ff fee2 	bl	801ad3c <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 801af78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801af7c:	f04f 0100 	mov.w	r1, #0
 801af80:	f7ff fedc 	bl	801ad3c <RCC_APB1PeriphResetCmd>
    }
  }
}
 801af84:	b003      	add	sp, #12
 801af86:	bd00      	pop	{pc}

0801af88 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 801af88:	b082      	sub	sp, #8
 801af8a:	9001      	str	r0, [sp, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 801af8c:	9b01      	ldr	r3, [sp, #4]
 801af8e:	f04f 0200 	mov.w	r2, #0
 801af92:	801a      	strh	r2, [r3, #0]
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 801af94:	9b01      	ldr	r3, [sp, #4]
 801af96:	f04f 0200 	mov.w	r2, #0
 801af9a:	805a      	strh	r2, [r3, #2]
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 801af9c:	9b01      	ldr	r3, [sp, #4]
 801af9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 801afa2:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 801afa4:	9b01      	ldr	r3, [sp, #4]
 801afa6:	f04f 0200 	mov.w	r2, #0
 801afaa:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 801afac:	9b01      	ldr	r3, [sp, #4]
 801afae:	f04f 0200 	mov.w	r2, #0
 801afb2:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 801afb4:	9b01      	ldr	r3, [sp, #4]
 801afb6:	f04f 0200 	mov.w	r2, #0
 801afba:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 801afbc:	9b01      	ldr	r3, [sp, #4]
 801afbe:	f04f 0200 	mov.w	r2, #0
 801afc2:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 801afc4:	9b01      	ldr	r3, [sp, #4]
 801afc6:	f04f 0200 	mov.w	r2, #0
 801afca:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 801afcc:	9b01      	ldr	r3, [sp, #4]
 801afce:	f04f 0207 	mov.w	r2, #7
 801afd2:	821a      	strh	r2, [r3, #16]
}
 801afd4:	b002      	add	sp, #8
 801afd6:	4770      	bx	lr

0801afd8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 801afd8:	b084      	sub	sp, #16
 801afda:	9001      	str	r0, [sp, #4]
 801afdc:	9100      	str	r1, [sp, #0]
  uint16_t tmpreg = 0;
 801afde:	f04f 0300 	mov.w	r3, #0
 801afe2:	f8ad 300e 	strh.w	r3, [sp, #14]
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /* Configuring the SPI in master mode */
  if(SPI_InitStruct->SPI_Mode == SPI_Mode_Master)
 801afe6:	9b00      	ldr	r3, [sp, #0]
 801afe8:	885b      	ldrh	r3, [r3, #2]
 801afea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801afee:	d142      	bne.n	801b076 <SPI_Init+0x9e>
  {
/*---------------------------- SPIx CR1 Configuration ------------------------*/
    /* Get the SPIx CR1 value */
    tmpreg = SPIx->CR1;
 801aff0:	9b01      	ldr	r3, [sp, #4]
 801aff2:	881b      	ldrh	r3, [r3, #0]
 801aff4:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
    tmpreg &= CR1_CLEAR_MASK;
 801aff8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801affc:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 801b000:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 801b004:	9b00      	ldr	r3, [sp, #0]
 801b006:	881a      	ldrh	r2, [r3, #0]
 801b008:	9b00      	ldr	r3, [sp, #0]
 801b00a:	885b      	ldrh	r3, [r3, #2]
 801b00c:	4313      	orrs	r3, r2
 801b00e:	b29a      	uxth	r2, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
 801b010:	9b00      	ldr	r3, [sp, #0]
 801b012:	88d9      	ldrh	r1, [r3, #6]
 801b014:	9b00      	ldr	r3, [sp, #0]
 801b016:	891b      	ldrh	r3, [r3, #8]
 801b018:	430b      	orrs	r3, r1
 801b01a:	b299      	uxth	r1, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 801b01c:	9b00      	ldr	r3, [sp, #0]
 801b01e:	8958      	ldrh	r0, [r3, #10]
 801b020:	9b00      	ldr	r3, [sp, #0]
 801b022:	899b      	ldrh	r3, [r3, #12]
 801b024:	4303      	orrs	r3, r0
 801b026:	b298      	uxth	r0, r3
                         SPI_InitStruct->SPI_FirstBit)));
 801b028:	9b00      	ldr	r3, [sp, #0]
 801b02a:	89db      	ldrh	r3, [r3, #14]
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 801b02c:	4303      	orrs	r3, r0
 801b02e:	b29b      	uxth	r3, r3
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
 801b030:	430b      	orrs	r3, r1
 801b032:	b29b      	uxth	r3, r3
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 801b034:	4313      	orrs	r3, r2
 801b036:	b29a      	uxth	r2, r3
 801b038:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801b03c:	4313      	orrs	r3, r2
 801b03e:	f8ad 300e 	strh.w	r3, [sp, #14]
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
                         SPI_InitStruct->SPI_FirstBit)));
    /* Write to SPIx CR1 */
    SPIx->CR1 = tmpreg;
 801b042:	9b01      	ldr	r3, [sp, #4]
 801b044:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801b048:	801a      	strh	r2, [r3, #0]
    /*-------------------------Data Size Configuration -----------------------*/
    /* Get the SPIx CR2 value */
    tmpreg = SPIx->CR2;
 801b04a:	9b01      	ldr	r3, [sp, #4]
 801b04c:	889b      	ldrh	r3, [r3, #4]
 801b04e:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* Clear DS[3:0] bits */
    tmpreg &= (uint16_t)~SPI_CR2_DS;
 801b052:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801b056:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801b05a:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* Configure SPIx: Data Size */
    tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 801b05e:	9b00      	ldr	r3, [sp, #0]
 801b060:	889a      	ldrh	r2, [r3, #4]
 801b062:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801b066:	4313      	orrs	r3, r2
 801b068:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* Write to SPIx CR2 */
    SPIx->CR2 = tmpreg;
 801b06c:	9b01      	ldr	r3, [sp, #4]
 801b06e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801b072:	809a      	strh	r2, [r3, #4]
 801b074:	e041      	b.n	801b0fa <SPI_Init+0x122>
  /* Configuring the SPI in slave mode */
  else
  {
/*---------------------------- Data size Configuration -----------------------*/
    /* Get the SPIx CR2 value */
    tmpreg = SPIx->CR2;
 801b076:	9b01      	ldr	r3, [sp, #4]
 801b078:	889b      	ldrh	r3, [r3, #4]
 801b07a:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* Clear DS[3:0] bits */
    tmpreg &= (uint16_t)~SPI_CR2_DS;
 801b07e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801b082:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801b086:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* Configure SPIx: Data Size */
    tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 801b08a:	9b00      	ldr	r3, [sp, #0]
 801b08c:	889a      	ldrh	r2, [r3, #4]
 801b08e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801b092:	4313      	orrs	r3, r2
 801b094:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* Write to SPIx CR2 */
    SPIx->CR2 = tmpreg;
 801b098:	9b01      	ldr	r3, [sp, #4]
 801b09a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801b09e:	809a      	strh	r2, [r3, #4]
/*---------------------------- SPIx CR1 Configuration ------------------------*/
    /* Get the SPIx CR1 value */
    tmpreg = SPIx->CR1;
 801b0a0:	9b01      	ldr	r3, [sp, #4]
 801b0a2:	881b      	ldrh	r3, [r3, #0]
 801b0a4:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
    tmpreg &= CR1_CLEAR_MASK;
 801b0a8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801b0ac:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 801b0b0:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 801b0b4:	9b00      	ldr	r3, [sp, #0]
 801b0b6:	881a      	ldrh	r2, [r3, #0]
 801b0b8:	9b00      	ldr	r3, [sp, #0]
 801b0ba:	885b      	ldrh	r3, [r3, #2]
 801b0bc:	4313      	orrs	r3, r2
 801b0be:	b29a      	uxth	r2, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
 801b0c0:	9b00      	ldr	r3, [sp, #0]
 801b0c2:	88d9      	ldrh	r1, [r3, #6]
 801b0c4:	9b00      	ldr	r3, [sp, #0]
 801b0c6:	891b      	ldrh	r3, [r3, #8]
 801b0c8:	430b      	orrs	r3, r1
 801b0ca:	b299      	uxth	r1, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 801b0cc:	9b00      	ldr	r3, [sp, #0]
 801b0ce:	8958      	ldrh	r0, [r3, #10]
 801b0d0:	9b00      	ldr	r3, [sp, #0]
 801b0d2:	899b      	ldrh	r3, [r3, #12]
 801b0d4:	4303      	orrs	r3, r0
 801b0d6:	b298      	uxth	r0, r3
                         SPI_InitStruct->SPI_FirstBit)));
 801b0d8:	9b00      	ldr	r3, [sp, #0]
 801b0da:	89db      	ldrh	r3, [r3, #14]
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 801b0dc:	4303      	orrs	r3, r0
 801b0de:	b29b      	uxth	r3, r3
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
 801b0e0:	430b      	orrs	r3, r1
 801b0e2:	b29b      	uxth	r3, r3
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 801b0e4:	4313      	orrs	r3, r2
 801b0e6:	b29a      	uxth	r2, r3
 801b0e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801b0ec:	4313      	orrs	r3, r2
 801b0ee:	f8ad 300e 	strh.w	r3, [sp, #14]
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
                         SPI_InitStruct->SPI_FirstBit)));

    /* Write to SPIx CR1 */
    SPIx->CR1 = tmpreg;
 801b0f2:	9b01      	ldr	r3, [sp, #4]
 801b0f4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801b0f8:	801a      	strh	r2, [r3, #0]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 801b0fa:	9b01      	ldr	r3, [sp, #4]
 801b0fc:	8b9b      	ldrh	r3, [r3, #28]
 801b0fe:	b29b      	uxth	r3, r3
 801b100:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b104:	b29a      	uxth	r2, r3
 801b106:	9b01      	ldr	r3, [sp, #4]
 801b108:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 801b10a:	9b00      	ldr	r3, [sp, #0]
 801b10c:	8a1a      	ldrh	r2, [r3, #16]
 801b10e:	9b01      	ldr	r3, [sp, #4]
 801b110:	821a      	strh	r2, [r3, #16]
}
 801b112:	b004      	add	sp, #16
 801b114:	4770      	bx	lr
 801b116:	bf00      	nop

0801b118 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct : pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 801b118:	b082      	sub	sp, #8
 801b11a:	9001      	str	r0, [sp, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 801b11c:	9b01      	ldr	r3, [sp, #4]
 801b11e:	f04f 0200 	mov.w	r2, #0
 801b122:	801a      	strh	r2, [r3, #0]

  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 801b124:	9b01      	ldr	r3, [sp, #4]
 801b126:	f04f 0200 	mov.w	r2, #0
 801b12a:	805a      	strh	r2, [r3, #2]

  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 801b12c:	9b01      	ldr	r3, [sp, #4]
 801b12e:	f04f 0200 	mov.w	r2, #0
 801b132:	809a      	strh	r2, [r3, #4]

  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 801b134:	9b01      	ldr	r3, [sp, #4]
 801b136:	f04f 0200 	mov.w	r2, #0
 801b13a:	80da      	strh	r2, [r3, #6]

  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 801b13c:	9b01      	ldr	r3, [sp, #4]
 801b13e:	f04f 0202 	mov.w	r2, #2
 801b142:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 801b144:	9b01      	ldr	r3, [sp, #4]
 801b146:	f04f 0200 	mov.w	r2, #0
 801b14a:	819a      	strh	r2, [r3, #12]
}
 801b14c:	b002      	add	sp, #8
 801b14e:	4770      	bx	lr

0801b150 <I2S_Init>:
  *  and the product configuration). But in case the prescaler value is greater 
  *  than 511, the default value (0x02) will be configured instead.     
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 801b150:	b500      	push	{lr}
 801b152:	b097      	sub	sp, #92	; 0x5c
 801b154:	9001      	str	r0, [sp, #4]
 801b156:	9100      	str	r1, [sp, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 801b158:	f04f 0300 	mov.w	r3, #0
 801b15c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 801b160:	f04f 0302 	mov.w	r3, #2
 801b164:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
 801b168:	f04f 0300 	mov.w	r3, #0
 801b16c:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 801b170:	f04f 0301 	mov.w	r3, #1
 801b174:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
  uint32_t tmp = 0;
 801b178:	f04f 0300 	mov.w	r3, #0
 801b17c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_ClocksTypeDef RCC_Clocks;
  uint32_t sourceclock = 0;
 801b17e:	f04f 0300 	mov.w	r3, #0
 801b182:	9311      	str	r3, [sp, #68]	; 0x44
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 801b184:	9b01      	ldr	r3, [sp, #4]
 801b186:	8b9b      	ldrh	r3, [r3, #28]
 801b188:	b29b      	uxth	r3, r3
 801b18a:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 801b18e:	f023 031f 	bic.w	r3, r3, #31
 801b192:	b29a      	uxth	r2, r3
 801b194:	9b01      	ldr	r3, [sp, #4]
 801b196:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 801b198:	9b01      	ldr	r3, [sp, #4]
 801b19a:	f04f 0202 	mov.w	r2, #2
 801b19e:	841a      	strh	r2, [r3, #32]

  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 801b1a0:	9b01      	ldr	r3, [sp, #4]
 801b1a2:	8b9b      	ldrh	r3, [r3, #28]
 801b1a4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a

  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 801b1a8:	9b00      	ldr	r3, [sp, #0]
 801b1aa:	689b      	ldr	r3, [r3, #8]
 801b1ac:	2b02      	cmp	r3, #2
 801b1ae:	d108      	bne.n	801b1c2 <I2S_Init+0x72>
  {
    i2sodd = (uint16_t)0;
 801b1b0:	f04f 0300 	mov.w	r3, #0
 801b1b4:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    i2sdiv = (uint16_t)2;   
 801b1b8:	f04f 0302 	mov.w	r3, #2
 801b1bc:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
 801b1c0:	e060      	b.n	801b284 <I2S_Init+0x134>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 801b1c2:	9b00      	ldr	r3, [sp, #0]
 801b1c4:	889b      	ldrh	r3, [r3, #4]
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d104      	bne.n	801b1d4 <I2S_Init+0x84>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 801b1ca:	f04f 0301 	mov.w	r3, #1
 801b1ce:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
 801b1d2:	e003      	b.n	801b1dc <I2S_Init+0x8c>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 801b1d4:	f04f 0302 	mov.w	r3, #2
 801b1d8:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    }

    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 801b1dc:	ab02      	add	r3, sp, #8
 801b1de:	4618      	mov	r0, r3
 801b1e0:	f7ff f904 	bl	801a3ec <RCC_GetClocksFreq>

    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 801b1e4:	9b02      	ldr	r3, [sp, #8]
 801b1e6:	9311      	str	r3, [sp, #68]	; 0x44

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 801b1e8:	9b00      	ldr	r3, [sp, #0]
 801b1ea:	88db      	ldrh	r3, [r3, #6]
 801b1ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b1f0:	d113      	bne.n	801b21a <I2S_Init+0xca>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 801b1f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b1f4:	ea4f 2213 	mov.w	r2, r3, lsr #8
 801b1f8:	4613      	mov	r3, r2
 801b1fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801b1fe:	189b      	adds	r3, r3, r2
 801b200:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b204:	461a      	mov	r2, r3
 801b206:	9b00      	ldr	r3, [sp, #0]
 801b208:	689b      	ldr	r3, [r3, #8]
 801b20a:	fbb2 f3f3 	udiv	r3, r2, r3
 801b20e:	b29b      	uxth	r3, r3
 801b210:	f103 0305 	add.w	r3, r3, #5
 801b214:	b29b      	uxth	r3, r3
 801b216:	9313      	str	r3, [sp, #76]	; 0x4c
 801b218:	e016      	b.n	801b248 <I2S_Init+0xf8>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 801b21a:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 801b21e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801b222:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b224:	fbb2 f2f3 	udiv	r2, r2, r3
 801b228:	4613      	mov	r3, r2
 801b22a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801b22e:	189b      	adds	r3, r3, r2
 801b230:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b234:	461a      	mov	r2, r3
 801b236:	9b00      	ldr	r3, [sp, #0]
 801b238:	689b      	ldr	r3, [r3, #8]
 801b23a:	fbb2 f3f3 	udiv	r3, r2, r3
 801b23e:	b29b      	uxth	r3, r3
 801b240:	f103 0305 	add.w	r3, r3, #5
 801b244:	b29b      	uxth	r3, r3
 801b246:	9313      	str	r3, [sp, #76]	; 0x4c
    }
    
    /* Remove the floating point */
    tmp = tmp / 10;
 801b248:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b24a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 801b24e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 801b252:	fba3 1302 	umull	r1, r3, r3, r2
 801b256:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 801b25a:	9313      	str	r3, [sp, #76]	; 0x4c

    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 801b25c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b25e:	b29b      	uxth	r3, r3
 801b260:	f003 0301 	and.w	r3, r3, #1
 801b264:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 801b268:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801b26c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b26e:	1ad3      	subs	r3, r2, r3
 801b270:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801b274:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 801b278:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801b27c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801b280:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 801b284:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801b288:	2b01      	cmp	r3, #1
 801b28a:	d903      	bls.n	801b294 <I2S_Init+0x144>
 801b28c:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801b290:	2bff      	cmp	r3, #255	; 0xff
 801b292:	d907      	bls.n	801b2a4 <I2S_Init+0x154>
  {
    /* Set the default values */
    i2sdiv = 2;
 801b294:	f04f 0302 	mov.w	r3, #2
 801b298:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    i2sodd = 0;
 801b29c:	f04f 0300 	mov.w	r3, #0
 801b2a0:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 801b2a4:	9b00      	ldr	r3, [sp, #0]
 801b2a6:	88da      	ldrh	r2, [r3, #6]
 801b2a8:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801b2ac:	4313      	orrs	r3, r2
 801b2ae:	b29a      	uxth	r2, r3
 801b2b0:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801b2b4:	4313      	orrs	r3, r2
 801b2b6:	b29a      	uxth	r2, r3
 801b2b8:	9b01      	ldr	r3, [sp, #4]
 801b2ba:	841a      	strh	r2, [r3, #32]

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)(SPI_I2SCFGR_I2SMOD | I2S_InitStruct->I2S_Mode) | \
 801b2bc:	9b00      	ldr	r3, [sp, #0]
 801b2be:	881a      	ldrh	r2, [r3, #0]
                       (uint16_t)((uint16_t)((uint16_t)(I2S_InitStruct->I2S_Standard |I2S_InitStruct->I2S_DataFormat) |\
 801b2c0:	9b00      	ldr	r3, [sp, #0]
 801b2c2:	8859      	ldrh	r1, [r3, #2]
 801b2c4:	9b00      	ldr	r3, [sp, #0]
 801b2c6:	889b      	ldrh	r3, [r3, #4]
 801b2c8:	430b      	orrs	r3, r1
 801b2ca:	b299      	uxth	r1, r3
                       I2S_InitStruct->I2S_CPOL)));
 801b2cc:	9b00      	ldr	r3, [sp, #0]
 801b2ce:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)(SPI_I2SCFGR_I2SMOD | I2S_InitStruct->I2S_Mode) | \
                       (uint16_t)((uint16_t)((uint16_t)(I2S_InitStruct->I2S_Standard |I2S_InitStruct->I2S_DataFormat) |\
 801b2d0:	430b      	orrs	r3, r1
 801b2d2:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)(SPI_I2SCFGR_I2SMOD | I2S_InitStruct->I2S_Mode) | \
 801b2d4:	4313      	orrs	r3, r2
 801b2d6:	b29a      	uxth	r2, r3
 801b2d8:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 801b2dc:	4313      	orrs	r3, r2
 801b2de:	b29b      	uxth	r3, r3
 801b2e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b2e4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                       (uint16_t)((uint16_t)((uint16_t)(I2S_InitStruct->I2S_Standard |I2S_InitStruct->I2S_DataFormat) |\
                       I2S_InitStruct->I2S_CPOL)));

  /* Write to SPIx I2SCFGR */
  SPIx->I2SCFGR = tmpreg;
 801b2e8:	9b01      	ldr	r3, [sp, #4]
 801b2ea:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 801b2ee:	839a      	strh	r2, [r3, #28]
}
 801b2f0:	b017      	add	sp, #92	; 0x5c
 801b2f2:	bd00      	pop	{pc}

0801b2f4 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 801b2f4:	b082      	sub	sp, #8
 801b2f6:	9001      	str	r0, [sp, #4]
 801b2f8:	460b      	mov	r3, r1
 801b2fa:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801b2fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801b302:	2b00      	cmp	r3, #0
 801b304:	d008      	beq.n	801b318 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 801b306:	9b01      	ldr	r3, [sp, #4]
 801b308:	881b      	ldrh	r3, [r3, #0]
 801b30a:	b29b      	uxth	r3, r3
 801b30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b310:	b29a      	uxth	r2, r3
 801b312:	9b01      	ldr	r3, [sp, #4]
 801b314:	801a      	strh	r2, [r3, #0]
 801b316:	e007      	b.n	801b328 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 801b318:	9b01      	ldr	r3, [sp, #4]
 801b31a:	881b      	ldrh	r3, [r3, #0]
 801b31c:	b29b      	uxth	r3, r3
 801b31e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b322:	b29a      	uxth	r2, r3
 801b324:	9b01      	ldr	r3, [sp, #4]
 801b326:	801a      	strh	r2, [r3, #0]
  }
}
 801b328:	b002      	add	sp, #8
 801b32a:	4770      	bx	lr

0801b32c <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 801b32c:	b082      	sub	sp, #8
 801b32e:	9001      	str	r0, [sp, #4]
 801b330:	460b      	mov	r3, r1
 801b332:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801b336:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	d008      	beq.n	801b350 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 801b33e:	9b01      	ldr	r3, [sp, #4]
 801b340:	889b      	ldrh	r3, [r3, #4]
 801b342:	b29b      	uxth	r3, r3
 801b344:	f043 0310 	orr.w	r3, r3, #16
 801b348:	b29a      	uxth	r2, r3
 801b34a:	9b01      	ldr	r3, [sp, #4]
 801b34c:	809a      	strh	r2, [r3, #4]
 801b34e:	e007      	b.n	801b360 <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRF);
 801b350:	9b01      	ldr	r3, [sp, #4]
 801b352:	889b      	ldrh	r3, [r3, #4]
 801b354:	b29b      	uxth	r3, r3
 801b356:	f023 0310 	bic.w	r3, r3, #16
 801b35a:	b29a      	uxth	r2, r3
 801b35c:	9b01      	ldr	r3, [sp, #4]
 801b35e:	809a      	strh	r2, [r3, #4]
  }
}
 801b360:	b002      	add	sp, #8
 801b362:	4770      	bx	lr

0801b364 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 801b364:	b082      	sub	sp, #8
 801b366:	9001      	str	r0, [sp, #4]
 801b368:	460b      	mov	r3, r1
 801b36a:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801b36e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801b372:	2b00      	cmp	r3, #0
 801b374:	d008      	beq.n	801b388 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 801b376:	9b01      	ldr	r3, [sp, #4]
 801b378:	8b9b      	ldrh	r3, [r3, #28]
 801b37a:	b29b      	uxth	r3, r3
 801b37c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801b380:	b29a      	uxth	r2, r3
 801b382:	9b01      	ldr	r3, [sp, #4]
 801b384:	839a      	strh	r2, [r3, #28]
 801b386:	e007      	b.n	801b398 <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 801b388:	9b01      	ldr	r3, [sp, #4]
 801b38a:	8b9b      	ldrh	r3, [r3, #28]
 801b38c:	b29b      	uxth	r3, r3
 801b38e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b392:	b29a      	uxth	r2, r3
 801b394:	9b01      	ldr	r3, [sp, #4]
 801b396:	839a      	strh	r2, [r3, #28]
  }
}
 801b398:	b002      	add	sp, #8
 801b39a:	4770      	bx	lr

0801b39c <SPI_DataSizeConfig>:
  *     @arg SPI_DataSize_15b: Set data size to 15 bits
  *     @arg SPI_DataSize_16b: Set data size to 16 bits
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 801b39c:	b084      	sub	sp, #16
 801b39e:	9001      	str	r0, [sp, #4]
 801b3a0:	460b      	mov	r3, r1
 801b3a2:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint16_t tmpreg = 0;
 801b3a6:	f04f 0300 	mov.w	r3, #0
 801b3aa:	f8ad 300e 	strh.w	r3, [sp, #14]
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATA_SIZE(SPI_DataSize));
  /* Read the CR2 register */
  tmpreg = SPIx->CR2;
 801b3ae:	9b01      	ldr	r3, [sp, #4]
 801b3b0:	889b      	ldrh	r3, [r3, #4]
 801b3b2:	f8ad 300e 	strh.w	r3, [sp, #14]
  /* Clear DS[3:0] bits */
  tmpreg &= (uint16_t)~SPI_CR2_DS;
 801b3b6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801b3ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801b3be:	f8ad 300e 	strh.w	r3, [sp, #14]
  /* Set new DS[3:0] bits value */
  tmpreg |= SPI_DataSize;
 801b3c2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801b3c6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b3ca:	4313      	orrs	r3, r2
 801b3cc:	f8ad 300e 	strh.w	r3, [sp, #14]
  SPIx->CR2 = tmpreg;
 801b3d0:	9b01      	ldr	r3, [sp, #4]
 801b3d2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801b3d6:	809a      	strh	r2, [r3, #4]
}
 801b3d8:	b004      	add	sp, #16
 801b3da:	4770      	bx	lr

0801b3dc <SPI_RxFIFOThresholdConfig>:
  *     @arg SPI_RxFIFOThreshold_QF: RXNE event is generated if the FIFO 
  *          level is greater or equal to 1/4. 
  * @retval None
  */
void SPI_RxFIFOThresholdConfig(SPI_TypeDef* SPIx, uint16_t SPI_RxFIFOThreshold)
{
 801b3dc:	b082      	sub	sp, #8
 801b3de:	9001      	str	r0, [sp, #4]
 801b3e0:	460b      	mov	r3, r1
 801b3e2:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));

  /* Clear FRXTH bit */
  SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 801b3e6:	9b01      	ldr	r3, [sp, #4]
 801b3e8:	889b      	ldrh	r3, [r3, #4]
 801b3ea:	b29b      	uxth	r3, r3
 801b3ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b3f0:	b29a      	uxth	r2, r3
 801b3f2:	9b01      	ldr	r3, [sp, #4]
 801b3f4:	809a      	strh	r2, [r3, #4]

  /* Set new FRXTH bit value */
  SPIx->CR2 |= SPI_RxFIFOThreshold;
 801b3f6:	9b01      	ldr	r3, [sp, #4]
 801b3f8:	889b      	ldrh	r3, [r3, #4]
 801b3fa:	b29a      	uxth	r2, r3
 801b3fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b400:	4313      	orrs	r3, r2
 801b402:	b29a      	uxth	r2, r3
 801b404:	9b01      	ldr	r3, [sp, #4]
 801b406:	809a      	strh	r2, [r3, #4]
}
 801b408:	b002      	add	sp, #8
 801b40a:	4770      	bx	lr

0801b40c <SPI_BiDirectionalLineConfig>:
  *     @arg SPI_Direction_Tx: Selects Tx transmission direction
  *     @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 801b40c:	b082      	sub	sp, #8
 801b40e:	9001      	str	r0, [sp, #4]
 801b410:	460b      	mov	r3, r1
 801b412:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 801b416:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b41a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b41e:	d108      	bne.n	801b432 <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 801b420:	9b01      	ldr	r3, [sp, #4]
 801b422:	881b      	ldrh	r3, [r3, #0]
 801b424:	b29b      	uxth	r3, r3
 801b426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801b42a:	b29a      	uxth	r2, r3
 801b42c:	9b01      	ldr	r3, [sp, #4]
 801b42e:	801a      	strh	r2, [r3, #0]
 801b430:	e007      	b.n	801b442 <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 801b432:	9b01      	ldr	r3, [sp, #4]
 801b434:	881b      	ldrh	r3, [r3, #0]
 801b436:	b29b      	uxth	r3, r3
 801b438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801b43c:	b29a      	uxth	r2, r3
 801b43e:	9b01      	ldr	r3, [sp, #4]
 801b440:	801a      	strh	r2, [r3, #0]
  }
}
 801b442:	b002      	add	sp, #8
 801b444:	4770      	bx	lr
 801b446:	bf00      	nop

0801b448 <SPI_NSSInternalSoftwareConfig>:
  *     @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *     @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 801b448:	b082      	sub	sp, #8
 801b44a:	9001      	str	r0, [sp, #4]
 801b44c:	460b      	mov	r3, r1
 801b44e:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));

  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 801b452:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801b456:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b45a:	429a      	cmp	r2, r3
 801b45c:	d008      	beq.n	801b470 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 801b45e:	9b01      	ldr	r3, [sp, #4]
 801b460:	881b      	ldrh	r3, [r3, #0]
 801b462:	b29b      	uxth	r3, r3
 801b464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b468:	b29a      	uxth	r2, r3
 801b46a:	9b01      	ldr	r3, [sp, #4]
 801b46c:	801a      	strh	r2, [r3, #0]
 801b46e:	e007      	b.n	801b480 <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 801b470:	9b01      	ldr	r3, [sp, #4]
 801b472:	881b      	ldrh	r3, [r3, #0]
 801b474:	b29b      	uxth	r3, r3
 801b476:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b47a:	b29a      	uxth	r2, r3
 801b47c:	9b01      	ldr	r3, [sp, #4]
 801b47e:	801a      	strh	r2, [r3, #0]
  }
}
 801b480:	b002      	add	sp, #8
 801b482:	4770      	bx	lr

0801b484 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 801b484:	b084      	sub	sp, #16
 801b486:	9001      	str	r0, [sp, #4]
 801b488:	9100      	str	r1, [sp, #0]
  uint16_t tmpreg = 0, tmp = 0;
 801b48a:	f04f 0300 	mov.w	r3, #0
 801b48e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b492:	f04f 0300 	mov.w	r3, #0
 801b496:	f8ad 300e 	strh.w	r3, [sp, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 801b49a:	9b01      	ldr	r3, [sp, #4]
 801b49c:	8b9b      	ldrh	r3, [r3, #28]
 801b49e:	b29b      	uxth	r3, r3
 801b4a0:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 801b4a4:	f023 031f 	bic.w	r3, r3, #31
 801b4a8:	b29a      	uxth	r2, r3
 801b4aa:	9b01      	ldr	r3, [sp, #4]
 801b4ac:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 801b4ae:	9b01      	ldr	r3, [sp, #4]
 801b4b0:	f04f 0202 	mov.w	r2, #2
 801b4b4:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 801b4b6:	9b01      	ldr	r3, [sp, #4]
 801b4b8:	8b9b      	ldrh	r3, [r3, #28]
 801b4ba:	f8ad 300c 	strh.w	r3, [sp, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 801b4be:	9b00      	ldr	r3, [sp, #0]
 801b4c0:	881b      	ldrh	r3, [r3, #0]
 801b4c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b4c6:	d003      	beq.n	801b4d0 <I2S_FullDuplexConfig+0x4c>
 801b4c8:	9b00      	ldr	r3, [sp, #0]
 801b4ca:	881b      	ldrh	r3, [r3, #0]
 801b4cc:	2b00      	cmp	r3, #0
 801b4ce:	d104      	bne.n	801b4da <I2S_FullDuplexConfig+0x56>
  {
    tmp = I2S_Mode_SlaveRx;
 801b4d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b4d4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b4d8:	e00d      	b.n	801b4f6 <I2S_FullDuplexConfig+0x72>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 801b4da:	9b00      	ldr	r3, [sp, #0]
 801b4dc:	881b      	ldrh	r3, [r3, #0]
 801b4de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b4e2:	d004      	beq.n	801b4ee <I2S_FullDuplexConfig+0x6a>
 801b4e4:	9b00      	ldr	r3, [sp, #0]
 801b4e6:	881b      	ldrh	r3, [r3, #0]
 801b4e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b4ec:	d103      	bne.n	801b4f6 <I2S_FullDuplexConfig+0x72>
    {
      tmp = I2S_Mode_SlaveTx;
 801b4ee:	f04f 0300 	mov.w	r3, #0
 801b4f2:	f8ad 300e 	strh.w	r3, [sp, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 801b4f6:	9b00      	ldr	r3, [sp, #0]
 801b4f8:	885a      	ldrh	r2, [r3, #2]
 801b4fa:	9b00      	ldr	r3, [sp, #0]
 801b4fc:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 801b4fe:	9b00      	ldr	r3, [sp, #0]
 801b500:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 801b502:	430b      	orrs	r3, r1
 801b504:	b29b      	uxth	r3, r3
 801b506:	4313      	orrs	r3, r2
 801b508:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 801b50a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801b50e:	4313      	orrs	r3, r2
 801b510:	b29a      	uxth	r2, r3
 801b512:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801b516:	4313      	orrs	r3, r2
 801b518:	b29b      	uxth	r3, r3
 801b51a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b51e:	f8ad 300c 	strh.w	r3, [sp, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 801b522:	9b01      	ldr	r3, [sp, #4]
 801b524:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801b528:	839a      	strh	r2, [r3, #28]
}
 801b52a:	b004      	add	sp, #16
 801b52c:	4770      	bx	lr
 801b52e:	bf00      	nop

0801b530 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 801b530:	b082      	sub	sp, #8
 801b532:	9001      	str	r0, [sp, #4]
 801b534:	460b      	mov	r3, r1
 801b536:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801b53a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801b53e:	2b00      	cmp	r3, #0
 801b540:	d008      	beq.n	801b554 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 801b542:	9b01      	ldr	r3, [sp, #4]
 801b544:	889b      	ldrh	r3, [r3, #4]
 801b546:	b29b      	uxth	r3, r3
 801b548:	f043 0304 	orr.w	r3, r3, #4
 801b54c:	b29a      	uxth	r2, r3
 801b54e:	9b01      	ldr	r3, [sp, #4]
 801b550:	809a      	strh	r2, [r3, #4]
 801b552:	e007      	b.n	801b564 <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 801b554:	9b01      	ldr	r3, [sp, #4]
 801b556:	889b      	ldrh	r3, [r3, #4]
 801b558:	b29b      	uxth	r3, r3
 801b55a:	f023 0304 	bic.w	r3, r3, #4
 801b55e:	b29a      	uxth	r2, r3
 801b560:	9b01      	ldr	r3, [sp, #4]
 801b562:	809a      	strh	r2, [r3, #4]
  }
}
 801b564:	b002      	add	sp, #8
 801b566:	4770      	bx	lr

0801b568 <SPI_NSSPulseModeCmd>:
  * @param  NewState: new state of the NSS pulse management mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_NSSPulseModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 801b568:	b082      	sub	sp, #8
 801b56a:	9001      	str	r0, [sp, #4]
 801b56c:	460b      	mov	r3, r1
 801b56e:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801b572:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801b576:	2b00      	cmp	r3, #0
 801b578:	d008      	beq.n	801b58c <SPI_NSSPulseModeCmd+0x24>
  {
    /* Enable the NSS pulse management mode */
    SPIx->CR2 |= SPI_CR2_NSSP;
 801b57a:	9b01      	ldr	r3, [sp, #4]
 801b57c:	889b      	ldrh	r3, [r3, #4]
 801b57e:	b29b      	uxth	r3, r3
 801b580:	f043 0308 	orr.w	r3, r3, #8
 801b584:	b29a      	uxth	r2, r3
 801b586:	9b01      	ldr	r3, [sp, #4]
 801b588:	809a      	strh	r2, [r3, #4]
 801b58a:	e007      	b.n	801b59c <SPI_NSSPulseModeCmd+0x34>
  }
  else
  {
    /* Disable the NSS pulse management mode */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_NSSP);    
 801b58c:	9b01      	ldr	r3, [sp, #4]
 801b58e:	889b      	ldrh	r3, [r3, #4]
 801b590:	b29b      	uxth	r3, r3
 801b592:	f023 0308 	bic.w	r3, r3, #8
 801b596:	b29a      	uxth	r2, r3
 801b598:	9b01      	ldr	r3, [sp, #4]
 801b59a:	809a      	strh	r2, [r3, #4]
  }
}
 801b59c:	b002      	add	sp, #8
 801b59e:	4770      	bx	lr

0801b5a0 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 801b5a0:	b084      	sub	sp, #16
 801b5a2:	9001      	str	r0, [sp, #4]
 801b5a4:	460b      	mov	r3, r1
 801b5a6:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t spixbase = 0x00;
 801b5aa:	f04f 0300 	mov.w	r3, #0
 801b5ae:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 801b5b0:	9b01      	ldr	r3, [sp, #4]
 801b5b2:	9303      	str	r3, [sp, #12]
  spixbase += 0x0C;
 801b5b4:	9b03      	ldr	r3, [sp, #12]
 801b5b6:	f103 030c 	add.w	r3, r3, #12
 801b5ba:	9303      	str	r3, [sp, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 801b5bc:	9b03      	ldr	r3, [sp, #12]
 801b5be:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801b5c2:	701a      	strb	r2, [r3, #0]
}
 801b5c4:	b004      	add	sp, #16
 801b5c6:	4770      	bx	lr

0801b5c8 <SPI_I2S_SendData16>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
{
 801b5c8:	b082      	sub	sp, #8
 801b5ca:	9001      	str	r0, [sp, #4]
 801b5cc:	460b      	mov	r3, r1
 801b5ce:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  SPIx->DR = (uint16_t)Data;
 801b5d2:	9b01      	ldr	r3, [sp, #4]
 801b5d4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801b5d8:	819a      	strh	r2, [r3, #12]
}
 801b5da:	b002      	add	sp, #8
 801b5dc:	4770      	bx	lr
 801b5de:	bf00      	nop

0801b5e0 <SPI_ReceiveData8>:
  * @brief  Returns the most recent received data by the SPIx peripheral. 
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The value of the received data.
  */
uint8_t SPI_ReceiveData8(SPI_TypeDef* SPIx)
{
 801b5e0:	b084      	sub	sp, #16
 801b5e2:	9001      	str	r0, [sp, #4]
  uint32_t spixbase = 0x00;
 801b5e4:	f04f 0300 	mov.w	r3, #0
 801b5e8:	9303      	str	r3, [sp, #12]
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  spixbase = (uint32_t)SPIx; 
 801b5ea:	9b01      	ldr	r3, [sp, #4]
 801b5ec:	9303      	str	r3, [sp, #12]
  spixbase += 0x0C;
 801b5ee:	9b03      	ldr	r3, [sp, #12]
 801b5f0:	f103 030c 	add.w	r3, r3, #12
 801b5f4:	9303      	str	r3, [sp, #12]
  
  return *(__IO uint8_t *) spixbase;
 801b5f6:	9b03      	ldr	r3, [sp, #12]
 801b5f8:	781b      	ldrb	r3, [r3, #0]
 801b5fa:	b2db      	uxtb	r3, r3
}
 801b5fc:	4618      	mov	r0, r3
 801b5fe:	b004      	add	sp, #16
 801b600:	4770      	bx	lr
 801b602:	bf00      	nop

0801b604 <SPI_I2S_ReceiveData16>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
{  
 801b604:	b082      	sub	sp, #8
 801b606:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  return SPIx->DR;
 801b608:	9b01      	ldr	r3, [sp, #4]
 801b60a:	899b      	ldrh	r3, [r3, #12]
 801b60c:	b29b      	uxth	r3, r3
}
 801b60e:	4618      	mov	r0, r3
 801b610:	b002      	add	sp, #8
 801b612:	4770      	bx	lr

0801b614 <SPI_CRCLengthConfig>:
  *     @arg SPI_CRCLength_8b: Set CRC Calculation to 8 bits
  *     @arg SPI_CRCLength_16b: Set CRC Calculation to 16 bits
  * @retval None
  */
void SPI_CRCLengthConfig(SPI_TypeDef* SPIx, uint16_t SPI_CRCLength)
{
 801b614:	b082      	sub	sp, #8
 801b616:	9001      	str	r0, [sp, #4]
 801b618:	460b      	mov	r3, r1
 801b61a:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC_LENGTH(SPI_CRCLength));

  /* Clear CRCL bit */
  SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCL);
 801b61e:	9b01      	ldr	r3, [sp, #4]
 801b620:	881b      	ldrh	r3, [r3, #0]
 801b622:	b29b      	uxth	r3, r3
 801b624:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b628:	b29a      	uxth	r2, r3
 801b62a:	9b01      	ldr	r3, [sp, #4]
 801b62c:	801a      	strh	r2, [r3, #0]

  /* Set new CRCL bit value */
  SPIx->CR1 |= SPI_CRCLength;
 801b62e:	9b01      	ldr	r3, [sp, #4]
 801b630:	881b      	ldrh	r3, [r3, #0]
 801b632:	b29a      	uxth	r2, r3
 801b634:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b638:	4313      	orrs	r3, r2
 801b63a:	b29a      	uxth	r2, r3
 801b63c:	9b01      	ldr	r3, [sp, #4]
 801b63e:	801a      	strh	r2, [r3, #0]
}
 801b640:	b002      	add	sp, #8
 801b642:	4770      	bx	lr

0801b644 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 801b644:	b082      	sub	sp, #8
 801b646:	9001      	str	r0, [sp, #4]
 801b648:	460b      	mov	r3, r1
 801b64a:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801b64e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801b652:	2b00      	cmp	r3, #0
 801b654:	d008      	beq.n	801b668 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 801b656:	9b01      	ldr	r3, [sp, #4]
 801b658:	881b      	ldrh	r3, [r3, #0]
 801b65a:	b29b      	uxth	r3, r3
 801b65c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b660:	b29a      	uxth	r2, r3
 801b662:	9b01      	ldr	r3, [sp, #4]
 801b664:	801a      	strh	r2, [r3, #0]
 801b666:	e007      	b.n	801b678 <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 801b668:	9b01      	ldr	r3, [sp, #4]
 801b66a:	881b      	ldrh	r3, [r3, #0]
 801b66c:	b29b      	uxth	r3, r3
 801b66e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b672:	b29a      	uxth	r2, r3
 801b674:	9b01      	ldr	r3, [sp, #4]
 801b676:	801a      	strh	r2, [r3, #0]
  }
}
 801b678:	b002      	add	sp, #8
 801b67a:	4770      	bx	lr

0801b67c <SPI_TransmitCRC>:
  * @brief  Transmits the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 801b67c:	b082      	sub	sp, #8
 801b67e:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 801b680:	9b01      	ldr	r3, [sp, #4]
 801b682:	881b      	ldrh	r3, [r3, #0]
 801b684:	b29b      	uxth	r3, r3
 801b686:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801b68a:	b29a      	uxth	r2, r3
 801b68c:	9b01      	ldr	r3, [sp, #4]
 801b68e:	801a      	strh	r2, [r3, #0]
}
 801b690:	b002      	add	sp, #8
 801b692:	4770      	bx	lr

0801b694 <SPI_GetCRC>:
  *     @arg SPI_CRC_Tx: Selects Tx CRC register
  *     @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 801b694:	b084      	sub	sp, #16
 801b696:	9001      	str	r0, [sp, #4]
 801b698:	460b      	mov	r3, r1
 801b69a:	f88d 3003 	strb.w	r3, [sp, #3]
  uint16_t crcreg = 0;
 801b69e:	f04f 0300 	mov.w	r3, #0
 801b6a2:	f8ad 300e 	strh.w	r3, [sp, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));

  if (SPI_CRC != SPI_CRC_Rx)
 801b6a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801b6aa:	2b01      	cmp	r3, #1
 801b6ac:	d004      	beq.n	801b6b8 <SPI_GetCRC+0x24>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 801b6ae:	9b01      	ldr	r3, [sp, #4]
 801b6b0:	8b1b      	ldrh	r3, [r3, #24]
 801b6b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b6b6:	e003      	b.n	801b6c0 <SPI_GetCRC+0x2c>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 801b6b8:	9b01      	ldr	r3, [sp, #4]
 801b6ba:	8a9b      	ldrh	r3, [r3, #20]
 801b6bc:	f8ad 300e 	strh.w	r3, [sp, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 801b6c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
 801b6c4:	4618      	mov	r0, r3
 801b6c6:	b004      	add	sp, #16
 801b6c8:	4770      	bx	lr
 801b6ca:	bf00      	nop

0801b6cc <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 801b6cc:	b082      	sub	sp, #8
 801b6ce:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 801b6d0:	9b01      	ldr	r3, [sp, #4]
 801b6d2:	8a1b      	ldrh	r3, [r3, #16]
 801b6d4:	b29b      	uxth	r3, r3
}
 801b6d6:	4618      	mov	r0, r3
 801b6d8:	b002      	add	sp, #8
 801b6da:	4770      	bx	lr

0801b6dc <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 801b6dc:	b082      	sub	sp, #8
 801b6de:	9001      	str	r0, [sp, #4]
 801b6e0:	4613      	mov	r3, r2
 801b6e2:	460a      	mov	r2, r1
 801b6e4:	f8ad 2002 	strh.w	r2, [sp, #2]
 801b6e8:	f88d 3001 	strb.w	r3, [sp, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 801b6ec:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d009      	beq.n	801b708 <SPI_I2S_DMACmd+0x2c>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 801b6f4:	9b01      	ldr	r3, [sp, #4]
 801b6f6:	889b      	ldrh	r3, [r3, #4]
 801b6f8:	b29a      	uxth	r2, r3
 801b6fa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b6fe:	4313      	orrs	r3, r2
 801b700:	b29a      	uxth	r2, r3
 801b702:	9b01      	ldr	r3, [sp, #4]
 801b704:	809a      	strh	r2, [r3, #4]
 801b706:	e00b      	b.n	801b720 <SPI_I2S_DMACmd+0x44>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 801b708:	9b01      	ldr	r3, [sp, #4]
 801b70a:	889b      	ldrh	r3, [r3, #4]
 801b70c:	b29a      	uxth	r2, r3
 801b70e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b712:	ea6f 0303 	mvn.w	r3, r3
 801b716:	b29b      	uxth	r3, r3
 801b718:	4013      	ands	r3, r2
 801b71a:	b29a      	uxth	r2, r3
 801b71c:	9b01      	ldr	r3, [sp, #4]
 801b71e:	809a      	strh	r2, [r3, #4]
  }
}
 801b720:	b002      	add	sp, #8
 801b722:	4770      	bx	lr

0801b724 <SPI_LastDMATransferCmd>:
  *     @arg SPI_LastDMATransfer_TxOddRxOdd: RNumber of data for transmission Odd
  *          and number of data for reception Odd.
  * @retval None
  */
void SPI_LastDMATransferCmd(SPI_TypeDef* SPIx, uint16_t SPI_LastDMATransfer)
{
 801b724:	b082      	sub	sp, #8
 801b726:	9001      	str	r0, [sp, #4]
 801b728:	460b      	mov	r3, r1
 801b72a:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_LAST_DMA_TRANSFER(SPI_LastDMATransfer));

  /* Clear LDMA_TX and LDMA_RX bits */
  SPIx->CR2 &= CR2_LDMA_MASK;
 801b72e:	9b01      	ldr	r3, [sp, #4]
 801b730:	889b      	ldrh	r3, [r3, #4]
 801b732:	b29b      	uxth	r3, r3
 801b734:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 801b738:	b29a      	uxth	r2, r3
 801b73a:	9b01      	ldr	r3, [sp, #4]
 801b73c:	809a      	strh	r2, [r3, #4]

  /* Set new LDMA_TX and LDMA_RX bits value */
  SPIx->CR2 |= SPI_LastDMATransfer; 
 801b73e:	9b01      	ldr	r3, [sp, #4]
 801b740:	889b      	ldrh	r3, [r3, #4]
 801b742:	b29a      	uxth	r2, r3
 801b744:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b748:	4313      	orrs	r3, r2
 801b74a:	b29a      	uxth	r2, r3
 801b74c:	9b01      	ldr	r3, [sp, #4]
 801b74e:	809a      	strh	r2, [r3, #4]
}
 801b750:	b002      	add	sp, #8
 801b752:	4770      	bx	lr

0801b754 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 801b754:	b084      	sub	sp, #16
 801b756:	9001      	str	r0, [sp, #4]
 801b758:	4613      	mov	r3, r2
 801b75a:	460a      	mov	r2, r1
 801b75c:	f88d 2003 	strb.w	r2, [sp, #3]
 801b760:	f88d 3002 	strb.w	r3, [sp, #2]
  uint16_t itpos = 0, itmask = 0 ;
 801b764:	f04f 0300 	mov.w	r3, #0
 801b768:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b76c:	f04f 0300 	mov.w	r3, #0
 801b770:	f8ad 300c 	strh.w	r3, [sp, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 801b774:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801b778:	ea4f 1313 	mov.w	r3, r3, lsr #4
 801b77c:	b2db      	uxtb	r3, r3
 801b77e:	f8ad 300e 	strh.w	r3, [sp, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 801b782:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801b786:	f04f 0201 	mov.w	r2, #1
 801b78a:	fa02 f303 	lsl.w	r3, r2, r3
 801b78e:	f8ad 300c 	strh.w	r3, [sp, #12]

  if (NewState != DISABLE)
 801b792:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801b796:	2b00      	cmp	r3, #0
 801b798:	d009      	beq.n	801b7ae <SPI_I2S_ITConfig+0x5a>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 801b79a:	9b01      	ldr	r3, [sp, #4]
 801b79c:	889b      	ldrh	r3, [r3, #4]
 801b79e:	b29a      	uxth	r2, r3
 801b7a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801b7a4:	4313      	orrs	r3, r2
 801b7a6:	b29a      	uxth	r2, r3
 801b7a8:	9b01      	ldr	r3, [sp, #4]
 801b7aa:	809a      	strh	r2, [r3, #4]
 801b7ac:	e00b      	b.n	801b7c6 <SPI_I2S_ITConfig+0x72>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 801b7ae:	9b01      	ldr	r3, [sp, #4]
 801b7b0:	889b      	ldrh	r3, [r3, #4]
 801b7b2:	b29a      	uxth	r2, r3
 801b7b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801b7b8:	ea6f 0303 	mvn.w	r3, r3
 801b7bc:	b29b      	uxth	r3, r3
 801b7be:	4013      	ands	r3, r2
 801b7c0:	b29a      	uxth	r2, r3
 801b7c2:	9b01      	ldr	r3, [sp, #4]
 801b7c4:	809a      	strh	r2, [r3, #4]
  }
}
 801b7c6:	b004      	add	sp, #16
 801b7c8:	4770      	bx	lr
 801b7ca:	bf00      	nop

0801b7cc <SPI_GetTransmissionFIFOStatus>:
  *   - SPI_TransmissionFIFOStatus_1QuarterFull: if more than 1 quarter-full.
  *   - SPI_TransmissionFIFOStatus_HalfFull: if more than 1 half-full.
  *   - SPI_TransmissionFIFOStatus_Full: when FIFO is full.
  */
uint16_t SPI_GetTransmissionFIFOStatus(SPI_TypeDef* SPIx)
{
 801b7cc:	b082      	sub	sp, #8
 801b7ce:	9001      	str	r0, [sp, #4]
  /* Get the SPIx Transmission FIFO level bits */
  return (uint16_t)((SPIx->SR & SPI_SR_FTLVL));
 801b7d0:	9b01      	ldr	r3, [sp, #4]
 801b7d2:	891b      	ldrh	r3, [r3, #8]
 801b7d4:	b29b      	uxth	r3, r3
 801b7d6:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 801b7da:	b29b      	uxth	r3, r3
}
 801b7dc:	4618      	mov	r0, r3
 801b7de:	b002      	add	sp, #8
 801b7e0:	4770      	bx	lr
 801b7e2:	bf00      	nop

0801b7e4 <SPI_GetReceptionFIFOStatus>:
  *   - SPI_ReceptionFIFOStatus_1QuarterFull: if more than 1 quarter-full.
  *   - SPI_ReceptionFIFOStatus_HalfFull: if more than 1 half-full.
  *   - SPI_ReceptionFIFOStatus_Full: when FIFO is full.
  */
uint16_t SPI_GetReceptionFIFOStatus(SPI_TypeDef* SPIx)
{
 801b7e4:	b082      	sub	sp, #8
 801b7e6:	9001      	str	r0, [sp, #4]
  /* Get the SPIx Reception FIFO level bits */
  return (uint16_t)((SPIx->SR & SPI_SR_FRLVL));
 801b7e8:	9b01      	ldr	r3, [sp, #4]
 801b7ea:	891b      	ldrh	r3, [r3, #8]
 801b7ec:	b29b      	uxth	r3, r3
 801b7ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b7f2:	b29b      	uxth	r3, r3
}
 801b7f4:	4618      	mov	r0, r3
 801b7f6:	b002      	add	sp, #8
 801b7f8:	4770      	bx	lr
 801b7fa:	bf00      	nop

0801b7fc <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 801b7fc:	b084      	sub	sp, #16
 801b7fe:	9001      	str	r0, [sp, #4]
 801b800:	460b      	mov	r3, r1
 801b802:	f8ad 3002 	strh.w	r3, [sp, #2]
  FlagStatus bitstatus = RESET;
 801b806:	f04f 0300 	mov.w	r3, #0
 801b80a:	f88d 300f 	strb.w	r3, [sp, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 801b80e:	9b01      	ldr	r3, [sp, #4]
 801b810:	891b      	ldrh	r3, [r3, #8]
 801b812:	b29a      	uxth	r2, r3
 801b814:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b818:	4013      	ands	r3, r2
 801b81a:	b29b      	uxth	r3, r3
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d004      	beq.n	801b82a <SPI_I2S_GetFlagStatus+0x2e>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 801b820:	f04f 0301 	mov.w	r3, #1
 801b824:	f88d 300f 	strb.w	r3, [sp, #15]
 801b828:	e003      	b.n	801b832 <SPI_I2S_GetFlagStatus+0x36>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 801b82a:	f04f 0300 	mov.w	r3, #0
 801b82e:	f88d 300f 	strb.w	r3, [sp, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 801b832:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 801b836:	4618      	mov	r0, r3
 801b838:	b004      	add	sp, #16
 801b83a:	4770      	bx	lr

0801b83c <SPI_I2S_ClearFlag>:
  *       operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
  *       write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 801b83c:	b082      	sub	sp, #8
 801b83e:	9001      	str	r0, [sp, #4]
 801b840:	460b      	mov	r3, r1
 801b842:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_CLEAR_FLAG(SPI_I2S_FLAG));

  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 801b846:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b84a:	ea6f 0303 	mvn.w	r3, r3
 801b84e:	b29a      	uxth	r2, r3
 801b850:	9b01      	ldr	r3, [sp, #4]
 801b852:	811a      	strh	r2, [r3, #8]
}
 801b854:	b002      	add	sp, #8
 801b856:	4770      	bx	lr

0801b858 <SPI_I2S_GetITStatus>:
  *     @arg I2S_IT_UDR: Underrun interrupt.  
  *     @arg SPI_I2S_IT_FRE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 801b858:	b084      	sub	sp, #16
 801b85a:	9001      	str	r0, [sp, #4]
 801b85c:	460b      	mov	r3, r1
 801b85e:	f88d 3003 	strb.w	r3, [sp, #3]
  ITStatus bitstatus = RESET;
 801b862:	f04f 0300 	mov.w	r3, #0
 801b866:	f88d 300f 	strb.w	r3, [sp, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 801b86a:	f04f 0300 	mov.w	r3, #0
 801b86e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b872:	f04f 0300 	mov.w	r3, #0
 801b876:	f8ad 300a 	strh.w	r3, [sp, #10]
 801b87a:	f04f 0300 	mov.w	r3, #0
 801b87e:	f8ad 3008 	strh.w	r3, [sp, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 801b882:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801b886:	f003 030f 	and.w	r3, r3, #15
 801b88a:	f04f 0201 	mov.w	r2, #1
 801b88e:	fa02 f303 	lsl.w	r3, r2, r3
 801b892:	f8ad 300c 	strh.w	r3, [sp, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 801b896:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801b89a:	ea4f 1313 	mov.w	r3, r3, lsr #4
 801b89e:	b2db      	uxtb	r3, r3
 801b8a0:	f8ad 300a 	strh.w	r3, [sp, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 801b8a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b8a8:	f04f 0201 	mov.w	r2, #1
 801b8ac:	fa02 f303 	lsl.w	r3, r2, r3
 801b8b0:	f8ad 300a 	strh.w	r3, [sp, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 801b8b4:	9b01      	ldr	r3, [sp, #4]
 801b8b6:	889b      	ldrh	r3, [r3, #4]
 801b8b8:	b29a      	uxth	r2, r3
 801b8ba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b8be:	4013      	ands	r3, r2
 801b8c0:	f8ad 3008 	strh.w	r3, [sp, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 801b8c4:	9b01      	ldr	r3, [sp, #4]
 801b8c6:	891b      	ldrh	r3, [r3, #8]
 801b8c8:	b29a      	uxth	r2, r3
 801b8ca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801b8ce:	4013      	ands	r3, r2
 801b8d0:	b29b      	uxth	r3, r3
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d008      	beq.n	801b8e8 <SPI_I2S_GetITStatus+0x90>
 801b8d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d004      	beq.n	801b8e8 <SPI_I2S_GetITStatus+0x90>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 801b8de:	f04f 0301 	mov.w	r3, #1
 801b8e2:	f88d 300f 	strb.w	r3, [sp, #15]
 801b8e6:	e003      	b.n	801b8f0 <SPI_I2S_GetITStatus+0x98>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 801b8e8:	f04f 0300 	mov.w	r3, #0
 801b8ec:	f88d 300f 	strb.w	r3, [sp, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 801b8f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 801b8f4:	4618      	mov	r0, r3
 801b8f6:	b004      	add	sp, #16
 801b8f8:	4770      	bx	lr
 801b8fa:	bf00      	nop

0801b8fc <TIM_DeInit>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 801b8fc:	b500      	push	{lr}
 801b8fe:	b083      	sub	sp, #12
 801b900:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 801b902:	9a01      	ldr	r2, [sp, #4]
 801b904:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801b908:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801b90c:	429a      	cmp	r2, r3
 801b90e:	d10c      	bne.n	801b92a <TIM_DeInit+0x2e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 801b910:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801b914:	f04f 0101 	mov.w	r1, #1
 801b918:	f7ff f9ea 	bl	801acf0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 801b91c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801b920:	f04f 0100 	mov.w	r1, #0
 801b924:	f7ff f9e4 	bl	801acf0 <RCC_APB2PeriphResetCmd>
 801b928:	e0af      	b.n	801ba8a <TIM_DeInit+0x18e>
  } 
  else if (TIMx == TIM2) 
 801b92a:	9b01      	ldr	r3, [sp, #4]
 801b92c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b930:	d10c      	bne.n	801b94c <TIM_DeInit+0x50>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 801b932:	f04f 0001 	mov.w	r0, #1
 801b936:	f04f 0101 	mov.w	r1, #1
 801b93a:	f7ff f9ff 	bl	801ad3c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 801b93e:	f04f 0001 	mov.w	r0, #1
 801b942:	f04f 0100 	mov.w	r1, #0
 801b946:	f7ff f9f9 	bl	801ad3c <RCC_APB1PeriphResetCmd>
 801b94a:	e09e      	b.n	801ba8a <TIM_DeInit+0x18e>
  }  
  else if (TIMx == TIM3)
 801b94c:	9a01      	ldr	r2, [sp, #4]
 801b94e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b952:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801b956:	429a      	cmp	r2, r3
 801b958:	d10c      	bne.n	801b974 <TIM_DeInit+0x78>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 801b95a:	f04f 0002 	mov.w	r0, #2
 801b95e:	f04f 0101 	mov.w	r1, #1
 801b962:	f7ff f9eb 	bl	801ad3c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 801b966:	f04f 0002 	mov.w	r0, #2
 801b96a:	f04f 0100 	mov.w	r1, #0
 801b96e:	f7ff f9e5 	bl	801ad3c <RCC_APB1PeriphResetCmd>
 801b972:	e08a      	b.n	801ba8a <TIM_DeInit+0x18e>
  }  
  else if (TIMx == TIM4)
 801b974:	9a01      	ldr	r2, [sp, #4]
 801b976:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b97a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801b97e:	429a      	cmp	r2, r3
 801b980:	d10c      	bne.n	801b99c <TIM_DeInit+0xa0>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 801b982:	f04f 0004 	mov.w	r0, #4
 801b986:	f04f 0101 	mov.w	r1, #1
 801b98a:	f7ff f9d7 	bl	801ad3c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 801b98e:	f04f 0004 	mov.w	r0, #4
 801b992:	f04f 0100 	mov.w	r1, #0
 801b996:	f7ff f9d1 	bl	801ad3c <RCC_APB1PeriphResetCmd>
 801b99a:	e076      	b.n	801ba8a <TIM_DeInit+0x18e>
  }   
  else if (TIMx == TIM6)  
 801b99c:	9a01      	ldr	r2, [sp, #4]
 801b99e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b9a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801b9a6:	429a      	cmp	r2, r3
 801b9a8:	d10c      	bne.n	801b9c4 <TIM_DeInit+0xc8>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 801b9aa:	f04f 0010 	mov.w	r0, #16
 801b9ae:	f04f 0101 	mov.w	r1, #1
 801b9b2:	f7ff f9c3 	bl	801ad3c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 801b9b6:	f04f 0010 	mov.w	r0, #16
 801b9ba:	f04f 0100 	mov.w	r1, #0
 801b9be:	f7ff f9bd 	bl	801ad3c <RCC_APB1PeriphResetCmd>
 801b9c2:	e062      	b.n	801ba8a <TIM_DeInit+0x18e>
  }  
  else if (TIMx == TIM7)
 801b9c4:	9a01      	ldr	r2, [sp, #4]
 801b9c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801b9ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801b9ce:	429a      	cmp	r2, r3
 801b9d0:	d10c      	bne.n	801b9ec <TIM_DeInit+0xf0>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 801b9d2:	f04f 0020 	mov.w	r0, #32
 801b9d6:	f04f 0101 	mov.w	r1, #1
 801b9da:	f7ff f9af 	bl	801ad3c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 801b9de:	f04f 0020 	mov.w	r0, #32
 801b9e2:	f04f 0100 	mov.w	r1, #0
 801b9e6:	f7ff f9a9 	bl	801ad3c <RCC_APB1PeriphResetCmd>
 801b9ea:	e04e      	b.n	801ba8a <TIM_DeInit+0x18e>
  }  
  else if (TIMx == TIM8)
 801b9ec:	9a01      	ldr	r2, [sp, #4]
 801b9ee:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 801b9f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801b9f6:	429a      	cmp	r2, r3
 801b9f8:	d10c      	bne.n	801ba14 <TIM_DeInit+0x118>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 801b9fa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801b9fe:	f04f 0101 	mov.w	r1, #1
 801ba02:	f7ff f975 	bl	801acf0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 801ba06:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801ba0a:	f04f 0100 	mov.w	r1, #0
 801ba0e:	f7ff f96f 	bl	801acf0 <RCC_APB2PeriphResetCmd>
 801ba12:	e03a      	b.n	801ba8a <TIM_DeInit+0x18e>
  }    
  else if (TIMx == TIM15)
 801ba14:	9a01      	ldr	r2, [sp, #4]
 801ba16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801ba1a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801ba1e:	429a      	cmp	r2, r3
 801ba20:	d10c      	bne.n	801ba3c <TIM_DeInit+0x140>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 801ba22:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 801ba26:	f04f 0101 	mov.w	r1, #1
 801ba2a:	f7ff f961 	bl	801acf0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);  
 801ba2e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 801ba32:	f04f 0100 	mov.w	r1, #0
 801ba36:	f7ff f95b 	bl	801acf0 <RCC_APB2PeriphResetCmd>
 801ba3a:	e026      	b.n	801ba8a <TIM_DeInit+0x18e>
  }  
  else if (TIMx == TIM16) 
 801ba3c:	9a01      	ldr	r2, [sp, #4]
 801ba3e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 801ba42:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801ba46:	429a      	cmp	r2, r3
 801ba48:	d10c      	bne.n	801ba64 <TIM_DeInit+0x168>
  {       
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 801ba4a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 801ba4e:	f04f 0101 	mov.w	r1, #1
 801ba52:	f7ff f94d 	bl	801acf0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);  
 801ba56:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 801ba5a:	f04f 0100 	mov.w	r1, #0
 801ba5e:	f7ff f947 	bl	801acf0 <RCC_APB2PeriphResetCmd>
 801ba62:	e012      	b.n	801ba8a <TIM_DeInit+0x18e>
  }  
  else
  { 
    if (TIMx == TIM17) 
 801ba64:	9a01      	ldr	r2, [sp, #4]
 801ba66:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 801ba6a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801ba6e:	429a      	cmp	r2, r3
 801ba70:	d10b      	bne.n	801ba8a <TIM_DeInit+0x18e>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 801ba72:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 801ba76:	f04f 0101 	mov.w	r1, #1
 801ba7a:	f7ff f939 	bl	801acf0 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
 801ba7e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 801ba82:	f04f 0100 	mov.w	r1, #0
 801ba86:	f7ff f933 	bl	801acf0 <RCC_APB2PeriphResetCmd>
    }   
  }
}
 801ba8a:	b003      	add	sp, #12
 801ba8c:	bd00      	pop	{pc}
 801ba8e:	bf00      	nop

0801ba90 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 801ba90:	b084      	sub	sp, #16
 801ba92:	9001      	str	r0, [sp, #4]
 801ba94:	9100      	str	r1, [sp, #0]
  uint16_t tmpcr1 = 0;
 801ba96:	f04f 0300 	mov.w	r3, #0
 801ba9a:	f8ad 300e 	strh.w	r3, [sp, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 801ba9e:	9b01      	ldr	r3, [sp, #4]
 801baa0:	881b      	ldrh	r3, [r3, #0]
 801baa2:	f8ad 300e 	strh.w	r3, [sp, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 801baa6:	9a01      	ldr	r2, [sp, #4]
 801baa8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801baac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801bab0:	429a      	cmp	r2, r3
 801bab2:	d018      	beq.n	801bae6 <TIM_TimeBaseInit+0x56>
 801bab4:	9a01      	ldr	r2, [sp, #4]
 801bab6:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 801baba:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801babe:	429a      	cmp	r2, r3
 801bac0:	d011      	beq.n	801bae6 <TIM_TimeBaseInit+0x56>
 801bac2:	9b01      	ldr	r3, [sp, #4]
 801bac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801bac8:	d00d      	beq.n	801bae6 <TIM_TimeBaseInit+0x56>
 801baca:	9a01      	ldr	r2, [sp, #4]
 801bacc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bad0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801bad4:	429a      	cmp	r2, r3
 801bad6:	d006      	beq.n	801bae6 <TIM_TimeBaseInit+0x56>
     (TIMx == TIM3)|| (TIMx == TIM4)) 
 801bad8:	9a01      	ldr	r2, [sp, #4]
 801bada:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801bade:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801bae2:	429a      	cmp	r2, r3
 801bae4:	d10c      	bne.n	801bb00 <TIM_TimeBaseInit+0x70>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 801bae6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801baea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801baee:	f8ad 300e 	strh.w	r3, [sp, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 801baf2:	9b00      	ldr	r3, [sp, #0]
 801baf4:	885a      	ldrh	r2, [r3, #2]
 801baf6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801bafa:	4313      	orrs	r3, r2
 801bafc:	f8ad 300e 	strh.w	r3, [sp, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 801bb00:	9a01      	ldr	r2, [sp, #4]
 801bb02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801bb06:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801bb0a:	429a      	cmp	r2, r3
 801bb0c:	d013      	beq.n	801bb36 <TIM_TimeBaseInit+0xa6>
 801bb0e:	9a01      	ldr	r2, [sp, #4]
 801bb10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801bb14:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801bb18:	429a      	cmp	r2, r3
 801bb1a:	d00c      	beq.n	801bb36 <TIM_TimeBaseInit+0xa6>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 801bb1c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801bb20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801bb24:	f8ad 300e 	strh.w	r3, [sp, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 801bb28:	9b00      	ldr	r3, [sp, #0]
 801bb2a:	891a      	ldrh	r2, [r3, #8]
 801bb2c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801bb30:	4313      	orrs	r3, r2
 801bb32:	f8ad 300e 	strh.w	r3, [sp, #14]
  }

  TIMx->CR1 = tmpcr1;
 801bb36:	9b01      	ldr	r3, [sp, #4]
 801bb38:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801bb3c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 801bb3e:	9b00      	ldr	r3, [sp, #0]
 801bb40:	685a      	ldr	r2, [r3, #4]
 801bb42:	9b01      	ldr	r3, [sp, #4]
 801bb44:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 801bb46:	9b00      	ldr	r3, [sp, #0]
 801bb48:	881a      	ldrh	r2, [r3, #0]
 801bb4a:	9b01      	ldr	r3, [sp, #4]
 801bb4c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 801bb4e:	9a01      	ldr	r2, [sp, #4]
 801bb50:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801bb54:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801bb58:	429a      	cmp	r2, r3
 801bb5a:	d01b      	beq.n	801bb94 <TIM_TimeBaseInit+0x104>
 801bb5c:	9a01      	ldr	r2, [sp, #4]
 801bb5e:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 801bb62:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801bb66:	429a      	cmp	r2, r3
 801bb68:	d014      	beq.n	801bb94 <TIM_TimeBaseInit+0x104>
 801bb6a:	9a01      	ldr	r2, [sp, #4]
 801bb6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801bb70:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801bb74:	429a      	cmp	r2, r3
 801bb76:	d00d      	beq.n	801bb94 <TIM_TimeBaseInit+0x104>
 801bb78:	9a01      	ldr	r2, [sp, #4]
 801bb7a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 801bb7e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801bb82:	429a      	cmp	r2, r3
 801bb84:	d006      	beq.n	801bb94 <TIM_TimeBaseInit+0x104>
      (TIMx == TIM16) || (TIMx == TIM17))  
 801bb86:	9a01      	ldr	r2, [sp, #4]
 801bb88:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 801bb8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801bb90:	429a      	cmp	r2, r3
 801bb92:	d104      	bne.n	801bb9e <TIM_TimeBaseInit+0x10e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 801bb94:	9b00      	ldr	r3, [sp, #0]
 801bb96:	7a9b      	ldrb	r3, [r3, #10]
 801bb98:	461a      	mov	r2, r3
 801bb9a:	9b01      	ldr	r3, [sp, #4]
 801bb9c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 801bb9e:	9b01      	ldr	r3, [sp, #4]
 801bba0:	f04f 0201 	mov.w	r2, #1
 801bba4:	615a      	str	r2, [r3, #20]
}
 801bba6:	b004      	add	sp, #16
 801bba8:	4770      	bx	lr
 801bbaa:	bf00      	nop

0801bbac <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 801bbac:	b082      	sub	sp, #8
 801bbae:	9001      	str	r0, [sp, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 801bbb0:	9b01      	ldr	r3, [sp, #4]
 801bbb2:	f04f 32ff 	mov.w	r2, #4294967295
 801bbb6:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 801bbb8:	9b01      	ldr	r3, [sp, #4]
 801bbba:	f04f 0200 	mov.w	r2, #0
 801bbbe:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 801bbc0:	9b01      	ldr	r3, [sp, #4]
 801bbc2:	f04f 0200 	mov.w	r2, #0
 801bbc6:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 801bbc8:	9b01      	ldr	r3, [sp, #4]
 801bbca:	f04f 0200 	mov.w	r2, #0
 801bbce:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 801bbd0:	9b01      	ldr	r3, [sp, #4]
 801bbd2:	f04f 0200 	mov.w	r2, #0
 801bbd6:	729a      	strb	r2, [r3, #10]
}
 801bbd8:	b002      	add	sp, #8
 801bbda:	4770      	bx	lr

0801bbdc <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 801bbdc:	b082      	sub	sp, #8
 801bbde:	9001      	str	r0, [sp, #4]
 801bbe0:	4613      	mov	r3, r2
 801bbe2:	460a      	mov	r2, r1
 801bbe4:	f8ad 2002 	strh.w	r2, [sp, #2]
 801bbe8:	f8ad 3000 	strh.w	r3, [sp]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 801bbec:	9b01      	ldr	r3, [sp, #4]
 801bbee:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801bbf2:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 801bbf4:	f8bd 2000 	ldrh.w	r2, [sp]
 801bbf8:	9b01      	ldr	r3, [sp, #4]
 801bbfa:	615a      	str	r2, [r3, #20]
}
 801bbfc:	b002      	add	sp, #8
 801bbfe:	4770      	bx	lr

0801bc00 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 801bc00:	b084      	sub	sp, #16
 801bc02:	9001      	str	r0, [sp, #4]
 801bc04:	460b      	mov	r3, r1
 801bc06:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint16_t tmpcr1 = 0;
 801bc0a:	f04f 0300 	mov.w	r3, #0
 801bc0e:	f8ad 300e 	strh.w	r3, [sp, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 801bc12:	9b01      	ldr	r3, [sp, #4]
 801bc14:	881b      	ldrh	r3, [r3, #0]
 801bc16:	f8ad 300e 	strh.w	r3, [sp, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 801bc1a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801bc1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bc22:	f8ad 300e 	strh.w	r3, [sp, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 801bc26:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801bc2a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bc2e:	4313      	orrs	r3, r2
 801bc30:	f8ad 300e 	strh.w	r3, [sp, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 801bc34:	9b01      	ldr	r3, [sp, #4]
 801bc36:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801bc3a:	801a      	strh	r2, [r3, #0]
}
 801bc3c:	b004      	add	sp, #16
 801bc3e:	4770      	bx	lr

0801bc40 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 801bc40:	b082      	sub	sp, #8
 801bc42:	9001      	str	r0, [sp, #4]
 801bc44:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 801bc46:	9b01      	ldr	r3, [sp, #4]
 801bc48:	9a00      	ldr	r2, [sp, #0]
 801bc4a:	625a      	str	r2, [r3, #36]	; 0x24
}
 801bc4c:	b002      	add	sp, #8
 801bc4e:	4770      	bx	lr

0801bc50 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 801bc50:	b082      	sub	sp, #8
 801bc52:	9001      	str	r0, [sp, #4]
 801bc54:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 801bc56:	9b01      	ldr	r3, [sp, #4]
 801bc58:	9a00      	ldr	r2, [sp, #0]
 801bc5a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801bc5c:	b002      	add	sp, #8
 801bc5e:	4770      	bx	lr

0801bc60 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 801bc60:	b082      	sub	sp, #8
 801bc62:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 801bc64:	9b01      	ldr	r3, [sp, #4]
 801bc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 801bc68:	4618      	mov	r0, r3
 801bc6a:	b002      	add	sp, #8
 801bc6c:	4770      	bx	lr
 801bc6e:	bf00      	nop

0801bc70 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 801bc70:	b082      	sub	sp, #8
 801bc72:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 801bc74:	9b01      	ldr	r3, [sp, #4]
 801bc76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bc78:	b29b      	uxth	r3, r3
}
 801bc7a:	4618      	mov	r0, r3
 801bc7c:	b002      	add	sp, #8
 801bc7e:	4770      	bx	lr

0801bc80 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801bc80:	b082      	sub	sp, #8
 801bc82:	9001      	str	r0, [sp, #4]
 801bc84:	460b      	mov	r3, r1
 801bc86:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801bc8a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d008      	beq.n	801bca4 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 801bc92:	9b01      	ldr	r3, [sp, #4]
 801bc94:	881b      	ldrh	r3, [r3, #0]
 801bc96:	b29b      	uxth	r3, r3
 801bc98:	f043 0302 	orr.w	r3, r3, #2
 801bc9c:	b29a      	uxth	r2, r3
 801bc9e:	9b01      	ldr	r3, [sp, #4]
 801bca0:	801a      	strh	r2, [r3, #0]
 801bca2:	e007      	b.n	801bcb4 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 801bca4:	9b01      	ldr	r3, [sp, #4]
 801bca6:	881b      	ldrh	r3, [r3, #0]
 801bca8:	b29b      	uxth	r3, r3
 801bcaa:	f023 0302 	bic.w	r3, r3, #2
 801bcae:	b29a      	uxth	r2, r3
 801bcb0:	9b01      	ldr	r3, [sp, #4]
 801bcb2:	801a      	strh	r2, [r3, #0]
  }
}
 801bcb4:	b002      	add	sp, #8
 801bcb6:	4770      	bx	lr

0801bcb8 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 801bcb8:	b082      	sub	sp, #8
 801bcba:	9001      	str	r0, [sp, #4]
 801bcbc:	460b      	mov	r3, r1
 801bcbe:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 801bcc2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d008      	beq.n	801bcdc <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 801bcca:	9b01      	ldr	r3, [sp, #4]
 801bccc:	881b      	ldrh	r3, [r3, #0]
 801bcce:	b29b      	uxth	r3, r3
 801bcd0:	f043 0304 	orr.w	r3, r3, #4
 801bcd4:	b29a      	uxth	r2, r3
 801bcd6:	9b01      	ldr	r3, [sp, #4]
 801bcd8:	801a      	strh	r2, [r3, #0]
 801bcda:	e007      	b.n	801bcec <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 801bcdc:	9b01      	ldr	r3, [sp, #4]
 801bcde:	881b      	ldrh	r3, [r3, #0]
 801bce0:	b29b      	uxth	r3, r3
 801bce2:	f023 0304 	bic.w	r3, r3, #4
 801bce6:	b29a      	uxth	r2, r3
 801bce8:	9b01      	ldr	r3, [sp, #4]
 801bcea:	801a      	strh	r2, [r3, #0]
  }
}
 801bcec:	b002      	add	sp, #8
 801bcee:	4770      	bx	lr

0801bcf0 <TIM_UIFRemap>:
  * @param  NewState: new state of the UIFREMAP bit.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UIFRemap(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801bcf0:	b082      	sub	sp, #8
 801bcf2:	9001      	str	r0, [sp, #4]
 801bcf4:	460b      	mov	r3, r1
 801bcf6:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801bcfa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801bcfe:	2b00      	cmp	r3, #0
 801bd00:	d008      	beq.n	801bd14 <TIM_UIFRemap+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_UIFREMAP;
 801bd02:	9b01      	ldr	r3, [sp, #4]
 801bd04:	881b      	ldrh	r3, [r3, #0]
 801bd06:	b29b      	uxth	r3, r3
 801bd08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801bd0c:	b29a      	uxth	r2, r3
 801bd0e:	9b01      	ldr	r3, [sp, #4]
 801bd10:	801a      	strh	r2, [r3, #0]
 801bd12:	e007      	b.n	801bd24 <TIM_UIFRemap+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UIFREMAP;
 801bd14:	9b01      	ldr	r3, [sp, #4]
 801bd16:	881b      	ldrh	r3, [r3, #0]
 801bd18:	b29b      	uxth	r3, r3
 801bd1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bd1e:	b29a      	uxth	r2, r3
 801bd20:	9b01      	ldr	r3, [sp, #4]
 801bd22:	801a      	strh	r2, [r3, #0]
  }  
}
 801bd24:	b002      	add	sp, #8
 801bd26:	4770      	bx	lr

0801bd28 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801bd28:	b082      	sub	sp, #8
 801bd2a:	9001      	str	r0, [sp, #4]
 801bd2c:	460b      	mov	r3, r1
 801bd2e:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801bd32:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	d008      	beq.n	801bd4c <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 801bd3a:	9b01      	ldr	r3, [sp, #4]
 801bd3c:	881b      	ldrh	r3, [r3, #0]
 801bd3e:	b29b      	uxth	r3, r3
 801bd40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bd44:	b29a      	uxth	r2, r3
 801bd46:	9b01      	ldr	r3, [sp, #4]
 801bd48:	801a      	strh	r2, [r3, #0]
 801bd4a:	e007      	b.n	801bd5c <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 801bd4c:	9b01      	ldr	r3, [sp, #4]
 801bd4e:	881b      	ldrh	r3, [r3, #0]
 801bd50:	b29b      	uxth	r3, r3
 801bd52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801bd56:	b29a      	uxth	r2, r3
 801bd58:	9b01      	ldr	r3, [sp, #4]
 801bd5a:	801a      	strh	r2, [r3, #0]
  }
}
 801bd5c:	b002      	add	sp, #8
 801bd5e:	4770      	bx	lr

0801bd60 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 801bd60:	b082      	sub	sp, #8
 801bd62:	9001      	str	r0, [sp, #4]
 801bd64:	460b      	mov	r3, r1
 801bd66:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 801bd6a:	9b01      	ldr	r3, [sp, #4]
 801bd6c:	881b      	ldrh	r3, [r3, #0]
 801bd6e:	b29b      	uxth	r3, r3
 801bd70:	f023 0308 	bic.w	r3, r3, #8
 801bd74:	b29a      	uxth	r2, r3
 801bd76:	9b01      	ldr	r3, [sp, #4]
 801bd78:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 801bd7a:	9b01      	ldr	r3, [sp, #4]
 801bd7c:	881b      	ldrh	r3, [r3, #0]
 801bd7e:	b29a      	uxth	r2, r3
 801bd80:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bd84:	4313      	orrs	r3, r2
 801bd86:	b29a      	uxth	r2, r3
 801bd88:	9b01      	ldr	r3, [sp, #4]
 801bd8a:	801a      	strh	r2, [r3, #0]
}
 801bd8c:	b002      	add	sp, #8
 801bd8e:	4770      	bx	lr

0801bd90 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 801bd90:	b082      	sub	sp, #8
 801bd92:	9001      	str	r0, [sp, #4]
 801bd94:	460b      	mov	r3, r1
 801bd96:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 801bd9a:	9b01      	ldr	r3, [sp, #4]
 801bd9c:	881b      	ldrh	r3, [r3, #0]
 801bd9e:	b29b      	uxth	r3, r3
 801bda0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801bda4:	b29a      	uxth	r2, r3
 801bda6:	9b01      	ldr	r3, [sp, #4]
 801bda8:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 801bdaa:	9b01      	ldr	r3, [sp, #4]
 801bdac:	881b      	ldrh	r3, [r3, #0]
 801bdae:	b29a      	uxth	r2, r3
 801bdb0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bdb4:	4313      	orrs	r3, r2
 801bdb6:	b29a      	uxth	r2, r3
 801bdb8:	9b01      	ldr	r3, [sp, #4]
 801bdba:	801a      	strh	r2, [r3, #0]
}
 801bdbc:	b002      	add	sp, #8
 801bdbe:	4770      	bx	lr

0801bdc0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801bdc0:	b082      	sub	sp, #8
 801bdc2:	9001      	str	r0, [sp, #4]
 801bdc4:	460b      	mov	r3, r1
 801bdc6:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801bdca:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d008      	beq.n	801bde4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 801bdd2:	9b01      	ldr	r3, [sp, #4]
 801bdd4:	881b      	ldrh	r3, [r3, #0]
 801bdd6:	b29b      	uxth	r3, r3
 801bdd8:	f043 0301 	orr.w	r3, r3, #1
 801bddc:	b29a      	uxth	r2, r3
 801bdde:	9b01      	ldr	r3, [sp, #4]
 801bde0:	801a      	strh	r2, [r3, #0]
 801bde2:	e007      	b.n	801bdf4 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 801bde4:	9b01      	ldr	r3, [sp, #4]
 801bde6:	881b      	ldrh	r3, [r3, #0]
 801bde8:	b29b      	uxth	r3, r3
 801bdea:	f023 0301 	bic.w	r3, r3, #1
 801bdee:	b29a      	uxth	r2, r3
 801bdf0:	9b01      	ldr	r3, [sp, #4]
 801bdf2:	801a      	strh	r2, [r3, #0]
  }
}
 801bdf4:	b002      	add	sp, #8
 801bdf6:	4770      	bx	lr

0801bdf8 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801bdf8:	b086      	sub	sp, #24
 801bdfa:	9001      	str	r0, [sp, #4]
 801bdfc:	9100      	str	r1, [sp, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 801bdfe:	f04f 0300 	mov.w	r3, #0
 801be02:	9303      	str	r3, [sp, #12]
 801be04:	f04f 0300 	mov.w	r3, #0
 801be08:	9305      	str	r3, [sp, #20]
 801be0a:	f04f 0300 	mov.w	r3, #0
 801be0e:	9304      	str	r3, [sp, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 801be10:	9b01      	ldr	r3, [sp, #4]
 801be12:	6a1b      	ldr	r3, [r3, #32]
 801be14:	f023 0201 	bic.w	r2, r3, #1
 801be18:	9b01      	ldr	r3, [sp, #4]
 801be1a:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801be1c:	9b01      	ldr	r3, [sp, #4]
 801be1e:	6a1b      	ldr	r3, [r3, #32]
 801be20:	9305      	str	r3, [sp, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801be22:	9b01      	ldr	r3, [sp, #4]
 801be24:	685b      	ldr	r3, [r3, #4]
 801be26:	9304      	str	r3, [sp, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801be28:	9b01      	ldr	r3, [sp, #4]
 801be2a:	699b      	ldr	r3, [r3, #24]
 801be2c:	9303      	str	r3, [sp, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
 801be2e:	9b03      	ldr	r3, [sp, #12]
 801be30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801be34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801be38:	9303      	str	r3, [sp, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
 801be3a:	9b03      	ldr	r3, [sp, #12]
 801be3c:	f023 0303 	bic.w	r3, r3, #3
 801be40:	9303      	str	r3, [sp, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 801be42:	9b00      	ldr	r3, [sp, #0]
 801be44:	681b      	ldr	r3, [r3, #0]
 801be46:	9a03      	ldr	r2, [sp, #12]
 801be48:	4313      	orrs	r3, r2
 801be4a:	9303      	str	r3, [sp, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
 801be4c:	9b05      	ldr	r3, [sp, #20]
 801be4e:	f023 0302 	bic.w	r3, r3, #2
 801be52:	9305      	str	r3, [sp, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 801be54:	9b00      	ldr	r3, [sp, #0]
 801be56:	899b      	ldrh	r3, [r3, #12]
 801be58:	9a05      	ldr	r2, [sp, #20]
 801be5a:	4313      	orrs	r3, r2
 801be5c:	9305      	str	r3, [sp, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 801be5e:	9b00      	ldr	r3, [sp, #0]
 801be60:	889b      	ldrh	r3, [r3, #4]
 801be62:	9a05      	ldr	r2, [sp, #20]
 801be64:	4313      	orrs	r3, r2
 801be66:	9305      	str	r3, [sp, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 801be68:	9a01      	ldr	r2, [sp, #4]
 801be6a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801be6e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801be72:	429a      	cmp	r2, r3
 801be74:	d01b      	beq.n	801beae <TIM_OC1Init+0xb6>
 801be76:	9a01      	ldr	r2, [sp, #4]
 801be78:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 801be7c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801be80:	429a      	cmp	r2, r3
 801be82:	d014      	beq.n	801beae <TIM_OC1Init+0xb6>
 801be84:	9a01      	ldr	r2, [sp, #4]
 801be86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801be8a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801be8e:	429a      	cmp	r2, r3
 801be90:	d00d      	beq.n	801beae <TIM_OC1Init+0xb6>
 801be92:	9a01      	ldr	r2, [sp, #4]
 801be94:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 801be98:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801be9c:	429a      	cmp	r2, r3
 801be9e:	d006      	beq.n	801beae <TIM_OC1Init+0xb6>
 801bea0:	9a01      	ldr	r2, [sp, #4]
 801bea2:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 801bea6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801beaa:	429a      	cmp	r2, r3
 801beac:	d123      	bne.n	801bef6 <TIM_OC1Init+0xfe>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 801beae:	9b05      	ldr	r3, [sp, #20]
 801beb0:	f023 0308 	bic.w	r3, r3, #8
 801beb4:	9305      	str	r3, [sp, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 801beb6:	9b00      	ldr	r3, [sp, #0]
 801beb8:	89db      	ldrh	r3, [r3, #14]
 801beba:	9a05      	ldr	r2, [sp, #20]
 801bebc:	4313      	orrs	r3, r2
 801bebe:	9305      	str	r3, [sp, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NE;
 801bec0:	9b05      	ldr	r3, [sp, #20]
 801bec2:	f023 0304 	bic.w	r3, r3, #4
 801bec6:	9305      	str	r3, [sp, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 801bec8:	9b00      	ldr	r3, [sp, #0]
 801beca:	88db      	ldrh	r3, [r3, #6]
 801becc:	9a05      	ldr	r2, [sp, #20]
 801bece:	4313      	orrs	r3, r2
 801bed0:	9305      	str	r3, [sp, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
 801bed2:	9b04      	ldr	r3, [sp, #16]
 801bed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bed8:	9304      	str	r3, [sp, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
 801beda:	9b04      	ldr	r3, [sp, #16]
 801bedc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801bee0:	9304      	str	r3, [sp, #16]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 801bee2:	9b00      	ldr	r3, [sp, #0]
 801bee4:	8a1b      	ldrh	r3, [r3, #16]
 801bee6:	9a04      	ldr	r2, [sp, #16]
 801bee8:	4313      	orrs	r3, r2
 801beea:	9304      	str	r3, [sp, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 801beec:	9b00      	ldr	r3, [sp, #0]
 801beee:	8a5b      	ldrh	r3, [r3, #18]
 801bef0:	9a04      	ldr	r2, [sp, #16]
 801bef2:	4313      	orrs	r3, r2
 801bef4:	9304      	str	r3, [sp, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801bef6:	9b01      	ldr	r3, [sp, #4]
 801bef8:	9a04      	ldr	r2, [sp, #16]
 801befa:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801befc:	9b01      	ldr	r3, [sp, #4]
 801befe:	9a03      	ldr	r2, [sp, #12]
 801bf00:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 801bf02:	9b00      	ldr	r3, [sp, #0]
 801bf04:	689a      	ldr	r2, [r3, #8]
 801bf06:	9b01      	ldr	r3, [sp, #4]
 801bf08:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801bf0a:	9b01      	ldr	r3, [sp, #4]
 801bf0c:	9a05      	ldr	r2, [sp, #20]
 801bf0e:	621a      	str	r2, [r3, #32]
}
 801bf10:	b006      	add	sp, #24
 801bf12:	4770      	bx	lr

0801bf14 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801bf14:	b086      	sub	sp, #24
 801bf16:	9001      	str	r0, [sp, #4]
 801bf18:	9100      	str	r1, [sp, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 801bf1a:	f04f 0300 	mov.w	r3, #0
 801bf1e:	9303      	str	r3, [sp, #12]
 801bf20:	f04f 0300 	mov.w	r3, #0
 801bf24:	9305      	str	r3, [sp, #20]
 801bf26:	f04f 0300 	mov.w	r3, #0
 801bf2a:	9304      	str	r3, [sp, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 801bf2c:	9b01      	ldr	r3, [sp, #4]
 801bf2e:	6a1b      	ldr	r3, [r3, #32]
 801bf30:	f023 0210 	bic.w	r2, r3, #16
 801bf34:	9b01      	ldr	r3, [sp, #4]
 801bf36:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 801bf38:	9b01      	ldr	r3, [sp, #4]
 801bf3a:	6a1b      	ldr	r3, [r3, #32]
 801bf3c:	9305      	str	r3, [sp, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801bf3e:	9b01      	ldr	r3, [sp, #4]
 801bf40:	685b      	ldr	r3, [r3, #4]
 801bf42:	9304      	str	r3, [sp, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801bf44:	9b01      	ldr	r3, [sp, #4]
 801bf46:	699b      	ldr	r3, [r3, #24]
 801bf48:	9303      	str	r3, [sp, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC2M;
 801bf4a:	9b03      	ldr	r3, [sp, #12]
 801bf4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801bf50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801bf54:	9303      	str	r3, [sp, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC2S;
 801bf56:	9b03      	ldr	r3, [sp, #12]
 801bf58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801bf5c:	9303      	str	r3, [sp, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 801bf5e:	9b00      	ldr	r3, [sp, #0]
 801bf60:	681b      	ldr	r3, [r3, #0]
 801bf62:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801bf66:	9a03      	ldr	r2, [sp, #12]
 801bf68:	4313      	orrs	r3, r2
 801bf6a:	9303      	str	r3, [sp, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC2P;
 801bf6c:	9b05      	ldr	r3, [sp, #20]
 801bf6e:	f023 0320 	bic.w	r3, r3, #32
 801bf72:	9305      	str	r3, [sp, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 4);
 801bf74:	9b00      	ldr	r3, [sp, #0]
 801bf76:	899b      	ldrh	r3, [r3, #12]
 801bf78:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801bf7c:	9a05      	ldr	r2, [sp, #20]
 801bf7e:	4313      	orrs	r3, r2
 801bf80:	9305      	str	r3, [sp, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 4);
 801bf82:	9b00      	ldr	r3, [sp, #0]
 801bf84:	889b      	ldrh	r3, [r3, #4]
 801bf86:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801bf8a:	9a05      	ldr	r2, [sp, #20]
 801bf8c:	4313      	orrs	r3, r2
 801bf8e:	9305      	str	r3, [sp, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 801bf90:	9a01      	ldr	r2, [sp, #4]
 801bf92:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801bf96:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801bf9a:	429a      	cmp	r2, r3
 801bf9c:	d006      	beq.n	801bfac <TIM_OC2Init+0x98>
 801bf9e:	9a01      	ldr	r2, [sp, #4]
 801bfa0:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 801bfa4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801bfa8:	429a      	cmp	r2, r3
 801bfaa:	d12b      	bne.n	801c004 <TIM_OC2Init+0xf0>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 801bfac:	9b05      	ldr	r3, [sp, #20]
 801bfae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801bfb2:	9305      	str	r3, [sp, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 4);
 801bfb4:	9b00      	ldr	r3, [sp, #0]
 801bfb6:	89db      	ldrh	r3, [r3, #14]
 801bfb8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801bfbc:	9a05      	ldr	r2, [sp, #20]
 801bfbe:	4313      	orrs	r3, r2
 801bfc0:	9305      	str	r3, [sp, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NE;
 801bfc2:	9b05      	ldr	r3, [sp, #20]
 801bfc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801bfc8:	9305      	str	r3, [sp, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 4);
 801bfca:	9b00      	ldr	r3, [sp, #0]
 801bfcc:	88db      	ldrh	r3, [r3, #6]
 801bfce:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801bfd2:	9a05      	ldr	r2, [sp, #20]
 801bfd4:	4313      	orrs	r3, r2
 801bfd6:	9305      	str	r3, [sp, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2;
 801bfd8:	9b04      	ldr	r3, [sp, #16]
 801bfda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801bfde:	9304      	str	r3, [sp, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2N;
 801bfe0:	9b04      	ldr	r3, [sp, #16]
 801bfe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bfe6:	9304      	str	r3, [sp, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 2);
 801bfe8:	9b00      	ldr	r3, [sp, #0]
 801bfea:	8a1b      	ldrh	r3, [r3, #16]
 801bfec:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801bff0:	9a04      	ldr	r2, [sp, #16]
 801bff2:	4313      	orrs	r3, r2
 801bff4:	9304      	str	r3, [sp, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 2);
 801bff6:	9b00      	ldr	r3, [sp, #0]
 801bff8:	8a5b      	ldrh	r3, [r3, #18]
 801bffa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801bffe:	9a04      	ldr	r2, [sp, #16]
 801c000:	4313      	orrs	r3, r2
 801c002:	9304      	str	r3, [sp, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c004:	9b01      	ldr	r3, [sp, #4]
 801c006:	9a04      	ldr	r2, [sp, #16]
 801c008:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801c00a:	9b01      	ldr	r3, [sp, #4]
 801c00c:	9a03      	ldr	r2, [sp, #12]
 801c00e:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 801c010:	9b00      	ldr	r3, [sp, #0]
 801c012:	689a      	ldr	r2, [r3, #8]
 801c014:	9b01      	ldr	r3, [sp, #4]
 801c016:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c018:	9b01      	ldr	r3, [sp, #4]
 801c01a:	9a05      	ldr	r2, [sp, #20]
 801c01c:	621a      	str	r2, [r3, #32]
}
 801c01e:	b006      	add	sp, #24
 801c020:	4770      	bx	lr
 801c022:	bf00      	nop

0801c024 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801c024:	b086      	sub	sp, #24
 801c026:	9001      	str	r0, [sp, #4]
 801c028:	9100      	str	r1, [sp, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 801c02a:	f04f 0300 	mov.w	r3, #0
 801c02e:	9303      	str	r3, [sp, #12]
 801c030:	f04f 0300 	mov.w	r3, #0
 801c034:	9305      	str	r3, [sp, #20]
 801c036:	f04f 0300 	mov.w	r3, #0
 801c03a:	9304      	str	r3, [sp, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 801c03c:	9b01      	ldr	r3, [sp, #4]
 801c03e:	6a1b      	ldr	r3, [r3, #32]
 801c040:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801c044:	9b01      	ldr	r3, [sp, #4]
 801c046:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c048:	9b01      	ldr	r3, [sp, #4]
 801c04a:	6a1b      	ldr	r3, [r3, #32]
 801c04c:	9305      	str	r3, [sp, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c04e:	9b01      	ldr	r3, [sp, #4]
 801c050:	685b      	ldr	r3, [r3, #4]
 801c052:	9304      	str	r3, [sp, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801c054:	9b01      	ldr	r3, [sp, #4]
 801c056:	69db      	ldr	r3, [r3, #28]
 801c058:	9303      	str	r3, [sp, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC3M;
 801c05a:	9b03      	ldr	r3, [sp, #12]
 801c05c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c060:	9303      	str	r3, [sp, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC3S;  
 801c062:	9b03      	ldr	r3, [sp, #12]
 801c064:	f023 0303 	bic.w	r3, r3, #3
 801c068:	9303      	str	r3, [sp, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 801c06a:	9b00      	ldr	r3, [sp, #0]
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	9a03      	ldr	r2, [sp, #12]
 801c070:	4313      	orrs	r3, r2
 801c072:	9303      	str	r3, [sp, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 801c074:	9b05      	ldr	r3, [sp, #20]
 801c076:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801c07a:	9305      	str	r3, [sp, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 8);
 801c07c:	9b00      	ldr	r3, [sp, #0]
 801c07e:	899b      	ldrh	r3, [r3, #12]
 801c080:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c084:	9a05      	ldr	r2, [sp, #20]
 801c086:	4313      	orrs	r3, r2
 801c088:	9305      	str	r3, [sp, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 8);
 801c08a:	9b00      	ldr	r3, [sp, #0]
 801c08c:	889b      	ldrh	r3, [r3, #4]
 801c08e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c092:	9a05      	ldr	r2, [sp, #20]
 801c094:	4313      	orrs	r3, r2
 801c096:	9305      	str	r3, [sp, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 801c098:	9a01      	ldr	r2, [sp, #4]
 801c09a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801c09e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801c0a2:	429a      	cmp	r2, r3
 801c0a4:	d006      	beq.n	801c0b4 <TIM_OC3Init+0x90>
 801c0a6:	9a01      	ldr	r2, [sp, #4]
 801c0a8:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 801c0ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801c0b0:	429a      	cmp	r2, r3
 801c0b2:	d12b      	bne.n	801c10c <TIM_OC3Init+0xe8>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 801c0b4:	9b05      	ldr	r3, [sp, #20]
 801c0b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c0ba:	9305      	str	r3, [sp, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 8);
 801c0bc:	9b00      	ldr	r3, [sp, #0]
 801c0be:	89db      	ldrh	r3, [r3, #14]
 801c0c0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c0c4:	9a05      	ldr	r2, [sp, #20]
 801c0c6:	4313      	orrs	r3, r2
 801c0c8:	9305      	str	r3, [sp, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NE;
 801c0ca:	9b05      	ldr	r3, [sp, #20]
 801c0cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801c0d0:	9305      	str	r3, [sp, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 8);
 801c0d2:	9b00      	ldr	r3, [sp, #0]
 801c0d4:	88db      	ldrh	r3, [r3, #6]
 801c0d6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c0da:	9a05      	ldr	r2, [sp, #20]
 801c0dc:	4313      	orrs	r3, r2
 801c0de:	9305      	str	r3, [sp, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3;
 801c0e0:	9b04      	ldr	r3, [sp, #16]
 801c0e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c0e6:	9304      	str	r3, [sp, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3N;
 801c0e8:	9b04      	ldr	r3, [sp, #16]
 801c0ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801c0ee:	9304      	str	r3, [sp, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 4);
 801c0f0:	9b00      	ldr	r3, [sp, #0]
 801c0f2:	8a1b      	ldrh	r3, [r3, #16]
 801c0f4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801c0f8:	9a04      	ldr	r2, [sp, #16]
 801c0fa:	4313      	orrs	r3, r2
 801c0fc:	9304      	str	r3, [sp, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 4);
 801c0fe:	9b00      	ldr	r3, [sp, #0]
 801c100:	8a5b      	ldrh	r3, [r3, #18]
 801c102:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801c106:	9a04      	ldr	r2, [sp, #16]
 801c108:	4313      	orrs	r3, r2
 801c10a:	9304      	str	r3, [sp, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c10c:	9b01      	ldr	r3, [sp, #4]
 801c10e:	9a04      	ldr	r2, [sp, #16]
 801c110:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801c112:	9b01      	ldr	r3, [sp, #4]
 801c114:	9a03      	ldr	r2, [sp, #12]
 801c116:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 801c118:	9b00      	ldr	r3, [sp, #0]
 801c11a:	689a      	ldr	r2, [r3, #8]
 801c11c:	9b01      	ldr	r3, [sp, #4]
 801c11e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c120:	9b01      	ldr	r3, [sp, #4]
 801c122:	9a05      	ldr	r2, [sp, #20]
 801c124:	621a      	str	r2, [r3, #32]
}
 801c126:	b006      	add	sp, #24
 801c128:	4770      	bx	lr
 801c12a:	bf00      	nop

0801c12c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801c12c:	b086      	sub	sp, #24
 801c12e:	9001      	str	r0, [sp, #4]
 801c130:	9100      	str	r1, [sp, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 801c132:	f04f 0300 	mov.w	r3, #0
 801c136:	9304      	str	r3, [sp, #16]
 801c138:	f04f 0300 	mov.w	r3, #0
 801c13c:	9303      	str	r3, [sp, #12]
 801c13e:	f04f 0300 	mov.w	r3, #0
 801c142:	9305      	str	r3, [sp, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 801c144:	9b01      	ldr	r3, [sp, #4]
 801c146:	6a1b      	ldr	r3, [r3, #32]
 801c148:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801c14c:	9b01      	ldr	r3, [sp, #4]
 801c14e:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c150:	9b01      	ldr	r3, [sp, #4]
 801c152:	6a1b      	ldr	r3, [r3, #32]
 801c154:	9303      	str	r3, [sp, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c156:	9b01      	ldr	r3, [sp, #4]
 801c158:	685b      	ldr	r3, [r3, #4]
 801c15a:	9305      	str	r3, [sp, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801c15c:	9b01      	ldr	r3, [sp, #4]
 801c15e:	69db      	ldr	r3, [r3, #28]
 801c160:	9304      	str	r3, [sp, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC4M;
 801c162:	9b04      	ldr	r3, [sp, #16]
 801c164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c168:	9304      	str	r3, [sp, #16]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC4S;
 801c16a:	9b04      	ldr	r3, [sp, #16]
 801c16c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c170:	9304      	str	r3, [sp, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 801c172:	9b00      	ldr	r3, [sp, #0]
 801c174:	681b      	ldr	r3, [r3, #0]
 801c176:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c17a:	9a04      	ldr	r2, [sp, #16]
 801c17c:	4313      	orrs	r3, r2
 801c17e:	9304      	str	r3, [sp, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 801c180:	9b03      	ldr	r3, [sp, #12]
 801c182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801c186:	9303      	str	r3, [sp, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 12);
 801c188:	9b00      	ldr	r3, [sp, #0]
 801c18a:	899b      	ldrh	r3, [r3, #12]
 801c18c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801c190:	9a03      	ldr	r2, [sp, #12]
 801c192:	4313      	orrs	r3, r2
 801c194:	9303      	str	r3, [sp, #12]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 12);
 801c196:	9b00      	ldr	r3, [sp, #0]
 801c198:	889b      	ldrh	r3, [r3, #4]
 801c19a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801c19e:	9a03      	ldr	r2, [sp, #12]
 801c1a0:	4313      	orrs	r3, r2
 801c1a2:	9303      	str	r3, [sp, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 801c1a4:	9a01      	ldr	r2, [sp, #4]
 801c1a6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801c1aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801c1ae:	429a      	cmp	r2, r3
 801c1b0:	d006      	beq.n	801c1c0 <TIM_OC4Init+0x94>
 801c1b2:	9a01      	ldr	r2, [sp, #4]
 801c1b4:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 801c1b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801c1bc:	429a      	cmp	r2, r3
 801c1be:	d10a      	bne.n	801c1d6 <TIM_OC4Init+0xaa>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS4;
 801c1c0:	9b05      	ldr	r3, [sp, #20]
 801c1c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801c1c6:	9305      	str	r3, [sp, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 6);
 801c1c8:	9b00      	ldr	r3, [sp, #0]
 801c1ca:	8a1b      	ldrh	r3, [r3, #16]
 801c1cc:	ea4f 1383 	mov.w	r3, r3, lsl #6
 801c1d0:	9a05      	ldr	r2, [sp, #20]
 801c1d2:	4313      	orrs	r3, r2
 801c1d4:	9305      	str	r3, [sp, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c1d6:	9b01      	ldr	r3, [sp, #4]
 801c1d8:	9a05      	ldr	r2, [sp, #20]
 801c1da:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 801c1dc:	9b01      	ldr	r3, [sp, #4]
 801c1de:	9a04      	ldr	r2, [sp, #16]
 801c1e0:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 801c1e2:	9b00      	ldr	r3, [sp, #0]
 801c1e4:	689a      	ldr	r2, [r3, #8]
 801c1e6:	9b01      	ldr	r3, [sp, #4]
 801c1e8:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c1ea:	9b01      	ldr	r3, [sp, #4]
 801c1ec:	9a03      	ldr	r2, [sp, #12]
 801c1ee:	621a      	str	r2, [r3, #32]
}
 801c1f0:	b006      	add	sp, #24
 801c1f2:	4770      	bx	lr

0801c1f4 <TIM_OC5Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC5Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801c1f4:	b086      	sub	sp, #24
 801c1f6:	9001      	str	r0, [sp, #4]
 801c1f8:	9100      	str	r1, [sp, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 801c1fa:	f04f 0300 	mov.w	r3, #0
 801c1fe:	9304      	str	r3, [sp, #16]
 801c200:	f04f 0300 	mov.w	r3, #0
 801c204:	9303      	str	r3, [sp, #12]
 801c206:	f04f 0300 	mov.w	r3, #0
 801c20a:	9305      	str	r3, [sp, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC5E; /* to be verified*/
 801c20c:	9b01      	ldr	r3, [sp, #4]
 801c20e:	6a1b      	ldr	r3, [r3, #32]
 801c210:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801c214:	9b01      	ldr	r3, [sp, #4]
 801c216:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c218:	9b01      	ldr	r3, [sp, #4]
 801c21a:	6a1b      	ldr	r3, [r3, #32]
 801c21c:	9303      	str	r3, [sp, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c21e:	9b01      	ldr	r3, [sp, #4]
 801c220:	685b      	ldr	r3, [r3, #4]
 801c222:	9305      	str	r3, [sp, #20]
  
  /* Get the TIMx CCMR3 register value */
  tmpccmrx = TIMx->CCMR3;
 801c224:	9b01      	ldr	r3, [sp, #4]
 801c226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c228:	9304      	str	r3, [sp, #16]
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC5M;
 801c22a:	9b04      	ldr	r3, [sp, #16]
 801c22c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c230:	9304      	str	r3, [sp, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode);
 801c232:	9b00      	ldr	r3, [sp, #0]
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	9a04      	ldr	r2, [sp, #16]
 801c238:	4313      	orrs	r3, r2
 801c23a:	9304      	str	r3, [sp, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
 801c23c:	9b03      	ldr	r3, [sp, #12]
 801c23e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801c242:	9303      	str	r3, [sp, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 16);
 801c244:	9b00      	ldr	r3, [sp, #0]
 801c246:	899b      	ldrh	r3, [r3, #12]
 801c248:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801c24c:	9a03      	ldr	r2, [sp, #12]
 801c24e:	4313      	orrs	r3, r2
 801c250:	9303      	str	r3, [sp, #12]

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 16);
 801c252:	9b00      	ldr	r3, [sp, #0]
 801c254:	889b      	ldrh	r3, [r3, #4]
 801c256:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801c25a:	9a03      	ldr	r2, [sp, #12]
 801c25c:	4313      	orrs	r3, r2
 801c25e:	9303      	str	r3, [sp, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 801c260:	9a01      	ldr	r2, [sp, #4]
 801c262:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801c266:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801c26a:	429a      	cmp	r2, r3
 801c26c:	d006      	beq.n	801c27c <TIM_OC5Init+0x88>
 801c26e:	9a01      	ldr	r2, [sp, #4]
 801c270:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 801c274:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801c278:	429a      	cmp	r2, r3
 801c27a:	d10a      	bne.n	801c292 <TIM_OC5Init+0x9e>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS5;
 801c27c:	9b05      	ldr	r3, [sp, #20]
 801c27e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c282:	9305      	str	r3, [sp, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 16);
 801c284:	9b00      	ldr	r3, [sp, #0]
 801c286:	8a1b      	ldrh	r3, [r3, #16]
 801c288:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801c28c:	9a05      	ldr	r2, [sp, #20]
 801c28e:	4313      	orrs	r3, r2
 801c290:	9305      	str	r3, [sp, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c292:	9b01      	ldr	r3, [sp, #4]
 801c294:	9a05      	ldr	r2, [sp, #20]
 801c296:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR3 = tmpccmrx;
 801c298:	9b01      	ldr	r3, [sp, #4]
 801c29a:	9a04      	ldr	r2, [sp, #16]
 801c29c:	655a      	str	r2, [r3, #84]	; 0x54
    
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = TIM_OCInitStruct->TIM_Pulse;
 801c29e:	9b00      	ldr	r3, [sp, #0]
 801c2a0:	689a      	ldr	r2, [r3, #8]
 801c2a2:	9b01      	ldr	r3, [sp, #4]
 801c2a4:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c2a6:	9b01      	ldr	r3, [sp, #4]
 801c2a8:	9a03      	ldr	r2, [sp, #12]
 801c2aa:	621a      	str	r2, [r3, #32]
}
 801c2ac:	b006      	add	sp, #24
 801c2ae:	4770      	bx	lr

0801c2b0 <TIM_OC6Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC6Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801c2b0:	b086      	sub	sp, #24
 801c2b2:	9001      	str	r0, [sp, #4]
 801c2b4:	9100      	str	r1, [sp, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 801c2b6:	f04f 0300 	mov.w	r3, #0
 801c2ba:	9304      	str	r3, [sp, #16]
 801c2bc:	f04f 0300 	mov.w	r3, #0
 801c2c0:	9303      	str	r3, [sp, #12]
 801c2c2:	f04f 0300 	mov.w	r3, #0
 801c2c6:	9305      	str	r3, [sp, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC6E; /* to be verified*/
 801c2c8:	9b01      	ldr	r3, [sp, #4]
 801c2ca:	6a1b      	ldr	r3, [r3, #32]
 801c2cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801c2d0:	9b01      	ldr	r3, [sp, #4]
 801c2d2:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c2d4:	9b01      	ldr	r3, [sp, #4]
 801c2d6:	6a1b      	ldr	r3, [r3, #32]
 801c2d8:	9303      	str	r3, [sp, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c2da:	9b01      	ldr	r3, [sp, #4]
 801c2dc:	685b      	ldr	r3, [r3, #4]
 801c2de:	9305      	str	r3, [sp, #20]
  
  /* Get the TIMx CCMR3 register value */
  tmpccmrx = TIMx->CCMR3;
 801c2e0:	9b01      	ldr	r3, [sp, #4]
 801c2e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c2e4:	9304      	str	r3, [sp, #16]
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC6M;
 801c2e6:	9b04      	ldr	r3, [sp, #16]
 801c2e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c2ec:	9304      	str	r3, [sp, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 801c2ee:	9b00      	ldr	r3, [sp, #0]
 801c2f0:	681b      	ldr	r3, [r3, #0]
 801c2f2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c2f6:	9a04      	ldr	r2, [sp, #16]
 801c2f8:	4313      	orrs	r3, r2
 801c2fa:	9304      	str	r3, [sp, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801c2fc:	9b03      	ldr	r3, [sp, #12]
 801c2fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801c302:	9303      	str	r3, [sp, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 20);
 801c304:	9b00      	ldr	r3, [sp, #0]
 801c306:	899b      	ldrh	r3, [r3, #12]
 801c308:	ea4f 5303 	mov.w	r3, r3, lsl #20
 801c30c:	9a03      	ldr	r2, [sp, #12]
 801c30e:	4313      	orrs	r3, r2
 801c310:	9303      	str	r3, [sp, #12]

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 20);
 801c312:	9b00      	ldr	r3, [sp, #0]
 801c314:	889b      	ldrh	r3, [r3, #4]
 801c316:	ea4f 5303 	mov.w	r3, r3, lsl #20
 801c31a:	9a03      	ldr	r2, [sp, #12]
 801c31c:	4313      	orrs	r3, r2
 801c31e:	9303      	str	r3, [sp, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 801c320:	9a01      	ldr	r2, [sp, #4]
 801c322:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801c326:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801c32a:	429a      	cmp	r2, r3
 801c32c:	d006      	beq.n	801c33c <TIM_OC6Init+0x8c>
 801c32e:	9a01      	ldr	r2, [sp, #4]
 801c330:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 801c334:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801c338:	429a      	cmp	r2, r3
 801c33a:	d103      	bne.n	801c344 <TIM_OC6Init+0x94>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS6;
 801c33c:	9b05      	ldr	r3, [sp, #20]
 801c33e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801c342:	9305      	str	r3, [sp, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 18);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c344:	9b01      	ldr	r3, [sp, #4]
 801c346:	9a05      	ldr	r2, [sp, #20]
 801c348:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR3 = tmpccmrx;
 801c34a:	9b01      	ldr	r3, [sp, #4]
 801c34c:	9a04      	ldr	r2, [sp, #16]
 801c34e:	655a      	str	r2, [r3, #84]	; 0x54
    
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = TIM_OCInitStruct->TIM_Pulse;
 801c350:	9b00      	ldr	r3, [sp, #0]
 801c352:	689a      	ldr	r2, [r3, #8]
 801c354:	9b01      	ldr	r3, [sp, #4]
 801c356:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c358:	9b01      	ldr	r3, [sp, #4]
 801c35a:	9a03      	ldr	r2, [sp, #12]
 801c35c:	621a      	str	r2, [r3, #32]
}
 801c35e:	b006      	add	sp, #24
 801c360:	4770      	bx	lr
 801c362:	bf00      	nop

0801c364 <TIM_SelectGC5C1>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C1(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801c364:	b082      	sub	sp, #8
 801c366:	9001      	str	r0, [sp, #4]
 801c368:	460b      	mov	r3, r1
 801c36a:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801c36e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801c372:	2b00      	cmp	r3, #0
 801c374:	d006      	beq.n	801c384 <TIM_SelectGC5C1+0x20>
  {
    /* Set the GC5C1 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C1;
 801c376:	9b01      	ldr	r3, [sp, #4]
 801c378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c37a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801c37e:	9b01      	ldr	r3, [sp, #4]
 801c380:	659a      	str	r2, [r3, #88]	; 0x58
 801c382:	e005      	b.n	801c390 <TIM_SelectGC5C1+0x2c>
  }
  else
  {
    /* Reset the GC5C1 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C1;
 801c384:	9b01      	ldr	r3, [sp, #4]
 801c386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c388:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801c38c:	9b01      	ldr	r3, [sp, #4]
 801c38e:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 801c390:	b002      	add	sp, #8
 801c392:	4770      	bx	lr

0801c394 <TIM_SelectGC5C2>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C2(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801c394:	b082      	sub	sp, #8
 801c396:	9001      	str	r0, [sp, #4]
 801c398:	460b      	mov	r3, r1
 801c39a:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801c39e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d006      	beq.n	801c3b4 <TIM_SelectGC5C2+0x20>
  {
    /* Set the GC5C2 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C2;
 801c3a6:	9b01      	ldr	r3, [sp, #4]
 801c3a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c3aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801c3ae:	9b01      	ldr	r3, [sp, #4]
 801c3b0:	659a      	str	r2, [r3, #88]	; 0x58
 801c3b2:	e005      	b.n	801c3c0 <TIM_SelectGC5C2+0x2c>
  }
  else
  {
    /* Reset the GC5C2 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C2;
 801c3b4:	9b01      	ldr	r3, [sp, #4]
 801c3b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c3b8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801c3bc:	9b01      	ldr	r3, [sp, #4]
 801c3be:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 801c3c0:	b002      	add	sp, #8
 801c3c2:	4770      	bx	lr

0801c3c4 <TIM_SelectGC5C3>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C3(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801c3c4:	b082      	sub	sp, #8
 801c3c6:	9001      	str	r0, [sp, #4]
 801c3c8:	460b      	mov	r3, r1
 801c3ca:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801c3ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d006      	beq.n	801c3e4 <TIM_SelectGC5C3+0x20>
  {
    /* Set the GC5C3 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C3;
 801c3d6:	9b01      	ldr	r3, [sp, #4]
 801c3d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c3da:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801c3de:	9b01      	ldr	r3, [sp, #4]
 801c3e0:	659a      	str	r2, [r3, #88]	; 0x58
 801c3e2:	e005      	b.n	801c3f0 <TIM_SelectGC5C3+0x2c>
  }
  else
  {
    /* Reset the GC5C3 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C3;
 801c3e4:	9b01      	ldr	r3, [sp, #4]
 801c3e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c3e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801c3ec:	9b01      	ldr	r3, [sp, #4]
 801c3ee:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 801c3f0:	b002      	add	sp, #8
 801c3f2:	4770      	bx	lr

0801c3f4 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801c3f4:	b082      	sub	sp, #8
 801c3f6:	9001      	str	r0, [sp, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 801c3f8:	9b01      	ldr	r3, [sp, #4]
 801c3fa:	f04f 0200 	mov.w	r2, #0
 801c3fe:	601a      	str	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 801c400:	9b01      	ldr	r3, [sp, #4]
 801c402:	f04f 0200 	mov.w	r2, #0
 801c406:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 801c408:	9b01      	ldr	r3, [sp, #4]
 801c40a:	f04f 0200 	mov.w	r2, #0
 801c40e:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 801c410:	9b01      	ldr	r3, [sp, #4]
 801c412:	f04f 0200 	mov.w	r2, #0
 801c416:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 801c418:	9b01      	ldr	r3, [sp, #4]
 801c41a:	f04f 0200 	mov.w	r2, #0
 801c41e:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 801c420:	9b01      	ldr	r3, [sp, #4]
 801c422:	f04f 0200 	mov.w	r2, #0
 801c426:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 801c428:	9b01      	ldr	r3, [sp, #4]
 801c42a:	f04f 0200 	mov.w	r2, #0
 801c42e:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 801c430:	9b01      	ldr	r3, [sp, #4]
 801c432:	f04f 0200 	mov.w	r2, #0
 801c436:	825a      	strh	r2, [r3, #18]
}
 801c438:	b002      	add	sp, #8
 801c43a:	4770      	bx	lr

0801c43c <TIM_SelectOCxM>:
  *            @arg TIM_OCMode_Asymmetric_PWM1
  *            @arg TIM_OCMode_Asymmetric_PWM2            
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint32_t TIM_OCMode) /* to be updated*/
{
 801c43c:	b086      	sub	sp, #24
 801c43e:	9003      	str	r0, [sp, #12]
 801c440:	460b      	mov	r3, r1
 801c442:	9201      	str	r2, [sp, #4]
 801c444:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tmp = 0;
 801c448:	f04f 0300 	mov.w	r3, #0
 801c44c:	9305      	str	r3, [sp, #20]
  uint16_t tmp1 = 0;
 801c44e:	f04f 0300 	mov.w	r3, #0
 801c452:	f8ad 3012 	strh.w	r3, [sp, #18]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 801c456:	9b03      	ldr	r3, [sp, #12]
 801c458:	9305      	str	r3, [sp, #20]
  tmp += CCMR_OFFSET;
 801c45a:	9b05      	ldr	r3, [sp, #20]
 801c45c:	f103 0318 	add.w	r3, r3, #24
 801c460:	9305      	str	r3, [sp, #20]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 801c462:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c466:	f04f 0201 	mov.w	r2, #1
 801c46a:	fa02 f303 	lsl.w	r3, r2, r3
 801c46e:	f8ad 3012 	strh.w	r3, [sp, #18]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 801c472:	9b03      	ldr	r3, [sp, #12]
 801c474:	6a1a      	ldr	r2, [r3, #32]
 801c476:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c47a:	ea6f 0303 	mvn.w	r3, r3
 801c47e:	b29b      	uxth	r3, r3
 801c480:	401a      	ands	r2, r3
 801c482:	9b03      	ldr	r3, [sp, #12]
 801c484:	621a      	str	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 801c486:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d003      	beq.n	801c496 <TIM_SelectOCxM+0x5a>
 801c48e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c492:	2b08      	cmp	r3, #8
 801c494:	d116      	bne.n	801c4c4 <TIM_SelectOCxM+0x88>
  {
    tmp += (TIM_Channel>>1);
 801c496:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c49a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801c49e:	b29b      	uxth	r3, r3
 801c4a0:	9a05      	ldr	r2, [sp, #20]
 801c4a2:	18d3      	adds	r3, r2, r3
 801c4a4:	9305      	str	r3, [sp, #20]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 801c4a6:	9a05      	ldr	r2, [sp, #20]
 801c4a8:	9b05      	ldr	r3, [sp, #20]
 801c4aa:	681b      	ldr	r3, [r3, #0]
 801c4ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c4b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c4b4:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 801c4b6:	9b05      	ldr	r3, [sp, #20]
 801c4b8:	9a05      	ldr	r2, [sp, #20]
 801c4ba:	6811      	ldr	r1, [r2, #0]
 801c4bc:	9a01      	ldr	r2, [sp, #4]
 801c4be:	430a      	orrs	r2, r1
 801c4c0:	601a      	str	r2, [r3, #0]
 801c4c2:	e01a      	b.n	801c4fa <TIM_SelectOCxM+0xbe>
  }
  else
  {
    tmp += (uint32_t)(TIM_Channel - (uint32_t)4)>> (uint32_t)1;
 801c4c4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c4c8:	f1a3 0304 	sub.w	r3, r3, #4
 801c4cc:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801c4d0:	9a05      	ldr	r2, [sp, #20]
 801c4d2:	18d3      	adds	r3, r2, r3
 801c4d4:	9305      	str	r3, [sp, #20]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 801c4d6:	9a05      	ldr	r2, [sp, #20]
 801c4d8:	9b05      	ldr	r3, [sp, #20]
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c4e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c4e4:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 801c4e6:	9b05      	ldr	r3, [sp, #20]
 801c4e8:	9a05      	ldr	r2, [sp, #20]
 801c4ea:	6811      	ldr	r1, [r2, #0]
 801c4ec:	9a01      	ldr	r2, [sp, #4]
 801c4ee:	b292      	uxth	r2, r2
 801c4f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 801c4f4:	b292      	uxth	r2, r2
 801c4f6:	430a      	orrs	r2, r1
 801c4f8:	601a      	str	r2, [r3, #0]
  }
}
 801c4fa:	b006      	add	sp, #24
 801c4fc:	4770      	bx	lr
 801c4fe:	bf00      	nop

0801c500 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 801c500:	b082      	sub	sp, #8
 801c502:	9001      	str	r0, [sp, #4]
 801c504:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 801c506:	9b01      	ldr	r3, [sp, #4]
 801c508:	9a00      	ldr	r2, [sp, #0]
 801c50a:	635a      	str	r2, [r3, #52]	; 0x34
}
 801c50c:	b002      	add	sp, #8
 801c50e:	4770      	bx	lr

0801c510 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 801c510:	b082      	sub	sp, #8
 801c512:	9001      	str	r0, [sp, #4]
 801c514:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 801c516:	9b01      	ldr	r3, [sp, #4]
 801c518:	9a00      	ldr	r2, [sp, #0]
 801c51a:	639a      	str	r2, [r3, #56]	; 0x38
}
 801c51c:	b002      	add	sp, #8
 801c51e:	4770      	bx	lr

0801c520 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 801c520:	b082      	sub	sp, #8
 801c522:	9001      	str	r0, [sp, #4]
 801c524:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 801c526:	9b01      	ldr	r3, [sp, #4]
 801c528:	9a00      	ldr	r2, [sp, #0]
 801c52a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801c52c:	b002      	add	sp, #8
 801c52e:	4770      	bx	lr

0801c530 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 801c530:	b082      	sub	sp, #8
 801c532:	9001      	str	r0, [sp, #4]
 801c534:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 801c536:	9b01      	ldr	r3, [sp, #4]
 801c538:	9a00      	ldr	r2, [sp, #0]
 801c53a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801c53c:	b002      	add	sp, #8
 801c53e:	4770      	bx	lr

0801c540 <TIM_SetCompare5>:
  * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
  * @param  Compare5: specifies the Capture Compare5 register new value.
  * @retval None
  */
void TIM_SetCompare5(TIM_TypeDef* TIMx, uint32_t Compare5)
{
 801c540:	b082      	sub	sp, #8
 801c542:	9001      	str	r0, [sp, #4]
 801c544:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));

  /* Set the Capture Compare5 Register value */
  TIMx->CCR5 = Compare5;
 801c546:	9b01      	ldr	r3, [sp, #4]
 801c548:	9a00      	ldr	r2, [sp, #0]
 801c54a:	659a      	str	r2, [r3, #88]	; 0x58
}
 801c54c:	b002      	add	sp, #8
 801c54e:	4770      	bx	lr

0801c550 <TIM_SetCompare6>:
  * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
  * @param  Compare6: specifies the Capture Compare5 register new value.
  * @retval None
  */
void TIM_SetCompare6(TIM_TypeDef* TIMx, uint32_t Compare6)
{
 801c550:	b082      	sub	sp, #8
 801c552:	9001      	str	r0, [sp, #4]
 801c554:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));

  /* Set the Capture Compare6 Register value */
  TIMx->CCR6 = Compare6;
 801c556:	9b01      	ldr	r3, [sp, #4]
 801c558:	9a00      	ldr	r2, [sp, #0]
 801c55a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801c55c:	b002      	add	sp, #8
 801c55e:	4770      	bx	lr

0801c560 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 801c560:	b084      	sub	sp, #16
 801c562:	9001      	str	r0, [sp, #4]
 801c564:	460b      	mov	r3, r1
 801c566:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr1 = 0;
 801c56a:	f04f 0300 	mov.w	r3, #0
 801c56e:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 801c570:	9b01      	ldr	r3, [sp, #4]
 801c572:	699b      	ldr	r3, [r3, #24]
 801c574:	9303      	str	r3, [sp, #12]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1M;
 801c576:	9b03      	ldr	r3, [sp, #12]
 801c578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c57c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c580:	9303      	str	r3, [sp, #12]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 801c582:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c586:	9a03      	ldr	r2, [sp, #12]
 801c588:	4313      	orrs	r3, r2
 801c58a:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801c58c:	9b01      	ldr	r3, [sp, #4]
 801c58e:	9a03      	ldr	r2, [sp, #12]
 801c590:	619a      	str	r2, [r3, #24]
}
 801c592:	b004      	add	sp, #16
 801c594:	4770      	bx	lr
 801c596:	bf00      	nop

0801c598 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 801c598:	b084      	sub	sp, #16
 801c59a:	9001      	str	r0, [sp, #4]
 801c59c:	460b      	mov	r3, r1
 801c59e:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr1 = 0;
 801c5a2:	f04f 0300 	mov.w	r3, #0
 801c5a6:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 801c5a8:	9b01      	ldr	r3, [sp, #4]
 801c5aa:	699b      	ldr	r3, [r3, #24]
 801c5ac:	9303      	str	r3, [sp, #12]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC2M;
 801c5ae:	9b03      	ldr	r3, [sp, #12]
 801c5b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c5b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c5b8:	9303      	str	r3, [sp, #12]

  /* Configure The Forced output Mode */
  tmpccmr1 |= ((uint32_t)TIM_ForcedAction << 8);
 801c5ba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c5be:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c5c2:	9a03      	ldr	r2, [sp, #12]
 801c5c4:	4313      	orrs	r3, r2
 801c5c6:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801c5c8:	9b01      	ldr	r3, [sp, #4]
 801c5ca:	9a03      	ldr	r2, [sp, #12]
 801c5cc:	619a      	str	r2, [r3, #24]
}
 801c5ce:	b004      	add	sp, #16
 801c5d0:	4770      	bx	lr
 801c5d2:	bf00      	nop

0801c5d4 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 801c5d4:	b084      	sub	sp, #16
 801c5d6:	9001      	str	r0, [sp, #4]
 801c5d8:	460b      	mov	r3, r1
 801c5da:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr2 = 0;
 801c5de:	f04f 0300 	mov.w	r3, #0
 801c5e2:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 801c5e4:	9b01      	ldr	r3, [sp, #4]
 801c5e6:	69db      	ldr	r3, [r3, #28]
 801c5e8:	9303      	str	r3, [sp, #12]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3M;
 801c5ea:	9b03      	ldr	r3, [sp, #12]
 801c5ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c5f0:	9303      	str	r3, [sp, #12]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 801c5f2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c5f6:	9a03      	ldr	r2, [sp, #12]
 801c5f8:	4313      	orrs	r3, r2
 801c5fa:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801c5fc:	9b01      	ldr	r3, [sp, #4]
 801c5fe:	9a03      	ldr	r2, [sp, #12]
 801c600:	61da      	str	r2, [r3, #28]
}
 801c602:	b004      	add	sp, #16
 801c604:	4770      	bx	lr
 801c606:	bf00      	nop

0801c608 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 801c608:	b084      	sub	sp, #16
 801c60a:	9001      	str	r0, [sp, #4]
 801c60c:	460b      	mov	r3, r1
 801c60e:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr2 = 0;
 801c612:	f04f 0300 	mov.w	r3, #0
 801c616:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 801c618:	9b01      	ldr	r3, [sp, #4]
 801c61a:	69db      	ldr	r3, [r3, #28]
 801c61c:	9303      	str	r3, [sp, #12]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC4M;
 801c61e:	9b03      	ldr	r3, [sp, #12]
 801c620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c624:	9303      	str	r3, [sp, #12]

  /* Configure The Forced output Mode */
  tmpccmr2 |= ((uint32_t)TIM_ForcedAction << 8);
 801c626:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c62a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c62e:	9a03      	ldr	r2, [sp, #12]
 801c630:	4313      	orrs	r3, r2
 801c632:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801c634:	9b01      	ldr	r3, [sp, #4]
 801c636:	9a03      	ldr	r2, [sp, #12]
 801c638:	61da      	str	r2, [r3, #28]
}
 801c63a:	b004      	add	sp, #16
 801c63c:	4770      	bx	lr
 801c63e:	bf00      	nop

0801c640 <TIM_ForcedOC5Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC5REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC5REF.
  * @retval None
  */
void TIM_ForcedOC5Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 801c640:	b084      	sub	sp, #16
 801c642:	9001      	str	r0, [sp, #4]
 801c644:	460b      	mov	r3, r1
 801c646:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr3 = 0;
 801c64a:	f04f 0300 	mov.w	r3, #0
 801c64e:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr3 = TIMx->CCMR3;
 801c650:	9b01      	ldr	r3, [sp, #4]
 801c652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c654:	9303      	str	r3, [sp, #12]

  /* Reset the OC5M Bits */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC5M;
 801c656:	9b03      	ldr	r3, [sp, #12]
 801c658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c65c:	9303      	str	r3, [sp, #12]

  /* Configure The Forced output Mode */
  tmpccmr3 |= (uint32_t)(TIM_ForcedAction);
 801c65e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c662:	9a03      	ldr	r2, [sp, #12]
 801c664:	4313      	orrs	r3, r2
 801c666:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 801c668:	9b01      	ldr	r3, [sp, #4]
 801c66a:	9a03      	ldr	r2, [sp, #12]
 801c66c:	655a      	str	r2, [r3, #84]	; 0x54
}
 801c66e:	b004      	add	sp, #16
 801c670:	4770      	bx	lr
 801c672:	bf00      	nop

0801c674 <TIM_ForcedOC6Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC5REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC5REF.
  * @retval None
  */
void TIM_ForcedOC6Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 801c674:	b084      	sub	sp, #16
 801c676:	9001      	str	r0, [sp, #4]
 801c678:	460b      	mov	r3, r1
 801c67a:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr3 = 0;
 801c67e:	f04f 0300 	mov.w	r3, #0
 801c682:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr3 = TIMx->CCMR3;
 801c684:	9b01      	ldr	r3, [sp, #4]
 801c686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c688:	9303      	str	r3, [sp, #12]

  /* Reset the OC6M Bits */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC6M;
 801c68a:	9b03      	ldr	r3, [sp, #12]
 801c68c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801c690:	9303      	str	r3, [sp, #12]

  /* Configure The Forced output Mode */
  tmpccmr3 |= ((uint32_t)TIM_ForcedAction << 8);
 801c692:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c696:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c69a:	9a03      	ldr	r2, [sp, #12]
 801c69c:	4313      	orrs	r3, r2
 801c69e:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 801c6a0:	9b01      	ldr	r3, [sp, #4]
 801c6a2:	9a03      	ldr	r2, [sp, #12]
 801c6a4:	655a      	str	r2, [r3, #84]	; 0x54
}
 801c6a6:	b004      	add	sp, #16
 801c6a8:	4770      	bx	lr
 801c6aa:	bf00      	nop

0801c6ac <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 801c6ac:	b084      	sub	sp, #16
 801c6ae:	9001      	str	r0, [sp, #4]
 801c6b0:	460b      	mov	r3, r1
 801c6b2:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr1 = 0;
 801c6b6:	f04f 0300 	mov.w	r3, #0
 801c6ba:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 801c6bc:	9b01      	ldr	r3, [sp, #4]
 801c6be:	699b      	ldr	r3, [r3, #24]
 801c6c0:	9303      	str	r3, [sp, #12]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC1PE);
 801c6c2:	9b03      	ldr	r3, [sp, #12]
 801c6c4:	f023 0308 	bic.w	r3, r3, #8
 801c6c8:	9303      	str	r3, [sp, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 801c6ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c6ce:	9a03      	ldr	r2, [sp, #12]
 801c6d0:	4313      	orrs	r3, r2
 801c6d2:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801c6d4:	9b01      	ldr	r3, [sp, #4]
 801c6d6:	9a03      	ldr	r2, [sp, #12]
 801c6d8:	619a      	str	r2, [r3, #24]
}
 801c6da:	b004      	add	sp, #16
 801c6dc:	4770      	bx	lr
 801c6de:	bf00      	nop

0801c6e0 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 801c6e0:	b084      	sub	sp, #16
 801c6e2:	9001      	str	r0, [sp, #4]
 801c6e4:	460b      	mov	r3, r1
 801c6e6:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr1 = 0;
 801c6ea:	f04f 0300 	mov.w	r3, #0
 801c6ee:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 801c6f0:	9b01      	ldr	r3, [sp, #4]
 801c6f2:	699b      	ldr	r3, [r3, #24]
 801c6f4:	9303      	str	r3, [sp, #12]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2PE);
 801c6f6:	9b03      	ldr	r3, [sp, #12]
 801c6f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c6fc:	9303      	str	r3, [sp, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= ((uint32_t)TIM_OCPreload << 8);
 801c6fe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c702:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c706:	9a03      	ldr	r2, [sp, #12]
 801c708:	4313      	orrs	r3, r2
 801c70a:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801c70c:	9b01      	ldr	r3, [sp, #4]
 801c70e:	9a03      	ldr	r2, [sp, #12]
 801c710:	619a      	str	r2, [r3, #24]
}
 801c712:	b004      	add	sp, #16
 801c714:	4770      	bx	lr
 801c716:	bf00      	nop

0801c718 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 801c718:	b084      	sub	sp, #16
 801c71a:	9001      	str	r0, [sp, #4]
 801c71c:	460b      	mov	r3, r1
 801c71e:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr2 = 0;
 801c722:	f04f 0300 	mov.w	r3, #0
 801c726:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 801c728:	9b01      	ldr	r3, [sp, #4]
 801c72a:	69db      	ldr	r3, [r3, #28]
 801c72c:	9303      	str	r3, [sp, #12]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC3PE);
 801c72e:	9b03      	ldr	r3, [sp, #12]
 801c730:	f023 0308 	bic.w	r3, r3, #8
 801c734:	9303      	str	r3, [sp, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 801c736:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c73a:	9a03      	ldr	r2, [sp, #12]
 801c73c:	4313      	orrs	r3, r2
 801c73e:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801c740:	9b01      	ldr	r3, [sp, #4]
 801c742:	9a03      	ldr	r2, [sp, #12]
 801c744:	61da      	str	r2, [r3, #28]
}
 801c746:	b004      	add	sp, #16
 801c748:	4770      	bx	lr
 801c74a:	bf00      	nop

0801c74c <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 801c74c:	b084      	sub	sp, #16
 801c74e:	9001      	str	r0, [sp, #4]
 801c750:	460b      	mov	r3, r1
 801c752:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr2 = 0;
 801c756:	f04f 0300 	mov.w	r3, #0
 801c75a:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 801c75c:	9b01      	ldr	r3, [sp, #4]
 801c75e:	69db      	ldr	r3, [r3, #28]
 801c760:	9303      	str	r3, [sp, #12]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4PE);
 801c762:	9b03      	ldr	r3, [sp, #12]
 801c764:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c768:	9303      	str	r3, [sp, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= ((uint32_t)TIM_OCPreload << 8);
 801c76a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c76e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c772:	9a03      	ldr	r2, [sp, #12]
 801c774:	4313      	orrs	r3, r2
 801c776:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801c778:	9b01      	ldr	r3, [sp, #4]
 801c77a:	9a03      	ldr	r2, [sp, #12]
 801c77c:	61da      	str	r2, [r3, #28]
}
 801c77e:	b004      	add	sp, #16
 801c780:	4770      	bx	lr
 801c782:	bf00      	nop

0801c784 <TIM_OC5PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC5PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 801c784:	b084      	sub	sp, #16
 801c786:	9001      	str	r0, [sp, #4]
 801c788:	460b      	mov	r3, r1
 801c78a:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr3 = 0;
 801c78e:	f04f 0300 	mov.w	r3, #0
 801c792:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr3 = TIMx->CCMR3;
 801c794:	9b01      	ldr	r3, [sp, #4]
 801c796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c798:	9303      	str	r3, [sp, #12]

  /* Reset the OC5PE Bit */
  tmpccmr3 &= (uint32_t)(~TIM_CCMR3_OC5PE);
 801c79a:	9b03      	ldr	r3, [sp, #12]
 801c79c:	f023 0308 	bic.w	r3, r3, #8
 801c7a0:	9303      	str	r3, [sp, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr3 |= (uint32_t)(TIM_OCPreload);
 801c7a2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c7a6:	9a03      	ldr	r2, [sp, #12]
 801c7a8:	4313      	orrs	r3, r2
 801c7aa:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 801c7ac:	9b01      	ldr	r3, [sp, #4]
 801c7ae:	9a03      	ldr	r2, [sp, #12]
 801c7b0:	655a      	str	r2, [r3, #84]	; 0x54
}
 801c7b2:	b004      	add	sp, #16
 801c7b4:	4770      	bx	lr
 801c7b6:	bf00      	nop

0801c7b8 <TIM_OC6PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC6PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 801c7b8:	b084      	sub	sp, #16
 801c7ba:	9001      	str	r0, [sp, #4]
 801c7bc:	460b      	mov	r3, r1
 801c7be:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr3 = 0;
 801c7c2:	f04f 0300 	mov.w	r3, #0
 801c7c6:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr3 = TIMx->CCMR3;
 801c7c8:	9b01      	ldr	r3, [sp, #4]
 801c7ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c7cc:	9303      	str	r3, [sp, #12]

  /* Reset the OC5PE Bit */
  tmpccmr3 &= (uint32_t)(~TIM_CCMR3_OC6PE);
 801c7ce:	9b03      	ldr	r3, [sp, #12]
 801c7d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c7d4:	9303      	str	r3, [sp, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr3 |= ((uint32_t)TIM_OCPreload << 8);
 801c7d6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c7da:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c7de:	9a03      	ldr	r2, [sp, #12]
 801c7e0:	4313      	orrs	r3, r2
 801c7e2:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 801c7e4:	9b01      	ldr	r3, [sp, #4]
 801c7e6:	9a03      	ldr	r2, [sp, #12]
 801c7e8:	655a      	str	r2, [r3, #84]	; 0x54
}
 801c7ea:	b004      	add	sp, #16
 801c7ec:	4770      	bx	lr
 801c7ee:	bf00      	nop

0801c7f0 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 801c7f0:	b084      	sub	sp, #16
 801c7f2:	9001      	str	r0, [sp, #4]
 801c7f4:	460b      	mov	r3, r1
 801c7f6:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr1 = 0;
 801c7fa:	f04f 0300 	mov.w	r3, #0
 801c7fe:	9303      	str	r3, [sp, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 801c800:	9b01      	ldr	r3, [sp, #4]
 801c802:	699b      	ldr	r3, [r3, #24]
 801c804:	9303      	str	r3, [sp, #12]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1FE;
 801c806:	9b03      	ldr	r3, [sp, #12]
 801c808:	f023 0304 	bic.w	r3, r3, #4
 801c80c:	9303      	str	r3, [sp, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 801c80e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c812:	9a03      	ldr	r2, [sp, #12]
 801c814:	4313      	orrs	r3, r2
 801c816:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 801c818:	9b01      	ldr	r3, [sp, #4]
 801c81a:	9a03      	ldr	r2, [sp, #12]
 801c81c:	619a      	str	r2, [r3, #24]
}
 801c81e:	b004      	add	sp, #16
 801c820:	4770      	bx	lr
 801c822:	bf00      	nop

0801c824 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 801c824:	b084      	sub	sp, #16
 801c826:	9001      	str	r0, [sp, #4]
 801c828:	460b      	mov	r3, r1
 801c82a:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr1 = 0;
 801c82e:	f04f 0300 	mov.w	r3, #0
 801c832:	9303      	str	r3, [sp, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 801c834:	9b01      	ldr	r3, [sp, #4]
 801c836:	699b      	ldr	r3, [r3, #24]
 801c838:	9303      	str	r3, [sp, #12]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2FE);
 801c83a:	9b03      	ldr	r3, [sp, #12]
 801c83c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801c840:	9303      	str	r3, [sp, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= ((uint32_t)TIM_OCFast << 8);
 801c842:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c846:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c84a:	9a03      	ldr	r2, [sp, #12]
 801c84c:	4313      	orrs	r3, r2
 801c84e:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 801c850:	9b01      	ldr	r3, [sp, #4]
 801c852:	9a03      	ldr	r2, [sp, #12]
 801c854:	619a      	str	r2, [r3, #24]
}
 801c856:	b004      	add	sp, #16
 801c858:	4770      	bx	lr
 801c85a:	bf00      	nop

0801c85c <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 801c85c:	b084      	sub	sp, #16
 801c85e:	9001      	str	r0, [sp, #4]
 801c860:	460b      	mov	r3, r1
 801c862:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr2 = 0;
 801c866:	f04f 0300 	mov.w	r3, #0
 801c86a:	9303      	str	r3, [sp, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 801c86c:	9b01      	ldr	r3, [sp, #4]
 801c86e:	69db      	ldr	r3, [r3, #28]
 801c870:	9303      	str	r3, [sp, #12]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3FE;
 801c872:	9b03      	ldr	r3, [sp, #12]
 801c874:	f023 0304 	bic.w	r3, r3, #4
 801c878:	9303      	str	r3, [sp, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 801c87a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c87e:	9a03      	ldr	r2, [sp, #12]
 801c880:	4313      	orrs	r3, r2
 801c882:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 801c884:	9b01      	ldr	r3, [sp, #4]
 801c886:	9a03      	ldr	r2, [sp, #12]
 801c888:	61da      	str	r2, [r3, #28]
}
 801c88a:	b004      	add	sp, #16
 801c88c:	4770      	bx	lr
 801c88e:	bf00      	nop

0801c890 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 801c890:	b084      	sub	sp, #16
 801c892:	9001      	str	r0, [sp, #4]
 801c894:	460b      	mov	r3, r1
 801c896:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr2 = 0;
 801c89a:	f04f 0300 	mov.w	r3, #0
 801c89e:	9303      	str	r3, [sp, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 801c8a0:	9b01      	ldr	r3, [sp, #4]
 801c8a2:	69db      	ldr	r3, [r3, #28]
 801c8a4:	9303      	str	r3, [sp, #12]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4FE);
 801c8a6:	9b03      	ldr	r3, [sp, #12]
 801c8a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801c8ac:	9303      	str	r3, [sp, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= ((uint32_t)TIM_OCFast << 8);
 801c8ae:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c8b2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c8b6:	9a03      	ldr	r2, [sp, #12]
 801c8b8:	4313      	orrs	r3, r2
 801c8ba:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 801c8bc:	9b01      	ldr	r3, [sp, #4]
 801c8be:	9a03      	ldr	r2, [sp, #12]
 801c8c0:	61da      	str	r2, [r3, #28]
}
 801c8c2:	b004      	add	sp, #16
 801c8c4:	4770      	bx	lr
 801c8c6:	bf00      	nop

0801c8c8 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 801c8c8:	b084      	sub	sp, #16
 801c8ca:	9001      	str	r0, [sp, #4]
 801c8cc:	460b      	mov	r3, r1
 801c8ce:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr1 = 0;
 801c8d2:	f04f 0300 	mov.w	r3, #0
 801c8d6:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 801c8d8:	9b01      	ldr	r3, [sp, #4]
 801c8da:	699b      	ldr	r3, [r3, #24]
 801c8dc:	9303      	str	r3, [sp, #12]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1CE;
 801c8de:	9b03      	ldr	r3, [sp, #12]
 801c8e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c8e4:	9303      	str	r3, [sp, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 801c8e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c8ea:	9a03      	ldr	r2, [sp, #12]
 801c8ec:	4313      	orrs	r3, r2
 801c8ee:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801c8f0:	9b01      	ldr	r3, [sp, #4]
 801c8f2:	9a03      	ldr	r2, [sp, #12]
 801c8f4:	619a      	str	r2, [r3, #24]
}
 801c8f6:	b004      	add	sp, #16
 801c8f8:	4770      	bx	lr
 801c8fa:	bf00      	nop

0801c8fc <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 801c8fc:	b084      	sub	sp, #16
 801c8fe:	9001      	str	r0, [sp, #4]
 801c900:	460b      	mov	r3, r1
 801c902:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr1 = 0;
 801c906:	f04f 0300 	mov.w	r3, #0
 801c90a:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 801c90c:	9b01      	ldr	r3, [sp, #4]
 801c90e:	699b      	ldr	r3, [r3, #24]
 801c910:	9303      	str	r3, [sp, #12]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC2CE;
 801c912:	9b03      	ldr	r3, [sp, #12]
 801c914:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801c918:	9303      	str	r3, [sp, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= ((uint32_t)TIM_OCClear << 8);
 801c91a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c91e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c922:	9a03      	ldr	r2, [sp, #12]
 801c924:	4313      	orrs	r3, r2
 801c926:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801c928:	9b01      	ldr	r3, [sp, #4]
 801c92a:	9a03      	ldr	r2, [sp, #12]
 801c92c:	619a      	str	r2, [r3, #24]
}
 801c92e:	b004      	add	sp, #16
 801c930:	4770      	bx	lr
 801c932:	bf00      	nop

0801c934 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 801c934:	b084      	sub	sp, #16
 801c936:	9001      	str	r0, [sp, #4]
 801c938:	460b      	mov	r3, r1
 801c93a:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr2 = 0;
 801c93e:	f04f 0300 	mov.w	r3, #0
 801c942:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 801c944:	9b01      	ldr	r3, [sp, #4]
 801c946:	69db      	ldr	r3, [r3, #28]
 801c948:	9303      	str	r3, [sp, #12]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3CE;
 801c94a:	9b03      	ldr	r3, [sp, #12]
 801c94c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c950:	9303      	str	r3, [sp, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 801c952:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c956:	9a03      	ldr	r2, [sp, #12]
 801c958:	4313      	orrs	r3, r2
 801c95a:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801c95c:	9b01      	ldr	r3, [sp, #4]
 801c95e:	9a03      	ldr	r2, [sp, #12]
 801c960:	61da      	str	r2, [r3, #28]
}
 801c962:	b004      	add	sp, #16
 801c964:	4770      	bx	lr
 801c966:	bf00      	nop

0801c968 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 801c968:	b084      	sub	sp, #16
 801c96a:	9001      	str	r0, [sp, #4]
 801c96c:	460b      	mov	r3, r1
 801c96e:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr2 = 0;
 801c972:	f04f 0300 	mov.w	r3, #0
 801c976:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 801c978:	9b01      	ldr	r3, [sp, #4]
 801c97a:	69db      	ldr	r3, [r3, #28]
 801c97c:	9303      	str	r3, [sp, #12]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC4CE;
 801c97e:	9b03      	ldr	r3, [sp, #12]
 801c980:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801c984:	9303      	str	r3, [sp, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= ((uint32_t)TIM_OCClear << 8);
 801c986:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c98a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c98e:	9a03      	ldr	r2, [sp, #12]
 801c990:	4313      	orrs	r3, r2
 801c992:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801c994:	9b01      	ldr	r3, [sp, #4]
 801c996:	9a03      	ldr	r2, [sp, #12]
 801c998:	61da      	str	r2, [r3, #28]
}
 801c99a:	b004      	add	sp, #16
 801c99c:	4770      	bx	lr
 801c99e:	bf00      	nop

0801c9a0 <TIM_ClearOC5Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC5Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 801c9a0:	b084      	sub	sp, #16
 801c9a2:	9001      	str	r0, [sp, #4]
 801c9a4:	460b      	mov	r3, r1
 801c9a6:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr3 = 0;
 801c9aa:	f04f 0300 	mov.w	r3, #0
 801c9ae:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr3 = TIMx->CCMR3;
 801c9b0:	9b01      	ldr	r3, [sp, #4]
 801c9b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c9b4:	9303      	str	r3, [sp, #12]

  /* Reset the OC5CE Bit */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC5CE;
 801c9b6:	9b03      	ldr	r3, [sp, #12]
 801c9b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c9bc:	9303      	str	r3, [sp, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr3 |= (uint32_t)(TIM_OCClear);
 801c9be:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c9c2:	9a03      	ldr	r2, [sp, #12]
 801c9c4:	4313      	orrs	r3, r2
 801c9c6:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 801c9c8:	9b01      	ldr	r3, [sp, #4]
 801c9ca:	9a03      	ldr	r2, [sp, #12]
 801c9cc:	655a      	str	r2, [r3, #84]	; 0x54
}
 801c9ce:	b004      	add	sp, #16
 801c9d0:	4770      	bx	lr
 801c9d2:	bf00      	nop

0801c9d4 <TIM_ClearOC6Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC6Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 801c9d4:	b084      	sub	sp, #16
 801c9d6:	9001      	str	r0, [sp, #4]
 801c9d8:	460b      	mov	r3, r1
 801c9da:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccmr3 = 0;
 801c9de:	f04f 0300 	mov.w	r3, #0
 801c9e2:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr3 = TIMx->CCMR3;
 801c9e4:	9b01      	ldr	r3, [sp, #4]
 801c9e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c9e8:	9303      	str	r3, [sp, #12]

  /* Reset the OC5CE Bit */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC6CE;
 801c9ea:	9b03      	ldr	r3, [sp, #12]
 801c9ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801c9f0:	9303      	str	r3, [sp, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr3 |= ((uint32_t)TIM_OCClear << 8);
 801c9f2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c9f6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c9fa:	9a03      	ldr	r2, [sp, #12]
 801c9fc:	4313      	orrs	r3, r2
 801c9fe:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 801ca00:	9b01      	ldr	r3, [sp, #4]
 801ca02:	9a03      	ldr	r2, [sp, #12]
 801ca04:	655a      	str	r2, [r3, #84]	; 0x54
}
 801ca06:	b004      	add	sp, #16
 801ca08:	4770      	bx	lr
 801ca0a:	bf00      	nop

0801ca0c <TIM_SelectOCREFClear>:
  *     @arg TIM_OCReferenceClear_ETRF: The internal OCreference clear input is connected to ETRF.
  *     @arg TIM_OCReferenceClear_OCREFCLR: The internal OCreference clear input is connected to OCREF_CLR input.  
  * @retval None
  */
void TIM_SelectOCREFClear(TIM_TypeDef* TIMx, uint16_t TIM_OCReferenceClear)
{
 801ca0c:	b082      	sub	sp, #8
 801ca0e:	9001      	str	r0, [sp, #4]
 801ca10:	460b      	mov	r3, r1
 801ca12:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(TIM_OCREFERENCECECLEAR_SOURCE(TIM_OCReferenceClear));

  /* Set the TIM_OCReferenceClear source */
  TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
 801ca16:	9b01      	ldr	r3, [sp, #4]
 801ca18:	689a      	ldr	r2, [r3, #8]
 801ca1a:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 801ca1e:	4013      	ands	r3, r2
 801ca20:	9a01      	ldr	r2, [sp, #4]
 801ca22:	6093      	str	r3, [r2, #8]
  TIMx->SMCR |=  TIM_OCReferenceClear;
 801ca24:	9b01      	ldr	r3, [sp, #4]
 801ca26:	689a      	ldr	r2, [r3, #8]
 801ca28:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ca2c:	431a      	orrs	r2, r3
 801ca2e:	9b01      	ldr	r3, [sp, #4]
 801ca30:	609a      	str	r2, [r3, #8]
}
 801ca32:	b002      	add	sp, #8
 801ca34:	4770      	bx	lr
 801ca36:	bf00      	nop

0801ca38 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 801ca38:	b084      	sub	sp, #16
 801ca3a:	9001      	str	r0, [sp, #4]
 801ca3c:	460b      	mov	r3, r1
 801ca3e:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccer = 0;
 801ca42:	f04f 0300 	mov.w	r3, #0
 801ca46:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 801ca48:	9b01      	ldr	r3, [sp, #4]
 801ca4a:	6a1b      	ldr	r3, [r3, #32]
 801ca4c:	9303      	str	r3, [sp, #12]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint32_t)(~TIM_CCER_CC1P);
 801ca4e:	9b03      	ldr	r3, [sp, #12]
 801ca50:	f023 0302 	bic.w	r3, r3, #2
 801ca54:	9303      	str	r3, [sp, #12]
  tmpccer |= TIM_OCPolarity;
 801ca56:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ca5a:	9a03      	ldr	r2, [sp, #12]
 801ca5c:	4313      	orrs	r3, r2
 801ca5e:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801ca60:	9b01      	ldr	r3, [sp, #4]
 801ca62:	9a03      	ldr	r2, [sp, #12]
 801ca64:	621a      	str	r2, [r3, #32]
}
 801ca66:	b004      	add	sp, #16
 801ca68:	4770      	bx	lr
 801ca6a:	bf00      	nop

0801ca6c <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 801ca6c:	b084      	sub	sp, #16
 801ca6e:	9001      	str	r0, [sp, #4]
 801ca70:	460b      	mov	r3, r1
 801ca72:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccer = 0;
 801ca76:	f04f 0300 	mov.w	r3, #0
 801ca7a:	9303      	str	r3, [sp, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 801ca7c:	9b01      	ldr	r3, [sp, #4]
 801ca7e:	6a1b      	ldr	r3, [r3, #32]
 801ca80:	9303      	str	r3, [sp, #12]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 801ca82:	9b03      	ldr	r3, [sp, #12]
 801ca84:	f023 0308 	bic.w	r3, r3, #8
 801ca88:	9303      	str	r3, [sp, #12]
  tmpccer |= TIM_OCNPolarity;
 801ca8a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ca8e:	9a03      	ldr	r2, [sp, #12]
 801ca90:	4313      	orrs	r3, r2
 801ca92:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801ca94:	9b01      	ldr	r3, [sp, #4]
 801ca96:	9a03      	ldr	r2, [sp, #12]
 801ca98:	621a      	str	r2, [r3, #32]
}
 801ca9a:	b004      	add	sp, #16
 801ca9c:	4770      	bx	lr
 801ca9e:	bf00      	nop

0801caa0 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 801caa0:	b084      	sub	sp, #16
 801caa2:	9001      	str	r0, [sp, #4]
 801caa4:	460b      	mov	r3, r1
 801caa6:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccer = 0;
 801caaa:	f04f 0300 	mov.w	r3, #0
 801caae:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 801cab0:	9b01      	ldr	r3, [sp, #4]
 801cab2:	6a1b      	ldr	r3, [r3, #32]
 801cab4:	9303      	str	r3, [sp, #12]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint32_t)(~TIM_CCER_CC2P);
 801cab6:	9b03      	ldr	r3, [sp, #12]
 801cab8:	f023 0320 	bic.w	r3, r3, #32
 801cabc:	9303      	str	r3, [sp, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 4);
 801cabe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cac2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801cac6:	9a03      	ldr	r2, [sp, #12]
 801cac8:	4313      	orrs	r3, r2
 801caca:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801cacc:	9b01      	ldr	r3, [sp, #4]
 801cace:	9a03      	ldr	r2, [sp, #12]
 801cad0:	621a      	str	r2, [r3, #32]
}
 801cad2:	b004      	add	sp, #16
 801cad4:	4770      	bx	lr
 801cad6:	bf00      	nop

0801cad8 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 801cad8:	b084      	sub	sp, #16
 801cada:	9001      	str	r0, [sp, #4]
 801cadc:	460b      	mov	r3, r1
 801cade:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccer = 0;
 801cae2:	f04f 0300 	mov.w	r3, #0
 801cae6:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 801cae8:	9b01      	ldr	r3, [sp, #4]
 801caea:	6a1b      	ldr	r3, [r3, #32]
 801caec:	9303      	str	r3, [sp, #12]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 801caee:	9b03      	ldr	r3, [sp, #12]
 801caf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801caf4:	9303      	str	r3, [sp, #12]
  tmpccer |= ((uint32_t)TIM_OCNPolarity << 4);
 801caf6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cafa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801cafe:	9a03      	ldr	r2, [sp, #12]
 801cb00:	4313      	orrs	r3, r2
 801cb02:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801cb04:	9b01      	ldr	r3, [sp, #4]
 801cb06:	9a03      	ldr	r2, [sp, #12]
 801cb08:	621a      	str	r2, [r3, #32]
}
 801cb0a:	b004      	add	sp, #16
 801cb0c:	4770      	bx	lr
 801cb0e:	bf00      	nop

0801cb10 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 801cb10:	b084      	sub	sp, #16
 801cb12:	9001      	str	r0, [sp, #4]
 801cb14:	460b      	mov	r3, r1
 801cb16:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccer = 0;
 801cb1a:	f04f 0300 	mov.w	r3, #0
 801cb1e:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 801cb20:	9b01      	ldr	r3, [sp, #4]
 801cb22:	6a1b      	ldr	r3, [r3, #32]
 801cb24:	9303      	str	r3, [sp, #12]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 801cb26:	9b03      	ldr	r3, [sp, #12]
 801cb28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801cb2c:	9303      	str	r3, [sp, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 8);
 801cb2e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cb32:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801cb36:	9a03      	ldr	r2, [sp, #12]
 801cb38:	4313      	orrs	r3, r2
 801cb3a:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801cb3c:	9b01      	ldr	r3, [sp, #4]
 801cb3e:	9a03      	ldr	r2, [sp, #12]
 801cb40:	621a      	str	r2, [r3, #32]
}
 801cb42:	b004      	add	sp, #16
 801cb44:	4770      	bx	lr
 801cb46:	bf00      	nop

0801cb48 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 801cb48:	b084      	sub	sp, #16
 801cb4a:	9001      	str	r0, [sp, #4]
 801cb4c:	460b      	mov	r3, r1
 801cb4e:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccer = 0;
 801cb52:	f04f 0300 	mov.w	r3, #0
 801cb56:	9303      	str	r3, [sp, #12]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 801cb58:	9b01      	ldr	r3, [sp, #4]
 801cb5a:	6a1b      	ldr	r3, [r3, #32]
 801cb5c:	9303      	str	r3, [sp, #12]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 801cb5e:	9b03      	ldr	r3, [sp, #12]
 801cb60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801cb64:	9303      	str	r3, [sp, #12]
  tmpccer |= ((uint32_t)TIM_OCNPolarity << 8);
 801cb66:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cb6a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801cb6e:	9a03      	ldr	r2, [sp, #12]
 801cb70:	4313      	orrs	r3, r2
 801cb72:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801cb74:	9b01      	ldr	r3, [sp, #4]
 801cb76:	9a03      	ldr	r2, [sp, #12]
 801cb78:	621a      	str	r2, [r3, #32]
}
 801cb7a:	b004      	add	sp, #16
 801cb7c:	4770      	bx	lr
 801cb7e:	bf00      	nop

0801cb80 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 801cb80:	b084      	sub	sp, #16
 801cb82:	9001      	str	r0, [sp, #4]
 801cb84:	460b      	mov	r3, r1
 801cb86:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccer = 0;
 801cb8a:	f04f 0300 	mov.w	r3, #0
 801cb8e:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 801cb90:	9b01      	ldr	r3, [sp, #4]
 801cb92:	6a1b      	ldr	r3, [r3, #32]
 801cb94:	9303      	str	r3, [sp, #12]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 801cb96:	9b03      	ldr	r3, [sp, #12]
 801cb98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801cb9c:	9303      	str	r3, [sp, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 12);
 801cb9e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cba2:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801cba6:	9a03      	ldr	r2, [sp, #12]
 801cba8:	4313      	orrs	r3, r2
 801cbaa:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801cbac:	9b01      	ldr	r3, [sp, #4]
 801cbae:	9a03      	ldr	r2, [sp, #12]
 801cbb0:	621a      	str	r2, [r3, #32]
}
 801cbb2:	b004      	add	sp, #16
 801cbb4:	4770      	bx	lr
 801cbb6:	bf00      	nop

0801cbb8 <TIM_OC5PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC5PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 801cbb8:	b084      	sub	sp, #16
 801cbba:	9001      	str	r0, [sp, #4]
 801cbbc:	460b      	mov	r3, r1
 801cbbe:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccer = 0;
 801cbc2:	f04f 0300 	mov.w	r3, #0
 801cbc6:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 801cbc8:	9b01      	ldr	r3, [sp, #4]
 801cbca:	6a1b      	ldr	r3, [r3, #32]
 801cbcc:	9303      	str	r3, [sp, #12]

  /* Set or Reset the CC5P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
 801cbce:	9b03      	ldr	r3, [sp, #12]
 801cbd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801cbd4:	9303      	str	r3, [sp, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 16);
 801cbd6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cbda:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801cbde:	9a03      	ldr	r2, [sp, #12]
 801cbe0:	4313      	orrs	r3, r2
 801cbe2:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801cbe4:	9b01      	ldr	r3, [sp, #4]
 801cbe6:	9a03      	ldr	r2, [sp, #12]
 801cbe8:	621a      	str	r2, [r3, #32]
}
 801cbea:	b004      	add	sp, #16
 801cbec:	4770      	bx	lr
 801cbee:	bf00      	nop

0801cbf0 <TIM_OC6PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC6PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 801cbf0:	b084      	sub	sp, #16
 801cbf2:	9001      	str	r0, [sp, #4]
 801cbf4:	460b      	mov	r3, r1
 801cbf6:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tmpccer = 0;
 801cbfa:	f04f 0300 	mov.w	r3, #0
 801cbfe:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 801cc00:	9b01      	ldr	r3, [sp, #4]
 801cc02:	6a1b      	ldr	r3, [r3, #32]
 801cc04:	9303      	str	r3, [sp, #12]

  /* Set or Reset the CC6P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801cc06:	9b03      	ldr	r3, [sp, #12]
 801cc08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801cc0c:	9303      	str	r3, [sp, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 20);
 801cc0e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cc12:	ea4f 5303 	mov.w	r3, r3, lsl #20
 801cc16:	9a03      	ldr	r2, [sp, #12]
 801cc18:	4313      	orrs	r3, r2
 801cc1a:	9303      	str	r3, [sp, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801cc1c:	9b01      	ldr	r3, [sp, #4]
 801cc1e:	9a03      	ldr	r2, [sp, #12]
 801cc20:	621a      	str	r2, [r3, #32]
}
 801cc22:	b004      	add	sp, #16
 801cc24:	4770      	bx	lr
 801cc26:	bf00      	nop

0801cc28 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 801cc28:	b084      	sub	sp, #16
 801cc2a:	9001      	str	r0, [sp, #4]
 801cc2c:	4613      	mov	r3, r2
 801cc2e:	460a      	mov	r2, r1
 801cc30:	f8ad 2002 	strh.w	r2, [sp, #2]
 801cc34:	f8ad 3000 	strh.w	r3, [sp]
  uint32_t tmp = 0;
 801cc38:	f04f 0300 	mov.w	r3, #0
 801cc3c:	9303      	str	r3, [sp, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = (uint32_t)CCER_CCE_SET << (uint32_t)TIM_Channel;
 801cc3e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cc42:	f04f 0201 	mov.w	r2, #1
 801cc46:	fa02 f303 	lsl.w	r3, r2, r3
 801cc4a:	9303      	str	r3, [sp, #12]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint32_t)(~tmp);
 801cc4c:	9b01      	ldr	r3, [sp, #4]
 801cc4e:	6a1a      	ldr	r2, [r3, #32]
 801cc50:	9b03      	ldr	r3, [sp, #12]
 801cc52:	ea6f 0303 	mvn.w	r3, r3
 801cc56:	401a      	ands	r2, r3
 801cc58:	9b01      	ldr	r3, [sp, #4]
 801cc5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  ((uint32_t)TIM_CCx << (uint32_t)TIM_Channel);
 801cc5c:	9b01      	ldr	r3, [sp, #4]
 801cc5e:	6a1a      	ldr	r2, [r3, #32]
 801cc60:	f8bd 1000 	ldrh.w	r1, [sp]
 801cc64:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cc68:	fa01 f303 	lsl.w	r3, r1, r3
 801cc6c:	431a      	orrs	r2, r3
 801cc6e:	9b01      	ldr	r3, [sp, #4]
 801cc70:	621a      	str	r2, [r3, #32]
}
 801cc72:	b004      	add	sp, #16
 801cc74:	4770      	bx	lr
 801cc76:	bf00      	nop

0801cc78 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 801cc78:	b084      	sub	sp, #16
 801cc7a:	9001      	str	r0, [sp, #4]
 801cc7c:	4613      	mov	r3, r2
 801cc7e:	460a      	mov	r2, r1
 801cc80:	f8ad 2002 	strh.w	r2, [sp, #2]
 801cc84:	f8ad 3000 	strh.w	r3, [sp]
  uint32_t tmp = 0;
 801cc88:	f04f 0300 	mov.w	r3, #0
 801cc8c:	9303      	str	r3, [sp, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = (uint32_t)CCER_CCNE_SET << (uint32_t)TIM_Channel;
 801cc8e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cc92:	f04f 0204 	mov.w	r2, #4
 801cc96:	fa02 f303 	lsl.w	r3, r2, r3
 801cc9a:	9303      	str	r3, [sp, #12]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint32_t) ~tmp;
 801cc9c:	9b01      	ldr	r3, [sp, #4]
 801cc9e:	6a1a      	ldr	r2, [r3, #32]
 801cca0:	9b03      	ldr	r3, [sp, #12]
 801cca2:	ea6f 0303 	mvn.w	r3, r3
 801cca6:	401a      	ands	r2, r3
 801cca8:	9b01      	ldr	r3, [sp, #4]
 801ccaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  ((uint32_t)TIM_CCxN << (uint32_t)TIM_Channel);
 801ccac:	9b01      	ldr	r3, [sp, #4]
 801ccae:	6a1a      	ldr	r2, [r3, #32]
 801ccb0:	f8bd 1000 	ldrh.w	r1, [sp]
 801ccb4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ccb8:	fa01 f303 	lsl.w	r3, r1, r3
 801ccbc:	431a      	orrs	r2, r3
 801ccbe:	9b01      	ldr	r3, [sp, #4]
 801ccc0:	621a      	str	r2, [r3, #32]
}
 801ccc2:	b004      	add	sp, #16
 801ccc4:	4770      	bx	lr
 801ccc6:	bf00      	nop

0801ccc8 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 801ccc8:	b500      	push	{lr}
 801ccca:	b083      	sub	sp, #12
 801cccc:	9001      	str	r0, [sp, #4]
 801ccce:	9100      	str	r1, [sp, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 801ccd0:	9b00      	ldr	r3, [sp, #0]
 801ccd2:	881b      	ldrh	r3, [r3, #0]
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	d10f      	bne.n	801ccf8 <TIM_ICInit+0x30>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801ccd8:	9b00      	ldr	r3, [sp, #0]
 801ccda:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 801ccdc:	9b00      	ldr	r3, [sp, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801ccde:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 801cce0:	9b00      	ldr	r3, [sp, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801cce2:	891b      	ldrh	r3, [r3, #8]
 801cce4:	9801      	ldr	r0, [sp, #4]
 801cce6:	f000 fce5 	bl	801d6b4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801ccea:	9b00      	ldr	r3, [sp, #0]
 801ccec:	88db      	ldrh	r3, [r3, #6]
 801ccee:	9801      	ldr	r0, [sp, #4]
 801ccf0:	4619      	mov	r1, r3
 801ccf2:	f000 f8dd 	bl	801ceb0 <TIM_SetIC1Prescaler>
 801ccf6:	e036      	b.n	801cd66 <TIM_ICInit+0x9e>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 801ccf8:	9b00      	ldr	r3, [sp, #0]
 801ccfa:	881b      	ldrh	r3, [r3, #0]
 801ccfc:	2b04      	cmp	r3, #4
 801ccfe:	d10f      	bne.n	801cd20 <TIM_ICInit+0x58>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801cd00:	9b00      	ldr	r3, [sp, #0]
 801cd02:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 801cd04:	9b00      	ldr	r3, [sp, #0]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801cd06:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 801cd08:	9b00      	ldr	r3, [sp, #0]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801cd0a:	891b      	ldrh	r3, [r3, #8]
 801cd0c:	9801      	ldr	r0, [sp, #4]
 801cd0e:	f000 fd0d 	bl	801d72c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801cd12:	9b00      	ldr	r3, [sp, #0]
 801cd14:	88db      	ldrh	r3, [r3, #6]
 801cd16:	9801      	ldr	r0, [sp, #4]
 801cd18:	4619      	mov	r1, r3
 801cd1a:	f000 f8dd 	bl	801ced8 <TIM_SetIC2Prescaler>
 801cd1e:	e022      	b.n	801cd66 <TIM_ICInit+0x9e>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 801cd20:	9b00      	ldr	r3, [sp, #0]
 801cd22:	881b      	ldrh	r3, [r3, #0]
 801cd24:	2b08      	cmp	r3, #8
 801cd26:	d10f      	bne.n	801cd48 <TIM_ICInit+0x80>
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 801cd28:	9b00      	ldr	r3, [sp, #0]
 801cd2a:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 801cd2c:	9b00      	ldr	r3, [sp, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 801cd2e:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 801cd30:	9b00      	ldr	r3, [sp, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 801cd32:	891b      	ldrh	r3, [r3, #8]
 801cd34:	9801      	ldr	r0, [sp, #4]
 801cd36:	f000 fd45 	bl	801d7c4 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801cd3a:	9b00      	ldr	r3, [sp, #0]
 801cd3c:	88db      	ldrh	r3, [r3, #6]
 801cd3e:	9801      	ldr	r0, [sp, #4]
 801cd40:	4619      	mov	r1, r3
 801cd42:	f000 f8df 	bl	801cf04 <TIM_SetIC3Prescaler>
 801cd46:	e00e      	b.n	801cd66 <TIM_ICInit+0x9e>
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801cd48:	9b00      	ldr	r3, [sp, #0]
 801cd4a:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 801cd4c:	9b00      	ldr	r3, [sp, #0]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801cd4e:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 801cd50:	9b00      	ldr	r3, [sp, #0]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801cd52:	891b      	ldrh	r3, [r3, #8]
 801cd54:	9801      	ldr	r0, [sp, #4]
 801cd56:	f000 fd8d 	bl	801d874 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801cd5a:	9b00      	ldr	r3, [sp, #0]
 801cd5c:	88db      	ldrh	r3, [r3, #6]
 801cd5e:	9801      	ldr	r0, [sp, #4]
 801cd60:	4619      	mov	r1, r3
 801cd62:	f000 f8e5 	bl	801cf30 <TIM_SetIC4Prescaler>
  }
}
 801cd66:	b003      	add	sp, #12
 801cd68:	bd00      	pop	{pc}
 801cd6a:	bf00      	nop

0801cd6c <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 801cd6c:	b082      	sub	sp, #8
 801cd6e:	9001      	str	r0, [sp, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 801cd70:	9b01      	ldr	r3, [sp, #4]
 801cd72:	f04f 0200 	mov.w	r2, #0
 801cd76:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 801cd78:	9b01      	ldr	r3, [sp, #4]
 801cd7a:	f04f 0200 	mov.w	r2, #0
 801cd7e:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 801cd80:	9b01      	ldr	r3, [sp, #4]
 801cd82:	f04f 0201 	mov.w	r2, #1
 801cd86:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 801cd88:	9b01      	ldr	r3, [sp, #4]
 801cd8a:	f04f 0200 	mov.w	r2, #0
 801cd8e:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 801cd90:	9b01      	ldr	r3, [sp, #4]
 801cd92:	f04f 0200 	mov.w	r2, #0
 801cd96:	811a      	strh	r2, [r3, #8]
}
 801cd98:	b002      	add	sp, #8
 801cd9a:	4770      	bx	lr

0801cd9c <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 801cd9c:	b500      	push	{lr}
 801cd9e:	b085      	sub	sp, #20
 801cda0:	9001      	str	r0, [sp, #4]
 801cda2:	9100      	str	r1, [sp, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 801cda4:	f04f 0300 	mov.w	r3, #0
 801cda8:	f8ad 300e 	strh.w	r3, [sp, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 801cdac:	f04f 0301 	mov.w	r3, #1
 801cdb0:	f8ad 300c 	strh.w	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 801cdb4:	9b00      	ldr	r3, [sp, #0]
 801cdb6:	885b      	ldrh	r3, [r3, #2]
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	d104      	bne.n	801cdc6 <TIM_PWMIConfig+0x2a>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 801cdbc:	f04f 0302 	mov.w	r3, #2
 801cdc0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cdc4:	e003      	b.n	801cdce <TIM_PWMIConfig+0x32>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 801cdc6:	f04f 0300 	mov.w	r3, #0
 801cdca:	f8ad 300e 	strh.w	r3, [sp, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 801cdce:	9b00      	ldr	r3, [sp, #0]
 801cdd0:	889b      	ldrh	r3, [r3, #4]
 801cdd2:	2b01      	cmp	r3, #1
 801cdd4:	d104      	bne.n	801cde0 <TIM_PWMIConfig+0x44>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 801cdd6:	f04f 0302 	mov.w	r3, #2
 801cdda:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cdde:	e003      	b.n	801cde8 <TIM_PWMIConfig+0x4c>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 801cde0:	f04f 0301 	mov.w	r3, #1
 801cde4:	f8ad 300c 	strh.w	r3, [sp, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 801cde8:	9b00      	ldr	r3, [sp, #0]
 801cdea:	881b      	ldrh	r3, [r3, #0]
 801cdec:	2b00      	cmp	r3, #0
 801cdee:	d11e      	bne.n	801ce2e <TIM_PWMIConfig+0x92>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 801cdf0:	9b00      	ldr	r3, [sp, #0]
 801cdf2:	8859      	ldrh	r1, [r3, #2]
 801cdf4:	9b00      	ldr	r3, [sp, #0]
 801cdf6:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 801cdf8:	9b00      	ldr	r3, [sp, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 801cdfa:	891b      	ldrh	r3, [r3, #8]
 801cdfc:	9801      	ldr	r0, [sp, #4]
 801cdfe:	f000 fc59 	bl	801d6b4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801ce02:	9b00      	ldr	r3, [sp, #0]
 801ce04:	88db      	ldrh	r3, [r3, #6]
 801ce06:	9801      	ldr	r0, [sp, #4]
 801ce08:	4619      	mov	r1, r3
 801ce0a:	f000 f851 	bl	801ceb0 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 801ce0e:	9b00      	ldr	r3, [sp, #0]
 801ce10:	891b      	ldrh	r3, [r3, #8]
 801ce12:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 801ce16:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801ce1a:	9801      	ldr	r0, [sp, #4]
 801ce1c:	f000 fc86 	bl	801d72c <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801ce20:	9b00      	ldr	r3, [sp, #0]
 801ce22:	88db      	ldrh	r3, [r3, #6]
 801ce24:	9801      	ldr	r0, [sp, #4]
 801ce26:	4619      	mov	r1, r3
 801ce28:	f000 f856 	bl	801ced8 <TIM_SetIC2Prescaler>
 801ce2c:	e01d      	b.n	801ce6a <TIM_PWMIConfig+0xce>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 801ce2e:	9b00      	ldr	r3, [sp, #0]
 801ce30:	8859      	ldrh	r1, [r3, #2]
 801ce32:	9b00      	ldr	r3, [sp, #0]
 801ce34:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 801ce36:	9b00      	ldr	r3, [sp, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 801ce38:	891b      	ldrh	r3, [r3, #8]
 801ce3a:	9801      	ldr	r0, [sp, #4]
 801ce3c:	f000 fc76 	bl	801d72c <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801ce40:	9b00      	ldr	r3, [sp, #0]
 801ce42:	88db      	ldrh	r3, [r3, #6]
 801ce44:	9801      	ldr	r0, [sp, #4]
 801ce46:	4619      	mov	r1, r3
 801ce48:	f000 f846 	bl	801ced8 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 801ce4c:	9b00      	ldr	r3, [sp, #0]
 801ce4e:	891b      	ldrh	r3, [r3, #8]
 801ce50:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 801ce54:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801ce58:	9801      	ldr	r0, [sp, #4]
 801ce5a:	f000 fc2b 	bl	801d6b4 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801ce5e:	9b00      	ldr	r3, [sp, #0]
 801ce60:	88db      	ldrh	r3, [r3, #6]
 801ce62:	9801      	ldr	r0, [sp, #4]
 801ce64:	4619      	mov	r1, r3
 801ce66:	f000 f823 	bl	801ceb0 <TIM_SetIC1Prescaler>
  }
}
 801ce6a:	b005      	add	sp, #20
 801ce6c:	bd00      	pop	{pc}
 801ce6e:	bf00      	nop

0801ce70 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 801ce70:	b082      	sub	sp, #8
 801ce72:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 801ce74:	9b01      	ldr	r3, [sp, #4]
 801ce76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 801ce78:	4618      	mov	r0, r3
 801ce7a:	b002      	add	sp, #8
 801ce7c:	4770      	bx	lr
 801ce7e:	bf00      	nop

0801ce80 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8 or 15 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 801ce80:	b082      	sub	sp, #8
 801ce82:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 801ce84:	9b01      	ldr	r3, [sp, #4]
 801ce86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 801ce88:	4618      	mov	r0, r3
 801ce8a:	b002      	add	sp, #8
 801ce8c:	4770      	bx	lr
 801ce8e:	bf00      	nop

0801ce90 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 801ce90:	b082      	sub	sp, #8
 801ce92:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 801ce94:	9b01      	ldr	r3, [sp, #4]
 801ce96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 801ce98:	4618      	mov	r0, r3
 801ce9a:	b002      	add	sp, #8
 801ce9c:	4770      	bx	lr
 801ce9e:	bf00      	nop

0801cea0 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 801cea0:	b082      	sub	sp, #8
 801cea2:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 801cea4:	9b01      	ldr	r3, [sp, #4]
 801cea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 801cea8:	4618      	mov	r0, r3
 801ceaa:	b002      	add	sp, #8
 801ceac:	4770      	bx	lr
 801ceae:	bf00      	nop

0801ceb0 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 801ceb0:	b082      	sub	sp, #8
 801ceb2:	9001      	str	r0, [sp, #4]
 801ceb4:	460b      	mov	r3, r1
 801ceb6:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC1PSC;
 801ceba:	9b01      	ldr	r3, [sp, #4]
 801cebc:	699b      	ldr	r3, [r3, #24]
 801cebe:	f023 020c 	bic.w	r2, r3, #12
 801cec2:	9b01      	ldr	r3, [sp, #4]
 801cec4:	619a      	str	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 801cec6:	9b01      	ldr	r3, [sp, #4]
 801cec8:	699a      	ldr	r2, [r3, #24]
 801ceca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cece:	431a      	orrs	r2, r3
 801ced0:	9b01      	ldr	r3, [sp, #4]
 801ced2:	619a      	str	r2, [r3, #24]
}
 801ced4:	b002      	add	sp, #8
 801ced6:	4770      	bx	lr

0801ced8 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 801ced8:	b082      	sub	sp, #8
 801ceda:	9001      	str	r0, [sp, #4]
 801cedc:	460b      	mov	r3, r1
 801cede:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC2PSC;
 801cee2:	9b01      	ldr	r3, [sp, #4]
 801cee4:	699b      	ldr	r3, [r3, #24]
 801cee6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801ceea:	9b01      	ldr	r3, [sp, #4]
 801ceec:	619a      	str	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint32_t)((uint32_t)TIM_ICPSC << 8);
 801ceee:	9b01      	ldr	r3, [sp, #4]
 801cef0:	699a      	ldr	r2, [r3, #24]
 801cef2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cef6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801cefa:	431a      	orrs	r2, r3
 801cefc:	9b01      	ldr	r3, [sp, #4]
 801cefe:	619a      	str	r2, [r3, #24]
}
 801cf00:	b002      	add	sp, #8
 801cf02:	4770      	bx	lr

0801cf04 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 801cf04:	b082      	sub	sp, #8
 801cf06:	9001      	str	r0, [sp, #4]
 801cf08:	460b      	mov	r3, r1
 801cf0a:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 801cf0e:	9b01      	ldr	r3, [sp, #4]
 801cf10:	69da      	ldr	r2, [r3, #28]
 801cf12:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 801cf16:	4013      	ands	r3, r2
 801cf18:	9a01      	ldr	r2, [sp, #4]
 801cf1a:	61d3      	str	r3, [r2, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 801cf1c:	9b01      	ldr	r3, [sp, #4]
 801cf1e:	69da      	ldr	r2, [r3, #28]
 801cf20:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cf24:	431a      	orrs	r2, r3
 801cf26:	9b01      	ldr	r3, [sp, #4]
 801cf28:	61da      	str	r2, [r3, #28]
}
 801cf2a:	b002      	add	sp, #8
 801cf2c:	4770      	bx	lr
 801cf2e:	bf00      	nop

0801cf30 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 801cf30:	b082      	sub	sp, #8
 801cf32:	9001      	str	r0, [sp, #4]
 801cf34:	460b      	mov	r3, r1
 801cf36:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 801cf3a:	9b01      	ldr	r3, [sp, #4]
 801cf3c:	69da      	ldr	r2, [r3, #28]
 801cf3e:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
 801cf42:	4013      	ands	r3, r2
 801cf44:	9a01      	ldr	r2, [sp, #4]
 801cf46:	61d3      	str	r3, [r2, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 801cf48:	9b01      	ldr	r3, [sp, #4]
 801cf4a:	69da      	ldr	r2, [r3, #28]
 801cf4c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cf50:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801cf54:	b29b      	uxth	r3, r3
 801cf56:	431a      	orrs	r2, r3
 801cf58:	9b01      	ldr	r3, [sp, #4]
 801cf5a:	61da      	str	r2, [r3, #28]
}
 801cf5c:	b002      	add	sp, #8
 801cf5e:	4770      	bx	lr

0801cf60 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 801cf60:	b082      	sub	sp, #8
 801cf62:	9001      	str	r0, [sp, #4]
 801cf64:	9100      	str	r1, [sp, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 801cf66:	9b00      	ldr	r3, [sp, #0]
 801cf68:	881a      	ldrh	r2, [r3, #0]
 801cf6a:	9b00      	ldr	r3, [sp, #0]
 801cf6c:	885b      	ldrh	r3, [r3, #2]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 801cf6e:	4313      	orrs	r3, r2
 801cf70:	b29a      	uxth	r2, r3
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 801cf72:	9b00      	ldr	r3, [sp, #0]
 801cf74:	889b      	ldrh	r3, [r3, #4]
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 801cf76:	4313      	orrs	r3, r2
 801cf78:	b29a      	uxth	r2, r3
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 801cf7a:	9b00      	ldr	r3, [sp, #0]
 801cf7c:	88db      	ldrh	r3, [r3, #6]
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 801cf7e:	4313      	orrs	r3, r2
 801cf80:	b29a      	uxth	r2, r3
 801cf82:	9b00      	ldr	r3, [sp, #0]
 801cf84:	891b      	ldrh	r3, [r3, #8]
 801cf86:	4313      	orrs	r3, r2
 801cf88:	b29a      	uxth	r2, r3
 801cf8a:	9b00      	ldr	r3, [sp, #0]
 801cf8c:	895b      	ldrh	r3, [r3, #10]
 801cf8e:	4313      	orrs	r3, r2
 801cf90:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 801cf92:	9b00      	ldr	r3, [sp, #0]
 801cf94:	899b      	ldrh	r3, [r3, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 801cf96:	4313      	orrs	r3, r2
 801cf98:	b29b      	uxth	r3, r3
 801cf9a:	461a      	mov	r2, r3
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 801cf9c:	9b01      	ldr	r3, [sp, #4]
 801cf9e:	645a      	str	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 801cfa0:	b002      	add	sp, #8
 801cfa2:	4770      	bx	lr

0801cfa4 <TIM_Break1Config>:
  * @param  TIM_Break1Filter: specifies the Break1 filter value.
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_Break1Config(TIM_TypeDef* TIMx, uint32_t TIM_Break1Polarity, uint8_t TIM_Break1Filter)
{   /* Check the parameters */
 801cfa4:	b084      	sub	sp, #16
 801cfa6:	9003      	str	r0, [sp, #12]
 801cfa8:	9102      	str	r1, [sp, #8]
 801cfaa:	4613      	mov	r3, r2
 801cfac:	f88d 3007 	strb.w	r3, [sp, #7]
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_BREAK1_FILTER(TIM_Break1Filter));

  /* Reset the BKP and BKF Bits */
  TIMx->BDTR &= (uint32_t)~ (TIM_BDTR_BKP | TIM_BDTR_BKF);
 801cfb0:	9b03      	ldr	r3, [sp, #12]
 801cfb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cfb4:	f423 2272 	bic.w	r2, r3, #991232	; 0xf2000
 801cfb8:	9b03      	ldr	r3, [sp, #12]
 801cfba:	645a      	str	r2, [r3, #68]	; 0x44
  /* Configure the Break1 polarity and filter */
  TIMx->BDTR |=	TIM_Break1Polarity |((uint32_t)TIM_Break1Filter << 16);
 801cfbc:	9b03      	ldr	r3, [sp, #12]
 801cfbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801cfc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801cfc4:	ea4f 4103 	mov.w	r1, r3, lsl #16
 801cfc8:	9b02      	ldr	r3, [sp, #8]
 801cfca:	430b      	orrs	r3, r1
 801cfcc:	431a      	orrs	r2, r3
 801cfce:	9b03      	ldr	r3, [sp, #12]
 801cfd0:	645a      	str	r2, [r3, #68]	; 0x44
}
 801cfd2:	b004      	add	sp, #16
 801cfd4:	4770      	bx	lr
 801cfd6:	bf00      	nop

0801cfd8 <TIM_Break2Config>:
  * @param  TIM_Break2Filter: specifies the Break2 filter value.
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_Break2Config(TIM_TypeDef* TIMx, uint32_t TIM_Break2Polarity, uint8_t TIM_Break2Filter)
{
 801cfd8:	b084      	sub	sp, #16
 801cfda:	9003      	str	r0, [sp, #12]
 801cfdc:	9102      	str	r1, [sp, #8]
 801cfde:	4613      	mov	r3, r2
 801cfe0:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_BREAK2_FILTER(TIM_Break2Filter));

  /* Reset the BKP and BKF Bits */
  TIMx->BDTR &= (uint32_t)~ (TIM_BDTR_BK2P | TIM_BDTR_BK2F);
 801cfe4:	9b03      	ldr	r3, [sp, #12]
 801cfe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cfe8:	f023 723c 	bic.w	r2, r3, #49283072	; 0x2f00000
 801cfec:	9b03      	ldr	r3, [sp, #12]
 801cfee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure the Break1 polarity and filter */
  TIMx->BDTR |=	TIM_Break2Polarity |((uint32_t)TIM_Break2Filter << 20);
 801cff0:	9b03      	ldr	r3, [sp, #12]
 801cff2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801cff4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801cff8:	ea4f 5103 	mov.w	r1, r3, lsl #20
 801cffc:	9b02      	ldr	r3, [sp, #8]
 801cffe:	430b      	orrs	r3, r1
 801d000:	431a      	orrs	r2, r3
 801d002:	9b03      	ldr	r3, [sp, #12]
 801d004:	645a      	str	r2, [r3, #68]	; 0x44
}
 801d006:	b004      	add	sp, #16
 801d008:	4770      	bx	lr
 801d00a:	bf00      	nop

0801d00c <TIM_Break1Cmd>:
  * @param  NewState: new state of the TIM Break1 input.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Break1Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801d00c:	b082      	sub	sp, #8
 801d00e:	9001      	str	r0, [sp, #4]
 801d010:	460b      	mov	r3, r1
 801d012:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801d016:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801d01a:	2b00      	cmp	r3, #0
 801d01c:	d006      	beq.n	801d02c <TIM_Break1Cmd+0x20>
  {
    /* Enable the Break1 */
    TIMx->BDTR |= TIM_BDTR_BKE;
 801d01e:	9b01      	ldr	r3, [sp, #4]
 801d020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d022:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801d026:	9b01      	ldr	r3, [sp, #4]
 801d028:	645a      	str	r2, [r3, #68]	; 0x44
 801d02a:	e005      	b.n	801d038 <TIM_Break1Cmd+0x2c>
  }
  else
  {
    /* Disable the Break1 */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_BKE;
 801d02c:	9b01      	ldr	r3, [sp, #4]
 801d02e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d030:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801d034:	9b01      	ldr	r3, [sp, #4]
 801d036:	645a      	str	r2, [r3, #68]	; 0x44
  } 
}
 801d038:	b002      	add	sp, #8
 801d03a:	4770      	bx	lr

0801d03c <TIM_Break2Cmd>:
  * @param  NewState: new state of the TIM Break2 input.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Break2Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801d03c:	b082      	sub	sp, #8
 801d03e:	9001      	str	r0, [sp, #4]
 801d040:	460b      	mov	r3, r1
 801d042:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801d046:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d006      	beq.n	801d05c <TIM_Break2Cmd+0x20>
  {
    /* Enable the Break1 */
    TIMx->BDTR |= TIM_BDTR_BK2E;
 801d04e:	9b01      	ldr	r3, [sp, #4]
 801d050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d052:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 801d056:	9b01      	ldr	r3, [sp, #4]
 801d058:	645a      	str	r2, [r3, #68]	; 0x44
 801d05a:	e005      	b.n	801d068 <TIM_Break2Cmd+0x2c>
  }
  else
  {
    /* Disable the Break1 */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_BK2E;
 801d05c:	9b01      	ldr	r3, [sp, #4]
 801d05e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d060:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801d064:	9b01      	ldr	r3, [sp, #4]
 801d066:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 801d068:	b002      	add	sp, #8
 801d06a:	4770      	bx	lr

0801d06c <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 801d06c:	b082      	sub	sp, #8
 801d06e:	9001      	str	r0, [sp, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 801d070:	9b01      	ldr	r3, [sp, #4]
 801d072:	f04f 0200 	mov.w	r2, #0
 801d076:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 801d078:	9b01      	ldr	r3, [sp, #4]
 801d07a:	f04f 0200 	mov.w	r2, #0
 801d07e:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 801d080:	9b01      	ldr	r3, [sp, #4]
 801d082:	f04f 0200 	mov.w	r2, #0
 801d086:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 801d088:	9b01      	ldr	r3, [sp, #4]
 801d08a:	f04f 0200 	mov.w	r2, #0
 801d08e:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 801d090:	9b01      	ldr	r3, [sp, #4]
 801d092:	f04f 0200 	mov.w	r2, #0
 801d096:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 801d098:	9b01      	ldr	r3, [sp, #4]
 801d09a:	f04f 0200 	mov.w	r2, #0
 801d09e:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 801d0a0:	9b01      	ldr	r3, [sp, #4]
 801d0a2:	f04f 0200 	mov.w	r2, #0
 801d0a6:	819a      	strh	r2, [r3, #12]
}
 801d0a8:	b002      	add	sp, #8
 801d0aa:	4770      	bx	lr

0801d0ac <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801d0ac:	b082      	sub	sp, #8
 801d0ae:	9001      	str	r0, [sp, #4]
 801d0b0:	460b      	mov	r3, r1
 801d0b2:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801d0b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801d0ba:	2b00      	cmp	r3, #0
 801d0bc:	d006      	beq.n	801d0cc <TIM_CtrlPWMOutputs+0x20>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 801d0be:	9b01      	ldr	r3, [sp, #4]
 801d0c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d0c2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 801d0c6:	9b01      	ldr	r3, [sp, #4]
 801d0c8:	645a      	str	r2, [r3, #68]	; 0x44
 801d0ca:	e007      	b.n	801d0dc <TIM_CtrlPWMOutputs+0x30>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 801d0cc:	9b01      	ldr	r3, [sp, #4]
 801d0ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d0d0:	ea4f 4343 	mov.w	r3, r3, lsl #17
 801d0d4:	ea4f 4353 	mov.w	r3, r3, lsr #17
 801d0d8:	9a01      	ldr	r2, [sp, #4]
 801d0da:	6453      	str	r3, [r2, #68]	; 0x44
  }  
}
 801d0dc:	b002      	add	sp, #8
 801d0de:	4770      	bx	lr

0801d0e0 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801d0e0:	b082      	sub	sp, #8
 801d0e2:	9001      	str	r0, [sp, #4]
 801d0e4:	460b      	mov	r3, r1
 801d0e6:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801d0ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801d0ee:	2b00      	cmp	r3, #0
 801d0f0:	d006      	beq.n	801d100 <TIM_SelectCOM+0x20>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 801d0f2:	9b01      	ldr	r3, [sp, #4]
 801d0f4:	685b      	ldr	r3, [r3, #4]
 801d0f6:	f043 0204 	orr.w	r2, r3, #4
 801d0fa:	9b01      	ldr	r3, [sp, #4]
 801d0fc:	605a      	str	r2, [r3, #4]
 801d0fe:	e006      	b.n	801d10e <TIM_SelectCOM+0x2e>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 801d100:	9b01      	ldr	r3, [sp, #4]
 801d102:	685a      	ldr	r2, [r3, #4]
 801d104:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 801d108:	4013      	ands	r3, r2
 801d10a:	9a01      	ldr	r2, [sp, #4]
 801d10c:	6053      	str	r3, [r2, #4]
  }
}
 801d10e:	b002      	add	sp, #8
 801d110:	4770      	bx	lr
 801d112:	bf00      	nop

0801d114 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 801d114:	b082      	sub	sp, #8
 801d116:	9001      	str	r0, [sp, #4]
 801d118:	460b      	mov	r3, r1
 801d11a:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801d11e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801d122:	2b00      	cmp	r3, #0
 801d124:	d006      	beq.n	801d134 <TIM_CCPreloadControl+0x20>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 801d126:	9b01      	ldr	r3, [sp, #4]
 801d128:	685b      	ldr	r3, [r3, #4]
 801d12a:	f043 0201 	orr.w	r2, r3, #1
 801d12e:	9b01      	ldr	r3, [sp, #4]
 801d130:	605a      	str	r2, [r3, #4]
 801d132:	e006      	b.n	801d142 <TIM_CCPreloadControl+0x2e>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 801d134:	9b01      	ldr	r3, [sp, #4]
 801d136:	685a      	ldr	r2, [r3, #4]
 801d138:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801d13c:	4013      	ands	r3, r2
 801d13e:	9a01      	ldr	r2, [sp, #4]
 801d140:	6053      	str	r3, [r2, #4]
  }
}
 801d142:	b002      	add	sp, #8
 801d144:	4770      	bx	lr
 801d146:	bf00      	nop

0801d148 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 801d148:	b082      	sub	sp, #8
 801d14a:	9001      	str	r0, [sp, #4]
 801d14c:	4613      	mov	r3, r2
 801d14e:	460a      	mov	r2, r1
 801d150:	f8ad 2002 	strh.w	r2, [sp, #2]
 801d154:	f88d 3001 	strb.w	r3, [sp, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801d158:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801d15c:	2b00      	cmp	r3, #0
 801d15e:	d007      	beq.n	801d170 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 801d160:	9b01      	ldr	r3, [sp, #4]
 801d162:	68da      	ldr	r2, [r3, #12]
 801d164:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d168:	431a      	orrs	r2, r3
 801d16a:	9b01      	ldr	r3, [sp, #4]
 801d16c:	60da      	str	r2, [r3, #12]
 801d16e:	e009      	b.n	801d184 <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 801d170:	9b01      	ldr	r3, [sp, #4]
 801d172:	68da      	ldr	r2, [r3, #12]
 801d174:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d178:	ea6f 0303 	mvn.w	r3, r3
 801d17c:	b29b      	uxth	r3, r3
 801d17e:	401a      	ands	r2, r3
 801d180:	9b01      	ldr	r3, [sp, #4]
 801d182:	60da      	str	r2, [r3, #12]
  }
}
 801d184:	b002      	add	sp, #8
 801d186:	4770      	bx	lr

0801d188 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 801d188:	b082      	sub	sp, #8
 801d18a:	9001      	str	r0, [sp, #4]
 801d18c:	460b      	mov	r3, r1
 801d18e:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 801d192:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801d196:	9b01      	ldr	r3, [sp, #4]
 801d198:	615a      	str	r2, [r3, #20]
}
 801d19a:	b002      	add	sp, #8
 801d19c:	4770      	bx	lr
 801d19e:	bf00      	nop

0801d1a0 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint32_t TIM_FLAG)
{ 
 801d1a0:	b084      	sub	sp, #16
 801d1a2:	9001      	str	r0, [sp, #4]
 801d1a4:	9100      	str	r1, [sp, #0]
  ITStatus bitstatus = RESET;  
 801d1a6:	f04f 0300 	mov.w	r3, #0
 801d1aa:	f88d 300f 	strb.w	r3, [sp, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != RESET)
 801d1ae:	9b01      	ldr	r3, [sp, #4]
 801d1b0:	691a      	ldr	r2, [r3, #16]
 801d1b2:	9b00      	ldr	r3, [sp, #0]
 801d1b4:	4013      	ands	r3, r2
 801d1b6:	2b00      	cmp	r3, #0
 801d1b8:	d004      	beq.n	801d1c4 <TIM_GetFlagStatus+0x24>
  {
    bitstatus = SET;
 801d1ba:	f04f 0301 	mov.w	r3, #1
 801d1be:	f88d 300f 	strb.w	r3, [sp, #15]
 801d1c2:	e003      	b.n	801d1cc <TIM_GetFlagStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 801d1c4:	f04f 0300 	mov.w	r3, #0
 801d1c8:	f88d 300f 	strb.w	r3, [sp, #15]
  }
  return bitstatus;
 801d1cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 801d1d0:	4618      	mov	r0, r3
 801d1d2:	b004      	add	sp, #16
 801d1d4:	4770      	bx	lr
 801d1d6:	bf00      	nop

0801d1d8 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 801d1d8:	b082      	sub	sp, #8
 801d1da:	9001      	str	r0, [sp, #4]
 801d1dc:	460b      	mov	r3, r1
 801d1de:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 801d1e2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d1e6:	ea6f 0303 	mvn.w	r3, r3
 801d1ea:	b29b      	uxth	r3, r3
 801d1ec:	461a      	mov	r2, r3
 801d1ee:	9b01      	ldr	r3, [sp, #4]
 801d1f0:	611a      	str	r2, [r3, #16]
}
 801d1f2:	b002      	add	sp, #8
 801d1f4:	4770      	bx	lr
 801d1f6:	bf00      	nop

0801d1f8 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 801d1f8:	b084      	sub	sp, #16
 801d1fa:	9001      	str	r0, [sp, #4]
 801d1fc:	460b      	mov	r3, r1
 801d1fe:	f8ad 3002 	strh.w	r3, [sp, #2]
  ITStatus bitstatus = RESET;  
 801d202:	f04f 0300 	mov.w	r3, #0
 801d206:	f88d 300f 	strb.w	r3, [sp, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 801d20a:	f04f 0300 	mov.w	r3, #0
 801d20e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d212:	f04f 0300 	mov.w	r3, #0
 801d216:	f8ad 300a 	strh.w	r3, [sp, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 801d21a:	9b01      	ldr	r3, [sp, #4]
 801d21c:	691b      	ldr	r3, [r3, #16]
 801d21e:	b29a      	uxth	r2, r3
 801d220:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d224:	4013      	ands	r3, r2
 801d226:	f8ad 300c 	strh.w	r3, [sp, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 801d22a:	9b01      	ldr	r3, [sp, #4]
 801d22c:	68db      	ldr	r3, [r3, #12]
 801d22e:	b29a      	uxth	r2, r3
 801d230:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d234:	4013      	ands	r3, r2
 801d236:	f8ad 300a 	strh.w	r3, [sp, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 801d23a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d008      	beq.n	801d254 <TIM_GetITStatus+0x5c>
 801d242:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d246:	2b00      	cmp	r3, #0
 801d248:	d004      	beq.n	801d254 <TIM_GetITStatus+0x5c>
  {
    bitstatus = SET;
 801d24a:	f04f 0301 	mov.w	r3, #1
 801d24e:	f88d 300f 	strb.w	r3, [sp, #15]
 801d252:	e003      	b.n	801d25c <TIM_GetITStatus+0x64>
  }
  else
  {
    bitstatus = RESET;
 801d254:	f04f 0300 	mov.w	r3, #0
 801d258:	f88d 300f 	strb.w	r3, [sp, #15]
  }
  return bitstatus;
 801d25c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 801d260:	4618      	mov	r0, r3
 801d262:	b004      	add	sp, #16
 801d264:	4770      	bx	lr
 801d266:	bf00      	nop

0801d268 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 801d268:	b082      	sub	sp, #8
 801d26a:	9001      	str	r0, [sp, #4]
 801d26c:	460b      	mov	r3, r1
 801d26e:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 801d272:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d276:	ea6f 0303 	mvn.w	r3, r3
 801d27a:	b29b      	uxth	r3, r3
 801d27c:	461a      	mov	r2, r3
 801d27e:	9b01      	ldr	r3, [sp, #4]
 801d280:	611a      	str	r2, [r3, #16]
}
 801d282:	b002      	add	sp, #8
 801d284:	4770      	bx	lr
 801d286:	bf00      	nop

0801d288 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 801d288:	b082      	sub	sp, #8
 801d28a:	9001      	str	r0, [sp, #4]
 801d28c:	4613      	mov	r3, r2
 801d28e:	460a      	mov	r2, r1
 801d290:	f8ad 2002 	strh.w	r2, [sp, #2]
 801d294:	f8ad 3000 	strh.w	r3, [sp]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 801d298:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801d29c:	f8bd 3000 	ldrh.w	r3, [sp]
 801d2a0:	4313      	orrs	r3, r2
 801d2a2:	b29a      	uxth	r2, r3
 801d2a4:	9b01      	ldr	r3, [sp, #4]
 801d2a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 801d2aa:	b002      	add	sp, #8
 801d2ac:	4770      	bx	lr
 801d2ae:	bf00      	nop

0801d2b0 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 801d2b0:	b082      	sub	sp, #8
 801d2b2:	9001      	str	r0, [sp, #4]
 801d2b4:	4613      	mov	r3, r2
 801d2b6:	460a      	mov	r2, r1
 801d2b8:	f8ad 2002 	strh.w	r2, [sp, #2]
 801d2bc:	f88d 3001 	strb.w	r3, [sp, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801d2c0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d007      	beq.n	801d2d8 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 801d2c8:	9b01      	ldr	r3, [sp, #4]
 801d2ca:	68da      	ldr	r2, [r3, #12]
 801d2cc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d2d0:	431a      	orrs	r2, r3
 801d2d2:	9b01      	ldr	r3, [sp, #4]
 801d2d4:	60da      	str	r2, [r3, #12]
 801d2d6:	e009      	b.n	801d2ec <TIM_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 801d2d8:	9b01      	ldr	r3, [sp, #4]
 801d2da:	68da      	ldr	r2, [r3, #12]
 801d2dc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d2e0:	ea6f 0303 	mvn.w	r3, r3
 801d2e4:	b29b      	uxth	r3, r3
 801d2e6:	401a      	ands	r2, r3
 801d2e8:	9b01      	ldr	r3, [sp, #4]
 801d2ea:	60da      	str	r2, [r3, #12]
  }
}
 801d2ec:	b002      	add	sp, #8
 801d2ee:	4770      	bx	lr

0801d2f0 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801d2f0:	b082      	sub	sp, #8
 801d2f2:	9001      	str	r0, [sp, #4]
 801d2f4:	460b      	mov	r3, r1
 801d2f6:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801d2fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d006      	beq.n	801d310 <TIM_SelectCCDMA+0x20>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 801d302:	9b01      	ldr	r3, [sp, #4]
 801d304:	685b      	ldr	r3, [r3, #4]
 801d306:	f043 0208 	orr.w	r2, r3, #8
 801d30a:	9b01      	ldr	r3, [sp, #4]
 801d30c:	605a      	str	r2, [r3, #4]
 801d30e:	e006      	b.n	801d31e <TIM_SelectCCDMA+0x2e>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 801d310:	9b01      	ldr	r3, [sp, #4]
 801d312:	685a      	ldr	r2, [r3, #4]
 801d314:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 801d318:	4013      	ands	r3, r2
 801d31a:	9a01      	ldr	r2, [sp, #4]
 801d31c:	6053      	str	r3, [r2, #4]
  }
}
 801d31e:	b002      	add	sp, #8
 801d320:	4770      	bx	lr
 801d322:	bf00      	nop

0801d324 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8 or 15 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 801d324:	b082      	sub	sp, #8
 801d326:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 801d328:	9b01      	ldr	r3, [sp, #4]
 801d32a:	689a      	ldr	r2, [r3, #8]
 801d32c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 801d330:	4013      	ands	r3, r2
 801d332:	9a01      	ldr	r2, [sp, #4]
 801d334:	6093      	str	r3, [r2, #8]
}
 801d336:	b002      	add	sp, #8
 801d338:	4770      	bx	lr
 801d33a:	bf00      	nop

0801d33c <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 801d33c:	b500      	push	{lr}
 801d33e:	b083      	sub	sp, #12
 801d340:	9001      	str	r0, [sp, #4]
 801d342:	460b      	mov	r3, r1
 801d344:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 801d348:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d34c:	9801      	ldr	r0, [sp, #4]
 801d34e:	4619      	mov	r1, r3
 801d350:	f000 f88a 	bl	801d468 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 801d354:	9b01      	ldr	r3, [sp, #4]
 801d356:	689b      	ldr	r3, [r3, #8]
 801d358:	f043 0207 	orr.w	r2, r3, #7
 801d35c:	9b01      	ldr	r3, [sp, #4]
 801d35e:	609a      	str	r2, [r3, #8]
}
 801d360:	b003      	add	sp, #12
 801d362:	bd00      	pop	{pc}

0801d364 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 801d364:	b500      	push	{lr}
 801d366:	b085      	sub	sp, #20
 801d368:	9003      	str	r0, [sp, #12]
 801d36a:	f8ad 100a 	strh.w	r1, [sp, #10]
 801d36e:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d372:	f8ad 3006 	strh.w	r3, [sp, #6]
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 801d376:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d37a:	2b60      	cmp	r3, #96	; 0x60
 801d37c:	d10a      	bne.n	801d394 <TIM_TIxExternalClockConfig+0x30>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 801d37e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d382:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d386:	9803      	ldr	r0, [sp, #12]
 801d388:	4611      	mov	r1, r2
 801d38a:	f04f 0201 	mov.w	r2, #1
 801d38e:	f000 f9cd 	bl	801d72c <TI2_Config>
 801d392:	e009      	b.n	801d3a8 <TIM_TIxExternalClockConfig+0x44>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 801d394:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d398:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d39c:	9803      	ldr	r0, [sp, #12]
 801d39e:	4611      	mov	r1, r2
 801d3a0:	f04f 0201 	mov.w	r2, #1
 801d3a4:	f000 f986 	bl	801d6b4 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 801d3a8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d3ac:	9803      	ldr	r0, [sp, #12]
 801d3ae:	4619      	mov	r1, r3
 801d3b0:	f000 f85a 	bl	801d468 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 801d3b4:	9b03      	ldr	r3, [sp, #12]
 801d3b6:	689b      	ldr	r3, [r3, #8]
 801d3b8:	f043 0207 	orr.w	r2, r3, #7
 801d3bc:	9b03      	ldr	r3, [sp, #12]
 801d3be:	609a      	str	r2, [r3, #8]
}
 801d3c0:	b005      	add	sp, #20
 801d3c2:	bd00      	pop	{pc}

0801d3c4 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 801d3c4:	b500      	push	{lr}
 801d3c6:	b087      	sub	sp, #28
 801d3c8:	9003      	str	r0, [sp, #12]
 801d3ca:	f8ad 100a 	strh.w	r1, [sp, #10]
 801d3ce:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d3d2:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t tmpsmcr = 0;
 801d3d6:	f04f 0300 	mov.w	r3, #0
 801d3da:	f8ad 3016 	strh.w	r3, [sp, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 801d3de:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801d3e2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d3e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d3ea:	9803      	ldr	r0, [sp, #12]
 801d3ec:	f000 f8ae 	bl	801d54c <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801d3f0:	9b03      	ldr	r3, [sp, #12]
 801d3f2:	689b      	ldr	r3, [r3, #8]
 801d3f4:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 801d3f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801d3fc:	f023 0307 	bic.w	r3, r3, #7
 801d400:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 801d404:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801d408:	f043 0307 	orr.w	r3, r3, #7
 801d40c:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 801d410:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801d414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d418:	f8ad 3016 	strh.w	r3, [sp, #22]
  tmpsmcr |= TIM_TS_ETRF;
 801d41c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801d420:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 801d424:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d428:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801d42c:	9b03      	ldr	r3, [sp, #12]
 801d42e:	609a      	str	r2, [r3, #8]
}
 801d430:	b007      	add	sp, #28
 801d432:	bd00      	pop	{pc}

0801d434 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 801d434:	b500      	push	{lr}
 801d436:	b085      	sub	sp, #20
 801d438:	9003      	str	r0, [sp, #12]
 801d43a:	f8ad 100a 	strh.w	r1, [sp, #10]
 801d43e:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d442:	f8ad 3006 	strh.w	r3, [sp, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 801d446:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801d44a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d44e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d452:	9803      	ldr	r0, [sp, #12]
 801d454:	f000 f87a 	bl	801d54c <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 801d458:	9b03      	ldr	r3, [sp, #12]
 801d45a:	689b      	ldr	r3, [r3, #8]
 801d45c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801d460:	9b03      	ldr	r3, [sp, #12]
 801d462:	609a      	str	r2, [r3, #8]
}
 801d464:	b005      	add	sp, #20
 801d466:	bd00      	pop	{pc}

0801d468 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 801d468:	b084      	sub	sp, #16
 801d46a:	9001      	str	r0, [sp, #4]
 801d46c:	460b      	mov	r3, r1
 801d46e:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint16_t tmpsmcr = 0;
 801d472:	f04f 0300 	mov.w	r3, #0
 801d476:	f8ad 300e 	strh.w	r3, [sp, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801d47a:	9b01      	ldr	r3, [sp, #4]
 801d47c:	689b      	ldr	r3, [r3, #8]
 801d47e:	f8ad 300e 	strh.w	r3, [sp, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 801d482:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801d486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d48a:	f8ad 300e 	strh.w	r3, [sp, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 801d48e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801d492:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d496:	4313      	orrs	r3, r2
 801d498:	f8ad 300e 	strh.w	r3, [sp, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d49c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801d4a0:	9b01      	ldr	r3, [sp, #4]
 801d4a2:	609a      	str	r2, [r3, #8]
}
 801d4a4:	b004      	add	sp, #16
 801d4a6:	4770      	bx	lr

0801d4a8 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 801d4a8:	b082      	sub	sp, #8
 801d4aa:	9001      	str	r0, [sp, #4]
 801d4ac:	460b      	mov	r3, r1
 801d4ae:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 801d4b2:	9b01      	ldr	r3, [sp, #4]
 801d4b4:	685a      	ldr	r2, [r3, #4]
 801d4b6:	f64f 738f 	movw	r3, #65423	; 0xff8f
 801d4ba:	4013      	ands	r3, r2
 801d4bc:	9a01      	ldr	r2, [sp, #4]
 801d4be:	6053      	str	r3, [r2, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 801d4c0:	9b01      	ldr	r3, [sp, #4]
 801d4c2:	685a      	ldr	r2, [r3, #4]
 801d4c4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d4c8:	431a      	orrs	r2, r3
 801d4ca:	9b01      	ldr	r3, [sp, #4]
 801d4cc:	605a      	str	r2, [r3, #4]
}
 801d4ce:	b002      	add	sp, #8
 801d4d0:	4770      	bx	lr
 801d4d2:	bf00      	nop

0801d4d4 <TIM_SelectOutputTrigger2>:
  *            @arg TIM_TRGO2Source_OC5RefRising_OC6RefFalling: OC5Ref Rising and OC6Ref Falling are used as the trigger output(TRGO2)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger2(TIM_TypeDef* TIMx, uint32_t TIM_TRGO2Source)
{
 801d4d4:	b082      	sub	sp, #8
 801d4d6:	9001      	str	r0, [sp, #4]
 801d4d8:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO2_SOURCE(TIM_TRGO2Source));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint32_t)~TIM_CR2_MMS2;
 801d4da:	9b01      	ldr	r3, [sp, #4]
 801d4dc:	685b      	ldr	r3, [r3, #4]
 801d4de:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801d4e2:	9b01      	ldr	r3, [sp, #4]
 801d4e4:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGO2Source;
 801d4e6:	9b01      	ldr	r3, [sp, #4]
 801d4e8:	685a      	ldr	r2, [r3, #4]
 801d4ea:	9b00      	ldr	r3, [sp, #0]
 801d4ec:	431a      	orrs	r2, r3
 801d4ee:	9b01      	ldr	r3, [sp, #4]
 801d4f0:	605a      	str	r2, [r3, #4]
}
 801d4f2:	b002      	add	sp, #8
 801d4f4:	4770      	bx	lr
 801d4f6:	bf00      	nop

0801d4f8 <TIM_SelectSlaveMode>:
  *                                                      reinitializes the counter, generates an update 
  *                                                      of the registers and starts the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint32_t TIM_SlaveMode)
{
 801d4f8:	b082      	sub	sp, #8
 801d4fa:	9001      	str	r0, [sp, #4]
 801d4fc:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint32_t)~TIM_SMCR_SMS;
 801d4fe:	9b01      	ldr	r3, [sp, #4]
 801d500:	689b      	ldr	r3, [r3, #8]
 801d502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d506:	f023 0307 	bic.w	r3, r3, #7
 801d50a:	9a01      	ldr	r2, [sp, #4]
 801d50c:	6093      	str	r3, [r2, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= (uint32_t)TIM_SlaveMode;
 801d50e:	9b01      	ldr	r3, [sp, #4]
 801d510:	689a      	ldr	r2, [r3, #8]
 801d512:	9b00      	ldr	r3, [sp, #0]
 801d514:	431a      	orrs	r2, r3
 801d516:	9b01      	ldr	r3, [sp, #4]
 801d518:	609a      	str	r2, [r3, #8]
}
 801d51a:	b002      	add	sp, #8
 801d51c:	4770      	bx	lr
 801d51e:	bf00      	nop

0801d520 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 801d520:	b082      	sub	sp, #8
 801d522:	9001      	str	r0, [sp, #4]
 801d524:	460b      	mov	r3, r1
 801d526:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 801d52a:	9b01      	ldr	r3, [sp, #4]
 801d52c:	689a      	ldr	r2, [r3, #8]
 801d52e:	f64f 737f 	movw	r3, #65407	; 0xff7f
 801d532:	4013      	ands	r3, r2
 801d534:	9a01      	ldr	r2, [sp, #4]
 801d536:	6093      	str	r3, [r2, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 801d538:	9b01      	ldr	r3, [sp, #4]
 801d53a:	689a      	ldr	r2, [r3, #8]
 801d53c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d540:	431a      	orrs	r2, r3
 801d542:	9b01      	ldr	r3, [sp, #4]
 801d544:	609a      	str	r2, [r3, #8]
}
 801d546:	b002      	add	sp, #8
 801d548:	4770      	bx	lr
 801d54a:	bf00      	nop

0801d54c <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 801d54c:	b086      	sub	sp, #24
 801d54e:	9003      	str	r0, [sp, #12]
 801d550:	f8ad 100a 	strh.w	r1, [sp, #10]
 801d554:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d558:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t tmpsmcr = 0;
 801d55c:	f04f 0300 	mov.w	r3, #0
 801d560:	f8ad 3016 	strh.w	r3, [sp, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 801d564:	9b03      	ldr	r3, [sp, #12]
 801d566:	689b      	ldr	r3, [r3, #8]
 801d568:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 801d56c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801d570:	b2db      	uxtb	r3, r3
 801d572:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 801d576:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d57a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801d57e:	b29a      	uxth	r2, r3
 801d580:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d584:	4313      	orrs	r3, r2
 801d586:	b29a      	uxth	r2, r3
 801d588:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d58c:	4313      	orrs	r3, r2
 801d58e:	b29a      	uxth	r2, r3
 801d590:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801d594:	4313      	orrs	r3, r2
 801d596:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d59a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801d59e:	9b03      	ldr	r3, [sp, #12]
 801d5a0:	609a      	str	r2, [r3, #8]
}
 801d5a2:	b006      	add	sp, #24
 801d5a4:	4770      	bx	lr
 801d5a6:	bf00      	nop

0801d5a8 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 801d5a8:	b086      	sub	sp, #24
 801d5aa:	9003      	str	r0, [sp, #12]
 801d5ac:	f8ad 100a 	strh.w	r1, [sp, #10]
 801d5b0:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d5b4:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t tmpsmcr = 0;
 801d5b8:	f04f 0300 	mov.w	r3, #0
 801d5bc:	f8ad 3016 	strh.w	r3, [sp, #22]
  uint16_t tmpccmr1 = 0;
 801d5c0:	f04f 0300 	mov.w	r3, #0
 801d5c4:	f8ad 3014 	strh.w	r3, [sp, #20]
  uint16_t tmpccer = 0;
 801d5c8:	f04f 0300 	mov.w	r3, #0
 801d5cc:	f8ad 3012 	strh.w	r3, [sp, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801d5d0:	9b03      	ldr	r3, [sp, #12]
 801d5d2:	689b      	ldr	r3, [r3, #8]
 801d5d4:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 801d5d8:	9b03      	ldr	r3, [sp, #12]
 801d5da:	699b      	ldr	r3, [r3, #24]
 801d5dc:	f8ad 3014 	strh.w	r3, [sp, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d5e0:	9b03      	ldr	r3, [sp, #12]
 801d5e2:	6a1b      	ldr	r3, [r3, #32]
 801d5e4:	f8ad 3012 	strh.w	r3, [sp, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 801d5e8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801d5ec:	f023 0307 	bic.w	r3, r3, #7
 801d5f0:	f8ad 3016 	strh.w	r3, [sp, #22]
  tmpsmcr |= TIM_EncoderMode;
 801d5f4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801d5f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d5fc:	4313      	orrs	r3, r2
 801d5fe:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 801d602:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801d606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d60a:	f023 0303 	bic.w	r3, r3, #3
 801d60e:	f8ad 3014 	strh.w	r3, [sp, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 801d612:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801d616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d61a:	f043 0301 	orr.w	r3, r3, #1
 801d61e:	f8ad 3014 	strh.w	r3, [sp, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 801d622:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d626:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801d62a:	f8ad 3012 	strh.w	r3, [sp, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 801d62e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d632:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801d636:	b29a      	uxth	r2, r3
 801d638:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d63c:	4313      	orrs	r3, r2
 801d63e:	b29a      	uxth	r2, r3
 801d640:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d644:	4313      	orrs	r3, r2
 801d646:	f8ad 3012 	strh.w	r3, [sp, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d64a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801d64e:	9b03      	ldr	r3, [sp, #12]
 801d650:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 801d652:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801d656:	9b03      	ldr	r3, [sp, #12]
 801d658:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d65a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d65e:	9b03      	ldr	r3, [sp, #12]
 801d660:	621a      	str	r2, [r3, #32]
}
 801d662:	b006      	add	sp, #24
 801d664:	4770      	bx	lr
 801d666:	bf00      	nop

0801d668 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801d668:	b082      	sub	sp, #8
 801d66a:	9001      	str	r0, [sp, #4]
 801d66c:	460b      	mov	r3, r1
 801d66e:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801d672:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801d676:	2b00      	cmp	r3, #0
 801d678:	d006      	beq.n	801d688 <TIM_SelectHallSensor+0x20>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 801d67a:	9b01      	ldr	r3, [sp, #4]
 801d67c:	685b      	ldr	r3, [r3, #4]
 801d67e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801d682:	9b01      	ldr	r3, [sp, #4]
 801d684:	605a      	str	r2, [r3, #4]
 801d686:	e006      	b.n	801d696 <TIM_SelectHallSensor+0x2e>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 801d688:	9b01      	ldr	r3, [sp, #4]
 801d68a:	685a      	ldr	r2, [r3, #4]
 801d68c:	f64f 737f 	movw	r3, #65407	; 0xff7f
 801d690:	4013      	ands	r3, r2
 801d692:	9a01      	ldr	r2, [sp, #4]
 801d694:	6053      	str	r3, [r2, #4]
  }
}
 801d696:	b002      	add	sp, #8
 801d698:	4770      	bx	lr
 801d69a:	bf00      	nop

0801d69c <TIM_RemapConfig>:
  *            @arg TIM8_ADC4_AWDG2: TIM8 ETR is connected to ADC4 AWDG2.
  *            @arg TIM8_ADC4_AWDG3: TIM8 ETR is connected to ADC4 AWDG3.  
  * @retval : None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 801d69c:	b082      	sub	sp, #8
 801d69e:	9001      	str	r0, [sp, #4]
 801d6a0:	460b      	mov	r3, r1
 801d6a2:	f8ad 3002 	strh.w	r3, [sp, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 801d6a6:	9b01      	ldr	r3, [sp, #4]
 801d6a8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801d6ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 801d6b0:	b002      	add	sp, #8
 801d6b2:	4770      	bx	lr

0801d6b4 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 801d6b4:	b086      	sub	sp, #24
 801d6b6:	9003      	str	r0, [sp, #12]
 801d6b8:	f8ad 100a 	strh.w	r1, [sp, #10]
 801d6bc:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d6c0:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint32_t tmpccmr1 = 0, tmpccer = 0;
 801d6c4:	f04f 0300 	mov.w	r3, #0
 801d6c8:	9305      	str	r3, [sp, #20]
 801d6ca:	f04f 0300 	mov.w	r3, #0
 801d6ce:	9304      	str	r3, [sp, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 801d6d0:	9b03      	ldr	r3, [sp, #12]
 801d6d2:	6a1b      	ldr	r3, [r3, #32]
 801d6d4:	f023 0201 	bic.w	r2, r3, #1
 801d6d8:	9b03      	ldr	r3, [sp, #12]
 801d6da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d6dc:	9b03      	ldr	r3, [sp, #12]
 801d6de:	699b      	ldr	r3, [r3, #24]
 801d6e0:	9305      	str	r3, [sp, #20]
  tmpccer = TIMx->CCER;
 801d6e2:	9b03      	ldr	r3, [sp, #12]
 801d6e4:	6a1b      	ldr	r3, [r3, #32]
 801d6e6:	9304      	str	r3, [sp, #16]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
 801d6e8:	9b05      	ldr	r3, [sp, #20]
 801d6ea:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 801d6ee:	9305      	str	r3, [sp, #20]
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));
 801d6f0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d6f4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d6f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801d6fc:	4313      	orrs	r3, r2
 801d6fe:	9a05      	ldr	r2, [sp, #20]
 801d700:	4313      	orrs	r3, r2
 801d702:	9305      	str	r3, [sp, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801d704:	9b04      	ldr	r3, [sp, #16]
 801d706:	f023 030a 	bic.w	r3, r3, #10
 801d70a:	9304      	str	r3, [sp, #16]
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);
 801d70c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d710:	f043 0301 	orr.w	r3, r3, #1
 801d714:	b29b      	uxth	r3, r3
 801d716:	9a04      	ldr	r2, [sp, #16]
 801d718:	4313      	orrs	r3, r2
 801d71a:	9304      	str	r3, [sp, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801d71c:	9b03      	ldr	r3, [sp, #12]
 801d71e:	9a05      	ldr	r2, [sp, #20]
 801d720:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d722:	9b03      	ldr	r3, [sp, #12]
 801d724:	9a04      	ldr	r2, [sp, #16]
 801d726:	621a      	str	r2, [r3, #32]
}
 801d728:	b006      	add	sp, #24
 801d72a:	4770      	bx	lr

0801d72c <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 801d72c:	b088      	sub	sp, #32
 801d72e:	9003      	str	r0, [sp, #12]
 801d730:	f8ad 100a 	strh.w	r1, [sp, #10]
 801d734:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d738:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint32_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 801d73c:	f04f 0300 	mov.w	r3, #0
 801d740:	9307      	str	r3, [sp, #28]
 801d742:	f04f 0300 	mov.w	r3, #0
 801d746:	9306      	str	r3, [sp, #24]
 801d748:	f04f 0300 	mov.w	r3, #0
 801d74c:	9305      	str	r3, [sp, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 801d74e:	9b03      	ldr	r3, [sp, #12]
 801d750:	6a1a      	ldr	r2, [r3, #32]
 801d752:	f64f 73ef 	movw	r3, #65519	; 0xffef
 801d756:	4013      	ands	r3, r2
 801d758:	9a03      	ldr	r2, [sp, #12]
 801d75a:	6213      	str	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d75c:	9b03      	ldr	r3, [sp, #12]
 801d75e:	699b      	ldr	r3, [r3, #24]
 801d760:	9307      	str	r3, [sp, #28]
  tmpccer = TIMx->CCER;
 801d762:	9b03      	ldr	r3, [sp, #12]
 801d764:	6a1b      	ldr	r3, [r3, #32]
 801d766:	9306      	str	r3, [sp, #24]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 801d768:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d76c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801d770:	b29b      	uxth	r3, r3
 801d772:	9305      	str	r3, [sp, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
 801d774:	9b07      	ldr	r3, [sp, #28]
 801d776:	f423 4373 	bic.w	r3, r3, #62208	; 0xf300
 801d77a:	9307      	str	r3, [sp, #28]
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
 801d77c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801d784:	9a07      	ldr	r2, [sp, #28]
 801d786:	4313      	orrs	r3, r2
 801d788:	9307      	str	r3, [sp, #28]
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);
 801d78a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d78e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801d792:	9a07      	ldr	r2, [sp, #28]
 801d794:	4313      	orrs	r3, r2
 801d796:	9307      	str	r3, [sp, #28]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801d798:	9a06      	ldr	r2, [sp, #24]
 801d79a:	f64f 735f 	movw	r3, #65375	; 0xff5f
 801d79e:	4013      	ands	r3, r2
 801d7a0:	9306      	str	r3, [sp, #24]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 801d7a2:	9b05      	ldr	r3, [sp, #20]
 801d7a4:	b29b      	uxth	r3, r3
 801d7a6:	f043 0310 	orr.w	r3, r3, #16
 801d7aa:	b29b      	uxth	r3, r3
 801d7ac:	9a06      	ldr	r2, [sp, #24]
 801d7ae:	4313      	orrs	r3, r2
 801d7b0:	9306      	str	r3, [sp, #24]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801d7b2:	9b03      	ldr	r3, [sp, #12]
 801d7b4:	9a07      	ldr	r2, [sp, #28]
 801d7b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d7b8:	9b03      	ldr	r3, [sp, #12]
 801d7ba:	9a06      	ldr	r2, [sp, #24]
 801d7bc:	621a      	str	r2, [r3, #32]
}
 801d7be:	b008      	add	sp, #32
 801d7c0:	4770      	bx	lr
 801d7c2:	bf00      	nop

0801d7c4 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 801d7c4:	b086      	sub	sp, #24
 801d7c6:	9003      	str	r0, [sp, #12]
 801d7c8:	f8ad 100a 	strh.w	r1, [sp, #10]
 801d7cc:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d7d0:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 801d7d4:	f04f 0300 	mov.w	r3, #0
 801d7d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d7dc:	f04f 0300 	mov.w	r3, #0
 801d7e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d7e4:	f04f 0300 	mov.w	r3, #0
 801d7e8:	f8ad 3012 	strh.w	r3, [sp, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 801d7ec:	9b03      	ldr	r3, [sp, #12]
 801d7ee:	6a1a      	ldr	r2, [r3, #32]
 801d7f0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801d7f4:	4013      	ands	r3, r2
 801d7f6:	9a03      	ldr	r2, [sp, #12]
 801d7f8:	6213      	str	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 801d7fa:	9b03      	ldr	r3, [sp, #12]
 801d7fc:	69db      	ldr	r3, [r3, #28]
 801d7fe:	f8ad 3016 	strh.w	r3, [sp, #22]
  tmpccer = TIMx->CCER;
 801d802:	9b03      	ldr	r3, [sp, #12]
 801d804:	6a1b      	ldr	r3, [r3, #32]
 801d806:	f8ad 3014 	strh.w	r3, [sp, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 801d80a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d80e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801d812:	f8ad 3012 	strh.w	r3, [sp, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 801d816:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801d81a:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 801d81e:	f8ad 3016 	strh.w	r3, [sp, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 801d822:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d826:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801d82a:	b29a      	uxth	r2, r3
 801d82c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d830:	4313      	orrs	r3, r2
 801d832:	b29a      	uxth	r2, r3
 801d834:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801d838:	4313      	orrs	r3, r2
 801d83a:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801d83e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801d842:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 801d846:	f8ad 3014 	strh.w	r3, [sp, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 801d84a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d84e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801d852:	4313      	orrs	r3, r2
 801d854:	b29b      	uxth	r3, r3
 801d856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d85a:	f8ad 3014 	strh.w	r3, [sp, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801d85e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801d862:	9b03      	ldr	r3, [sp, #12]
 801d864:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801d866:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801d86a:	9b03      	ldr	r3, [sp, #12]
 801d86c:	621a      	str	r2, [r3, #32]
}
 801d86e:	b006      	add	sp, #24
 801d870:	4770      	bx	lr
 801d872:	bf00      	nop

0801d874 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 801d874:	b086      	sub	sp, #24
 801d876:	9003      	str	r0, [sp, #12]
 801d878:	f8ad 100a 	strh.w	r1, [sp, #10]
 801d87c:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d880:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 801d884:	f04f 0300 	mov.w	r3, #0
 801d888:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d88c:	f04f 0300 	mov.w	r3, #0
 801d890:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d894:	f04f 0300 	mov.w	r3, #0
 801d898:	f8ad 3012 	strh.w	r3, [sp, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 801d89c:	9b03      	ldr	r3, [sp, #12]
 801d89e:	6a1a      	ldr	r2, [r3, #32]
 801d8a0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 801d8a4:	4013      	ands	r3, r2
 801d8a6:	9a03      	ldr	r2, [sp, #12]
 801d8a8:	6213      	str	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 801d8aa:	9b03      	ldr	r3, [sp, #12]
 801d8ac:	69db      	ldr	r3, [r3, #28]
 801d8ae:	f8ad 3016 	strh.w	r3, [sp, #22]
  tmpccer = TIMx->CCER;
 801d8b2:	9b03      	ldr	r3, [sp, #12]
 801d8b4:	6a1b      	ldr	r3, [r3, #32]
 801d8b6:	f8ad 3014 	strh.w	r3, [sp, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 801d8ba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d8be:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801d8c2:	f8ad 3012 	strh.w	r3, [sp, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 801d8c6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801d8ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d8ce:	ea4f 5303 	mov.w	r3, r3, lsl #20
 801d8d2:	ea4f 5313 	mov.w	r3, r3, lsr #20
 801d8d6:	f8ad 3016 	strh.w	r3, [sp, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 801d8da:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d8de:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801d8e2:	b29a      	uxth	r2, r3
 801d8e4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801d8e8:	4313      	orrs	r3, r2
 801d8ea:	f8ad 3016 	strh.w	r3, [sp, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 801d8ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d8f2:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801d8f6:	b29a      	uxth	r2, r3
 801d8f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801d8fc:	4313      	orrs	r3, r2
 801d8fe:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801d902:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801d906:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d90a:	ea4f 4343 	mov.w	r3, r3, lsl #17
 801d90e:	ea4f 4353 	mov.w	r3, r3, lsr #17
 801d912:	f8ad 3014 	strh.w	r3, [sp, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 801d916:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d91a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801d91e:	4313      	orrs	r3, r2
 801d920:	b29b      	uxth	r3, r3
 801d922:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801d926:	f8ad 3014 	strh.w	r3, [sp, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801d92a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801d92e:	9b03      	ldr	r3, [sp, #12]
 801d930:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801d932:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801d936:	9b03      	ldr	r3, [sp, #12]
 801d938:	621a      	str	r2, [r3, #32]
}
 801d93a:	b006      	add	sp, #24
 801d93c:	4770      	bx	lr
 801d93e:	bf00      	nop

0801d940 <USART_DeInit>:
  * @param  USARTx: Select the USART peripheral. This parameter can be one of the 
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 801d940:	b500      	push	{lr}
 801d942:	b083      	sub	sp, #12
 801d944:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 801d946:	9a01      	ldr	r2, [sp, #4]
 801d948:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801d94c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801d950:	429a      	cmp	r2, r3
 801d952:	d10c      	bne.n	801d96e <USART_DeInit+0x2e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 801d954:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801d958:	f04f 0101 	mov.w	r1, #1
 801d95c:	f7fd f9c8 	bl	801acf0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 801d960:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801d964:	f04f 0100 	mov.w	r1, #0
 801d968:	f7fd f9c2 	bl	801acf0 <RCC_APB2PeriphResetCmd>
 801d96c:	e04e      	b.n	801da0c <USART_DeInit+0xcc>
  }
  else if (USARTx == USART2)
 801d96e:	9a01      	ldr	r2, [sp, #4]
 801d970:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 801d974:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801d978:	429a      	cmp	r2, r3
 801d97a:	d10c      	bne.n	801d996 <USART_DeInit+0x56>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 801d97c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 801d980:	f04f 0101 	mov.w	r1, #1
 801d984:	f7fd f9da 	bl	801ad3c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 801d988:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 801d98c:	f04f 0100 	mov.w	r1, #0
 801d990:	f7fd f9d4 	bl	801ad3c <RCC_APB1PeriphResetCmd>
 801d994:	e03a      	b.n	801da0c <USART_DeInit+0xcc>
  }
  else if (USARTx == USART3)
 801d996:	9a01      	ldr	r2, [sp, #4]
 801d998:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 801d99c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801d9a0:	429a      	cmp	r2, r3
 801d9a2:	d10c      	bne.n	801d9be <USART_DeInit+0x7e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 801d9a4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 801d9a8:	f04f 0101 	mov.w	r1, #1
 801d9ac:	f7fd f9c6 	bl	801ad3c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 801d9b0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 801d9b4:	f04f 0100 	mov.w	r1, #0
 801d9b8:	f7fd f9c0 	bl	801ad3c <RCC_APB1PeriphResetCmd>
 801d9bc:	e026      	b.n	801da0c <USART_DeInit+0xcc>
  }
  else if (USARTx == UART4)
 801d9be:	9a01      	ldr	r2, [sp, #4]
 801d9c0:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 801d9c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801d9c8:	429a      	cmp	r2, r3
 801d9ca:	d10c      	bne.n	801d9e6 <USART_DeInit+0xa6>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 801d9cc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 801d9d0:	f04f 0101 	mov.w	r1, #1
 801d9d4:	f7fd f9b2 	bl	801ad3c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 801d9d8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 801d9dc:	f04f 0100 	mov.w	r1, #0
 801d9e0:	f7fd f9ac 	bl	801ad3c <RCC_APB1PeriphResetCmd>
 801d9e4:	e012      	b.n	801da0c <USART_DeInit+0xcc>
  }
  else
  {
    if  (USARTx == UART5)
 801d9e6:	9a01      	ldr	r2, [sp, #4]
 801d9e8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 801d9ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801d9f0:	429a      	cmp	r2, r3
 801d9f2:	d10b      	bne.n	801da0c <USART_DeInit+0xcc>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 801d9f4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801d9f8:	f04f 0101 	mov.w	r1, #1
 801d9fc:	f7fd f99e 	bl	801ad3c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 801da00:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801da04:	f04f 0100 	mov.w	r1, #0
 801da08:	f7fd f998 	bl	801ad3c <RCC_APB1PeriphResetCmd>
    }
  }
}
 801da0c:	b003      	add	sp, #12
 801da0e:	bd00      	pop	{pc}

0801da10 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 801da10:	b500      	push	{lr}
 801da12:	b095      	sub	sp, #84	; 0x54
 801da14:	9001      	str	r0, [sp, #4]
 801da16:	9100      	str	r1, [sp, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 801da18:	f04f 0300 	mov.w	r3, #0
 801da1c:	9313      	str	r3, [sp, #76]	; 0x4c
 801da1e:	f04f 0300 	mov.w	r3, #0
 801da22:	9312      	str	r3, [sp, #72]	; 0x48
 801da24:	f04f 0300 	mov.w	r3, #0
 801da28:	9311      	str	r3, [sp, #68]	; 0x44
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 801da2a:	9b01      	ldr	r3, [sp, #4]
 801da2c:	681b      	ldr	r3, [r3, #0]
 801da2e:	f023 0201 	bic.w	r2, r3, #1
 801da32:	9b01      	ldr	r3, [sp, #4]
 801da34:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 801da36:	9b01      	ldr	r3, [sp, #4]
 801da38:	685b      	ldr	r3, [r3, #4]
 801da3a:	9311      	str	r3, [sp, #68]	; 0x44
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 801da3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801da3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801da42:	9311      	str	r3, [sp, #68]	; 0x44
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 801da44:	9b00      	ldr	r3, [sp, #0]
 801da46:	689b      	ldr	r3, [r3, #8]
 801da48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801da4a:	4313      	orrs	r3, r2
 801da4c:	9311      	str	r3, [sp, #68]	; 0x44
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 801da4e:	9b01      	ldr	r3, [sp, #4]
 801da50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801da52:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 801da54:	9b01      	ldr	r3, [sp, #4]
 801da56:	681b      	ldr	r3, [r3, #0]
 801da58:	9311      	str	r3, [sp, #68]	; 0x44
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 801da5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801da5c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 801da60:	f023 030c 	bic.w	r3, r3, #12
 801da64:	9311      	str	r3, [sp, #68]	; 0x44
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 801da66:	9b00      	ldr	r3, [sp, #0]
 801da68:	685a      	ldr	r2, [r3, #4]
 801da6a:	9b00      	ldr	r3, [sp, #0]
 801da6c:	68db      	ldr	r3, [r3, #12]
 801da6e:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 801da70:	9b00      	ldr	r3, [sp, #0]
 801da72:	691b      	ldr	r3, [r3, #16]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 801da74:	4313      	orrs	r3, r2
 801da76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801da78:	4313      	orrs	r3, r2
 801da7a:	9311      	str	r3, [sp, #68]	; 0x44
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 801da7c:	9b01      	ldr	r3, [sp, #4]
 801da7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801da80:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
 801da82:	9b01      	ldr	r3, [sp, #4]
 801da84:	689b      	ldr	r3, [r3, #8]
 801da86:	9311      	str	r3, [sp, #68]	; 0x44
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 801da88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801da8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801da8e:	9311      	str	r3, [sp, #68]	; 0x44
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 801da90:	9b00      	ldr	r3, [sp, #0]
 801da92:	695b      	ldr	r3, [r3, #20]
 801da94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801da96:	4313      	orrs	r3, r2
 801da98:	9311      	str	r3, [sp, #68]	; 0x44
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 801da9a:	9b01      	ldr	r3, [sp, #4]
 801da9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801da9e:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 801daa0:	ab02      	add	r3, sp, #8
 801daa2:	4618      	mov	r0, r3
 801daa4:	f7fc fca2 	bl	801a3ec <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 801daa8:	9a01      	ldr	r2, [sp, #4]
 801daaa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801daae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801dab2:	429a      	cmp	r2, r3
 801dab4:	d102      	bne.n	801dabc <USART_Init+0xac>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 801dab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dab8:	9312      	str	r3, [sp, #72]	; 0x48
 801daba:	e01f      	b.n	801dafc <USART_Init+0xec>
  }
  else if (USARTx == USART2)
 801dabc:	9a01      	ldr	r2, [sp, #4]
 801dabe:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 801dac2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801dac6:	429a      	cmp	r2, r3
 801dac8:	d102      	bne.n	801dad0 <USART_Init+0xc0>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 801daca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dacc:	9312      	str	r3, [sp, #72]	; 0x48
 801dace:	e015      	b.n	801dafc <USART_Init+0xec>
  }
  else if (USARTx == USART3)
 801dad0:	9a01      	ldr	r2, [sp, #4]
 801dad2:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 801dad6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801dada:	429a      	cmp	r2, r3
 801dadc:	d102      	bne.n	801dae4 <USART_Init+0xd4>
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 801dade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dae0:	9312      	str	r3, [sp, #72]	; 0x48
 801dae2:	e00b      	b.n	801dafc <USART_Init+0xec>
  }
  else if (USARTx == UART4)
 801dae4:	9a01      	ldr	r2, [sp, #4]
 801dae6:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 801daea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801daee:	429a      	cmp	r2, r3
 801daf0:	d102      	bne.n	801daf8 <USART_Init+0xe8>
  {
    apbclock = RCC_ClocksStatus.UART4CLK_Frequency;
 801daf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801daf4:	9312      	str	r3, [sp, #72]	; 0x48
 801daf6:	e001      	b.n	801dafc <USART_Init+0xec>
  }
  else 
  {
    apbclock = RCC_ClocksStatus.UART5CLK_Frequency;
 801daf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dafa:	9312      	str	r3, [sp, #72]	; 0x48
  }  
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 801dafc:	9b01      	ldr	r3, [sp, #4]
 801dafe:	681b      	ldr	r3, [r3, #0]
 801db00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801db04:	2b00      	cmp	r3, #0
 801db06:	d013      	beq.n	801db30 <USART_Init+0x120>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 801db08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801db0a:	ea4f 0243 	mov.w	r2, r3, lsl #1
 801db0e:	9b00      	ldr	r3, [sp, #0]
 801db10:	681b      	ldr	r3, [r3, #0]
 801db12:	fbb2 f3f3 	udiv	r3, r2, r3
 801db16:	9313      	str	r3, [sp, #76]	; 0x4c
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 801db18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801db1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801db1e:	9a00      	ldr	r2, [sp, #0]
 801db20:	6812      	ldr	r2, [r2, #0]
 801db22:	fbb3 f1f2 	udiv	r1, r3, r2
 801db26:	fb02 f201 	mul.w	r2, r2, r1
 801db2a:	1a9b      	subs	r3, r3, r2
 801db2c:	9311      	str	r3, [sp, #68]	; 0x44
 801db2e:	e00e      	b.n	801db4e <USART_Init+0x13e>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 801db30:	9b00      	ldr	r3, [sp, #0]
 801db32:	681b      	ldr	r3, [r3, #0]
 801db34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801db36:	fbb2 f3f3 	udiv	r3, r2, r3
 801db3a:	9313      	str	r3, [sp, #76]	; 0x4c
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 801db3c:	9b00      	ldr	r3, [sp, #0]
 801db3e:	681a      	ldr	r2, [r3, #0]
 801db40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801db42:	fbb3 f1f2 	udiv	r1, r3, r2
 801db46:	fb02 f201 	mul.w	r2, r2, r1
 801db4a:	1a9b      	subs	r3, r3, r2
 801db4c:	9311      	str	r3, [sp, #68]	; 0x44
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 801db4e:	9b00      	ldr	r3, [sp, #0]
 801db50:	681b      	ldr	r3, [r3, #0]
 801db52:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801db56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801db58:	429a      	cmp	r2, r3
 801db5a:	d803      	bhi.n	801db64 <USART_Init+0x154>
  {
    divider++;
 801db5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801db5e:	f103 0301 	add.w	r3, r3, #1
 801db62:	9313      	str	r3, [sp, #76]	; 0x4c
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 801db64:	9b01      	ldr	r3, [sp, #4]
 801db66:	681b      	ldr	r3, [r3, #0]
 801db68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	d00c      	beq.n	801db8a <USART_Init+0x17a>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 801db70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801db72:	f003 030f 	and.w	r3, r3, #15
 801db76:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801db7a:	9311      	str	r3, [sp, #68]	; 0x44
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 801db7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801db7e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 801db82:	4013      	ands	r3, r2
 801db84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801db86:	4313      	orrs	r3, r2
 801db88:	9313      	str	r3, [sp, #76]	; 0x4c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 801db8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801db8c:	b29a      	uxth	r2, r3
 801db8e:	9b01      	ldr	r3, [sp, #4]
 801db90:	819a      	strh	r2, [r3, #12]
}
 801db92:	b015      	add	sp, #84	; 0x54
 801db94:	bd00      	pop	{pc}
 801db96:	bf00      	nop

0801db98 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 801db98:	b082      	sub	sp, #8
 801db9a:	9001      	str	r0, [sp, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 801db9c:	9b01      	ldr	r3, [sp, #4]
 801db9e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 801dba2:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 801dba4:	9b01      	ldr	r3, [sp, #4]
 801dba6:	f04f 0200 	mov.w	r2, #0
 801dbaa:	605a      	str	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 801dbac:	9b01      	ldr	r3, [sp, #4]
 801dbae:	f04f 0200 	mov.w	r2, #0
 801dbb2:	609a      	str	r2, [r3, #8]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 801dbb4:	9b01      	ldr	r3, [sp, #4]
 801dbb6:	f04f 0200 	mov.w	r2, #0
 801dbba:	60da      	str	r2, [r3, #12]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 801dbbc:	9b01      	ldr	r3, [sp, #4]
 801dbbe:	f04f 020c 	mov.w	r2, #12
 801dbc2:	611a      	str	r2, [r3, #16]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 801dbc4:	9b01      	ldr	r3, [sp, #4]
 801dbc6:	f04f 0200 	mov.w	r2, #0
 801dbca:	615a      	str	r2, [r3, #20]
}
 801dbcc:	b002      	add	sp, #8
 801dbce:	4770      	bx	lr

0801dbd0 <USART_ClockInit>:
  *         structure that contains the configuration information for the specified
  *         USART peripheral.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 801dbd0:	b084      	sub	sp, #16
 801dbd2:	9001      	str	r0, [sp, #4]
 801dbd4:	9100      	str	r1, [sp, #0]
  uint32_t tmpreg = 0;
 801dbd6:	f04f 0300 	mov.w	r3, #0
 801dbda:	9303      	str	r3, [sp, #12]
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 801dbdc:	9b01      	ldr	r3, [sp, #4]
 801dbde:	685b      	ldr	r3, [r3, #4]
 801dbe0:	9303      	str	r3, [sp, #12]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 801dbe2:	9b03      	ldr	r3, [sp, #12]
 801dbe4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801dbe8:	9303      	str	r3, [sp, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 801dbea:	9b00      	ldr	r3, [sp, #0]
 801dbec:	681a      	ldr	r2, [r3, #0]
 801dbee:	9b00      	ldr	r3, [sp, #0]
 801dbf0:	685b      	ldr	r3, [r3, #4]
 801dbf2:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 801dbf4:	9b00      	ldr	r3, [sp, #0]
 801dbf6:	689b      	ldr	r3, [r3, #8]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 801dbf8:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 801dbfa:	9b00      	ldr	r3, [sp, #0]
 801dbfc:	68db      	ldr	r3, [r3, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 801dbfe:	4313      	orrs	r3, r2
 801dc00:	9a03      	ldr	r2, [sp, #12]
 801dc02:	4313      	orrs	r3, r2
 801dc04:	9303      	str	r3, [sp, #12]
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 801dc06:	9b01      	ldr	r3, [sp, #4]
 801dc08:	9a03      	ldr	r2, [sp, #12]
 801dc0a:	605a      	str	r2, [r3, #4]
}
 801dc0c:	b004      	add	sp, #16
 801dc0e:	4770      	bx	lr

0801dc10 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 801dc10:	b082      	sub	sp, #8
 801dc12:	9001      	str	r0, [sp, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 801dc14:	9b01      	ldr	r3, [sp, #4]
 801dc16:	f04f 0200 	mov.w	r2, #0
 801dc1a:	601a      	str	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 801dc1c:	9b01      	ldr	r3, [sp, #4]
 801dc1e:	f04f 0200 	mov.w	r2, #0
 801dc22:	605a      	str	r2, [r3, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 801dc24:	9b01      	ldr	r3, [sp, #4]
 801dc26:	f04f 0200 	mov.w	r2, #0
 801dc2a:	609a      	str	r2, [r3, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 801dc2c:	9b01      	ldr	r3, [sp, #4]
 801dc2e:	f04f 0200 	mov.w	r2, #0
 801dc32:	60da      	str	r2, [r3, #12]
}
 801dc34:	b002      	add	sp, #8
 801dc36:	4770      	bx	lr

0801dc38 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801dc38:	b082      	sub	sp, #8
 801dc3a:	9001      	str	r0, [sp, #4]
 801dc3c:	460b      	mov	r3, r1
 801dc3e:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801dc42:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	d006      	beq.n	801dc58 <USART_Cmd+0x20>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 801dc4a:	9b01      	ldr	r3, [sp, #4]
 801dc4c:	681b      	ldr	r3, [r3, #0]
 801dc4e:	f043 0201 	orr.w	r2, r3, #1
 801dc52:	9b01      	ldr	r3, [sp, #4]
 801dc54:	601a      	str	r2, [r3, #0]
 801dc56:	e005      	b.n	801dc64 <USART_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 801dc58:	9b01      	ldr	r3, [sp, #4]
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	f023 0201 	bic.w	r2, r3, #1
 801dc60:	9b01      	ldr	r3, [sp, #4]
 801dc62:	601a      	str	r2, [r3, #0]
  }
}
 801dc64:	b002      	add	sp, #8
 801dc66:	4770      	bx	lr

0801dc68 <USART_DirectionModeCmd>:
  * @param  NewState: new state of the USART transfer direction.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DirectionModeCmd(USART_TypeDef* USARTx, uint32_t USART_DirectionMode, FunctionalState NewState)
{
 801dc68:	b084      	sub	sp, #16
 801dc6a:	9003      	str	r0, [sp, #12]
 801dc6c:	9102      	str	r1, [sp, #8]
 801dc6e:	4613      	mov	r3, r2
 801dc70:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MODE(USART_DirectionMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 801dc74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	d006      	beq.n	801dc8a <USART_DirectionModeCmd+0x22>
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 801dc7c:	9b03      	ldr	r3, [sp, #12]
 801dc7e:	681a      	ldr	r2, [r3, #0]
 801dc80:	9b02      	ldr	r3, [sp, #8]
 801dc82:	431a      	orrs	r2, r3
 801dc84:	9b03      	ldr	r3, [sp, #12]
 801dc86:	601a      	str	r2, [r3, #0]
 801dc88:	e007      	b.n	801dc9a <USART_DirectionModeCmd+0x32>
  }
  else
  {
    /* Disable the USART's transfer interface by clearing the TE and/or RE bits
       in the USART CR3 register */
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 801dc8a:	9b03      	ldr	r3, [sp, #12]
 801dc8c:	681a      	ldr	r2, [r3, #0]
 801dc8e:	9b02      	ldr	r3, [sp, #8]
 801dc90:	ea6f 0303 	mvn.w	r3, r3
 801dc94:	401a      	ands	r2, r3
 801dc96:	9b03      	ldr	r3, [sp, #12]
 801dc98:	601a      	str	r2, [r3, #0]
  }
}
 801dc9a:	b004      	add	sp, #16
 801dc9c:	4770      	bx	lr
 801dc9e:	bf00      	nop

0801dca0 <USART_OverSampling8Cmd>:
  *   This function has to be called before calling USART_Init()
  *   function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801dca0:	b082      	sub	sp, #8
 801dca2:	9001      	str	r0, [sp, #4]
 801dca4:	460b      	mov	r3, r1
 801dca6:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801dcaa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	d006      	beq.n	801dcc0 <USART_OverSampling8Cmd+0x20>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 801dcb2:	9b01      	ldr	r3, [sp, #4]
 801dcb4:	681b      	ldr	r3, [r3, #0]
 801dcb6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 801dcba:	9b01      	ldr	r3, [sp, #4]
 801dcbc:	601a      	str	r2, [r3, #0]
 801dcbe:	e005      	b.n	801dccc <USART_OverSampling8Cmd+0x2c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 801dcc0:	9b01      	ldr	r3, [sp, #4]
 801dcc2:	681b      	ldr	r3, [r3, #0]
 801dcc4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 801dcc8:	9b01      	ldr	r3, [sp, #4]
 801dcca:	601a      	str	r2, [r3, #0]
  }
}
 801dccc:	b002      	add	sp, #8
 801dcce:	4770      	bx	lr

0801dcd0 <USART_OneBitMethodCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801dcd0:	b082      	sub	sp, #8
 801dcd2:	9001      	str	r0, [sp, #4]
 801dcd4:	460b      	mov	r3, r1
 801dcd6:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801dcda:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801dcde:	2b00      	cmp	r3, #0
 801dce0:	d006      	beq.n	801dcf0 <USART_OneBitMethodCmd+0x20>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 801dce2:	9b01      	ldr	r3, [sp, #4]
 801dce4:	689b      	ldr	r3, [r3, #8]
 801dce6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 801dcea:	9b01      	ldr	r3, [sp, #4]
 801dcec:	609a      	str	r2, [r3, #8]
 801dcee:	e005      	b.n	801dcfc <USART_OneBitMethodCmd+0x2c>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 801dcf0:	9b01      	ldr	r3, [sp, #4]
 801dcf2:	689b      	ldr	r3, [r3, #8]
 801dcf4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801dcf8:	9b01      	ldr	r3, [sp, #4]
 801dcfa:	609a      	str	r2, [r3, #8]
  }
}
 801dcfc:	b002      	add	sp, #8
 801dcfe:	4770      	bx	lr

0801dd00 <USART_MSBFirstCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function. 
  * @retval None
  */
void USART_MSBFirstCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801dd00:	b082      	sub	sp, #8
 801dd02:	9001      	str	r0, [sp, #4]
 801dd04:	460b      	mov	r3, r1
 801dd06:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801dd0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	d006      	beq.n	801dd20 <USART_MSBFirstCmd+0x20>
  {
    /* Enable the most significant bit first transmitted/received following the
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 801dd12:	9b01      	ldr	r3, [sp, #4]
 801dd14:	685b      	ldr	r3, [r3, #4]
 801dd16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801dd1a:	9b01      	ldr	r3, [sp, #4]
 801dd1c:	605a      	str	r2, [r3, #4]
 801dd1e:	e005      	b.n	801dd2c <USART_MSBFirstCmd+0x2c>
  }
  else
  {
    /* Disable the most significant bit first transmitted/received following the
       start bit by clearing the MSBFIRST bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 801dd20:	9b01      	ldr	r3, [sp, #4]
 801dd22:	685b      	ldr	r3, [r3, #4]
 801dd24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 801dd28:	9b01      	ldr	r3, [sp, #4]
 801dd2a:	605a      	str	r2, [r3, #4]
  }
}
 801dd2c:	b002      	add	sp, #8
 801dd2e:	4770      	bx	lr

0801dd30 <USART_DataInvCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function. 
  * @retval None
  */
void USART_DataInvCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801dd30:	b082      	sub	sp, #8
 801dd32:	9001      	str	r0, [sp, #4]
 801dd34:	460b      	mov	r3, r1
 801dd36:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801dd3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	d006      	beq.n	801dd50 <USART_DataInvCmd+0x20>
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 801dd42:	9b01      	ldr	r3, [sp, #4]
 801dd44:	685b      	ldr	r3, [r3, #4]
 801dd46:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801dd4a:	9b01      	ldr	r3, [sp, #4]
 801dd4c:	605a      	str	r2, [r3, #4]
 801dd4e:	e005      	b.n	801dd5c <USART_DataInvCmd+0x2c>
  }
  else
  {
    /* Disable the binary data inversion feature by clearing the DATAINV bit in
       the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 801dd50:	9b01      	ldr	r3, [sp, #4]
 801dd52:	685b      	ldr	r3, [r3, #4]
 801dd54:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 801dd58:	9b01      	ldr	r3, [sp, #4]
 801dd5a:	605a      	str	r2, [r3, #4]
  }
}
 801dd5c:	b002      	add	sp, #8
 801dd5e:	4770      	bx	lr

0801dd60 <USART_InvPinCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_InvPinCmd(USART_TypeDef* USARTx, uint32_t USART_InvPin, FunctionalState NewState)
{
 801dd60:	b084      	sub	sp, #16
 801dd62:	9003      	str	r0, [sp, #12]
 801dd64:	9102      	str	r1, [sp, #8]
 801dd66:	4613      	mov	r3, r2
 801dd68:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 801dd6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801dd70:	2b00      	cmp	r3, #0
 801dd72:	d006      	beq.n	801dd82 <USART_InvPinCmd+0x22>
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 801dd74:	9b03      	ldr	r3, [sp, #12]
 801dd76:	685a      	ldr	r2, [r3, #4]
 801dd78:	9b02      	ldr	r3, [sp, #8]
 801dd7a:	431a      	orrs	r2, r3
 801dd7c:	9b03      	ldr	r3, [sp, #12]
 801dd7e:	605a      	str	r2, [r3, #4]
 801dd80:	e007      	b.n	801dd92 <USART_InvPinCmd+0x32>
  }
  else
  {
    /* Disable the active level inversion for selected requests by clearing the 
       TXINV and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
 801dd82:	9b03      	ldr	r3, [sp, #12]
 801dd84:	685a      	ldr	r2, [r3, #4]
 801dd86:	9b02      	ldr	r3, [sp, #8]
 801dd88:	ea6f 0303 	mvn.w	r3, r3
 801dd8c:	401a      	ands	r2, r3
 801dd8e:	9b03      	ldr	r3, [sp, #12]
 801dd90:	605a      	str	r2, [r3, #4]
  }
}
 801dd92:	b004      	add	sp, #16
 801dd94:	4770      	bx	lr
 801dd96:	bf00      	nop

0801dd98 <USART_SWAPPinCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.
  * @retval None
  */
void USART_SWAPPinCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801dd98:	b082      	sub	sp, #8
 801dd9a:	9001      	str	r0, [sp, #4]
 801dd9c:	460b      	mov	r3, r1
 801dd9e:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801dda2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801dda6:	2b00      	cmp	r3, #0
 801dda8:	d006      	beq.n	801ddb8 <USART_SWAPPinCmd+0x20>
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 801ddaa:	9b01      	ldr	r3, [sp, #4]
 801ddac:	685b      	ldr	r3, [r3, #4]
 801ddae:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 801ddb2:	9b01      	ldr	r3, [sp, #4]
 801ddb4:	605a      	str	r2, [r3, #4]
 801ddb6:	e005      	b.n	801ddc4 <USART_SWAPPinCmd+0x2c>
  }
  else
  {
    /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 801ddb8:	9b01      	ldr	r3, [sp, #4]
 801ddba:	685b      	ldr	r3, [r3, #4]
 801ddbc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 801ddc0:	9b01      	ldr	r3, [sp, #4]
 801ddc2:	605a      	str	r2, [r3, #4]
  }
}
 801ddc4:	b002      	add	sp, #8
 801ddc6:	4770      	bx	lr

0801ddc8 <USART_ReceiverTimeOutCmd>:
  * @param  NewState: new state of the USARTx receiver Time Out.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverTimeOutCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801ddc8:	b082      	sub	sp, #8
 801ddca:	9001      	str	r0, [sp, #4]
 801ddcc:	460b      	mov	r3, r1
 801ddce:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801ddd2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	d006      	beq.n	801dde8 <USART_ReceiverTimeOutCmd+0x20>
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 801ddda:	9b01      	ldr	r3, [sp, #4]
 801dddc:	685b      	ldr	r3, [r3, #4]
 801ddde:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801dde2:	9b01      	ldr	r3, [sp, #4]
 801dde4:	605a      	str	r2, [r3, #4]
 801dde6:	e005      	b.n	801ddf4 <USART_ReceiverTimeOutCmd+0x2c>
  }
  else
  {
    /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 801dde8:	9b01      	ldr	r3, [sp, #4]
 801ddea:	685b      	ldr	r3, [r3, #4]
 801ddec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 801ddf0:	9b01      	ldr	r3, [sp, #4]
 801ddf2:	605a      	str	r2, [r3, #4]
  }
}
 801ddf4:	b002      	add	sp, #8
 801ddf6:	4770      	bx	lr

0801ddf8 <USART_SetReceiverTimeOut>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  USART_ReceiverTimeOut: specifies the Receiver Time Out value.
  * @retval None
  */
void USART_SetReceiverTimeOut(USART_TypeDef* USARTx, uint32_t USART_ReceiverTimeOut)
{    
 801ddf8:	b082      	sub	sp, #8
 801ddfa:	9001      	str	r0, [sp, #4]
 801ddfc:	9100      	str	r1, [sp, #0]
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));

  /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 801ddfe:	9b01      	ldr	r3, [sp, #4]
 801de00:	695b      	ldr	r3, [r3, #20]
 801de02:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 801de06:	9b01      	ldr	r3, [sp, #4]
 801de08:	615a      	str	r2, [r3, #20]
  /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR |= USART_ReceiverTimeOut;
 801de0a:	9b01      	ldr	r3, [sp, #4]
 801de0c:	695a      	ldr	r2, [r3, #20]
 801de0e:	9b00      	ldr	r3, [sp, #0]
 801de10:	431a      	orrs	r2, r3
 801de12:	9b01      	ldr	r3, [sp, #4]
 801de14:	615a      	str	r2, [r3, #20]
}
 801de16:	b002      	add	sp, #8
 801de18:	4770      	bx	lr
 801de1a:	bf00      	nop

0801de1c <USART_SetPrescaler>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
 801de1c:	b082      	sub	sp, #8
 801de1e:	9001      	str	r0, [sp, #4]
 801de20:	460b      	mov	r3, r1
 801de22:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 801de26:	9b01      	ldr	r3, [sp, #4]
 801de28:	8a1b      	ldrh	r3, [r3, #16]
 801de2a:	b29b      	uxth	r3, r3
 801de2c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801de30:	b29a      	uxth	r2, r3
 801de32:	9b01      	ldr	r3, [sp, #4]
 801de34:	821a      	strh	r2, [r3, #16]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 801de36:	9b01      	ldr	r3, [sp, #4]
 801de38:	8a1b      	ldrh	r3, [r3, #16]
 801de3a:	b29a      	uxth	r2, r3
 801de3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801de40:	b29b      	uxth	r3, r3
 801de42:	4313      	orrs	r3, r2
 801de44:	b29a      	uxth	r2, r3
 801de46:	9b01      	ldr	r3, [sp, #4]
 801de48:	821a      	strh	r2, [r3, #16]
}
 801de4a:	b002      	add	sp, #8
 801de4c:	4770      	bx	lr
 801de4e:	bf00      	nop

0801de50 <USART_STOPModeCmd>:
  * @note
  *   This function has to be called when USART clock is set to HSI or LSE.
  * @retval None
  */
void USART_STOPModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801de50:	b082      	sub	sp, #8
 801de52:	9001      	str	r0, [sp, #4]
 801de54:	460b      	mov	r3, r1
 801de56:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801de5a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d006      	beq.n	801de70 <USART_STOPModeCmd+0x20>
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 801de62:	9b01      	ldr	r3, [sp, #4]
 801de64:	681b      	ldr	r3, [r3, #0]
 801de66:	f043 0202 	orr.w	r2, r3, #2
 801de6a:	9b01      	ldr	r3, [sp, #4]
 801de6c:	601a      	str	r2, [r3, #0]
 801de6e:	e005      	b.n	801de7c <USART_STOPModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
       register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 801de70:	9b01      	ldr	r3, [sp, #4]
 801de72:	681b      	ldr	r3, [r3, #0]
 801de74:	f023 0202 	bic.w	r2, r3, #2
 801de78:	9b01      	ldr	r3, [sp, #4]
 801de7a:	601a      	str	r2, [r3, #0]
  }
}
 801de7c:	b002      	add	sp, #8
 801de7e:	4770      	bx	lr

0801de80 <USART_StopModeWakeUpSourceConfig>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_StopModeWakeUpSourceConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUpSource)
{
 801de80:	b082      	sub	sp, #8
 801de82:	9001      	str	r0, [sp, #4]
 801de84:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 801de86:	9b01      	ldr	r3, [sp, #4]
 801de88:	689b      	ldr	r3, [r3, #8]
 801de8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801de8e:	9b01      	ldr	r3, [sp, #4]
 801de90:	609a      	str	r2, [r3, #8]
  USARTx->CR3 |= USART_WakeUpSource;
 801de92:	9b01      	ldr	r3, [sp, #4]
 801de94:	689a      	ldr	r2, [r3, #8]
 801de96:	9b00      	ldr	r3, [sp, #0]
 801de98:	431a      	orrs	r2, r3
 801de9a:	9b01      	ldr	r3, [sp, #4]
 801de9c:	609a      	str	r2, [r3, #8]
}
 801de9e:	b002      	add	sp, #8
 801dea0:	4770      	bx	lr
 801dea2:	bf00      	nop

0801dea4 <USART_AutoBaudRateCmd>:
  * @param  NewState: new state of the USARTx auto baud rate.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_AutoBaudRateCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801dea4:	b082      	sub	sp, #8
 801dea6:	9001      	str	r0, [sp, #4]
 801dea8:	460b      	mov	r3, r1
 801deaa:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801deae:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801deb2:	2b00      	cmp	r3, #0
 801deb4:	d006      	beq.n	801dec4 <USART_AutoBaudRateCmd+0x20>
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 801deb6:	9b01      	ldr	r3, [sp, #4]
 801deb8:	685b      	ldr	r3, [r3, #4]
 801deba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801debe:	9b01      	ldr	r3, [sp, #4]
 801dec0:	605a      	str	r2, [r3, #4]
 801dec2:	e005      	b.n	801ded0 <USART_AutoBaudRateCmd+0x2c>
  }
  else
  {
    /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 801dec4:	9b01      	ldr	r3, [sp, #4]
 801dec6:	685b      	ldr	r3, [r3, #4]
 801dec8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801decc:	9b01      	ldr	r3, [sp, #4]
 801dece:	605a      	str	r2, [r3, #4]
  }
}
 801ded0:	b002      	add	sp, #8
 801ded2:	4770      	bx	lr

0801ded4 <USART_AutoBaudRateConfig>:
  * @note
  *   This function has to be called before calling USART_Cmd() function. 
  * @retval None
  */
void USART_AutoBaudRateConfig(USART_TypeDef* USARTx, uint32_t USART_AutoBaudRate)
{
 801ded4:	b082      	sub	sp, #8
 801ded6:	9001      	str	r0, [sp, #4]
 801ded8:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 801deda:	9b01      	ldr	r3, [sp, #4]
 801dedc:	685b      	ldr	r3, [r3, #4]
 801dede:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 801dee2:	9b01      	ldr	r3, [sp, #4]
 801dee4:	605a      	str	r2, [r3, #4]
  USARTx->CR2 |= USART_AutoBaudRate;
 801dee6:	9b01      	ldr	r3, [sp, #4]
 801dee8:	685a      	ldr	r2, [r3, #4]
 801deea:	9b00      	ldr	r3, [sp, #0]
 801deec:	431a      	orrs	r2, r3
 801deee:	9b01      	ldr	r3, [sp, #4]
 801def0:	605a      	str	r2, [r3, #4]
}
 801def2:	b002      	add	sp, #8
 801def4:	4770      	bx	lr
 801def6:	bf00      	nop

0801def8 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 801def8:	b082      	sub	sp, #8
 801defa:	9001      	str	r0, [sp, #4]
 801defc:	460b      	mov	r3, r1
 801defe:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 801df02:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801df06:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801df0a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801df0e:	b29a      	uxth	r2, r3
 801df10:	9b01      	ldr	r3, [sp, #4]
 801df12:	851a      	strh	r2, [r3, #40]	; 0x28
}
 801df14:	b002      	add	sp, #8
 801df16:	4770      	bx	lr

0801df18 <USART_ReceiveData>:
  * @param  USARTx: Select the USART peripheral. This parameter can be one of the 
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 801df18:	b082      	sub	sp, #8
 801df1a:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 801df1c:	9b01      	ldr	r3, [sp, #4]
 801df1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801df20:	b29b      	uxth	r3, r3
 801df22:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801df26:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801df2a:	b29b      	uxth	r3, r3
}
 801df2c:	4618      	mov	r0, r3
 801df2e:	b002      	add	sp, #8
 801df30:	4770      	bx	lr
 801df32:	bf00      	nop

0801df34 <USART_SetAddress>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 801df34:	b082      	sub	sp, #8
 801df36:	9001      	str	r0, [sp, #4]
 801df38:	460b      	mov	r3, r1
 801df3a:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 801df3e:	9b01      	ldr	r3, [sp, #4]
 801df40:	685b      	ldr	r3, [r3, #4]
 801df42:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801df46:	9b01      	ldr	r3, [sp, #4]
 801df48:	605a      	str	r2, [r3, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 801df4a:	9b01      	ldr	r3, [sp, #4]
 801df4c:	685a      	ldr	r2, [r3, #4]
 801df4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801df52:	ea4f 6303 	mov.w	r3, r3, lsl #24
 801df56:	431a      	orrs	r2, r3
 801df58:	9b01      	ldr	r3, [sp, #4]
 801df5a:	605a      	str	r2, [r3, #4]
}
 801df5c:	b002      	add	sp, #8
 801df5e:	4770      	bx	lr

0801df60 <USART_MuteModeCmd>:
  * @param  NewState: new state of the USART mute mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_MuteModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801df60:	b082      	sub	sp, #8
 801df62:	9001      	str	r0, [sp, #4]
 801df64:	460b      	mov	r3, r1
 801df66:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 801df6a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801df6e:	2b00      	cmp	r3, #0
 801df70:	d006      	beq.n	801df80 <USART_MuteModeCmd+0x20>
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 801df72:	9b01      	ldr	r3, [sp, #4]
 801df74:	681b      	ldr	r3, [r3, #0]
 801df76:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801df7a:	9b01      	ldr	r3, [sp, #4]
 801df7c:	601a      	str	r2, [r3, #0]
 801df7e:	e005      	b.n	801df8c <USART_MuteModeCmd+0x2c>
  }
  else
  {
    /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 801df80:	9b01      	ldr	r3, [sp, #4]
 801df82:	681b      	ldr	r3, [r3, #0]
 801df84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801df88:	9b01      	ldr	r3, [sp, #4]
 801df8a:	601a      	str	r2, [r3, #0]
  }
}
 801df8c:	b002      	add	sp, #8
 801df8e:	4770      	bx	lr

0801df90 <USART_MuteModeWakeUpConfig>:
  *         @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *         @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_MuteModeWakeUpConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUp)
{
 801df90:	b082      	sub	sp, #8
 801df92:	9001      	str	r0, [sp, #4]
 801df94:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 801df96:	9b01      	ldr	r3, [sp, #4]
 801df98:	681b      	ldr	r3, [r3, #0]
 801df9a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801df9e:	9b01      	ldr	r3, [sp, #4]
 801dfa0:	601a      	str	r2, [r3, #0]
  USARTx->CR1 |= USART_WakeUp;
 801dfa2:	9b01      	ldr	r3, [sp, #4]
 801dfa4:	681a      	ldr	r2, [r3, #0]
 801dfa6:	9b00      	ldr	r3, [sp, #0]
 801dfa8:	431a      	orrs	r2, r3
 801dfaa:	9b01      	ldr	r3, [sp, #4]
 801dfac:	601a      	str	r2, [r3, #0]
}
 801dfae:	b002      	add	sp, #8
 801dfb0:	4770      	bx	lr
 801dfb2:	bf00      	nop

0801dfb4 <USART_AddressDetectionConfig>:
  *         @arg USART_AddressLength_4b: 4-bit address length detection 
  *         @arg USART_AddressLength_7b: 7-bit address length detection 
  * @retval None
  */
void USART_AddressDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_AddressLength)
{
 801dfb4:	b082      	sub	sp, #8
 801dfb6:	9001      	str	r0, [sp, #4]
 801dfb8:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 801dfba:	9b01      	ldr	r3, [sp, #4]
 801dfbc:	685b      	ldr	r3, [r3, #4]
 801dfbe:	f023 0210 	bic.w	r2, r3, #16
 801dfc2:	9b01      	ldr	r3, [sp, #4]
 801dfc4:	605a      	str	r2, [r3, #4]
  USARTx->CR2 |= USART_AddressLength;
 801dfc6:	9b01      	ldr	r3, [sp, #4]
 801dfc8:	685a      	ldr	r2, [r3, #4]
 801dfca:	9b00      	ldr	r3, [sp, #0]
 801dfcc:	431a      	orrs	r2, r3
 801dfce:	9b01      	ldr	r3, [sp, #4]
 801dfd0:	605a      	str	r2, [r3, #4]
}
 801dfd2:	b002      	add	sp, #8
 801dfd4:	4770      	bx	lr
 801dfd6:	bf00      	nop

0801dfd8 <USART_LINBreakDetectLengthConfig>:
  *         @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *         @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint32_t USART_LINBreakDetectLength)
{
 801dfd8:	b082      	sub	sp, #8
 801dfda:	9001      	str	r0, [sp, #4]
 801dfdc:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 801dfde:	9b01      	ldr	r3, [sp, #4]
 801dfe0:	685b      	ldr	r3, [r3, #4]
 801dfe2:	f023 0220 	bic.w	r2, r3, #32
 801dfe6:	9b01      	ldr	r3, [sp, #4]
 801dfe8:	605a      	str	r2, [r3, #4]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 801dfea:	9b01      	ldr	r3, [sp, #4]
 801dfec:	685a      	ldr	r2, [r3, #4]
 801dfee:	9b00      	ldr	r3, [sp, #0]
 801dff0:	431a      	orrs	r2, r3
 801dff2:	9b01      	ldr	r3, [sp, #4]
 801dff4:	605a      	str	r2, [r3, #4]
}
 801dff6:	b002      	add	sp, #8
 801dff8:	4770      	bx	lr
 801dffa:	bf00      	nop

0801dffc <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801dffc:	b082      	sub	sp, #8
 801dffe:	9001      	str	r0, [sp, #4]
 801e000:	460b      	mov	r3, r1
 801e002:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801e006:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801e00a:	2b00      	cmp	r3, #0
 801e00c:	d006      	beq.n	801e01c <USART_LINCmd+0x20>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 801e00e:	9b01      	ldr	r3, [sp, #4]
 801e010:	685b      	ldr	r3, [r3, #4]
 801e012:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801e016:	9b01      	ldr	r3, [sp, #4]
 801e018:	605a      	str	r2, [r3, #4]
 801e01a:	e005      	b.n	801e028 <USART_LINCmd+0x2c>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 801e01c:	9b01      	ldr	r3, [sp, #4]
 801e01e:	685b      	ldr	r3, [r3, #4]
 801e020:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801e024:	9b01      	ldr	r3, [sp, #4]
 801e026:	605a      	str	r2, [r3, #4]
  }
}
 801e028:	b002      	add	sp, #8
 801e02a:	4770      	bx	lr

0801e02c <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801e02c:	b082      	sub	sp, #8
 801e02e:	9001      	str	r0, [sp, #4]
 801e030:	460b      	mov	r3, r1
 801e032:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801e036:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801e03a:	2b00      	cmp	r3, #0
 801e03c:	d006      	beq.n	801e04c <USART_HalfDuplexCmd+0x20>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 801e03e:	9b01      	ldr	r3, [sp, #4]
 801e040:	689b      	ldr	r3, [r3, #8]
 801e042:	f043 0208 	orr.w	r2, r3, #8
 801e046:	9b01      	ldr	r3, [sp, #4]
 801e048:	609a      	str	r2, [r3, #8]
 801e04a:	e005      	b.n	801e058 <USART_HalfDuplexCmd+0x2c>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 801e04c:	9b01      	ldr	r3, [sp, #4]
 801e04e:	689b      	ldr	r3, [r3, #8]
 801e050:	f023 0208 	bic.w	r2, r3, #8
 801e054:	9b01      	ldr	r3, [sp, #4]
 801e056:	609a      	str	r2, [r3, #8]
  }
}
 801e058:	b002      	add	sp, #8
 801e05a:	4770      	bx	lr

0801e05c <USART_SetGuardTime>:
  *         following values: USART1 or USART2 or USART3.
  * @param  USART_GuardTime: specifies the guard time.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 801e05c:	b082      	sub	sp, #8
 801e05e:	9001      	str	r0, [sp, #4]
 801e060:	460b      	mov	r3, r1
 801e062:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 801e066:	9b01      	ldr	r3, [sp, #4]
 801e068:	8a1b      	ldrh	r3, [r3, #16]
 801e06a:	b29b      	uxth	r3, r3
 801e06c:	b2db      	uxtb	r3, r3
 801e06e:	b29a      	uxth	r2, r3
 801e070:	9b01      	ldr	r3, [sp, #4]
 801e072:	821a      	strh	r2, [r3, #16]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 801e074:	9b01      	ldr	r3, [sp, #4]
 801e076:	8a1b      	ldrh	r3, [r3, #16]
 801e078:	b29a      	uxth	r2, r3
 801e07a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801e07e:	b29b      	uxth	r3, r3
 801e080:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801e084:	b29b      	uxth	r3, r3
 801e086:	4313      	orrs	r3, r2
 801e088:	b29a      	uxth	r2, r3
 801e08a:	9b01      	ldr	r3, [sp, #4]
 801e08c:	821a      	strh	r2, [r3, #16]
}
 801e08e:	b002      	add	sp, #8
 801e090:	4770      	bx	lr
 801e092:	bf00      	nop

0801e094 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *         This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801e094:	b082      	sub	sp, #8
 801e096:	9001      	str	r0, [sp, #4]
 801e098:	460b      	mov	r3, r1
 801e09a:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801e09e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	d006      	beq.n	801e0b4 <USART_SmartCardCmd+0x20>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 801e0a6:	9b01      	ldr	r3, [sp, #4]
 801e0a8:	689b      	ldr	r3, [r3, #8]
 801e0aa:	f043 0220 	orr.w	r2, r3, #32
 801e0ae:	9b01      	ldr	r3, [sp, #4]
 801e0b0:	609a      	str	r2, [r3, #8]
 801e0b2:	e005      	b.n	801e0c0 <USART_SmartCardCmd+0x2c>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 801e0b4:	9b01      	ldr	r3, [sp, #4]
 801e0b6:	689b      	ldr	r3, [r3, #8]
 801e0b8:	f023 0220 	bic.w	r2, r3, #32
 801e0bc:	9b01      	ldr	r3, [sp, #4]
 801e0be:	609a      	str	r2, [r3, #8]
  }
}
 801e0c0:	b002      	add	sp, #8
 801e0c2:	4770      	bx	lr

0801e0c4 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801e0c4:	b082      	sub	sp, #8
 801e0c6:	9001      	str	r0, [sp, #4]
 801e0c8:	460b      	mov	r3, r1
 801e0ca:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801e0ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801e0d2:	2b00      	cmp	r3, #0
 801e0d4:	d006      	beq.n	801e0e4 <USART_SmartCardNACKCmd+0x20>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 801e0d6:	9b01      	ldr	r3, [sp, #4]
 801e0d8:	689b      	ldr	r3, [r3, #8]
 801e0da:	f043 0210 	orr.w	r2, r3, #16
 801e0de:	9b01      	ldr	r3, [sp, #4]
 801e0e0:	609a      	str	r2, [r3, #8]
 801e0e2:	e005      	b.n	801e0f0 <USART_SmartCardNACKCmd+0x2c>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 801e0e4:	9b01      	ldr	r3, [sp, #4]
 801e0e6:	689b      	ldr	r3, [r3, #8]
 801e0e8:	f023 0210 	bic.w	r2, r3, #16
 801e0ec:	9b01      	ldr	r3, [sp, #4]
 801e0ee:	609a      	str	r2, [r3, #8]
  }
}
 801e0f0:	b002      	add	sp, #8
 801e0f2:	4770      	bx	lr

0801e0f4 <USART_SetAutoRetryCount>:
  *         following values: USART1 or USART2 or USART3.
  * @param  USART_AutoCount: specifies the Smart Card auto retry count.
  * @retval None
  */
void USART_SetAutoRetryCount(USART_TypeDef* USARTx, uint8_t USART_AutoCount)
{    
 801e0f4:	b082      	sub	sp, #8
 801e0f6:	9001      	str	r0, [sp, #4]
 801e0f8:	460b      	mov	r3, r1
 801e0fa:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 801e0fe:	9b01      	ldr	r3, [sp, #4]
 801e100:	689b      	ldr	r3, [r3, #8]
 801e102:	f423 2260 	bic.w	r2, r3, #917504	; 0xe0000
 801e106:	9b01      	ldr	r3, [sp, #4]
 801e108:	609a      	str	r2, [r3, #8]
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 801e10a:	9b01      	ldr	r3, [sp, #4]
 801e10c:	689a      	ldr	r2, [r3, #8]
 801e10e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801e112:	ea4f 4343 	mov.w	r3, r3, lsl #17
 801e116:	431a      	orrs	r2, r3
 801e118:	9b01      	ldr	r3, [sp, #4]
 801e11a:	609a      	str	r2, [r3, #8]
}
 801e11c:	b002      	add	sp, #8
 801e11e:	4770      	bx	lr

0801e120 <USART_SetBlockLength>:
  *         following values: USART1 or USART2 or USART3.
  * @param  USART_BlockLength: specifies the Smart Card block length.
  * @retval None
  */
void USART_SetBlockLength(USART_TypeDef* USARTx, uint8_t USART_BlockLength)
{    
 801e120:	b082      	sub	sp, #8
 801e122:	9001      	str	r0, [sp, #4]
 801e124:	460b      	mov	r3, r1
 801e126:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 801e12a:	9b01      	ldr	r3, [sp, #4]
 801e12c:	695b      	ldr	r3, [r3, #20]
 801e12e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801e132:	9b01      	ldr	r3, [sp, #4]
 801e134:	615a      	str	r2, [r3, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 801e136:	9b01      	ldr	r3, [sp, #4]
 801e138:	695a      	ldr	r2, [r3, #20]
 801e13a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801e13e:	ea4f 6303 	mov.w	r3, r3, lsl #24
 801e142:	431a      	orrs	r2, r3
 801e144:	9b01      	ldr	r3, [sp, #4]
 801e146:	615a      	str	r2, [r3, #20]
}
 801e148:	b002      	add	sp, #8
 801e14a:	4770      	bx	lr

0801e14c <USART_IrDAConfig>:
  *         @arg USART_IrDAMode_LowPower
  *         @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint32_t USART_IrDAMode)
{
 801e14c:	b082      	sub	sp, #8
 801e14e:	9001      	str	r0, [sp, #4]
 801e150:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 801e152:	9b01      	ldr	r3, [sp, #4]
 801e154:	689b      	ldr	r3, [r3, #8]
 801e156:	f023 0204 	bic.w	r2, r3, #4
 801e15a:	9b01      	ldr	r3, [sp, #4]
 801e15c:	609a      	str	r2, [r3, #8]
  USARTx->CR3 |= USART_IrDAMode;
 801e15e:	9b01      	ldr	r3, [sp, #4]
 801e160:	689a      	ldr	r2, [r3, #8]
 801e162:	9b00      	ldr	r3, [sp, #0]
 801e164:	431a      	orrs	r2, r3
 801e166:	9b01      	ldr	r3, [sp, #4]
 801e168:	609a      	str	r2, [r3, #8]
}
 801e16a:	b002      	add	sp, #8
 801e16c:	4770      	bx	lr
 801e16e:	bf00      	nop

0801e170 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801e170:	b082      	sub	sp, #8
 801e172:	9001      	str	r0, [sp, #4]
 801e174:	460b      	mov	r3, r1
 801e176:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801e17a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801e17e:	2b00      	cmp	r3, #0
 801e180:	d006      	beq.n	801e190 <USART_IrDACmd+0x20>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 801e182:	9b01      	ldr	r3, [sp, #4]
 801e184:	689b      	ldr	r3, [r3, #8]
 801e186:	f043 0202 	orr.w	r2, r3, #2
 801e18a:	9b01      	ldr	r3, [sp, #4]
 801e18c:	609a      	str	r2, [r3, #8]
 801e18e:	e005      	b.n	801e19c <USART_IrDACmd+0x2c>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 801e190:	9b01      	ldr	r3, [sp, #4]
 801e192:	689b      	ldr	r3, [r3, #8]
 801e194:	f023 0202 	bic.w	r2, r3, #2
 801e198:	9b01      	ldr	r3, [sp, #4]
 801e19a:	609a      	str	r2, [r3, #8]
  }
}
 801e19c:	b002      	add	sp, #8
 801e19e:	4770      	bx	lr

0801e1a0 <USART_DECmd>:
  * @param  NewState: new state of the driver enable mode.
  *         This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801e1a0:	b082      	sub	sp, #8
 801e1a2:	9001      	str	r0, [sp, #4]
 801e1a4:	460b      	mov	r3, r1
 801e1a6:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801e1aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801e1ae:	2b00      	cmp	r3, #0
 801e1b0:	d006      	beq.n	801e1c0 <USART_DECmd+0x20>
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 801e1b2:	9b01      	ldr	r3, [sp, #4]
 801e1b4:	689b      	ldr	r3, [r3, #8]
 801e1b6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801e1ba:	9b01      	ldr	r3, [sp, #4]
 801e1bc:	609a      	str	r2, [r3, #8]
 801e1be:	e005      	b.n	801e1cc <USART_DECmd+0x2c>
  }
  else
  {
    /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 801e1c0:	9b01      	ldr	r3, [sp, #4]
 801e1c2:	689b      	ldr	r3, [r3, #8]
 801e1c4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801e1c8:	9b01      	ldr	r3, [sp, #4]
 801e1ca:	609a      	str	r2, [r3, #8]
  }
}
 801e1cc:	b002      	add	sp, #8
 801e1ce:	4770      	bx	lr

0801e1d0 <USART_DEPolarityConfig>:
  *         @arg USART_DEPolarity_Low
  *         @arg USART_DEPolarity_High
  * @retval None
  */
void USART_DEPolarityConfig(USART_TypeDef* USARTx, uint32_t USART_DEPolarity)
{
 801e1d0:	b082      	sub	sp, #8
 801e1d2:	9001      	str	r0, [sp, #4]
 801e1d4:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 801e1d6:	9b01      	ldr	r3, [sp, #4]
 801e1d8:	689b      	ldr	r3, [r3, #8]
 801e1da:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 801e1de:	9b01      	ldr	r3, [sp, #4]
 801e1e0:	609a      	str	r2, [r3, #8]
  USARTx->CR3 |= USART_DEPolarity;
 801e1e2:	9b01      	ldr	r3, [sp, #4]
 801e1e4:	689a      	ldr	r2, [r3, #8]
 801e1e6:	9b00      	ldr	r3, [sp, #0]
 801e1e8:	431a      	orrs	r2, r3
 801e1ea:	9b01      	ldr	r3, [sp, #4]
 801e1ec:	609a      	str	r2, [r3, #8]
}
 801e1ee:	b002      	add	sp, #8
 801e1f0:	4770      	bx	lr
 801e1f2:	bf00      	nop

0801e1f4 <USART_SetDEAssertionTime>:
  * @param  USART_AssertionTime: specifies the time between the activation of the DE
  *          signal and the beginning of the start bit
  * @retval None
  */
void USART_SetDEAssertionTime(USART_TypeDef* USARTx, uint32_t USART_DEAssertionTime)
{
 801e1f4:	b082      	sub	sp, #8
 801e1f6:	9001      	str	r0, [sp, #4]
 801e1f8:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 801e1fa:	9b01      	ldr	r3, [sp, #4]
 801e1fc:	681b      	ldr	r3, [r3, #0]
 801e1fe:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 801e202:	9b01      	ldr	r3, [sp, #4]
 801e204:	601a      	str	r2, [r3, #0]
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 801e206:	9b01      	ldr	r3, [sp, #4]
 801e208:	681a      	ldr	r2, [r3, #0]
 801e20a:	9b00      	ldr	r3, [sp, #0]
 801e20c:	ea4f 5343 	mov.w	r3, r3, lsl #21
 801e210:	431a      	orrs	r2, r3
 801e212:	9b01      	ldr	r3, [sp, #4]
 801e214:	601a      	str	r2, [r3, #0]
}
 801e216:	b002      	add	sp, #8
 801e218:	4770      	bx	lr
 801e21a:	bf00      	nop

0801e21c <USART_SetDEDeassertionTime>:
  * @param  USART_DeassertionTime: specifies the time between the middle of the last 
  *         stop bit in a transmitted message and the de-activation of the DE signal
  * @retval None
  */
void USART_SetDEDeassertionTime(USART_TypeDef* USARTx, uint32_t USART_DEDeassertionTime)
{
 801e21c:	b082      	sub	sp, #8
 801e21e:	9001      	str	r0, [sp, #4]
 801e220:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 801e222:	9b01      	ldr	r3, [sp, #4]
 801e224:	681b      	ldr	r3, [r3, #0]
 801e226:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801e22a:	9b01      	ldr	r3, [sp, #4]
 801e22c:	601a      	str	r2, [r3, #0]
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 801e22e:	9b01      	ldr	r3, [sp, #4]
 801e230:	681a      	ldr	r2, [r3, #0]
 801e232:	9b00      	ldr	r3, [sp, #0]
 801e234:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801e238:	431a      	orrs	r2, r3
 801e23a:	9b01      	ldr	r3, [sp, #4]
 801e23c:	601a      	str	r2, [r3, #0]
}
 801e23e:	b002      	add	sp, #8
 801e240:	4770      	bx	lr
 801e242:	bf00      	nop

0801e244 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint32_t USART_DMAReq, FunctionalState NewState)
{
 801e244:	b084      	sub	sp, #16
 801e246:	9003      	str	r0, [sp, #12]
 801e248:	9102      	str	r1, [sp, #8]
 801e24a:	4613      	mov	r3, r2
 801e24c:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 801e250:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801e254:	2b00      	cmp	r3, #0
 801e256:	d006      	beq.n	801e266 <USART_DMACmd+0x22>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 801e258:	9b03      	ldr	r3, [sp, #12]
 801e25a:	689a      	ldr	r2, [r3, #8]
 801e25c:	9b02      	ldr	r3, [sp, #8]
 801e25e:	431a      	orrs	r2, r3
 801e260:	9b03      	ldr	r3, [sp, #12]
 801e262:	609a      	str	r2, [r3, #8]
 801e264:	e007      	b.n	801e276 <USART_DMACmd+0x32>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 801e266:	9b03      	ldr	r3, [sp, #12]
 801e268:	689a      	ldr	r2, [r3, #8]
 801e26a:	9b02      	ldr	r3, [sp, #8]
 801e26c:	ea6f 0303 	mvn.w	r3, r3
 801e270:	401a      	ands	r2, r3
 801e272:	9b03      	ldr	r3, [sp, #12]
 801e274:	609a      	str	r2, [r3, #8]
  }
}
 801e276:	b004      	add	sp, #16
 801e278:	4770      	bx	lr
 801e27a:	bf00      	nop

0801e27c <USART_DMAReceptionErrorConfig>:
  *         @arg USART_DMAOnError_Disable: DMA receive request disabled when the USART DMA 
  *          reception error is asserted.
  * @retval None
  */
void USART_DMAReceptionErrorConfig(USART_TypeDef* USARTx, uint32_t USART_DMAOnError)
{
 801e27c:	b082      	sub	sp, #8
 801e27e:	9001      	str	r0, [sp, #4]
 801e280:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
  
  /* Clear the DMA Reception error detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 801e282:	9b01      	ldr	r3, [sp, #4]
 801e284:	689b      	ldr	r3, [r3, #8]
 801e286:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801e28a:	9b01      	ldr	r3, [sp, #4]
 801e28c:	609a      	str	r2, [r3, #8]
  /* Set the new value for the DMA Reception error detection bit */
  USARTx->CR3 |= USART_DMAOnError;
 801e28e:	9b01      	ldr	r3, [sp, #4]
 801e290:	689a      	ldr	r2, [r3, #8]
 801e292:	9b00      	ldr	r3, [sp, #0]
 801e294:	431a      	orrs	r2, r3
 801e296:	9b01      	ldr	r3, [sp, #4]
 801e298:	609a      	str	r2, [r3, #8]
}
 801e29a:	b002      	add	sp, #8
 801e29c:	4770      	bx	lr
 801e29e:	bf00      	nop

0801e2a0 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 801e2a0:	b088      	sub	sp, #32
 801e2a2:	9003      	str	r0, [sp, #12]
 801e2a4:	9102      	str	r1, [sp, #8]
 801e2a6:	4613      	mov	r3, r2
 801e2a8:	f88d 3007 	strb.w	r3, [sp, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 801e2ac:	f04f 0300 	mov.w	r3, #0
 801e2b0:	9306      	str	r3, [sp, #24]
 801e2b2:	f04f 0300 	mov.w	r3, #0
 801e2b6:	9305      	str	r3, [sp, #20]
 801e2b8:	f04f 0300 	mov.w	r3, #0
 801e2bc:	9304      	str	r3, [sp, #16]
  uint32_t usartxbase = 0;
 801e2be:	f04f 0300 	mov.w	r3, #0
 801e2c2:	9307      	str	r3, [sp, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 801e2c4:	9b03      	ldr	r3, [sp, #12]
 801e2c6:	9307      	str	r3, [sp, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 801e2c8:	9b02      	ldr	r3, [sp, #8]
 801e2ca:	b29b      	uxth	r3, r3
 801e2cc:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801e2d0:	b29b      	uxth	r3, r3
 801e2d2:	9306      	str	r3, [sp, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 801e2d4:	9b02      	ldr	r3, [sp, #8]
 801e2d6:	b2db      	uxtb	r3, r3
 801e2d8:	9305      	str	r3, [sp, #20]
  itmask = (((uint32_t)0x01) << itpos);
 801e2da:	9b05      	ldr	r3, [sp, #20]
 801e2dc:	f04f 0201 	mov.w	r2, #1
 801e2e0:	fa02 f303 	lsl.w	r3, r2, r3
 801e2e4:	9304      	str	r3, [sp, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 801e2e6:	9b06      	ldr	r3, [sp, #24]
 801e2e8:	2b02      	cmp	r3, #2
 801e2ea:	d104      	bne.n	801e2f6 <USART_ITConfig+0x56>
  {
    usartxbase += 0x04;
 801e2ec:	9b07      	ldr	r3, [sp, #28]
 801e2ee:	f103 0304 	add.w	r3, r3, #4
 801e2f2:	9307      	str	r3, [sp, #28]
 801e2f4:	e006      	b.n	801e304 <USART_ITConfig+0x64>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 801e2f6:	9b06      	ldr	r3, [sp, #24]
 801e2f8:	2b03      	cmp	r3, #3
 801e2fa:	d103      	bne.n	801e304 <USART_ITConfig+0x64>
  {
    usartxbase += 0x08;
 801e2fc:	9b07      	ldr	r3, [sp, #28]
 801e2fe:	f103 0308 	add.w	r3, r3, #8
 801e302:	9307      	str	r3, [sp, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 801e304:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801e308:	2b00      	cmp	r3, #0
 801e30a:	d006      	beq.n	801e31a <USART_ITConfig+0x7a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 801e30c:	9b07      	ldr	r3, [sp, #28]
 801e30e:	9a07      	ldr	r2, [sp, #28]
 801e310:	6811      	ldr	r1, [r2, #0]
 801e312:	9a04      	ldr	r2, [sp, #16]
 801e314:	430a      	orrs	r2, r1
 801e316:	601a      	str	r2, [r3, #0]
 801e318:	e007      	b.n	801e32a <USART_ITConfig+0x8a>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 801e31a:	9b07      	ldr	r3, [sp, #28]
 801e31c:	9a07      	ldr	r2, [sp, #28]
 801e31e:	6811      	ldr	r1, [r2, #0]
 801e320:	9a04      	ldr	r2, [sp, #16]
 801e322:	ea6f 0202 	mvn.w	r2, r2
 801e326:	400a      	ands	r2, r1
 801e328:	601a      	str	r2, [r3, #0]
  }
}
 801e32a:	b008      	add	sp, #32
 801e32c:	4770      	bx	lr
 801e32e:	bf00      	nop

0801e330 <USART_RequestCmd>:
  * @param  NewState: new state of the DMA interface when reception error occurs.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_RequestCmd(USART_TypeDef* USARTx, uint32_t USART_Request, FunctionalState NewState)
{
 801e330:	b084      	sub	sp, #16
 801e332:	9003      	str	r0, [sp, #12]
 801e334:	9102      	str	r1, [sp, #8]
 801e336:	4613      	mov	r3, r2
 801e338:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_REQUEST(USART_Request));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 801e33c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801e340:	2b00      	cmp	r3, #0
 801e342:	d009      	beq.n	801e358 <USART_RequestCmd+0x28>
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
    USARTx->RQR |= USART_Request;
 801e344:	9b03      	ldr	r3, [sp, #12]
 801e346:	8b1b      	ldrh	r3, [r3, #24]
 801e348:	b29a      	uxth	r2, r3
 801e34a:	9b02      	ldr	r3, [sp, #8]
 801e34c:	b29b      	uxth	r3, r3
 801e34e:	4313      	orrs	r3, r2
 801e350:	b29a      	uxth	r2, r3
 801e352:	9b03      	ldr	r3, [sp, #12]
 801e354:	831a      	strh	r2, [r3, #24]
 801e356:	e00b      	b.n	801e370 <USART_RequestCmd+0x40>
  }
  else
  {
    /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
       register.*/
    USARTx->RQR &= (uint32_t)~USART_Request;
 801e358:	9b03      	ldr	r3, [sp, #12]
 801e35a:	8b1b      	ldrh	r3, [r3, #24]
 801e35c:	b29a      	uxth	r2, r3
 801e35e:	9b02      	ldr	r3, [sp, #8]
 801e360:	b29b      	uxth	r3, r3
 801e362:	ea6f 0303 	mvn.w	r3, r3
 801e366:	b29b      	uxth	r3, r3
 801e368:	4013      	ands	r3, r2
 801e36a:	b29a      	uxth	r2, r3
 801e36c:	9b03      	ldr	r3, [sp, #12]
 801e36e:	831a      	strh	r2, [r3, #24]
  }
}
 801e370:	b004      	add	sp, #16
 801e372:	4770      	bx	lr

0801e374 <USART_OverrunDetectionConfig>:
  *         @arg USART_OVRDetection_Disable: OVR error detection disabled when the USART OVR error 
  *          is asserted.
  * @retval None
  */
void USART_OverrunDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_OVRDetection)
{
 801e374:	b082      	sub	sp, #8
 801e376:	9001      	str	r0, [sp, #4]
 801e378:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
  
  /* Clear the OVR detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 801e37a:	9b01      	ldr	r3, [sp, #4]
 801e37c:	689b      	ldr	r3, [r3, #8]
 801e37e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801e382:	9b01      	ldr	r3, [sp, #4]
 801e384:	609a      	str	r2, [r3, #8]
  /* Set the new value for the OVR detection bit */
  USARTx->CR3 |= USART_OVRDetection;
 801e386:	9b01      	ldr	r3, [sp, #4]
 801e388:	689a      	ldr	r2, [r3, #8]
 801e38a:	9b00      	ldr	r3, [sp, #0]
 801e38c:	431a      	orrs	r2, r3
 801e38e:	9b01      	ldr	r3, [sp, #4]
 801e390:	609a      	str	r2, [r3, #8]
}
 801e392:	b002      	add	sp, #8
 801e394:	4770      	bx	lr
 801e396:	bf00      	nop

0801e398 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 801e398:	b084      	sub	sp, #16
 801e39a:	9001      	str	r0, [sp, #4]
 801e39c:	9100      	str	r1, [sp, #0]
  FlagStatus bitstatus = RESET;
 801e39e:	f04f 0300 	mov.w	r3, #0
 801e3a2:	f88d 300f 	strb.w	r3, [sp, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 801e3a6:	9b01      	ldr	r3, [sp, #4]
 801e3a8:	69da      	ldr	r2, [r3, #28]
 801e3aa:	9b00      	ldr	r3, [sp, #0]
 801e3ac:	4013      	ands	r3, r2
 801e3ae:	2b00      	cmp	r3, #0
 801e3b0:	d004      	beq.n	801e3bc <USART_GetFlagStatus+0x24>
  {
    bitstatus = SET;
 801e3b2:	f04f 0301 	mov.w	r3, #1
 801e3b6:	f88d 300f 	strb.w	r3, [sp, #15]
 801e3ba:	e003      	b.n	801e3c4 <USART_GetFlagStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 801e3bc:	f04f 0300 	mov.w	r3, #0
 801e3c0:	f88d 300f 	strb.w	r3, [sp, #15]
  }
  return bitstatus;
 801e3c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 801e3c8:	4618      	mov	r0, r3
 801e3ca:	b004      	add	sp, #16
 801e3cc:	4770      	bx	lr
 801e3ce:	bf00      	nop

0801e3d0 <USART_ClearFlag>:
  *   - SBKF flag is cleared by 1 to the SBKRQ in the register USART_RQR
  *     (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 801e3d0:	b082      	sub	sp, #8
 801e3d2:	9001      	str	r0, [sp, #4]
 801e3d4:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 801e3d6:	9b01      	ldr	r3, [sp, #4]
 801e3d8:	9a00      	ldr	r2, [sp, #0]
 801e3da:	621a      	str	r2, [r3, #32]
}
 801e3dc:	b002      	add	sp, #8
 801e3de:	4770      	bx	lr

0801e3e0 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 801e3e0:	b086      	sub	sp, #24
 801e3e2:	9001      	str	r0, [sp, #4]
 801e3e4:	9100      	str	r1, [sp, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 801e3e6:	f04f 0300 	mov.w	r3, #0
 801e3ea:	9303      	str	r3, [sp, #12]
 801e3ec:	f04f 0300 	mov.w	r3, #0
 801e3f0:	9305      	str	r3, [sp, #20]
 801e3f2:	f04f 0300 	mov.w	r3, #0
 801e3f6:	9302      	str	r3, [sp, #8]
  ITStatus bitstatus = RESET;
 801e3f8:	f04f 0300 	mov.w	r3, #0
 801e3fc:	f88d 3013 	strb.w	r3, [sp, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 801e400:	9b00      	ldr	r3, [sp, #0]
 801e402:	b29b      	uxth	r3, r3
 801e404:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801e408:	b29b      	uxth	r3, r3
 801e40a:	9302      	str	r3, [sp, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 801e40c:	9b00      	ldr	r3, [sp, #0]
 801e40e:	b2db      	uxtb	r3, r3
 801e410:	9305      	str	r3, [sp, #20]
  itmask = (uint32_t)0x01 << itmask;
 801e412:	9b05      	ldr	r3, [sp, #20]
 801e414:	f04f 0201 	mov.w	r2, #1
 801e418:	fa02 f303 	lsl.w	r3, r2, r3
 801e41c:	9305      	str	r3, [sp, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 801e41e:	9b02      	ldr	r3, [sp, #8]
 801e420:	2b01      	cmp	r3, #1
 801e422:	d105      	bne.n	801e430 <USART_GetITStatus+0x50>
  {
    itmask &= USARTx->CR1;
 801e424:	9b01      	ldr	r3, [sp, #4]
 801e426:	681b      	ldr	r3, [r3, #0]
 801e428:	9a05      	ldr	r2, [sp, #20]
 801e42a:	4013      	ands	r3, r2
 801e42c:	9305      	str	r3, [sp, #20]
 801e42e:	e00d      	b.n	801e44c <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 801e430:	9b02      	ldr	r3, [sp, #8]
 801e432:	2b02      	cmp	r3, #2
 801e434:	d105      	bne.n	801e442 <USART_GetITStatus+0x62>
  {
    itmask &= USARTx->CR2;
 801e436:	9b01      	ldr	r3, [sp, #4]
 801e438:	685b      	ldr	r3, [r3, #4]
 801e43a:	9a05      	ldr	r2, [sp, #20]
 801e43c:	4013      	ands	r3, r2
 801e43e:	9305      	str	r3, [sp, #20]
 801e440:	e004      	b.n	801e44c <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 801e442:	9b01      	ldr	r3, [sp, #4]
 801e444:	689b      	ldr	r3, [r3, #8]
 801e446:	9a05      	ldr	r2, [sp, #20]
 801e448:	4013      	ands	r3, r2
 801e44a:	9305      	str	r3, [sp, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 801e44c:	9b00      	ldr	r3, [sp, #0]
 801e44e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801e452:	9303      	str	r3, [sp, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 801e454:	9b03      	ldr	r3, [sp, #12]
 801e456:	f04f 0201 	mov.w	r2, #1
 801e45a:	fa02 f303 	lsl.w	r3, r2, r3
 801e45e:	9303      	str	r3, [sp, #12]
  bitpos &= USARTx->ISR;
 801e460:	9b01      	ldr	r3, [sp, #4]
 801e462:	69db      	ldr	r3, [r3, #28]
 801e464:	9a03      	ldr	r2, [sp, #12]
 801e466:	4013      	ands	r3, r2
 801e468:	9303      	str	r3, [sp, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 801e46a:	9b05      	ldr	r3, [sp, #20]
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	d007      	beq.n	801e480 <USART_GetITStatus+0xa0>
 801e470:	9b03      	ldr	r3, [sp, #12]
 801e472:	2b00      	cmp	r3, #0
 801e474:	d004      	beq.n	801e480 <USART_GetITStatus+0xa0>
  {
    bitstatus = SET;
 801e476:	f04f 0301 	mov.w	r3, #1
 801e47a:	f88d 3013 	strb.w	r3, [sp, #19]
 801e47e:	e003      	b.n	801e488 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 801e480:	f04f 0300 	mov.w	r3, #0
 801e484:	f88d 3013 	strb.w	r3, [sp, #19]
  }
  
  return bitstatus;  
 801e488:	f89d 3013 	ldrb.w	r3, [sp, #19]
}
 801e48c:	4618      	mov	r0, r3
 801e48e:	b006      	add	sp, #24
 801e490:	4770      	bx	lr
 801e492:	bf00      	nop

0801e494 <USART_ClearITPendingBit>:
  *     (USART_SendData()) or by writing 1 to the TXFRQ in the register USART_RQR
  *     (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 801e494:	b084      	sub	sp, #16
 801e496:	9001      	str	r0, [sp, #4]
 801e498:	9100      	str	r1, [sp, #0]
  uint32_t bitpos = 0, itmask = 0;
 801e49a:	f04f 0300 	mov.w	r3, #0
 801e49e:	9303      	str	r3, [sp, #12]
 801e4a0:	f04f 0300 	mov.w	r3, #0
 801e4a4:	9302      	str	r3, [sp, #8]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 801e4a6:	9b00      	ldr	r3, [sp, #0]
 801e4a8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801e4ac:	9303      	str	r3, [sp, #12]
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 801e4ae:	9b03      	ldr	r3, [sp, #12]
 801e4b0:	f04f 0201 	mov.w	r2, #1
 801e4b4:	fa02 f303 	lsl.w	r3, r2, r3
 801e4b8:	9302      	str	r3, [sp, #8]
  USARTx->ICR = (uint32_t)itmask;
 801e4ba:	9b01      	ldr	r3, [sp, #4]
 801e4bc:	9a02      	ldr	r2, [sp, #8]
 801e4be:	621a      	str	r2, [r3, #32]
}
 801e4c0:	b004      	add	sp, #16
 801e4c2:	4770      	bx	lr

0801e4c4 <cosf>:
 801e4c4:	f640 73d8 	movw	r3, #4056	; 0xfd8
 801e4c8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 801e4cc:	f6c3 7349 	movt	r3, #16201	; 0x3f49
 801e4d0:	4601      	mov	r1, r0
 801e4d2:	429a      	cmp	r2, r3
 801e4d4:	b500      	push	{lr}
 801e4d6:	b083      	sub	sp, #12
 801e4d8:	dd15      	ble.n	801e506 <cosf+0x42>
 801e4da:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801e4de:	db03      	blt.n	801e4e8 <cosf+0x24>
 801e4e0:	f002 fc66 	bl	8020db0 <__aeabi_fsub>
 801e4e4:	b003      	add	sp, #12
 801e4e6:	bd00      	pop	{pc}
 801e4e8:	4669      	mov	r1, sp
 801e4ea:	f000 fd31 	bl	801ef50 <__ieee754_rem_pio2f>
 801e4ee:	f000 0203 	and.w	r2, r0, #3
 801e4f2:	9800      	ldr	r0, [sp, #0]
 801e4f4:	2a01      	cmp	r2, #1
 801e4f6:	d010      	beq.n	801e51a <cosf+0x56>
 801e4f8:	2a02      	cmp	r2, #2
 801e4fa:	d008      	beq.n	801e50e <cosf+0x4a>
 801e4fc:	b99a      	cbnz	r2, 801e526 <cosf+0x62>
 801e4fe:	9901      	ldr	r1, [sp, #4]
 801e500:	f000 ff2a 	bl	801f358 <__kernel_cosf>
 801e504:	e7ee      	b.n	801e4e4 <cosf+0x20>
 801e506:	2100      	movs	r1, #0
 801e508:	f000 ff26 	bl	801f358 <__kernel_cosf>
 801e50c:	e7ea      	b.n	801e4e4 <cosf+0x20>
 801e50e:	9901      	ldr	r1, [sp, #4]
 801e510:	f000 ff22 	bl	801f358 <__kernel_cosf>
 801e514:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801e518:	e7e4      	b.n	801e4e4 <cosf+0x20>
 801e51a:	9901      	ldr	r1, [sp, #4]
 801e51c:	f001 fb0e 	bl	801fb3c <__kernel_sinf>
 801e520:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801e524:	e7de      	b.n	801e4e4 <cosf+0x20>
 801e526:	2201      	movs	r2, #1
 801e528:	9901      	ldr	r1, [sp, #4]
 801e52a:	f001 fb07 	bl	801fb3c <__kernel_sinf>
 801e52e:	e7d9      	b.n	801e4e4 <cosf+0x20>

0801e530 <sinf>:
 801e530:	f640 73d8 	movw	r3, #4056	; 0xfd8
 801e534:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 801e538:	f6c3 7349 	movt	r3, #16201	; 0x3f49
 801e53c:	4601      	mov	r1, r0
 801e53e:	429a      	cmp	r2, r3
 801e540:	b500      	push	{lr}
 801e542:	b083      	sub	sp, #12
 801e544:	dd16      	ble.n	801e574 <sinf+0x44>
 801e546:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801e54a:	db03      	blt.n	801e554 <sinf+0x24>
 801e54c:	f002 fc30 	bl	8020db0 <__aeabi_fsub>
 801e550:	b003      	add	sp, #12
 801e552:	bd00      	pop	{pc}
 801e554:	4669      	mov	r1, sp
 801e556:	f000 fcfb 	bl	801ef50 <__ieee754_rem_pio2f>
 801e55a:	f000 0003 	and.w	r0, r0, #3
 801e55e:	2801      	cmp	r0, #1
 801e560:	d015      	beq.n	801e58e <sinf+0x5e>
 801e562:	2802      	cmp	r0, #2
 801e564:	d00b      	beq.n	801e57e <sinf+0x4e>
 801e566:	b9b8      	cbnz	r0, 801e598 <sinf+0x68>
 801e568:	9800      	ldr	r0, [sp, #0]
 801e56a:	2201      	movs	r2, #1
 801e56c:	9901      	ldr	r1, [sp, #4]
 801e56e:	f001 fae5 	bl	801fb3c <__kernel_sinf>
 801e572:	e7ed      	b.n	801e550 <sinf+0x20>
 801e574:	2100      	movs	r1, #0
 801e576:	2200      	movs	r2, #0
 801e578:	f001 fae0 	bl	801fb3c <__kernel_sinf>
 801e57c:	e7e8      	b.n	801e550 <sinf+0x20>
 801e57e:	9800      	ldr	r0, [sp, #0]
 801e580:	2201      	movs	r2, #1
 801e582:	9901      	ldr	r1, [sp, #4]
 801e584:	f001 fada 	bl	801fb3c <__kernel_sinf>
 801e588:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801e58c:	e7e0      	b.n	801e550 <sinf+0x20>
 801e58e:	9800      	ldr	r0, [sp, #0]
 801e590:	9901      	ldr	r1, [sp, #4]
 801e592:	f000 fee1 	bl	801f358 <__kernel_cosf>
 801e596:	e7db      	b.n	801e550 <sinf+0x20>
 801e598:	9800      	ldr	r0, [sp, #0]
 801e59a:	9901      	ldr	r1, [sp, #4]
 801e59c:	f000 fedc 	bl	801f358 <__kernel_cosf>
 801e5a0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801e5a4:	e7d4      	b.n	801e550 <sinf+0x20>
 801e5a6:	bf00      	nop

0801e5a8 <atan2>:
 801e5a8:	f000 b8aa 	b.w	801e700 <__ieee754_atan2>

0801e5ac <sqrt>:
 801e5ac:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}
 801e5b0:	b08a      	sub	sp, #40	; 0x28
 801e5b2:	4606      	mov	r6, r0
 801e5b4:	460f      	mov	r7, r1
 801e5b6:	f000 f9b7 	bl	801e928 <__ieee754_sqrt>
 801e5ba:	f240 1420 	movw	r4, #288	; 0x120
 801e5be:	f2c2 0400 	movt	r4, #8192	; 0x2000
 801e5c2:	f994 3000 	ldrsb.w	r3, [r4]
 801e5c6:	3301      	adds	r3, #1
 801e5c8:	4680      	mov	r8, r0
 801e5ca:	4689      	mov	r9, r1
 801e5cc:	d031      	beq.n	801e632 <sqrt+0x86>
 801e5ce:	4630      	mov	r0, r6
 801e5d0:	4639      	mov	r1, r7
 801e5d2:	f001 fce1 	bl	801ff98 <__fpclassifyd>
 801e5d6:	2800      	cmp	r0, #0
 801e5d8:	d02b      	beq.n	801e632 <sqrt+0x86>
 801e5da:	f04f 0a00 	mov.w	sl, #0
 801e5de:	f04f 0b00 	mov.w	fp, #0
 801e5e2:	4630      	mov	r0, r6
 801e5e4:	4639      	mov	r1, r7
 801e5e6:	4652      	mov	r2, sl
 801e5e8:	465b      	mov	r3, fp
 801e5ea:	f002 fb65 	bl	8020cb8 <__aeabi_dcmplt>
 801e5ee:	b300      	cbz	r0, 801e632 <sqrt+0x86>
 801e5f0:	7824      	ldrb	r4, [r4, #0]
 801e5f2:	f64e 33e0 	movw	r3, #60384	; 0xebe0
 801e5f6:	f6c0 0302 	movt	r3, #2050	; 0x802
 801e5fa:	2201      	movs	r2, #1
 801e5fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801e600:	e88d 000c 	stmia.w	sp, {r2, r3}
 801e604:	2300      	movs	r3, #0
 801e606:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801e60a:	9308      	str	r3, [sp, #32]
 801e60c:	b1b4      	cbz	r4, 801e63c <sqrt+0x90>
 801e60e:	4650      	mov	r0, sl
 801e610:	4659      	mov	r1, fp
 801e612:	4652      	mov	r2, sl
 801e614:	465b      	mov	r3, fp
 801e616:	f002 fa07 	bl	8020a28 <__aeabi_ddiv>
 801e61a:	2c02      	cmp	r4, #2
 801e61c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e620:	d10e      	bne.n	801e640 <sqrt+0x94>
 801e622:	f002 febb 	bl	802139c <__errno>
 801e626:	2321      	movs	r3, #33	; 0x21
 801e628:	6003      	str	r3, [r0, #0]
 801e62a:	9b08      	ldr	r3, [sp, #32]
 801e62c:	b973      	cbnz	r3, 801e64c <sqrt+0xa0>
 801e62e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801e632:	4640      	mov	r0, r8
 801e634:	4649      	mov	r1, r9
 801e636:	b00a      	add	sp, #40	; 0x28
 801e638:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 801e63c:	e9cd ab06 	strd	sl, fp, [sp, #24]
 801e640:	4668      	mov	r0, sp
 801e642:	f001 fcf3 	bl	802002c <matherr>
 801e646:	2800      	cmp	r0, #0
 801e648:	d1ef      	bne.n	801e62a <sqrt+0x7e>
 801e64a:	e7ea      	b.n	801e622 <sqrt+0x76>
 801e64c:	f002 fea6 	bl	802139c <__errno>
 801e650:	9b08      	ldr	r3, [sp, #32]
 801e652:	6003      	str	r3, [r0, #0]
 801e654:	e7eb      	b.n	801e62e <sqrt+0x82>
 801e656:	bf00      	nop

0801e658 <asinf>:
 801e658:	b570      	push	{r4, r5, r6, lr}
 801e65a:	b08a      	sub	sp, #40	; 0x28
 801e65c:	4606      	mov	r6, r0
 801e65e:	f000 fa3f 	bl	801eae0 <__ieee754_asinf>
 801e662:	f240 1420 	movw	r4, #288	; 0x120
 801e666:	f2c2 0400 	movt	r4, #8192	; 0x2000
 801e66a:	f994 3000 	ldrsb.w	r3, [r4]
 801e66e:	3301      	adds	r3, #1
 801e670:	4605      	mov	r5, r0
 801e672:	d003      	beq.n	801e67c <asinf+0x24>
 801e674:	4630      	mov	r0, r6
 801e676:	f001 fe4f 	bl	8020318 <__fpclassifyf>
 801e67a:	b910      	cbnz	r0, 801e682 <asinf+0x2a>
 801e67c:	4628      	mov	r0, r5
 801e67e:	b00a      	add	sp, #40	; 0x28
 801e680:	bd70      	pop	{r4, r5, r6, pc}
 801e682:	4630      	mov	r0, r6
 801e684:	f001 fdf8 	bl	8020278 <fabsf>
 801e688:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801e68c:	f002 fe56 	bl	802133c <__aeabi_fcmpgt>
 801e690:	2800      	cmp	r0, #0
 801e692:	d0f3      	beq.n	801e67c <asinf+0x24>
 801e694:	f64e 33e8 	movw	r3, #60392	; 0xebe8
 801e698:	4630      	mov	r0, r6
 801e69a:	f6c0 0302 	movt	r3, #2050	; 0x802
 801e69e:	9301      	str	r3, [sp, #4]
 801e6a0:	2301      	movs	r3, #1
 801e6a2:	9300      	str	r3, [sp, #0]
 801e6a4:	2300      	movs	r3, #0
 801e6a6:	9308      	str	r3, [sp, #32]
 801e6a8:	f002 f840 	bl	802072c <__aeabi_f2d>
 801e6ac:	4602      	mov	r2, r0
 801e6ae:	f64e 4014 	movw	r0, #60436	; 0xec14
 801e6b2:	f6c0 0002 	movt	r0, #2050	; 0x802
 801e6b6:	460b      	mov	r3, r1
 801e6b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e6bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e6c0:	f001 fcb6 	bl	8020030 <nan>
 801e6c4:	f994 3000 	ldrsb.w	r3, [r4]
 801e6c8:	2b02      	cmp	r3, #2
 801e6ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e6ce:	d00b      	beq.n	801e6e8 <asinf+0x90>
 801e6d0:	4668      	mov	r0, sp
 801e6d2:	f001 fcab 	bl	802002c <matherr>
 801e6d6:	b138      	cbz	r0, 801e6e8 <asinf+0x90>
 801e6d8:	9b08      	ldr	r3, [sp, #32]
 801e6da:	b953      	cbnz	r3, 801e6f2 <asinf+0x9a>
 801e6dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e6e0:	f002 fb12 	bl	8020d08 <__aeabi_d2f>
 801e6e4:	4605      	mov	r5, r0
 801e6e6:	e7c9      	b.n	801e67c <asinf+0x24>
 801e6e8:	f002 fe58 	bl	802139c <__errno>
 801e6ec:	2321      	movs	r3, #33	; 0x21
 801e6ee:	6003      	str	r3, [r0, #0]
 801e6f0:	e7f2      	b.n	801e6d8 <asinf+0x80>
 801e6f2:	f002 fe53 	bl	802139c <__errno>
 801e6f6:	9b08      	ldr	r3, [sp, #32]
 801e6f8:	6003      	str	r3, [r0, #0]
 801e6fa:	e7ef      	b.n	801e6dc <asinf+0x84>

0801e6fc <atan2f>:
 801e6fc:	f000 bb7c 	b.w	801edf8 <__ieee754_atan2f>

0801e700 <__ieee754_atan2>:
 801e700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e704:	b083      	sub	sp, #12
 801e706:	4614      	mov	r4, r2
 801e708:	461d      	mov	r5, r3
 801e70a:	e9cd 2300 	strd	r2, r3, [sp]
 801e70e:	4252      	negs	r2, r2
 801e710:	4322      	orrs	r2, r4
 801e712:	2300      	movs	r3, #0
 801e714:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 801e718:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 801e71c:	ea47 72d2 	orr.w	r2, r7, r2, lsr #31
 801e720:	4682      	mov	sl, r0
 801e722:	429a      	cmp	r2, r3
 801e724:	468b      	mov	fp, r1
 801e726:	4606      	mov	r6, r0
 801e728:	d84e      	bhi.n	801e7c8 <__ieee754_atan2+0xc8>
 801e72a:	4242      	negs	r2, r0
 801e72c:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 801e730:	4302      	orrs	r2, r0
 801e732:	4688      	mov	r8, r1
 801e734:	ea4c 72d2 	orr.w	r2, ip, r2, lsr #31
 801e738:	429a      	cmp	r2, r3
 801e73a:	d845      	bhi.n	801e7c8 <__ieee754_atan2+0xc8>
 801e73c:	f105 4340 	add.w	r3, r5, #3221225472	; 0xc0000000
 801e740:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801e744:	4323      	orrs	r3, r4
 801e746:	d063      	beq.n	801e810 <__ieee754_atan2+0x110>
 801e748:	17ab      	asrs	r3, r5, #30
 801e74a:	ea5c 0606 	orrs.w	r6, ip, r6
 801e74e:	f003 0302 	and.w	r3, r3, #2
 801e752:	ea43 79d1 	orr.w	r9, r3, r1, lsr #31
 801e756:	d044      	beq.n	801e7e2 <__ieee754_atan2+0xe2>
 801e758:	433c      	orrs	r4, r7
 801e75a:	d051      	beq.n	801e800 <__ieee754_atan2+0x100>
 801e75c:	2300      	movs	r3, #0
 801e75e:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 801e762:	429f      	cmp	r7, r3
 801e764:	d067      	beq.n	801e836 <__ieee754_atan2+0x136>
 801e766:	2300      	movs	r3, #0
 801e768:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 801e76c:	459c      	cmp	ip, r3
 801e76e:	d047      	beq.n	801e800 <__ieee754_atan2+0x100>
 801e770:	ebc7 070c 	rsb	r7, r7, ip
 801e774:	153f      	asrs	r7, r7, #20
 801e776:	2f3c      	cmp	r7, #60	; 0x3c
 801e778:	dc59      	bgt.n	801e82e <__ieee754_atan2+0x12e>
 801e77a:	f117 0f3c 	cmn.w	r7, #60	; 0x3c
 801e77e:	bfac      	ite	ge
 801e780:	2700      	movge	r7, #0
 801e782:	2701      	movlt	r7, #1
 801e784:	ea17 77d5 	ands.w	r7, r7, r5, lsr #31
 801e788:	f000 8084 	beq.w	801e894 <__ieee754_atan2+0x194>
 801e78c:	2000      	movs	r0, #0
 801e78e:	2100      	movs	r1, #0
 801e790:	f1b9 0f01 	cmp.w	r9, #1
 801e794:	bf04      	itt	eq
 801e796:	4682      	moveq	sl, r0
 801e798:	f101 4b00 	addeq.w	fp, r1, #2147483648	; 0x80000000
 801e79c:	d01c      	beq.n	801e7d8 <__ieee754_atan2+0xd8>
 801e79e:	f1b9 0f02 	cmp.w	r9, #2
 801e7a2:	d068      	beq.n	801e876 <__ieee754_atan2+0x176>
 801e7a4:	4682      	mov	sl, r0
 801e7a6:	468b      	mov	fp, r1
 801e7a8:	f1b9 0f00 	cmp.w	r9, #0
 801e7ac:	d014      	beq.n	801e7d8 <__ieee754_atan2+0xd8>
 801e7ae:	a34c      	add	r3, pc, #304	; (adr r3, 801e8e0 <__ieee754_atan2+0x1e0>)
 801e7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7b4:	f001 fe5a 	bl	802046c <__aeabi_dsub>
 801e7b8:	a34b      	add	r3, pc, #300	; (adr r3, 801e8e8 <__ieee754_atan2+0x1e8>)
 801e7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7be:	f001 fe55 	bl	802046c <__aeabi_dsub>
 801e7c2:	4682      	mov	sl, r0
 801e7c4:	468b      	mov	fp, r1
 801e7c6:	e007      	b.n	801e7d8 <__ieee754_atan2+0xd8>
 801e7c8:	4650      	mov	r0, sl
 801e7ca:	4659      	mov	r1, fp
 801e7cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e7d0:	f001 fe4e 	bl	8020470 <__adddf3>
 801e7d4:	4682      	mov	sl, r0
 801e7d6:	468b      	mov	fp, r1
 801e7d8:	4650      	mov	r0, sl
 801e7da:	4659      	mov	r1, fp
 801e7dc:	b003      	add	sp, #12
 801e7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7e2:	f1b9 0f03 	cmp.w	r9, #3
 801e7e6:	d8b7      	bhi.n	801e758 <__ieee754_atan2+0x58>
 801e7e8:	a301      	add	r3, pc, #4	; (adr r3, 801e7f0 <__ieee754_atan2+0xf0>)
 801e7ea:	f853 f029 	ldr.w	pc, [r3, r9, lsl #2]
 801e7ee:	bf00      	nop
 801e7f0:	0801e7d9 	.word	0x0801e7d9
 801e7f4:	0801e7d9 	.word	0x0801e7d9
 801e7f8:	0801e825 	.word	0x0801e825
 801e7fc:	0801e81b 	.word	0x0801e81b
 801e800:	f1b8 0f00 	cmp.w	r8, #0
 801e804:	db32      	blt.n	801e86c <__ieee754_atan2+0x16c>
 801e806:	f20f 0be8 	addw	fp, pc, #232	; 0xe8
 801e80a:	e9db ab00 	ldrd	sl, fp, [fp]
 801e80e:	e7e3      	b.n	801e7d8 <__ieee754_atan2+0xd8>
 801e810:	b003      	add	sp, #12
 801e812:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e816:	f001 ba13 	b.w	801fc40 <atan>
 801e81a:	f20f 0bdc 	addw	fp, pc, #220	; 0xdc
 801e81e:	e9db ab00 	ldrd	sl, fp, [fp]
 801e822:	e7d9      	b.n	801e7d8 <__ieee754_atan2+0xd8>
 801e824:	f20f 0bc0 	addw	fp, pc, #192	; 0xc0
 801e828:	e9db ab00 	ldrd	sl, fp, [fp]
 801e82c:	e7d4      	b.n	801e7d8 <__ieee754_atan2+0xd8>
 801e82e:	a130      	add	r1, pc, #192	; (adr r1, 801e8f0 <__ieee754_atan2+0x1f0>)
 801e830:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e834:	e7ac      	b.n	801e790 <__ieee754_atan2+0x90>
 801e836:	45bc      	cmp	ip, r7
 801e838:	d037      	beq.n	801e8aa <__ieee754_atan2+0x1aa>
 801e83a:	f1b9 0f03 	cmp.w	r9, #3
 801e83e:	d892      	bhi.n	801e766 <__ieee754_atan2+0x66>
 801e840:	a301      	add	r3, pc, #4	; (adr r3, 801e848 <__ieee754_atan2+0x148>)
 801e842:	f853 f029 	ldr.w	pc, [r3, r9, lsl #2]
 801e846:	bf00      	nop
 801e848:	0801e863 	.word	0x0801e863
 801e84c:	0801e859 	.word	0x0801e859
 801e850:	0801e825 	.word	0x0801e825
 801e854:	0801e81b 	.word	0x0801e81b
 801e858:	f04f 0a00 	mov.w	sl, #0
 801e85c:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 801e860:	e7ba      	b.n	801e7d8 <__ieee754_atan2+0xd8>
 801e862:	f04f 0a00 	mov.w	sl, #0
 801e866:	f04f 0b00 	mov.w	fp, #0
 801e86a:	e7b5      	b.n	801e7d8 <__ieee754_atan2+0xd8>
 801e86c:	f20f 0b90 	addw	fp, pc, #144	; 0x90
 801e870:	e9db ab00 	ldrd	sl, fp, [fp]
 801e874:	e7b0      	b.n	801e7d8 <__ieee754_atan2+0xd8>
 801e876:	a31a      	add	r3, pc, #104	; (adr r3, 801e8e0 <__ieee754_atan2+0x1e0>)
 801e878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e87c:	f001 fdf6 	bl	802046c <__aeabi_dsub>
 801e880:	4602      	mov	r2, r0
 801e882:	460b      	mov	r3, r1
 801e884:	a118      	add	r1, pc, #96	; (adr r1, 801e8e8 <__ieee754_atan2+0x1e8>)
 801e886:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e88a:	f001 fdef 	bl	802046c <__aeabi_dsub>
 801e88e:	4682      	mov	sl, r0
 801e890:	468b      	mov	fp, r1
 801e892:	e7a1      	b.n	801e7d8 <__ieee754_atan2+0xd8>
 801e894:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e898:	4650      	mov	r0, sl
 801e89a:	4659      	mov	r1, fp
 801e89c:	f002 f8c4 	bl	8020a28 <__aeabi_ddiv>
 801e8a0:	f001 fb76 	bl	801ff90 <fabs>
 801e8a4:	f001 f9cc 	bl	801fc40 <atan>
 801e8a8:	e772      	b.n	801e790 <__ieee754_atan2+0x90>
 801e8aa:	f1b9 0f03 	cmp.w	r9, #3
 801e8ae:	d8a7      	bhi.n	801e800 <__ieee754_atan2+0x100>
 801e8b0:	e8df f009 	tbb	[pc, r9]
 801e8b4:	02070c11 	.word	0x02070c11
 801e8b8:	f20f 0b4c 	addw	fp, pc, #76	; 0x4c
 801e8bc:	e9db ab00 	ldrd	sl, fp, [fp]
 801e8c0:	e78a      	b.n	801e7d8 <__ieee754_atan2+0xd8>
 801e8c2:	f20f 0b4c 	addw	fp, pc, #76	; 0x4c
 801e8c6:	e9db ab00 	ldrd	sl, fp, [fp]
 801e8ca:	e785      	b.n	801e7d8 <__ieee754_atan2+0xd8>
 801e8cc:	f20f 0b48 	addw	fp, pc, #72	; 0x48
 801e8d0:	e9db ab00 	ldrd	sl, fp, [fp]
 801e8d4:	e780      	b.n	801e7d8 <__ieee754_atan2+0xd8>
 801e8d6:	f20f 0b48 	addw	fp, pc, #72	; 0x48
 801e8da:	e9db ab00 	ldrd	sl, fp, [fp]
 801e8de:	e77b      	b.n	801e7d8 <__ieee754_atan2+0xd8>
 801e8e0:	33145c07 	.word	0x33145c07
 801e8e4:	3ca1a626 	.word	0x3ca1a626
 801e8e8:	54442d18 	.word	0x54442d18
 801e8ec:	400921fb 	.word	0x400921fb
 801e8f0:	54442d18 	.word	0x54442d18
 801e8f4:	3ff921fb 	.word	0x3ff921fb
 801e8f8:	54442d18 	.word	0x54442d18
 801e8fc:	c00921fb 	.word	0xc00921fb
 801e900:	54442d18 	.word	0x54442d18
 801e904:	bff921fb 	.word	0xbff921fb
 801e908:	7f3321d2 	.word	0x7f3321d2
 801e90c:	c002d97c 	.word	0xc002d97c
 801e910:	7f3321d2 	.word	0x7f3321d2
 801e914:	4002d97c 	.word	0x4002d97c
 801e918:	54442d18 	.word	0x54442d18
 801e91c:	bfe921fb 	.word	0xbfe921fb
 801e920:	54442d18 	.word	0x54442d18
 801e924:	3fe921fb 	.word	0x3fe921fb

0801e928 <__ieee754_sqrt>:
 801e928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e92c:	2400      	movs	r4, #0
 801e92e:	4625      	mov	r5, r4
 801e930:	f6c7 74f0 	movt	r4, #32752	; 0x7ff0
 801e934:	f6c7 75f0 	movt	r5, #32752	; 0x7ff0
 801e938:	400c      	ands	r4, r1
 801e93a:	42ac      	cmp	r4, r5
 801e93c:	4606      	mov	r6, r0
 801e93e:	460f      	mov	r7, r1
 801e940:	4689      	mov	r9, r1
 801e942:	460b      	mov	r3, r1
 801e944:	4602      	mov	r2, r0
 801e946:	f000 80ab 	beq.w	801eaa0 <__ieee754_sqrt+0x178>
 801e94a:	2900      	cmp	r1, #0
 801e94c:	dd7f      	ble.n	801ea4e <__ieee754_sqrt+0x126>
 801e94e:	1509      	asrs	r1, r1, #20
 801e950:	f000 8088 	beq.w	801ea64 <__ieee754_sqrt+0x13c>
 801e954:	f5a1 7c7e 	sub.w	ip, r1, #1016	; 0x3f8
 801e958:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801e95c:	07c9      	lsls	r1, r1, #31
 801e95e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801e962:	f1ac 0c07 	sub.w	ip, ip, #7
 801e966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e96a:	d562      	bpl.n	801ea32 <__ieee754_sqrt+0x10a>
 801e96c:	0fd1      	lsrs	r1, r2, #31
 801e96e:	2700      	movs	r7, #0
 801e970:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801e974:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 801e978:	0052      	lsls	r2, r2, #1
 801e97a:	2416      	movs	r4, #22
 801e97c:	4638      	mov	r0, r7
 801e97e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801e982:	1845      	adds	r5, r0, r1
 801e984:	0fd6      	lsrs	r6, r2, #31
 801e986:	429d      	cmp	r5, r3
 801e988:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801e98c:	bfde      	ittt	le
 801e98e:	ebc5 0303 	rsble	r3, r5, r3
 801e992:	1868      	addle	r0, r5, r1
 801e994:	187f      	addle	r7, r7, r1
 801e996:	0849      	lsrs	r1, r1, #1
 801e998:	3c01      	subs	r4, #1
 801e99a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 801e99e:	d1f0      	bne.n	801e982 <__ieee754_sqrt+0x5a>
 801e9a0:	2620      	movs	r6, #32
 801e9a2:	46a0      	mov	r8, r4
 801e9a4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801e9a8:	4298      	cmp	r0, r3
 801e9aa:	eb01 0508 	add.w	r5, r1, r8
 801e9ae:	db0e      	blt.n	801e9ce <__ieee754_sqrt+0xa6>
 801e9b0:	4283      	cmp	r3, r0
 801e9b2:	bf14      	ite	ne
 801e9b4:	f04f 0900 	movne.w	r9, #0
 801e9b8:	f04f 0901 	moveq.w	r9, #1
 801e9bc:	4295      	cmp	r5, r2
 801e9be:	bf8c      	ite	hi
 801e9c0:	f04f 0900 	movhi.w	r9, #0
 801e9c4:	f009 0901 	andls.w	r9, r9, #1
 801e9c8:	f1b9 0f00 	cmp.w	r9, #0
 801e9cc:	d00e      	beq.n	801e9ec <__ieee754_sqrt+0xc4>
 801e9ce:	f005 4900 	and.w	r9, r5, #2147483648	; 0x80000000
 801e9d2:	eb05 0801 	add.w	r8, r5, r1
 801e9d6:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 801e9da:	d023      	beq.n	801ea24 <__ieee754_sqrt+0xfc>
 801e9dc:	4681      	mov	r9, r0
 801e9de:	1a1b      	subs	r3, r3, r0
 801e9e0:	4295      	cmp	r5, r2
 801e9e2:	bf88      	it	hi
 801e9e4:	3b01      	subhi	r3, #1
 801e9e6:	1b52      	subs	r2, r2, r5
 801e9e8:	1864      	adds	r4, r4, r1
 801e9ea:	4648      	mov	r0, r9
 801e9ec:	0fd5      	lsrs	r5, r2, #31
 801e9ee:	0849      	lsrs	r1, r1, #1
 801e9f0:	0052      	lsls	r2, r2, #1
 801e9f2:	3e01      	subs	r6, #1
 801e9f4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801e9f8:	d1d6      	bne.n	801e9a8 <__ieee754_sqrt+0x80>
 801e9fa:	4313      	orrs	r3, r2
 801e9fc:	d11e      	bne.n	801ea3c <__ieee754_sqrt+0x114>
 801e9fe:	0864      	lsrs	r4, r4, #1
 801ea00:	107b      	asrs	r3, r7, #1
 801ea02:	07fa      	lsls	r2, r7, #31
 801ea04:	f103 537e 	add.w	r3, r3, #1065353216	; 0x3f800000
 801ea08:	bf48      	it	mi
 801ea0a:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 801ea0e:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 801ea12:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
 801ea16:	eb0c 0703 	add.w	r7, ip, r3
 801ea1a:	4626      	mov	r6, r4
 801ea1c:	4630      	mov	r0, r6
 801ea1e:	4639      	mov	r1, r7
 801ea20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea24:	f1b8 0f00 	cmp.w	r8, #0
 801ea28:	bfa8      	it	ge
 801ea2a:	f100 0901 	addge.w	r9, r0, #1
 801ea2e:	dad6      	bge.n	801e9de <__ieee754_sqrt+0xb6>
 801ea30:	e7d4      	b.n	801e9dc <__ieee754_sqrt+0xb4>
 801ea32:	0fd1      	lsrs	r1, r2, #31
 801ea34:	0052      	lsls	r2, r2, #1
 801ea36:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801ea3a:	e797      	b.n	801e96c <__ieee754_sqrt+0x44>
 801ea3c:	1c61      	adds	r1, r4, #1
 801ea3e:	bf1c      	itt	ne
 801ea40:	f004 0301 	andne.w	r3, r4, #1
 801ea44:	191c      	addne	r4, r3, r4
 801ea46:	d1da      	bne.n	801e9fe <__ieee754_sqrt+0xd6>
 801ea48:	3701      	adds	r7, #1
 801ea4a:	4634      	mov	r4, r6
 801ea4c:	e7d8      	b.n	801ea00 <__ieee754_sqrt+0xd8>
 801ea4e:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 801ea52:	4304      	orrs	r4, r0
 801ea54:	d0e2      	beq.n	801ea1c <__ieee754_sqrt+0xf4>
 801ea56:	2900      	cmp	r1, #0
 801ea58:	d136      	bne.n	801eac8 <__ieee754_sqrt+0x1a0>
 801ea5a:	0ad3      	lsrs	r3, r2, #11
 801ea5c:	3915      	subs	r1, #21
 801ea5e:	0552      	lsls	r2, r2, #21
 801ea60:	2b00      	cmp	r3, #0
 801ea62:	d0fa      	beq.n	801ea5a <__ieee754_sqrt+0x132>
 801ea64:	f413 1080 	ands.w	r0, r3, #1048576	; 0x100000
 801ea68:	d12a      	bne.n	801eac0 <__ieee754_sqrt+0x198>
 801ea6a:	005b      	lsls	r3, r3, #1
 801ea6c:	3001      	adds	r0, #1
 801ea6e:	02dc      	lsls	r4, r3, #11
 801ea70:	d5fb      	bpl.n	801ea6a <__ieee754_sqrt+0x142>
 801ea72:	f1c0 0501 	rsb	r5, r0, #1
 801ea76:	f1c0 0420 	rsb	r4, r0, #32
 801ea7a:	fa22 f404 	lsr.w	r4, r2, r4
 801ea7e:	1949      	adds	r1, r1, r5
 801ea80:	4323      	orrs	r3, r4
 801ea82:	f5a1 7c7e 	sub.w	ip, r1, #1016	; 0x3f8
 801ea86:	4082      	lsls	r2, r0
 801ea88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801ea8c:	07c9      	lsls	r1, r1, #31
 801ea8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801ea92:	f1ac 0c07 	sub.w	ip, ip, #7
 801ea96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ea9a:	f53f af67 	bmi.w	801e96c <__ieee754_sqrt+0x44>
 801ea9e:	e7c8      	b.n	801ea32 <__ieee754_sqrt+0x10a>
 801eaa0:	4602      	mov	r2, r0
 801eaa2:	460b      	mov	r3, r1
 801eaa4:	f001 fe96 	bl	80207d4 <__aeabi_dmul>
 801eaa8:	4602      	mov	r2, r0
 801eaaa:	460b      	mov	r3, r1
 801eaac:	4630      	mov	r0, r6
 801eaae:	4639      	mov	r1, r7
 801eab0:	f001 fcde 	bl	8020470 <__adddf3>
 801eab4:	4606      	mov	r6, r0
 801eab6:	460f      	mov	r7, r1
 801eab8:	4630      	mov	r0, r6
 801eaba:	4639      	mov	r1, r7
 801eabc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eac0:	2420      	movs	r4, #32
 801eac2:	2501      	movs	r5, #1
 801eac4:	2000      	movs	r0, #0
 801eac6:	e7d8      	b.n	801ea7a <__ieee754_sqrt+0x152>
 801eac8:	4602      	mov	r2, r0
 801eaca:	460b      	mov	r3, r1
 801eacc:	f001 fcce 	bl	802046c <__aeabi_dsub>
 801ead0:	4602      	mov	r2, r0
 801ead2:	460b      	mov	r3, r1
 801ead4:	f001 ffa8 	bl	8020a28 <__aeabi_ddiv>
 801ead8:	4606      	mov	r6, r0
 801eada:	460f      	mov	r7, r1
 801eadc:	e79e      	b.n	801ea1c <__ieee754_sqrt+0xf4>
 801eade:	bf00      	nop

0801eae0 <__ieee754_asinf>:
 801eae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eae4:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 801eae8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 801eaec:	4604      	mov	r4, r0
 801eaee:	4606      	mov	r6, r0
 801eaf0:	f000 80fd 	beq.w	801ecee <__ieee754_asinf+0x20e>
 801eaf4:	f300 80d5 	bgt.w	801eca2 <__ieee754_asinf+0x1c2>
 801eaf8:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801eafc:	da10      	bge.n	801eb20 <__ieee754_asinf+0x40>
 801eafe:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 801eb02:	f280 810a 	bge.w	801ed1a <__ieee754_asinf+0x23a>
 801eb06:	f24f 21ca 	movw	r1, #62154	; 0xf2ca
 801eb0a:	f2c7 1149 	movt	r1, #29001	; 0x7149
 801eb0e:	f002 f951 	bl	8020db4 <__addsf3>
 801eb12:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801eb16:	f002 fc11 	bl	802133c <__aeabi_fcmpgt>
 801eb1a:	2800      	cmp	r0, #0
 801eb1c:	f040 80c8 	bne.w	801ecb0 <__ieee754_asinf+0x1d0>
 801eb20:	4620      	mov	r0, r4
 801eb22:	f001 fba9 	bl	8020278 <fabsf>
 801eb26:	4601      	mov	r1, r0
 801eb28:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801eb2c:	f002 f940 	bl	8020db0 <__aeabi_fsub>
 801eb30:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801eb34:	f002 fa46 	bl	8020fc4 <__aeabi_fmul>
 801eb38:	f64e 7108 	movw	r1, #61192	; 0xef08
 801eb3c:	f6c3 0111 	movt	r1, #14353	; 0x3811
 801eb40:	4604      	mov	r4, r0
 801eb42:	f002 fa3f 	bl	8020fc4 <__aeabi_fmul>
 801eb46:	f647 7104 	movw	r1, #32516	; 0x7f04
 801eb4a:	f6c3 214f 	movt	r1, #14927	; 0x3a4f
 801eb4e:	f002 f931 	bl	8020db4 <__addsf3>
 801eb52:	4621      	mov	r1, r4
 801eb54:	f002 fa36 	bl	8020fc4 <__aeabi_fmul>
 801eb58:	f241 1146 	movw	r1, #4422	; 0x1146
 801eb5c:	f6c3 5124 	movt	r1, #15652	; 0x3d24
 801eb60:	f002 f926 	bl	8020db0 <__aeabi_fsub>
 801eb64:	4621      	mov	r1, r4
 801eb66:	f002 fa2d 	bl	8020fc4 <__aeabi_fmul>
 801eb6a:	f640 21a8 	movw	r1, #2728	; 0xaa8
 801eb6e:	f6c3 614e 	movt	r1, #15950	; 0x3e4e
 801eb72:	f002 f91f 	bl	8020db4 <__addsf3>
 801eb76:	4621      	mov	r1, r4
 801eb78:	f002 fa24 	bl	8020fc4 <__aeabi_fmul>
 801eb7c:	f24b 0190 	movw	r1, #45200	; 0xb090
 801eb80:	f6c3 61a6 	movt	r1, #16038	; 0x3ea6
 801eb84:	f002 f914 	bl	8020db0 <__aeabi_fsub>
 801eb88:	4621      	mov	r1, r4
 801eb8a:	f002 fa1b 	bl	8020fc4 <__aeabi_fmul>
 801eb8e:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 801eb92:	f6c3 612a 	movt	r1, #15914	; 0x3e2a
 801eb96:	f002 f90d 	bl	8020db4 <__addsf3>
 801eb9a:	4621      	mov	r1, r4
 801eb9c:	f002 fa12 	bl	8020fc4 <__aeabi_fmul>
 801eba0:	f24c 612e 	movw	r1, #50734	; 0xc62e
 801eba4:	f6c3 519d 	movt	r1, #15773	; 0x3d9d
 801eba8:	4681      	mov	r9, r0
 801ebaa:	4620      	mov	r0, r4
 801ebac:	f002 fa0a 	bl	8020fc4 <__aeabi_fmul>
 801ebb0:	f243 3161 	movw	r1, #13153	; 0x3361
 801ebb4:	f6c3 7130 	movt	r1, #16176	; 0x3f30
 801ebb8:	f002 f8fa 	bl	8020db0 <__aeabi_fsub>
 801ebbc:	4621      	mov	r1, r4
 801ebbe:	f002 fa01 	bl	8020fc4 <__aeabi_fmul>
 801ebc2:	f245 712d 	movw	r1, #22317	; 0x572d
 801ebc6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 801ebca:	f002 f8f3 	bl	8020db4 <__addsf3>
 801ebce:	4621      	mov	r1, r4
 801ebd0:	f002 f9f8 	bl	8020fc4 <__aeabi_fmul>
 801ebd4:	f24d 1139 	movw	r1, #53561	; 0xd139
 801ebd8:	f2c4 0119 	movt	r1, #16409	; 0x4019
 801ebdc:	f002 f8e8 	bl	8020db0 <__aeabi_fsub>
 801ebe0:	4621      	mov	r1, r4
 801ebe2:	f002 f9ef 	bl	8020fc4 <__aeabi_fmul>
 801ebe6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801ebea:	f002 f8e3 	bl	8020db4 <__addsf3>
 801ebee:	4680      	mov	r8, r0
 801ebf0:	4620      	mov	r0, r4
 801ebf2:	f000 fb59 	bl	801f2a8 <__ieee754_sqrtf>
 801ebf6:	f649 1399 	movw	r3, #39321	; 0x9999
 801ebfa:	f6c3 7379 	movt	r3, #16249	; 0x3f79
 801ebfe:	429d      	cmp	r5, r3
 801ec00:	4607      	mov	r7, r0
 801ec02:	dc58      	bgt.n	801ecb6 <__ieee754_asinf+0x1d6>
 801ec04:	4601      	mov	r1, r0
 801ec06:	f420 657e 	bic.w	r5, r0, #4064	; 0xfe0
 801ec0a:	f002 f8d3 	bl	8020db4 <__addsf3>
 801ec0e:	4641      	mov	r1, r8
 801ec10:	f025 051f 	bic.w	r5, r5, #31
 801ec14:	4682      	mov	sl, r0
 801ec16:	4648      	mov	r0, r9
 801ec18:	f002 fa88 	bl	802112c <__aeabi_fdiv>
 801ec1c:	4601      	mov	r1, r0
 801ec1e:	4650      	mov	r0, sl
 801ec20:	f002 f9d0 	bl	8020fc4 <__aeabi_fmul>
 801ec24:	4629      	mov	r1, r5
 801ec26:	4680      	mov	r8, r0
 801ec28:	4628      	mov	r0, r5
 801ec2a:	f002 f9cb 	bl	8020fc4 <__aeabi_fmul>
 801ec2e:	4601      	mov	r1, r0
 801ec30:	4620      	mov	r0, r4
 801ec32:	f002 f8bd 	bl	8020db0 <__aeabi_fsub>
 801ec36:	4629      	mov	r1, r5
 801ec38:	4604      	mov	r4, r0
 801ec3a:	4638      	mov	r0, r7
 801ec3c:	f002 f8ba 	bl	8020db4 <__addsf3>
 801ec40:	4601      	mov	r1, r0
 801ec42:	4620      	mov	r0, r4
 801ec44:	f002 fa72 	bl	802112c <__aeabi_fdiv>
 801ec48:	4601      	mov	r1, r0
 801ec4a:	f002 f8b3 	bl	8020db4 <__addsf3>
 801ec4e:	4601      	mov	r1, r0
 801ec50:	f64b 502e 	movw	r0, #48430	; 0xbd2e
 801ec54:	f2cb 303b 	movt	r0, #45883	; 0xb33b
 801ec58:	f002 f8aa 	bl	8020db0 <__aeabi_fsub>
 801ec5c:	4601      	mov	r1, r0
 801ec5e:	4640      	mov	r0, r8
 801ec60:	f002 f8a6 	bl	8020db0 <__aeabi_fsub>
 801ec64:	4629      	mov	r1, r5
 801ec66:	4604      	mov	r4, r0
 801ec68:	4628      	mov	r0, r5
 801ec6a:	f002 f8a3 	bl	8020db4 <__addsf3>
 801ec6e:	4601      	mov	r1, r0
 801ec70:	f640 70db 	movw	r0, #4059	; 0xfdb
 801ec74:	f6c3 7049 	movt	r0, #16201	; 0x3f49
 801ec78:	f002 f89a 	bl	8020db0 <__aeabi_fsub>
 801ec7c:	4601      	mov	r1, r0
 801ec7e:	4620      	mov	r0, r4
 801ec80:	f002 f896 	bl	8020db0 <__aeabi_fsub>
 801ec84:	4601      	mov	r1, r0
 801ec86:	f640 70db 	movw	r0, #4059	; 0xfdb
 801ec8a:	f6c3 7049 	movt	r0, #16201	; 0x3f49
 801ec8e:	f002 f88f 	bl	8020db0 <__aeabi_fsub>
 801ec92:	2e00      	cmp	r6, #0
 801ec94:	bfd4      	ite	le
 801ec96:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 801ec9a:	4604      	movgt	r4, r0
 801ec9c:	4620      	mov	r0, r4
 801ec9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eca2:	4601      	mov	r1, r0
 801eca4:	f002 f884 	bl	8020db0 <__aeabi_fsub>
 801eca8:	4601      	mov	r1, r0
 801ecaa:	f002 fa3f 	bl	802112c <__aeabi_fdiv>
 801ecae:	4604      	mov	r4, r0
 801ecb0:	4620      	mov	r0, r4
 801ecb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ecb6:	4641      	mov	r1, r8
 801ecb8:	4648      	mov	r0, r9
 801ecba:	f002 fa37 	bl	802112c <__aeabi_fdiv>
 801ecbe:	4601      	mov	r1, r0
 801ecc0:	4638      	mov	r0, r7
 801ecc2:	f002 f97f 	bl	8020fc4 <__aeabi_fmul>
 801ecc6:	4639      	mov	r1, r7
 801ecc8:	f002 f874 	bl	8020db4 <__addsf3>
 801eccc:	4601      	mov	r1, r0
 801ecce:	f002 f871 	bl	8020db4 <__addsf3>
 801ecd2:	f64b 512e 	movw	r1, #48430	; 0xbd2e
 801ecd6:	f2c3 313b 	movt	r1, #13115	; 0x333b
 801ecda:	f002 f86b 	bl	8020db4 <__addsf3>
 801ecde:	4601      	mov	r1, r0
 801ece0:	f640 70db 	movw	r0, #4059	; 0xfdb
 801ece4:	f6c3 70c9 	movt	r0, #16329	; 0x3fc9
 801ece8:	f002 f862 	bl	8020db0 <__aeabi_fsub>
 801ecec:	e7d1      	b.n	801ec92 <__ieee754_asinf+0x1b2>
 801ecee:	f640 71db 	movw	r1, #4059	; 0xfdb
 801ecf2:	f6c3 71c9 	movt	r1, #16329	; 0x3fc9
 801ecf6:	f002 f965 	bl	8020fc4 <__aeabi_fmul>
 801ecfa:	f64b 512e 	movw	r1, #48430	; 0xbd2e
 801ecfe:	f2cb 313b 	movt	r1, #45883	; 0xb33b
 801ed02:	4605      	mov	r5, r0
 801ed04:	4620      	mov	r0, r4
 801ed06:	f002 f95d 	bl	8020fc4 <__aeabi_fmul>
 801ed0a:	4601      	mov	r1, r0
 801ed0c:	4628      	mov	r0, r5
 801ed0e:	f002 f851 	bl	8020db4 <__addsf3>
 801ed12:	4604      	mov	r4, r0
 801ed14:	4620      	mov	r0, r4
 801ed16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed1a:	4601      	mov	r1, r0
 801ed1c:	f002 f952 	bl	8020fc4 <__aeabi_fmul>
 801ed20:	f64e 7108 	movw	r1, #61192	; 0xef08
 801ed24:	f6c3 0111 	movt	r1, #14353	; 0x3811
 801ed28:	4605      	mov	r5, r0
 801ed2a:	f002 f94b 	bl	8020fc4 <__aeabi_fmul>
 801ed2e:	f647 7104 	movw	r1, #32516	; 0x7f04
 801ed32:	f6c3 214f 	movt	r1, #14927	; 0x3a4f
 801ed36:	f002 f83d 	bl	8020db4 <__addsf3>
 801ed3a:	4629      	mov	r1, r5
 801ed3c:	f002 f942 	bl	8020fc4 <__aeabi_fmul>
 801ed40:	f241 1146 	movw	r1, #4422	; 0x1146
 801ed44:	f6c3 5124 	movt	r1, #15652	; 0x3d24
 801ed48:	f002 f832 	bl	8020db0 <__aeabi_fsub>
 801ed4c:	4629      	mov	r1, r5
 801ed4e:	f002 f939 	bl	8020fc4 <__aeabi_fmul>
 801ed52:	f640 21a8 	movw	r1, #2728	; 0xaa8
 801ed56:	f6c3 614e 	movt	r1, #15950	; 0x3e4e
 801ed5a:	f002 f82b 	bl	8020db4 <__addsf3>
 801ed5e:	4629      	mov	r1, r5
 801ed60:	f002 f930 	bl	8020fc4 <__aeabi_fmul>
 801ed64:	f24b 0190 	movw	r1, #45200	; 0xb090
 801ed68:	f6c3 61a6 	movt	r1, #16038	; 0x3ea6
 801ed6c:	f002 f820 	bl	8020db0 <__aeabi_fsub>
 801ed70:	4629      	mov	r1, r5
 801ed72:	f002 f927 	bl	8020fc4 <__aeabi_fmul>
 801ed76:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 801ed7a:	f6c3 612a 	movt	r1, #15914	; 0x3e2a
 801ed7e:	f002 f819 	bl	8020db4 <__addsf3>
 801ed82:	4629      	mov	r1, r5
 801ed84:	f002 f91e 	bl	8020fc4 <__aeabi_fmul>
 801ed88:	f24c 612e 	movw	r1, #50734	; 0xc62e
 801ed8c:	f6c3 519d 	movt	r1, #15773	; 0x3d9d
 801ed90:	4606      	mov	r6, r0
 801ed92:	4628      	mov	r0, r5
 801ed94:	f002 f916 	bl	8020fc4 <__aeabi_fmul>
 801ed98:	f243 3161 	movw	r1, #13153	; 0x3361
 801ed9c:	f6c3 7130 	movt	r1, #16176	; 0x3f30
 801eda0:	f002 f806 	bl	8020db0 <__aeabi_fsub>
 801eda4:	4629      	mov	r1, r5
 801eda6:	f002 f90d 	bl	8020fc4 <__aeabi_fmul>
 801edaa:	f245 712d 	movw	r1, #22317	; 0x572d
 801edae:	f2c4 0101 	movt	r1, #16385	; 0x4001
 801edb2:	f001 ffff 	bl	8020db4 <__addsf3>
 801edb6:	4629      	mov	r1, r5
 801edb8:	f002 f904 	bl	8020fc4 <__aeabi_fmul>
 801edbc:	f24d 1139 	movw	r1, #53561	; 0xd139
 801edc0:	f2c4 0119 	movt	r1, #16409	; 0x4019
 801edc4:	f001 fff4 	bl	8020db0 <__aeabi_fsub>
 801edc8:	4629      	mov	r1, r5
 801edca:	f002 f8fb 	bl	8020fc4 <__aeabi_fmul>
 801edce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801edd2:	f001 ffef 	bl	8020db4 <__addsf3>
 801edd6:	4601      	mov	r1, r0
 801edd8:	4630      	mov	r0, r6
 801edda:	f002 f9a7 	bl	802112c <__aeabi_fdiv>
 801edde:	4601      	mov	r1, r0
 801ede0:	4620      	mov	r0, r4
 801ede2:	f002 f8ef 	bl	8020fc4 <__aeabi_fmul>
 801ede6:	4601      	mov	r1, r0
 801ede8:	4620      	mov	r0, r4
 801edea:	f001 ffe3 	bl	8020db4 <__addsf3>
 801edee:	4604      	mov	r4, r0
 801edf0:	4620      	mov	r0, r4
 801edf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801edf6:	bf00      	nop

0801edf8 <__ieee754_atan2f>:
 801edf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801edfa:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 801edfe:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801ee02:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801ee06:	bfd4      	ite	le
 801ee08:	2700      	movle	r7, #0
 801ee0a:	2701      	movgt	r7, #1
 801ee0c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 801ee10:	bfc8      	it	gt
 801ee12:	f047 0701 	orrgt.w	r7, r7, #1
 801ee16:	4603      	mov	r3, r0
 801ee18:	2f00      	cmp	r7, #0
 801ee1a:	d145      	bne.n	801eea8 <__ieee754_atan2f+0xb0>
 801ee1c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 801ee20:	d04c      	beq.n	801eebc <__ieee754_atan2f+0xc4>
 801ee22:	178f      	asrs	r7, r1, #30
 801ee24:	f007 0702 	and.w	r7, r7, #2
 801ee28:	ea47 77d0 	orr.w	r7, r7, r0, lsr #31
 801ee2c:	b94c      	cbnz	r4, 801ee42 <__ieee754_atan2f+0x4a>
 801ee2e:	2f02      	cmp	r7, #2
 801ee30:	d03f      	beq.n	801eeb2 <__ieee754_atan2f+0xba>
 801ee32:	2f03      	cmp	r7, #3
 801ee34:	d103      	bne.n	801ee3e <__ieee754_atan2f+0x46>
 801ee36:	f640 73db 	movw	r3, #4059	; 0xfdb
 801ee3a:	f2cc 0349 	movt	r3, #49225	; 0xc049
 801ee3e:	4618      	mov	r0, r3
 801ee40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee42:	b336      	cbz	r6, 801ee92 <__ieee754_atan2f+0x9a>
 801ee44:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 801ee48:	d055      	beq.n	801eef6 <__ieee754_atan2f+0xfe>
 801ee4a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801ee4e:	d020      	beq.n	801ee92 <__ieee754_atan2f+0x9a>
 801ee50:	1ba4      	subs	r4, r4, r6
 801ee52:	15e4      	asrs	r4, r4, #23
 801ee54:	2c3c      	cmp	r4, #60	; 0x3c
 801ee56:	bfc4      	itt	gt
 801ee58:	f640 70db 	movwgt	r0, #4059	; 0xfdb
 801ee5c:	f6c3 70c9 	movtgt	r0, #16329	; 0x3fc9
 801ee60:	dd30      	ble.n	801eec4 <__ieee754_atan2f+0xcc>
 801ee62:	2f01      	cmp	r7, #1
 801ee64:	bf08      	it	eq
 801ee66:	f100 4300 	addeq.w	r3, r0, #2147483648	; 0x80000000
 801ee6a:	d0e8      	beq.n	801ee3e <__ieee754_atan2f+0x46>
 801ee6c:	2f02      	cmp	r7, #2
 801ee6e:	d033      	beq.n	801eed8 <__ieee754_atan2f+0xe0>
 801ee70:	4603      	mov	r3, r0
 801ee72:	2f00      	cmp	r7, #0
 801ee74:	d0e3      	beq.n	801ee3e <__ieee754_atan2f+0x46>
 801ee76:	f64b 512e 	movw	r1, #48430	; 0xbd2e
 801ee7a:	f2c3 31bb 	movt	r1, #13243	; 0x33bb
 801ee7e:	f001 ff99 	bl	8020db4 <__addsf3>
 801ee82:	f640 71db 	movw	r1, #4059	; 0xfdb
 801ee86:	f2c4 0149 	movt	r1, #16457	; 0x4049
 801ee8a:	f001 ff91 	bl	8020db0 <__aeabi_fsub>
 801ee8e:	4603      	mov	r3, r0
 801ee90:	e7d5      	b.n	801ee3e <__ieee754_atan2f+0x46>
 801ee92:	2800      	cmp	r0, #0
 801ee94:	f640 73db 	movw	r3, #4059	; 0xfdb
 801ee98:	bfb8      	it	lt
 801ee9a:	f6cb 73c9 	movtlt	r3, #49097	; 0xbfc9
 801ee9e:	dbce      	blt.n	801ee3e <__ieee754_atan2f+0x46>
 801eea0:	f6c3 73c9 	movt	r3, #16329	; 0x3fc9
 801eea4:	4618      	mov	r0, r3
 801eea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eea8:	f001 ff84 	bl	8020db4 <__addsf3>
 801eeac:	4603      	mov	r3, r0
 801eeae:	4618      	mov	r0, r3
 801eeb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eeb2:	f640 73db 	movw	r3, #4059	; 0xfdb
 801eeb6:	f2c4 0349 	movt	r3, #16457	; 0x4049
 801eeba:	e7c0      	b.n	801ee3e <__ieee754_atan2f+0x46>
 801eebc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801eec0:	f001 b8bc 	b.w	802003c <atanf>
 801eec4:	f114 0f3c 	cmn.w	r4, #60	; 0x3c
 801eec8:	bfac      	ite	ge
 801eeca:	2400      	movge	r4, #0
 801eecc:	2401      	movlt	r4, #1
 801eece:	ea14 74d1 	ands.w	r4, r4, r1, lsr #31
 801eed2:	d01d      	beq.n	801ef10 <__ieee754_atan2f+0x118>
 801eed4:	2000      	movs	r0, #0
 801eed6:	e7c4      	b.n	801ee62 <__ieee754_atan2f+0x6a>
 801eed8:	f64b 512e 	movw	r1, #48430	; 0xbd2e
 801eedc:	f2c3 31bb 	movt	r1, #13243	; 0x33bb
 801eee0:	f001 ff68 	bl	8020db4 <__addsf3>
 801eee4:	4601      	mov	r1, r0
 801eee6:	f640 70db 	movw	r0, #4059	; 0xfdb
 801eeea:	f2c4 0049 	movt	r0, #16457	; 0x4049
 801eeee:	f001 ff5f 	bl	8020db0 <__aeabi_fsub>
 801eef2:	4603      	mov	r3, r0
 801eef4:	e7a3      	b.n	801ee3e <__ieee754_atan2f+0x46>
 801eef6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801eefa:	d010      	beq.n	801ef1e <__ieee754_atan2f+0x126>
 801eefc:	2f02      	cmp	r7, #2
 801eefe:	d0d8      	beq.n	801eeb2 <__ieee754_atan2f+0xba>
 801ef00:	2f03      	cmp	r7, #3
 801ef02:	d098      	beq.n	801ee36 <__ieee754_atan2f+0x3e>
 801ef04:	2300      	movs	r3, #0
 801ef06:	2f01      	cmp	r7, #1
 801ef08:	d199      	bne.n	801ee3e <__ieee754_atan2f+0x46>
 801ef0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801ef0e:	e796      	b.n	801ee3e <__ieee754_atan2f+0x46>
 801ef10:	f002 f90c 	bl	802112c <__aeabi_fdiv>
 801ef14:	f001 f9b0 	bl	8020278 <fabsf>
 801ef18:	f001 f890 	bl	802003c <atanf>
 801ef1c:	e7a1      	b.n	801ee62 <__ieee754_atan2f+0x6a>
 801ef1e:	2f02      	cmp	r7, #2
 801ef20:	bf04      	itt	eq
 801ef22:	f64c 33e4 	movweq	r3, #52196	; 0xcbe4
 801ef26:	f2c4 0316 	movteq	r3, #16406	; 0x4016
 801ef2a:	d088      	beq.n	801ee3e <__ieee754_atan2f+0x46>
 801ef2c:	2f03      	cmp	r7, #3
 801ef2e:	bf04      	itt	eq
 801ef30:	f64c 33e4 	movweq	r3, #52196	; 0xcbe4
 801ef34:	f2cc 0316 	movteq	r3, #49174	; 0xc016
 801ef38:	d081      	beq.n	801ee3e <__ieee754_atan2f+0x46>
 801ef3a:	2f01      	cmp	r7, #1
 801ef3c:	f640 73db 	movw	r3, #4059	; 0xfdb
 801ef40:	bf18      	it	ne
 801ef42:	f6c3 7349 	movtne	r3, #16201	; 0x3f49
 801ef46:	f47f af7a 	bne.w	801ee3e <__ieee754_atan2f+0x46>
 801ef4a:	f6cb 7349 	movt	r3, #48969	; 0xbf49
 801ef4e:	e776      	b.n	801ee3e <__ieee754_atan2f+0x46>

0801ef50 <__ieee754_rem_pio2f>:
 801ef50:	f640 73d8 	movw	r3, #4056	; 0xfd8
 801ef54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef58:	f6c3 7349 	movt	r3, #16201	; 0x3f49
 801ef5c:	f020 4b00 	bic.w	fp, r0, #2147483648	; 0x80000000
 801ef60:	b089      	sub	sp, #36	; 0x24
 801ef62:	459b      	cmp	fp, r3
 801ef64:	4605      	mov	r5, r0
 801ef66:	460c      	mov	r4, r1
 801ef68:	f340 808c 	ble.w	801f084 <__ieee754_rem_pio2f+0x134>
 801ef6c:	f64c 33e3 	movw	r3, #52195	; 0xcbe3
 801ef70:	f2c4 0316 	movt	r3, #16406	; 0x4016
 801ef74:	459b      	cmp	fp, r3
 801ef76:	dc26      	bgt.n	801efc6 <__ieee754_rem_pio2f+0x76>
 801ef78:	2800      	cmp	r0, #0
 801ef7a:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 801ef7e:	f6c3 71c9 	movt	r1, #16329	; 0x3fc9
 801ef82:	f340 8153 	ble.w	801f22c <__ieee754_rem_pio2f+0x2dc>
 801ef86:	f001 ff13 	bl	8020db0 <__aeabi_fsub>
 801ef8a:	f44f 637d 	mov.w	r3, #4048	; 0xfd0
 801ef8e:	f02b 0b0f 	bic.w	fp, fp, #15
 801ef92:	f6c3 73c9 	movt	r3, #16329	; 0x3fc9
 801ef96:	459b      	cmp	fp, r3
 801ef98:	4605      	mov	r5, r0
 801ef9a:	f000 8082 	beq.w	801f0a2 <__ieee754_rem_pio2f+0x152>
 801ef9e:	f244 4143 	movw	r1, #17475	; 0x4443
 801efa2:	2601      	movs	r6, #1
 801efa4:	f2c3 7135 	movt	r1, #14133	; 0x3735
 801efa8:	f001 ff02 	bl	8020db0 <__aeabi_fsub>
 801efac:	4601      	mov	r1, r0
 801efae:	6020      	str	r0, [r4, #0]
 801efb0:	4628      	mov	r0, r5
 801efb2:	f001 fefd 	bl	8020db0 <__aeabi_fsub>
 801efb6:	f244 4143 	movw	r1, #17475	; 0x4443
 801efba:	f2c3 7135 	movt	r1, #14133	; 0x3735
 801efbe:	f001 fef7 	bl	8020db0 <__aeabi_fsub>
 801efc2:	6060      	str	r0, [r4, #4]
 801efc4:	e062      	b.n	801f08c <__ieee754_rem_pio2f+0x13c>
 801efc6:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 801efca:	f2c4 3349 	movt	r3, #17225	; 0x4349
 801efce:	459b      	cmp	fp, r3
 801efd0:	f340 8082 	ble.w	801f0d8 <__ieee754_rem_pio2f+0x188>
 801efd4:	f1bb 4fff 	cmp.w	fp, #2139095040	; 0x7f800000
 801efd8:	da5c      	bge.n	801f094 <__ieee754_rem_pio2f+0x144>
 801efda:	ea4f 59eb 	mov.w	r9, fp, asr #23
 801efde:	f1a9 0986 	sub.w	r9, r9, #134	; 0x86
 801efe2:	ea4f 53c9 	mov.w	r3, r9, lsl #23
 801efe6:	ebc3 0b0b 	rsb	fp, r3, fp
 801efea:	4658      	mov	r0, fp
 801efec:	f002 f9b0 	bl	8021350 <__aeabi_f2iz>
 801eff0:	f001 ff94 	bl	8020f1c <__aeabi_i2f>
 801eff4:	4603      	mov	r3, r0
 801eff6:	4601      	mov	r1, r0
 801eff8:	4658      	mov	r0, fp
 801effa:	9305      	str	r3, [sp, #20]
 801effc:	f001 fed8 	bl	8020db0 <__aeabi_fsub>
 801f000:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 801f004:	f001 ffde 	bl	8020fc4 <__aeabi_fmul>
 801f008:	4606      	mov	r6, r0
 801f00a:	f002 f9a1 	bl	8021350 <__aeabi_f2iz>
 801f00e:	f001 ff85 	bl	8020f1c <__aeabi_i2f>
 801f012:	4601      	mov	r1, r0
 801f014:	4607      	mov	r7, r0
 801f016:	4630      	mov	r0, r6
 801f018:	9706      	str	r7, [sp, #24]
 801f01a:	f001 fec9 	bl	8020db0 <__aeabi_fsub>
 801f01e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 801f022:	f001 ffcf 	bl	8020fc4 <__aeabi_fmul>
 801f026:	2100      	movs	r1, #0
 801f028:	2603      	movs	r6, #3
 801f02a:	9007      	str	r0, [sp, #28]
 801f02c:	f002 f95e 	bl	80212ec <__aeabi_fcmpeq>
 801f030:	b188      	cbz	r0, 801f056 <__ieee754_rem_pio2f+0x106>
 801f032:	2603      	movs	r6, #3
 801f034:	4638      	mov	r0, r7
 801f036:	2100      	movs	r1, #0
 801f038:	f10d 0818 	add.w	r8, sp, #24
 801f03c:	3e01      	subs	r6, #1
 801f03e:	f002 f955 	bl	80212ec <__aeabi_fcmpeq>
 801f042:	b140      	cbz	r0, 801f056 <__ieee754_rem_pio2f+0x106>
 801f044:	f858 7d04 	ldr.w	r7, [r8, #-4]!
 801f048:	2100      	movs	r1, #0
 801f04a:	3e01      	subs	r6, #1
 801f04c:	4638      	mov	r0, r7
 801f04e:	f002 f94d 	bl	80212ec <__aeabi_fcmpeq>
 801f052:	2800      	cmp	r0, #0
 801f054:	d1f6      	bne.n	801f044 <__ieee754_rem_pio2f+0xf4>
 801f056:	4633      	mov	r3, r6
 801f058:	4e92      	ldr	r6, [pc, #584]	; (801f2a4 <__ieee754_rem_pio2f+0x354>)
 801f05a:	a805      	add	r0, sp, #20
 801f05c:	4621      	mov	r1, r4
 801f05e:	464a      	mov	r2, r9
 801f060:	9601      	str	r6, [sp, #4]
 801f062:	2602      	movs	r6, #2
 801f064:	9600      	str	r6, [sp, #0]
 801f066:	f000 fa53 	bl	801f510 <__kernel_rem_pio2f>
 801f06a:	2d00      	cmp	r5, #0
 801f06c:	4606      	mov	r6, r0
 801f06e:	da0d      	bge.n	801f08c <__ieee754_rem_pio2f+0x13c>
 801f070:	6822      	ldr	r2, [r4, #0]
 801f072:	4246      	negs	r6, r0
 801f074:	6863      	ldr	r3, [r4, #4]
 801f076:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801f07a:	6022      	str	r2, [r4, #0]
 801f07c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801f080:	6063      	str	r3, [r4, #4]
 801f082:	e003      	b.n	801f08c <__ieee754_rem_pio2f+0x13c>
 801f084:	2600      	movs	r6, #0
 801f086:	2300      	movs	r3, #0
 801f088:	6008      	str	r0, [r1, #0]
 801f08a:	604b      	str	r3, [r1, #4]
 801f08c:	4630      	mov	r0, r6
 801f08e:	b009      	add	sp, #36	; 0x24
 801f090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f094:	4601      	mov	r1, r0
 801f096:	2600      	movs	r6, #0
 801f098:	f001 fe8a 	bl	8020db0 <__aeabi_fsub>
 801f09c:	6060      	str	r0, [r4, #4]
 801f09e:	6020      	str	r0, [r4, #0]
 801f0a0:	e7f4      	b.n	801f08c <__ieee754_rem_pio2f+0x13c>
 801f0a2:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 801f0a6:	2601      	movs	r6, #1
 801f0a8:	f2c3 7135 	movt	r1, #14133	; 0x3735
 801f0ac:	f001 fe80 	bl	8020db0 <__aeabi_fsub>
 801f0b0:	f24a 3108 	movw	r1, #41736	; 0xa308
 801f0b4:	f6c2 6185 	movt	r1, #11909	; 0x2e85
 801f0b8:	4605      	mov	r5, r0
 801f0ba:	f001 fe79 	bl	8020db0 <__aeabi_fsub>
 801f0be:	4601      	mov	r1, r0
 801f0c0:	6020      	str	r0, [r4, #0]
 801f0c2:	4628      	mov	r0, r5
 801f0c4:	f001 fe74 	bl	8020db0 <__aeabi_fsub>
 801f0c8:	f24a 3108 	movw	r1, #41736	; 0xa308
 801f0cc:	f6c2 6185 	movt	r1, #11909	; 0x2e85
 801f0d0:	f001 fe6e 	bl	8020db0 <__aeabi_fsub>
 801f0d4:	6060      	str	r0, [r4, #4]
 801f0d6:	e7d9      	b.n	801f08c <__ieee754_rem_pio2f+0x13c>
 801f0d8:	f001 f8ce 	bl	8020278 <fabsf>
 801f0dc:	f64f 1184 	movw	r1, #63876	; 0xf984
 801f0e0:	f6c3 7122 	movt	r1, #16162	; 0x3f22
 801f0e4:	4607      	mov	r7, r0
 801f0e6:	f001 ff6d 	bl	8020fc4 <__aeabi_fmul>
 801f0ea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801f0ee:	f001 fe61 	bl	8020db4 <__addsf3>
 801f0f2:	f002 f92d 	bl	8021350 <__aeabi_f2iz>
 801f0f6:	4606      	mov	r6, r0
 801f0f8:	f001 ff10 	bl	8020f1c <__aeabi_i2f>
 801f0fc:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 801f100:	f6c3 71c9 	movt	r1, #16329	; 0x3fc9
 801f104:	4682      	mov	sl, r0
 801f106:	f001 ff5d 	bl	8020fc4 <__aeabi_fmul>
 801f10a:	4601      	mov	r1, r0
 801f10c:	4638      	mov	r0, r7
 801f10e:	f001 fe4f 	bl	8020db0 <__aeabi_fsub>
 801f112:	f244 4143 	movw	r1, #17475	; 0x4443
 801f116:	f2c3 7135 	movt	r1, #14133	; 0x3735
 801f11a:	4680      	mov	r8, r0
 801f11c:	4650      	mov	r0, sl
 801f11e:	f001 ff51 	bl	8020fc4 <__aeabi_fmul>
 801f122:	2e1f      	cmp	r6, #31
 801f124:	4681      	mov	r9, r0
 801f126:	4640      	mov	r0, r8
 801f128:	dc21      	bgt.n	801f16e <__ieee754_rem_pio2f+0x21e>
 801f12a:	f24e 6348 	movw	r3, #58952	; 0xe648
 801f12e:	1e71      	subs	r1, r6, #1
 801f130:	f6c0 0302 	movt	r3, #2050	; 0x802
 801f134:	f02b 02ff 	bic.w	r2, fp, #255	; 0xff
 801f138:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f13c:	429a      	cmp	r2, r3
 801f13e:	d016      	beq.n	801f16e <__ieee754_rem_pio2f+0x21e>
 801f140:	4649      	mov	r1, r9
 801f142:	f001 fe35 	bl	8020db0 <__aeabi_fsub>
 801f146:	4607      	mov	r7, r0
 801f148:	6020      	str	r0, [r4, #0]
 801f14a:	4639      	mov	r1, r7
 801f14c:	4640      	mov	r0, r8
 801f14e:	f001 fe2f 	bl	8020db0 <__aeabi_fsub>
 801f152:	4649      	mov	r1, r9
 801f154:	f001 fe2c 	bl	8020db0 <__aeabi_fsub>
 801f158:	2d00      	cmp	r5, #0
 801f15a:	6060      	str	r0, [r4, #4]
 801f15c:	da96      	bge.n	801f08c <__ieee754_rem_pio2f+0x13c>
 801f15e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 801f162:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801f166:	6027      	str	r7, [r4, #0]
 801f168:	4276      	negs	r6, r6
 801f16a:	6060      	str	r0, [r4, #4]
 801f16c:	e78e      	b.n	801f08c <__ieee754_rem_pio2f+0x13c>
 801f16e:	4649      	mov	r1, r9
 801f170:	ea4f 5beb 	mov.w	fp, fp, asr #23
 801f174:	f001 fe1c 	bl	8020db0 <__aeabi_fsub>
 801f178:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801f17c:	4607      	mov	r7, r0
 801f17e:	ebc3 030b 	rsb	r3, r3, fp
 801f182:	6020      	str	r0, [r4, #0]
 801f184:	2b08      	cmp	r3, #8
 801f186:	dde0      	ble.n	801f14a <__ieee754_rem_pio2f+0x1fa>
 801f188:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 801f18c:	4650      	mov	r0, sl
 801f18e:	f2c3 7135 	movt	r1, #14133	; 0x3735
 801f192:	f001 ff17 	bl	8020fc4 <__aeabi_fmul>
 801f196:	4607      	mov	r7, r0
 801f198:	4640      	mov	r0, r8
 801f19a:	4639      	mov	r1, r7
 801f19c:	f001 fe08 	bl	8020db0 <__aeabi_fsub>
 801f1a0:	9003      	str	r0, [sp, #12]
 801f1a2:	4640      	mov	r0, r8
 801f1a4:	9903      	ldr	r1, [sp, #12]
 801f1a6:	f001 fe03 	bl	8020db0 <__aeabi_fsub>
 801f1aa:	4639      	mov	r1, r7
 801f1ac:	f001 fe00 	bl	8020db0 <__aeabi_fsub>
 801f1b0:	f24a 3108 	movw	r1, #41736	; 0xa308
 801f1b4:	f6c2 6185 	movt	r1, #11909	; 0x2e85
 801f1b8:	4607      	mov	r7, r0
 801f1ba:	4650      	mov	r0, sl
 801f1bc:	f001 ff02 	bl	8020fc4 <__aeabi_fmul>
 801f1c0:	4639      	mov	r1, r7
 801f1c2:	f001 fdf5 	bl	8020db0 <__aeabi_fsub>
 801f1c6:	4681      	mov	r9, r0
 801f1c8:	9803      	ldr	r0, [sp, #12]
 801f1ca:	4649      	mov	r1, r9
 801f1cc:	f001 fdf0 	bl	8020db0 <__aeabi_fsub>
 801f1d0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801f1d4:	4607      	mov	r7, r0
 801f1d6:	ebc3 0b0b 	rsb	fp, r3, fp
 801f1da:	6020      	str	r0, [r4, #0]
 801f1dc:	f1bb 0f19 	cmp.w	fp, #25
 801f1e0:	bfd8      	it	le
 801f1e2:	f8dd 800c 	ldrle.w	r8, [sp, #12]
 801f1e6:	ddb0      	ble.n	801f14a <__ieee754_rem_pio2f+0x1fa>
 801f1e8:	f44f 4123 	mov.w	r1, #41728	; 0xa300
 801f1ec:	4650      	mov	r0, sl
 801f1ee:	f6c2 6185 	movt	r1, #11909	; 0x2e85
 801f1f2:	f001 fee7 	bl	8020fc4 <__aeabi_fmul>
 801f1f6:	4607      	mov	r7, r0
 801f1f8:	9803      	ldr	r0, [sp, #12]
 801f1fa:	4639      	mov	r1, r7
 801f1fc:	f001 fdd8 	bl	8020db0 <__aeabi_fsub>
 801f200:	4680      	mov	r8, r0
 801f202:	9803      	ldr	r0, [sp, #12]
 801f204:	4641      	mov	r1, r8
 801f206:	f001 fdd3 	bl	8020db0 <__aeabi_fsub>
 801f20a:	4639      	mov	r1, r7
 801f20c:	f001 fdd0 	bl	8020db0 <__aeabi_fsub>
 801f210:	f243 1132 	movw	r1, #12594	; 0x3132
 801f214:	f2c2 418d 	movt	r1, #9357	; 0x248d
 801f218:	4607      	mov	r7, r0
 801f21a:	4650      	mov	r0, sl
 801f21c:	f001 fed2 	bl	8020fc4 <__aeabi_fmul>
 801f220:	4639      	mov	r1, r7
 801f222:	f001 fdc5 	bl	8020db0 <__aeabi_fsub>
 801f226:	4681      	mov	r9, r0
 801f228:	4640      	mov	r0, r8
 801f22a:	e789      	b.n	801f140 <__ieee754_rem_pio2f+0x1f0>
 801f22c:	f001 fdc2 	bl	8020db4 <__addsf3>
 801f230:	f44f 637d 	mov.w	r3, #4048	; 0xfd0
 801f234:	f02b 0b0f 	bic.w	fp, fp, #15
 801f238:	f6c3 73c9 	movt	r3, #16329	; 0x3fc9
 801f23c:	459b      	cmp	fp, r3
 801f23e:	4605      	mov	r5, r0
 801f240:	d014      	beq.n	801f26c <__ieee754_rem_pio2f+0x31c>
 801f242:	f244 4143 	movw	r1, #17475	; 0x4443
 801f246:	f04f 36ff 	mov.w	r6, #4294967295
 801f24a:	f2c3 7135 	movt	r1, #14133	; 0x3735
 801f24e:	f001 fdb1 	bl	8020db4 <__addsf3>
 801f252:	4601      	mov	r1, r0
 801f254:	6020      	str	r0, [r4, #0]
 801f256:	4628      	mov	r0, r5
 801f258:	f001 fdaa 	bl	8020db0 <__aeabi_fsub>
 801f25c:	f244 4143 	movw	r1, #17475	; 0x4443
 801f260:	f2c3 7135 	movt	r1, #14133	; 0x3735
 801f264:	f001 fda6 	bl	8020db4 <__addsf3>
 801f268:	6060      	str	r0, [r4, #4]
 801f26a:	e70f      	b.n	801f08c <__ieee754_rem_pio2f+0x13c>
 801f26c:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 801f270:	f04f 36ff 	mov.w	r6, #4294967295
 801f274:	f2c3 7135 	movt	r1, #14133	; 0x3735
 801f278:	f001 fd9c 	bl	8020db4 <__addsf3>
 801f27c:	f24a 3108 	movw	r1, #41736	; 0xa308
 801f280:	f6c2 6185 	movt	r1, #11909	; 0x2e85
 801f284:	4605      	mov	r5, r0
 801f286:	f001 fd95 	bl	8020db4 <__addsf3>
 801f28a:	4601      	mov	r1, r0
 801f28c:	6020      	str	r0, [r4, #0]
 801f28e:	4628      	mov	r0, r5
 801f290:	f001 fd8e 	bl	8020db0 <__aeabi_fsub>
 801f294:	f24a 3108 	movw	r1, #41736	; 0xa308
 801f298:	f6c2 6185 	movt	r1, #11909	; 0x2e85
 801f29c:	f001 fd8a 	bl	8020db4 <__addsf3>
 801f2a0:	6060      	str	r0, [r4, #4]
 801f2a2:	e6f3      	b.n	801f08c <__ieee754_rem_pio2f+0x13c>
 801f2a4:	0802e6c8 	.word	0x0802e6c8

0801f2a8 <__ieee754_sqrtf>:
 801f2a8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 801f2ac:	4603      	mov	r3, r0
 801f2ae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801f2b2:	b570      	push	{r4, r5, r6, lr}
 801f2b4:	4604      	mov	r4, r0
 801f2b6:	d239      	bcs.n	801f32c <__ieee754_sqrtf+0x84>
 801f2b8:	2a00      	cmp	r2, #0
 801f2ba:	d035      	beq.n	801f328 <__ieee754_sqrtf+0x80>
 801f2bc:	2800      	cmp	r0, #0
 801f2be:	db3f      	blt.n	801f340 <__ieee754_sqrtf+0x98>
 801f2c0:	15c1      	asrs	r1, r0, #23
 801f2c2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801f2c6:	d209      	bcs.n	801f2dc <__ieee754_sqrtf+0x34>
 801f2c8:	f410 0200 	ands.w	r2, r0, #8388608	; 0x800000
 801f2cc:	d140      	bne.n	801f350 <__ieee754_sqrtf+0xa8>
 801f2ce:	005b      	lsls	r3, r3, #1
 801f2d0:	3201      	adds	r2, #1
 801f2d2:	0218      	lsls	r0, r3, #8
 801f2d4:	d5fb      	bpl.n	801f2ce <__ieee754_sqrtf+0x26>
 801f2d6:	f1c2 0201 	rsb	r2, r2, #1
 801f2da:	1889      	adds	r1, r1, r2
 801f2dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801f2e0:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
 801f2e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801f2e8:	07d1      	lsls	r1, r2, #31
 801f2ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801f2ee:	bf48      	it	mi
 801f2f0:	005b      	lslmi	r3, r3, #1
 801f2f2:	2600      	movs	r6, #0
 801f2f4:	1054      	asrs	r4, r2, #1
 801f2f6:	2119      	movs	r1, #25
 801f2f8:	005b      	lsls	r3, r3, #1
 801f2fa:	4635      	mov	r5, r6
 801f2fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801f300:	18a8      	adds	r0, r5, r2
 801f302:	4298      	cmp	r0, r3
 801f304:	bfde      	ittt	le
 801f306:	ebc0 0303 	rsble	r3, r0, r3
 801f30a:	1885      	addle	r5, r0, r2
 801f30c:	18b6      	addle	r6, r6, r2
 801f30e:	0852      	lsrs	r2, r2, #1
 801f310:	005b      	lsls	r3, r3, #1
 801f312:	3901      	subs	r1, #1
 801f314:	d1f4      	bne.n	801f300 <__ieee754_sqrtf+0x58>
 801f316:	b113      	cbz	r3, 801f31e <__ieee754_sqrtf+0x76>
 801f318:	f006 0301 	and.w	r3, r6, #1
 801f31c:	199e      	adds	r6, r3, r6
 801f31e:	1076      	asrs	r6, r6, #1
 801f320:	05e4      	lsls	r4, r4, #23
 801f322:	f106 567c 	add.w	r6, r6, #1056964608	; 0x3f000000
 801f326:	19a4      	adds	r4, r4, r6
 801f328:	4620      	mov	r0, r4
 801f32a:	bd70      	pop	{r4, r5, r6, pc}
 801f32c:	4601      	mov	r1, r0
 801f32e:	f001 fe49 	bl	8020fc4 <__aeabi_fmul>
 801f332:	4601      	mov	r1, r0
 801f334:	4620      	mov	r0, r4
 801f336:	f001 fd3d 	bl	8020db4 <__addsf3>
 801f33a:	4604      	mov	r4, r0
 801f33c:	4620      	mov	r0, r4
 801f33e:	bd70      	pop	{r4, r5, r6, pc}
 801f340:	4601      	mov	r1, r0
 801f342:	f001 fd35 	bl	8020db0 <__aeabi_fsub>
 801f346:	4601      	mov	r1, r0
 801f348:	f001 fef0 	bl	802112c <__aeabi_fdiv>
 801f34c:	4604      	mov	r4, r0
 801f34e:	e7eb      	b.n	801f328 <__ieee754_sqrtf+0x80>
 801f350:	2201      	movs	r2, #1
 801f352:	1889      	adds	r1, r1, r2
 801f354:	e7c2      	b.n	801f2dc <__ieee754_sqrtf+0x34>
 801f356:	bf00      	nop

0801f358 <__kernel_cosf>:
 801f358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f35c:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 801f360:	f1b6 5f48 	cmp.w	r6, #838860800	; 0x32000000
 801f364:	4605      	mov	r5, r0
 801f366:	460f      	mov	r7, r1
 801f368:	da5b      	bge.n	801f422 <__kernel_cosf+0xca>
 801f36a:	f001 fff1 	bl	8021350 <__aeabi_f2iz>
 801f36e:	2800      	cmp	r0, #0
 801f370:	f000 80ca 	beq.w	801f508 <__kernel_cosf+0x1b0>
 801f374:	4629      	mov	r1, r5
 801f376:	4628      	mov	r0, r5
 801f378:	f001 fe24 	bl	8020fc4 <__aeabi_fmul>
 801f37c:	f24d 714e 	movw	r1, #55118	; 0xd74e
 801f380:	f6ca 5147 	movt	r1, #44359	; 0xad47
 801f384:	4604      	mov	r4, r0
 801f386:	f001 fe1d 	bl	8020fc4 <__aeabi_fmul>
 801f38a:	f247 41f6 	movw	r1, #29942	; 0x74f6
 801f38e:	f2c3 110f 	movt	r1, #12559	; 0x310f
 801f392:	f001 fd0f 	bl	8020db4 <__addsf3>
 801f396:	4621      	mov	r1, r4
 801f398:	f001 fe14 	bl	8020fc4 <__aeabi_fmul>
 801f39c:	f24f 217c 	movw	r1, #62076	; 0xf27c
 801f3a0:	f2c3 4193 	movt	r1, #13459	; 0x3493
 801f3a4:	f001 fd04 	bl	8020db0 <__aeabi_fsub>
 801f3a8:	4621      	mov	r1, r4
 801f3aa:	f001 fe0b 	bl	8020fc4 <__aeabi_fmul>
 801f3ae:	f640 5101 	movw	r1, #3329	; 0xd01
 801f3b2:	f2c3 71d0 	movt	r1, #14288	; 0x37d0
 801f3b6:	f001 fcfd 	bl	8020db4 <__addsf3>
 801f3ba:	4621      	mov	r1, r4
 801f3bc:	f001 fe02 	bl	8020fc4 <__aeabi_fmul>
 801f3c0:	f640 3161 	movw	r1, #2913	; 0xb61
 801f3c4:	f6c3 21b6 	movt	r1, #15030	; 0x3ab6
 801f3c8:	f001 fcf2 	bl	8020db0 <__aeabi_fsub>
 801f3cc:	4621      	mov	r1, r4
 801f3ce:	f001 fdf9 	bl	8020fc4 <__aeabi_fmul>
 801f3d2:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 801f3d6:	f6c3 512a 	movt	r1, #15658	; 0x3d2a
 801f3da:	f001 fceb 	bl	8020db4 <__addsf3>
 801f3de:	4621      	mov	r1, r4
 801f3e0:	f001 fdf0 	bl	8020fc4 <__aeabi_fmul>
 801f3e4:	4680      	mov	r8, r0
 801f3e6:	4620      	mov	r0, r4
 801f3e8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801f3ec:	f001 fdea 	bl	8020fc4 <__aeabi_fmul>
 801f3f0:	4641      	mov	r1, r8
 801f3f2:	4606      	mov	r6, r0
 801f3f4:	4620      	mov	r0, r4
 801f3f6:	f001 fde5 	bl	8020fc4 <__aeabi_fmul>
 801f3fa:	4639      	mov	r1, r7
 801f3fc:	4604      	mov	r4, r0
 801f3fe:	4628      	mov	r0, r5
 801f400:	f001 fde0 	bl	8020fc4 <__aeabi_fmul>
 801f404:	4601      	mov	r1, r0
 801f406:	4620      	mov	r0, r4
 801f408:	f001 fcd2 	bl	8020db0 <__aeabi_fsub>
 801f40c:	4601      	mov	r1, r0
 801f40e:	4630      	mov	r0, r6
 801f410:	f001 fcce 	bl	8020db0 <__aeabi_fsub>
 801f414:	4601      	mov	r1, r0
 801f416:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801f41a:	f001 fcc9 	bl	8020db0 <__aeabi_fsub>
 801f41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f422:	4601      	mov	r1, r0
 801f424:	f001 fdce 	bl	8020fc4 <__aeabi_fmul>
 801f428:	f24d 714e 	movw	r1, #55118	; 0xd74e
 801f42c:	f6ca 5147 	movt	r1, #44359	; 0xad47
 801f430:	4604      	mov	r4, r0
 801f432:	f001 fdc7 	bl	8020fc4 <__aeabi_fmul>
 801f436:	f247 41f6 	movw	r1, #29942	; 0x74f6
 801f43a:	f2c3 110f 	movt	r1, #12559	; 0x310f
 801f43e:	f001 fcb9 	bl	8020db4 <__addsf3>
 801f442:	4621      	mov	r1, r4
 801f444:	f001 fdbe 	bl	8020fc4 <__aeabi_fmul>
 801f448:	f24f 217c 	movw	r1, #62076	; 0xf27c
 801f44c:	f2c3 4193 	movt	r1, #13459	; 0x3493
 801f450:	f001 fcae 	bl	8020db0 <__aeabi_fsub>
 801f454:	4621      	mov	r1, r4
 801f456:	f001 fdb5 	bl	8020fc4 <__aeabi_fmul>
 801f45a:	f640 5101 	movw	r1, #3329	; 0xd01
 801f45e:	f2c3 71d0 	movt	r1, #14288	; 0x37d0
 801f462:	f001 fca7 	bl	8020db4 <__addsf3>
 801f466:	4621      	mov	r1, r4
 801f468:	f001 fdac 	bl	8020fc4 <__aeabi_fmul>
 801f46c:	f640 3161 	movw	r1, #2913	; 0xb61
 801f470:	f6c3 21b6 	movt	r1, #15030	; 0x3ab6
 801f474:	f001 fc9c 	bl	8020db0 <__aeabi_fsub>
 801f478:	4621      	mov	r1, r4
 801f47a:	f001 fda3 	bl	8020fc4 <__aeabi_fmul>
 801f47e:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 801f482:	f6c3 512a 	movt	r1, #15658	; 0x3d2a
 801f486:	f001 fc95 	bl	8020db4 <__addsf3>
 801f48a:	4621      	mov	r1, r4
 801f48c:	f001 fd9a 	bl	8020fc4 <__aeabi_fmul>
 801f490:	f649 1399 	movw	r3, #39321	; 0x9999
 801f494:	f6c3 6399 	movt	r3, #16025	; 0x3e99
 801f498:	429e      	cmp	r6, r3
 801f49a:	4680      	mov	r8, r0
 801f49c:	dda3      	ble.n	801f3e6 <__kernel_cosf+0x8e>
 801f49e:	2300      	movs	r3, #0
 801f4a0:	f6c3 7348 	movt	r3, #16200	; 0x3f48
 801f4a4:	429e      	cmp	r6, r3
 801f4a6:	dc27      	bgt.n	801f4f8 <__kernel_cosf+0x1a0>
 801f4a8:	f106 467f 	add.w	r6, r6, #4278190080	; 0xff000000
 801f4ac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801f4b0:	4631      	mov	r1, r6
 801f4b2:	f001 fc7d 	bl	8020db0 <__aeabi_fsub>
 801f4b6:	4681      	mov	r9, r0
 801f4b8:	4620      	mov	r0, r4
 801f4ba:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801f4be:	f001 fd81 	bl	8020fc4 <__aeabi_fmul>
 801f4c2:	4631      	mov	r1, r6
 801f4c4:	f001 fc74 	bl	8020db0 <__aeabi_fsub>
 801f4c8:	4641      	mov	r1, r8
 801f4ca:	4606      	mov	r6, r0
 801f4cc:	4620      	mov	r0, r4
 801f4ce:	f001 fd79 	bl	8020fc4 <__aeabi_fmul>
 801f4d2:	4639      	mov	r1, r7
 801f4d4:	4604      	mov	r4, r0
 801f4d6:	4628      	mov	r0, r5
 801f4d8:	f001 fd74 	bl	8020fc4 <__aeabi_fmul>
 801f4dc:	4601      	mov	r1, r0
 801f4de:	4620      	mov	r0, r4
 801f4e0:	f001 fc66 	bl	8020db0 <__aeabi_fsub>
 801f4e4:	4601      	mov	r1, r0
 801f4e6:	4630      	mov	r0, r6
 801f4e8:	f001 fc62 	bl	8020db0 <__aeabi_fsub>
 801f4ec:	4601      	mov	r1, r0
 801f4ee:	4648      	mov	r0, r9
 801f4f0:	f001 fc5e 	bl	8020db0 <__aeabi_fsub>
 801f4f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f4f8:	f04f 0900 	mov.w	r9, #0
 801f4fc:	2600      	movs	r6, #0
 801f4fe:	f6c3 7938 	movt	r9, #16184	; 0x3f38
 801f502:	f6c3 6690 	movt	r6, #16016	; 0x3e90
 801f506:	e7d7      	b.n	801f4b8 <__kernel_cosf+0x160>
 801f508:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801f50c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801f510 <__kernel_rem_pio2f>:
 801f510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f514:	1d15      	adds	r5, r2, #4
 801f516:	b0dd      	sub	sp, #372	; 0x174
 801f518:	1ed4      	subs	r4, r2, #3
 801f51a:	bf58      	it	pl
 801f51c:	4625      	movpl	r5, r4
 801f51e:	f64e 14e0 	movw	r4, #59872	; 0xe9e0
 801f522:	9304      	str	r3, [sp, #16]
 801f524:	3b01      	subs	r3, #1
 801f526:	9302      	str	r3, [sp, #8]
 801f528:	10ed      	asrs	r5, r5, #3
 801f52a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801f52c:	f6c0 0402 	movt	r4, #2050	; 0x802
 801f530:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801f534:	4607      	mov	r7, r0
 801f536:	9509      	str	r5, [sp, #36]	; 0x24
 801f538:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 801f53c:	43eb      	mvns	r3, r5
 801f53e:	9108      	str	r1, [sp, #32]
 801f540:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801f544:	9a02      	ldr	r2, [sp, #8]
 801f546:	9407      	str	r4, [sp, #28]
 801f548:	1916      	adds	r6, r2, r4
 801f54a:	9306      	str	r3, [sp, #24]
 801f54c:	d415      	bmi.n	801f57a <__kernel_rem_pio2f+0x6a>
 801f54e:	3601      	adds	r6, #1
 801f550:	1aad      	subs	r5, r5, r2
 801f552:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801f554:	2400      	movs	r4, #0
 801f556:	f10d 0880 	add.w	r8, sp, #128	; 0x80
 801f55a:	00b6      	lsls	r6, r6, #2
 801f55c:	eb03 0985 	add.w	r9, r3, r5, lsl #2
 801f560:	2000      	movs	r0, #0
 801f562:	2d00      	cmp	r5, #0
 801f564:	db03      	blt.n	801f56e <__kernel_rem_pio2f+0x5e>
 801f566:	f859 0004 	ldr.w	r0, [r9, r4]
 801f56a:	f001 fcd7 	bl	8020f1c <__aeabi_i2f>
 801f56e:	f848 0004 	str.w	r0, [r8, r4]
 801f572:	3404      	adds	r4, #4
 801f574:	3501      	adds	r5, #1
 801f576:	42b4      	cmp	r4, r6
 801f578:	d1f2      	bne.n	801f560 <__kernel_rem_pio2f+0x50>
 801f57a:	9c07      	ldr	r4, [sp, #28]
 801f57c:	2c00      	cmp	r4, #0
 801f57e:	db25      	blt.n	801f5cc <__kernel_rem_pio2f+0xbc>
 801f580:	9a07      	ldr	r2, [sp, #28]
 801f582:	ab48      	add	r3, sp, #288	; 0x120
 801f584:	f8dd a010 	ldr.w	sl, [sp, #16]
 801f588:	f50d 798e 	add.w	r9, sp, #284	; 0x11c
 801f58c:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
 801f590:	ea4f 088a 	mov.w	r8, sl, lsl #2
 801f594:	9c02      	ldr	r4, [sp, #8]
 801f596:	2500      	movs	r5, #0
 801f598:	2c00      	cmp	r4, #0
 801f59a:	db11      	blt.n	801f5c0 <__kernel_rem_pio2f+0xb0>
 801f59c:	a820      	add	r0, sp, #128	; 0x80
 801f59e:	2400      	movs	r4, #0
 801f5a0:	eb00 068a 	add.w	r6, r0, sl, lsl #2
 801f5a4:	2500      	movs	r5, #0
 801f5a6:	5938      	ldr	r0, [r7, r4]
 801f5a8:	3404      	adds	r4, #4
 801f5aa:	f856 1d04 	ldr.w	r1, [r6, #-4]!
 801f5ae:	f001 fd09 	bl	8020fc4 <__aeabi_fmul>
 801f5b2:	4601      	mov	r1, r0
 801f5b4:	4628      	mov	r0, r5
 801f5b6:	f001 fbfd 	bl	8020db4 <__addsf3>
 801f5ba:	4544      	cmp	r4, r8
 801f5bc:	4605      	mov	r5, r0
 801f5be:	d1f2      	bne.n	801f5a6 <__kernel_rem_pio2f+0x96>
 801f5c0:	f849 5f04 	str.w	r5, [r9, #4]!
 801f5c4:	45d9      	cmp	r9, fp
 801f5c6:	f10a 0a01 	add.w	sl, sl, #1
 801f5ca:	d1e3      	bne.n	801f594 <__kernel_rem_pio2f+0x84>
 801f5cc:	9a07      	ldr	r2, [sp, #28]
 801f5ce:	ab0c      	add	r3, sp, #48	; 0x30
 801f5d0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801f5d4:	3a01      	subs	r2, #1
 801f5d6:	9300      	str	r3, [sp, #0]
 801f5d8:	46c2      	mov	sl, r8
 801f5da:	920a      	str	r2, [sp, #40]	; 0x28
 801f5dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801f5e0:	940b      	str	r4, [sp, #44]	; 0x2c
 801f5e2:	ea4f 028a 	mov.w	r2, sl, lsl #2
 801f5e6:	ac5c      	add	r4, sp, #368	; 0x170
 801f5e8:	18a3      	adds	r3, r4, r2
 801f5ea:	f1ba 0f00 	cmp.w	sl, #0
 801f5ee:	9201      	str	r2, [sp, #4]
 801f5f0:	f853 4c50 	ldr.w	r4, [r3, #-80]
 801f5f4:	dd22      	ble.n	801f63c <__kernel_rem_pio2f+0x12c>
 801f5f6:	f50d 7990 	add.w	r9, sp, #288	; 0x120
 801f5fa:	ae0b      	add	r6, sp, #44	; 0x2c
 801f5fc:	eb09 0502 	add.w	r5, r9, r2
 801f600:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 801f604:	4620      	mov	r0, r4
 801f606:	f001 fcdd 	bl	8020fc4 <__aeabi_fmul>
 801f60a:	f001 fea1 	bl	8021350 <__aeabi_f2iz>
 801f60e:	f001 fc85 	bl	8020f1c <__aeabi_i2f>
 801f612:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 801f616:	4680      	mov	r8, r0
 801f618:	f001 fcd4 	bl	8020fc4 <__aeabi_fmul>
 801f61c:	4601      	mov	r1, r0
 801f61e:	4620      	mov	r0, r4
 801f620:	f001 fbc6 	bl	8020db0 <__aeabi_fsub>
 801f624:	f001 fe94 	bl	8021350 <__aeabi_f2iz>
 801f628:	4641      	mov	r1, r8
 801f62a:	f846 0f04 	str.w	r0, [r6, #4]!
 801f62e:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 801f632:	f001 fbbf 	bl	8020db4 <__addsf3>
 801f636:	454d      	cmp	r5, r9
 801f638:	4604      	mov	r4, r0
 801f63a:	d1e1      	bne.n	801f600 <__kernel_rem_pio2f+0xf0>
 801f63c:	9906      	ldr	r1, [sp, #24]
 801f63e:	4620      	mov	r0, r4
 801f640:	f000 fea8 	bl	8020394 <scalbnf>
 801f644:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 801f648:	4604      	mov	r4, r0
 801f64a:	f001 fcbb 	bl	8020fc4 <__aeabi_fmul>
 801f64e:	f000 fe17 	bl	8020280 <floorf>
 801f652:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 801f656:	f001 fcb5 	bl	8020fc4 <__aeabi_fmul>
 801f65a:	4601      	mov	r1, r0
 801f65c:	4620      	mov	r0, r4
 801f65e:	f001 fba7 	bl	8020db0 <__aeabi_fsub>
 801f662:	4604      	mov	r4, r0
 801f664:	f001 fe74 	bl	8021350 <__aeabi_f2iz>
 801f668:	4606      	mov	r6, r0
 801f66a:	f001 fc57 	bl	8020f1c <__aeabi_i2f>
 801f66e:	4601      	mov	r1, r0
 801f670:	4620      	mov	r0, r4
 801f672:	f001 fb9d 	bl	8020db0 <__aeabi_fsub>
 801f676:	9a06      	ldr	r2, [sp, #24]
 801f678:	2a00      	cmp	r2, #0
 801f67a:	4605      	mov	r5, r0
 801f67c:	f340 8106 	ble.w	801f88c <__kernel_rem_pio2f+0x37c>
 801f680:	f10a 33ff 	add.w	r3, sl, #4294967295
 801f684:	a80c      	add	r0, sp, #48	; 0x30
 801f686:	f1c2 0108 	rsb	r1, r2, #8
 801f68a:	f1c2 0407 	rsb	r4, r2, #7
 801f68e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801f692:	fa42 f001 	asr.w	r0, r2, r1
 801f696:	1836      	adds	r6, r6, r0
 801f698:	fa00 f101 	lsl.w	r1, r0, r1
 801f69c:	1a52      	subs	r2, r2, r1
 801f69e:	a90c      	add	r1, sp, #48	; 0x30
 801f6a0:	fa42 fb04 	asr.w	fp, r2, r4
 801f6a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801f6a8:	f1bb 0f00 	cmp.w	fp, #0
 801f6ac:	dd30      	ble.n	801f710 <__kernel_rem_pio2f+0x200>
 801f6ae:	3601      	adds	r6, #1
 801f6b0:	2400      	movs	r4, #0
 801f6b2:	f1ba 0f00 	cmp.w	sl, #0
 801f6b6:	dd17      	ble.n	801f6e8 <__kernel_rem_pio2f+0x1d8>
 801f6b8:	9c01      	ldr	r4, [sp, #4]
 801f6ba:	ab0c      	add	r3, sp, #48	; 0x30
 801f6bc:	1919      	adds	r1, r3, r4
 801f6be:	2400      	movs	r4, #0
 801f6c0:	e007      	b.n	801f6d2 <__kernel_rem_pio2f+0x1c2>
 801f6c2:	b122      	cbz	r2, 801f6ce <__kernel_rem_pio2f+0x1be>
 801f6c4:	2401      	movs	r4, #1
 801f6c6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f6ca:	f843 2c04 	str.w	r2, [r3, #-4]
 801f6ce:	428b      	cmp	r3, r1
 801f6d0:	d00a      	beq.n	801f6e8 <__kernel_rem_pio2f+0x1d8>
 801f6d2:	f853 2b04 	ldr.w	r2, [r3], #4
 801f6d6:	2c00      	cmp	r4, #0
 801f6d8:	d0f3      	beq.n	801f6c2 <__kernel_rem_pio2f+0x1b2>
 801f6da:	2401      	movs	r4, #1
 801f6dc:	428b      	cmp	r3, r1
 801f6de:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801f6e2:	f843 2c04 	str.w	r2, [r3, #-4]
 801f6e6:	d1f4      	bne.n	801f6d2 <__kernel_rem_pio2f+0x1c2>
 801f6e8:	9a06      	ldr	r2, [sp, #24]
 801f6ea:	2a00      	cmp	r2, #0
 801f6ec:	dd0d      	ble.n	801f70a <__kernel_rem_pio2f+0x1fa>
 801f6ee:	2a01      	cmp	r2, #1
 801f6f0:	f000 80d5 	beq.w	801f89e <__kernel_rem_pio2f+0x38e>
 801f6f4:	2a02      	cmp	r2, #2
 801f6f6:	d108      	bne.n	801f70a <__kernel_rem_pio2f+0x1fa>
 801f6f8:	f10a 33ff 	add.w	r3, sl, #4294967295
 801f6fc:	a90c      	add	r1, sp, #48	; 0x30
 801f6fe:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 801f702:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801f706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801f70a:	f1bb 0f02 	cmp.w	fp, #2
 801f70e:	d06e      	beq.n	801f7ee <__kernel_rem_pio2f+0x2de>
 801f710:	4628      	mov	r0, r5
 801f712:	2100      	movs	r1, #0
 801f714:	f001 fdea 	bl	80212ec <__aeabi_fcmpeq>
 801f718:	2800      	cmp	r0, #0
 801f71a:	f000 8081 	beq.w	801f820 <__kernel_rem_pio2f+0x310>
 801f71e:	9a07      	ldr	r2, [sp, #28]
 801f720:	f10a 34ff 	add.w	r4, sl, #4294967295
 801f724:	42a2      	cmp	r2, r4
 801f726:	dc0f      	bgt.n	801f748 <__kernel_rem_pio2f+0x238>
 801f728:	9a01      	ldr	r2, [sp, #4]
 801f72a:	a80c      	add	r0, sp, #48	; 0x30
 801f72c:	1883      	adds	r3, r0, r2
 801f72e:	9a07      	ldr	r2, [sp, #28]
 801f730:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801f734:	2200      	movs	r2, #0
 801f736:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f73a:	4283      	cmp	r3, r0
 801f73c:	ea42 0201 	orr.w	r2, r2, r1
 801f740:	d1f9      	bne.n	801f736 <__kernel_rem_pio2f+0x226>
 801f742:	2a00      	cmp	r2, #0
 801f744:	f040 80c3 	bne.w	801f8ce <__kernel_rem_pio2f+0x3be>
 801f748:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f74a:	a80c      	add	r0, sp, #48	; 0x30
 801f74c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 801f750:	2b00      	cmp	r3, #0
 801f752:	f040 80ba 	bne.w	801f8ca <__kernel_rem_pio2f+0x3ba>
 801f756:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f758:	2301      	movs	r3, #1
 801f75a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801f75e:	3301      	adds	r3, #1
 801f760:	2900      	cmp	r1, #0
 801f762:	d0fa      	beq.n	801f75a <__kernel_rem_pio2f+0x24a>
 801f764:	4453      	add	r3, sl
 801f766:	f10a 0901 	add.w	r9, sl, #1
 801f76a:	4599      	cmp	r9, r3
 801f76c:	9303      	str	r3, [sp, #12]
 801f76e:	dc3b      	bgt.n	801f7e8 <__kernel_rem_pio2f+0x2d8>
 801f770:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f772:	9a02      	ldr	r2, [sp, #8]
 801f774:	44a2      	add	sl, r4
 801f776:	9c67      	ldr	r4, [sp, #412]	; 0x19c
 801f778:	eb02 0309 	add.w	r3, r2, r9
 801f77c:	aa20      	add	r2, sp, #128	; 0x80
 801f77e:	eb04 0b8a 	add.w	fp, r4, sl, lsl #2
 801f782:	9c04      	ldr	r4, [sp, #16]
 801f784:	3b01      	subs	r3, #1
 801f786:	9205      	str	r2, [sp, #20]
 801f788:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 801f78c:	ea4f 0884 	mov.w	r8, r4, lsl #2
 801f790:	9b01      	ldr	r3, [sp, #4]
 801f792:	aa48      	add	r2, sp, #288	; 0x120
 801f794:	18d2      	adds	r2, r2, r3
 801f796:	9201      	str	r2, [sp, #4]
 801f798:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 801f79c:	2500      	movs	r5, #0
 801f79e:	f001 fbbd 	bl	8020f1c <__aeabi_i2f>
 801f7a2:	9a02      	ldr	r2, [sp, #8]
 801f7a4:	2a00      	cmp	r2, #0
 801f7a6:	f84a 0f04 	str.w	r0, [sl, #4]!
 801f7aa:	db14      	blt.n	801f7d6 <__kernel_rem_pio2f+0x2c6>
 801f7ac:	9b04      	ldr	r3, [sp, #16]
 801f7ae:	2500      	movs	r5, #0
 801f7b0:	9a05      	ldr	r2, [sp, #20]
 801f7b2:	2400      	movs	r4, #0
 801f7b4:	eb09 0603 	add.w	r6, r9, r3
 801f7b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f7bc:	5938      	ldr	r0, [r7, r4]
 801f7be:	3404      	adds	r4, #4
 801f7c0:	f856 1d04 	ldr.w	r1, [r6, #-4]!
 801f7c4:	f001 fbfe 	bl	8020fc4 <__aeabi_fmul>
 801f7c8:	4601      	mov	r1, r0
 801f7ca:	4628      	mov	r0, r5
 801f7cc:	f001 faf2 	bl	8020db4 <__addsf3>
 801f7d0:	4544      	cmp	r4, r8
 801f7d2:	4605      	mov	r5, r0
 801f7d4:	d1f2      	bne.n	801f7bc <__kernel_rem_pio2f+0x2ac>
 801f7d6:	9c03      	ldr	r4, [sp, #12]
 801f7d8:	f109 0901 	add.w	r9, r9, #1
 801f7dc:	9b01      	ldr	r3, [sp, #4]
 801f7de:	45a1      	cmp	r9, r4
 801f7e0:	f843 5f04 	str.w	r5, [r3, #4]!
 801f7e4:	9301      	str	r3, [sp, #4]
 801f7e6:	ddd7      	ble.n	801f798 <__kernel_rem_pio2f+0x288>
 801f7e8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801f7ec:	e6f9      	b.n	801f5e2 <__kernel_rem_pio2f+0xd2>
 801f7ee:	4629      	mov	r1, r5
 801f7f0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801f7f4:	f001 fadc 	bl	8020db0 <__aeabi_fsub>
 801f7f8:	4605      	mov	r5, r0
 801f7fa:	2c00      	cmp	r4, #0
 801f7fc:	d088      	beq.n	801f710 <__kernel_rem_pio2f+0x200>
 801f7fe:	9906      	ldr	r1, [sp, #24]
 801f800:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801f804:	f000 fdc6 	bl	8020394 <scalbnf>
 801f808:	4601      	mov	r1, r0
 801f80a:	4628      	mov	r0, r5
 801f80c:	f001 fad0 	bl	8020db0 <__aeabi_fsub>
 801f810:	2100      	movs	r1, #0
 801f812:	4605      	mov	r5, r0
 801f814:	4628      	mov	r0, r5
 801f816:	f001 fd69 	bl	80212ec <__aeabi_fcmpeq>
 801f81a:	2800      	cmp	r0, #0
 801f81c:	f47f af7f 	bne.w	801f71e <__kernel_rem_pio2f+0x20e>
 801f820:	9602      	str	r6, [sp, #8]
 801f822:	46d0      	mov	r8, sl
 801f824:	f10a 34ff 	add.w	r4, sl, #4294967295
 801f828:	2800      	cmp	r0, #0
 801f82a:	d151      	bne.n	801f8d0 <__kernel_rem_pio2f+0x3c0>
 801f82c:	9b06      	ldr	r3, [sp, #24]
 801f82e:	4628      	mov	r0, r5
 801f830:	4259      	negs	r1, r3
 801f832:	f000 fdaf 	bl	8020394 <scalbnf>
 801f836:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 801f83a:	4604      	mov	r4, r0
 801f83c:	f001 fd74 	bl	8021328 <__aeabi_fcmpge>
 801f840:	2800      	cmp	r0, #0
 801f842:	f000 8171 	beq.w	801fb28 <__kernel_rem_pio2f+0x618>
 801f846:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 801f84a:	4620      	mov	r0, r4
 801f84c:	f001 fbba 	bl	8020fc4 <__aeabi_fmul>
 801f850:	9a06      	ldr	r2, [sp, #24]
 801f852:	f10a 0801 	add.w	r8, sl, #1
 801f856:	3208      	adds	r2, #8
 801f858:	9206      	str	r2, [sp, #24]
 801f85a:	f001 fd79 	bl	8021350 <__aeabi_f2iz>
 801f85e:	f001 fb5d 	bl	8020f1c <__aeabi_i2f>
 801f862:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 801f866:	4605      	mov	r5, r0
 801f868:	f001 fbac 	bl	8020fc4 <__aeabi_fmul>
 801f86c:	4601      	mov	r1, r0
 801f86e:	4620      	mov	r0, r4
 801f870:	f001 fa9e 	bl	8020db0 <__aeabi_fsub>
 801f874:	ac0c      	add	r4, sp, #48	; 0x30
 801f876:	f001 fd6b 	bl	8021350 <__aeabi_f2iz>
 801f87a:	ab0c      	add	r3, sp, #48	; 0x30
 801f87c:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801f880:	4628      	mov	r0, r5
 801f882:	f001 fd65 	bl	8021350 <__aeabi_f2iz>
 801f886:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
 801f88a:	e034      	b.n	801f8f6 <__kernel_rem_pio2f+0x3e6>
 801f88c:	d111      	bne.n	801f8b2 <__kernel_rem_pio2f+0x3a2>
 801f88e:	f10a 33ff 	add.w	r3, sl, #4294967295
 801f892:	aa0c      	add	r2, sp, #48	; 0x30
 801f894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f898:	ea4f 2b23 	mov.w	fp, r3, asr #8
 801f89c:	e704      	b.n	801f6a8 <__kernel_rem_pio2f+0x198>
 801f89e:	f10a 33ff 	add.w	r3, sl, #4294967295
 801f8a2:	a80c      	add	r0, sp, #48	; 0x30
 801f8a4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801f8a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801f8ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801f8b0:	e72b      	b.n	801f70a <__kernel_rem_pio2f+0x1fa>
 801f8b2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801f8b6:	f04f 0b00 	mov.w	fp, #0
 801f8ba:	f001 fd35 	bl	8021328 <__aeabi_fcmpge>
 801f8be:	2800      	cmp	r0, #0
 801f8c0:	f43f af26 	beq.w	801f710 <__kernel_rem_pio2f+0x200>
 801f8c4:	f04f 0b02 	mov.w	fp, #2
 801f8c8:	e6f1      	b.n	801f6ae <__kernel_rem_pio2f+0x19e>
 801f8ca:	2301      	movs	r3, #1
 801f8cc:	e74a      	b.n	801f764 <__kernel_rem_pio2f+0x254>
 801f8ce:	9602      	str	r6, [sp, #8]
 801f8d0:	a80c      	add	r0, sp, #48	; 0x30
 801f8d2:	9a06      	ldr	r2, [sp, #24]
 801f8d4:	46a0      	mov	r8, r4
 801f8d6:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 801f8da:	3a08      	subs	r2, #8
 801f8dc:	9206      	str	r2, [sp, #24]
 801f8de:	b953      	cbnz	r3, 801f8f6 <__kernel_rem_pio2f+0x3e6>
 801f8e0:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 801f8e4:	46a0      	mov	r8, r4
 801f8e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f8ea:	f108 38ff 	add.w	r8, r8, #4294967295
 801f8ee:	3a08      	subs	r2, #8
 801f8f0:	2900      	cmp	r1, #0
 801f8f2:	d0f8      	beq.n	801f8e6 <__kernel_rem_pio2f+0x3d6>
 801f8f4:	9206      	str	r2, [sp, #24]
 801f8f6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801f8fa:	9906      	ldr	r1, [sp, #24]
 801f8fc:	f000 fd4a 	bl	8020394 <scalbnf>
 801f900:	f1b8 0f00 	cmp.w	r8, #0
 801f904:	4605      	mov	r5, r0
 801f906:	db4c      	blt.n	801f9a2 <__kernel_rem_pio2f+0x492>
 801f908:	f108 0201 	add.w	r2, r8, #1
 801f90c:	ab0c      	add	r3, sp, #48	; 0x30
 801f90e:	a848      	add	r0, sp, #288	; 0x120
 801f910:	9201      	str	r2, [sp, #4]
 801f912:	0096      	lsls	r6, r2, #2
 801f914:	199c      	adds	r4, r3, r6
 801f916:	1986      	adds	r6, r0, r6
 801f918:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 801f91c:	f001 fafe 	bl	8020f1c <__aeabi_i2f>
 801f920:	4629      	mov	r1, r5
 801f922:	f001 fb4f 	bl	8020fc4 <__aeabi_fmul>
 801f926:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 801f92a:	f846 0d04 	str.w	r0, [r6, #-4]!
 801f92e:	4628      	mov	r0, r5
 801f930:	f001 fb48 	bl	8020fc4 <__aeabi_fmul>
 801f934:	9a00      	ldr	r2, [sp, #0]
 801f936:	4294      	cmp	r4, r2
 801f938:	4605      	mov	r5, r0
 801f93a:	d1ed      	bne.n	801f918 <__kernel_rem_pio2f+0x408>
 801f93c:	ab48      	add	r3, sp, #288	; 0x120
 801f93e:	f8cd 800c 	str.w	r8, [sp, #12]
 801f942:	eb03 0988 	add.w	r9, r3, r8, lsl #2
 801f946:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 801fb38 <__kernel_rem_pio2f+0x628>
 801f94a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801f94e:	2700      	movs	r7, #0
 801f950:	f1b8 0f00 	cmp.w	r8, #0
 801f954:	f2c0 80da 	blt.w	801fb0c <__kernel_rem_pio2f+0x5fc>
 801f958:	2f00      	cmp	r7, #0
 801f95a:	f2c0 80d7 	blt.w	801fb0c <__kernel_rem_pio2f+0x5fc>
 801f95e:	2400      	movs	r4, #0
 801f960:	2600      	movs	r6, #0
 801f962:	4625      	mov	r5, r4
 801f964:	e001      	b.n	801f96a <__kernel_rem_pio2f+0x45a>
 801f966:	42bd      	cmp	r5, r7
 801f968:	dc0e      	bgt.n	801f988 <__kernel_rem_pio2f+0x478>
 801f96a:	f859 1004 	ldr.w	r1, [r9, r4]
 801f96e:	3501      	adds	r5, #1
 801f970:	f85a 0004 	ldr.w	r0, [sl, r4]
 801f974:	3404      	adds	r4, #4
 801f976:	f001 fb25 	bl	8020fc4 <__aeabi_fmul>
 801f97a:	4601      	mov	r1, r0
 801f97c:	4630      	mov	r0, r6
 801f97e:	f001 fa19 	bl	8020db4 <__addsf3>
 801f982:	45a8      	cmp	r8, r5
 801f984:	4606      	mov	r6, r0
 801f986:	daee      	bge.n	801f966 <__kernel_rem_pio2f+0x456>
 801f988:	ac5c      	add	r4, sp, #368	; 0x170
 801f98a:	9a01      	ldr	r2, [sp, #4]
 801f98c:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801f990:	3701      	adds	r7, #1
 801f992:	42ba      	cmp	r2, r7
 801f994:	f1a9 0904 	sub.w	r9, r9, #4
 801f998:	f843 6ca0 	str.w	r6, [r3, #-160]
 801f99c:	d1d8      	bne.n	801f950 <__kernel_rem_pio2f+0x440>
 801f99e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801f9a2:	9c66      	ldr	r4, [sp, #408]	; 0x198
 801f9a4:	2c03      	cmp	r4, #3
 801f9a6:	d814      	bhi.n	801f9d2 <__kernel_rem_pio2f+0x4c2>
 801f9a8:	e8df f004 	tbb	[pc, r4]
 801f9ac:	19686898 	.word	0x19686898
 801f9b0:	2000      	movs	r0, #0
 801f9b2:	f1bb 0f00 	cmp.w	fp, #0
 801f9b6:	d059      	beq.n	801fa6c <__kernel_rem_pio2f+0x55c>
 801f9b8:	9b08      	ldr	r3, [sp, #32]
 801f9ba:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801f9be:	9c08      	ldr	r4, [sp, #32]
 801f9c0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801f9c2:	6098      	str	r0, [r3, #8]
 801f9c4:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801f9c6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801f9ca:	6022      	str	r2, [r4, #0]
 801f9cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801f9d0:	6063      	str	r3, [r4, #4]
 801f9d2:	9a02      	ldr	r2, [sp, #8]
 801f9d4:	f002 0007 	and.w	r0, r2, #7
 801f9d8:	b05d      	add	sp, #372	; 0x174
 801f9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9de:	f1b8 0f00 	cmp.w	r8, #0
 801f9e2:	bfc4      	itt	gt
 801f9e4:	ad34      	addgt	r5, sp, #208	; 0xd0
 801f9e6:	eb05 0488 	addgt.w	r4, r5, r8, lsl #2
 801f9ea:	dde1      	ble.n	801f9b0 <__kernel_rem_pio2f+0x4a0>
 801f9ec:	f854 9c04 	ldr.w	r9, [r4, #-4]
 801f9f0:	f854 7904 	ldr.w	r7, [r4], #-4
 801f9f4:	4648      	mov	r0, r9
 801f9f6:	4639      	mov	r1, r7
 801f9f8:	f001 f9dc 	bl	8020db4 <__addsf3>
 801f9fc:	4606      	mov	r6, r0
 801f9fe:	4648      	mov	r0, r9
 801fa00:	4631      	mov	r1, r6
 801fa02:	f001 f9d5 	bl	8020db0 <__aeabi_fsub>
 801fa06:	4601      	mov	r1, r0
 801fa08:	4638      	mov	r0, r7
 801fa0a:	f001 f9d3 	bl	8020db4 <__addsf3>
 801fa0e:	42ac      	cmp	r4, r5
 801fa10:	6026      	str	r6, [r4, #0]
 801fa12:	6060      	str	r0, [r4, #4]
 801fa14:	d1ea      	bne.n	801f9ec <__kernel_rem_pio2f+0x4dc>
 801fa16:	f1b8 0f01 	cmp.w	r8, #1
 801fa1a:	ddc9      	ble.n	801f9b0 <__kernel_rem_pio2f+0x4a0>
 801fa1c:	f108 34ff 	add.w	r4, r8, #4294967295
 801fa20:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 801fa24:	f854 9904 	ldr.w	r9, [r4], #-4
 801fa28:	68a7      	ldr	r7, [r4, #8]
 801fa2a:	4648      	mov	r0, r9
 801fa2c:	4639      	mov	r1, r7
 801fa2e:	f001 f9c1 	bl	8020db4 <__addsf3>
 801fa32:	4606      	mov	r6, r0
 801fa34:	4648      	mov	r0, r9
 801fa36:	4631      	mov	r1, r6
 801fa38:	f001 f9ba 	bl	8020db0 <__aeabi_fsub>
 801fa3c:	4601      	mov	r1, r0
 801fa3e:	4638      	mov	r0, r7
 801fa40:	f001 f9b8 	bl	8020db4 <__addsf3>
 801fa44:	42ac      	cmp	r4, r5
 801fa46:	6066      	str	r6, [r4, #4]
 801fa48:	60a0      	str	r0, [r4, #8]
 801fa4a:	d1eb      	bne.n	801fa24 <__kernel_rem_pio2f+0x514>
 801fa4c:	f108 0801 	add.w	r8, r8, #1
 801fa50:	f104 0508 	add.w	r5, r4, #8
 801fa54:	2000      	movs	r0, #0
 801fa56:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 801fa5a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 801fa5e:	f001 f9a9 	bl	8020db4 <__addsf3>
 801fa62:	42ac      	cmp	r4, r5
 801fa64:	d1f9      	bne.n	801fa5a <__kernel_rem_pio2f+0x54a>
 801fa66:	f1bb 0f00 	cmp.w	fp, #0
 801fa6a:	d1a5      	bne.n	801f9b8 <__kernel_rem_pio2f+0x4a8>
 801fa6c:	9b08      	ldr	r3, [sp, #32]
 801fa6e:	9c08      	ldr	r4, [sp, #32]
 801fa70:	6098      	str	r0, [r3, #8]
 801fa72:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801fa74:	6023      	str	r3, [r4, #0]
 801fa76:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801fa78:	6063      	str	r3, [r4, #4]
 801fa7a:	e7aa      	b.n	801f9d2 <__kernel_rem_pio2f+0x4c2>
 801fa7c:	2000      	movs	r0, #0
 801fa7e:	f1b8 0f00 	cmp.w	r8, #0
 801fa82:	db0b      	blt.n	801fa9c <__kernel_rem_pio2f+0x58c>
 801fa84:	f108 0401 	add.w	r4, r8, #1
 801fa88:	ad34      	add	r5, sp, #208	; 0xd0
 801fa8a:	2000      	movs	r0, #0
 801fa8c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 801fa90:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 801fa94:	f001 f98e 	bl	8020db4 <__addsf3>
 801fa98:	42ac      	cmp	r4, r5
 801fa9a:	d1f9      	bne.n	801fa90 <__kernel_rem_pio2f+0x580>
 801fa9c:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 801faa0:	f1bb 0f00 	cmp.w	fp, #0
 801faa4:	d100      	bne.n	801faa8 <__kernel_rem_pio2f+0x598>
 801faa6:	4603      	mov	r3, r0
 801faa8:	9c08      	ldr	r4, [sp, #32]
 801faaa:	4601      	mov	r1, r0
 801faac:	9834      	ldr	r0, [sp, #208]	; 0xd0
 801faae:	6023      	str	r3, [r4, #0]
 801fab0:	f001 f97e 	bl	8020db0 <__aeabi_fsub>
 801fab4:	f1b8 0f00 	cmp.w	r8, #0
 801fab8:	dd08      	ble.n	801facc <__kernel_rem_pio2f+0x5bc>
 801faba:	ac34      	add	r4, sp, #208	; 0xd0
 801fabc:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 801fac0:	f854 1f04 	ldr.w	r1, [r4, #4]!
 801fac4:	f001 f976 	bl	8020db4 <__addsf3>
 801fac8:	4544      	cmp	r4, r8
 801faca:	d1f9      	bne.n	801fac0 <__kernel_rem_pio2f+0x5b0>
 801facc:	f1bb 0f00 	cmp.w	fp, #0
 801fad0:	d001      	beq.n	801fad6 <__kernel_rem_pio2f+0x5c6>
 801fad2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801fad6:	9a08      	ldr	r2, [sp, #32]
 801fad8:	6050      	str	r0, [r2, #4]
 801fada:	e77a      	b.n	801f9d2 <__kernel_rem_pio2f+0x4c2>
 801fadc:	2000      	movs	r0, #0
 801fade:	f1b8 0f00 	cmp.w	r8, #0
 801fae2:	db0b      	blt.n	801fafc <__kernel_rem_pio2f+0x5ec>
 801fae4:	f108 0401 	add.w	r4, r8, #1
 801fae8:	ad34      	add	r5, sp, #208	; 0xd0
 801faea:	2000      	movs	r0, #0
 801faec:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 801faf0:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 801faf4:	f001 f95e 	bl	8020db4 <__addsf3>
 801faf8:	42ac      	cmp	r4, r5
 801fafa:	d1f9      	bne.n	801faf0 <__kernel_rem_pio2f+0x5e0>
 801fafc:	f1bb 0f00 	cmp.w	fp, #0
 801fb00:	d001      	beq.n	801fb06 <__kernel_rem_pio2f+0x5f6>
 801fb02:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801fb06:	9a08      	ldr	r2, [sp, #32]
 801fb08:	6010      	str	r0, [r2, #0]
 801fb0a:	e762      	b.n	801f9d2 <__kernel_rem_pio2f+0x4c2>
 801fb0c:	ac5c      	add	r4, sp, #368	; 0x170
 801fb0e:	9a01      	ldr	r2, [sp, #4]
 801fb10:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801fb14:	3701      	adds	r7, #1
 801fb16:	2600      	movs	r6, #0
 801fb18:	42ba      	cmp	r2, r7
 801fb1a:	f1a9 0904 	sub.w	r9, r9, #4
 801fb1e:	f843 6ca0 	str.w	r6, [r3, #-160]
 801fb22:	f47f af15 	bne.w	801f950 <__kernel_rem_pio2f+0x440>
 801fb26:	e73a      	b.n	801f99e <__kernel_rem_pio2f+0x48e>
 801fb28:	4620      	mov	r0, r4
 801fb2a:	f001 fc11 	bl	8021350 <__aeabi_f2iz>
 801fb2e:	a90c      	add	r1, sp, #48	; 0x30
 801fb30:	f841 002a 	str.w	r0, [r1, sl, lsl #2]
 801fb34:	e6df      	b.n	801f8f6 <__kernel_rem_pio2f+0x3e6>
 801fb36:	bf00      	nop
 801fb38:	0802e9ec 	.word	0x0802e9ec

0801fb3c <__kernel_sinf>:
 801fb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fb40:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801fb44:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801fb48:	4604      	mov	r4, r0
 801fb4a:	460d      	mov	r5, r1
 801fb4c:	4690      	mov	r8, r2
 801fb4e:	da03      	bge.n	801fb58 <__kernel_sinf+0x1c>
 801fb50:	f001 fbfe 	bl	8021350 <__aeabi_f2iz>
 801fb54:	2800      	cmp	r0, #0
 801fb56:	d059      	beq.n	801fc0c <__kernel_sinf+0xd0>
 801fb58:	4621      	mov	r1, r4
 801fb5a:	4620      	mov	r0, r4
 801fb5c:	f001 fa32 	bl	8020fc4 <__aeabi_fmul>
 801fb60:	4621      	mov	r1, r4
 801fb62:	4606      	mov	r6, r0
 801fb64:	f001 fa2e 	bl	8020fc4 <__aeabi_fmul>
 801fb68:	f64c 11d3 	movw	r1, #51667	; 0xc9d3
 801fb6c:	f6c2 712e 	movt	r1, #12078	; 0x2f2e
 801fb70:	4607      	mov	r7, r0
 801fb72:	4630      	mov	r0, r6
 801fb74:	f001 fa26 	bl	8020fc4 <__aeabi_fmul>
 801fb78:	f642 7134 	movw	r1, #12084	; 0x2f34
 801fb7c:	f2c3 21d7 	movt	r1, #13015	; 0x32d7
 801fb80:	f001 f916 	bl	8020db0 <__aeabi_fsub>
 801fb84:	4631      	mov	r1, r6
 801fb86:	f001 fa1d 	bl	8020fc4 <__aeabi_fmul>
 801fb8a:	f64e 711b 	movw	r1, #61211	; 0xef1b
 801fb8e:	f2c3 6138 	movt	r1, #13880	; 0x3638
 801fb92:	f001 f90f 	bl	8020db4 <__addsf3>
 801fb96:	4631      	mov	r1, r6
 801fb98:	f001 fa14 	bl	8020fc4 <__aeabi_fmul>
 801fb9c:	f640 5101 	movw	r1, #3329	; 0xd01
 801fba0:	f6c3 1150 	movt	r1, #14672	; 0x3950
 801fba4:	f001 f904 	bl	8020db0 <__aeabi_fsub>
 801fba8:	4631      	mov	r1, r6
 801fbaa:	f001 fa0b 	bl	8020fc4 <__aeabi_fmul>
 801fbae:	f648 0189 	movw	r1, #34953	; 0x8889
 801fbb2:	f6c3 4108 	movt	r1, #15368	; 0x3c08
 801fbb6:	f001 f8fd 	bl	8020db4 <__addsf3>
 801fbba:	4681      	mov	r9, r0
 801fbbc:	f1b8 0f00 	cmp.w	r8, #0
 801fbc0:	d027      	beq.n	801fc12 <__kernel_sinf+0xd6>
 801fbc2:	4628      	mov	r0, r5
 801fbc4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801fbc8:	f001 f9fc 	bl	8020fc4 <__aeabi_fmul>
 801fbcc:	4649      	mov	r1, r9
 801fbce:	4680      	mov	r8, r0
 801fbd0:	4638      	mov	r0, r7
 801fbd2:	f001 f9f7 	bl	8020fc4 <__aeabi_fmul>
 801fbd6:	4601      	mov	r1, r0
 801fbd8:	4640      	mov	r0, r8
 801fbda:	f001 f8e9 	bl	8020db0 <__aeabi_fsub>
 801fbde:	4631      	mov	r1, r6
 801fbe0:	f001 f9f0 	bl	8020fc4 <__aeabi_fmul>
 801fbe4:	4629      	mov	r1, r5
 801fbe6:	f001 f8e3 	bl	8020db0 <__aeabi_fsub>
 801fbea:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 801fbee:	f6c3 612a 	movt	r1, #15914	; 0x3e2a
 801fbf2:	4605      	mov	r5, r0
 801fbf4:	4638      	mov	r0, r7
 801fbf6:	f001 f9e5 	bl	8020fc4 <__aeabi_fmul>
 801fbfa:	4601      	mov	r1, r0
 801fbfc:	4628      	mov	r0, r5
 801fbfe:	f001 f8d9 	bl	8020db4 <__addsf3>
 801fc02:	4601      	mov	r1, r0
 801fc04:	4620      	mov	r0, r4
 801fc06:	f001 f8d3 	bl	8020db0 <__aeabi_fsub>
 801fc0a:	4604      	mov	r4, r0
 801fc0c:	4620      	mov	r0, r4
 801fc0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fc12:	4601      	mov	r1, r0
 801fc14:	4630      	mov	r0, r6
 801fc16:	f001 f9d5 	bl	8020fc4 <__aeabi_fmul>
 801fc1a:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 801fc1e:	f6c3 612a 	movt	r1, #15914	; 0x3e2a
 801fc22:	f001 f8c5 	bl	8020db0 <__aeabi_fsub>
 801fc26:	4639      	mov	r1, r7
 801fc28:	f001 f9cc 	bl	8020fc4 <__aeabi_fmul>
 801fc2c:	4601      	mov	r1, r0
 801fc2e:	4620      	mov	r0, r4
 801fc30:	f001 f8c0 	bl	8020db4 <__addsf3>
 801fc34:	4604      	mov	r4, r0
 801fc36:	4620      	mov	r0, r4
 801fc38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fc3c:	0000      	movs	r0, r0
	...

0801fc40 <atan>:
 801fc40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc48:	f2c4 430f 	movt	r3, #17423	; 0x440f
 801fc4c:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 801fc50:	b083      	sub	sp, #12
 801fc52:	429d      	cmp	r5, r3
 801fc54:	460e      	mov	r6, r1
 801fc56:	460f      	mov	r7, r1
 801fc58:	4604      	mov	r4, r0
 801fc5a:	dd1f      	ble.n	801fc9c <atan+0x5c>
 801fc5c:	2300      	movs	r3, #0
 801fc5e:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 801fc62:	429d      	cmp	r5, r3
 801fc64:	f300 80c3 	bgt.w	801fdee <atan+0x1ae>
 801fc68:	bf14      	ite	ne
 801fc6a:	2300      	movne	r3, #0
 801fc6c:	2301      	moveq	r3, #1
 801fc6e:	2800      	cmp	r0, #0
 801fc70:	bf0c      	ite	eq
 801fc72:	2200      	moveq	r2, #0
 801fc74:	f003 0201 	andne.w	r2, r3, #1
 801fc78:	2a00      	cmp	r2, #0
 801fc7a:	f040 80b8 	bne.w	801fdee <atan+0x1ae>
 801fc7e:	f242 16fb 	movw	r6, #8699	; 0x21fb
 801fc82:	f642 5418 	movw	r4, #11544	; 0x2d18
 801fc86:	4633      	mov	r3, r6
 801fc88:	f6cb 76f9 	movt	r6, #49145	; 0xbff9
 801fc8c:	f6c3 73f9 	movt	r3, #16377	; 0x3ff9
 801fc90:	f2c5 4444 	movt	r4, #21572	; 0x5444
 801fc94:	2900      	cmp	r1, #0
 801fc96:	bfc8      	it	gt
 801fc98:	461e      	movgt	r6, r3
 801fc9a:	e0b0      	b.n	801fdfe <atan+0x1be>
 801fc9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fca0:	f6c3 73db 	movt	r3, #16347	; 0x3fdb
 801fca4:	429d      	cmp	r5, r3
 801fca6:	f300 80be 	bgt.w	801fe26 <atan+0x1e6>
 801fcaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fcae:	f6c3 631f 	movt	r3, #15903	; 0x3e1f
 801fcb2:	429d      	cmp	r5, r3
 801fcb4:	f340 80a8 	ble.w	801fe08 <atan+0x1c8>
 801fcb8:	f04f 3cff 	mov.w	ip, #4294967295
 801fcbc:	4622      	mov	r2, r4
 801fcbe:	4633      	mov	r3, r6
 801fcc0:	4620      	mov	r0, r4
 801fcc2:	4631      	mov	r1, r6
 801fcc4:	f8cd c004 	str.w	ip, [sp, #4]
 801fcc8:	f000 fd84 	bl	80207d4 <__aeabi_dmul>
 801fccc:	4602      	mov	r2, r0
 801fcce:	460b      	mov	r3, r1
 801fcd0:	4682      	mov	sl, r0
 801fcd2:	468b      	mov	fp, r1
 801fcd4:	f000 fd7e 	bl	80207d4 <__aeabi_dmul>
 801fcd8:	a395      	add	r3, pc, #596	; (adr r3, 801ff30 <atan+0x2f0>)
 801fcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcde:	4680      	mov	r8, r0
 801fce0:	4689      	mov	r9, r1
 801fce2:	f000 fd77 	bl	80207d4 <__aeabi_dmul>
 801fce6:	a394      	add	r3, pc, #592	; (adr r3, 801ff38 <atan+0x2f8>)
 801fce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcec:	f000 fbc0 	bl	8020470 <__adddf3>
 801fcf0:	4642      	mov	r2, r8
 801fcf2:	464b      	mov	r3, r9
 801fcf4:	f000 fd6e 	bl	80207d4 <__aeabi_dmul>
 801fcf8:	a391      	add	r3, pc, #580	; (adr r3, 801ff40 <atan+0x300>)
 801fcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcfe:	f000 fbb7 	bl	8020470 <__adddf3>
 801fd02:	4642      	mov	r2, r8
 801fd04:	464b      	mov	r3, r9
 801fd06:	f000 fd65 	bl	80207d4 <__aeabi_dmul>
 801fd0a:	a38f      	add	r3, pc, #572	; (adr r3, 801ff48 <atan+0x308>)
 801fd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd10:	f000 fbae 	bl	8020470 <__adddf3>
 801fd14:	4642      	mov	r2, r8
 801fd16:	464b      	mov	r3, r9
 801fd18:	f000 fd5c 	bl	80207d4 <__aeabi_dmul>
 801fd1c:	a38c      	add	r3, pc, #560	; (adr r3, 801ff50 <atan+0x310>)
 801fd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd22:	f000 fba5 	bl	8020470 <__adddf3>
 801fd26:	4642      	mov	r2, r8
 801fd28:	464b      	mov	r3, r9
 801fd2a:	f000 fd53 	bl	80207d4 <__aeabi_dmul>
 801fd2e:	a38a      	add	r3, pc, #552	; (adr r3, 801ff58 <atan+0x318>)
 801fd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd34:	f000 fb9c 	bl	8020470 <__adddf3>
 801fd38:	4652      	mov	r2, sl
 801fd3a:	465b      	mov	r3, fp
 801fd3c:	f000 fd4a 	bl	80207d4 <__aeabi_dmul>
 801fd40:	a387      	add	r3, pc, #540	; (adr r3, 801ff60 <atan+0x320>)
 801fd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd46:	4682      	mov	sl, r0
 801fd48:	468b      	mov	fp, r1
 801fd4a:	4640      	mov	r0, r8
 801fd4c:	4649      	mov	r1, r9
 801fd4e:	f000 fd41 	bl	80207d4 <__aeabi_dmul>
 801fd52:	a385      	add	r3, pc, #532	; (adr r3, 801ff68 <atan+0x328>)
 801fd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd58:	f000 fb88 	bl	802046c <__aeabi_dsub>
 801fd5c:	4642      	mov	r2, r8
 801fd5e:	464b      	mov	r3, r9
 801fd60:	f000 fd38 	bl	80207d4 <__aeabi_dmul>
 801fd64:	a382      	add	r3, pc, #520	; (adr r3, 801ff70 <atan+0x330>)
 801fd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd6a:	f000 fb7f 	bl	802046c <__aeabi_dsub>
 801fd6e:	4642      	mov	r2, r8
 801fd70:	464b      	mov	r3, r9
 801fd72:	f000 fd2f 	bl	80207d4 <__aeabi_dmul>
 801fd76:	a380      	add	r3, pc, #512	; (adr r3, 801ff78 <atan+0x338>)
 801fd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd7c:	f000 fb76 	bl	802046c <__aeabi_dsub>
 801fd80:	4642      	mov	r2, r8
 801fd82:	464b      	mov	r3, r9
 801fd84:	f000 fd26 	bl	80207d4 <__aeabi_dmul>
 801fd88:	a37d      	add	r3, pc, #500	; (adr r3, 801ff80 <atan+0x340>)
 801fd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd8e:	f000 fb6d 	bl	802046c <__aeabi_dsub>
 801fd92:	4642      	mov	r2, r8
 801fd94:	464b      	mov	r3, r9
 801fd96:	f000 fd1d 	bl	80207d4 <__aeabi_dmul>
 801fd9a:	f8dd c004 	ldr.w	ip, [sp, #4]
 801fd9e:	f1bc 3fff 	cmp.w	ip, #4294967295
 801fda2:	4602      	mov	r2, r0
 801fda4:	460b      	mov	r3, r1
 801fda6:	d064      	beq.n	801fe72 <atan+0x232>
 801fda8:	f64e 2518 	movw	r5, #59928	; 0xea18
 801fdac:	4650      	mov	r0, sl
 801fdae:	f6c0 0502 	movt	r5, #2050	; 0x802
 801fdb2:	4659      	mov	r1, fp
 801fdb4:	eb05 05cc 	add.w	r5, r5, ip, lsl #3
 801fdb8:	f000 fb5a 	bl	8020470 <__adddf3>
 801fdbc:	4622      	mov	r2, r4
 801fdbe:	4633      	mov	r3, r6
 801fdc0:	f000 fd08 	bl	80207d4 <__aeabi_dmul>
 801fdc4:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 801fdc8:	f000 fb50 	bl	802046c <__aeabi_dsub>
 801fdcc:	4622      	mov	r2, r4
 801fdce:	4633      	mov	r3, r6
 801fdd0:	f000 fb4c 	bl	802046c <__aeabi_dsub>
 801fdd4:	4602      	mov	r2, r0
 801fdd6:	460b      	mov	r3, r1
 801fdd8:	e9d5 0100 	ldrd	r0, r1, [r5]
 801fddc:	f000 fb46 	bl	802046c <__aeabi_dsub>
 801fde0:	2f00      	cmp	r7, #0
 801fde2:	460e      	mov	r6, r1
 801fde4:	4604      	mov	r4, r0
 801fde6:	bfb8      	it	lt
 801fde8:	f101 4600 	addlt.w	r6, r1, #2147483648	; 0x80000000
 801fdec:	e007      	b.n	801fdfe <atan+0x1be>
 801fdee:	4620      	mov	r0, r4
 801fdf0:	4622      	mov	r2, r4
 801fdf2:	4631      	mov	r1, r6
 801fdf4:	4633      	mov	r3, r6
 801fdf6:	f000 fb3b 	bl	8020470 <__adddf3>
 801fdfa:	4604      	mov	r4, r0
 801fdfc:	460e      	mov	r6, r1
 801fdfe:	4620      	mov	r0, r4
 801fe00:	4631      	mov	r1, r6
 801fe02:	b003      	add	sp, #12
 801fe04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe08:	a35f      	add	r3, pc, #380	; (adr r3, 801ff88 <atan+0x348>)
 801fe0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe0e:	f000 fb2f 	bl	8020470 <__adddf3>
 801fe12:	2300      	movs	r3, #0
 801fe14:	2200      	movs	r2, #0
 801fe16:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 801fe1a:	f000 ff6b 	bl	8020cf4 <__aeabi_dcmpgt>
 801fe1e:	2800      	cmp	r0, #0
 801fe20:	f43f af4a 	beq.w	801fcb8 <atan+0x78>
 801fe24:	e7eb      	b.n	801fdfe <atan+0x1be>
 801fe26:	f000 f8b3 	bl	801ff90 <fabs>
 801fe2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fe2e:	f6c3 73f2 	movt	r3, #16370	; 0x3ff2
 801fe32:	429d      	cmp	r5, r3
 801fe34:	4680      	mov	r8, r0
 801fe36:	4689      	mov	r9, r1
 801fe38:	dc2c      	bgt.n	801fe94 <atan+0x254>
 801fe3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fe3e:	f6c3 73e5 	movt	r3, #16357	; 0x3fe5
 801fe42:	429d      	cmp	r5, r3
 801fe44:	dc5e      	bgt.n	801ff04 <atan+0x2c4>
 801fe46:	4602      	mov	r2, r0
 801fe48:	460b      	mov	r3, r1
 801fe4a:	f04f 0c00 	mov.w	ip, #0
 801fe4e:	f8cd c004 	str.w	ip, [sp, #4]
 801fe52:	f000 fb0d 	bl	8020470 <__adddf3>
 801fe56:	2300      	movs	r3, #0
 801fe58:	2200      	movs	r2, #0
 801fe5a:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 801fe5e:	f000 fb05 	bl	802046c <__aeabi_dsub>
 801fe62:	2200      	movs	r2, #0
 801fe64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801fe68:	4604      	mov	r4, r0
 801fe6a:	460d      	mov	r5, r1
 801fe6c:	4640      	mov	r0, r8
 801fe6e:	4649      	mov	r1, r9
 801fe70:	e02e      	b.n	801fed0 <atan+0x290>
 801fe72:	4650      	mov	r0, sl
 801fe74:	4659      	mov	r1, fp
 801fe76:	f000 fafb 	bl	8020470 <__adddf3>
 801fe7a:	4622      	mov	r2, r4
 801fe7c:	4633      	mov	r3, r6
 801fe7e:	f000 fca9 	bl	80207d4 <__aeabi_dmul>
 801fe82:	4602      	mov	r2, r0
 801fe84:	460b      	mov	r3, r1
 801fe86:	4620      	mov	r0, r4
 801fe88:	4631      	mov	r1, r6
 801fe8a:	f000 faef 	bl	802046c <__aeabi_dsub>
 801fe8e:	4604      	mov	r4, r0
 801fe90:	460e      	mov	r6, r1
 801fe92:	e7b4      	b.n	801fdfe <atan+0x1be>
 801fe94:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801fe98:	f2c4 0303 	movt	r3, #16387	; 0x4003
 801fe9c:	429d      	cmp	r5, r3
 801fe9e:	dc24      	bgt.n	801feea <atan+0x2aa>
 801fea0:	2300      	movs	r3, #0
 801fea2:	2200      	movs	r2, #0
 801fea4:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 801fea8:	f04f 0c02 	mov.w	ip, #2
 801feac:	f8cd c004 	str.w	ip, [sp, #4]
 801feb0:	f000 fadc 	bl	802046c <__aeabi_dsub>
 801feb4:	2300      	movs	r3, #0
 801feb6:	2200      	movs	r2, #0
 801feb8:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 801febc:	4604      	mov	r4, r0
 801febe:	460d      	mov	r5, r1
 801fec0:	4640      	mov	r0, r8
 801fec2:	4649      	mov	r1, r9
 801fec4:	f000 fc86 	bl	80207d4 <__aeabi_dmul>
 801fec8:	2300      	movs	r3, #0
 801feca:	2200      	movs	r2, #0
 801fecc:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 801fed0:	f000 face 	bl	8020470 <__adddf3>
 801fed4:	4602      	mov	r2, r0
 801fed6:	460b      	mov	r3, r1
 801fed8:	4620      	mov	r0, r4
 801feda:	4629      	mov	r1, r5
 801fedc:	f000 fda4 	bl	8020a28 <__aeabi_ddiv>
 801fee0:	f8dd c004 	ldr.w	ip, [sp, #4]
 801fee4:	4604      	mov	r4, r0
 801fee6:	460e      	mov	r6, r1
 801fee8:	e6e8      	b.n	801fcbc <atan+0x7c>
 801feea:	2100      	movs	r1, #0
 801feec:	2000      	movs	r0, #0
 801feee:	f6cb 71f0 	movt	r1, #49136	; 0xbff0
 801fef2:	4642      	mov	r2, r8
 801fef4:	464b      	mov	r3, r9
 801fef6:	f000 fd97 	bl	8020a28 <__aeabi_ddiv>
 801fefa:	f04f 0c03 	mov.w	ip, #3
 801fefe:	4604      	mov	r4, r0
 801ff00:	460e      	mov	r6, r1
 801ff02:	e6db      	b.n	801fcbc <atan+0x7c>
 801ff04:	2300      	movs	r3, #0
 801ff06:	2200      	movs	r2, #0
 801ff08:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 801ff0c:	f04f 0c01 	mov.w	ip, #1
 801ff10:	f8cd c004 	str.w	ip, [sp, #4]
 801ff14:	f000 faaa 	bl	802046c <__aeabi_dsub>
 801ff18:	2300      	movs	r3, #0
 801ff1a:	2200      	movs	r2, #0
 801ff1c:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 801ff20:	4604      	mov	r4, r0
 801ff22:	460d      	mov	r5, r1
 801ff24:	4640      	mov	r0, r8
 801ff26:	4649      	mov	r1, r9
 801ff28:	e7d2      	b.n	801fed0 <atan+0x290>
 801ff2a:	bf00      	nop
 801ff2c:	f3af 8000 	nop.w
 801ff30:	e322da11 	.word	0xe322da11
 801ff34:	3f90ad3a 	.word	0x3f90ad3a
 801ff38:	24760deb 	.word	0x24760deb
 801ff3c:	3fa97b4b 	.word	0x3fa97b4b
 801ff40:	a0d03d51 	.word	0xa0d03d51
 801ff44:	3fb10d66 	.word	0x3fb10d66
 801ff48:	c54c206e 	.word	0xc54c206e
 801ff4c:	3fb745cd 	.word	0x3fb745cd
 801ff50:	920083ff 	.word	0x920083ff
 801ff54:	3fc24924 	.word	0x3fc24924
 801ff58:	5555550d 	.word	0x5555550d
 801ff5c:	3fd55555 	.word	0x3fd55555
 801ff60:	2c6a6c2f 	.word	0x2c6a6c2f
 801ff64:	bfa2b444 	.word	0xbfa2b444
 801ff68:	52defd9a 	.word	0x52defd9a
 801ff6c:	3fadde2d 	.word	0x3fadde2d
 801ff70:	af749a6d 	.word	0xaf749a6d
 801ff74:	3fb3b0f2 	.word	0x3fb3b0f2
 801ff78:	fe231671 	.word	0xfe231671
 801ff7c:	3fbc71c6 	.word	0x3fbc71c6
 801ff80:	9998ebc4 	.word	0x9998ebc4
 801ff84:	3fc99999 	.word	0x3fc99999
 801ff88:	8800759c 	.word	0x8800759c
 801ff8c:	7e37e43c 	.word	0x7e37e43c

0801ff90 <fabs>:
 801ff90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ff94:	4770      	bx	lr
 801ff96:	bf00      	nop

0801ff98 <__fpclassifyd>:
 801ff98:	460b      	mov	r3, r1
 801ff9a:	ea50 0103 	orrs.w	r1, r0, r3
 801ff9e:	b410      	push	{r4}
 801ffa0:	d102      	bne.n	801ffa8 <__fpclassifyd+0x10>
 801ffa2:	2002      	movs	r0, #2
 801ffa4:	bc10      	pop	{r4}
 801ffa6:	4770      	bx	lr
 801ffa8:	f1d0 0201 	rsbs	r2, r0, #1
 801ffac:	bf38      	it	cc
 801ffae:	2200      	movcc	r2, #0
 801ffb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ffb4:	bf14      	ite	ne
 801ffb6:	2100      	movne	r1, #0
 801ffb8:	f002 0101 	andeq.w	r1, r2, #1
 801ffbc:	2900      	cmp	r1, #0
 801ffbe:	d1f0      	bne.n	801ffa2 <__fpclassifyd+0xa>
 801ffc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ffc4:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 801ffc8:	f6c7 71df 	movt	r1, #32735	; 0x7fdf
 801ffcc:	f103 44fe 	add.w	r4, r3, #2130706432	; 0x7f000000
 801ffd0:	4288      	cmp	r0, r1
 801ffd2:	f504 0470 	add.w	r4, r4, #15728640	; 0xf00000
 801ffd6:	bf8c      	ite	hi
 801ffd8:	2000      	movhi	r0, #0
 801ffda:	2001      	movls	r0, #1
 801ffdc:	428c      	cmp	r4, r1
 801ffde:	bf8c      	ite	hi
 801ffe0:	4601      	movhi	r1, r0
 801ffe2:	f040 0101 	orrls.w	r1, r0, #1
 801ffe6:	b109      	cbz	r1, 801ffec <__fpclassifyd+0x54>
 801ffe8:	2004      	movs	r0, #4
 801ffea:	e7db      	b.n	801ffa4 <__fpclassifyd+0xc>
 801ffec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801fff0:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801fff4:	bf2c      	ite	cs
 801fff6:	2000      	movcs	r0, #0
 801fff8:	2001      	movcc	r0, #1
 801fffa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801fffe:	bf2c      	ite	cs
 8020000:	4601      	movcs	r1, r0
 8020002:	f040 0101 	orrcc.w	r1, r0, #1
 8020006:	b109      	cbz	r1, 802000c <__fpclassifyd+0x74>
 8020008:	2003      	movs	r0, #3
 802000a:	e7cb      	b.n	801ffa4 <__fpclassifyd+0xc>
 802000c:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8020010:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 8020014:	bf14      	ite	ne
 8020016:	2000      	movne	r0, #0
 8020018:	2001      	moveq	r0, #1
 802001a:	428b      	cmp	r3, r1
 802001c:	bf14      	ite	ne
 802001e:	4603      	movne	r3, r0
 8020020:	f040 0301 	orreq.w	r3, r0, #1
 8020024:	ea02 0003 	and.w	r0, r2, r3
 8020028:	e7bc      	b.n	801ffa4 <__fpclassifyd+0xc>
 802002a:	bf00      	nop

0802002c <matherr>:
 802002c:	2000      	movs	r0, #0
 802002e:	4770      	bx	lr

08020030 <nan>:
 8020030:	2100      	movs	r1, #0
 8020032:	2000      	movs	r0, #0
 8020034:	f6c7 71f8 	movt	r1, #32760	; 0x7ff8
 8020038:	4770      	bx	lr
 802003a:	bf00      	nop

0802003c <atanf>:
 802003c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020040:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8020044:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8020048:	4604      	mov	r4, r0
 802004a:	4606      	mov	r6, r0
 802004c:	db0e      	blt.n	802006c <atanf+0x30>
 802004e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8020052:	f300 80a4 	bgt.w	802019e <atanf+0x162>
 8020056:	2800      	cmp	r0, #0
 8020058:	f640 74db 	movw	r4, #4059	; 0xfdb
 802005c:	bfc8      	it	gt
 802005e:	f6c3 74c9 	movtgt	r4, #16329	; 0x3fc9
 8020062:	f340 80d9 	ble.w	8020218 <atanf+0x1dc>
 8020066:	4620      	mov	r0, r4
 8020068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802006c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020070:	f6c3 63df 	movt	r3, #16095	; 0x3edf
 8020074:	429d      	cmp	r5, r3
 8020076:	f300 80a7 	bgt.w	80201c8 <atanf+0x18c>
 802007a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 802007e:	f2c0 8095 	blt.w	80201ac <atanf+0x170>
 8020082:	f04f 37ff 	mov.w	r7, #4294967295
 8020086:	4621      	mov	r1, r4
 8020088:	4620      	mov	r0, r4
 802008a:	f000 ff9b 	bl	8020fc4 <__aeabi_fmul>
 802008e:	4601      	mov	r1, r0
 8020090:	4680      	mov	r8, r0
 8020092:	f000 ff97 	bl	8020fc4 <__aeabi_fmul>
 8020096:	f646 11d7 	movw	r1, #27095	; 0x69d7
 802009a:	f6c3 4185 	movt	r1, #15493	; 0x3c85
 802009e:	4605      	mov	r5, r0
 80200a0:	f000 ff90 	bl	8020fc4 <__aeabi_fmul>
 80200a4:	f64d 2159 	movw	r1, #55897	; 0xda59
 80200a8:	f6c3 514b 	movt	r1, #15691	; 0x3d4b
 80200ac:	f000 fe82 	bl	8020db4 <__addsf3>
 80200b0:	4629      	mov	r1, r5
 80200b2:	f000 ff87 	bl	8020fc4 <__aeabi_fmul>
 80200b6:	f646 3135 	movw	r1, #27445	; 0x6b35
 80200ba:	f6c3 5188 	movt	r1, #15752	; 0x3d88
 80200be:	f000 fe79 	bl	8020db4 <__addsf3>
 80200c2:	4629      	mov	r1, r5
 80200c4:	f000 ff7e 	bl	8020fc4 <__aeabi_fmul>
 80200c8:	f642 616e 	movw	r1, #11886	; 0x2e6e
 80200cc:	f6c3 51ba 	movt	r1, #15802	; 0x3dba
 80200d0:	f000 fe70 	bl	8020db4 <__addsf3>
 80200d4:	4629      	mov	r1, r5
 80200d6:	f000 ff75 	bl	8020fc4 <__aeabi_fmul>
 80200da:	f644 1125 	movw	r1, #18725	; 0x4925
 80200de:	f6c3 6112 	movt	r1, #15890	; 0x3e12
 80200e2:	f000 fe67 	bl	8020db4 <__addsf3>
 80200e6:	4629      	mov	r1, r5
 80200e8:	f000 ff6c 	bl	8020fc4 <__aeabi_fmul>
 80200ec:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 80200f0:	f6c3 61aa 	movt	r1, #16042	; 0x3eaa
 80200f4:	f000 fe5e 	bl	8020db4 <__addsf3>
 80200f8:	4641      	mov	r1, r8
 80200fa:	f000 ff63 	bl	8020fc4 <__aeabi_fmul>
 80200fe:	f24a 2121 	movw	r1, #41505	; 0xa221
 8020102:	f6cb 5115 	movt	r1, #48405	; 0xbd15
 8020106:	4680      	mov	r8, r0
 8020108:	4628      	mov	r0, r5
 802010a:	f000 ff5b 	bl	8020fc4 <__aeabi_fmul>
 802010e:	f24f 116b 	movw	r1, #61803	; 0xf16b
 8020112:	f6c3 516e 	movt	r1, #15726	; 0x3d6e
 8020116:	f000 fe4b 	bl	8020db0 <__aeabi_fsub>
 802011a:	4629      	mov	r1, r5
 802011c:	f000 ff52 	bl	8020fc4 <__aeabi_fmul>
 8020120:	f248 7195 	movw	r1, #34709	; 0x8795
 8020124:	f6c3 519d 	movt	r1, #15773	; 0x3d9d
 8020128:	f000 fe42 	bl	8020db0 <__aeabi_fsub>
 802012c:	4629      	mov	r1, r5
 802012e:	f000 ff49 	bl	8020fc4 <__aeabi_fmul>
 8020132:	f648 6138 	movw	r1, #36408	; 0x8e38
 8020136:	f6c3 51e3 	movt	r1, #15843	; 0x3de3
 802013a:	f000 fe39 	bl	8020db0 <__aeabi_fsub>
 802013e:	4629      	mov	r1, r5
 8020140:	f000 ff40 	bl	8020fc4 <__aeabi_fmul>
 8020144:	f64c 41cd 	movw	r1, #52429	; 0xcccd
 8020148:	f6c3 614c 	movt	r1, #15948	; 0x3e4c
 802014c:	f000 fe30 	bl	8020db0 <__aeabi_fsub>
 8020150:	4629      	mov	r1, r5
 8020152:	f000 ff37 	bl	8020fc4 <__aeabi_fmul>
 8020156:	1c7b      	adds	r3, r7, #1
 8020158:	4601      	mov	r1, r0
 802015a:	d051      	beq.n	8020200 <atanf+0x1c4>
 802015c:	f64e 2558 	movw	r5, #59992	; 0xea58
 8020160:	4640      	mov	r0, r8
 8020162:	f000 fe27 	bl	8020db4 <__addsf3>
 8020166:	f6c0 0502 	movt	r5, #2050	; 0x802
 802016a:	4621      	mov	r1, r4
 802016c:	f000 ff2a 	bl	8020fc4 <__aeabi_fmul>
 8020170:	eb05 0387 	add.w	r3, r5, r7, lsl #2
 8020174:	6919      	ldr	r1, [r3, #16]
 8020176:	f000 fe1b 	bl	8020db0 <__aeabi_fsub>
 802017a:	4621      	mov	r1, r4
 802017c:	f000 fe18 	bl	8020db0 <__aeabi_fsub>
 8020180:	4601      	mov	r1, r0
 8020182:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 8020186:	f000 fe13 	bl	8020db0 <__aeabi_fsub>
 802018a:	2e00      	cmp	r6, #0
 802018c:	bfb8      	it	lt
 802018e:	f100 4400 	addlt.w	r4, r0, #2147483648	; 0x80000000
 8020192:	f6ff af68 	blt.w	8020066 <atanf+0x2a>
 8020196:	4604      	mov	r4, r0
 8020198:	4620      	mov	r0, r4
 802019a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802019e:	4601      	mov	r1, r0
 80201a0:	f000 fe08 	bl	8020db4 <__addsf3>
 80201a4:	4604      	mov	r4, r0
 80201a6:	4620      	mov	r0, r4
 80201a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80201ac:	f24f 21ca 	movw	r1, #62154	; 0xf2ca
 80201b0:	f2c7 1149 	movt	r1, #29001	; 0x7149
 80201b4:	f000 fdfe 	bl	8020db4 <__addsf3>
 80201b8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80201bc:	f001 f8be 	bl	802133c <__aeabi_fcmpgt>
 80201c0:	2800      	cmp	r0, #0
 80201c2:	f43f af5e 	beq.w	8020082 <atanf+0x46>
 80201c6:	e74e      	b.n	8020066 <atanf+0x2a>
 80201c8:	f000 f856 	bl	8020278 <fabsf>
 80201cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80201d0:	f6c3 7397 	movt	r3, #16279	; 0x3f97
 80201d4:	429d      	cmp	r5, r3
 80201d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80201da:	4604      	mov	r4, r0
 80201dc:	dc1f      	bgt.n	802021e <atanf+0x1e2>
 80201de:	f6c3 732f 	movt	r3, #16175	; 0x3f2f
 80201e2:	429d      	cmp	r5, r3
 80201e4:	dc3d      	bgt.n	8020262 <atanf+0x226>
 80201e6:	4601      	mov	r1, r0
 80201e8:	2700      	movs	r7, #0
 80201ea:	f000 fde3 	bl	8020db4 <__addsf3>
 80201ee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80201f2:	f000 fddd 	bl	8020db0 <__aeabi_fsub>
 80201f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80201fa:	4605      	mov	r5, r0
 80201fc:	4620      	mov	r0, r4
 80201fe:	e01f      	b.n	8020240 <atanf+0x204>
 8020200:	4640      	mov	r0, r8
 8020202:	f000 fdd7 	bl	8020db4 <__addsf3>
 8020206:	4621      	mov	r1, r4
 8020208:	f000 fedc 	bl	8020fc4 <__aeabi_fmul>
 802020c:	4601      	mov	r1, r0
 802020e:	4620      	mov	r0, r4
 8020210:	f000 fdce 	bl	8020db0 <__aeabi_fsub>
 8020214:	4604      	mov	r4, r0
 8020216:	e726      	b.n	8020066 <atanf+0x2a>
 8020218:	f6cb 74c9 	movt	r4, #49097	; 0xbfc9
 802021c:	e723      	b.n	8020066 <atanf+0x2a>
 802021e:	f2c4 031b 	movt	r3, #16411	; 0x401b
 8020222:	429d      	cmp	r5, r3
 8020224:	dc14      	bgt.n	8020250 <atanf+0x214>
 8020226:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 802022a:	2702      	movs	r7, #2
 802022c:	f000 fdc0 	bl	8020db0 <__aeabi_fsub>
 8020230:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8020234:	4605      	mov	r5, r0
 8020236:	4620      	mov	r0, r4
 8020238:	f000 fec4 	bl	8020fc4 <__aeabi_fmul>
 802023c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8020240:	f000 fdb8 	bl	8020db4 <__addsf3>
 8020244:	4601      	mov	r1, r0
 8020246:	4628      	mov	r0, r5
 8020248:	f000 ff70 	bl	802112c <__aeabi_fdiv>
 802024c:	4604      	mov	r4, r0
 802024e:	e71a      	b.n	8020086 <atanf+0x4a>
 8020250:	2000      	movs	r0, #0
 8020252:	4621      	mov	r1, r4
 8020254:	f6cb 7080 	movt	r0, #49024	; 0xbf80
 8020258:	2703      	movs	r7, #3
 802025a:	f000 ff67 	bl	802112c <__aeabi_fdiv>
 802025e:	4604      	mov	r4, r0
 8020260:	e711      	b.n	8020086 <atanf+0x4a>
 8020262:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8020266:	2701      	movs	r7, #1
 8020268:	f000 fda2 	bl	8020db0 <__aeabi_fsub>
 802026c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8020270:	4605      	mov	r5, r0
 8020272:	4620      	mov	r0, r4
 8020274:	e7e4      	b.n	8020240 <atanf+0x204>
 8020276:	bf00      	nop

08020278 <fabsf>:
 8020278:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802027c:	4770      	bx	lr
 802027e:	bf00      	nop

08020280 <floorf>:
 8020280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020284:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8020288:	4601      	mov	r1, r0
 802028a:	4604      	mov	r4, r0
 802028c:	0df5      	lsrs	r5, r6, #23
 802028e:	3d7f      	subs	r5, #127	; 0x7f
 8020290:	2d16      	cmp	r5, #22
 8020292:	dc21      	bgt.n	80202d8 <floorf+0x58>
 8020294:	2d00      	cmp	r5, #0
 8020296:	4680      	mov	r8, r0
 8020298:	db27      	blt.n	80202ea <floorf+0x6a>
 802029a:	f64f 77ff 	movw	r7, #65535	; 0xffff
 802029e:	f2c0 077f 	movt	r7, #127	; 0x7f
 80202a2:	fa47 f705 	asr.w	r7, r7, r5
 80202a6:	4207      	tst	r7, r0
 80202a8:	d013      	beq.n	80202d2 <floorf+0x52>
 80202aa:	f24f 21ca 	movw	r1, #62154	; 0xf2ca
 80202ae:	f2c7 1149 	movt	r1, #29001	; 0x7149
 80202b2:	f000 fd7f 	bl	8020db4 <__addsf3>
 80202b6:	2100      	movs	r1, #0
 80202b8:	f001 f840 	bl	802133c <__aeabi_fcmpgt>
 80202bc:	b340      	cbz	r0, 8020310 <floorf+0x90>
 80202be:	2c00      	cmp	r4, #0
 80202c0:	bfbe      	ittt	lt
 80202c2:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80202c6:	fa43 f505 	asrlt.w	r5, r3, r5
 80202ca:	eb04 0805 	addlt.w	r8, r4, r5
 80202ce:	ea28 0107 	bic.w	r1, r8, r7
 80202d2:	4608      	mov	r0, r1
 80202d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80202d8:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80202dc:	d3f9      	bcc.n	80202d2 <floorf+0x52>
 80202de:	f000 fd69 	bl	8020db4 <__addsf3>
 80202e2:	4601      	mov	r1, r0
 80202e4:	4608      	mov	r0, r1
 80202e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80202ea:	f24f 21ca 	movw	r1, #62154	; 0xf2ca
 80202ee:	f2c7 1149 	movt	r1, #29001	; 0x7149
 80202f2:	f000 fd5f 	bl	8020db4 <__addsf3>
 80202f6:	2100      	movs	r1, #0
 80202f8:	f001 f820 	bl	802133c <__aeabi_fcmpgt>
 80202fc:	b140      	cbz	r0, 8020310 <floorf+0x90>
 80202fe:	2100      	movs	r1, #0
 8020300:	2c00      	cmp	r4, #0
 8020302:	dae6      	bge.n	80202d2 <floorf+0x52>
 8020304:	f6cb 7180 	movt	r1, #49024	; 0xbf80
 8020308:	2e00      	cmp	r6, #0
 802030a:	bf08      	it	eq
 802030c:	4621      	moveq	r1, r4
 802030e:	e7e0      	b.n	80202d2 <floorf+0x52>
 8020310:	4621      	mov	r1, r4
 8020312:	4608      	mov	r0, r1
 8020314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020318 <__fpclassifyf>:
 8020318:	f1d0 0301 	rsbs	r3, r0, #1
 802031c:	bf38      	it	cc
 802031e:	2300      	movcc	r3, #0
 8020320:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8020324:	bf08      	it	eq
 8020326:	f043 0301 	orreq.w	r3, r3, #1
 802032a:	b10b      	cbz	r3, 8020330 <__fpclassifyf+0x18>
 802032c:	2002      	movs	r0, #2
 802032e:	4770      	bx	lr
 8020330:	f5a0 0200 	sub.w	r2, r0, #8388608	; 0x800000
 8020334:	f100 43ff 	add.w	r3, r0, #2139095040	; 0x7f800000
 8020338:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 802033c:	bf2c      	ite	cs
 802033e:	2200      	movcs	r2, #0
 8020340:	2201      	movcc	r2, #1
 8020342:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8020346:	bf2c      	ite	cs
 8020348:	4613      	movcs	r3, r2
 802034a:	f042 0301 	orrcc.w	r3, r2, #1
 802034e:	b10b      	cbz	r3, 8020354 <__fpclassifyf+0x3c>
 8020350:	2004      	movs	r0, #4
 8020352:	4770      	bx	lr
 8020354:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8020358:	1e41      	subs	r1, r0, #1
 802035a:	f2c0 037f 	movt	r3, #127	; 0x7f
 802035e:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8020362:	3a01      	subs	r2, #1
 8020364:	4299      	cmp	r1, r3
 8020366:	bf8c      	ite	hi
 8020368:	2100      	movhi	r1, #0
 802036a:	2101      	movls	r1, #1
 802036c:	429a      	cmp	r2, r3
 802036e:	bf8c      	ite	hi
 8020370:	460b      	movhi	r3, r1
 8020372:	f041 0301 	orrls.w	r3, r1, #1
 8020376:	b10b      	cbz	r3, 802037c <__fpclassifyf+0x64>
 8020378:	2003      	movs	r0, #3
 802037a:	4770      	bx	lr
 802037c:	f510 0f00 	cmn.w	r0, #8388608	; 0x800000
 8020380:	bf14      	ite	ne
 8020382:	2300      	movne	r3, #0
 8020384:	2301      	moveq	r3, #1
 8020386:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 802038a:	bf14      	ite	ne
 802038c:	4618      	movne	r0, r3
 802038e:	f043 0001 	orreq.w	r0, r3, #1
 8020392:	4770      	bx	lr

08020394 <scalbnf>:
 8020394:	b510      	push	{r4, lr}
 8020396:	460c      	mov	r4, r1
 8020398:	f030 4100 	bics.w	r1, r0, #2147483648	; 0x80000000
 802039c:	4603      	mov	r3, r0
 802039e:	4602      	mov	r2, r0
 80203a0:	d027      	beq.n	80203f2 <scalbnf+0x5e>
 80203a2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80203a6:	d226      	bcs.n	80203f6 <scalbnf+0x62>
 80203a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80203ac:	d329      	bcc.n	8020402 <scalbnf+0x6e>
 80203ae:	0dc9      	lsrs	r1, r1, #23
 80203b0:	1909      	adds	r1, r1, r4
 80203b2:	29fe      	cmp	r1, #254	; 0xfe
 80203b4:	bfc8      	it	gt
 80203b6:	4619      	movgt	r1, r3
 80203b8:	dc33      	bgt.n	8020422 <scalbnf+0x8e>
 80203ba:	2900      	cmp	r1, #0
 80203bc:	bfc4      	itt	gt
 80203be:	f022 42ff 	bicgt.w	r2, r2, #2139095040	; 0x7f800000
 80203c2:	ea42 53c1 	orrgt.w	r3, r2, r1, lsl #23
 80203c6:	dc14      	bgt.n	80203f2 <scalbnf+0x5e>
 80203c8:	f111 0f16 	cmn.w	r1, #22
 80203cc:	da37      	bge.n	802043e <scalbnf+0xaa>
 80203ce:	f24c 3250 	movw	r2, #50000	; 0xc350
 80203d2:	4619      	mov	r1, r3
 80203d4:	4294      	cmp	r4, r2
 80203d6:	dc24      	bgt.n	8020422 <scalbnf+0x8e>
 80203d8:	f244 2060 	movw	r0, #16992	; 0x4260
 80203dc:	f6c0 50a2 	movt	r0, #3490	; 0xda2
 80203e0:	f000 f83a 	bl	8020458 <copysignf>
 80203e4:	f244 2160 	movw	r1, #16992	; 0x4260
 80203e8:	f6c0 51a2 	movt	r1, #3490	; 0xda2
 80203ec:	f000 fdea 	bl	8020fc4 <__aeabi_fmul>
 80203f0:	4603      	mov	r3, r0
 80203f2:	4618      	mov	r0, r3
 80203f4:	bd10      	pop	{r4, pc}
 80203f6:	4601      	mov	r1, r0
 80203f8:	f000 fcdc 	bl	8020db4 <__addsf3>
 80203fc:	4603      	mov	r3, r0
 80203fe:	4618      	mov	r0, r3
 8020400:	bd10      	pop	{r4, pc}
 8020402:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8020406:	f000 fddd 	bl	8020fc4 <__aeabi_fmul>
 802040a:	f643 42b0 	movw	r2, #15536	; 0x3cb0
 802040e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
 8020412:	4294      	cmp	r4, r2
 8020414:	4603      	mov	r3, r0
 8020416:	dbe5      	blt.n	80203e4 <scalbnf+0x50>
 8020418:	f3c0 51c7 	ubfx	r1, r0, #23, #8
 802041c:	4602      	mov	r2, r0
 802041e:	3919      	subs	r1, #25
 8020420:	e7c6      	b.n	80203b0 <scalbnf+0x1c>
 8020422:	f24f 20ca 	movw	r0, #62154	; 0xf2ca
 8020426:	f2c7 1049 	movt	r0, #29001	; 0x7149
 802042a:	f000 f815 	bl	8020458 <copysignf>
 802042e:	f24f 21ca 	movw	r1, #62154	; 0xf2ca
 8020432:	f2c7 1149 	movt	r1, #29001	; 0x7149
 8020436:	f000 fdc5 	bl	8020fc4 <__aeabi_fmul>
 802043a:	4603      	mov	r3, r0
 802043c:	e7d9      	b.n	80203f2 <scalbnf+0x5e>
 802043e:	f101 0019 	add.w	r0, r1, #25
 8020442:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8020446:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 802044a:	ea42 50c0 	orr.w	r0, r2, r0, lsl #23
 802044e:	f000 fdb9 	bl	8020fc4 <__aeabi_fmul>
 8020452:	4603      	mov	r3, r0
 8020454:	e7cd      	b.n	80203f2 <scalbnf+0x5e>
 8020456:	bf00      	nop

08020458 <copysignf>:
 8020458:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802045c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8020460:	4308      	orrs	r0, r1
 8020462:	4770      	bx	lr

08020464 <__aeabi_drsub>:
 8020464:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020468:	e002      	b.n	8020470 <__adddf3>
 802046a:	bf00      	nop

0802046c <__aeabi_dsub>:
 802046c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08020470 <__adddf3>:
 8020470:	b530      	push	{r4, r5, lr}
 8020472:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020476:	ea4f 0543 	mov.w	r5, r3, lsl #1
 802047a:	ea94 0f05 	teq	r4, r5
 802047e:	bf08      	it	eq
 8020480:	ea90 0f02 	teqeq	r0, r2
 8020484:	bf1f      	itttt	ne
 8020486:	ea54 0c00 	orrsne.w	ip, r4, r0
 802048a:	ea55 0c02 	orrsne.w	ip, r5, r2
 802048e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8020492:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020496:	f000 80e2 	beq.w	802065e <__adddf3+0x1ee>
 802049a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802049e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80204a2:	bfb8      	it	lt
 80204a4:	426d      	neglt	r5, r5
 80204a6:	dd0c      	ble.n	80204c2 <__adddf3+0x52>
 80204a8:	442c      	add	r4, r5
 80204aa:	ea80 0202 	eor.w	r2, r0, r2
 80204ae:	ea81 0303 	eor.w	r3, r1, r3
 80204b2:	ea82 0000 	eor.w	r0, r2, r0
 80204b6:	ea83 0101 	eor.w	r1, r3, r1
 80204ba:	ea80 0202 	eor.w	r2, r0, r2
 80204be:	ea81 0303 	eor.w	r3, r1, r3
 80204c2:	2d36      	cmp	r5, #54	; 0x36
 80204c4:	bf88      	it	hi
 80204c6:	bd30      	pophi	{r4, r5, pc}
 80204c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80204cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80204d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80204d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80204d8:	d002      	beq.n	80204e0 <__adddf3+0x70>
 80204da:	4240      	negs	r0, r0
 80204dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80204e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80204e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80204e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80204ec:	d002      	beq.n	80204f4 <__adddf3+0x84>
 80204ee:	4252      	negs	r2, r2
 80204f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80204f4:	ea94 0f05 	teq	r4, r5
 80204f8:	f000 80a7 	beq.w	802064a <__adddf3+0x1da>
 80204fc:	f1a4 0401 	sub.w	r4, r4, #1
 8020500:	f1d5 0e20 	rsbs	lr, r5, #32
 8020504:	db0d      	blt.n	8020522 <__adddf3+0xb2>
 8020506:	fa02 fc0e 	lsl.w	ip, r2, lr
 802050a:	fa22 f205 	lsr.w	r2, r2, r5
 802050e:	1880      	adds	r0, r0, r2
 8020510:	f141 0100 	adc.w	r1, r1, #0
 8020514:	fa03 f20e 	lsl.w	r2, r3, lr
 8020518:	1880      	adds	r0, r0, r2
 802051a:	fa43 f305 	asr.w	r3, r3, r5
 802051e:	4159      	adcs	r1, r3
 8020520:	e00e      	b.n	8020540 <__adddf3+0xd0>
 8020522:	f1a5 0520 	sub.w	r5, r5, #32
 8020526:	f10e 0e20 	add.w	lr, lr, #32
 802052a:	2a01      	cmp	r2, #1
 802052c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8020530:	bf28      	it	cs
 8020532:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020536:	fa43 f305 	asr.w	r3, r3, r5
 802053a:	18c0      	adds	r0, r0, r3
 802053c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8020540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020544:	d507      	bpl.n	8020556 <__adddf3+0xe6>
 8020546:	f04f 0e00 	mov.w	lr, #0
 802054a:	f1dc 0c00 	rsbs	ip, ip, #0
 802054e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8020552:	eb6e 0101 	sbc.w	r1, lr, r1
 8020556:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 802055a:	d31b      	bcc.n	8020594 <__adddf3+0x124>
 802055c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8020560:	d30c      	bcc.n	802057c <__adddf3+0x10c>
 8020562:	0849      	lsrs	r1, r1, #1
 8020564:	ea5f 0030 	movs.w	r0, r0, rrx
 8020568:	ea4f 0c3c 	mov.w	ip, ip, rrx
 802056c:	f104 0401 	add.w	r4, r4, #1
 8020570:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020574:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020578:	f080 809a 	bcs.w	80206b0 <__adddf3+0x240>
 802057c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8020580:	bf08      	it	eq
 8020582:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020586:	f150 0000 	adcs.w	r0, r0, #0
 802058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802058e:	ea41 0105 	orr.w	r1, r1, r5
 8020592:	bd30      	pop	{r4, r5, pc}
 8020594:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020598:	4140      	adcs	r0, r0
 802059a:	eb41 0101 	adc.w	r1, r1, r1
 802059e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80205a2:	f1a4 0401 	sub.w	r4, r4, #1
 80205a6:	d1e9      	bne.n	802057c <__adddf3+0x10c>
 80205a8:	f091 0f00 	teq	r1, #0
 80205ac:	bf04      	itt	eq
 80205ae:	4601      	moveq	r1, r0
 80205b0:	2000      	moveq	r0, #0
 80205b2:	fab1 f381 	clz	r3, r1
 80205b6:	bf08      	it	eq
 80205b8:	3320      	addeq	r3, #32
 80205ba:	f1a3 030b 	sub.w	r3, r3, #11
 80205be:	f1b3 0220 	subs.w	r2, r3, #32
 80205c2:	da0c      	bge.n	80205de <__adddf3+0x16e>
 80205c4:	320c      	adds	r2, #12
 80205c6:	dd08      	ble.n	80205da <__adddf3+0x16a>
 80205c8:	f102 0c14 	add.w	ip, r2, #20
 80205cc:	f1c2 020c 	rsb	r2, r2, #12
 80205d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80205d4:	fa21 f102 	lsr.w	r1, r1, r2
 80205d8:	e00c      	b.n	80205f4 <__adddf3+0x184>
 80205da:	f102 0214 	add.w	r2, r2, #20
 80205de:	bfd8      	it	le
 80205e0:	f1c2 0c20 	rsble	ip, r2, #32
 80205e4:	fa01 f102 	lsl.w	r1, r1, r2
 80205e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80205ec:	bfdc      	itt	le
 80205ee:	ea41 010c 	orrle.w	r1, r1, ip
 80205f2:	4090      	lslle	r0, r2
 80205f4:	1ae4      	subs	r4, r4, r3
 80205f6:	bfa2      	ittt	ge
 80205f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80205fc:	4329      	orrge	r1, r5
 80205fe:	bd30      	popge	{r4, r5, pc}
 8020600:	ea6f 0404 	mvn.w	r4, r4
 8020604:	3c1f      	subs	r4, #31
 8020606:	da1c      	bge.n	8020642 <__adddf3+0x1d2>
 8020608:	340c      	adds	r4, #12
 802060a:	dc0e      	bgt.n	802062a <__adddf3+0x1ba>
 802060c:	f104 0414 	add.w	r4, r4, #20
 8020610:	f1c4 0220 	rsb	r2, r4, #32
 8020614:	fa20 f004 	lsr.w	r0, r0, r4
 8020618:	fa01 f302 	lsl.w	r3, r1, r2
 802061c:	ea40 0003 	orr.w	r0, r0, r3
 8020620:	fa21 f304 	lsr.w	r3, r1, r4
 8020624:	ea45 0103 	orr.w	r1, r5, r3
 8020628:	bd30      	pop	{r4, r5, pc}
 802062a:	f1c4 040c 	rsb	r4, r4, #12
 802062e:	f1c4 0220 	rsb	r2, r4, #32
 8020632:	fa20 f002 	lsr.w	r0, r0, r2
 8020636:	fa01 f304 	lsl.w	r3, r1, r4
 802063a:	ea40 0003 	orr.w	r0, r0, r3
 802063e:	4629      	mov	r1, r5
 8020640:	bd30      	pop	{r4, r5, pc}
 8020642:	fa21 f004 	lsr.w	r0, r1, r4
 8020646:	4629      	mov	r1, r5
 8020648:	bd30      	pop	{r4, r5, pc}
 802064a:	f094 0f00 	teq	r4, #0
 802064e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8020652:	bf06      	itte	eq
 8020654:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020658:	3401      	addeq	r4, #1
 802065a:	3d01      	subne	r5, #1
 802065c:	e74e      	b.n	80204fc <__adddf3+0x8c>
 802065e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8020662:	bf18      	it	ne
 8020664:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020668:	d029      	beq.n	80206be <__adddf3+0x24e>
 802066a:	ea94 0f05 	teq	r4, r5
 802066e:	bf08      	it	eq
 8020670:	ea90 0f02 	teqeq	r0, r2
 8020674:	d005      	beq.n	8020682 <__adddf3+0x212>
 8020676:	ea54 0c00 	orrs.w	ip, r4, r0
 802067a:	bf04      	itt	eq
 802067c:	4619      	moveq	r1, r3
 802067e:	4610      	moveq	r0, r2
 8020680:	bd30      	pop	{r4, r5, pc}
 8020682:	ea91 0f03 	teq	r1, r3
 8020686:	bf1e      	ittt	ne
 8020688:	2100      	movne	r1, #0
 802068a:	2000      	movne	r0, #0
 802068c:	bd30      	popne	{r4, r5, pc}
 802068e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8020692:	d105      	bne.n	80206a0 <__adddf3+0x230>
 8020694:	0040      	lsls	r0, r0, #1
 8020696:	4149      	adcs	r1, r1
 8020698:	bf28      	it	cs
 802069a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802069e:	bd30      	pop	{r4, r5, pc}
 80206a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80206a4:	bf3c      	itt	cc
 80206a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80206aa:	bd30      	popcc	{r4, r5, pc}
 80206ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80206b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80206b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80206b8:	f04f 0000 	mov.w	r0, #0
 80206bc:	bd30      	pop	{r4, r5, pc}
 80206be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80206c2:	bf1a      	itte	ne
 80206c4:	4619      	movne	r1, r3
 80206c6:	4610      	movne	r0, r2
 80206c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80206cc:	bf1c      	itt	ne
 80206ce:	460b      	movne	r3, r1
 80206d0:	4602      	movne	r2, r0
 80206d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80206d6:	bf06      	itte	eq
 80206d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80206dc:	ea91 0f03 	teqeq	r1, r3
 80206e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80206e4:	bd30      	pop	{r4, r5, pc}
 80206e6:	bf00      	nop

080206e8 <__aeabi_ui2d>:
 80206e8:	f090 0f00 	teq	r0, #0
 80206ec:	bf04      	itt	eq
 80206ee:	2100      	moveq	r1, #0
 80206f0:	4770      	bxeq	lr
 80206f2:	b530      	push	{r4, r5, lr}
 80206f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80206f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80206fc:	f04f 0500 	mov.w	r5, #0
 8020700:	f04f 0100 	mov.w	r1, #0
 8020704:	e750      	b.n	80205a8 <__adddf3+0x138>
 8020706:	bf00      	nop

08020708 <__aeabi_i2d>:
 8020708:	f090 0f00 	teq	r0, #0
 802070c:	bf04      	itt	eq
 802070e:	2100      	moveq	r1, #0
 8020710:	4770      	bxeq	lr
 8020712:	b530      	push	{r4, r5, lr}
 8020714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802071c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8020720:	bf48      	it	mi
 8020722:	4240      	negmi	r0, r0
 8020724:	f04f 0100 	mov.w	r1, #0
 8020728:	e73e      	b.n	80205a8 <__adddf3+0x138>
 802072a:	bf00      	nop

0802072c <__aeabi_f2d>:
 802072c:	0042      	lsls	r2, r0, #1
 802072e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8020732:	ea4f 0131 	mov.w	r1, r1, rrx
 8020736:	ea4f 7002 	mov.w	r0, r2, lsl #28
 802073a:	bf1f      	itttt	ne
 802073c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8020740:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020744:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020748:	4770      	bxne	lr
 802074a:	f092 0f00 	teq	r2, #0
 802074e:	bf14      	ite	ne
 8020750:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020754:	4770      	bxeq	lr
 8020756:	b530      	push	{r4, r5, lr}
 8020758:	f44f 7460 	mov.w	r4, #896	; 0x380
 802075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020764:	e720      	b.n	80205a8 <__adddf3+0x138>
 8020766:	bf00      	nop

08020768 <__aeabi_ul2d>:
 8020768:	ea50 0201 	orrs.w	r2, r0, r1
 802076c:	bf08      	it	eq
 802076e:	4770      	bxeq	lr
 8020770:	b530      	push	{r4, r5, lr}
 8020772:	f04f 0500 	mov.w	r5, #0
 8020776:	e00a      	b.n	802078e <__aeabi_l2d+0x16>

08020778 <__aeabi_l2d>:
 8020778:	ea50 0201 	orrs.w	r2, r0, r1
 802077c:	bf08      	it	eq
 802077e:	4770      	bxeq	lr
 8020780:	b530      	push	{r4, r5, lr}
 8020782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8020786:	d502      	bpl.n	802078e <__aeabi_l2d+0x16>
 8020788:	4240      	negs	r0, r0
 802078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802079a:	f43f aedc 	beq.w	8020556 <__adddf3+0xe6>
 802079e:	f04f 0203 	mov.w	r2, #3
 80207a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80207a6:	bf18      	it	ne
 80207a8:	3203      	addne	r2, #3
 80207aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80207ae:	bf18      	it	ne
 80207b0:	3203      	addne	r2, #3
 80207b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80207b6:	f1c2 0320 	rsb	r3, r2, #32
 80207ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80207be:	fa20 f002 	lsr.w	r0, r0, r2
 80207c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80207c6:	ea40 000e 	orr.w	r0, r0, lr
 80207ca:	fa21 f102 	lsr.w	r1, r1, r2
 80207ce:	4414      	add	r4, r2
 80207d0:	e6c1      	b.n	8020556 <__adddf3+0xe6>
 80207d2:	bf00      	nop

080207d4 <__aeabi_dmul>:
 80207d4:	b570      	push	{r4, r5, r6, lr}
 80207d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80207da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80207de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80207e2:	bf1d      	ittte	ne
 80207e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80207e8:	ea94 0f0c 	teqne	r4, ip
 80207ec:	ea95 0f0c 	teqne	r5, ip
 80207f0:	f000 f8de 	bleq	80209b0 <__aeabi_dmul+0x1dc>
 80207f4:	442c      	add	r4, r5
 80207f6:	ea81 0603 	eor.w	r6, r1, r3
 80207fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80207fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020802:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8020806:	bf18      	it	ne
 8020808:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 802080c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020810:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020814:	d038      	beq.n	8020888 <__aeabi_dmul+0xb4>
 8020816:	fba0 ce02 	umull	ip, lr, r0, r2
 802081a:	f04f 0500 	mov.w	r5, #0
 802081e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020822:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8020826:	fbe0 e503 	umlal	lr, r5, r0, r3
 802082a:	f04f 0600 	mov.w	r6, #0
 802082e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020832:	f09c 0f00 	teq	ip, #0
 8020836:	bf18      	it	ne
 8020838:	f04e 0e01 	orrne.w	lr, lr, #1
 802083c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020840:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020844:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8020848:	d204      	bcs.n	8020854 <__aeabi_dmul+0x80>
 802084a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 802084e:	416d      	adcs	r5, r5
 8020850:	eb46 0606 	adc.w	r6, r6, r6
 8020854:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8020858:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 802085c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020860:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020864:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8020868:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802086c:	bf88      	it	hi
 802086e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020872:	d81e      	bhi.n	80208b2 <__aeabi_dmul+0xde>
 8020874:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8020878:	bf08      	it	eq
 802087a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 802087e:	f150 0000 	adcs.w	r0, r0, #0
 8020882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8020886:	bd70      	pop	{r4, r5, r6, pc}
 8020888:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 802088c:	ea46 0101 	orr.w	r1, r6, r1
 8020890:	ea40 0002 	orr.w	r0, r0, r2
 8020894:	ea81 0103 	eor.w	r1, r1, r3
 8020898:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 802089c:	bfc2      	ittt	gt
 802089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80208a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80208a6:	bd70      	popgt	{r4, r5, r6, pc}
 80208a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80208ac:	f04f 0e00 	mov.w	lr, #0
 80208b0:	3c01      	subs	r4, #1
 80208b2:	f300 80ab 	bgt.w	8020a0c <__aeabi_dmul+0x238>
 80208b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80208ba:	bfde      	ittt	le
 80208bc:	2000      	movle	r0, #0
 80208be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80208c2:	bd70      	pople	{r4, r5, r6, pc}
 80208c4:	f1c4 0400 	rsb	r4, r4, #0
 80208c8:	3c20      	subs	r4, #32
 80208ca:	da35      	bge.n	8020938 <__aeabi_dmul+0x164>
 80208cc:	340c      	adds	r4, #12
 80208ce:	dc1b      	bgt.n	8020908 <__aeabi_dmul+0x134>
 80208d0:	f104 0414 	add.w	r4, r4, #20
 80208d4:	f1c4 0520 	rsb	r5, r4, #32
 80208d8:	fa00 f305 	lsl.w	r3, r0, r5
 80208dc:	fa20 f004 	lsr.w	r0, r0, r4
 80208e0:	fa01 f205 	lsl.w	r2, r1, r5
 80208e4:	ea40 0002 	orr.w	r0, r0, r2
 80208e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80208ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80208f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80208f4:	fa21 f604 	lsr.w	r6, r1, r4
 80208f8:	eb42 0106 	adc.w	r1, r2, r6
 80208fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020900:	bf08      	it	eq
 8020902:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020906:	bd70      	pop	{r4, r5, r6, pc}
 8020908:	f1c4 040c 	rsb	r4, r4, #12
 802090c:	f1c4 0520 	rsb	r5, r4, #32
 8020910:	fa00 f304 	lsl.w	r3, r0, r4
 8020914:	fa20 f005 	lsr.w	r0, r0, r5
 8020918:	fa01 f204 	lsl.w	r2, r1, r4
 802091c:	ea40 0002 	orr.w	r0, r0, r2
 8020920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020924:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020928:	f141 0100 	adc.w	r1, r1, #0
 802092c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020930:	bf08      	it	eq
 8020932:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020936:	bd70      	pop	{r4, r5, r6, pc}
 8020938:	f1c4 0520 	rsb	r5, r4, #32
 802093c:	fa00 f205 	lsl.w	r2, r0, r5
 8020940:	ea4e 0e02 	orr.w	lr, lr, r2
 8020944:	fa20 f304 	lsr.w	r3, r0, r4
 8020948:	fa01 f205 	lsl.w	r2, r1, r5
 802094c:	ea43 0302 	orr.w	r3, r3, r2
 8020950:	fa21 f004 	lsr.w	r0, r1, r4
 8020954:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020958:	fa21 f204 	lsr.w	r2, r1, r4
 802095c:	ea20 0002 	bic.w	r0, r0, r2
 8020960:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020964:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020968:	bf08      	it	eq
 802096a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802096e:	bd70      	pop	{r4, r5, r6, pc}
 8020970:	f094 0f00 	teq	r4, #0
 8020974:	d10f      	bne.n	8020996 <__aeabi_dmul+0x1c2>
 8020976:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802097a:	0040      	lsls	r0, r0, #1
 802097c:	eb41 0101 	adc.w	r1, r1, r1
 8020980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020984:	bf08      	it	eq
 8020986:	3c01      	subeq	r4, #1
 8020988:	d0f7      	beq.n	802097a <__aeabi_dmul+0x1a6>
 802098a:	ea41 0106 	orr.w	r1, r1, r6
 802098e:	f095 0f00 	teq	r5, #0
 8020992:	bf18      	it	ne
 8020994:	4770      	bxne	lr
 8020996:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802099a:	0052      	lsls	r2, r2, #1
 802099c:	eb43 0303 	adc.w	r3, r3, r3
 80209a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80209a4:	bf08      	it	eq
 80209a6:	3d01      	subeq	r5, #1
 80209a8:	d0f7      	beq.n	802099a <__aeabi_dmul+0x1c6>
 80209aa:	ea43 0306 	orr.w	r3, r3, r6
 80209ae:	4770      	bx	lr
 80209b0:	ea94 0f0c 	teq	r4, ip
 80209b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80209b8:	bf18      	it	ne
 80209ba:	ea95 0f0c 	teqne	r5, ip
 80209be:	d00c      	beq.n	80209da <__aeabi_dmul+0x206>
 80209c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80209c4:	bf18      	it	ne
 80209c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80209ca:	d1d1      	bne.n	8020970 <__aeabi_dmul+0x19c>
 80209cc:	ea81 0103 	eor.w	r1, r1, r3
 80209d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80209d4:	f04f 0000 	mov.w	r0, #0
 80209d8:	bd70      	pop	{r4, r5, r6, pc}
 80209da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80209de:	bf06      	itte	eq
 80209e0:	4610      	moveq	r0, r2
 80209e2:	4619      	moveq	r1, r3
 80209e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80209e8:	d019      	beq.n	8020a1e <__aeabi_dmul+0x24a>
 80209ea:	ea94 0f0c 	teq	r4, ip
 80209ee:	d102      	bne.n	80209f6 <__aeabi_dmul+0x222>
 80209f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80209f4:	d113      	bne.n	8020a1e <__aeabi_dmul+0x24a>
 80209f6:	ea95 0f0c 	teq	r5, ip
 80209fa:	d105      	bne.n	8020a08 <__aeabi_dmul+0x234>
 80209fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020a00:	bf1c      	itt	ne
 8020a02:	4610      	movne	r0, r2
 8020a04:	4619      	movne	r1, r3
 8020a06:	d10a      	bne.n	8020a1e <__aeabi_dmul+0x24a>
 8020a08:	ea81 0103 	eor.w	r1, r1, r3
 8020a0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020a10:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020a14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020a18:	f04f 0000 	mov.w	r0, #0
 8020a1c:	bd70      	pop	{r4, r5, r6, pc}
 8020a1e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020a22:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8020a26:	bd70      	pop	{r4, r5, r6, pc}

08020a28 <__aeabi_ddiv>:
 8020a28:	b570      	push	{r4, r5, r6, lr}
 8020a2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020a2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020a32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020a36:	bf1d      	ittte	ne
 8020a38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020a3c:	ea94 0f0c 	teqne	r4, ip
 8020a40:	ea95 0f0c 	teqne	r5, ip
 8020a44:	f000 f8a7 	bleq	8020b96 <__aeabi_ddiv+0x16e>
 8020a48:	eba4 0405 	sub.w	r4, r4, r5
 8020a4c:	ea81 0e03 	eor.w	lr, r1, r3
 8020a50:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020a54:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8020a58:	f000 8088 	beq.w	8020b6c <__aeabi_ddiv+0x144>
 8020a5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020a60:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020a64:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8020a68:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020a6c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020a70:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020a74:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8020a78:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020a7c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020a80:	429d      	cmp	r5, r3
 8020a82:	bf08      	it	eq
 8020a84:	4296      	cmpeq	r6, r2
 8020a86:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8020a8a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020a8e:	d202      	bcs.n	8020a96 <__aeabi_ddiv+0x6e>
 8020a90:	085b      	lsrs	r3, r3, #1
 8020a92:	ea4f 0232 	mov.w	r2, r2, rrx
 8020a96:	1ab6      	subs	r6, r6, r2
 8020a98:	eb65 0503 	sbc.w	r5, r5, r3
 8020a9c:	085b      	lsrs	r3, r3, #1
 8020a9e:	ea4f 0232 	mov.w	r2, r2, rrx
 8020aa2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8020aa6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8020aaa:	ebb6 0e02 	subs.w	lr, r6, r2
 8020aae:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020ab2:	bf22      	ittt	cs
 8020ab4:	1ab6      	subcs	r6, r6, r2
 8020ab6:	4675      	movcs	r5, lr
 8020ab8:	ea40 000c 	orrcs.w	r0, r0, ip
 8020abc:	085b      	lsrs	r3, r3, #1
 8020abe:	ea4f 0232 	mov.w	r2, r2, rrx
 8020ac2:	ebb6 0e02 	subs.w	lr, r6, r2
 8020ac6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020aca:	bf22      	ittt	cs
 8020acc:	1ab6      	subcs	r6, r6, r2
 8020ace:	4675      	movcs	r5, lr
 8020ad0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8020ad4:	085b      	lsrs	r3, r3, #1
 8020ad6:	ea4f 0232 	mov.w	r2, r2, rrx
 8020ada:	ebb6 0e02 	subs.w	lr, r6, r2
 8020ade:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020ae2:	bf22      	ittt	cs
 8020ae4:	1ab6      	subcs	r6, r6, r2
 8020ae6:	4675      	movcs	r5, lr
 8020ae8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020aec:	085b      	lsrs	r3, r3, #1
 8020aee:	ea4f 0232 	mov.w	r2, r2, rrx
 8020af2:	ebb6 0e02 	subs.w	lr, r6, r2
 8020af6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020afa:	bf22      	ittt	cs
 8020afc:	1ab6      	subcs	r6, r6, r2
 8020afe:	4675      	movcs	r5, lr
 8020b00:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020b04:	ea55 0e06 	orrs.w	lr, r5, r6
 8020b08:	d018      	beq.n	8020b3c <__aeabi_ddiv+0x114>
 8020b0a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020b0e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020b12:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8020b16:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8020b1a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020b1e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020b22:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8020b26:	d1c0      	bne.n	8020aaa <__aeabi_ddiv+0x82>
 8020b28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020b2c:	d10b      	bne.n	8020b46 <__aeabi_ddiv+0x11e>
 8020b2e:	ea41 0100 	orr.w	r1, r1, r0
 8020b32:	f04f 0000 	mov.w	r0, #0
 8020b36:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8020b3a:	e7b6      	b.n	8020aaa <__aeabi_ddiv+0x82>
 8020b3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020b40:	bf04      	itt	eq
 8020b42:	4301      	orreq	r1, r0
 8020b44:	2000      	moveq	r0, #0
 8020b46:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020b4a:	bf88      	it	hi
 8020b4c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020b50:	f63f aeaf 	bhi.w	80208b2 <__aeabi_dmul+0xde>
 8020b54:	ebb5 0c03 	subs.w	ip, r5, r3
 8020b58:	bf04      	itt	eq
 8020b5a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020b5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020b62:	f150 0000 	adcs.w	r0, r0, #0
 8020b66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8020b6a:	bd70      	pop	{r4, r5, r6, pc}
 8020b6c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020b70:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020b74:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8020b78:	bfc2      	ittt	gt
 8020b7a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020b7e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020b82:	bd70      	popgt	{r4, r5, r6, pc}
 8020b84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020b88:	f04f 0e00 	mov.w	lr, #0
 8020b8c:	3c01      	subs	r4, #1
 8020b8e:	e690      	b.n	80208b2 <__aeabi_dmul+0xde>
 8020b90:	ea45 0e06 	orr.w	lr, r5, r6
 8020b94:	e68d      	b.n	80208b2 <__aeabi_dmul+0xde>
 8020b96:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8020b9a:	ea94 0f0c 	teq	r4, ip
 8020b9e:	bf08      	it	eq
 8020ba0:	ea95 0f0c 	teqeq	r5, ip
 8020ba4:	f43f af3b 	beq.w	8020a1e <__aeabi_dmul+0x24a>
 8020ba8:	ea94 0f0c 	teq	r4, ip
 8020bac:	d10a      	bne.n	8020bc4 <__aeabi_ddiv+0x19c>
 8020bae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020bb2:	f47f af34 	bne.w	8020a1e <__aeabi_dmul+0x24a>
 8020bb6:	ea95 0f0c 	teq	r5, ip
 8020bba:	f47f af25 	bne.w	8020a08 <__aeabi_dmul+0x234>
 8020bbe:	4610      	mov	r0, r2
 8020bc0:	4619      	mov	r1, r3
 8020bc2:	e72c      	b.n	8020a1e <__aeabi_dmul+0x24a>
 8020bc4:	ea95 0f0c 	teq	r5, ip
 8020bc8:	d106      	bne.n	8020bd8 <__aeabi_ddiv+0x1b0>
 8020bca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020bce:	f43f aefd 	beq.w	80209cc <__aeabi_dmul+0x1f8>
 8020bd2:	4610      	mov	r0, r2
 8020bd4:	4619      	mov	r1, r3
 8020bd6:	e722      	b.n	8020a1e <__aeabi_dmul+0x24a>
 8020bd8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020bdc:	bf18      	it	ne
 8020bde:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020be2:	f47f aec5 	bne.w	8020970 <__aeabi_dmul+0x19c>
 8020be6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8020bea:	f47f af0d 	bne.w	8020a08 <__aeabi_dmul+0x234>
 8020bee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020bf2:	f47f aeeb 	bne.w	80209cc <__aeabi_dmul+0x1f8>
 8020bf6:	e712      	b.n	8020a1e <__aeabi_dmul+0x24a>

08020bf8 <__gedf2>:
 8020bf8:	f04f 3cff 	mov.w	ip, #4294967295
 8020bfc:	e006      	b.n	8020c0c <__cmpdf2+0x4>
 8020bfe:	bf00      	nop

08020c00 <__ledf2>:
 8020c00:	f04f 0c01 	mov.w	ip, #1
 8020c04:	e002      	b.n	8020c0c <__cmpdf2+0x4>
 8020c06:	bf00      	nop

08020c08 <__cmpdf2>:
 8020c08:	f04f 0c01 	mov.w	ip, #1
 8020c0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020c10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020c14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020c18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020c1c:	bf18      	it	ne
 8020c1e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020c22:	d01b      	beq.n	8020c5c <__cmpdf2+0x54>
 8020c24:	b001      	add	sp, #4
 8020c26:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8020c2a:	bf0c      	ite	eq
 8020c2c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020c30:	ea91 0f03 	teqne	r1, r3
 8020c34:	bf02      	ittt	eq
 8020c36:	ea90 0f02 	teqeq	r0, r2
 8020c3a:	2000      	moveq	r0, #0
 8020c3c:	4770      	bxeq	lr
 8020c3e:	f110 0f00 	cmn.w	r0, #0
 8020c42:	ea91 0f03 	teq	r1, r3
 8020c46:	bf58      	it	pl
 8020c48:	4299      	cmppl	r1, r3
 8020c4a:	bf08      	it	eq
 8020c4c:	4290      	cmpeq	r0, r2
 8020c4e:	bf2c      	ite	cs
 8020c50:	17d8      	asrcs	r0, r3, #31
 8020c52:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8020c56:	f040 0001 	orr.w	r0, r0, #1
 8020c5a:	4770      	bx	lr
 8020c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020c64:	d102      	bne.n	8020c6c <__cmpdf2+0x64>
 8020c66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020c6a:	d107      	bne.n	8020c7c <__cmpdf2+0x74>
 8020c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020c74:	d1d6      	bne.n	8020c24 <__cmpdf2+0x1c>
 8020c76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020c7a:	d0d3      	beq.n	8020c24 <__cmpdf2+0x1c>
 8020c7c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020c80:	4770      	bx	lr
 8020c82:	bf00      	nop

08020c84 <__aeabi_cdrcmple>:
 8020c84:	4684      	mov	ip, r0
 8020c86:	4610      	mov	r0, r2
 8020c88:	4662      	mov	r2, ip
 8020c8a:	468c      	mov	ip, r1
 8020c8c:	4619      	mov	r1, r3
 8020c8e:	4663      	mov	r3, ip
 8020c90:	e000      	b.n	8020c94 <__aeabi_cdcmpeq>
 8020c92:	bf00      	nop

08020c94 <__aeabi_cdcmpeq>:
 8020c94:	b501      	push	{r0, lr}
 8020c96:	f7ff ffb7 	bl	8020c08 <__cmpdf2>
 8020c9a:	2800      	cmp	r0, #0
 8020c9c:	bf48      	it	mi
 8020c9e:	f110 0f00 	cmnmi.w	r0, #0
 8020ca2:	bd01      	pop	{r0, pc}

08020ca4 <__aeabi_dcmpeq>:
 8020ca4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020ca8:	f7ff fff4 	bl	8020c94 <__aeabi_cdcmpeq>
 8020cac:	bf0c      	ite	eq
 8020cae:	2001      	moveq	r0, #1
 8020cb0:	2000      	movne	r0, #0
 8020cb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8020cb6:	bf00      	nop

08020cb8 <__aeabi_dcmplt>:
 8020cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020cbc:	f7ff ffea 	bl	8020c94 <__aeabi_cdcmpeq>
 8020cc0:	bf34      	ite	cc
 8020cc2:	2001      	movcc	r0, #1
 8020cc4:	2000      	movcs	r0, #0
 8020cc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8020cca:	bf00      	nop

08020ccc <__aeabi_dcmple>:
 8020ccc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020cd0:	f7ff ffe0 	bl	8020c94 <__aeabi_cdcmpeq>
 8020cd4:	bf94      	ite	ls
 8020cd6:	2001      	movls	r0, #1
 8020cd8:	2000      	movhi	r0, #0
 8020cda:	f85d fb08 	ldr.w	pc, [sp], #8
 8020cde:	bf00      	nop

08020ce0 <__aeabi_dcmpge>:
 8020ce0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020ce4:	f7ff ffce 	bl	8020c84 <__aeabi_cdrcmple>
 8020ce8:	bf94      	ite	ls
 8020cea:	2001      	movls	r0, #1
 8020cec:	2000      	movhi	r0, #0
 8020cee:	f85d fb08 	ldr.w	pc, [sp], #8
 8020cf2:	bf00      	nop

08020cf4 <__aeabi_dcmpgt>:
 8020cf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020cf8:	f7ff ffc4 	bl	8020c84 <__aeabi_cdrcmple>
 8020cfc:	bf34      	ite	cc
 8020cfe:	2001      	movcc	r0, #1
 8020d00:	2000      	movcs	r0, #0
 8020d02:	f85d fb08 	ldr.w	pc, [sp], #8
 8020d06:	bf00      	nop

08020d08 <__aeabi_d2f>:
 8020d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020d0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8020d10:	bf24      	itt	cs
 8020d12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8020d16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8020d1a:	d90d      	bls.n	8020d38 <__aeabi_d2f+0x30>
 8020d1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020d20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020d24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020d28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020d2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020d30:	bf08      	it	eq
 8020d32:	f020 0001 	biceq.w	r0, r0, #1
 8020d36:	4770      	bx	lr
 8020d38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020d3c:	d121      	bne.n	8020d82 <__aeabi_d2f+0x7a>
 8020d3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020d42:	bfbc      	itt	lt
 8020d44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8020d48:	4770      	bxlt	lr
 8020d4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020d4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020d52:	f1c2 0218 	rsb	r2, r2, #24
 8020d56:	f1c2 0c20 	rsb	ip, r2, #32
 8020d5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8020d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8020d62:	bf18      	it	ne
 8020d64:	f040 0001 	orrne.w	r0, r0, #1
 8020d68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020d6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020d70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020d74:	ea40 000c 	orr.w	r0, r0, ip
 8020d78:	fa23 f302 	lsr.w	r3, r3, r2
 8020d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020d80:	e7cc      	b.n	8020d1c <__aeabi_d2f+0x14>
 8020d82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8020d86:	d107      	bne.n	8020d98 <__aeabi_d2f+0x90>
 8020d88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020d8c:	bf1e      	ittt	ne
 8020d8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020d92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8020d96:	4770      	bxne	lr
 8020d98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020da4:	4770      	bx	lr
 8020da6:	bf00      	nop

08020da8 <__aeabi_frsub>:
 8020da8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8020dac:	e002      	b.n	8020db4 <__addsf3>
 8020dae:	bf00      	nop

08020db0 <__aeabi_fsub>:
 8020db0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08020db4 <__addsf3>:
 8020db4:	0042      	lsls	r2, r0, #1
 8020db6:	bf1f      	itttt	ne
 8020db8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8020dbc:	ea92 0f03 	teqne	r2, r3
 8020dc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8020dc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8020dc8:	d06a      	beq.n	8020ea0 <__addsf3+0xec>
 8020dca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8020dce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8020dd2:	bfc1      	itttt	gt
 8020dd4:	18d2      	addgt	r2, r2, r3
 8020dd6:	4041      	eorgt	r1, r0
 8020dd8:	4048      	eorgt	r0, r1
 8020dda:	4041      	eorgt	r1, r0
 8020ddc:	bfb8      	it	lt
 8020dde:	425b      	neglt	r3, r3
 8020de0:	2b19      	cmp	r3, #25
 8020de2:	bf88      	it	hi
 8020de4:	4770      	bxhi	lr
 8020de6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8020dea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020dee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8020df2:	bf18      	it	ne
 8020df4:	4240      	negne	r0, r0
 8020df6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020dfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8020dfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8020e02:	bf18      	it	ne
 8020e04:	4249      	negne	r1, r1
 8020e06:	ea92 0f03 	teq	r2, r3
 8020e0a:	d03f      	beq.n	8020e8c <__addsf3+0xd8>
 8020e0c:	f1a2 0201 	sub.w	r2, r2, #1
 8020e10:	fa41 fc03 	asr.w	ip, r1, r3
 8020e14:	eb10 000c 	adds.w	r0, r0, ip
 8020e18:	f1c3 0320 	rsb	r3, r3, #32
 8020e1c:	fa01 f103 	lsl.w	r1, r1, r3
 8020e20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8020e24:	d502      	bpl.n	8020e2c <__addsf3+0x78>
 8020e26:	4249      	negs	r1, r1
 8020e28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8020e2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8020e30:	d313      	bcc.n	8020e5a <__addsf3+0xa6>
 8020e32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8020e36:	d306      	bcc.n	8020e46 <__addsf3+0x92>
 8020e38:	0840      	lsrs	r0, r0, #1
 8020e3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8020e3e:	f102 0201 	add.w	r2, r2, #1
 8020e42:	2afe      	cmp	r2, #254	; 0xfe
 8020e44:	d251      	bcs.n	8020eea <__addsf3+0x136>
 8020e46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8020e4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8020e4e:	bf08      	it	eq
 8020e50:	f020 0001 	biceq.w	r0, r0, #1
 8020e54:	ea40 0003 	orr.w	r0, r0, r3
 8020e58:	4770      	bx	lr
 8020e5a:	0049      	lsls	r1, r1, #1
 8020e5c:	eb40 0000 	adc.w	r0, r0, r0
 8020e60:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8020e64:	f1a2 0201 	sub.w	r2, r2, #1
 8020e68:	d1ed      	bne.n	8020e46 <__addsf3+0x92>
 8020e6a:	fab0 fc80 	clz	ip, r0
 8020e6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8020e72:	ebb2 020c 	subs.w	r2, r2, ip
 8020e76:	fa00 f00c 	lsl.w	r0, r0, ip
 8020e7a:	bfaa      	itet	ge
 8020e7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8020e80:	4252      	neglt	r2, r2
 8020e82:	4318      	orrge	r0, r3
 8020e84:	bfbc      	itt	lt
 8020e86:	40d0      	lsrlt	r0, r2
 8020e88:	4318      	orrlt	r0, r3
 8020e8a:	4770      	bx	lr
 8020e8c:	f092 0f00 	teq	r2, #0
 8020e90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8020e94:	bf06      	itte	eq
 8020e96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8020e9a:	3201      	addeq	r2, #1
 8020e9c:	3b01      	subne	r3, #1
 8020e9e:	e7b5      	b.n	8020e0c <__addsf3+0x58>
 8020ea0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8020ea4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8020ea8:	bf18      	it	ne
 8020eaa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8020eae:	d021      	beq.n	8020ef4 <__addsf3+0x140>
 8020eb0:	ea92 0f03 	teq	r2, r3
 8020eb4:	d004      	beq.n	8020ec0 <__addsf3+0x10c>
 8020eb6:	f092 0f00 	teq	r2, #0
 8020eba:	bf08      	it	eq
 8020ebc:	4608      	moveq	r0, r1
 8020ebe:	4770      	bx	lr
 8020ec0:	ea90 0f01 	teq	r0, r1
 8020ec4:	bf1c      	itt	ne
 8020ec6:	2000      	movne	r0, #0
 8020ec8:	4770      	bxne	lr
 8020eca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8020ece:	d104      	bne.n	8020eda <__addsf3+0x126>
 8020ed0:	0040      	lsls	r0, r0, #1
 8020ed2:	bf28      	it	cs
 8020ed4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8020ed8:	4770      	bx	lr
 8020eda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8020ede:	bf3c      	itt	cc
 8020ee0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8020ee4:	4770      	bxcc	lr
 8020ee6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8020eea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8020eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020ef2:	4770      	bx	lr
 8020ef4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8020ef8:	bf16      	itet	ne
 8020efa:	4608      	movne	r0, r1
 8020efc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8020f00:	4601      	movne	r1, r0
 8020f02:	0242      	lsls	r2, r0, #9
 8020f04:	bf06      	itte	eq
 8020f06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8020f0a:	ea90 0f01 	teqeq	r0, r1
 8020f0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8020f12:	4770      	bx	lr

08020f14 <__aeabi_ui2f>:
 8020f14:	f04f 0300 	mov.w	r3, #0
 8020f18:	e004      	b.n	8020f24 <__aeabi_i2f+0x8>
 8020f1a:	bf00      	nop

08020f1c <__aeabi_i2f>:
 8020f1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8020f20:	bf48      	it	mi
 8020f22:	4240      	negmi	r0, r0
 8020f24:	ea5f 0c00 	movs.w	ip, r0
 8020f28:	bf08      	it	eq
 8020f2a:	4770      	bxeq	lr
 8020f2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8020f30:	4601      	mov	r1, r0
 8020f32:	f04f 0000 	mov.w	r0, #0
 8020f36:	e01c      	b.n	8020f72 <__aeabi_l2f+0x2a>

08020f38 <__aeabi_ul2f>:
 8020f38:	ea50 0201 	orrs.w	r2, r0, r1
 8020f3c:	bf08      	it	eq
 8020f3e:	4770      	bxeq	lr
 8020f40:	f04f 0300 	mov.w	r3, #0
 8020f44:	e00a      	b.n	8020f5c <__aeabi_l2f+0x14>
 8020f46:	bf00      	nop

08020f48 <__aeabi_l2f>:
 8020f48:	ea50 0201 	orrs.w	r2, r0, r1
 8020f4c:	bf08      	it	eq
 8020f4e:	4770      	bxeq	lr
 8020f50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8020f54:	d502      	bpl.n	8020f5c <__aeabi_l2f+0x14>
 8020f56:	4240      	negs	r0, r0
 8020f58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020f5c:	ea5f 0c01 	movs.w	ip, r1
 8020f60:	bf02      	ittt	eq
 8020f62:	4684      	moveq	ip, r0
 8020f64:	4601      	moveq	r1, r0
 8020f66:	2000      	moveq	r0, #0
 8020f68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8020f6c:	bf08      	it	eq
 8020f6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8020f72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8020f76:	fabc f28c 	clz	r2, ip
 8020f7a:	3a08      	subs	r2, #8
 8020f7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8020f80:	db10      	blt.n	8020fa4 <__aeabi_l2f+0x5c>
 8020f82:	fa01 fc02 	lsl.w	ip, r1, r2
 8020f86:	4463      	add	r3, ip
 8020f88:	fa00 fc02 	lsl.w	ip, r0, r2
 8020f8c:	f1c2 0220 	rsb	r2, r2, #32
 8020f90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8020f94:	fa20 f202 	lsr.w	r2, r0, r2
 8020f98:	eb43 0002 	adc.w	r0, r3, r2
 8020f9c:	bf08      	it	eq
 8020f9e:	f020 0001 	biceq.w	r0, r0, #1
 8020fa2:	4770      	bx	lr
 8020fa4:	f102 0220 	add.w	r2, r2, #32
 8020fa8:	fa01 fc02 	lsl.w	ip, r1, r2
 8020fac:	f1c2 0220 	rsb	r2, r2, #32
 8020fb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8020fb4:	fa21 f202 	lsr.w	r2, r1, r2
 8020fb8:	eb43 0002 	adc.w	r0, r3, r2
 8020fbc:	bf08      	it	eq
 8020fbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8020fc2:	4770      	bx	lr

08020fc4 <__aeabi_fmul>:
 8020fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8020fcc:	bf1e      	ittt	ne
 8020fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8020fd2:	ea92 0f0c 	teqne	r2, ip
 8020fd6:	ea93 0f0c 	teqne	r3, ip
 8020fda:	d06f      	beq.n	80210bc <__aeabi_fmul+0xf8>
 8020fdc:	441a      	add	r2, r3
 8020fde:	ea80 0c01 	eor.w	ip, r0, r1
 8020fe2:	0240      	lsls	r0, r0, #9
 8020fe4:	bf18      	it	ne
 8020fe6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8020fea:	d01e      	beq.n	802102a <__aeabi_fmul+0x66>
 8020fec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8020ff0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8020ff4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8020ff8:	fba0 3101 	umull	r3, r1, r0, r1
 8020ffc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8021000:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8021004:	bf3e      	ittt	cc
 8021006:	0049      	lslcc	r1, r1, #1
 8021008:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 802100c:	005b      	lslcc	r3, r3, #1
 802100e:	ea40 0001 	orr.w	r0, r0, r1
 8021012:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8021016:	2afd      	cmp	r2, #253	; 0xfd
 8021018:	d81d      	bhi.n	8021056 <__aeabi_fmul+0x92>
 802101a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802101e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8021022:	bf08      	it	eq
 8021024:	f020 0001 	biceq.w	r0, r0, #1
 8021028:	4770      	bx	lr
 802102a:	f090 0f00 	teq	r0, #0
 802102e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8021032:	bf08      	it	eq
 8021034:	0249      	lsleq	r1, r1, #9
 8021036:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 802103a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 802103e:	3a7f      	subs	r2, #127	; 0x7f
 8021040:	bfc2      	ittt	gt
 8021042:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8021046:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 802104a:	4770      	bxgt	lr
 802104c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8021050:	f04f 0300 	mov.w	r3, #0
 8021054:	3a01      	subs	r2, #1
 8021056:	dc5d      	bgt.n	8021114 <__aeabi_fmul+0x150>
 8021058:	f112 0f19 	cmn.w	r2, #25
 802105c:	bfdc      	itt	le
 802105e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8021062:	4770      	bxle	lr
 8021064:	f1c2 0200 	rsb	r2, r2, #0
 8021068:	0041      	lsls	r1, r0, #1
 802106a:	fa21 f102 	lsr.w	r1, r1, r2
 802106e:	f1c2 0220 	rsb	r2, r2, #32
 8021072:	fa00 fc02 	lsl.w	ip, r0, r2
 8021076:	ea5f 0031 	movs.w	r0, r1, rrx
 802107a:	f140 0000 	adc.w	r0, r0, #0
 802107e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8021082:	bf08      	it	eq
 8021084:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8021088:	4770      	bx	lr
 802108a:	f092 0f00 	teq	r2, #0
 802108e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8021092:	bf02      	ittt	eq
 8021094:	0040      	lsleq	r0, r0, #1
 8021096:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 802109a:	3a01      	subeq	r2, #1
 802109c:	d0f9      	beq.n	8021092 <__aeabi_fmul+0xce>
 802109e:	ea40 000c 	orr.w	r0, r0, ip
 80210a2:	f093 0f00 	teq	r3, #0
 80210a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80210aa:	bf02      	ittt	eq
 80210ac:	0049      	lsleq	r1, r1, #1
 80210ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80210b2:	3b01      	subeq	r3, #1
 80210b4:	d0f9      	beq.n	80210aa <__aeabi_fmul+0xe6>
 80210b6:	ea41 010c 	orr.w	r1, r1, ip
 80210ba:	e78f      	b.n	8020fdc <__aeabi_fmul+0x18>
 80210bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80210c0:	ea92 0f0c 	teq	r2, ip
 80210c4:	bf18      	it	ne
 80210c6:	ea93 0f0c 	teqne	r3, ip
 80210ca:	d00a      	beq.n	80210e2 <__aeabi_fmul+0x11e>
 80210cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80210d0:	bf18      	it	ne
 80210d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80210d6:	d1d8      	bne.n	802108a <__aeabi_fmul+0xc6>
 80210d8:	ea80 0001 	eor.w	r0, r0, r1
 80210dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80210e0:	4770      	bx	lr
 80210e2:	f090 0f00 	teq	r0, #0
 80210e6:	bf17      	itett	ne
 80210e8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80210ec:	4608      	moveq	r0, r1
 80210ee:	f091 0f00 	teqne	r1, #0
 80210f2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80210f6:	d014      	beq.n	8021122 <__aeabi_fmul+0x15e>
 80210f8:	ea92 0f0c 	teq	r2, ip
 80210fc:	d101      	bne.n	8021102 <__aeabi_fmul+0x13e>
 80210fe:	0242      	lsls	r2, r0, #9
 8021100:	d10f      	bne.n	8021122 <__aeabi_fmul+0x15e>
 8021102:	ea93 0f0c 	teq	r3, ip
 8021106:	d103      	bne.n	8021110 <__aeabi_fmul+0x14c>
 8021108:	024b      	lsls	r3, r1, #9
 802110a:	bf18      	it	ne
 802110c:	4608      	movne	r0, r1
 802110e:	d108      	bne.n	8021122 <__aeabi_fmul+0x15e>
 8021110:	ea80 0001 	eor.w	r0, r0, r1
 8021114:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8021118:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 802111c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8021120:	4770      	bx	lr
 8021122:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8021126:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 802112a:	4770      	bx	lr

0802112c <__aeabi_fdiv>:
 802112c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8021130:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8021134:	bf1e      	ittt	ne
 8021136:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 802113a:	ea92 0f0c 	teqne	r2, ip
 802113e:	ea93 0f0c 	teqne	r3, ip
 8021142:	d069      	beq.n	8021218 <__aeabi_fdiv+0xec>
 8021144:	eba2 0203 	sub.w	r2, r2, r3
 8021148:	ea80 0c01 	eor.w	ip, r0, r1
 802114c:	0249      	lsls	r1, r1, #9
 802114e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8021152:	d037      	beq.n	80211c4 <__aeabi_fdiv+0x98>
 8021154:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8021158:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 802115c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8021160:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8021164:	428b      	cmp	r3, r1
 8021166:	bf38      	it	cc
 8021168:	005b      	lslcc	r3, r3, #1
 802116a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 802116e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8021172:	428b      	cmp	r3, r1
 8021174:	bf24      	itt	cs
 8021176:	1a5b      	subcs	r3, r3, r1
 8021178:	ea40 000c 	orrcs.w	r0, r0, ip
 802117c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8021180:	bf24      	itt	cs
 8021182:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8021186:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 802118a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 802118e:	bf24      	itt	cs
 8021190:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8021194:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8021198:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 802119c:	bf24      	itt	cs
 802119e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80211a2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80211a6:	011b      	lsls	r3, r3, #4
 80211a8:	bf18      	it	ne
 80211aa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80211ae:	d1e0      	bne.n	8021172 <__aeabi_fdiv+0x46>
 80211b0:	2afd      	cmp	r2, #253	; 0xfd
 80211b2:	f63f af50 	bhi.w	8021056 <__aeabi_fmul+0x92>
 80211b6:	428b      	cmp	r3, r1
 80211b8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80211bc:	bf08      	it	eq
 80211be:	f020 0001 	biceq.w	r0, r0, #1
 80211c2:	4770      	bx	lr
 80211c4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80211c8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80211cc:	327f      	adds	r2, #127	; 0x7f
 80211ce:	bfc2      	ittt	gt
 80211d0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80211d4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80211d8:	4770      	bxgt	lr
 80211da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80211de:	f04f 0300 	mov.w	r3, #0
 80211e2:	3a01      	subs	r2, #1
 80211e4:	e737      	b.n	8021056 <__aeabi_fmul+0x92>
 80211e6:	f092 0f00 	teq	r2, #0
 80211ea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80211ee:	bf02      	ittt	eq
 80211f0:	0040      	lsleq	r0, r0, #1
 80211f2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80211f6:	3a01      	subeq	r2, #1
 80211f8:	d0f9      	beq.n	80211ee <__aeabi_fdiv+0xc2>
 80211fa:	ea40 000c 	orr.w	r0, r0, ip
 80211fe:	f093 0f00 	teq	r3, #0
 8021202:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8021206:	bf02      	ittt	eq
 8021208:	0049      	lsleq	r1, r1, #1
 802120a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 802120e:	3b01      	subeq	r3, #1
 8021210:	d0f9      	beq.n	8021206 <__aeabi_fdiv+0xda>
 8021212:	ea41 010c 	orr.w	r1, r1, ip
 8021216:	e795      	b.n	8021144 <__aeabi_fdiv+0x18>
 8021218:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 802121c:	ea92 0f0c 	teq	r2, ip
 8021220:	d108      	bne.n	8021234 <__aeabi_fdiv+0x108>
 8021222:	0242      	lsls	r2, r0, #9
 8021224:	f47f af7d 	bne.w	8021122 <__aeabi_fmul+0x15e>
 8021228:	ea93 0f0c 	teq	r3, ip
 802122c:	f47f af70 	bne.w	8021110 <__aeabi_fmul+0x14c>
 8021230:	4608      	mov	r0, r1
 8021232:	e776      	b.n	8021122 <__aeabi_fmul+0x15e>
 8021234:	ea93 0f0c 	teq	r3, ip
 8021238:	d104      	bne.n	8021244 <__aeabi_fdiv+0x118>
 802123a:	024b      	lsls	r3, r1, #9
 802123c:	f43f af4c 	beq.w	80210d8 <__aeabi_fmul+0x114>
 8021240:	4608      	mov	r0, r1
 8021242:	e76e      	b.n	8021122 <__aeabi_fmul+0x15e>
 8021244:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8021248:	bf18      	it	ne
 802124a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 802124e:	d1ca      	bne.n	80211e6 <__aeabi_fdiv+0xba>
 8021250:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8021254:	f47f af5c 	bne.w	8021110 <__aeabi_fmul+0x14c>
 8021258:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 802125c:	f47f af3c 	bne.w	80210d8 <__aeabi_fmul+0x114>
 8021260:	e75f      	b.n	8021122 <__aeabi_fmul+0x15e>
 8021262:	bf00      	nop

08021264 <__gesf2>:
 8021264:	f04f 3cff 	mov.w	ip, #4294967295
 8021268:	e006      	b.n	8021278 <__cmpsf2+0x4>
 802126a:	bf00      	nop

0802126c <__lesf2>:
 802126c:	f04f 0c01 	mov.w	ip, #1
 8021270:	e002      	b.n	8021278 <__cmpsf2+0x4>
 8021272:	bf00      	nop

08021274 <__cmpsf2>:
 8021274:	f04f 0c01 	mov.w	ip, #1
 8021278:	f84d cd04 	str.w	ip, [sp, #-4]!
 802127c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8021280:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8021284:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8021288:	bf18      	it	ne
 802128a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 802128e:	d011      	beq.n	80212b4 <__cmpsf2+0x40>
 8021290:	b001      	add	sp, #4
 8021292:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8021296:	bf18      	it	ne
 8021298:	ea90 0f01 	teqne	r0, r1
 802129c:	bf58      	it	pl
 802129e:	ebb2 0003 	subspl.w	r0, r2, r3
 80212a2:	bf88      	it	hi
 80212a4:	17c8      	asrhi	r0, r1, #31
 80212a6:	bf38      	it	cc
 80212a8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80212ac:	bf18      	it	ne
 80212ae:	f040 0001 	orrne.w	r0, r0, #1
 80212b2:	4770      	bx	lr
 80212b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80212b8:	d102      	bne.n	80212c0 <__cmpsf2+0x4c>
 80212ba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80212be:	d105      	bne.n	80212cc <__cmpsf2+0x58>
 80212c0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80212c4:	d1e4      	bne.n	8021290 <__cmpsf2+0x1c>
 80212c6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80212ca:	d0e1      	beq.n	8021290 <__cmpsf2+0x1c>
 80212cc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80212d0:	4770      	bx	lr
 80212d2:	bf00      	nop

080212d4 <__aeabi_cfrcmple>:
 80212d4:	4684      	mov	ip, r0
 80212d6:	4608      	mov	r0, r1
 80212d8:	4661      	mov	r1, ip
 80212da:	e7ff      	b.n	80212dc <__aeabi_cfcmpeq>

080212dc <__aeabi_cfcmpeq>:
 80212dc:	b50f      	push	{r0, r1, r2, r3, lr}
 80212de:	f7ff ffc9 	bl	8021274 <__cmpsf2>
 80212e2:	2800      	cmp	r0, #0
 80212e4:	bf48      	it	mi
 80212e6:	f110 0f00 	cmnmi.w	r0, #0
 80212ea:	bd0f      	pop	{r0, r1, r2, r3, pc}

080212ec <__aeabi_fcmpeq>:
 80212ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80212f0:	f7ff fff4 	bl	80212dc <__aeabi_cfcmpeq>
 80212f4:	bf0c      	ite	eq
 80212f6:	2001      	moveq	r0, #1
 80212f8:	2000      	movne	r0, #0
 80212fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80212fe:	bf00      	nop

08021300 <__aeabi_fcmplt>:
 8021300:	f84d ed08 	str.w	lr, [sp, #-8]!
 8021304:	f7ff ffea 	bl	80212dc <__aeabi_cfcmpeq>
 8021308:	bf34      	ite	cc
 802130a:	2001      	movcc	r0, #1
 802130c:	2000      	movcs	r0, #0
 802130e:	f85d fb08 	ldr.w	pc, [sp], #8
 8021312:	bf00      	nop

08021314 <__aeabi_fcmple>:
 8021314:	f84d ed08 	str.w	lr, [sp, #-8]!
 8021318:	f7ff ffe0 	bl	80212dc <__aeabi_cfcmpeq>
 802131c:	bf94      	ite	ls
 802131e:	2001      	movls	r0, #1
 8021320:	2000      	movhi	r0, #0
 8021322:	f85d fb08 	ldr.w	pc, [sp], #8
 8021326:	bf00      	nop

08021328 <__aeabi_fcmpge>:
 8021328:	f84d ed08 	str.w	lr, [sp, #-8]!
 802132c:	f7ff ffd2 	bl	80212d4 <__aeabi_cfrcmple>
 8021330:	bf94      	ite	ls
 8021332:	2001      	movls	r0, #1
 8021334:	2000      	movhi	r0, #0
 8021336:	f85d fb08 	ldr.w	pc, [sp], #8
 802133a:	bf00      	nop

0802133c <__aeabi_fcmpgt>:
 802133c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8021340:	f7ff ffc8 	bl	80212d4 <__aeabi_cfrcmple>
 8021344:	bf34      	ite	cc
 8021346:	2001      	movcc	r0, #1
 8021348:	2000      	movcs	r0, #0
 802134a:	f85d fb08 	ldr.w	pc, [sp], #8
 802134e:	bf00      	nop

08021350 <__aeabi_f2iz>:
 8021350:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8021354:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8021358:	d30f      	bcc.n	802137a <__aeabi_f2iz+0x2a>
 802135a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 802135e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8021362:	d90d      	bls.n	8021380 <__aeabi_f2iz+0x30>
 8021364:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8021368:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802136c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8021370:	fa23 f002 	lsr.w	r0, r3, r2
 8021374:	bf18      	it	ne
 8021376:	4240      	negne	r0, r0
 8021378:	4770      	bx	lr
 802137a:	f04f 0000 	mov.w	r0, #0
 802137e:	4770      	bx	lr
 8021380:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8021384:	d101      	bne.n	802138a <__aeabi_f2iz+0x3a>
 8021386:	0242      	lsls	r2, r0, #9
 8021388:	d105      	bne.n	8021396 <__aeabi_f2iz+0x46>
 802138a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 802138e:	bf08      	it	eq
 8021390:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8021394:	4770      	bx	lr
 8021396:	f04f 0000 	mov.w	r0, #0
 802139a:	4770      	bx	lr

0802139c <__errno>:
 802139c:	f240 1324 	movw	r3, #292	; 0x124
 80213a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80213a4:	6818      	ldr	r0, [r3, #0]
 80213a6:	4770      	bx	lr

080213a8 <__libc_init_array>:
 80213a8:	b570      	push	{r4, r5, r6, lr}
 80213aa:	f64e 4674 	movw	r6, #60532	; 0xec74
 80213ae:	f64e 4574 	movw	r5, #60532	; 0xec74
 80213b2:	f6c0 0602 	movt	r6, #2050	; 0x802
 80213b6:	f6c0 0502 	movt	r5, #2050	; 0x802
 80213ba:	1b76      	subs	r6, r6, r5
 80213bc:	10b6      	asrs	r6, r6, #2
 80213be:	d006      	beq.n	80213ce <__libc_init_array+0x26>
 80213c0:	2400      	movs	r4, #0
 80213c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80213c6:	3401      	adds	r4, #1
 80213c8:	4798      	blx	r3
 80213ca:	42a6      	cmp	r6, r4
 80213cc:	d1f9      	bne.n	80213c2 <__libc_init_array+0x1a>
 80213ce:	f64e 4678 	movw	r6, #60536	; 0xec78
 80213d2:	f64e 4574 	movw	r5, #60532	; 0xec74
 80213d6:	f6c0 0602 	movt	r6, #2050	; 0x802
 80213da:	f6c0 0502 	movt	r5, #2050	; 0x802
 80213de:	1b76      	subs	r6, r6, r5
 80213e0:	f00d fc38 	bl	802ec54 <_init>
 80213e4:	10b6      	asrs	r6, r6, #2
 80213e6:	d006      	beq.n	80213f6 <__libc_init_array+0x4e>
 80213e8:	2400      	movs	r4, #0
 80213ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80213ee:	3401      	adds	r4, #1
 80213f0:	4798      	blx	r3
 80213f2:	42a6      	cmp	r6, r4
 80213f4:	d1f9      	bne.n	80213ea <__libc_init_array+0x42>
 80213f6:	bd70      	pop	{r4, r5, r6, pc}

080213f8 <memcpy>:
 80213f8:	2a03      	cmp	r2, #3
 80213fa:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80213fe:	d809      	bhi.n	8021414 <memcpy+0x1c>
 8021400:	b12a      	cbz	r2, 802140e <memcpy+0x16>
 8021402:	2300      	movs	r3, #0
 8021404:	5ccc      	ldrb	r4, [r1, r3]
 8021406:	54c4      	strb	r4, [r0, r3]
 8021408:	3301      	adds	r3, #1
 802140a:	4293      	cmp	r3, r2
 802140c:	d1fa      	bne.n	8021404 <memcpy+0xc>
 802140e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8021412:	4770      	bx	lr
 8021414:	0785      	lsls	r5, r0, #30
 8021416:	4402      	add	r2, r0
 8021418:	4603      	mov	r3, r0
 802141a:	d005      	beq.n	8021428 <memcpy+0x30>
 802141c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021420:	f803 4b01 	strb.w	r4, [r3], #1
 8021424:	079c      	lsls	r4, r3, #30
 8021426:	d1f9      	bne.n	802141c <memcpy+0x24>
 8021428:	f011 0503 	ands.w	r5, r1, #3
 802142c:	d042      	beq.n	80214b4 <memcpy+0xbc>
 802142e:	1ad4      	subs	r4, r2, r3
 8021430:	426e      	negs	r6, r5
 8021432:	2c03      	cmp	r4, #3
 8021434:	598f      	ldr	r7, [r1, r6]
 8021436:	dd12      	ble.n	802145e <memcpy+0x66>
 8021438:	f1c5 0c04 	rsb	ip, r5, #4
 802143c:	00ed      	lsls	r5, r5, #3
 802143e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021442:	3104      	adds	r1, #4
 8021444:	fa27 f805 	lsr.w	r8, r7, r5
 8021448:	598c      	ldr	r4, [r1, r6]
 802144a:	4627      	mov	r7, r4
 802144c:	fa04 f40c 	lsl.w	r4, r4, ip
 8021450:	ea44 0408 	orr.w	r4, r4, r8
 8021454:	f843 4b04 	str.w	r4, [r3], #4
 8021458:	1ad4      	subs	r4, r2, r3
 802145a:	2c03      	cmp	r4, #3
 802145c:	dcf1      	bgt.n	8021442 <memcpy+0x4a>
 802145e:	429a      	cmp	r2, r3
 8021460:	d9d5      	bls.n	802140e <memcpy+0x16>
 8021462:	2200      	movs	r2, #0
 8021464:	5c8d      	ldrb	r5, [r1, r2]
 8021466:	549d      	strb	r5, [r3, r2]
 8021468:	3201      	adds	r2, #1
 802146a:	42a2      	cmp	r2, r4
 802146c:	d1fa      	bne.n	8021464 <memcpy+0x6c>
 802146e:	e7ce      	b.n	802140e <memcpy+0x16>
 8021470:	680c      	ldr	r4, [r1, #0]
 8021472:	601c      	str	r4, [r3, #0]
 8021474:	684c      	ldr	r4, [r1, #4]
 8021476:	605c      	str	r4, [r3, #4]
 8021478:	688c      	ldr	r4, [r1, #8]
 802147a:	609c      	str	r4, [r3, #8]
 802147c:	68cc      	ldr	r4, [r1, #12]
 802147e:	60dc      	str	r4, [r3, #12]
 8021480:	690c      	ldr	r4, [r1, #16]
 8021482:	611c      	str	r4, [r3, #16]
 8021484:	694c      	ldr	r4, [r1, #20]
 8021486:	615c      	str	r4, [r3, #20]
 8021488:	698c      	ldr	r4, [r1, #24]
 802148a:	619c      	str	r4, [r3, #24]
 802148c:	69cc      	ldr	r4, [r1, #28]
 802148e:	61dc      	str	r4, [r3, #28]
 8021490:	6a0c      	ldr	r4, [r1, #32]
 8021492:	621c      	str	r4, [r3, #32]
 8021494:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8021496:	625c      	str	r4, [r3, #36]	; 0x24
 8021498:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 802149a:	629c      	str	r4, [r3, #40]	; 0x28
 802149c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 802149e:	62dc      	str	r4, [r3, #44]	; 0x2c
 80214a0:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80214a2:	631c      	str	r4, [r3, #48]	; 0x30
 80214a4:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80214a6:	635c      	str	r4, [r3, #52]	; 0x34
 80214a8:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 80214aa:	639c      	str	r4, [r3, #56]	; 0x38
 80214ac:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80214ae:	3140      	adds	r1, #64	; 0x40
 80214b0:	63dc      	str	r4, [r3, #60]	; 0x3c
 80214b2:	3340      	adds	r3, #64	; 0x40
 80214b4:	1ad4      	subs	r4, r2, r3
 80214b6:	2c3f      	cmp	r4, #63	; 0x3f
 80214b8:	dcda      	bgt.n	8021470 <memcpy+0x78>
 80214ba:	e00a      	b.n	80214d2 <memcpy+0xda>
 80214bc:	680c      	ldr	r4, [r1, #0]
 80214be:	601c      	str	r4, [r3, #0]
 80214c0:	684c      	ldr	r4, [r1, #4]
 80214c2:	605c      	str	r4, [r3, #4]
 80214c4:	688c      	ldr	r4, [r1, #8]
 80214c6:	609c      	str	r4, [r3, #8]
 80214c8:	68cc      	ldr	r4, [r1, #12]
 80214ca:	3110      	adds	r1, #16
 80214cc:	60dc      	str	r4, [r3, #12]
 80214ce:	3310      	adds	r3, #16
 80214d0:	1ad4      	subs	r4, r2, r3
 80214d2:	2c0f      	cmp	r4, #15
 80214d4:	dcf2      	bgt.n	80214bc <memcpy+0xc4>
 80214d6:	e004      	b.n	80214e2 <memcpy+0xea>
 80214d8:	f851 4b04 	ldr.w	r4, [r1], #4
 80214dc:	f843 4b04 	str.w	r4, [r3], #4
 80214e0:	1ad4      	subs	r4, r2, r3
 80214e2:	2c03      	cmp	r4, #3
 80214e4:	dcf8      	bgt.n	80214d8 <memcpy+0xe0>
 80214e6:	e7ba      	b.n	802145e <memcpy+0x66>

080214e8 <_snprintf_r>:
 80214e8:	b408      	push	{r3}
 80214ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80214ec:	1e14      	subs	r4, r2, #0
 80214ee:	b09c      	sub	sp, #112	; 0x70
 80214f0:	4605      	mov	r5, r0
 80214f2:	db24      	blt.n	802153e <_snprintf_r+0x56>
 80214f4:	ae22      	add	r6, sp, #136	; 0x88
 80214f6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80214fa:	9101      	str	r1, [sp, #4]
 80214fc:	bf08      	it	eq
 80214fe:	4627      	moveq	r7, r4
 8021500:	f8ad 3010 	strh.w	r3, [sp, #16]
 8021504:	4633      	mov	r3, r6
 8021506:	9105      	str	r1, [sp, #20]
 8021508:	a901      	add	r1, sp, #4
 802150a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802150c:	bf18      	it	ne
 802150e:	1e67      	subne	r7, r4, #1
 8021510:	961b      	str	r6, [sp, #108]	; 0x6c
 8021512:	9703      	str	r7, [sp, #12]
 8021514:	9706      	str	r7, [sp, #24]
 8021516:	f04f 37ff 	mov.w	r7, #4294967295
 802151a:	f8ad 7012 	strh.w	r7, [sp, #18]
 802151e:	f000 fa01 	bl	8021924 <_svfprintf_r>
 8021522:	1c43      	adds	r3, r0, #1
 8021524:	db08      	blt.n	8021538 <_snprintf_r+0x50>
 8021526:	b114      	cbz	r4, 802152e <_snprintf_r+0x46>
 8021528:	9b01      	ldr	r3, [sp, #4]
 802152a:	2200      	movs	r2, #0
 802152c:	701a      	strb	r2, [r3, #0]
 802152e:	b01c      	add	sp, #112	; 0x70
 8021530:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8021534:	b001      	add	sp, #4
 8021536:	4770      	bx	lr
 8021538:	238b      	movs	r3, #139	; 0x8b
 802153a:	602b      	str	r3, [r5, #0]
 802153c:	e7f3      	b.n	8021526 <_snprintf_r+0x3e>
 802153e:	238b      	movs	r3, #139	; 0x8b
 8021540:	f04f 30ff 	mov.w	r0, #4294967295
 8021544:	602b      	str	r3, [r5, #0]
 8021546:	e7f2      	b.n	802152e <_snprintf_r+0x46>

08021548 <snprintf>:
 8021548:	b40c      	push	{r2, r3}
 802154a:	f240 1324 	movw	r3, #292	; 0x124
 802154e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021550:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021554:	1e0c      	subs	r4, r1, #0
 8021556:	b09d      	sub	sp, #116	; 0x74
 8021558:	681d      	ldr	r5, [r3, #0]
 802155a:	db25      	blt.n	80215a8 <snprintf+0x60>
 802155c:	ae23      	add	r6, sp, #140	; 0x8c
 802155e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8021562:	9001      	str	r0, [sp, #4]
 8021564:	a901      	add	r1, sp, #4
 8021566:	f8ad 3010 	strh.w	r3, [sp, #16]
 802156a:	4633      	mov	r3, r6
 802156c:	9005      	str	r0, [sp, #20]
 802156e:	4628      	mov	r0, r5
 8021570:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8021572:	bf08      	it	eq
 8021574:	4627      	moveq	r7, r4
 8021576:	961b      	str	r6, [sp, #108]	; 0x6c
 8021578:	bf18      	it	ne
 802157a:	1e67      	subne	r7, r4, #1
 802157c:	9703      	str	r7, [sp, #12]
 802157e:	9706      	str	r7, [sp, #24]
 8021580:	f04f 37ff 	mov.w	r7, #4294967295
 8021584:	f8ad 7012 	strh.w	r7, [sp, #18]
 8021588:	f000 f9cc 	bl	8021924 <_svfprintf_r>
 802158c:	1c42      	adds	r2, r0, #1
 802158e:	db08      	blt.n	80215a2 <snprintf+0x5a>
 8021590:	b114      	cbz	r4, 8021598 <snprintf+0x50>
 8021592:	9b01      	ldr	r3, [sp, #4]
 8021594:	2200      	movs	r2, #0
 8021596:	701a      	strb	r2, [r3, #0]
 8021598:	b01d      	add	sp, #116	; 0x74
 802159a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802159e:	b002      	add	sp, #8
 80215a0:	4770      	bx	lr
 80215a2:	238b      	movs	r3, #139	; 0x8b
 80215a4:	602b      	str	r3, [r5, #0]
 80215a6:	e7f3      	b.n	8021590 <snprintf+0x48>
 80215a8:	238b      	movs	r3, #139	; 0x8b
 80215aa:	f04f 30ff 	mov.w	r0, #4294967295
 80215ae:	602b      	str	r3, [r5, #0]
 80215b0:	e7f2      	b.n	8021598 <snprintf+0x50>
 80215b2:	bf00      	nop

080215b4 <strcat>:
 80215b4:	b538      	push	{r3, r4, r5, lr}
 80215b6:	0783      	lsls	r3, r0, #30
 80215b8:	4604      	mov	r4, r0
 80215ba:	d113      	bne.n	80215e4 <strcat+0x30>
 80215bc:	6803      	ldr	r3, [r0, #0]
 80215be:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80215c2:	ea22 0303 	bic.w	r3, r2, r3
 80215c6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80215ca:	bf08      	it	eq
 80215cc:	4602      	moveq	r2, r0
 80215ce:	d109      	bne.n	80215e4 <strcat+0x30>
 80215d0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80215d4:	3004      	adds	r0, #4
 80215d6:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 80215da:	ea25 0303 	bic.w	r3, r5, r3
 80215de:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80215e2:	d0f5      	beq.n	80215d0 <strcat+0x1c>
 80215e4:	7803      	ldrb	r3, [r0, #0]
 80215e6:	b12b      	cbz	r3, 80215f4 <strcat+0x40>
 80215e8:	4603      	mov	r3, r0
 80215ea:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80215ee:	3001      	adds	r0, #1
 80215f0:	2a00      	cmp	r2, #0
 80215f2:	d1fa      	bne.n	80215ea <strcat+0x36>
 80215f4:	f000 f87a 	bl	80216ec <strcpy>
 80215f8:	4620      	mov	r0, r4
 80215fa:	bd38      	pop	{r3, r4, r5, pc}

080215fc <strchr>:
 80215fc:	b2c9      	uxtb	r1, r1
 80215fe:	b4f0      	push	{r4, r5, r6, r7}
 8021600:	2900      	cmp	r1, #0
 8021602:	d046      	beq.n	8021692 <strchr+0x96>
 8021604:	0782      	lsls	r2, r0, #30
 8021606:	d010      	beq.n	802162a <strchr+0x2e>
 8021608:	7803      	ldrb	r3, [r0, #0]
 802160a:	2b00      	cmp	r3, #0
 802160c:	d06c      	beq.n	80216e8 <strchr+0xec>
 802160e:	4299      	cmp	r1, r3
 8021610:	bf18      	it	ne
 8021612:	4602      	movne	r2, r0
 8021614:	d106      	bne.n	8021624 <strchr+0x28>
 8021616:	e03a      	b.n	802168e <strchr+0x92>
 8021618:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 802161c:	2b00      	cmp	r3, #0
 802161e:	d063      	beq.n	80216e8 <strchr+0xec>
 8021620:	4299      	cmp	r1, r3
 8021622:	d034      	beq.n	802168e <strchr+0x92>
 8021624:	3001      	adds	r0, #1
 8021626:	0783      	lsls	r3, r0, #30
 8021628:	d1f6      	bne.n	8021618 <strchr+0x1c>
 802162a:	6803      	ldr	r3, [r0, #0]
 802162c:	ea41 2701 	orr.w	r7, r1, r1, lsl #8
 8021630:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8021634:	ea47 4707 	orr.w	r7, r7, r7, lsl #16
 8021638:	ea22 0203 	bic.w	r2, r2, r3
 802163c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8021640:	d11c      	bne.n	802167c <strchr+0x80>
 8021642:	407b      	eors	r3, r7
 8021644:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8021648:	ea22 0303 	bic.w	r3, r2, r3
 802164c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8021650:	d114      	bne.n	802167c <strchr+0x80>
 8021652:	4604      	mov	r4, r0
 8021654:	e002      	b.n	802165c <strchr+0x60>
 8021656:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 802165a:	d10f      	bne.n	802167c <strchr+0x80>
 802165c:	f854 3f04 	ldr.w	r3, [r4, #4]!
 8021660:	3004      	adds	r0, #4
 8021662:	f1a3 3601 	sub.w	r6, r3, #16843009	; 0x1010101
 8021666:	ea87 0203 	eor.w	r2, r7, r3
 802166a:	ea26 0303 	bic.w	r3, r6, r3
 802166e:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 8021672:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8021676:	ea25 0202 	bic.w	r2, r5, r2
 802167a:	d0ec      	beq.n	8021656 <strchr+0x5a>
 802167c:	7803      	ldrb	r3, [r0, #0]
 802167e:	b923      	cbnz	r3, 802168a <strchr+0x8e>
 8021680:	e032      	b.n	80216e8 <strchr+0xec>
 8021682:	7843      	ldrb	r3, [r0, #1]
 8021684:	3001      	adds	r0, #1
 8021686:	2b00      	cmp	r3, #0
 8021688:	d02e      	beq.n	80216e8 <strchr+0xec>
 802168a:	4299      	cmp	r1, r3
 802168c:	d1f9      	bne.n	8021682 <strchr+0x86>
 802168e:	bcf0      	pop	{r4, r5, r6, r7}
 8021690:	4770      	bx	lr
 8021692:	0783      	lsls	r3, r0, #30
 8021694:	d00a      	beq.n	80216ac <strchr+0xb0>
 8021696:	7803      	ldrb	r3, [r0, #0]
 8021698:	4602      	mov	r2, r0
 802169a:	b923      	cbnz	r3, 80216a6 <strchr+0xaa>
 802169c:	e7f7      	b.n	802168e <strchr+0x92>
 802169e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80216a2:	2b00      	cmp	r3, #0
 80216a4:	d0f3      	beq.n	802168e <strchr+0x92>
 80216a6:	3001      	adds	r0, #1
 80216a8:	0781      	lsls	r1, r0, #30
 80216aa:	d1f8      	bne.n	802169e <strchr+0xa2>
 80216ac:	6803      	ldr	r3, [r0, #0]
 80216ae:	4602      	mov	r2, r0
 80216b0:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
 80216b4:	ea21 0303 	bic.w	r3, r1, r3
 80216b8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80216bc:	d10a      	bne.n	80216d4 <strchr+0xd8>
 80216be:	4601      	mov	r1, r0
 80216c0:	f851 3f04 	ldr.w	r3, [r1, #4]!
 80216c4:	3204      	adds	r2, #4
 80216c6:	f1a3 3001 	sub.w	r0, r3, #16843009	; 0x1010101
 80216ca:	ea20 0303 	bic.w	r3, r0, r3
 80216ce:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80216d2:	d0f5      	beq.n	80216c0 <strchr+0xc4>
 80216d4:	7813      	ldrb	r3, [r2, #0]
 80216d6:	4610      	mov	r0, r2
 80216d8:	2b00      	cmp	r3, #0
 80216da:	d0d8      	beq.n	802168e <strchr+0x92>
 80216dc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80216e0:	3001      	adds	r0, #1
 80216e2:	2b00      	cmp	r3, #0
 80216e4:	d1fa      	bne.n	80216dc <strchr+0xe0>
 80216e6:	e7d2      	b.n	802168e <strchr+0x92>
 80216e8:	4618      	mov	r0, r3
 80216ea:	e7d0      	b.n	802168e <strchr+0x92>

080216ec <strcpy>:
 80216ec:	ea80 0201 	eor.w	r2, r0, r1
 80216f0:	4684      	mov	ip, r0
 80216f2:	f012 0f03 	tst.w	r2, #3
 80216f6:	d14f      	bne.n	8021798 <strcpy+0xac>
 80216f8:	f011 0f03 	tst.w	r1, #3
 80216fc:	d132      	bne.n	8021764 <strcpy+0x78>
 80216fe:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8021702:	f011 0f04 	tst.w	r1, #4
 8021706:	f851 3b04 	ldr.w	r3, [r1], #4
 802170a:	d00b      	beq.n	8021724 <strcpy+0x38>
 802170c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8021710:	439a      	bics	r2, r3
 8021712:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8021716:	bf04      	itt	eq
 8021718:	f84c 3b04 	streq.w	r3, [ip], #4
 802171c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8021720:	d116      	bne.n	8021750 <strcpy+0x64>
 8021722:	bf00      	nop
 8021724:	f851 4b04 	ldr.w	r4, [r1], #4
 8021728:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 802172c:	439a      	bics	r2, r3
 802172e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8021732:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8021736:	d10b      	bne.n	8021750 <strcpy+0x64>
 8021738:	f84c 3b04 	str.w	r3, [ip], #4
 802173c:	43a2      	bics	r2, r4
 802173e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8021742:	bf04      	itt	eq
 8021744:	f851 3b04 	ldreq.w	r3, [r1], #4
 8021748:	f84c 4b04 	streq.w	r4, [ip], #4
 802174c:	d0ea      	beq.n	8021724 <strcpy+0x38>
 802174e:	4623      	mov	r3, r4
 8021750:	f80c 3b01 	strb.w	r3, [ip], #1
 8021754:	f013 0fff 	tst.w	r3, #255	; 0xff
 8021758:	ea4f 2333 	mov.w	r3, r3, ror #8
 802175c:	d1f8      	bne.n	8021750 <strcpy+0x64>
 802175e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021762:	4770      	bx	lr
 8021764:	f011 0f01 	tst.w	r1, #1
 8021768:	d006      	beq.n	8021778 <strcpy+0x8c>
 802176a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802176e:	f80c 2b01 	strb.w	r2, [ip], #1
 8021772:	2a00      	cmp	r2, #0
 8021774:	bf08      	it	eq
 8021776:	4770      	bxeq	lr
 8021778:	f011 0f02 	tst.w	r1, #2
 802177c:	d0bf      	beq.n	80216fe <strcpy+0x12>
 802177e:	f831 2b02 	ldrh.w	r2, [r1], #2
 8021782:	f012 0fff 	tst.w	r2, #255	; 0xff
 8021786:	bf16      	itet	ne
 8021788:	f82c 2b02 	strhne.w	r2, [ip], #2
 802178c:	f88c 2000 	strbeq.w	r2, [ip]
 8021790:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8021794:	d1b3      	bne.n	80216fe <strcpy+0x12>
 8021796:	4770      	bx	lr
 8021798:	f811 2b01 	ldrb.w	r2, [r1], #1
 802179c:	f80c 2b01 	strb.w	r2, [ip], #1
 80217a0:	2a00      	cmp	r2, #0
 80217a2:	d1f9      	bne.n	8021798 <strcpy+0xac>
 80217a4:	4770      	bx	lr
 80217a6:	bf00      	nop

080217a8 <strlen>:
 80217a8:	f020 0103 	bic.w	r1, r0, #3
 80217ac:	f010 0003 	ands.w	r0, r0, #3
 80217b0:	f1c0 0000 	rsb	r0, r0, #0
 80217b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80217b8:	f100 0c04 	add.w	ip, r0, #4
 80217bc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80217c0:	f06f 0200 	mvn.w	r2, #0
 80217c4:	bf1c      	itt	ne
 80217c6:	fa22 f20c 	lsrne.w	r2, r2, ip
 80217ca:	4313      	orrne	r3, r2
 80217cc:	f04f 0c01 	mov.w	ip, #1
 80217d0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80217d4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80217d8:	eba3 020c 	sub.w	r2, r3, ip
 80217dc:	ea22 0203 	bic.w	r2, r2, r3
 80217e0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80217e4:	bf04      	itt	eq
 80217e6:	f851 3b04 	ldreq.w	r3, [r1], #4
 80217ea:	3004      	addeq	r0, #4
 80217ec:	d0f4      	beq.n	80217d8 <strlen+0x30>
 80217ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80217f2:	bf1f      	itttt	ne
 80217f4:	3001      	addne	r0, #1
 80217f6:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 80217fa:	3001      	addne	r0, #1
 80217fc:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8021800:	bf18      	it	ne
 8021802:	3001      	addne	r0, #1
 8021804:	4770      	bx	lr
 8021806:	bf00      	nop

08021808 <strncmp>:
 8021808:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 802180c:	2a00      	cmp	r2, #0
 802180e:	d044      	beq.n	802189a <strncmp+0x92>
 8021810:	ea41 0300 	orr.w	r3, r1, r0
 8021814:	f013 0303 	ands.w	r3, r3, #3
 8021818:	d12c      	bne.n	8021874 <strncmp+0x6c>
 802181a:	2a03      	cmp	r2, #3
 802181c:	d92a      	bls.n	8021874 <strncmp+0x6c>
 802181e:	6804      	ldr	r4, [r0, #0]
 8021820:	680d      	ldr	r5, [r1, #0]
 8021822:	42ac      	cmp	r4, r5
 8021824:	d126      	bne.n	8021874 <strncmp+0x6c>
 8021826:	3a04      	subs	r2, #4
 8021828:	d037      	beq.n	802189a <strncmp+0x92>
 802182a:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 802182e:	ea25 0404 	bic.w	r4, r5, r4
 8021832:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8021836:	bf04      	itt	eq
 8021838:	460c      	moveq	r4, r1
 802183a:	4605      	moveq	r5, r0
 802183c:	d011      	beq.n	8021862 <strncmp+0x5a>
 802183e:	e034      	b.n	80218aa <strncmp+0xa2>
 8021840:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8021844:	4635      	mov	r5, r6
 8021846:	f851 cf04 	ldr.w	ip, [r1, #4]!
 802184a:	463c      	mov	r4, r7
 802184c:	f1a3 3801 	sub.w	r8, r3, #16843009	; 0x1010101
 8021850:	4563      	cmp	r3, ip
 8021852:	ea28 0803 	bic.w	r8, r8, r3
 8021856:	d109      	bne.n	802186c <strncmp+0x64>
 8021858:	3a04      	subs	r2, #4
 802185a:	d01e      	beq.n	802189a <strncmp+0x92>
 802185c:	f018 3f80 	tst.w	r8, #2155905152	; 0x80808080
 8021860:	d119      	bne.n	8021896 <strncmp+0x8e>
 8021862:	1d2e      	adds	r6, r5, #4
 8021864:	1d27      	adds	r7, r4, #4
 8021866:	2a03      	cmp	r2, #3
 8021868:	d8ea      	bhi.n	8021840 <strncmp+0x38>
 802186a:	b1d2      	cbz	r2, 80218a2 <strncmp+0x9a>
 802186c:	3a01      	subs	r2, #1
 802186e:	4639      	mov	r1, r7
 8021870:	4630      	mov	r0, r6
 8021872:	e000      	b.n	8021876 <strncmp+0x6e>
 8021874:	3a01      	subs	r2, #1
 8021876:	7803      	ldrb	r3, [r0, #0]
 8021878:	780c      	ldrb	r4, [r1, #0]
 802187a:	42a3      	cmp	r3, r4
 802187c:	d113      	bne.n	80218a6 <strncmp+0x9e>
 802187e:	b162      	cbz	r2, 802189a <strncmp+0x92>
 8021880:	b19b      	cbz	r3, 80218aa <strncmp+0xa2>
 8021882:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8021886:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802188a:	42a3      	cmp	r3, r4
 802188c:	d10b      	bne.n	80218a6 <strncmp+0x9e>
 802188e:	2a01      	cmp	r2, #1
 8021890:	f102 32ff 	add.w	r2, r2, #4294967295
 8021894:	d1f4      	bne.n	8021880 <strncmp+0x78>
 8021896:	2000      	movs	r0, #0
 8021898:	e000      	b.n	802189c <strncmp+0x94>
 802189a:	4610      	mov	r0, r2
 802189c:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80218a0:	4770      	bx	lr
 80218a2:	792b      	ldrb	r3, [r5, #4]
 80218a4:	7924      	ldrb	r4, [r4, #4]
 80218a6:	1b18      	subs	r0, r3, r4
 80218a8:	e7f8      	b.n	802189c <strncmp+0x94>
 80218aa:	4618      	mov	r0, r3
 80218ac:	e7f6      	b.n	802189c <strncmp+0x94>
 80218ae:	bf00      	nop

080218b0 <strncpy>:
 80218b0:	ea41 0300 	orr.w	r3, r1, r0
 80218b4:	f013 0f03 	tst.w	r3, #3
 80218b8:	4603      	mov	r3, r0
 80218ba:	b470      	push	{r4, r5, r6}
 80218bc:	bf14      	ite	ne
 80218be:	2400      	movne	r4, #0
 80218c0:	2401      	moveq	r4, #1
 80218c2:	2a03      	cmp	r2, #3
 80218c4:	bf94      	ite	ls
 80218c6:	2400      	movls	r4, #0
 80218c8:	f004 0401 	andhi.w	r4, r4, #1
 80218cc:	460d      	mov	r5, r1
 80218ce:	b9c4      	cbnz	r4, 8021902 <strncpy+0x52>
 80218d0:	b1aa      	cbz	r2, 80218fe <strncpy+0x4e>
 80218d2:	780c      	ldrb	r4, [r1, #0]
 80218d4:	3a01      	subs	r2, #1
 80218d6:	f803 4b01 	strb.w	r4, [r3], #1
 80218da:	b14c      	cbz	r4, 80218f0 <strncpy+0x40>
 80218dc:	461c      	mov	r4, r3
 80218de:	b172      	cbz	r2, 80218fe <strncpy+0x4e>
 80218e0:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 80218e4:	3a01      	subs	r2, #1
 80218e6:	f804 6b01 	strb.w	r6, [r4], #1
 80218ea:	4623      	mov	r3, r4
 80218ec:	2e00      	cmp	r6, #0
 80218ee:	d1f6      	bne.n	80218de <strncpy+0x2e>
 80218f0:	b12a      	cbz	r2, 80218fe <strncpy+0x4e>
 80218f2:	189a      	adds	r2, r3, r2
 80218f4:	2100      	movs	r1, #0
 80218f6:	f803 1b01 	strb.w	r1, [r3], #1
 80218fa:	4293      	cmp	r3, r2
 80218fc:	d1fb      	bne.n	80218f6 <strncpy+0x46>
 80218fe:	bc70      	pop	{r4, r5, r6}
 8021900:	4770      	bx	lr
 8021902:	4629      	mov	r1, r5
 8021904:	f855 4b04 	ldr.w	r4, [r5], #4
 8021908:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
 802190c:	ea26 0604 	bic.w	r6, r6, r4
 8021910:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8021914:	d1dc      	bne.n	80218d0 <strncpy+0x20>
 8021916:	3a04      	subs	r2, #4
 8021918:	f843 4b04 	str.w	r4, [r3], #4
 802191c:	2a03      	cmp	r2, #3
 802191e:	d8f0      	bhi.n	8021902 <strncpy+0x52>
 8021920:	4629      	mov	r1, r5
 8021922:	e7d5      	b.n	80218d0 <strncpy+0x20>

08021924 <_svfprintf_r>:
 8021924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021928:	b0c9      	sub	sp, #292	; 0x124
 802192a:	468b      	mov	fp, r1
 802192c:	4692      	mov	sl, r2
 802192e:	9311      	str	r3, [sp, #68]	; 0x44
 8021930:	9010      	str	r0, [sp, #64]	; 0x40
 8021932:	f002 fac1 	bl	8023eb8 <_localeconv_r>
 8021936:	2300      	movs	r3, #0
 8021938:	2200      	movs	r2, #0
 802193a:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 802193e:	6800      	ldr	r0, [r0, #0]
 8021940:	901b      	str	r0, [sp, #108]	; 0x6c
 8021942:	f7ff ff31 	bl	80217a8 <strlen>
 8021946:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802194a:	061b      	lsls	r3, r3, #24
 802194c:	901c      	str	r0, [sp, #112]	; 0x70
 802194e:	d504      	bpl.n	802195a <_svfprintf_r+0x36>
 8021950:	f8db 3010 	ldr.w	r3, [fp, #16]
 8021954:	2b00      	cmp	r3, #0
 8021956:	f001 80e8 	beq.w	8022b2a <_svfprintf_r+0x1206>
 802195a:	a93d      	add	r1, sp, #244	; 0xf4
 802195c:	f246 6267 	movw	r2, #26215	; 0x6667
 8021960:	9109      	str	r1, [sp, #36]	; 0x24
 8021962:	f2c6 6266 	movt	r2, #26214	; 0x6666
 8021966:	921d      	str	r2, [sp, #116]	; 0x74
 8021968:	f10d 01f3 	add.w	r1, sp, #243	; 0xf3
 802196c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802196e:	f64e 4000 	movw	r0, #60416	; 0xec00
 8021972:	2300      	movs	r3, #0
 8021974:	ae23      	add	r6, sp, #140	; 0x8c
 8021976:	f6c0 0002 	movt	r0, #2050	; 0x802
 802197a:	1a52      	subs	r2, r2, r1
 802197c:	9312      	str	r3, [sp, #72]	; 0x48
 802197e:	9108      	str	r1, [sp, #32]
 8021980:	9319      	str	r3, [sp, #100]	; 0x64
 8021982:	9320      	str	r3, [sp, #128]	; 0x80
 8021984:	930d      	str	r3, [sp, #52]	; 0x34
 8021986:	9018      	str	r0, [sp, #96]	; 0x60
 8021988:	9221      	str	r2, [sp, #132]	; 0x84
 802198a:	963d      	str	r6, [sp, #244]	; 0xf4
 802198c:	933f      	str	r3, [sp, #252]	; 0xfc
 802198e:	933e      	str	r3, [sp, #248]	; 0xf8
 8021990:	f89a 3000 	ldrb.w	r3, [sl]
 8021994:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 8021998:	bf18      	it	ne
 802199a:	2201      	movne	r2, #1
 802199c:	2b00      	cmp	r3, #0
 802199e:	bf0c      	ite	eq
 80219a0:	2300      	moveq	r3, #0
 80219a2:	f002 0301 	andne.w	r3, r2, #1
 80219a6:	2b00      	cmp	r3, #0
 80219a8:	f000 80bd 	beq.w	8021b26 <_svfprintf_r+0x202>
 80219ac:	4652      	mov	r2, sl
 80219ae:	4657      	mov	r7, sl
 80219b0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80219b4:	3701      	adds	r7, #1
 80219b6:	1c19      	adds	r1, r3, #0
 80219b8:	bf18      	it	ne
 80219ba:	2101      	movne	r1, #1
 80219bc:	2b25      	cmp	r3, #37	; 0x25
 80219be:	bf0c      	ite	eq
 80219c0:	2300      	moveq	r3, #0
 80219c2:	f001 0301 	andne.w	r3, r1, #1
 80219c6:	2b00      	cmp	r3, #0
 80219c8:	d1f2      	bne.n	80219b0 <_svfprintf_r+0x8c>
 80219ca:	ebb7 080a 	subs.w	r8, r7, sl
 80219ce:	d010      	beq.n	80219f2 <_svfprintf_r+0xce>
 80219d0:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80219d2:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80219d4:	3401      	adds	r4, #1
 80219d6:	f8c6 a000 	str.w	sl, [r6]
 80219da:	2c07      	cmp	r4, #7
 80219dc:	f8c6 8004 	str.w	r8, [r6, #4]
 80219e0:	4445      	add	r5, r8
 80219e2:	943e      	str	r4, [sp, #248]	; 0xf8
 80219e4:	953f      	str	r5, [sp, #252]	; 0xfc
 80219e6:	f300 8082 	bgt.w	8021aee <_svfprintf_r+0x1ca>
 80219ea:	3608      	adds	r6, #8
 80219ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80219ee:	4443      	add	r3, r8
 80219f0:	930d      	str	r3, [sp, #52]	; 0x34
 80219f2:	783b      	ldrb	r3, [r7, #0]
 80219f4:	2b00      	cmp	r3, #0
 80219f6:	f000 8082 	beq.w	8021afe <_svfprintf_r+0x1da>
 80219fa:	2300      	movs	r3, #0
 80219fc:	f107 0a01 	add.w	sl, r7, #1
 8021a00:	930c      	str	r3, [sp, #48]	; 0x30
 8021a02:	2520      	movs	r5, #32
 8021a04:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8021a08:	212b      	movs	r1, #43	; 0x2b
 8021a0a:	787b      	ldrb	r3, [r7, #1]
 8021a0c:	f04f 37ff 	mov.w	r7, #4294967295
 8021a10:	2000      	movs	r0, #0
 8021a12:	900a      	str	r0, [sp, #40]	; 0x28
 8021a14:	f10a 0a01 	add.w	sl, sl, #1
 8021a18:	f1a3 0220 	sub.w	r2, r3, #32
 8021a1c:	2a58      	cmp	r2, #88	; 0x58
 8021a1e:	f200 8270 	bhi.w	8021f02 <_svfprintf_r+0x5de>
 8021a22:	e8df f012 	tbh	[pc, r2, lsl #1]
 8021a26:	0281      	.short	0x0281
 8021a28:	026e026e 	.word	0x026e026e
 8021a2c:	026e028b 	.word	0x026e028b
 8021a30:	026e026e 	.word	0x026e026e
 8021a34:	026e026e 	.word	0x026e026e
 8021a38:	0292026e 	.word	0x0292026e
 8021a3c:	026e0082 	.word	0x026e0082
 8021a40:	0087005d 	.word	0x0087005d
 8021a44:	00a3026e 	.word	0x00a3026e
 8021a48:	00aa00aa 	.word	0x00aa00aa
 8021a4c:	00aa00aa 	.word	0x00aa00aa
 8021a50:	00aa00aa 	.word	0x00aa00aa
 8021a54:	00aa00aa 	.word	0x00aa00aa
 8021a58:	026e00aa 	.word	0x026e00aa
 8021a5c:	026e026e 	.word	0x026e026e
 8021a60:	026e026e 	.word	0x026e026e
 8021a64:	026e026e 	.word	0x026e026e
 8021a68:	026e026e 	.word	0x026e026e
 8021a6c:	00bd026e 	.word	0x00bd026e
 8021a70:	026e016f 	.word	0x026e016f
 8021a74:	026e016f 	.word	0x026e016f
 8021a78:	026e026e 	.word	0x026e026e
 8021a7c:	01ab026e 	.word	0x01ab026e
 8021a80:	026e026e 	.word	0x026e026e
 8021a84:	026e01b2 	.word	0x026e01b2
 8021a88:	026e026e 	.word	0x026e026e
 8021a8c:	026e026e 	.word	0x026e026e
 8021a90:	026e01cf 	.word	0x026e01cf
 8021a94:	01dc026e 	.word	0x01dc026e
 8021a98:	026e026e 	.word	0x026e026e
 8021a9c:	026e026e 	.word	0x026e026e
 8021aa0:	026e026e 	.word	0x026e026e
 8021aa4:	026e026e 	.word	0x026e026e
 8021aa8:	026e026e 	.word	0x026e026e
 8021aac:	02b702d0 	.word	0x02b702d0
 8021ab0:	016f016f 	.word	0x016f016f
 8021ab4:	02c9016f 	.word	0x02c9016f
 8021ab8:	026e02b7 	.word	0x026e02b7
 8021abc:	023a026e 	.word	0x023a026e
 8021ac0:	024c026e 	.word	0x024c026e
 8021ac4:	02e00259 	.word	0x02e00259
 8021ac8:	026e0204 	.word	0x026e0204
 8021acc:	026e020b 	.word	0x026e020b
 8021ad0:	026e029e 	.word	0x026e029e
 8021ad4:	02fc026e 	.word	0x02fc026e
 8021ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021ada:	9211      	str	r2, [sp, #68]	; 0x44
 8021adc:	425b      	negs	r3, r3
 8021ade:	930c      	str	r3, [sp, #48]	; 0x30
 8021ae0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021ae2:	f040 0004 	orr.w	r0, r0, #4
 8021ae6:	900a      	str	r0, [sp, #40]	; 0x28
 8021ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8021aec:	e792      	b.n	8021a14 <_svfprintf_r+0xf0>
 8021aee:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021af0:	4659      	mov	r1, fp
 8021af2:	aa3d      	add	r2, sp, #244	; 0xf4
 8021af4:	f003 fa94 	bl	8025020 <__ssprint_r>
 8021af8:	b940      	cbnz	r0, 8021b0c <_svfprintf_r+0x1e8>
 8021afa:	ae23      	add	r6, sp, #140	; 0x8c
 8021afc:	e776      	b.n	80219ec <_svfprintf_r+0xc8>
 8021afe:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8021b00:	b123      	cbz	r3, 8021b0c <_svfprintf_r+0x1e8>
 8021b02:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021b04:	4659      	mov	r1, fp
 8021b06:	aa3d      	add	r2, sp, #244	; 0xf4
 8021b08:	f003 fa8a 	bl	8025020 <__ssprint_r>
 8021b0c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8021b10:	f013 0f40 	tst.w	r3, #64	; 0x40
 8021b14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021b16:	bf18      	it	ne
 8021b18:	f04f 33ff 	movne.w	r3, #4294967295
 8021b1c:	930d      	str	r3, [sp, #52]	; 0x34
 8021b1e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021b20:	b049      	add	sp, #292	; 0x124
 8021b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b26:	4657      	mov	r7, sl
 8021b28:	e763      	b.n	80219f2 <_svfprintf_r+0xce>
 8021b2a:	f88d 111f 	strb.w	r1, [sp, #287]	; 0x11f
 8021b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8021b32:	e76f      	b.n	8021a14 <_svfprintf_r+0xf0>
 8021b34:	4650      	mov	r0, sl
 8021b36:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8021b3c:	f001 812c 	beq.w	8022d98 <_svfprintf_r+0x1474>
 8021b40:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8021b44:	2700      	movs	r7, #0
 8021b46:	2a09      	cmp	r2, #9
 8021b48:	4682      	mov	sl, r0
 8021b4a:	f63f af65 	bhi.w	8021a18 <_svfprintf_r+0xf4>
 8021b4e:	2700      	movs	r7, #0
 8021b50:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021b54:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8021b58:	eb02 0747 	add.w	r7, r2, r7, lsl #1
 8021b5c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8021b60:	2a09      	cmp	r2, #9
 8021b62:	4682      	mov	sl, r0
 8021b64:	d9f4      	bls.n	8021b50 <_svfprintf_r+0x22c>
 8021b66:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
 8021b6a:	e755      	b.n	8021a18 <_svfprintf_r+0xf4>
 8021b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021b72:	930a      	str	r3, [sp, #40]	; 0x28
 8021b74:	f89a 3000 	ldrb.w	r3, [sl]
 8021b78:	e74c      	b.n	8021a14 <_svfprintf_r+0xf0>
 8021b7a:	4650      	mov	r0, sl
 8021b7c:	2200      	movs	r2, #0
 8021b7e:	46b4      	mov	ip, r6
 8021b80:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8021b84:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021b88:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8021b8c:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8021b90:	4682      	mov	sl, r0
 8021b92:	2c09      	cmp	r4, #9
 8021b94:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 8021b98:	d9f2      	bls.n	8021b80 <_svfprintf_r+0x25c>
 8021b9a:	4666      	mov	r6, ip
 8021b9c:	920c      	str	r2, [sp, #48]	; 0x30
 8021b9e:	e73b      	b.n	8021a18 <_svfprintf_r+0xf4>
 8021ba0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021ba2:	9317      	str	r3, [sp, #92]	; 0x5c
 8021ba4:	f040 0010 	orr.w	r0, r0, #16
 8021ba8:	900a      	str	r0, [sp, #40]	; 0x28
 8021baa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021bac:	068c      	lsls	r4, r1, #26
 8021bae:	f140 81f6 	bpl.w	8021f9e <_svfprintf_r+0x67a>
 8021bb2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021bb4:	1dd3      	adds	r3, r2, #7
 8021bb6:	f023 0307 	bic.w	r3, r3, #7
 8021bba:	f103 0008 	add.w	r0, r3, #8
 8021bbe:	9011      	str	r0, [sp, #68]	; 0x44
 8021bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bc4:	4614      	mov	r4, r2
 8021bc6:	461d      	mov	r5, r3
 8021bc8:	2a00      	cmp	r2, #0
 8021bca:	f173 0000 	sbcs.w	r0, r3, #0
 8021bce:	f2c0 85d9 	blt.w	8022784 <_svfprintf_r+0xe60>
 8021bd2:	ea54 0105 	orrs.w	r1, r4, r5
 8021bd6:	f04f 0201 	mov.w	r2, #1
 8021bda:	bf0c      	ite	eq
 8021bdc:	2300      	moveq	r3, #0
 8021bde:	2301      	movne	r3, #1
 8021be0:	2f00      	cmp	r7, #0
 8021be2:	bfa2      	ittt	ge
 8021be4:	980a      	ldrge	r0, [sp, #40]	; 0x28
 8021be6:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8021bea:	900a      	strge	r0, [sp, #40]	; 0x28
 8021bec:	2f00      	cmp	r7, #0
 8021bee:	bf18      	it	ne
 8021bf0:	f043 0301 	orrne.w	r3, r3, #1
 8021bf4:	2b00      	cmp	r3, #0
 8021bf6:	f000 835f 	beq.w	80222b8 <_svfprintf_r+0x994>
 8021bfa:	2a01      	cmp	r2, #1
 8021bfc:	f000 84c3 	beq.w	8022586 <_svfprintf_r+0xc62>
 8021c00:	2a02      	cmp	r2, #2
 8021c02:	bf1c      	itt	ne
 8021c04:	aa3d      	addne	r2, sp, #244	; 0xf4
 8021c06:	46b4      	movne	ip, r6
 8021c08:	d102      	bne.n	8021c10 <_svfprintf_r+0x2ec>
 8021c0a:	f000 bca0 	b.w	802254e <_svfprintf_r+0xc2a>
 8021c0e:	4632      	mov	r2, r6
 8021c10:	08e3      	lsrs	r3, r4, #3
 8021c12:	08e8      	lsrs	r0, r5, #3
 8021c14:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
 8021c18:	f004 0107 	and.w	r1, r4, #7
 8021c1c:	4605      	mov	r5, r0
 8021c1e:	461c      	mov	r4, r3
 8021c20:	1e56      	subs	r6, r2, #1
 8021c22:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8021c26:	ea54 0105 	orrs.w	r1, r4, r5
 8021c2a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021c2e:	d1ee      	bne.n	8021c0e <_svfprintf_r+0x2ea>
 8021c30:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021c32:	9613      	str	r6, [sp, #76]	; 0x4c
 8021c34:	4666      	mov	r6, ip
 8021c36:	07c0      	lsls	r0, r0, #31
 8021c38:	f140 8438 	bpl.w	80224ac <_svfprintf_r+0xb88>
 8021c3c:	2b30      	cmp	r3, #48	; 0x30
 8021c3e:	f000 8435 	beq.w	80224ac <_svfprintf_r+0xb88>
 8021c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c44:	1e91      	subs	r1, r2, #2
 8021c46:	9113      	str	r1, [sp, #76]	; 0x4c
 8021c48:	1a5b      	subs	r3, r3, r1
 8021c4a:	930e      	str	r3, [sp, #56]	; 0x38
 8021c4c:	2330      	movs	r3, #48	; 0x30
 8021c4e:	f802 3c02 	strb.w	r3, [r2, #-2]
 8021c52:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8021c56:	2200      	movs	r2, #0
 8021c58:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021c5a:	9714      	str	r7, [sp, #80]	; 0x50
 8021c5c:	42b9      	cmp	r1, r7
 8021c5e:	bfb8      	it	lt
 8021c60:	4639      	movlt	r1, r7
 8021c62:	921a      	str	r2, [sp, #104]	; 0x68
 8021c64:	910b      	str	r1, [sp, #44]	; 0x2c
 8021c66:	b113      	cbz	r3, 8021c6e <_svfprintf_r+0x34a>
 8021c68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021c6a:	3201      	adds	r2, #1
 8021c6c:	920b      	str	r2, [sp, #44]	; 0x2c
 8021c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c70:	f013 0302 	ands.w	r3, r3, #2
 8021c74:	9315      	str	r3, [sp, #84]	; 0x54
 8021c76:	d002      	beq.n	8021c7e <_svfprintf_r+0x35a>
 8021c78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021c7a:	3002      	adds	r0, #2
 8021c7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8021c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c80:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8021c84:	9316      	str	r3, [sp, #88]	; 0x58
 8021c86:	f040 81e2 	bne.w	802204e <_svfprintf_r+0x72a>
 8021c8a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021c8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021c8e:	1a47      	subs	r7, r0, r1
 8021c90:	2f00      	cmp	r7, #0
 8021c92:	f340 81dc 	ble.w	802204e <_svfprintf_r+0x72a>
 8021c96:	2f10      	cmp	r7, #16
 8021c98:	f64e 2878 	movw	r8, #60024	; 0xea78
 8021c9c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8021c9e:	f6c0 0802 	movt	r8, #2050	; 0x802
 8021ca2:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8021ca4:	dd22      	ble.n	8021cec <_svfprintf_r+0x3c8>
 8021ca6:	4623      	mov	r3, r4
 8021ca8:	f04f 0910 	mov.w	r9, #16
 8021cac:	4644      	mov	r4, r8
 8021cae:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8021cb2:	e002      	b.n	8021cba <_svfprintf_r+0x396>
 8021cb4:	3f10      	subs	r7, #16
 8021cb6:	2f10      	cmp	r7, #16
 8021cb8:	dd16      	ble.n	8021ce8 <_svfprintf_r+0x3c4>
 8021cba:	3301      	adds	r3, #1
 8021cbc:	e886 0210 	stmia.w	r6, {r4, r9}
 8021cc0:	3510      	adds	r5, #16
 8021cc2:	3608      	adds	r6, #8
 8021cc4:	2b07      	cmp	r3, #7
 8021cc6:	933e      	str	r3, [sp, #248]	; 0xf8
 8021cc8:	953f      	str	r5, [sp, #252]	; 0xfc
 8021cca:	ddf3      	ble.n	8021cb4 <_svfprintf_r+0x390>
 8021ccc:	4640      	mov	r0, r8
 8021cce:	4659      	mov	r1, fp
 8021cd0:	aa3d      	add	r2, sp, #244	; 0xf4
 8021cd2:	ae23      	add	r6, sp, #140	; 0x8c
 8021cd4:	f003 f9a4 	bl	8025020 <__ssprint_r>
 8021cd8:	2800      	cmp	r0, #0
 8021cda:	f47f af17 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8021cde:	3f10      	subs	r7, #16
 8021ce0:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8021ce2:	2f10      	cmp	r7, #16
 8021ce4:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8021ce6:	dce8      	bgt.n	8021cba <_svfprintf_r+0x396>
 8021ce8:	46a0      	mov	r8, r4
 8021cea:	461c      	mov	r4, r3
 8021cec:	3401      	adds	r4, #1
 8021cee:	f8c6 8000 	str.w	r8, [r6]
 8021cf2:	2c07      	cmp	r4, #7
 8021cf4:	6077      	str	r7, [r6, #4]
 8021cf6:	443d      	add	r5, r7
 8021cf8:	943e      	str	r4, [sp, #248]	; 0xf8
 8021cfa:	953f      	str	r5, [sp, #252]	; 0xfc
 8021cfc:	f300 8456 	bgt.w	80225ac <_svfprintf_r+0xc88>
 8021d00:	3608      	adds	r6, #8
 8021d02:	e1a5      	b.n	8022050 <_svfprintf_r+0x72c>
 8021d04:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021d06:	9317      	str	r3, [sp, #92]	; 0x5c
 8021d08:	1dc3      	adds	r3, r0, #7
 8021d0a:	f023 0307 	bic.w	r3, r3, #7
 8021d0e:	f103 0108 	add.w	r1, r3, #8
 8021d12:	9111      	str	r1, [sp, #68]	; 0x44
 8021d14:	f8d3 8000 	ldr.w	r8, [r3]
 8021d18:	685d      	ldr	r5, [r3, #4]
 8021d1a:	4640      	mov	r0, r8
 8021d1c:	4642      	mov	r2, r8
 8021d1e:	4629      	mov	r1, r5
 8021d20:	462b      	mov	r3, r5
 8021d22:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8021d26:	f7fe f937 	bl	801ff98 <__fpclassifyd>
 8021d2a:	2801      	cmp	r0, #1
 8021d2c:	4640      	mov	r0, r8
 8021d2e:	f040 8537 	bne.w	80227a0 <_svfprintf_r+0xe7c>
 8021d32:	2300      	movs	r3, #0
 8021d34:	2200      	movs	r2, #0
 8021d36:	4629      	mov	r1, r5
 8021d38:	f7fe ffbe 	bl	8020cb8 <__aeabi_dcmplt>
 8021d3c:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8021d40:	b110      	cbz	r0, 8021d48 <_svfprintf_r+0x424>
 8021d42:	232d      	movs	r3, #45	; 0x2d
 8021d44:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8021d48:	2003      	movs	r0, #3
 8021d4a:	f64e 31f8 	movw	r1, #60408	; 0xebf8
 8021d4e:	f64e 32f4 	movw	r2, #60404	; 0xebf4
 8021d52:	900b      	str	r0, [sp, #44]	; 0x2c
 8021d54:	2000      	movs	r0, #0
 8021d56:	9014      	str	r0, [sp, #80]	; 0x50
 8021d58:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021d5a:	f6c0 0202 	movt	r2, #2050	; 0x802
 8021d5e:	f6c0 0102 	movt	r1, #2050	; 0x802
 8021d62:	2847      	cmp	r0, #71	; 0x47
 8021d64:	bfd8      	it	le
 8021d66:	4611      	movle	r1, r2
 8021d68:	9113      	str	r1, [sp, #76]	; 0x4c
 8021d6a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021d6c:	2203      	movs	r2, #3
 8021d6e:	2000      	movs	r0, #0
 8021d70:	920e      	str	r2, [sp, #56]	; 0x38
 8021d72:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8021d76:	901a      	str	r0, [sp, #104]	; 0x68
 8021d78:	910a      	str	r1, [sp, #40]	; 0x28
 8021d7a:	e774      	b.n	8021c66 <_svfprintf_r+0x342>
 8021d7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021d7e:	f040 0008 	orr.w	r0, r0, #8
 8021d82:	900a      	str	r0, [sp, #40]	; 0x28
 8021d84:	f89a 3000 	ldrb.w	r3, [sl]
 8021d88:	e644      	b.n	8021a14 <_svfprintf_r+0xf0>
 8021d8a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021d8c:	9317      	str	r3, [sp, #92]	; 0x5c
 8021d8e:	f041 0110 	orr.w	r1, r1, #16
 8021d92:	910a      	str	r1, [sp, #40]	; 0x28
 8021d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021d96:	f013 0220 	ands.w	r2, r3, #32
 8021d9a:	f000 80a3 	beq.w	8021ee4 <_svfprintf_r+0x5c0>
 8021d9e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021da0:	2200      	movs	r2, #0
 8021da2:	1dc3      	adds	r3, r0, #7
 8021da4:	f023 0307 	bic.w	r3, r3, #7
 8021da8:	f103 0108 	add.w	r1, r3, #8
 8021dac:	9111      	str	r1, [sp, #68]	; 0x44
 8021dae:	e9d3 4500 	ldrd	r4, r5, [r3]
 8021db2:	ea54 0305 	orrs.w	r3, r4, r5
 8021db6:	bf0c      	ite	eq
 8021db8:	2300      	moveq	r3, #0
 8021dba:	2301      	movne	r3, #1
 8021dbc:	2100      	movs	r1, #0
 8021dbe:	f88d 111f 	strb.w	r1, [sp, #287]	; 0x11f
 8021dc2:	e70d      	b.n	8021be0 <_svfprintf_r+0x2bc>
 8021dc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021dc6:	9317      	str	r3, [sp, #92]	; 0x5c
 8021dc8:	f041 0110 	orr.w	r1, r1, #16
 8021dcc:	910a      	str	r1, [sp, #40]	; 0x28
 8021dce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021dd0:	0690      	lsls	r0, r2, #26
 8021dd2:	f140 80cb 	bpl.w	8021f6c <_svfprintf_r+0x648>
 8021dd6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021dd8:	2201      	movs	r2, #1
 8021dda:	1dc3      	adds	r3, r0, #7
 8021ddc:	e7e2      	b.n	8021da4 <_svfprintf_r+0x480>
 8021dde:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021de0:	9317      	str	r3, [sp, #92]	; 0x5c
 8021de2:	f64e 4304 	movw	r3, #60420	; 0xec04
 8021de6:	f6c0 0302 	movt	r3, #2050	; 0x802
 8021dea:	9319      	str	r3, [sp, #100]	; 0x64
 8021dec:	0683      	lsls	r3, r0, #26
 8021dee:	f140 8120 	bpl.w	8022032 <_svfprintf_r+0x70e>
 8021df2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021df4:	1dcb      	adds	r3, r1, #7
 8021df6:	f023 0307 	bic.w	r3, r3, #7
 8021dfa:	f103 0208 	add.w	r2, r3, #8
 8021dfe:	9211      	str	r2, [sp, #68]	; 0x44
 8021e00:	e9d3 4500 	ldrd	r4, r5, [r3]
 8021e04:	ea54 0105 	orrs.w	r1, r4, r5
 8021e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021e0a:	bf0c      	ite	eq
 8021e0c:	2300      	moveq	r3, #0
 8021e0e:	2301      	movne	r3, #1
 8021e10:	421a      	tst	r2, r3
 8021e12:	f000 8400 	beq.w	8022616 <_svfprintf_r+0xcf2>
 8021e16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021e18:	f042 0202 	orr.w	r2, r2, #2
 8021e1c:	920a      	str	r2, [sp, #40]	; 0x28
 8021e1e:	2202      	movs	r2, #2
 8021e20:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
 8021e24:	2330      	movs	r3, #48	; 0x30
 8021e26:	f88d 311c 	strb.w	r3, [sp, #284]	; 0x11c
 8021e2a:	2301      	movs	r3, #1
 8021e2c:	e7c6      	b.n	8021dbc <_svfprintf_r+0x498>
 8021e2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021e30:	f042 0220 	orr.w	r2, r2, #32
 8021e34:	920a      	str	r2, [sp, #40]	; 0x28
 8021e36:	f89a 3000 	ldrb.w	r3, [sl]
 8021e3a:	e5eb      	b.n	8021a14 <_svfprintf_r+0xf0>
 8021e3c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021e3e:	2400      	movs	r4, #0
 8021e40:	f88d 411f 	strb.w	r4, [sp, #287]	; 0x11f
 8021e44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021e46:	6809      	ldr	r1, [r1, #0]
 8021e48:	9317      	str	r3, [sp, #92]	; 0x5c
 8021e4a:	1d15      	adds	r5, r2, #4
 8021e4c:	9113      	str	r1, [sp, #76]	; 0x4c
 8021e4e:	2900      	cmp	r1, #0
 8021e50:	f000 8702 	beq.w	8022c58 <_svfprintf_r+0x1334>
 8021e54:	2f00      	cmp	r7, #0
 8021e56:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021e58:	f2c0 86be 	blt.w	8022bd8 <_svfprintf_r+0x12b4>
 8021e5c:	4621      	mov	r1, r4
 8021e5e:	463a      	mov	r2, r7
 8021e60:	f002 fb0c 	bl	802447c <memchr>
 8021e64:	2800      	cmp	r0, #0
 8021e66:	f000 872d 	beq.w	8022cc4 <_svfprintf_r+0x13a0>
 8021e6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021e6c:	9414      	str	r4, [sp, #80]	; 0x50
 8021e6e:	1a80      	subs	r0, r0, r2
 8021e70:	900e      	str	r0, [sp, #56]	; 0x38
 8021e72:	42b8      	cmp	r0, r7
 8021e74:	941a      	str	r4, [sp, #104]	; 0x68
 8021e76:	bfc5      	ittet	gt
 8021e78:	ea27 73e7 	bicgt.w	r3, r7, r7, asr #31
 8021e7c:	9511      	strgt	r5, [sp, #68]	; 0x44
 8021e7e:	9b0e      	ldrle	r3, [sp, #56]	; 0x38
 8021e80:	930b      	strgt	r3, [sp, #44]	; 0x2c
 8021e82:	bfd5      	itete	le
 8021e84:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8021e88:	f89d 311f 	ldrbgt.w	r3, [sp, #287]	; 0x11f
 8021e8c:	930b      	strle	r3, [sp, #44]	; 0x2c
 8021e8e:	970e      	strgt	r7, [sp, #56]	; 0x38
 8021e90:	bfdc      	itt	le
 8021e92:	f89d 311f 	ldrble.w	r3, [sp, #287]	; 0x11f
 8021e96:	9511      	strle	r5, [sp, #68]	; 0x44
 8021e98:	e6e5      	b.n	8021c66 <_svfprintf_r+0x342>
 8021e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8021e9e:	4652      	mov	r2, sl
 8021ea0:	2b6c      	cmp	r3, #108	; 0x6c
 8021ea2:	bf05      	ittet	eq
 8021ea4:	f10a 0a01 	addeq.w	sl, sl, #1
 8021ea8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
 8021eaa:	980a      	ldrne	r0, [sp, #40]	; 0x28
 8021eac:	f043 0320 	orreq.w	r3, r3, #32
 8021eb0:	bf15      	itete	ne
 8021eb2:	f040 0010 	orrne.w	r0, r0, #16
 8021eb6:	930a      	streq	r3, [sp, #40]	; 0x28
 8021eb8:	900a      	strne	r0, [sp, #40]	; 0x28
 8021eba:	7853      	ldrbeq	r3, [r2, #1]
 8021ebc:	e5aa      	b.n	8021a14 <_svfprintf_r+0xf0>
 8021ebe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021ec0:	0682      	lsls	r2, r0, #26
 8021ec2:	f140 849e 	bpl.w	8022802 <_svfprintf_r+0xede>
 8021ec6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021ec8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021eca:	680b      	ldr	r3, [r1, #0]
 8021ecc:	3104      	adds	r1, #4
 8021ece:	9111      	str	r1, [sp, #68]	; 0x44
 8021ed0:	17d1      	asrs	r1, r2, #31
 8021ed2:	601a      	str	r2, [r3, #0]
 8021ed4:	6059      	str	r1, [r3, #4]
 8021ed6:	e55b      	b.n	8021990 <_svfprintf_r+0x6c>
 8021ed8:	9317      	str	r3, [sp, #92]	; 0x5c
 8021eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021edc:	f013 0220 	ands.w	r2, r3, #32
 8021ee0:	f47f af5d 	bne.w	8021d9e <_svfprintf_r+0x47a>
 8021ee4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021ee6:	f010 0310 	ands.w	r3, r0, #16
 8021eea:	f000 8495 	beq.w	8022818 <_svfprintf_r+0xef4>
 8021eee:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021ef0:	680b      	ldr	r3, [r1, #0]
 8021ef2:	3104      	adds	r1, #4
 8021ef4:	9111      	str	r1, [sp, #68]	; 0x44
 8021ef6:	461c      	mov	r4, r3
 8021ef8:	3300      	adds	r3, #0
 8021efa:	bf18      	it	ne
 8021efc:	2301      	movne	r3, #1
 8021efe:	2500      	movs	r5, #0
 8021f00:	e75c      	b.n	8021dbc <_svfprintf_r+0x498>
 8021f02:	9317      	str	r3, [sp, #92]	; 0x5c
 8021f04:	2b00      	cmp	r3, #0
 8021f06:	f43f adfa 	beq.w	8021afe <_svfprintf_r+0x1da>
 8021f0a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021f0c:	2301      	movs	r3, #1
 8021f0e:	a933      	add	r1, sp, #204	; 0xcc
 8021f10:	930b      	str	r3, [sp, #44]	; 0x2c
 8021f12:	930e      	str	r3, [sp, #56]	; 0x38
 8021f14:	2300      	movs	r3, #0
 8021f16:	f88d 00cc 	strb.w	r0, [sp, #204]	; 0xcc
 8021f1a:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8021f1e:	9113      	str	r1, [sp, #76]	; 0x4c
 8021f20:	2300      	movs	r3, #0
 8021f22:	9314      	str	r3, [sp, #80]	; 0x50
 8021f24:	931a      	str	r3, [sp, #104]	; 0x68
 8021f26:	e6a2      	b.n	8021c6e <_svfprintf_r+0x34a>
 8021f28:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8021f2c:	2b00      	cmp	r3, #0
 8021f2e:	f040 8456 	bne.w	80227de <_svfprintf_r+0xeba>
 8021f32:	f88d 511f 	strb.w	r5, [sp, #287]	; 0x11f
 8021f36:	f89a 3000 	ldrb.w	r3, [sl]
 8021f3a:	e56b      	b.n	8021a14 <_svfprintf_r+0xf0>
 8021f3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021f3e:	f042 0201 	orr.w	r2, r2, #1
 8021f42:	920a      	str	r2, [sp, #40]	; 0x28
 8021f44:	f89a 3000 	ldrb.w	r3, [sl]
 8021f48:	e564      	b.n	8021a14 <_svfprintf_r+0xf0>
 8021f4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021f4c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021f4e:	681b      	ldr	r3, [r3, #0]
 8021f50:	1d02      	adds	r2, r0, #4
 8021f52:	2b00      	cmp	r3, #0
 8021f54:	930c      	str	r3, [sp, #48]	; 0x30
 8021f56:	f6ff adbf 	blt.w	8021ad8 <_svfprintf_r+0x1b4>
 8021f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8021f5e:	9211      	str	r2, [sp, #68]	; 0x44
 8021f60:	e558      	b.n	8021a14 <_svfprintf_r+0xf0>
 8021f62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021f64:	9317      	str	r3, [sp, #92]	; 0x5c
 8021f66:	0690      	lsls	r0, r2, #26
 8021f68:	f53f af35 	bmi.w	8021dd6 <_svfprintf_r+0x4b2>
 8021f6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021f6e:	06c1      	lsls	r1, r0, #27
 8021f70:	f100 8354 	bmi.w	802261c <_svfprintf_r+0xcf8>
 8021f74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021f76:	0652      	lsls	r2, r2, #25
 8021f78:	f140 8350 	bpl.w	802261c <_svfprintf_r+0xcf8>
 8021f7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021f7e:	2500      	movs	r5, #0
 8021f80:	2201      	movs	r2, #1
 8021f82:	881c      	ldrh	r4, [r3, #0]
 8021f84:	3304      	adds	r3, #4
 8021f86:	9311      	str	r3, [sp, #68]	; 0x44
 8021f88:	ea54 0005 	orrs.w	r0, r4, r5
 8021f8c:	bf0c      	ite	eq
 8021f8e:	2300      	moveq	r3, #0
 8021f90:	2301      	movne	r3, #1
 8021f92:	e713      	b.n	8021dbc <_svfprintf_r+0x498>
 8021f94:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021f96:	9317      	str	r3, [sp, #92]	; 0x5c
 8021f98:	068c      	lsls	r4, r1, #26
 8021f9a:	f53f ae0a 	bmi.w	8021bb2 <_svfprintf_r+0x28e>
 8021f9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021fa0:	06c8      	lsls	r0, r1, #27
 8021fa2:	f140 844b 	bpl.w	802283c <_svfprintf_r+0xf18>
 8021fa6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021fa8:	6813      	ldr	r3, [r2, #0]
 8021faa:	3204      	adds	r2, #4
 8021fac:	9211      	str	r2, [sp, #68]	; 0x44
 8021fae:	461c      	mov	r4, r3
 8021fb0:	461a      	mov	r2, r3
 8021fb2:	17dd      	asrs	r5, r3, #31
 8021fb4:	462b      	mov	r3, r5
 8021fb6:	e607      	b.n	8021bc8 <_svfprintf_r+0x2a4>
 8021fb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8021fbe:	920a      	str	r2, [sp, #40]	; 0x28
 8021fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8021fc4:	e526      	b.n	8021a14 <_svfprintf_r+0xf0>
 8021fc6:	9317      	str	r3, [sp, #92]	; 0x5c
 8021fc8:	2001      	movs	r0, #1
 8021fca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021fcc:	900b      	str	r0, [sp, #44]	; 0x2c
 8021fce:	1d19      	adds	r1, r3, #4
 8021fd0:	900e      	str	r0, [sp, #56]	; 0x38
 8021fd2:	681a      	ldr	r2, [r3, #0]
 8021fd4:	2300      	movs	r3, #0
 8021fd6:	9111      	str	r1, [sp, #68]	; 0x44
 8021fd8:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8021fdc:	ab33      	add	r3, sp, #204	; 0xcc
 8021fde:	f88d 20cc 	strb.w	r2, [sp, #204]	; 0xcc
 8021fe2:	9313      	str	r3, [sp, #76]	; 0x4c
 8021fe4:	e79c      	b.n	8021f20 <_svfprintf_r+0x5fc>
 8021fe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021fe8:	2500      	movs	r5, #0
 8021fea:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021fec:	2178      	movs	r1, #120	; 0x78
 8021fee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021ff0:	681b      	ldr	r3, [r3, #0]
 8021ff2:	3004      	adds	r0, #4
 8021ff4:	f042 0202 	orr.w	r2, r2, #2
 8021ff8:	9011      	str	r0, [sp, #68]	; 0x44
 8021ffa:	920a      	str	r2, [sp, #40]	; 0x28
 8021ffc:	461c      	mov	r4, r3
 8021ffe:	2230      	movs	r2, #48	; 0x30
 8022000:	f64e 4018 	movw	r0, #60440	; 0xec18
 8022004:	1b5b      	subs	r3, r3, r5
 8022006:	f88d 211c 	strb.w	r2, [sp, #284]	; 0x11c
 802200a:	bf18      	it	ne
 802200c:	2301      	movne	r3, #1
 802200e:	f6c0 0002 	movt	r0, #2050	; 0x802
 8022012:	f88d 111d 	strb.w	r1, [sp, #285]	; 0x11d
 8022016:	2202      	movs	r2, #2
 8022018:	9019      	str	r0, [sp, #100]	; 0x64
 802201a:	9117      	str	r1, [sp, #92]	; 0x5c
 802201c:	e6ce      	b.n	8021dbc <_svfprintf_r+0x498>
 802201e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022020:	f64e 4218 	movw	r2, #60440	; 0xec18
 8022024:	9317      	str	r3, [sp, #92]	; 0x5c
 8022026:	f6c0 0202 	movt	r2, #2050	; 0x802
 802202a:	0683      	lsls	r3, r0, #26
 802202c:	9219      	str	r2, [sp, #100]	; 0x64
 802202e:	f53f aee0 	bmi.w	8021df2 <_svfprintf_r+0x4ce>
 8022032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022034:	06dd      	lsls	r5, r3, #27
 8022036:	f100 82fd 	bmi.w	8022634 <_svfprintf_r+0xd10>
 802203a:	990a      	ldr	r1, [sp, #40]	; 0x28
 802203c:	064c      	lsls	r4, r1, #25
 802203e:	f140 82f9 	bpl.w	8022634 <_svfprintf_r+0xd10>
 8022042:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022044:	2500      	movs	r5, #0
 8022046:	8814      	ldrh	r4, [r2, #0]
 8022048:	3204      	adds	r2, #4
 802204a:	9211      	str	r2, [sp, #68]	; 0x44
 802204c:	e6da      	b.n	8021e04 <_svfprintf_r+0x4e0>
 802204e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022050:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8022054:	b16b      	cbz	r3, 8022072 <_svfprintf_r+0x74e>
 8022056:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8022058:	ab47      	add	r3, sp, #284	; 0x11c
 802205a:	3303      	adds	r3, #3
 802205c:	6033      	str	r3, [r6, #0]
 802205e:	3401      	adds	r4, #1
 8022060:	2301      	movs	r3, #1
 8022062:	2c07      	cmp	r4, #7
 8022064:	6073      	str	r3, [r6, #4]
 8022066:	441d      	add	r5, r3
 8022068:	943e      	str	r4, [sp, #248]	; 0xf8
 802206a:	953f      	str	r5, [sp, #252]	; 0xfc
 802206c:	f300 81ef 	bgt.w	802244e <_svfprintf_r+0xb2a>
 8022070:	3608      	adds	r6, #8
 8022072:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022074:	b163      	cbz	r3, 8022090 <_svfprintf_r+0x76c>
 8022076:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8022078:	ab47      	add	r3, sp, #284	; 0x11c
 802207a:	6033      	str	r3, [r6, #0]
 802207c:	2302      	movs	r3, #2
 802207e:	3401      	adds	r4, #1
 8022080:	6073      	str	r3, [r6, #4]
 8022082:	2c07      	cmp	r4, #7
 8022084:	441d      	add	r5, r3
 8022086:	943e      	str	r4, [sp, #248]	; 0xf8
 8022088:	953f      	str	r5, [sp, #252]	; 0xfc
 802208a:	f300 81eb 	bgt.w	8022464 <_svfprintf_r+0xb40>
 802208e:	3608      	adds	r6, #8
 8022090:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022092:	2b80      	cmp	r3, #128	; 0x80
 8022094:	f000 8124 	beq.w	80222e0 <_svfprintf_r+0x9bc>
 8022098:	9814      	ldr	r0, [sp, #80]	; 0x50
 802209a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802209c:	1ac7      	subs	r7, r0, r3
 802209e:	2f00      	cmp	r7, #0
 80220a0:	dd35      	ble.n	802210e <_svfprintf_r+0x7ea>
 80220a2:	2f10      	cmp	r7, #16
 80220a4:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80220a6:	bfd8      	it	le
 80220a8:	f8df 8a38 	ldrle.w	r8, [pc, #2616]	; 8022ae4 <_svfprintf_r+0x11c0>
 80220ac:	dd24      	ble.n	80220f8 <_svfprintf_r+0x7d4>
 80220ae:	f8df 8a34 	ldr.w	r8, [pc, #2612]	; 8022ae4 <_svfprintf_r+0x11c0>
 80220b2:	4623      	mov	r3, r4
 80220b4:	f04f 0910 	mov.w	r9, #16
 80220b8:	4644      	mov	r4, r8
 80220ba:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80220be:	e002      	b.n	80220c6 <_svfprintf_r+0x7a2>
 80220c0:	3f10      	subs	r7, #16
 80220c2:	2f10      	cmp	r7, #16
 80220c4:	dd16      	ble.n	80220f4 <_svfprintf_r+0x7d0>
 80220c6:	3301      	adds	r3, #1
 80220c8:	e886 0210 	stmia.w	r6, {r4, r9}
 80220cc:	3510      	adds	r5, #16
 80220ce:	3608      	adds	r6, #8
 80220d0:	2b07      	cmp	r3, #7
 80220d2:	933e      	str	r3, [sp, #248]	; 0xf8
 80220d4:	953f      	str	r5, [sp, #252]	; 0xfc
 80220d6:	ddf3      	ble.n	80220c0 <_svfprintf_r+0x79c>
 80220d8:	4640      	mov	r0, r8
 80220da:	4659      	mov	r1, fp
 80220dc:	aa3d      	add	r2, sp, #244	; 0xf4
 80220de:	ae23      	add	r6, sp, #140	; 0x8c
 80220e0:	f002 ff9e 	bl	8025020 <__ssprint_r>
 80220e4:	2800      	cmp	r0, #0
 80220e6:	f47f ad11 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 80220ea:	3f10      	subs	r7, #16
 80220ec:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80220ee:	2f10      	cmp	r7, #16
 80220f0:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80220f2:	dce8      	bgt.n	80220c6 <_svfprintf_r+0x7a2>
 80220f4:	46a0      	mov	r8, r4
 80220f6:	461c      	mov	r4, r3
 80220f8:	3401      	adds	r4, #1
 80220fa:	f8c6 8000 	str.w	r8, [r6]
 80220fe:	2c07      	cmp	r4, #7
 8022100:	6077      	str	r7, [r6, #4]
 8022102:	443d      	add	r5, r7
 8022104:	943e      	str	r4, [sp, #248]	; 0xf8
 8022106:	953f      	str	r5, [sp, #252]	; 0xfc
 8022108:	f300 8196 	bgt.w	8022438 <_svfprintf_r+0xb14>
 802210c:	3608      	adds	r6, #8
 802210e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022110:	05ca      	lsls	r2, r1, #23
 8022112:	d475      	bmi.n	8022200 <_svfprintf_r+0x8dc>
 8022114:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8022116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022118:	3401      	adds	r4, #1
 802211a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802211c:	2c07      	cmp	r4, #7
 802211e:	441d      	add	r5, r3
 8022120:	e886 0009 	stmia.w	r6, {r0, r3}
 8022124:	953f      	str	r5, [sp, #252]	; 0xfc
 8022126:	943e      	str	r4, [sp, #248]	; 0xf8
 8022128:	dc5f      	bgt.n	80221ea <_svfprintf_r+0x8c6>
 802212a:	3608      	adds	r6, #8
 802212c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802212e:	074b      	lsls	r3, r1, #29
 8022130:	d540      	bpl.n	80221b4 <_svfprintf_r+0x890>
 8022132:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022136:	1ad7      	subs	r7, r2, r3
 8022138:	2f00      	cmp	r7, #0
 802213a:	dd3b      	ble.n	80221b4 <_svfprintf_r+0x890>
 802213c:	2f10      	cmp	r7, #16
 802213e:	f64e 2878 	movw	r8, #60024	; 0xea78
 8022142:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8022144:	f6c0 0802 	movt	r8, #2050	; 0x802
 8022148:	dd22      	ble.n	8022190 <_svfprintf_r+0x86c>
 802214a:	4623      	mov	r3, r4
 802214c:	f04f 0910 	mov.w	r9, #16
 8022150:	4644      	mov	r4, r8
 8022152:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8022156:	e002      	b.n	802215e <_svfprintf_r+0x83a>
 8022158:	3f10      	subs	r7, #16
 802215a:	2f10      	cmp	r7, #16
 802215c:	dd16      	ble.n	802218c <_svfprintf_r+0x868>
 802215e:	3301      	adds	r3, #1
 8022160:	e886 0210 	stmia.w	r6, {r4, r9}
 8022164:	3510      	adds	r5, #16
 8022166:	3608      	adds	r6, #8
 8022168:	2b07      	cmp	r3, #7
 802216a:	933e      	str	r3, [sp, #248]	; 0xf8
 802216c:	953f      	str	r5, [sp, #252]	; 0xfc
 802216e:	ddf3      	ble.n	8022158 <_svfprintf_r+0x834>
 8022170:	4640      	mov	r0, r8
 8022172:	4659      	mov	r1, fp
 8022174:	aa3d      	add	r2, sp, #244	; 0xf4
 8022176:	ae23      	add	r6, sp, #140	; 0x8c
 8022178:	f002 ff52 	bl	8025020 <__ssprint_r>
 802217c:	2800      	cmp	r0, #0
 802217e:	f47f acc5 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022182:	3f10      	subs	r7, #16
 8022184:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022186:	2f10      	cmp	r7, #16
 8022188:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 802218a:	dce8      	bgt.n	802215e <_svfprintf_r+0x83a>
 802218c:	46a0      	mov	r8, r4
 802218e:	461c      	mov	r4, r3
 8022190:	3401      	adds	r4, #1
 8022192:	f8c6 8000 	str.w	r8, [r6]
 8022196:	2c07      	cmp	r4, #7
 8022198:	6077      	str	r7, [r6, #4]
 802219a:	443d      	add	r5, r7
 802219c:	943e      	str	r4, [sp, #248]	; 0xf8
 802219e:	953f      	str	r5, [sp, #252]	; 0xfc
 80221a0:	dd08      	ble.n	80221b4 <_svfprintf_r+0x890>
 80221a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80221a4:	4659      	mov	r1, fp
 80221a6:	aa3d      	add	r2, sp, #244	; 0xf4
 80221a8:	f002 ff3a 	bl	8025020 <__ssprint_r>
 80221ac:	2800      	cmp	r0, #0
 80221ae:	f47f acad 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 80221b2:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80221b4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80221b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80221b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80221ba:	428a      	cmp	r2, r1
 80221bc:	bfac      	ite	ge
 80221be:	1880      	addge	r0, r0, r2
 80221c0:	1840      	addlt	r0, r0, r1
 80221c2:	900d      	str	r0, [sp, #52]	; 0x34
 80221c4:	2d00      	cmp	r5, #0
 80221c6:	f040 8129 	bne.w	802241c <_svfprintf_r+0xaf8>
 80221ca:	2300      	movs	r3, #0
 80221cc:	ae23      	add	r6, sp, #140	; 0x8c
 80221ce:	933e      	str	r3, [sp, #248]	; 0xf8
 80221d0:	f7ff bbde 	b.w	8021990 <_svfprintf_r+0x6c>
 80221d4:	46a0      	mov	r8, r4
 80221d6:	461c      	mov	r4, r3
 80221d8:	3401      	adds	r4, #1
 80221da:	f8c6 8000 	str.w	r8, [r6]
 80221de:	2c07      	cmp	r4, #7
 80221e0:	6077      	str	r7, [r6, #4]
 80221e2:	443d      	add	r5, r7
 80221e4:	943e      	str	r4, [sp, #248]	; 0xf8
 80221e6:	953f      	str	r5, [sp, #252]	; 0xfc
 80221e8:	dd9f      	ble.n	802212a <_svfprintf_r+0x806>
 80221ea:	9810      	ldr	r0, [sp, #64]	; 0x40
 80221ec:	4659      	mov	r1, fp
 80221ee:	aa3d      	add	r2, sp, #244	; 0xf4
 80221f0:	f002 ff16 	bl	8025020 <__ssprint_r>
 80221f4:	2800      	cmp	r0, #0
 80221f6:	f47f ac89 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 80221fa:	ae23      	add	r6, sp, #140	; 0x8c
 80221fc:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80221fe:	e795      	b.n	802212c <_svfprintf_r+0x808>
 8022200:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8022202:	2965      	cmp	r1, #101	; 0x65
 8022204:	f340 80a9 	ble.w	802235a <_svfprintf_r+0xa36>
 8022208:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 802220c:	2200      	movs	r2, #0
 802220e:	2300      	movs	r3, #0
 8022210:	f7fe fd48 	bl	8020ca4 <__aeabi_dcmpeq>
 8022214:	2800      	cmp	r0, #0
 8022216:	f000 814f 	beq.w	80224b8 <_svfprintf_r+0xb94>
 802221a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 802221c:	f64e 4334 	movw	r3, #60468	; 0xec34
 8022220:	f6c0 0302 	movt	r3, #2050	; 0x802
 8022224:	6033      	str	r3, [r6, #0]
 8022226:	3401      	adds	r4, #1
 8022228:	2301      	movs	r3, #1
 802222a:	2c07      	cmp	r4, #7
 802222c:	6073      	str	r3, [r6, #4]
 802222e:	441d      	add	r5, r3
 8022230:	943e      	str	r4, [sp, #248]	; 0xf8
 8022232:	953f      	str	r5, [sp, #252]	; 0xfc
 8022234:	f300 8310 	bgt.w	8022858 <_svfprintf_r+0xf34>
 8022238:	3608      	adds	r6, #8
 802223a:	9b44      	ldr	r3, [sp, #272]	; 0x110
 802223c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802223e:	429a      	cmp	r2, r3
 8022240:	dc03      	bgt.n	802224a <_svfprintf_r+0x926>
 8022242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022244:	07db      	lsls	r3, r3, #31
 8022246:	f57f af71 	bpl.w	802212c <_svfprintf_r+0x808>
 802224a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 802224c:	981c      	ldr	r0, [sp, #112]	; 0x70
 802224e:	3401      	adds	r4, #1
 8022250:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8022252:	2c07      	cmp	r4, #7
 8022254:	4405      	add	r5, r0
 8022256:	6070      	str	r0, [r6, #4]
 8022258:	6031      	str	r1, [r6, #0]
 802225a:	953f      	str	r5, [sp, #252]	; 0xfc
 802225c:	943e      	str	r4, [sp, #248]	; 0xf8
 802225e:	f300 8458 	bgt.w	8022b12 <_svfprintf_r+0x11ee>
 8022262:	3608      	adds	r6, #8
 8022264:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022266:	1e57      	subs	r7, r2, #1
 8022268:	2f00      	cmp	r7, #0
 802226a:	f77f af5f 	ble.w	802212c <_svfprintf_r+0x808>
 802226e:	2f10      	cmp	r7, #16
 8022270:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8022272:	f340 8564 	ble.w	8022d3e <_svfprintf_r+0x141a>
 8022276:	f8df 886c 	ldr.w	r8, [pc, #2156]	; 8022ae4 <_svfprintf_r+0x11c0>
 802227a:	4623      	mov	r3, r4
 802227c:	f04f 0910 	mov.w	r9, #16
 8022280:	4644      	mov	r4, r8
 8022282:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8022286:	e002      	b.n	802228e <_svfprintf_r+0x96a>
 8022288:	3f10      	subs	r7, #16
 802228a:	2f10      	cmp	r7, #16
 802228c:	dda2      	ble.n	80221d4 <_svfprintf_r+0x8b0>
 802228e:	3301      	adds	r3, #1
 8022290:	e886 0210 	stmia.w	r6, {r4, r9}
 8022294:	3510      	adds	r5, #16
 8022296:	3608      	adds	r6, #8
 8022298:	2b07      	cmp	r3, #7
 802229a:	933e      	str	r3, [sp, #248]	; 0xf8
 802229c:	953f      	str	r5, [sp, #252]	; 0xfc
 802229e:	ddf3      	ble.n	8022288 <_svfprintf_r+0x964>
 80222a0:	4640      	mov	r0, r8
 80222a2:	4659      	mov	r1, fp
 80222a4:	aa3d      	add	r2, sp, #244	; 0xf4
 80222a6:	ae23      	add	r6, sp, #140	; 0x8c
 80222a8:	f002 feba 	bl	8025020 <__ssprint_r>
 80222ac:	2800      	cmp	r0, #0
 80222ae:	f47f ac2d 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 80222b2:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80222b4:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80222b6:	e7e7      	b.n	8022288 <_svfprintf_r+0x964>
 80222b8:	2a00      	cmp	r2, #0
 80222ba:	f040 80b9 	bne.w	8022430 <_svfprintf_r+0xb0c>
 80222be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80222c0:	07c1      	lsls	r1, r0, #31
 80222c2:	bf5e      	ittt	pl
 80222c4:	920e      	strpl	r2, [sp, #56]	; 0x38
 80222c6:	a83d      	addpl	r0, sp, #244	; 0xf4
 80222c8:	9013      	strpl	r0, [sp, #76]	; 0x4c
 80222ca:	f57f acc2 	bpl.w	8021c52 <_svfprintf_r+0x32e>
 80222ce:	9921      	ldr	r1, [sp, #132]	; 0x84
 80222d0:	2330      	movs	r3, #48	; 0x30
 80222d2:	f10d 02f3 	add.w	r2, sp, #243	; 0xf3
 80222d6:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 80222da:	9213      	str	r2, [sp, #76]	; 0x4c
 80222dc:	910e      	str	r1, [sp, #56]	; 0x38
 80222de:	e4b8      	b.n	8021c52 <_svfprintf_r+0x32e>
 80222e0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80222e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80222e4:	1a47      	subs	r7, r0, r1
 80222e6:	2f00      	cmp	r7, #0
 80222e8:	f77f aed6 	ble.w	8022098 <_svfprintf_r+0x774>
 80222ec:	2f10      	cmp	r7, #16
 80222ee:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80222f0:	bfd8      	it	le
 80222f2:	f8df 87f0 	ldrle.w	r8, [pc, #2032]	; 8022ae4 <_svfprintf_r+0x11c0>
 80222f6:	dd24      	ble.n	8022342 <_svfprintf_r+0xa1e>
 80222f8:	f8df 87e8 	ldr.w	r8, [pc, #2024]	; 8022ae4 <_svfprintf_r+0x11c0>
 80222fc:	4623      	mov	r3, r4
 80222fe:	f04f 0910 	mov.w	r9, #16
 8022302:	4644      	mov	r4, r8
 8022304:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8022308:	e002      	b.n	8022310 <_svfprintf_r+0x9ec>
 802230a:	3f10      	subs	r7, #16
 802230c:	2f10      	cmp	r7, #16
 802230e:	dd16      	ble.n	802233e <_svfprintf_r+0xa1a>
 8022310:	3301      	adds	r3, #1
 8022312:	e886 0210 	stmia.w	r6, {r4, r9}
 8022316:	3510      	adds	r5, #16
 8022318:	3608      	adds	r6, #8
 802231a:	2b07      	cmp	r3, #7
 802231c:	933e      	str	r3, [sp, #248]	; 0xf8
 802231e:	953f      	str	r5, [sp, #252]	; 0xfc
 8022320:	ddf3      	ble.n	802230a <_svfprintf_r+0x9e6>
 8022322:	4640      	mov	r0, r8
 8022324:	4659      	mov	r1, fp
 8022326:	aa3d      	add	r2, sp, #244	; 0xf4
 8022328:	ae23      	add	r6, sp, #140	; 0x8c
 802232a:	f002 fe79 	bl	8025020 <__ssprint_r>
 802232e:	2800      	cmp	r0, #0
 8022330:	f47f abec 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022334:	3f10      	subs	r7, #16
 8022336:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022338:	2f10      	cmp	r7, #16
 802233a:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 802233c:	dce8      	bgt.n	8022310 <_svfprintf_r+0x9ec>
 802233e:	46a0      	mov	r8, r4
 8022340:	461c      	mov	r4, r3
 8022342:	3401      	adds	r4, #1
 8022344:	f8c6 8000 	str.w	r8, [r6]
 8022348:	2c07      	cmp	r4, #7
 802234a:	6077      	str	r7, [r6, #4]
 802234c:	443d      	add	r5, r7
 802234e:	943e      	str	r4, [sp, #248]	; 0xf8
 8022350:	953f      	str	r5, [sp, #252]	; 0xfc
 8022352:	f300 820c 	bgt.w	802276e <_svfprintf_r+0xe4a>
 8022356:	3608      	adds	r6, #8
 8022358:	e69e      	b.n	8022098 <_svfprintf_r+0x774>
 802235a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802235c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 802235e:	2b01      	cmp	r3, #1
 8022360:	f340 81d2 	ble.w	8022708 <_svfprintf_r+0xde4>
 8022364:	3401      	adds	r4, #1
 8022366:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8022368:	3501      	adds	r5, #1
 802236a:	2301      	movs	r3, #1
 802236c:	2c07      	cmp	r4, #7
 802236e:	e886 000a 	stmia.w	r6, {r1, r3}
 8022372:	953f      	str	r5, [sp, #252]	; 0xfc
 8022374:	943e      	str	r4, [sp, #248]	; 0xf8
 8022376:	f300 81e2 	bgt.w	802273e <_svfprintf_r+0xe1a>
 802237a:	3608      	adds	r6, #8
 802237c:	3401      	adds	r4, #1
 802237e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022380:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8022382:	2c07      	cmp	r4, #7
 8022384:	441d      	add	r5, r3
 8022386:	e886 000c 	stmia.w	r6, {r2, r3}
 802238a:	943e      	str	r4, [sp, #248]	; 0xf8
 802238c:	953f      	str	r5, [sp, #252]	; 0xfc
 802238e:	f300 81e2 	bgt.w	8022756 <_svfprintf_r+0xe32>
 8022392:	3608      	adds	r6, #8
 8022394:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8022398:	2200      	movs	r2, #0
 802239a:	2300      	movs	r3, #0
 802239c:	f7fe fc82 	bl	8020ca4 <__aeabi_dcmpeq>
 80223a0:	2800      	cmp	r0, #0
 80223a2:	f040 810e 	bne.w	80225c2 <_svfprintf_r+0xc9e>
 80223a6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80223a8:	3401      	adds	r4, #1
 80223aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80223ac:	1e43      	subs	r3, r0, #1
 80223ae:	6073      	str	r3, [r6, #4]
 80223b0:	461a      	mov	r2, r3
 80223b2:	1c4b      	adds	r3, r1, #1
 80223b4:	2c07      	cmp	r4, #7
 80223b6:	6033      	str	r3, [r6, #0]
 80223b8:	4415      	add	r5, r2
 80223ba:	943e      	str	r4, [sp, #248]	; 0xf8
 80223bc:	953f      	str	r5, [sp, #252]	; 0xfc
 80223be:	dc21      	bgt.n	8022404 <_svfprintf_r+0xae0>
 80223c0:	3608      	adds	r6, #8
 80223c2:	3401      	adds	r4, #1
 80223c4:	9820      	ldr	r0, [sp, #128]	; 0x80
 80223c6:	2c07      	cmp	r4, #7
 80223c8:	ab40      	add	r3, sp, #256	; 0x100
 80223ca:	4405      	add	r5, r0
 80223cc:	6033      	str	r3, [r6, #0]
 80223ce:	6070      	str	r0, [r6, #4]
 80223d0:	953f      	str	r5, [sp, #252]	; 0xfc
 80223d2:	943e      	str	r4, [sp, #248]	; 0xf8
 80223d4:	f77f aea9 	ble.w	802212a <_svfprintf_r+0x806>
 80223d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80223da:	4659      	mov	r1, fp
 80223dc:	aa3d      	add	r2, sp, #244	; 0xf4
 80223de:	f002 fe1f 	bl	8025020 <__ssprint_r>
 80223e2:	2800      	cmp	r0, #0
 80223e4:	f47f ab92 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 80223e8:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80223ea:	ae23      	add	r6, sp, #140	; 0x8c
 80223ec:	e69e      	b.n	802212c <_svfprintf_r+0x808>
 80223ee:	46a0      	mov	r8, r4
 80223f0:	461c      	mov	r4, r3
 80223f2:	3401      	adds	r4, #1
 80223f4:	f8c6 8000 	str.w	r8, [r6]
 80223f8:	2c07      	cmp	r4, #7
 80223fa:	6077      	str	r7, [r6, #4]
 80223fc:	443d      	add	r5, r7
 80223fe:	943e      	str	r4, [sp, #248]	; 0xf8
 8022400:	953f      	str	r5, [sp, #252]	; 0xfc
 8022402:	dddd      	ble.n	80223c0 <_svfprintf_r+0xa9c>
 8022404:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022406:	4659      	mov	r1, fp
 8022408:	aa3d      	add	r2, sp, #244	; 0xf4
 802240a:	f002 fe09 	bl	8025020 <__ssprint_r>
 802240e:	2800      	cmp	r0, #0
 8022410:	f47f ab7c 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022414:	ae23      	add	r6, sp, #140	; 0x8c
 8022416:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022418:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 802241a:	e7d2      	b.n	80223c2 <_svfprintf_r+0xa9e>
 802241c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802241e:	4659      	mov	r1, fp
 8022420:	aa3d      	add	r2, sp, #244	; 0xf4
 8022422:	f002 fdfd 	bl	8025020 <__ssprint_r>
 8022426:	2800      	cmp	r0, #0
 8022428:	f43f aecf 	beq.w	80221ca <_svfprintf_r+0x8a6>
 802242c:	f7ff bb6e 	b.w	8021b0c <_svfprintf_r+0x1e8>
 8022430:	930e      	str	r3, [sp, #56]	; 0x38
 8022432:	ab3d      	add	r3, sp, #244	; 0xf4
 8022434:	9313      	str	r3, [sp, #76]	; 0x4c
 8022436:	e40c      	b.n	8021c52 <_svfprintf_r+0x32e>
 8022438:	9810      	ldr	r0, [sp, #64]	; 0x40
 802243a:	4659      	mov	r1, fp
 802243c:	aa3d      	add	r2, sp, #244	; 0xf4
 802243e:	f002 fdef 	bl	8025020 <__ssprint_r>
 8022442:	2800      	cmp	r0, #0
 8022444:	f47f ab62 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022448:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 802244a:	ae23      	add	r6, sp, #140	; 0x8c
 802244c:	e65f      	b.n	802210e <_svfprintf_r+0x7ea>
 802244e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022450:	4659      	mov	r1, fp
 8022452:	aa3d      	add	r2, sp, #244	; 0xf4
 8022454:	f002 fde4 	bl	8025020 <__ssprint_r>
 8022458:	2800      	cmp	r0, #0
 802245a:	f47f ab57 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 802245e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022460:	ae23      	add	r6, sp, #140	; 0x8c
 8022462:	e606      	b.n	8022072 <_svfprintf_r+0x74e>
 8022464:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022466:	4659      	mov	r1, fp
 8022468:	aa3d      	add	r2, sp, #244	; 0xf4
 802246a:	f002 fdd9 	bl	8025020 <__ssprint_r>
 802246e:	2800      	cmp	r0, #0
 8022470:	f47f ab4c 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022474:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022476:	ae23      	add	r6, sp, #140	; 0x8c
 8022478:	e60a      	b.n	8022090 <_svfprintf_r+0x76c>
 802247a:	4620      	mov	r0, r4
 802247c:	4629      	mov	r1, r5
 802247e:	220a      	movs	r2, #10
 8022480:	2300      	movs	r3, #0
 8022482:	f004 f8bf 	bl	8026604 <__aeabi_uldivmod>
 8022486:	4646      	mov	r6, r8
 8022488:	4620      	mov	r0, r4
 802248a:	4629      	mov	r1, r5
 802248c:	2300      	movs	r3, #0
 802248e:	f108 38ff 	add.w	r8, r8, #4294967295
 8022492:	f102 0430 	add.w	r4, r2, #48	; 0x30
 8022496:	220a      	movs	r2, #10
 8022498:	7034      	strb	r4, [r6, #0]
 802249a:	f004 f8b3 	bl	8026604 <__aeabi_uldivmod>
 802249e:	4604      	mov	r4, r0
 80224a0:	460d      	mov	r5, r1
 80224a2:	ea54 0305 	orrs.w	r3, r4, r5
 80224a6:	d1e8      	bne.n	802247a <_svfprintf_r+0xb56>
 80224a8:	9613      	str	r6, [sp, #76]	; 0x4c
 80224aa:	464e      	mov	r6, r9
 80224ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80224ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80224b0:	1ac3      	subs	r3, r0, r3
 80224b2:	930e      	str	r3, [sp, #56]	; 0x38
 80224b4:	f7ff bbcd 	b.w	8021c52 <_svfprintf_r+0x32e>
 80224b8:	9f44      	ldr	r7, [sp, #272]	; 0x110
 80224ba:	2f00      	cmp	r7, #0
 80224bc:	f340 81d7 	ble.w	802286e <_svfprintf_r+0xf4a>
 80224c0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80224c2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80224c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80224c6:	428f      	cmp	r7, r1
 80224c8:	bfa8      	it	ge
 80224ca:	460f      	movge	r7, r1
 80224cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80224ce:	2f00      	cmp	r7, #0
 80224d0:	441a      	add	r2, r3
 80224d2:	920e      	str	r2, [sp, #56]	; 0x38
 80224d4:	dd0b      	ble.n	80224ee <_svfprintf_r+0xbca>
 80224d6:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80224d8:	19ed      	adds	r5, r5, r7
 80224da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80224dc:	3401      	adds	r4, #1
 80224de:	6077      	str	r7, [r6, #4]
 80224e0:	2c07      	cmp	r4, #7
 80224e2:	6033      	str	r3, [r6, #0]
 80224e4:	953f      	str	r5, [sp, #252]	; 0xfc
 80224e6:	943e      	str	r4, [sp, #248]	; 0xf8
 80224e8:	f300 8384 	bgt.w	8022bf4 <_svfprintf_r+0x12d0>
 80224ec:	3608      	adds	r6, #8
 80224ee:	981a      	ldr	r0, [sp, #104]	; 0x68
 80224f0:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 80224f4:	1bc7      	subs	r7, r0, r7
 80224f6:	2f00      	cmp	r7, #0
 80224f8:	f340 80ae 	ble.w	8022658 <_svfprintf_r+0xd34>
 80224fc:	2f10      	cmp	r7, #16
 80224fe:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8022500:	bfd8      	it	le
 8022502:	f8df 85e0 	ldrle.w	r8, [pc, #1504]	; 8022ae4 <_svfprintf_r+0x11c0>
 8022506:	f340 8170 	ble.w	80227ea <_svfprintf_r+0xec6>
 802250a:	f8df 85d8 	ldr.w	r8, [pc, #1496]	; 8022ae4 <_svfprintf_r+0x11c0>
 802250e:	4623      	mov	r3, r4
 8022510:	f04f 0910 	mov.w	r9, #16
 8022514:	4644      	mov	r4, r8
 8022516:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 802251a:	e003      	b.n	8022524 <_svfprintf_r+0xc00>
 802251c:	3f10      	subs	r7, #16
 802251e:	2f10      	cmp	r7, #16
 8022520:	f340 8161 	ble.w	80227e6 <_svfprintf_r+0xec2>
 8022524:	3301      	adds	r3, #1
 8022526:	e886 0210 	stmia.w	r6, {r4, r9}
 802252a:	3510      	adds	r5, #16
 802252c:	3608      	adds	r6, #8
 802252e:	2b07      	cmp	r3, #7
 8022530:	933e      	str	r3, [sp, #248]	; 0xf8
 8022532:	953f      	str	r5, [sp, #252]	; 0xfc
 8022534:	ddf2      	ble.n	802251c <_svfprintf_r+0xbf8>
 8022536:	4640      	mov	r0, r8
 8022538:	4659      	mov	r1, fp
 802253a:	aa3d      	add	r2, sp, #244	; 0xf4
 802253c:	ae23      	add	r6, sp, #140	; 0x8c
 802253e:	f002 fd6f 	bl	8025020 <__ssprint_r>
 8022542:	2800      	cmp	r0, #0
 8022544:	f47f aae2 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022548:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 802254a:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 802254c:	e7e6      	b.n	802251c <_svfprintf_r+0xbf8>
 802254e:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 8022552:	f10d 02f3 	add.w	r2, sp, #243	; 0xf3
 8022556:	46b4      	mov	ip, r6
 8022558:	f004 010f 	and.w	r1, r4, #15
 802255c:	0923      	lsrs	r3, r4, #4
 802255e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8022562:	092e      	lsrs	r6, r5, #4
 8022564:	f818 0001 	ldrb.w	r0, [r8, r1]
 8022568:	461c      	mov	r4, r3
 802256a:	4635      	mov	r5, r6
 802256c:	4611      	mov	r1, r2
 802256e:	3a01      	subs	r2, #1
 8022570:	ea54 0305 	orrs.w	r3, r4, r5
 8022574:	7008      	strb	r0, [r1, #0]
 8022576:	d1ef      	bne.n	8022558 <_svfprintf_r+0xc34>
 8022578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802257a:	4666      	mov	r6, ip
 802257c:	9113      	str	r1, [sp, #76]	; 0x4c
 802257e:	1a5b      	subs	r3, r3, r1
 8022580:	930e      	str	r3, [sp, #56]	; 0x38
 8022582:	f7ff bb66 	b.w	8021c52 <_svfprintf_r+0x32e>
 8022586:	2c0a      	cmp	r4, #10
 8022588:	f175 0000 	sbcs.w	r0, r5, #0
 802258c:	bf24      	itt	cs
 802258e:	f10d 08f3 	addcs.w	r8, sp, #243	; 0xf3
 8022592:	46b1      	movcs	r9, r6
 8022594:	f4bf af71 	bcs.w	802247a <_svfprintf_r+0xb56>
 8022598:	9921      	ldr	r1, [sp, #132]	; 0x84
 802259a:	3430      	adds	r4, #48	; 0x30
 802259c:	f10d 02f3 	add.w	r2, sp, #243	; 0xf3
 80225a0:	f88d 40f3 	strb.w	r4, [sp, #243]	; 0xf3
 80225a4:	9213      	str	r2, [sp, #76]	; 0x4c
 80225a6:	910e      	str	r1, [sp, #56]	; 0x38
 80225a8:	f7ff bb53 	b.w	8021c52 <_svfprintf_r+0x32e>
 80225ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 80225ae:	4659      	mov	r1, fp
 80225b0:	aa3d      	add	r2, sp, #244	; 0xf4
 80225b2:	f002 fd35 	bl	8025020 <__ssprint_r>
 80225b6:	2800      	cmp	r0, #0
 80225b8:	f47f aaa8 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 80225bc:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80225be:	ae23      	add	r6, sp, #140	; 0x8c
 80225c0:	e546      	b.n	8022050 <_svfprintf_r+0x72c>
 80225c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80225c4:	1e57      	subs	r7, r2, #1
 80225c6:	2f00      	cmp	r7, #0
 80225c8:	f77f aefb 	ble.w	80223c2 <_svfprintf_r+0xa9e>
 80225cc:	2f10      	cmp	r7, #16
 80225ce:	f8df 8514 	ldr.w	r8, [pc, #1300]	; 8022ae4 <_svfprintf_r+0x11c0>
 80225d2:	f77f af0e 	ble.w	80223f2 <_svfprintf_r+0xace>
 80225d6:	4623      	mov	r3, r4
 80225d8:	f04f 0910 	mov.w	r9, #16
 80225dc:	4644      	mov	r4, r8
 80225de:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80225e2:	e003      	b.n	80225ec <_svfprintf_r+0xcc8>
 80225e4:	3f10      	subs	r7, #16
 80225e6:	2f10      	cmp	r7, #16
 80225e8:	f77f af01 	ble.w	80223ee <_svfprintf_r+0xaca>
 80225ec:	3301      	adds	r3, #1
 80225ee:	e886 0210 	stmia.w	r6, {r4, r9}
 80225f2:	3510      	adds	r5, #16
 80225f4:	3608      	adds	r6, #8
 80225f6:	2b07      	cmp	r3, #7
 80225f8:	933e      	str	r3, [sp, #248]	; 0xf8
 80225fa:	953f      	str	r5, [sp, #252]	; 0xfc
 80225fc:	ddf2      	ble.n	80225e4 <_svfprintf_r+0xcc0>
 80225fe:	4640      	mov	r0, r8
 8022600:	4659      	mov	r1, fp
 8022602:	aa3d      	add	r2, sp, #244	; 0xf4
 8022604:	ae23      	add	r6, sp, #140	; 0x8c
 8022606:	f002 fd0b 	bl	8025020 <__ssprint_r>
 802260a:	2800      	cmp	r0, #0
 802260c:	f47f aa7e 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022610:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022612:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8022614:	e7e6      	b.n	80225e4 <_svfprintf_r+0xcc0>
 8022616:	2202      	movs	r2, #2
 8022618:	f7ff bbd0 	b.w	8021dbc <_svfprintf_r+0x498>
 802261c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802261e:	2201      	movs	r2, #1
 8022620:	680b      	ldr	r3, [r1, #0]
 8022622:	3104      	adds	r1, #4
 8022624:	9111      	str	r1, [sp, #68]	; 0x44
 8022626:	461c      	mov	r4, r3
 8022628:	3300      	adds	r3, #0
 802262a:	bf18      	it	ne
 802262c:	2301      	movne	r3, #1
 802262e:	2500      	movs	r5, #0
 8022630:	f7ff bbc4 	b.w	8021dbc <_svfprintf_r+0x498>
 8022634:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022636:	2500      	movs	r5, #0
 8022638:	6803      	ldr	r3, [r0, #0]
 802263a:	3004      	adds	r0, #4
 802263c:	9011      	str	r0, [sp, #68]	; 0x44
 802263e:	461c      	mov	r4, r3
 8022640:	f7ff bbe0 	b.w	8021e04 <_svfprintf_r+0x4e0>
 8022644:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022646:	4659      	mov	r1, fp
 8022648:	aa3d      	add	r2, sp, #244	; 0xf4
 802264a:	f002 fce9 	bl	8025020 <__ssprint_r>
 802264e:	2800      	cmp	r0, #0
 8022650:	f47f aa5c 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022654:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022656:	ae23      	add	r6, sp, #140	; 0x8c
 8022658:	9b44      	ldr	r3, [sp, #272]	; 0x110
 802265a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802265c:	4299      	cmp	r1, r3
 802265e:	dc45      	bgt.n	80226ec <_svfprintf_r+0xdc8>
 8022660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022662:	07d1      	lsls	r1, r2, #31
 8022664:	d442      	bmi.n	80226ec <_svfprintf_r+0xdc8>
 8022666:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022668:	991a      	ldr	r1, [sp, #104]	; 0x68
 802266a:	1842      	adds	r2, r0, r1
 802266c:	9812      	ldr	r0, [sp, #72]	; 0x48
 802266e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022670:	1ac3      	subs	r3, r0, r3
 8022672:	1a8f      	subs	r7, r1, r2
 8022674:	42bb      	cmp	r3, r7
 8022676:	bfb8      	it	lt
 8022678:	461f      	movlt	r7, r3
 802267a:	2f00      	cmp	r7, #0
 802267c:	dd0a      	ble.n	8022694 <_svfprintf_r+0xd70>
 802267e:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8022680:	19ed      	adds	r5, r5, r7
 8022682:	6032      	str	r2, [r6, #0]
 8022684:	3401      	adds	r4, #1
 8022686:	6077      	str	r7, [r6, #4]
 8022688:	2c07      	cmp	r4, #7
 802268a:	953f      	str	r5, [sp, #252]	; 0xfc
 802268c:	943e      	str	r4, [sp, #248]	; 0xf8
 802268e:	f300 82d5 	bgt.w	8022c3c <_svfprintf_r+0x1318>
 8022692:	3608      	adds	r6, #8
 8022694:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8022698:	1bdf      	subs	r7, r3, r7
 802269a:	2f00      	cmp	r7, #0
 802269c:	f77f ad46 	ble.w	802212c <_svfprintf_r+0x808>
 80226a0:	2f10      	cmp	r7, #16
 80226a2:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80226a4:	f340 834b 	ble.w	8022d3e <_svfprintf_r+0x141a>
 80226a8:	f8df 8438 	ldr.w	r8, [pc, #1080]	; 8022ae4 <_svfprintf_r+0x11c0>
 80226ac:	4623      	mov	r3, r4
 80226ae:	f04f 0910 	mov.w	r9, #16
 80226b2:	4644      	mov	r4, r8
 80226b4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80226b8:	e003      	b.n	80226c2 <_svfprintf_r+0xd9e>
 80226ba:	3f10      	subs	r7, #16
 80226bc:	2f10      	cmp	r7, #16
 80226be:	f77f ad89 	ble.w	80221d4 <_svfprintf_r+0x8b0>
 80226c2:	3301      	adds	r3, #1
 80226c4:	e886 0210 	stmia.w	r6, {r4, r9}
 80226c8:	3510      	adds	r5, #16
 80226ca:	3608      	adds	r6, #8
 80226cc:	2b07      	cmp	r3, #7
 80226ce:	933e      	str	r3, [sp, #248]	; 0xf8
 80226d0:	953f      	str	r5, [sp, #252]	; 0xfc
 80226d2:	ddf2      	ble.n	80226ba <_svfprintf_r+0xd96>
 80226d4:	4640      	mov	r0, r8
 80226d6:	4659      	mov	r1, fp
 80226d8:	aa3d      	add	r2, sp, #244	; 0xf4
 80226da:	ae23      	add	r6, sp, #140	; 0x8c
 80226dc:	f002 fca0 	bl	8025020 <__ssprint_r>
 80226e0:	2800      	cmp	r0, #0
 80226e2:	f47f aa13 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 80226e6:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80226e8:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80226ea:	e7e6      	b.n	80226ba <_svfprintf_r+0xd96>
 80226ec:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80226ee:	981c      	ldr	r0, [sp, #112]	; 0x70
 80226f0:	3401      	adds	r4, #1
 80226f2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80226f4:	2c07      	cmp	r4, #7
 80226f6:	4405      	add	r5, r0
 80226f8:	6070      	str	r0, [r6, #4]
 80226fa:	6031      	str	r1, [r6, #0]
 80226fc:	953f      	str	r5, [sp, #252]	; 0xfc
 80226fe:	943e      	str	r4, [sp, #248]	; 0xf8
 8022700:	f300 8290 	bgt.w	8022c24 <_svfprintf_r+0x1300>
 8022704:	3608      	adds	r6, #8
 8022706:	e7ae      	b.n	8022666 <_svfprintf_r+0xd42>
 8022708:	980a      	ldr	r0, [sp, #40]	; 0x28
 802270a:	07c2      	lsls	r2, r0, #31
 802270c:	f53f ae2a 	bmi.w	8022364 <_svfprintf_r+0xa40>
 8022710:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022712:	3401      	adds	r4, #1
 8022714:	3501      	adds	r5, #1
 8022716:	6033      	str	r3, [r6, #0]
 8022718:	2301      	movs	r3, #1
 802271a:	2c07      	cmp	r4, #7
 802271c:	6073      	str	r3, [r6, #4]
 802271e:	953f      	str	r5, [sp, #252]	; 0xfc
 8022720:	943e      	str	r4, [sp, #248]	; 0xf8
 8022722:	f77f ae4d 	ble.w	80223c0 <_svfprintf_r+0xa9c>
 8022726:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022728:	4659      	mov	r1, fp
 802272a:	aa3d      	add	r2, sp, #244	; 0xf4
 802272c:	f002 fc78 	bl	8025020 <__ssprint_r>
 8022730:	2800      	cmp	r0, #0
 8022732:	f47f a9eb 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022736:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022738:	ae23      	add	r6, sp, #140	; 0x8c
 802273a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 802273c:	e641      	b.n	80223c2 <_svfprintf_r+0xa9e>
 802273e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022740:	4659      	mov	r1, fp
 8022742:	aa3d      	add	r2, sp, #244	; 0xf4
 8022744:	f002 fc6c 	bl	8025020 <__ssprint_r>
 8022748:	2800      	cmp	r0, #0
 802274a:	f47f a9df 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 802274e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022750:	ae23      	add	r6, sp, #140	; 0x8c
 8022752:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8022754:	e612      	b.n	802237c <_svfprintf_r+0xa58>
 8022756:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022758:	4659      	mov	r1, fp
 802275a:	aa3d      	add	r2, sp, #244	; 0xf4
 802275c:	f002 fc60 	bl	8025020 <__ssprint_r>
 8022760:	2800      	cmp	r0, #0
 8022762:	f47f a9d3 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022766:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022768:	ae23      	add	r6, sp, #140	; 0x8c
 802276a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 802276c:	e612      	b.n	8022394 <_svfprintf_r+0xa70>
 802276e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022770:	4659      	mov	r1, fp
 8022772:	aa3d      	add	r2, sp, #244	; 0xf4
 8022774:	f002 fc54 	bl	8025020 <__ssprint_r>
 8022778:	2800      	cmp	r0, #0
 802277a:	f47f a9c7 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 802277e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022780:	ae23      	add	r6, sp, #140	; 0x8c
 8022782:	e489      	b.n	8022098 <_svfprintf_r+0x774>
 8022784:	4264      	negs	r4, r4
 8022786:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802278a:	232d      	movs	r3, #45	; 0x2d
 802278c:	ea54 0205 	orrs.w	r2, r4, r5
 8022790:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8022794:	bf0c      	ite	eq
 8022796:	2300      	moveq	r3, #0
 8022798:	2301      	movne	r3, #1
 802279a:	2201      	movs	r2, #1
 802279c:	f7ff ba20 	b.w	8021be0 <_svfprintf_r+0x2bc>
 80227a0:	4629      	mov	r1, r5
 80227a2:	f7fd fbf9 	bl	801ff98 <__fpclassifyd>
 80227a6:	2800      	cmp	r0, #0
 80227a8:	f040 80ba 	bne.w	8022920 <_svfprintf_r+0xffc>
 80227ac:	9014      	str	r0, [sp, #80]	; 0x50
 80227ae:	f64e 33fc 	movw	r3, #60412	; 0xebfc
 80227b2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80227b4:	f6c0 0302 	movt	r3, #2050	; 0x802
 80227b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80227ba:	2103      	movs	r1, #3
 80227bc:	910b      	str	r1, [sp, #44]	; 0x2c
 80227be:	2847      	cmp	r0, #71	; 0x47
 80227c0:	bfd8      	it	le
 80227c2:	461a      	movle	r2, r3
 80227c4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80227c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80227c8:	9213      	str	r2, [sp, #76]	; 0x4c
 80227ca:	2203      	movs	r2, #3
 80227cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80227d0:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80227d4:	910a      	str	r1, [sp, #40]	; 0x28
 80227d6:	920e      	str	r2, [sp, #56]	; 0x38
 80227d8:	901a      	str	r0, [sp, #104]	; 0x68
 80227da:	f7ff ba44 	b.w	8021c66 <_svfprintf_r+0x342>
 80227de:	f89a 3000 	ldrb.w	r3, [sl]
 80227e2:	f7ff b917 	b.w	8021a14 <_svfprintf_r+0xf0>
 80227e6:	46a0      	mov	r8, r4
 80227e8:	461c      	mov	r4, r3
 80227ea:	3401      	adds	r4, #1
 80227ec:	f8c6 8000 	str.w	r8, [r6]
 80227f0:	2c07      	cmp	r4, #7
 80227f2:	6077      	str	r7, [r6, #4]
 80227f4:	443d      	add	r5, r7
 80227f6:	943e      	str	r4, [sp, #248]	; 0xf8
 80227f8:	953f      	str	r5, [sp, #252]	; 0xfc
 80227fa:	f73f af23 	bgt.w	8022644 <_svfprintf_r+0xd20>
 80227fe:	3608      	adds	r6, #8
 8022800:	e72a      	b.n	8022658 <_svfprintf_r+0xd34>
 8022802:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022804:	06d3      	lsls	r3, r2, #27
 8022806:	d57f      	bpl.n	8022908 <_svfprintf_r+0xfe4>
 8022808:	9811      	ldr	r0, [sp, #68]	; 0x44
 802280a:	990d      	ldr	r1, [sp, #52]	; 0x34
 802280c:	6803      	ldr	r3, [r0, #0]
 802280e:	3004      	adds	r0, #4
 8022810:	9011      	str	r0, [sp, #68]	; 0x44
 8022812:	6019      	str	r1, [r3, #0]
 8022814:	f7ff b8bc 	b.w	8021990 <_svfprintf_r+0x6c>
 8022818:	980a      	ldr	r0, [sp, #40]	; 0x28
 802281a:	f010 0240 	ands.w	r2, r0, #64	; 0x40
 802281e:	f000 8163 	beq.w	8022ae8 <_svfprintf_r+0x11c4>
 8022822:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022824:	2500      	movs	r5, #0
 8022826:	461a      	mov	r2, r3
 8022828:	880c      	ldrh	r4, [r1, #0]
 802282a:	3104      	adds	r1, #4
 802282c:	9111      	str	r1, [sp, #68]	; 0x44
 802282e:	ea54 0305 	orrs.w	r3, r4, r5
 8022832:	bf0c      	ite	eq
 8022834:	2300      	moveq	r3, #0
 8022836:	2301      	movne	r3, #1
 8022838:	f7ff bac0 	b.w	8021dbc <_svfprintf_r+0x498>
 802283c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802283e:	0659      	lsls	r1, r3, #25
 8022840:	f140 815d 	bpl.w	8022afe <_svfprintf_r+0x11da>
 8022844:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022846:	f9b0 4000 	ldrsh.w	r4, [r0]
 802284a:	3004      	adds	r0, #4
 802284c:	9011      	str	r0, [sp, #68]	; 0x44
 802284e:	4622      	mov	r2, r4
 8022850:	17e5      	asrs	r5, r4, #31
 8022852:	462b      	mov	r3, r5
 8022854:	f7ff b9b8 	b.w	8021bc8 <_svfprintf_r+0x2a4>
 8022858:	9810      	ldr	r0, [sp, #64]	; 0x40
 802285a:	4659      	mov	r1, fp
 802285c:	aa3d      	add	r2, sp, #244	; 0xf4
 802285e:	f002 fbdf 	bl	8025020 <__ssprint_r>
 8022862:	2800      	cmp	r0, #0
 8022864:	f47f a952 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022868:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 802286a:	ae23      	add	r6, sp, #140	; 0x8c
 802286c:	e4e5      	b.n	802223a <_svfprintf_r+0x916>
 802286e:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8022870:	f64e 4334 	movw	r3, #60468	; 0xec34
 8022874:	f6c0 0302 	movt	r3, #2050	; 0x802
 8022878:	6033      	str	r3, [r6, #0]
 802287a:	3401      	adds	r4, #1
 802287c:	2301      	movs	r3, #1
 802287e:	2c07      	cmp	r4, #7
 8022880:	6073      	str	r3, [r6, #4]
 8022882:	441d      	add	r5, r3
 8022884:	943e      	str	r4, [sp, #248]	; 0xf8
 8022886:	953f      	str	r5, [sp, #252]	; 0xfc
 8022888:	f300 8167 	bgt.w	8022b5a <_svfprintf_r+0x1236>
 802288c:	3608      	adds	r6, #8
 802288e:	b92f      	cbnz	r7, 802289c <_svfprintf_r+0xf78>
 8022890:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022892:	b91b      	cbnz	r3, 802289c <_svfprintf_r+0xf78>
 8022894:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022896:	07c0      	lsls	r0, r0, #31
 8022898:	f57f ac48 	bpl.w	802212c <_svfprintf_r+0x808>
 802289c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 802289e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80228a0:	3401      	adds	r4, #1
 80228a2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80228a4:	2c07      	cmp	r4, #7
 80228a6:	440d      	add	r5, r1
 80228a8:	6071      	str	r1, [r6, #4]
 80228aa:	6032      	str	r2, [r6, #0]
 80228ac:	953f      	str	r5, [sp, #252]	; 0xfc
 80228ae:	943e      	str	r4, [sp, #248]	; 0xf8
 80228b0:	f300 8215 	bgt.w	8022cde <_svfprintf_r+0x13ba>
 80228b4:	3608      	adds	r6, #8
 80228b6:	427f      	negs	r7, r7
 80228b8:	2f00      	cmp	r7, #0
 80228ba:	f340 8180 	ble.w	8022bbe <_svfprintf_r+0x129a>
 80228be:	2f10      	cmp	r7, #16
 80228c0:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8022ae4 <_svfprintf_r+0x11c0>
 80228c4:	f340 81a3 	ble.w	8022c0e <_svfprintf_r+0x12ea>
 80228c8:	4623      	mov	r3, r4
 80228ca:	f04f 0910 	mov.w	r9, #16
 80228ce:	4644      	mov	r4, r8
 80228d0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80228d4:	e003      	b.n	80228de <_svfprintf_r+0xfba>
 80228d6:	3f10      	subs	r7, #16
 80228d8:	2f10      	cmp	r7, #16
 80228da:	f340 8196 	ble.w	8022c0a <_svfprintf_r+0x12e6>
 80228de:	3301      	adds	r3, #1
 80228e0:	e886 0210 	stmia.w	r6, {r4, r9}
 80228e4:	3510      	adds	r5, #16
 80228e6:	3608      	adds	r6, #8
 80228e8:	2b07      	cmp	r3, #7
 80228ea:	933e      	str	r3, [sp, #248]	; 0xf8
 80228ec:	953f      	str	r5, [sp, #252]	; 0xfc
 80228ee:	ddf2      	ble.n	80228d6 <_svfprintf_r+0xfb2>
 80228f0:	4640      	mov	r0, r8
 80228f2:	4659      	mov	r1, fp
 80228f4:	aa3d      	add	r2, sp, #244	; 0xf4
 80228f6:	ae23      	add	r6, sp, #140	; 0x8c
 80228f8:	f002 fb92 	bl	8025020 <__ssprint_r>
 80228fc:	2800      	cmp	r0, #0
 80228fe:	f47f a905 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022902:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022904:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8022906:	e7e6      	b.n	80228d6 <_svfprintf_r+0xfb2>
 8022908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802290a:	0657      	lsls	r7, r2, #25
 802290c:	f140 811d 	bpl.w	8022b4a <_svfprintf_r+0x1226>
 8022910:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022912:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022914:	6803      	ldr	r3, [r0, #0]
 8022916:	3004      	adds	r0, #4
 8022918:	9011      	str	r0, [sp, #68]	; 0x44
 802291a:	8019      	strh	r1, [r3, #0]
 802291c:	f7ff b838 	b.w	8021990 <_svfprintf_r+0x6c>
 8022920:	1c7a      	adds	r2, r7, #1
 8022922:	f000 8126 	beq.w	8022b72 <_svfprintf_r+0x124e>
 8022926:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8022928:	f1a2 0c67 	sub.w	ip, r2, #103	; 0x67
 802292c:	f1dc 0300 	rsbs	r3, ip, #0
 8022930:	eb43 030c 	adc.w	r3, r3, ip
 8022934:	2a47      	cmp	r2, #71	; 0x47
 8022936:	bf08      	it	eq
 8022938:	f043 0301 	orreq.w	r3, r3, #1
 802293c:	2b00      	cmp	r3, #0
 802293e:	f000 81cc 	beq.w	8022cda <_svfprintf_r+0x13b6>
 8022942:	2f00      	cmp	r7, #0
 8022944:	f000 81e9 	beq.w	8022d1a <_svfprintf_r+0x13f6>
 8022948:	2301      	movs	r3, #1
 802294a:	930b      	str	r3, [sp, #44]	; 0x2c
 802294c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802294e:	2d00      	cmp	r5, #0
 8022950:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8022954:	900a      	str	r0, [sp, #40]	; 0x28
 8022956:	f2c0 81cf 	blt.w	8022cf8 <_svfprintf_r+0x13d4>
 802295a:	2200      	movs	r2, #0
 802295c:	9214      	str	r2, [sp, #80]	; 0x50
 802295e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022960:	46b9      	mov	r9, r7
 8022962:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8022964:	f1a3 0e66 	sub.w	lr, r3, #102	; 0x66
 8022968:	f1de 0300 	rsbs	r3, lr, #0
 802296c:	eb43 030e 	adc.w	r3, r3, lr
 8022970:	9315      	str	r3, [sp, #84]	; 0x54
 8022972:	469c      	mov	ip, r3
 8022974:	2303      	movs	r3, #3
 8022976:	2846      	cmp	r0, #70	; 0x46
 8022978:	bf08      	it	eq
 802297a:	f04c 0c01 	orreq.w	ip, ip, #1
 802297e:	f1bc 0f00 	cmp.w	ip, #0
 8022982:	d10e      	bne.n	80229a2 <_svfprintf_r+0x107e>
 8022984:	f1a0 0465 	sub.w	r4, r0, #101	; 0x65
 8022988:	4263      	negs	r3, r4
 802298a:	eb43 0304 	adc.w	r3, r3, r4
 802298e:	2845      	cmp	r0, #69	; 0x45
 8022990:	bf08      	it	eq
 8022992:	f043 0301 	orreq.w	r3, r3, #1
 8022996:	2b00      	cmp	r3, #0
 8022998:	f000 81b3 	beq.w	8022d02 <_svfprintf_r+0x13de>
 802299c:	f107 0901 	add.w	r9, r7, #1
 80229a0:	2302      	movs	r3, #2
 80229a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80229a6:	a944      	add	r1, sp, #272	; 0x110
 80229a8:	950f      	str	r5, [sp, #60]	; 0x3c
 80229aa:	9300      	str	r3, [sp, #0]
 80229ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 80229ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80229b2:	9102      	str	r1, [sp, #8]
 80229b4:	a945      	add	r1, sp, #276	; 0x114
 80229b6:	f8cd c01c 	str.w	ip, [sp, #28]
 80229ba:	9103      	str	r1, [sp, #12]
 80229bc:	a946      	add	r1, sp, #280	; 0x118
 80229be:	f8cd 9004 	str.w	r9, [sp, #4]
 80229c2:	9104      	str	r1, [sp, #16]
 80229c4:	f000 fac4 	bl	8022f50 <_dtoa_r>
 80229c8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80229cc:	9013      	str	r0, [sp, #76]	; 0x4c
 80229ce:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80229d0:	f1b0 0367 	subs.w	r3, r0, #103	; 0x67
 80229d4:	bf18      	it	ne
 80229d6:	2301      	movne	r3, #1
 80229d8:	2847      	cmp	r0, #71	; 0x47
 80229da:	bf0c      	ite	eq
 80229dc:	2300      	moveq	r3, #0
 80229de:	f003 0301 	andne.w	r3, r3, #1
 80229e2:	b923      	cbnz	r3, 80229ee <_svfprintf_r+0x10ca>
 80229e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80229e6:	07c9      	lsls	r1, r1, #31
 80229e8:	bf58      	it	pl
 80229ea:	9c46      	ldrpl	r4, [sp, #280]	; 0x118
 80229ec:	d515      	bpl.n	8022a1a <_svfprintf_r+0x10f6>
 80229ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80229f0:	eb02 0409 	add.w	r4, r2, r9
 80229f4:	f1bc 0f00 	cmp.w	ip, #0
 80229f8:	d005      	beq.n	8022a06 <_svfprintf_r+0x10e2>
 80229fa:	7813      	ldrb	r3, [r2, #0]
 80229fc:	2b30      	cmp	r3, #48	; 0x30
 80229fe:	f000 80c6 	beq.w	8022b8e <_svfprintf_r+0x126a>
 8022a02:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8022a04:	18e4      	adds	r4, r4, r3
 8022a06:	4640      	mov	r0, r8
 8022a08:	2200      	movs	r2, #0
 8022a0a:	2300      	movs	r3, #0
 8022a0c:	4629      	mov	r1, r5
 8022a0e:	f7fe f949 	bl	8020ca4 <__aeabi_dcmpeq>
 8022a12:	2800      	cmp	r0, #0
 8022a14:	f000 8149 	beq.w	8022caa <_svfprintf_r+0x1386>
 8022a18:	9446      	str	r4, [sp, #280]	; 0x118
 8022a1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022a1c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022a1e:	1ae4      	subs	r4, r4, r3
 8022a20:	9412      	str	r4, [sp, #72]	; 0x48
 8022a22:	2800      	cmp	r0, #0
 8022a24:	f000 8127 	beq.w	8022c76 <_svfprintf_r+0x1352>
 8022a28:	9944      	ldr	r1, [sp, #272]	; 0x110
 8022a2a:	1cca      	adds	r2, r1, #3
 8022a2c:	db02      	blt.n	8022a34 <_svfprintf_r+0x1110>
 8022a2e:	428f      	cmp	r7, r1
 8022a30:	f280 8128 	bge.w	8022c84 <_svfprintf_r+0x1360>
 8022a34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8022a36:	3a02      	subs	r2, #2
 8022a38:	9217      	str	r2, [sp, #92]	; 0x5c
 8022a3a:	3901      	subs	r1, #1
 8022a3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8022a3e:	2900      	cmp	r1, #0
 8022a40:	9144      	str	r1, [sp, #272]	; 0x110
 8022a42:	f88d 0100 	strb.w	r0, [sp, #256]	; 0x100
 8022a46:	f2c0 81a2 	blt.w	8022d8e <_svfprintf_r+0x146a>
 8022a4a:	232b      	movs	r3, #43	; 0x2b
 8022a4c:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
 8022a50:	2909      	cmp	r1, #9
 8022a52:	f340 8159 	ble.w	8022d08 <_svfprintf_r+0x13e4>
 8022a56:	ad43      	add	r5, sp, #268	; 0x10c
 8022a58:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8022a5a:	3503      	adds	r5, #3
 8022a5c:	4628      	mov	r0, r5
 8022a5e:	fb87 3201 	smull	r3, r2, r7, r1
 8022a62:	17cb      	asrs	r3, r1, #31
 8022a64:	4604      	mov	r4, r0
 8022a66:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8022a6a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8022a6e:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8022a72:	4619      	mov	r1, r3
 8022a74:	3230      	adds	r2, #48	; 0x30
 8022a76:	2b09      	cmp	r3, #9
 8022a78:	f800 2d01 	strb.w	r2, [r0, #-1]!
 8022a7c:	dcef      	bgt.n	8022a5e <_svfprintf_r+0x113a>
 8022a7e:	4622      	mov	r2, r4
 8022a80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8022a84:	f802 1d02 	strb.w	r1, [r2, #-2]!
 8022a88:	4295      	cmp	r5, r2
 8022a8a:	bf98      	it	ls
 8022a8c:	f50d 7181 	addls.w	r1, sp, #258	; 0x102
 8022a90:	d90b      	bls.n	8022aaa <_svfprintf_r+0x1186>
 8022a92:	f50d 7381 	add.w	r3, sp, #258	; 0x102
 8022a96:	f50d 7087 	add.w	r0, sp, #270	; 0x10e
 8022a9a:	e001      	b.n	8022aa0 <_svfprintf_r+0x117c>
 8022a9c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8022aa0:	4282      	cmp	r2, r0
 8022aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8022aa6:	4619      	mov	r1, r3
 8022aa8:	d1f8      	bne.n	8022a9c <_svfprintf_r+0x1178>
 8022aaa:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022aac:	ab40      	add	r3, sp, #256	; 0x100
 8022aae:	1acb      	subs	r3, r1, r3
 8022ab0:	9320      	str	r3, [sp, #128]	; 0x80
 8022ab2:	2801      	cmp	r0, #1
 8022ab4:	4403      	add	r3, r0
 8022ab6:	930e      	str	r3, [sp, #56]	; 0x38
 8022ab8:	f340 815e 	ble.w	8022d78 <_svfprintf_r+0x1454>
 8022abc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022abe:	2000      	movs	r0, #0
 8022ac0:	901a      	str	r0, [sp, #104]	; 0x68
 8022ac2:	3301      	adds	r3, #1
 8022ac4:	930e      	str	r3, [sp, #56]	; 0x38
 8022ac6:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 8022aca:	910b      	str	r1, [sp, #44]	; 0x2c
 8022acc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022ace:	2b00      	cmp	r3, #0
 8022ad0:	f000 80e7 	beq.w	8022ca2 <_svfprintf_r+0x137e>
 8022ad4:	2300      	movs	r3, #0
 8022ad6:	9314      	str	r3, [sp, #80]	; 0x50
 8022ad8:	232d      	movs	r3, #45	; 0x2d
 8022ada:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8022ade:	f7ff b8c3 	b.w	8021c68 <_svfprintf_r+0x344>
 8022ae2:	bf00      	nop
 8022ae4:	0802ea88 	.word	0x0802ea88
 8022ae8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022aea:	6803      	ldr	r3, [r0, #0]
 8022aec:	3004      	adds	r0, #4
 8022aee:	9011      	str	r0, [sp, #68]	; 0x44
 8022af0:	461c      	mov	r4, r3
 8022af2:	3300      	adds	r3, #0
 8022af4:	bf18      	it	ne
 8022af6:	2301      	movne	r3, #1
 8022af8:	2500      	movs	r5, #0
 8022afa:	f7ff b95f 	b.w	8021dbc <_svfprintf_r+0x498>
 8022afe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022b00:	680b      	ldr	r3, [r1, #0]
 8022b02:	3104      	adds	r1, #4
 8022b04:	9111      	str	r1, [sp, #68]	; 0x44
 8022b06:	461c      	mov	r4, r3
 8022b08:	461a      	mov	r2, r3
 8022b0a:	17dd      	asrs	r5, r3, #31
 8022b0c:	462b      	mov	r3, r5
 8022b0e:	f7ff b85b 	b.w	8021bc8 <_svfprintf_r+0x2a4>
 8022b12:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022b14:	4659      	mov	r1, fp
 8022b16:	aa3d      	add	r2, sp, #244	; 0xf4
 8022b18:	f002 fa82 	bl	8025020 <__ssprint_r>
 8022b1c:	2800      	cmp	r0, #0
 8022b1e:	f47e aff5 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022b22:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022b24:	ae23      	add	r6, sp, #140	; 0x8c
 8022b26:	f7ff bb9d 	b.w	8022264 <_svfprintf_r+0x940>
 8022b2a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022b2c:	2140      	movs	r1, #64	; 0x40
 8022b2e:	f001 f9e5 	bl	8023efc <_malloc_r>
 8022b32:	f8cb 0000 	str.w	r0, [fp]
 8022b36:	f8cb 0010 	str.w	r0, [fp, #16]
 8022b3a:	2800      	cmp	r0, #0
 8022b3c:	f000 8150 	beq.w	8022de0 <_svfprintf_r+0x14bc>
 8022b40:	2340      	movs	r3, #64	; 0x40
 8022b42:	f8cb 3014 	str.w	r3, [fp, #20]
 8022b46:	f7fe bf08 	b.w	802195a <_svfprintf_r+0x36>
 8022b4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022b4c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022b4e:	6813      	ldr	r3, [r2, #0]
 8022b50:	3204      	adds	r2, #4
 8022b52:	9211      	str	r2, [sp, #68]	; 0x44
 8022b54:	6018      	str	r0, [r3, #0]
 8022b56:	f7fe bf1b 	b.w	8021990 <_svfprintf_r+0x6c>
 8022b5a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022b5c:	4659      	mov	r1, fp
 8022b5e:	aa3d      	add	r2, sp, #244	; 0xf4
 8022b60:	f002 fa5e 	bl	8025020 <__ssprint_r>
 8022b64:	2800      	cmp	r0, #0
 8022b66:	f47e afd1 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022b6a:	9f44      	ldr	r7, [sp, #272]	; 0x110
 8022b6c:	ae23      	add	r6, sp, #140	; 0x8c
 8022b6e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022b70:	e68d      	b.n	802288e <_svfprintf_r+0xf6a>
 8022b72:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8022b74:	f1a1 0967 	sub.w	r9, r1, #103	; 0x67
 8022b78:	f1d9 0300 	rsbs	r3, r9, #0
 8022b7c:	eb43 0309 	adc.w	r3, r3, r9
 8022b80:	2706      	movs	r7, #6
 8022b82:	2947      	cmp	r1, #71	; 0x47
 8022b84:	bf08      	it	eq
 8022b86:	f043 0301 	orreq.w	r3, r3, #1
 8022b8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8022b8c:	e6de      	b.n	802294c <_svfprintf_r+0x1028>
 8022b8e:	4640      	mov	r0, r8
 8022b90:	2200      	movs	r2, #0
 8022b92:	2300      	movs	r3, #0
 8022b94:	4629      	mov	r1, r5
 8022b96:	f7fe f885 	bl	8020ca4 <__aeabi_dcmpeq>
 8022b9a:	2800      	cmp	r0, #0
 8022b9c:	f47f af31 	bne.w	8022a02 <_svfprintf_r+0x10de>
 8022ba0:	f1c9 0301 	rsb	r3, r9, #1
 8022ba4:	9344      	str	r3, [sp, #272]	; 0x110
 8022ba6:	e72d      	b.n	8022a04 <_svfprintf_r+0x10e0>
 8022ba8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022baa:	4659      	mov	r1, fp
 8022bac:	aa3d      	add	r2, sp, #244	; 0xf4
 8022bae:	f002 fa37 	bl	8025020 <__ssprint_r>
 8022bb2:	2800      	cmp	r0, #0
 8022bb4:	f47e afaa 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022bb8:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022bba:	ae23      	add	r6, sp, #140	; 0x8c
 8022bbc:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8022bbe:	3401      	adds	r4, #1
 8022bc0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022bc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022bc4:	2c07      	cmp	r4, #7
 8022bc6:	4405      	add	r5, r0
 8022bc8:	6070      	str	r0, [r6, #4]
 8022bca:	6033      	str	r3, [r6, #0]
 8022bcc:	943e      	str	r4, [sp, #248]	; 0xf8
 8022bce:	953f      	str	r5, [sp, #252]	; 0xfc
 8022bd0:	f77f aaab 	ble.w	802212a <_svfprintf_r+0x806>
 8022bd4:	f7ff bb09 	b.w	80221ea <_svfprintf_r+0x8c6>
 8022bd8:	9414      	str	r4, [sp, #80]	; 0x50
 8022bda:	f7fe fde5 	bl	80217a8 <strlen>
 8022bde:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022be0:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8022be4:	9511      	str	r5, [sp, #68]	; 0x44
 8022be6:	941a      	str	r4, [sp, #104]	; 0x68
 8022be8:	900e      	str	r0, [sp, #56]	; 0x38
 8022bea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8022bee:	900b      	str	r0, [sp, #44]	; 0x2c
 8022bf0:	f7ff b839 	b.w	8021c66 <_svfprintf_r+0x342>
 8022bf4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022bf6:	4659      	mov	r1, fp
 8022bf8:	aa3d      	add	r2, sp, #244	; 0xf4
 8022bfa:	f002 fa11 	bl	8025020 <__ssprint_r>
 8022bfe:	2800      	cmp	r0, #0
 8022c00:	f47e af84 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022c04:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022c06:	ae23      	add	r6, sp, #140	; 0x8c
 8022c08:	e471      	b.n	80224ee <_svfprintf_r+0xbca>
 8022c0a:	46a0      	mov	r8, r4
 8022c0c:	461c      	mov	r4, r3
 8022c0e:	3401      	adds	r4, #1
 8022c10:	f8c6 8000 	str.w	r8, [r6]
 8022c14:	2c07      	cmp	r4, #7
 8022c16:	6077      	str	r7, [r6, #4]
 8022c18:	443d      	add	r5, r7
 8022c1a:	943e      	str	r4, [sp, #248]	; 0xf8
 8022c1c:	953f      	str	r5, [sp, #252]	; 0xfc
 8022c1e:	dcc3      	bgt.n	8022ba8 <_svfprintf_r+0x1284>
 8022c20:	3608      	adds	r6, #8
 8022c22:	e7cc      	b.n	8022bbe <_svfprintf_r+0x129a>
 8022c24:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022c26:	4659      	mov	r1, fp
 8022c28:	aa3d      	add	r2, sp, #244	; 0xf4
 8022c2a:	f002 f9f9 	bl	8025020 <__ssprint_r>
 8022c2e:	2800      	cmp	r0, #0
 8022c30:	f47e af6c 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022c34:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8022c36:	ae23      	add	r6, sp, #140	; 0x8c
 8022c38:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022c3a:	e514      	b.n	8022666 <_svfprintf_r+0xd42>
 8022c3c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022c3e:	4659      	mov	r1, fp
 8022c40:	aa3d      	add	r2, sp, #244	; 0xf4
 8022c42:	f002 f9ed 	bl	8025020 <__ssprint_r>
 8022c46:	2800      	cmp	r0, #0
 8022c48:	f47e af60 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022c4c:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8022c4e:	ae23      	add	r6, sp, #140	; 0x8c
 8022c50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022c52:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022c54:	1ad3      	subs	r3, r2, r3
 8022c56:	e51d      	b.n	8022694 <_svfprintf_r+0xd70>
 8022c58:	2f06      	cmp	r7, #6
 8022c5a:	bf28      	it	cs
 8022c5c:	2706      	movcs	r7, #6
 8022c5e:	f64e 432c 	movw	r3, #60460	; 0xec2c
 8022c62:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
 8022c66:	f6c0 0302 	movt	r3, #2050	; 0x802
 8022c6a:	970e      	str	r7, [sp, #56]	; 0x38
 8022c6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8022c6e:	9511      	str	r5, [sp, #68]	; 0x44
 8022c70:	9313      	str	r3, [sp, #76]	; 0x4c
 8022c72:	f7ff b955 	b.w	8021f20 <_svfprintf_r+0x5fc>
 8022c76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022c78:	2b65      	cmp	r3, #101	; 0x65
 8022c7a:	dd64      	ble.n	8022d46 <_svfprintf_r+0x1422>
 8022c7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8022c7e:	9944      	ldr	r1, [sp, #272]	; 0x110
 8022c80:	2a00      	cmp	r2, #0
 8022c82:	d162      	bne.n	8022d4a <_svfprintf_r+0x1426>
 8022c84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022c86:	428a      	cmp	r2, r1
 8022c88:	dc4a      	bgt.n	8022d20 <_svfprintf_r+0x13fc>
 8022c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c8c:	07d8      	lsls	r0, r3, #31
 8022c8e:	d56b      	bpl.n	8022d68 <_svfprintf_r+0x1444>
 8022c90:	1c4b      	adds	r3, r1, #1
 8022c92:	2067      	movs	r0, #103	; 0x67
 8022c94:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8022c98:	930e      	str	r3, [sp, #56]	; 0x38
 8022c9a:	9017      	str	r0, [sp, #92]	; 0x5c
 8022c9c:	920b      	str	r2, [sp, #44]	; 0x2c
 8022c9e:	911a      	str	r1, [sp, #104]	; 0x68
 8022ca0:	e714      	b.n	8022acc <_svfprintf_r+0x11a8>
 8022ca2:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8022ca6:	f7fe bfde 	b.w	8021c66 <_svfprintf_r+0x342>
 8022caa:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8022cac:	429c      	cmp	r4, r3
 8022cae:	bf98      	it	ls
 8022cb0:	461c      	movls	r4, r3
 8022cb2:	f67f aeb2 	bls.w	8022a1a <_svfprintf_r+0x10f6>
 8022cb6:	2230      	movs	r2, #48	; 0x30
 8022cb8:	f803 2b01 	strb.w	r2, [r3], #1
 8022cbc:	42a3      	cmp	r3, r4
 8022cbe:	9346      	str	r3, [sp, #280]	; 0x118
 8022cc0:	d1fa      	bne.n	8022cb8 <_svfprintf_r+0x1394>
 8022cc2:	e6aa      	b.n	8022a1a <_svfprintf_r+0x10f6>
 8022cc4:	ea27 71e7 	bic.w	r1, r7, r7, asr #31
 8022cc8:	9014      	str	r0, [sp, #80]	; 0x50
 8022cca:	910b      	str	r1, [sp, #44]	; 0x2c
 8022ccc:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8022cd0:	9511      	str	r5, [sp, #68]	; 0x44
 8022cd2:	970e      	str	r7, [sp, #56]	; 0x38
 8022cd4:	901a      	str	r0, [sp, #104]	; 0x68
 8022cd6:	f7fe bfc6 	b.w	8021c66 <_svfprintf_r+0x342>
 8022cda:	930b      	str	r3, [sp, #44]	; 0x2c
 8022cdc:	e636      	b.n	802294c <_svfprintf_r+0x1028>
 8022cde:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022ce0:	4659      	mov	r1, fp
 8022ce2:	aa3d      	add	r2, sp, #244	; 0xf4
 8022ce4:	f002 f99c 	bl	8025020 <__ssprint_r>
 8022ce8:	2800      	cmp	r0, #0
 8022cea:	f47e af0f 	bne.w	8021b0c <_svfprintf_r+0x1e8>
 8022cee:	9f44      	ldr	r7, [sp, #272]	; 0x110
 8022cf0:	ae23      	add	r6, sp, #140	; 0x8c
 8022cf2:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8022cf4:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8022cf6:	e5de      	b.n	80228b6 <_svfprintf_r+0xf92>
 8022cf8:	212d      	movs	r1, #45	; 0x2d
 8022cfa:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8022cfe:	9114      	str	r1, [sp, #80]	; 0x50
 8022d00:	e62d      	b.n	802295e <_svfprintf_r+0x103a>
 8022d02:	46b9      	mov	r9, r7
 8022d04:	2302      	movs	r3, #2
 8022d06:	e64c      	b.n	80229a2 <_svfprintf_r+0x107e>
 8022d08:	f101 0230 	add.w	r2, r1, #48	; 0x30
 8022d0c:	2330      	movs	r3, #48	; 0x30
 8022d0e:	a941      	add	r1, sp, #260	; 0x104
 8022d10:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
 8022d14:	f88d 2103 	strb.w	r2, [sp, #259]	; 0x103
 8022d18:	e6c7      	b.n	8022aaa <_svfprintf_r+0x1186>
 8022d1a:	2701      	movs	r7, #1
 8022d1c:	970b      	str	r7, [sp, #44]	; 0x2c
 8022d1e:	e615      	b.n	802294c <_svfprintf_r+0x1028>
 8022d20:	2900      	cmp	r1, #0
 8022d22:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022d24:	bfd4      	ite	le
 8022d26:	f1c1 0302 	rsble	r3, r1, #2
 8022d2a:	2301      	movgt	r3, #1
 8022d2c:	181b      	adds	r3, r3, r0
 8022d2e:	2267      	movs	r2, #103	; 0x67
 8022d30:	930e      	str	r3, [sp, #56]	; 0x38
 8022d32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022d36:	9217      	str	r2, [sp, #92]	; 0x5c
 8022d38:	930b      	str	r3, [sp, #44]	; 0x2c
 8022d3a:	911a      	str	r1, [sp, #104]	; 0x68
 8022d3c:	e6c6      	b.n	8022acc <_svfprintf_r+0x11a8>
 8022d3e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8022e00 <_svfprintf_r+0x14dc>
 8022d42:	f7ff ba49 	b.w	80221d8 <_svfprintf_r+0x8b4>
 8022d46:	9944      	ldr	r1, [sp, #272]	; 0x110
 8022d48:	e677      	b.n	8022a3a <_svfprintf_r+0x1116>
 8022d4a:	2900      	cmp	r1, #0
 8022d4c:	dd3b      	ble.n	8022dc6 <_svfprintf_r+0x14a2>
 8022d4e:	2f00      	cmp	r7, #0
 8022d50:	d12f      	bne.n	8022db2 <_svfprintf_r+0x148e>
 8022d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d54:	07db      	lsls	r3, r3, #31
 8022d56:	d42c      	bmi.n	8022db2 <_svfprintf_r+0x148e>
 8022d58:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8022d5c:	2266      	movs	r2, #102	; 0x66
 8022d5e:	900b      	str	r0, [sp, #44]	; 0x2c
 8022d60:	910e      	str	r1, [sp, #56]	; 0x38
 8022d62:	9217      	str	r2, [sp, #92]	; 0x5c
 8022d64:	911a      	str	r1, [sp, #104]	; 0x68
 8022d66:	e6b1      	b.n	8022acc <_svfprintf_r+0x11a8>
 8022d68:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8022d6c:	2267      	movs	r2, #103	; 0x67
 8022d6e:	900b      	str	r0, [sp, #44]	; 0x2c
 8022d70:	910e      	str	r1, [sp, #56]	; 0x38
 8022d72:	9217      	str	r2, [sp, #92]	; 0x5c
 8022d74:	911a      	str	r1, [sp, #104]	; 0x68
 8022d76:	e6a9      	b.n	8022acc <_svfprintf_r+0x11a8>
 8022d78:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022d7a:	f011 0301 	ands.w	r3, r1, #1
 8022d7e:	f47f ae9d 	bne.w	8022abc <_svfprintf_r+0x1198>
 8022d82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022d84:	931a      	str	r3, [sp, #104]	; 0x68
 8022d86:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8022d8a:	920b      	str	r2, [sp, #44]	; 0x2c
 8022d8c:	e69e      	b.n	8022acc <_svfprintf_r+0x11a8>
 8022d8e:	232d      	movs	r3, #45	; 0x2d
 8022d90:	4249      	negs	r1, r1
 8022d92:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
 8022d96:	e65b      	b.n	8022a50 <_svfprintf_r+0x112c>
 8022d98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022d9a:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8022d9e:	4682      	mov	sl, r0
 8022da0:	6817      	ldr	r7, [r2, #0]
 8022da2:	3204      	adds	r2, #4
 8022da4:	9211      	str	r2, [sp, #68]	; 0x44
 8022da6:	2f00      	cmp	r7, #0
 8022da8:	bfb8      	it	lt
 8022daa:	f04f 37ff 	movlt.w	r7, #4294967295
 8022dae:	f7fe be31 	b.w	8021a14 <_svfprintf_r+0xf0>
 8022db2:	3701      	adds	r7, #1
 8022db4:	2366      	movs	r3, #102	; 0x66
 8022db6:	19cf      	adds	r7, r1, r7
 8022db8:	9317      	str	r3, [sp, #92]	; 0x5c
 8022dba:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
 8022dbe:	970e      	str	r7, [sp, #56]	; 0x38
 8022dc0:	900b      	str	r0, [sp, #44]	; 0x2c
 8022dc2:	911a      	str	r1, [sp, #104]	; 0x68
 8022dc4:	e682      	b.n	8022acc <_svfprintf_r+0x11a8>
 8022dc6:	b917      	cbnz	r7, 8022dce <_svfprintf_r+0x14aa>
 8022dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022dca:	07d5      	lsls	r5, r2, #31
 8022dcc:	d510      	bpl.n	8022df0 <_svfprintf_r+0x14cc>
 8022dce:	3702      	adds	r7, #2
 8022dd0:	2366      	movs	r3, #102	; 0x66
 8022dd2:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
 8022dd6:	970e      	str	r7, [sp, #56]	; 0x38
 8022dd8:	9317      	str	r3, [sp, #92]	; 0x5c
 8022dda:	900b      	str	r0, [sp, #44]	; 0x2c
 8022ddc:	911a      	str	r1, [sp, #104]	; 0x68
 8022dde:	e675      	b.n	8022acc <_svfprintf_r+0x11a8>
 8022de0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022de2:	f04f 33ff 	mov.w	r3, #4294967295
 8022de6:	930d      	str	r3, [sp, #52]	; 0x34
 8022de8:	230c      	movs	r3, #12
 8022dea:	6003      	str	r3, [r0, #0]
 8022dec:	f7fe be97 	b.w	8021b1e <_svfprintf_r+0x1fa>
 8022df0:	2001      	movs	r0, #1
 8022df2:	2266      	movs	r2, #102	; 0x66
 8022df4:	900b      	str	r0, [sp, #44]	; 0x2c
 8022df6:	9217      	str	r2, [sp, #92]	; 0x5c
 8022df8:	900e      	str	r0, [sp, #56]	; 0x38
 8022dfa:	911a      	str	r1, [sp, #104]	; 0x68
 8022dfc:	e666      	b.n	8022acc <_svfprintf_r+0x11a8>
 8022dfe:	bf00      	nop
 8022e00:	0802ea88 	.word	0x0802ea88
 8022e04:	00000000 	.word	0x00000000

08022e08 <quorem>:
 8022e08:	690a      	ldr	r2, [r1, #16]
 8022e0a:	6903      	ldr	r3, [r0, #16]
 8022e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e10:	429a      	cmp	r2, r3
 8022e12:	b083      	sub	sp, #12
 8022e14:	4680      	mov	r8, r0
 8022e16:	4689      	mov	r9, r1
 8022e18:	9200      	str	r2, [sp, #0]
 8022e1a:	f300 8096 	bgt.w	8022f4a <quorem+0x142>
 8022e1e:	3203      	adds	r2, #3
 8022e20:	9b00      	ldr	r3, [sp, #0]
 8022e22:	f101 0514 	add.w	r5, r1, #20
 8022e26:	0092      	lsls	r2, r2, #2
 8022e28:	1e5c      	subs	r4, r3, #1
 8022e2a:	f100 0314 	add.w	r3, r0, #20
 8022e2e:	9301      	str	r3, [sp, #4]
 8022e30:	188b      	adds	r3, r1, r2
 8022e32:	1882      	adds	r2, r0, r2
 8022e34:	1d1f      	adds	r7, r3, #4
 8022e36:	6859      	ldr	r1, [r3, #4]
 8022e38:	6850      	ldr	r0, [r2, #4]
 8022e3a:	3101      	adds	r1, #1
 8022e3c:	f003 fa7c 	bl	8026338 <__aeabi_uidiv>
 8022e40:	4606      	mov	r6, r0
 8022e42:	2800      	cmp	r0, #0
 8022e44:	d042      	beq.n	8022ecc <quorem+0xc4>
 8022e46:	2000      	movs	r0, #0
 8022e48:	9a01      	ldr	r2, [sp, #4]
 8022e4a:	462b      	mov	r3, r5
 8022e4c:	4686      	mov	lr, r0
 8022e4e:	f853 cb04 	ldr.w	ip, [r3], #4
 8022e52:	6811      	ldr	r1, [r2, #0]
 8022e54:	fa1f fb8c 	uxth.w	fp, ip
 8022e58:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022e5c:	fa1f fa81 	uxth.w	sl, r1
 8022e60:	fb06 0b0b 	mla	fp, r6, fp, r0
 8022e64:	44d6      	add	lr, sl
 8022e66:	fb06 f00c 	mul.w	r0, r6, ip
 8022e6a:	eb00 401b 	add.w	r0, r0, fp, lsr #16
 8022e6e:	fa1f fb8b 	uxth.w	fp, fp
 8022e72:	ebcb 0a0e 	rsb	sl, fp, lr
 8022e76:	fa1f fe80 	uxth.w	lr, r0
 8022e7a:	0c00      	lsrs	r0, r0, #16
 8022e7c:	ebce 4e11 	rsb	lr, lr, r1, lsr #16
 8022e80:	429f      	cmp	r7, r3
 8022e82:	eb0e 4e2a 	add.w	lr, lr, sl, asr #16
 8022e86:	fa1f fc8a 	uxth.w	ip, sl
 8022e8a:	ea4c 410e 	orr.w	r1, ip, lr, lsl #16
 8022e8e:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 8022e92:	f842 1b04 	str.w	r1, [r2], #4
 8022e96:	d2da      	bcs.n	8022e4e <quorem+0x46>
 8022e98:	1d22      	adds	r2, r4, #4
 8022e9a:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8022e9e:	6859      	ldr	r1, [r3, #4]
 8022ea0:	b9a1      	cbnz	r1, 8022ecc <quorem+0xc4>
 8022ea2:	9801      	ldr	r0, [sp, #4]
 8022ea4:	4298      	cmp	r0, r3
 8022ea6:	d20f      	bcs.n	8022ec8 <quorem+0xc0>
 8022ea8:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8022eac:	b962      	cbnz	r2, 8022ec8 <quorem+0xc0>
 8022eae:	9a00      	ldr	r2, [sp, #0]
 8022eb0:	1e91      	subs	r1, r2, #2
 8022eb2:	43c2      	mvns	r2, r0
 8022eb4:	18d2      	adds	r2, r2, r3
 8022eb6:	eba1 0192 	sub.w	r1, r1, r2, lsr #2
 8022eba:	e002      	b.n	8022ec2 <quorem+0xba>
 8022ebc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8022ec0:	b912      	cbnz	r2, 8022ec8 <quorem+0xc0>
 8022ec2:	3c01      	subs	r4, #1
 8022ec4:	428c      	cmp	r4, r1
 8022ec6:	d1f9      	bne.n	8022ebc <quorem+0xb4>
 8022ec8:	f8c8 4010 	str.w	r4, [r8, #16]
 8022ecc:	4640      	mov	r0, r8
 8022ece:	4649      	mov	r1, r9
 8022ed0:	f001 fd9c 	bl	8024a0c <__mcmp>
 8022ed4:	2800      	cmp	r0, #0
 8022ed6:	db34      	blt.n	8022f42 <quorem+0x13a>
 8022ed8:	9b01      	ldr	r3, [sp, #4]
 8022eda:	3601      	adds	r6, #1
 8022edc:	f04f 0c00 	mov.w	ip, #0
 8022ee0:	f855 0b04 	ldr.w	r0, [r5], #4
 8022ee4:	6819      	ldr	r1, [r3, #0]
 8022ee6:	fa1f f980 	uxth.w	r9, r0
 8022eea:	0c00      	lsrs	r0, r0, #16
 8022eec:	b28a      	uxth	r2, r1
 8022eee:	ebc0 4111 	rsb	r1, r0, r1, lsr #16
 8022ef2:	ebc9 0202 	rsb	r2, r9, r2
 8022ef6:	42af      	cmp	r7, r5
 8022ef8:	4494      	add	ip, r2
 8022efa:	eb01 422c 	add.w	r2, r1, ip, asr #16
 8022efe:	fa1f fc8c 	uxth.w	ip, ip
 8022f02:	ea4c 4102 	orr.w	r1, ip, r2, lsl #16
 8022f06:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8022f0a:	f843 1b04 	str.w	r1, [r3], #4
 8022f0e:	d2e7      	bcs.n	8022ee0 <quorem+0xd8>
 8022f10:	1d22      	adds	r2, r4, #4
 8022f12:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8022f16:	6859      	ldr	r1, [r3, #4]
 8022f18:	b999      	cbnz	r1, 8022f42 <quorem+0x13a>
 8022f1a:	9801      	ldr	r0, [sp, #4]
 8022f1c:	4298      	cmp	r0, r3
 8022f1e:	d20e      	bcs.n	8022f3e <quorem+0x136>
 8022f20:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8022f24:	b95a      	cbnz	r2, 8022f3e <quorem+0x136>
 8022f26:	43c1      	mvns	r1, r0
 8022f28:	18c9      	adds	r1, r1, r3
 8022f2a:	f021 0103 	bic.w	r1, r1, #3
 8022f2e:	1a59      	subs	r1, r3, r1
 8022f30:	e002      	b.n	8022f38 <quorem+0x130>
 8022f32:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8022f36:	b912      	cbnz	r2, 8022f3e <quorem+0x136>
 8022f38:	3c01      	subs	r4, #1
 8022f3a:	428b      	cmp	r3, r1
 8022f3c:	d1f9      	bne.n	8022f32 <quorem+0x12a>
 8022f3e:	f8c8 4010 	str.w	r4, [r8, #16]
 8022f42:	4630      	mov	r0, r6
 8022f44:	b003      	add	sp, #12
 8022f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f4a:	2000      	movs	r0, #0
 8022f4c:	e7fa      	b.n	8022f44 <quorem+0x13c>
 8022f4e:	bf00      	nop

08022f50 <_dtoa_r>:
 8022f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f54:	b09f      	sub	sp, #124	; 0x7c
 8022f56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8022f58:	4606      	mov	r6, r0
 8022f5a:	4692      	mov	sl, r2
 8022f5c:	469b      	mov	fp, r3
 8022f5e:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8022f60:	2d00      	cmp	r5, #0
 8022f62:	f000 82e2 	beq.w	802352a <_dtoa_r+0x5da>
 8022f66:	682b      	ldr	r3, [r5, #0]
 8022f68:	b15b      	cbz	r3, 8022f82 <_dtoa_r+0x32>
 8022f6a:	686a      	ldr	r2, [r5, #4]
 8022f6c:	2501      	movs	r5, #1
 8022f6e:	4619      	mov	r1, r3
 8022f70:	fa05 f502 	lsl.w	r5, r5, r2
 8022f74:	609d      	str	r5, [r3, #8]
 8022f76:	605a      	str	r2, [r3, #4]
 8022f78:	f001 fafe 	bl	8024578 <_Bfree>
 8022f7c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8022f7e:	2200      	movs	r2, #0
 8022f80:	601a      	str	r2, [r3, #0]
 8022f82:	f1bb 0500 	subs.w	r5, fp, #0
 8022f86:	f2c0 80e8 	blt.w	802315a <_dtoa_r+0x20a>
 8022f8a:	2300      	movs	r3, #0
 8022f8c:	6023      	str	r3, [r4, #0]
 8022f8e:	2300      	movs	r3, #0
 8022f90:	461a      	mov	r2, r3
 8022f92:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8022f96:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8022f9a:	402b      	ands	r3, r5
 8022f9c:	4293      	cmp	r3, r2
 8022f9e:	f000 80c7 	beq.w	8023130 <_dtoa_r+0x1e0>
 8022fa2:	2200      	movs	r2, #0
 8022fa4:	2300      	movs	r3, #0
 8022fa6:	4650      	mov	r0, sl
 8022fa8:	4659      	mov	r1, fp
 8022faa:	46d0      	mov	r8, sl
 8022fac:	46d9      	mov	r9, fp
 8022fae:	2401      	movs	r4, #1
 8022fb0:	f7fd fe78 	bl	8020ca4 <__aeabi_dcmpeq>
 8022fb4:	b988      	cbnz	r0, 8022fda <_dtoa_r+0x8a>
 8022fb6:	f014 0fff 	tst.w	r4, #255	; 0xff
 8022fba:	d112      	bne.n	8022fe2 <_dtoa_r+0x92>
 8022fbc:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8022fbe:	f64e 4034 	movw	r0, #60468	; 0xec34
 8022fc2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8022fc4:	2301      	movs	r3, #1
 8022fc6:	f6c0 0002 	movt	r0, #2050	; 0x802
 8022fca:	602b      	str	r3, [r5, #0]
 8022fcc:	b114      	cbz	r4, 8022fd4 <_dtoa_r+0x84>
 8022fce:	4b80      	ldr	r3, [pc, #512]	; (80231d0 <_dtoa_r+0x280>)
 8022fd0:	1e58      	subs	r0, r3, #1
 8022fd2:	6023      	str	r3, [r4, #0]
 8022fd4:	b01f      	add	sp, #124	; 0x7c
 8022fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fda:	2400      	movs	r4, #0
 8022fdc:	f014 0fff 	tst.w	r4, #255	; 0xff
 8022fe0:	d0ec      	beq.n	8022fbc <_dtoa_r+0x6c>
 8022fe2:	4630      	mov	r0, r6
 8022fe4:	4642      	mov	r2, r8
 8022fe6:	464b      	mov	r3, r9
 8022fe8:	a91d      	add	r1, sp, #116	; 0x74
 8022fea:	9100      	str	r1, [sp, #0]
 8022fec:	a91c      	add	r1, sp, #112	; 0x70
 8022fee:	9101      	str	r1, [sp, #4]
 8022ff0:	f001 fe16 	bl	8024c20 <__d2b>
 8022ff4:	f3c5 540a 	ubfx	r4, r5, #20, #11
 8022ff8:	900c      	str	r0, [sp, #48]	; 0x30
 8022ffa:	2c00      	cmp	r4, #0
 8022ffc:	f040 80c5 	bne.w	802318a <_dtoa_r+0x23a>
 8023000:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8023002:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8023006:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8023008:	193c      	adds	r4, r7, r4
 802300a:	429c      	cmp	r4, r3
 802300c:	f2c0 82a7 	blt.w	802355e <_dtoa_r+0x60e>
 8023010:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 8023014:	f504 6282 	add.w	r2, r4, #1040	; 0x410
 8023018:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 802301c:	3202      	adds	r2, #2
 802301e:	1b1b      	subs	r3, r3, r4
 8023020:	fa2a f202 	lsr.w	r2, sl, r2
 8023024:	fa05 f303 	lsl.w	r3, r5, r3
 8023028:	ea43 0002 	orr.w	r0, r3, r2
 802302c:	f7fd fb5c 	bl	80206e8 <__aeabi_ui2d>
 8023030:	3c01      	subs	r4, #1
 8023032:	2501      	movs	r5, #1
 8023034:	9517      	str	r5, [sp, #92]	; 0x5c
 8023036:	460b      	mov	r3, r1
 8023038:	4602      	mov	r2, r0
 802303a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802303e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023040:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
 8023044:	9309      	str	r3, [sp, #36]	; 0x24
 8023046:	2300      	movs	r3, #0
 8023048:	2200      	movs	r2, #0
 802304a:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 802304e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8023052:	f7fd fa0b 	bl	802046c <__aeabi_dsub>
 8023056:	a358      	add	r3, pc, #352	; (adr r3, 80231b8 <_dtoa_r+0x268>)
 8023058:	e9d3 2300 	ldrd	r2, r3, [r3]
 802305c:	f7fd fbba 	bl	80207d4 <__aeabi_dmul>
 8023060:	a357      	add	r3, pc, #348	; (adr r3, 80231c0 <_dtoa_r+0x270>)
 8023062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023066:	f7fd fa03 	bl	8020470 <__adddf3>
 802306a:	4680      	mov	r8, r0
 802306c:	4620      	mov	r0, r4
 802306e:	4689      	mov	r9, r1
 8023070:	f7fd fb4a 	bl	8020708 <__aeabi_i2d>
 8023074:	a354      	add	r3, pc, #336	; (adr r3, 80231c8 <_dtoa_r+0x278>)
 8023076:	e9d3 2300 	ldrd	r2, r3, [r3]
 802307a:	f7fd fbab 	bl	80207d4 <__aeabi_dmul>
 802307e:	4602      	mov	r2, r0
 8023080:	460b      	mov	r3, r1
 8023082:	4640      	mov	r0, r8
 8023084:	4649      	mov	r1, r9
 8023086:	f7fd f9f3 	bl	8020470 <__adddf3>
 802308a:	4680      	mov	r8, r0
 802308c:	4689      	mov	r9, r1
 802308e:	f003 fa91 	bl	80265b4 <__aeabi_d2iz>
 8023092:	4649      	mov	r1, r9
 8023094:	2200      	movs	r2, #0
 8023096:	2300      	movs	r3, #0
 8023098:	9007      	str	r0, [sp, #28]
 802309a:	4640      	mov	r0, r8
 802309c:	f7fd fe0c 	bl	8020cb8 <__aeabi_dcmplt>
 80230a0:	b150      	cbz	r0, 80230b8 <_dtoa_r+0x168>
 80230a2:	9807      	ldr	r0, [sp, #28]
 80230a4:	f7fd fb30 	bl	8020708 <__aeabi_i2d>
 80230a8:	4642      	mov	r2, r8
 80230aa:	464b      	mov	r3, r9
 80230ac:	f7fd fdfa 	bl	8020ca4 <__aeabi_dcmpeq>
 80230b0:	b910      	cbnz	r0, 80230b8 <_dtoa_r+0x168>
 80230b2:	9d07      	ldr	r5, [sp, #28]
 80230b4:	3d01      	subs	r5, #1
 80230b6:	9507      	str	r5, [sp, #28]
 80230b8:	9d07      	ldr	r5, [sp, #28]
 80230ba:	2d16      	cmp	r5, #22
 80230bc:	f200 8165 	bhi.w	802338a <_dtoa_r+0x43a>
 80230c0:	f64e 21a8 	movw	r1, #60072	; 0xeaa8
 80230c4:	4652      	mov	r2, sl
 80230c6:	f6c0 0102 	movt	r1, #2050	; 0x802
 80230ca:	465b      	mov	r3, fp
 80230cc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80230d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80230d4:	f7fd fe0e 	bl	8020cf4 <__aeabi_dcmpgt>
 80230d8:	2800      	cmp	r0, #0
 80230da:	f000 823d 	beq.w	8023558 <_dtoa_r+0x608>
 80230de:	9d07      	ldr	r5, [sp, #28]
 80230e0:	3d01      	subs	r5, #1
 80230e2:	9507      	str	r5, [sp, #28]
 80230e4:	2500      	movs	r5, #0
 80230e6:	9515      	str	r5, [sp, #84]	; 0x54
 80230e8:	1b3c      	subs	r4, r7, r4
 80230ea:	3c01      	subs	r4, #1
 80230ec:	f100 822f 	bmi.w	802354e <_dtoa_r+0x5fe>
 80230f0:	2500      	movs	r5, #0
 80230f2:	940b      	str	r4, [sp, #44]	; 0x2c
 80230f4:	950e      	str	r5, [sp, #56]	; 0x38
 80230f6:	9c07      	ldr	r4, [sp, #28]
 80230f8:	2c00      	cmp	r4, #0
 80230fa:	f2c0 821f 	blt.w	802353c <_dtoa_r+0x5ec>
 80230fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023100:	9414      	str	r4, [sp, #80]	; 0x50
 8023102:	192d      	adds	r5, r5, r4
 8023104:	2400      	movs	r4, #0
 8023106:	950b      	str	r5, [sp, #44]	; 0x2c
 8023108:	9412      	str	r4, [sp, #72]	; 0x48
 802310a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 802310c:	2d09      	cmp	r5, #9
 802310e:	d861      	bhi.n	80231d4 <_dtoa_r+0x284>
 8023110:	2d05      	cmp	r5, #5
 8023112:	f340 868d 	ble.w	8023e30 <_dtoa_r+0xee0>
 8023116:	3d04      	subs	r5, #4
 8023118:	9528      	str	r5, [sp, #160]	; 0xa0
 802311a:	2500      	movs	r5, #0
 802311c:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 802311e:	1ea3      	subs	r3, r4, #2
 8023120:	2b03      	cmp	r3, #3
 8023122:	d859      	bhi.n	80231d8 <_dtoa_r+0x288>
 8023124:	e8df f013 	tbh	[pc, r3, lsl #1]
 8023128:	03a703bb 	.word	0x03a703bb
 802312c:	03b80264 	.word	0x03b80264
 8023130:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8023132:	f64e 4044 	movw	r0, #60484	; 0xec44
 8023136:	f242 730f 	movw	r3, #9999	; 0x270f
 802313a:	f6c0 0002 	movt	r0, #2050	; 0x802
 802313e:	6023      	str	r3, [r4, #0]
 8023140:	f1ba 0f00 	cmp.w	sl, #0
 8023144:	d00f      	beq.n	8023166 <_dtoa_r+0x216>
 8023146:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8023148:	2d00      	cmp	r5, #0
 802314a:	f43f af43 	beq.w	8022fd4 <_dtoa_r+0x84>
 802314e:	78c3      	ldrb	r3, [r0, #3]
 8023150:	b9c3      	cbnz	r3, 8023184 <_dtoa_r+0x234>
 8023152:	1cc3      	adds	r3, r0, #3
 8023154:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8023156:	6023      	str	r3, [r4, #0]
 8023158:	e73c      	b.n	8022fd4 <_dtoa_r+0x84>
 802315a:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 802315e:	2301      	movs	r3, #1
 8023160:	46ab      	mov	fp, r5
 8023162:	6023      	str	r3, [r4, #0]
 8023164:	e713      	b.n	8022f8e <_dtoa_r+0x3e>
 8023166:	f64e 4238 	movw	r2, #60472	; 0xec38
 802316a:	f64e 4344 	movw	r3, #60484	; 0xec44
 802316e:	f3c5 0013 	ubfx	r0, r5, #0, #20
 8023172:	f6c0 0202 	movt	r2, #2050	; 0x802
 8023176:	f6c0 0302 	movt	r3, #2050	; 0x802
 802317a:	2800      	cmp	r0, #0
 802317c:	bf0c      	ite	eq
 802317e:	4610      	moveq	r0, r2
 8023180:	4618      	movne	r0, r3
 8023182:	e7e0      	b.n	8023146 <_dtoa_r+0x1f6>
 8023184:	f100 0308 	add.w	r3, r0, #8
 8023188:	e7e4      	b.n	8023154 <_dtoa_r+0x204>
 802318a:	4649      	mov	r1, r9
 802318c:	4640      	mov	r0, r8
 802318e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023192:	f5a4 747e 	sub.w	r4, r4, #1016	; 0x3f8
 8023196:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023198:	2500      	movs	r5, #0
 802319a:	3c07      	subs	r4, #7
 802319c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 802319e:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 80231a2:	9517      	str	r5, [sp, #92]	; 0x5c
 80231a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80231a8:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80231ac:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80231b0:	9309      	str	r3, [sp, #36]	; 0x24
 80231b2:	e748      	b.n	8023046 <_dtoa_r+0xf6>
 80231b4:	f3af 8000 	nop.w
 80231b8:	636f4361 	.word	0x636f4361
 80231bc:	3fd287a7 	.word	0x3fd287a7
 80231c0:	8b60c8b3 	.word	0x8b60c8b3
 80231c4:	3fc68a28 	.word	0x3fc68a28
 80231c8:	509f79fb 	.word	0x509f79fb
 80231cc:	3fd34413 	.word	0x3fd34413
 80231d0:	0802ec35 	.word	0x0802ec35
 80231d4:	2400      	movs	r4, #0
 80231d6:	9428      	str	r4, [sp, #160]	; 0xa0
 80231d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80231da:	2300      	movs	r3, #0
 80231dc:	4619      	mov	r1, r3
 80231de:	4630      	mov	r0, r6
 80231e0:	f04f 35ff 	mov.w	r5, #4294967295
 80231e4:	9329      	str	r3, [sp, #164]	; 0xa4
 80231e6:	6063      	str	r3, [r4, #4]
 80231e8:	9510      	str	r5, [sp, #64]	; 0x40
 80231ea:	950d      	str	r5, [sp, #52]	; 0x34
 80231ec:	f001 f98e 	bl	802450c <_Balloc>
 80231f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80231f2:	2501      	movs	r5, #1
 80231f4:	9513      	str	r5, [sp, #76]	; 0x4c
 80231f6:	6020      	str	r0, [r4, #0]
 80231f8:	681b      	ldr	r3, [r3, #0]
 80231fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80231fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80231fe:	9d07      	ldr	r5, [sp, #28]
 8023200:	43dc      	mvns	r4, r3
 8023202:	0fe4      	lsrs	r4, r4, #31
 8023204:	2d0e      	cmp	r5, #14
 8023206:	bfcc      	ite	gt
 8023208:	2400      	movgt	r4, #0
 802320a:	f004 0401 	andle.w	r4, r4, #1
 802320e:	2c00      	cmp	r4, #0
 8023210:	f000 80be 	beq.w	8023390 <_dtoa_r+0x440>
 8023214:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023216:	f64e 23a8 	movw	r3, #60072	; 0xeaa8
 802321a:	f6c0 0302 	movt	r3, #2050	; 0x802
 802321e:	0fe5      	lsrs	r5, r4, #31
 8023220:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023222:	2c00      	cmp	r4, #0
 8023224:	bfcc      	ite	gt
 8023226:	2500      	movgt	r5, #0
 8023228:	f005 0501 	andle.w	r5, r5, #1
 802322c:	9c07      	ldr	r4, [sp, #28]
 802322e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8023232:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023236:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802323a:	2d00      	cmp	r5, #0
 802323c:	f040 81bc 	bne.w	80235b8 <_dtoa_r+0x668>
 8023240:	4602      	mov	r2, r0
 8023242:	460b      	mov	r3, r1
 8023244:	4650      	mov	r0, sl
 8023246:	4659      	mov	r1, fp
 8023248:	f7fd fbee 	bl	8020a28 <__aeabi_ddiv>
 802324c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802324e:	f003 f9b1 	bl	80265b4 <__aeabi_d2iz>
 8023252:	4680      	mov	r8, r0
 8023254:	f7fd fa58 	bl	8020708 <__aeabi_i2d>
 8023258:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802325c:	f7fd faba 	bl	80207d4 <__aeabi_dmul>
 8023260:	460b      	mov	r3, r1
 8023262:	4602      	mov	r2, r0
 8023264:	4659      	mov	r1, fp
 8023266:	4650      	mov	r0, sl
 8023268:	f7fd f900 	bl	802046c <__aeabi_dsub>
 802326c:	f108 0330 	add.w	r3, r8, #48	; 0x30
 8023270:	f804 3b01 	strb.w	r3, [r4], #1
 8023274:	46a1      	mov	r9, r4
 8023276:	9411      	str	r4, [sp, #68]	; 0x44
 8023278:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802327a:	2c01      	cmp	r4, #1
 802327c:	4682      	mov	sl, r0
 802327e:	468b      	mov	fp, r1
 8023280:	d04b      	beq.n	802331a <_dtoa_r+0x3ca>
 8023282:	2300      	movs	r3, #0
 8023284:	2200      	movs	r2, #0
 8023286:	f2c4 0324 	movt	r3, #16420	; 0x4024
 802328a:	2401      	movs	r4, #1
 802328c:	f7fd faa2 	bl	80207d4 <__aeabi_dmul>
 8023290:	2200      	movs	r2, #0
 8023292:	2300      	movs	r3, #0
 8023294:	4682      	mov	sl, r0
 8023296:	468b      	mov	fp, r1
 8023298:	f7fd fd04 	bl	8020ca4 <__aeabi_dcmpeq>
 802329c:	b100      	cbz	r0, 80232a0 <_dtoa_r+0x350>
 802329e:	462c      	mov	r4, r5
 80232a0:	f014 0fff 	tst.w	r4, #255	; 0xff
 80232a4:	f000 812d 	beq.w	8023502 <_dtoa_r+0x5b2>
 80232a8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80232aa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80232ac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80232ae:	182b      	adds	r3, r5, r0
 80232b0:	960a      	str	r6, [sp, #40]	; 0x28
 80232b2:	461f      	mov	r7, r3
 80232b4:	e00d      	b.n	80232d2 <_dtoa_r+0x382>
 80232b6:	f7fd fa8d 	bl	80207d4 <__aeabi_dmul>
 80232ba:	2200      	movs	r2, #0
 80232bc:	2300      	movs	r3, #0
 80232be:	4682      	mov	sl, r0
 80232c0:	468b      	mov	fp, r1
 80232c2:	f7fd fcef 	bl	8020ca4 <__aeabi_dcmpeq>
 80232c6:	b100      	cbz	r0, 80232ca <_dtoa_r+0x37a>
 80232c8:	2600      	movs	r6, #0
 80232ca:	f016 0fff 	tst.w	r6, #255	; 0xff
 80232ce:	f000 84e9 	beq.w	8023ca4 <_dtoa_r+0xd54>
 80232d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80232d6:	4650      	mov	r0, sl
 80232d8:	4659      	mov	r1, fp
 80232da:	2601      	movs	r6, #1
 80232dc:	f7fd fba4 	bl	8020a28 <__aeabi_ddiv>
 80232e0:	f003 f968 	bl	80265b4 <__aeabi_d2iz>
 80232e4:	4680      	mov	r8, r0
 80232e6:	f7fd fa0f 	bl	8020708 <__aeabi_i2d>
 80232ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80232ee:	f108 0530 	add.w	r5, r8, #48	; 0x30
 80232f2:	f7fd fa6f 	bl	80207d4 <__aeabi_dmul>
 80232f6:	4602      	mov	r2, r0
 80232f8:	460b      	mov	r3, r1
 80232fa:	4650      	mov	r0, sl
 80232fc:	4659      	mov	r1, fp
 80232fe:	f7fd f8b5 	bl	802046c <__aeabi_dsub>
 8023302:	2300      	movs	r3, #0
 8023304:	f804 5b01 	strb.w	r5, [r4], #1
 8023308:	2200      	movs	r2, #0
 802330a:	42bc      	cmp	r4, r7
 802330c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8023310:	46a1      	mov	r9, r4
 8023312:	4682      	mov	sl, r0
 8023314:	468b      	mov	fp, r1
 8023316:	d1ce      	bne.n	80232b6 <_dtoa_r+0x366>
 8023318:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802331a:	4652      	mov	r2, sl
 802331c:	465b      	mov	r3, fp
 802331e:	4650      	mov	r0, sl
 8023320:	4659      	mov	r1, fp
 8023322:	f7fd f8a5 	bl	8020470 <__adddf3>
 8023326:	4604      	mov	r4, r0
 8023328:	460d      	mov	r5, r1
 802332a:	4622      	mov	r2, r4
 802332c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023330:	462b      	mov	r3, r5
 8023332:	f7fd fcc1 	bl	8020cb8 <__aeabi_dcmplt>
 8023336:	b960      	cbnz	r0, 8023352 <_dtoa_r+0x402>
 8023338:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802333c:	4622      	mov	r2, r4
 802333e:	462b      	mov	r3, r5
 8023340:	f7fd fcb0 	bl	8020ca4 <__aeabi_dcmpeq>
 8023344:	2800      	cmp	r0, #0
 8023346:	f000 80dc 	beq.w	8023502 <_dtoa_r+0x5b2>
 802334a:	f018 0f01 	tst.w	r8, #1
 802334e:	f000 80d8 	beq.w	8023502 <_dtoa_r+0x5b2>
 8023352:	9d07      	ldr	r5, [sp, #28]
 8023354:	f819 4c01 	ldrb.w	r4, [r9, #-1]
 8023358:	951a      	str	r5, [sp, #104]	; 0x68
 802335a:	464b      	mov	r3, r9
 802335c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802335e:	e002      	b.n	8023366 <_dtoa_r+0x416>
 8023360:	f813 4c02 	ldrb.w	r4, [r3, #-2]
 8023364:	3b01      	subs	r3, #1
 8023366:	2c39      	cmp	r4, #57	; 0x39
 8023368:	4699      	mov	r9, r3
 802336a:	f040 84d3 	bne.w	8023d14 <_dtoa_r+0xdc4>
 802336e:	4293      	cmp	r3, r2
 8023370:	d1f6      	bne.n	8023360 <_dtoa_r+0x410>
 8023372:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023374:	2330      	movs	r3, #48	; 0x30
 8023376:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8023378:	f805 3c01 	strb.w	r3, [r5, #-1]
 802337c:	462b      	mov	r3, r5
 802337e:	3401      	adds	r4, #1
 8023380:	9407      	str	r4, [sp, #28]
 8023382:	2431      	movs	r4, #49	; 0x31
 8023384:	f803 4c01 	strb.w	r4, [r3, #-1]
 8023388:	e0bb      	b.n	8023502 <_dtoa_r+0x5b2>
 802338a:	2501      	movs	r5, #1
 802338c:	9515      	str	r5, [sp, #84]	; 0x54
 802338e:	e6ab      	b.n	80230e8 <_dtoa_r+0x198>
 8023390:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023392:	2d00      	cmp	r5, #0
 8023394:	f040 80eb 	bne.w	802356e <_dtoa_r+0x61e>
 8023398:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802339a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802339c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802339e:	9308      	str	r3, [sp, #32]
 80233a0:	2d00      	cmp	r5, #0
 80233a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80233a4:	bfd4      	ite	le
 80233a6:	2300      	movle	r3, #0
 80233a8:	2301      	movgt	r3, #1
 80233aa:	2800      	cmp	r0, #0
 80233ac:	bfd4      	ite	le
 80233ae:	2300      	movle	r3, #0
 80233b0:	f003 0301 	andgt.w	r3, r3, #1
 80233b4:	b14b      	cbz	r3, 80233ca <_dtoa_r+0x47a>
 80233b6:	4603      	mov	r3, r0
 80233b8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80233ba:	42ab      	cmp	r3, r5
 80233bc:	bfa8      	it	ge
 80233be:	462b      	movge	r3, r5
 80233c0:	1aed      	subs	r5, r5, r3
 80233c2:	1ac9      	subs	r1, r1, r3
 80233c4:	1ac0      	subs	r0, r0, r3
 80233c6:	910e      	str	r1, [sp, #56]	; 0x38
 80233c8:	900b      	str	r0, [sp, #44]	; 0x2c
 80233ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80233cc:	2a00      	cmp	r2, #0
 80233ce:	dd1a      	ble.n	8023406 <_dtoa_r+0x4b6>
 80233d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80233d2:	2b00      	cmp	r3, #0
 80233d4:	f000 8468 	beq.w	8023ca8 <_dtoa_r+0xd58>
 80233d8:	2c00      	cmp	r4, #0
 80233da:	dd10      	ble.n	80233fe <_dtoa_r+0x4ae>
 80233dc:	9908      	ldr	r1, [sp, #32]
 80233de:	4622      	mov	r2, r4
 80233e0:	4630      	mov	r0, r6
 80233e2:	f001 fa65 	bl	80248b0 <__pow5mult>
 80233e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80233e8:	9008      	str	r0, [sp, #32]
 80233ea:	4630      	mov	r0, r6
 80233ec:	9908      	ldr	r1, [sp, #32]
 80233ee:	f001 f9c1 	bl	8024774 <__multiply>
 80233f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80233f4:	4607      	mov	r7, r0
 80233f6:	4630      	mov	r0, r6
 80233f8:	f001 f8be 	bl	8024578 <_Bfree>
 80233fc:	970c      	str	r7, [sp, #48]	; 0x30
 80233fe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8023400:	1b02      	subs	r2, r0, r4
 8023402:	f040 8474 	bne.w	8023cee <_dtoa_r+0xd9e>
 8023406:	2101      	movs	r1, #1
 8023408:	4630      	mov	r0, r6
 802340a:	f001 f9a9 	bl	8024760 <__i2b>
 802340e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8023410:	2900      	cmp	r1, #0
 8023412:	4604      	mov	r4, r0
 8023414:	dd05      	ble.n	8023422 <_dtoa_r+0x4d2>
 8023416:	4621      	mov	r1, r4
 8023418:	4630      	mov	r0, r6
 802341a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802341c:	f001 fa48 	bl	80248b0 <__pow5mult>
 8023420:	4604      	mov	r4, r0
 8023422:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023424:	2a01      	cmp	r2, #1
 8023426:	f340 823d 	ble.w	80238a4 <_dtoa_r+0x954>
 802342a:	2700      	movs	r7, #0
 802342c:	9914      	ldr	r1, [sp, #80]	; 0x50
 802342e:	2301      	movs	r3, #1
 8023430:	2900      	cmp	r1, #0
 8023432:	f040 83b6 	bne.w	8023ba2 <_dtoa_r+0xc52>
 8023436:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023438:	189b      	adds	r3, r3, r2
 802343a:	f013 031f 	ands.w	r3, r3, #31
 802343e:	f000 82fb 	beq.w	8023a38 <_dtoa_r+0xae8>
 8023442:	f1c3 0220 	rsb	r2, r3, #32
 8023446:	2a04      	cmp	r2, #4
 8023448:	f340 84ed 	ble.w	8023e26 <_dtoa_r+0xed6>
 802344c:	f1c3 031c 	rsb	r3, r3, #28
 8023450:	980e      	ldr	r0, [sp, #56]	; 0x38
 8023452:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023454:	18ed      	adds	r5, r5, r3
 8023456:	18c0      	adds	r0, r0, r3
 8023458:	900e      	str	r0, [sp, #56]	; 0x38
 802345a:	18c9      	adds	r1, r1, r3
 802345c:	910b      	str	r1, [sp, #44]	; 0x2c
 802345e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023460:	2900      	cmp	r1, #0
 8023462:	dd05      	ble.n	8023470 <_dtoa_r+0x520>
 8023464:	4630      	mov	r0, r6
 8023466:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023468:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802346a:	f001 fa71 	bl	8024950 <__lshift>
 802346e:	900c      	str	r0, [sp, #48]	; 0x30
 8023470:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023472:	2a00      	cmp	r2, #0
 8023474:	dd04      	ble.n	8023480 <_dtoa_r+0x530>
 8023476:	4621      	mov	r1, r4
 8023478:	4630      	mov	r0, r6
 802347a:	f001 fa69 	bl	8024950 <__lshift>
 802347e:	4604      	mov	r4, r0
 8023480:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023482:	2b00      	cmp	r3, #0
 8023484:	f040 8396 	bne.w	8023bb4 <_dtoa_r+0xc64>
 8023488:	9828      	ldr	r0, [sp, #160]	; 0xa0
 802348a:	990d      	ldr	r1, [sp, #52]	; 0x34
 802348c:	2802      	cmp	r0, #2
 802348e:	bfd4      	ite	le
 8023490:	2300      	movle	r3, #0
 8023492:	2301      	movgt	r3, #1
 8023494:	2900      	cmp	r1, #0
 8023496:	bfcc      	ite	gt
 8023498:	2300      	movgt	r3, #0
 802349a:	f003 0301 	andle.w	r3, r3, #1
 802349e:	2b00      	cmp	r3, #0
 80234a0:	f000 824d 	beq.w	802393e <_dtoa_r+0x9ee>
 80234a4:	2900      	cmp	r1, #0
 80234a6:	f040 809c 	bne.w	80235e2 <_dtoa_r+0x692>
 80234aa:	4621      	mov	r1, r4
 80234ac:	2205      	movs	r2, #5
 80234ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80234b0:	4630      	mov	r0, r6
 80234b2:	f001 f87d 	bl	80245b0 <__multadd>
 80234b6:	4604      	mov	r4, r0
 80234b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80234ba:	4621      	mov	r1, r4
 80234bc:	f001 faa6 	bl	8024a0c <__mcmp>
 80234c0:	2800      	cmp	r0, #0
 80234c2:	f340 808e 	ble.w	80235e2 <_dtoa_r+0x692>
 80234c6:	9d07      	ldr	r5, [sp, #28]
 80234c8:	2331      	movs	r3, #49	; 0x31
 80234ca:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 80234ce:	3501      	adds	r5, #1
 80234d0:	9507      	str	r5, [sp, #28]
 80234d2:	2500      	movs	r5, #0
 80234d4:	f809 3b01 	strb.w	r3, [r9], #1
 80234d8:	4621      	mov	r1, r4
 80234da:	4630      	mov	r0, r6
 80234dc:	f001 f84c 	bl	8024578 <_Bfree>
 80234e0:	9c08      	ldr	r4, [sp, #32]
 80234e2:	b174      	cbz	r4, 8023502 <_dtoa_r+0x5b2>
 80234e4:	1c2b      	adds	r3, r5, #0
 80234e6:	bf18      	it	ne
 80234e8:	2301      	movne	r3, #1
 80234ea:	42a5      	cmp	r5, r4
 80234ec:	bf0c      	ite	eq
 80234ee:	2300      	moveq	r3, #0
 80234f0:	f003 0301 	andne.w	r3, r3, #1
 80234f4:	2b00      	cmp	r3, #0
 80234f6:	f040 829a 	bne.w	8023a2e <_dtoa_r+0xade>
 80234fa:	4630      	mov	r0, r6
 80234fc:	9908      	ldr	r1, [sp, #32]
 80234fe:	f001 f83b 	bl	8024578 <_Bfree>
 8023502:	4630      	mov	r0, r6
 8023504:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023506:	f001 f837 	bl	8024578 <_Bfree>
 802350a:	9d07      	ldr	r5, [sp, #28]
 802350c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 802350e:	2200      	movs	r2, #0
 8023510:	1c6b      	adds	r3, r5, #1
 8023512:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8023514:	f889 2000 	strb.w	r2, [r9]
 8023518:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802351a:	6023      	str	r3, [r4, #0]
 802351c:	2d00      	cmp	r5, #0
 802351e:	f43f ad59 	beq.w	8022fd4 <_dtoa_r+0x84>
 8023522:	f8c5 9000 	str.w	r9, [r5]
 8023526:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023528:	e554      	b.n	8022fd4 <_dtoa_r+0x84>
 802352a:	2010      	movs	r0, #16
 802352c:	f000 fcd6 	bl	8023edc <malloc>
 8023530:	6270      	str	r0, [r6, #36]	; 0x24
 8023532:	6045      	str	r5, [r0, #4]
 8023534:	6085      	str	r5, [r0, #8]
 8023536:	6005      	str	r5, [r0, #0]
 8023538:	60c5      	str	r5, [r0, #12]
 802353a:	e522      	b.n	8022f82 <_dtoa_r+0x32>
 802353c:	9c07      	ldr	r4, [sp, #28]
 802353e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023540:	1b2d      	subs	r5, r5, r4
 8023542:	950e      	str	r5, [sp, #56]	; 0x38
 8023544:	4265      	negs	r5, r4
 8023546:	2400      	movs	r4, #0
 8023548:	9512      	str	r5, [sp, #72]	; 0x48
 802354a:	9414      	str	r4, [sp, #80]	; 0x50
 802354c:	e5dd      	b.n	802310a <_dtoa_r+0x1ba>
 802354e:	4264      	negs	r4, r4
 8023550:	940e      	str	r4, [sp, #56]	; 0x38
 8023552:	2400      	movs	r4, #0
 8023554:	940b      	str	r4, [sp, #44]	; 0x2c
 8023556:	e5ce      	b.n	80230f6 <_dtoa_r+0x1a6>
 8023558:	2500      	movs	r5, #0
 802355a:	9515      	str	r5, [sp, #84]	; 0x54
 802355c:	e5c4      	b.n	80230e8 <_dtoa_r+0x198>
 802355e:	f64f 32ee 	movw	r2, #64494	; 0xfbee
 8023562:	f6cf 72ff 	movt	r2, #65535	; 0xffff
 8023566:	1b12      	subs	r2, r2, r4
 8023568:	fa0a f002 	lsl.w	r0, sl, r2
 802356c:	e55e      	b.n	802302c <_dtoa_r+0xdc>
 802356e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8023570:	2d01      	cmp	r5, #1
 8023572:	f340 83c6 	ble.w	8023d02 <_dtoa_r+0xdb2>
 8023576:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023578:	1e6b      	subs	r3, r5, #1
 802357a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802357c:	429d      	cmp	r5, r3
 802357e:	bfaf      	iteee	ge
 8023580:	ebc3 0405 	rsbge	r4, r3, r5
 8023584:	9d12      	ldrlt	r5, [sp, #72]	; 0x48
 8023586:	9312      	strlt	r3, [sp, #72]	; 0x48
 8023588:	ebc5 0203 	rsblt	r2, r5, r3
 802358c:	bfbe      	ittt	lt
 802358e:	9d14      	ldrlt	r5, [sp, #80]	; 0x50
 8023590:	18ad      	addlt	r5, r5, r2
 8023592:	9514      	strlt	r5, [sp, #80]	; 0x50
 8023594:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023596:	2d00      	cmp	r5, #0
 8023598:	f2c0 83c6 	blt.w	8023d28 <_dtoa_r+0xdd8>
 802359c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802359e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80235a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80235a2:	4630      	mov	r0, r6
 80235a4:	2101      	movs	r1, #1
 80235a6:	18d2      	adds	r2, r2, r3
 80235a8:	920e      	str	r2, [sp, #56]	; 0x38
 80235aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80235ac:	18d2      	adds	r2, r2, r3
 80235ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80235b0:	f001 f8d6 	bl	8024760 <__i2b>
 80235b4:	9008      	str	r0, [sp, #32]
 80235b6:	e6f3      	b.n	80233a0 <_dtoa_r+0x450>
 80235b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80235ba:	2d00      	cmp	r5, #0
 80235bc:	f040 839e 	bne.w	8023cfc <_dtoa_r+0xdac>
 80235c0:	2300      	movs	r3, #0
 80235c2:	2200      	movs	r2, #0
 80235c4:	f2c4 0314 	movt	r3, #16404	; 0x4014
 80235c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80235cc:	f7fd f902 	bl	80207d4 <__aeabi_dmul>
 80235d0:	4652      	mov	r2, sl
 80235d2:	465b      	mov	r3, fp
 80235d4:	f7fd fb84 	bl	8020ce0 <__aeabi_dcmpge>
 80235d8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80235da:	9408      	str	r4, [sp, #32]
 80235dc:	2800      	cmp	r0, #0
 80235de:	f43f af72 	beq.w	80234c6 <_dtoa_r+0x576>
 80235e2:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80235e4:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 80235e8:	43ed      	mvns	r5, r5
 80235ea:	9507      	str	r5, [sp, #28]
 80235ec:	2500      	movs	r5, #0
 80235ee:	e773      	b.n	80234d8 <_dtoa_r+0x588>
 80235f0:	2401      	movs	r4, #1
 80235f2:	9413      	str	r4, [sp, #76]	; 0x4c
 80235f4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80235f6:	2c00      	cmp	r4, #0
 80235f8:	f340 82fe 	ble.w	8023bf8 <_dtoa_r+0xca8>
 80235fc:	4620      	mov	r0, r4
 80235fe:	2c0e      	cmp	r4, #14
 8023600:	bf8c      	ite	hi
 8023602:	2500      	movhi	r5, #0
 8023604:	f005 0501 	andls.w	r5, r5, #1
 8023608:	9410      	str	r4, [sp, #64]	; 0x40
 802360a:	940d      	str	r4, [sp, #52]	; 0x34
 802360c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802360e:	2300      	movs	r3, #0
 8023610:	2817      	cmp	r0, #23
 8023612:	6063      	str	r3, [r4, #4]
 8023614:	d909      	bls.n	802362a <_dtoa_r+0x6da>
 8023616:	2201      	movs	r2, #1
 8023618:	2304      	movs	r3, #4
 802361a:	005b      	lsls	r3, r3, #1
 802361c:	4617      	mov	r7, r2
 802361e:	f103 0114 	add.w	r1, r3, #20
 8023622:	3201      	adds	r2, #1
 8023624:	4281      	cmp	r1, r0
 8023626:	d9f8      	bls.n	802361a <_dtoa_r+0x6ca>
 8023628:	6067      	str	r7, [r4, #4]
 802362a:	4630      	mov	r0, r6
 802362c:	6861      	ldr	r1, [r4, #4]
 802362e:	f000 ff6d 	bl	802450c <_Balloc>
 8023632:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8023634:	6020      	str	r0, [r4, #0]
 8023636:	681b      	ldr	r3, [r3, #0]
 8023638:	930f      	str	r3, [sp, #60]	; 0x3c
 802363a:	2d00      	cmp	r5, #0
 802363c:	f43f adde 	beq.w	80231fc <_dtoa_r+0x2ac>
 8023640:	9c07      	ldr	r4, [sp, #28]
 8023642:	4652      	mov	r2, sl
 8023644:	465b      	mov	r3, fp
 8023646:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802364a:	2c00      	cmp	r4, #0
 802364c:	f340 8213 	ble.w	8023a76 <_dtoa_r+0xb26>
 8023650:	f004 020f 	and.w	r2, r4, #15
 8023654:	f64e 23a8 	movw	r3, #60072	; 0xeaa8
 8023658:	f6c0 0302 	movt	r3, #2050	; 0x802
 802365c:	1124      	asrs	r4, r4, #4
 802365e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023662:	2702      	movs	r7, #2
 8023664:	06e1      	lsls	r1, r4, #27
 8023666:	e9d3 8900 	ldrd	r8, r9, [r3]
 802366a:	d50e      	bpl.n	802368a <_dtoa_r+0x73a>
 802366c:	f64e 3398 	movw	r3, #60312	; 0xeb98
 8023670:	4650      	mov	r0, sl
 8023672:	f6c0 0302 	movt	r3, #2050	; 0x802
 8023676:	4659      	mov	r1, fp
 8023678:	f004 040f 	and.w	r4, r4, #15
 802367c:	2703      	movs	r7, #3
 802367e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8023682:	f7fd f9d1 	bl	8020a28 <__aeabi_ddiv>
 8023686:	4682      	mov	sl, r0
 8023688:	468b      	mov	fp, r1
 802368a:	b18c      	cbz	r4, 80236b0 <_dtoa_r+0x760>
 802368c:	f64e 3598 	movw	r5, #60312	; 0xeb98
 8023690:	f6c0 0502 	movt	r5, #2050	; 0x802
 8023694:	07e2      	lsls	r2, r4, #31
 8023696:	4640      	mov	r0, r8
 8023698:	4649      	mov	r1, r9
 802369a:	d506      	bpl.n	80236aa <_dtoa_r+0x75a>
 802369c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80236a0:	3701      	adds	r7, #1
 80236a2:	f7fd f897 	bl	80207d4 <__aeabi_dmul>
 80236a6:	4680      	mov	r8, r0
 80236a8:	4689      	mov	r9, r1
 80236aa:	3508      	adds	r5, #8
 80236ac:	1064      	asrs	r4, r4, #1
 80236ae:	d1f1      	bne.n	8023694 <_dtoa_r+0x744>
 80236b0:	4650      	mov	r0, sl
 80236b2:	4659      	mov	r1, fp
 80236b4:	4642      	mov	r2, r8
 80236b6:	464b      	mov	r3, r9
 80236b8:	f7fd f9b6 	bl	8020a28 <__aeabi_ddiv>
 80236bc:	4682      	mov	sl, r0
 80236be:	468b      	mov	fp, r1
 80236c0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80236c2:	2c00      	cmp	r4, #0
 80236c4:	f000 8108 	beq.w	80238d8 <_dtoa_r+0x988>
 80236c8:	2300      	movs	r3, #0
 80236ca:	4650      	mov	r0, sl
 80236cc:	4659      	mov	r1, fp
 80236ce:	2200      	movs	r2, #0
 80236d0:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 80236d4:	2401      	movs	r4, #1
 80236d6:	f7fd faef 	bl	8020cb8 <__aeabi_dcmplt>
 80236da:	b900      	cbnz	r0, 80236de <_dtoa_r+0x78e>
 80236dc:	2400      	movs	r4, #0
 80236de:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80236e0:	2d00      	cmp	r5, #0
 80236e2:	bfd4      	ite	le
 80236e4:	2400      	movle	r4, #0
 80236e6:	f004 0401 	andgt.w	r4, r4, #1
 80236ea:	2c00      	cmp	r4, #0
 80236ec:	f000 80f4 	beq.w	80238d8 <_dtoa_r+0x988>
 80236f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80236f2:	2c00      	cmp	r4, #0
 80236f4:	f340 81aa 	ble.w	8023a4c <_dtoa_r+0xafc>
 80236f8:	2300      	movs	r3, #0
 80236fa:	2200      	movs	r2, #0
 80236fc:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8023700:	4650      	mov	r0, sl
 8023702:	4659      	mov	r1, fp
 8023704:	f7fd f866 	bl	80207d4 <__aeabi_dmul>
 8023708:	9d07      	ldr	r5, [sp, #28]
 802370a:	3d01      	subs	r5, #1
 802370c:	951a      	str	r5, [sp, #104]	; 0x68
 802370e:	4682      	mov	sl, r0
 8023710:	1c78      	adds	r0, r7, #1
 8023712:	468b      	mov	fp, r1
 8023714:	f7fc fff8 	bl	8020708 <__aeabi_i2d>
 8023718:	4602      	mov	r2, r0
 802371a:	460b      	mov	r3, r1
 802371c:	4650      	mov	r0, sl
 802371e:	4659      	mov	r1, fp
 8023720:	f7fd f858 	bl	80207d4 <__aeabi_dmul>
 8023724:	2300      	movs	r3, #0
 8023726:	2200      	movs	r2, #0
 8023728:	f2c4 031c 	movt	r3, #16412	; 0x401c
 802372c:	f7fc fea0 	bl	8020470 <__adddf3>
 8023730:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8023734:	4680      	mov	r8, r0
 8023736:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 802373a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802373c:	2d00      	cmp	r5, #0
 802373e:	f000 81c6 	beq.w	8023ace <_dtoa_r+0xb7e>
 8023742:	f64e 23a8 	movw	r3, #60072	; 0xeaa8
 8023746:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023748:	f6c0 0302 	movt	r3, #2050	; 0x802
 802374c:	2100      	movs	r1, #0
 802374e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8023752:	2000      	movs	r0, #0
 8023754:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8023758:	f8cd c00c 	str.w	ip, [sp, #12]
 802375c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8023760:	9411      	str	r4, [sp, #68]	; 0x44
 8023762:	f7fd f961 	bl	8020a28 <__aeabi_ddiv>
 8023766:	464b      	mov	r3, r9
 8023768:	4642      	mov	r2, r8
 802376a:	f7fc fe7f 	bl	802046c <__aeabi_dsub>
 802376e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8023772:	4659      	mov	r1, fp
 8023774:	4650      	mov	r0, sl
 8023776:	f002 ff1d 	bl	80265b4 <__aeabi_d2iz>
 802377a:	4604      	mov	r4, r0
 802377c:	f7fc ffc4 	bl	8020708 <__aeabi_i2d>
 8023780:	3430      	adds	r4, #48	; 0x30
 8023782:	b2e4      	uxtb	r4, r4
 8023784:	4602      	mov	r2, r0
 8023786:	460b      	mov	r3, r1
 8023788:	4650      	mov	r0, sl
 802378a:	4659      	mov	r1, fp
 802378c:	f7fc fe6e 	bl	802046c <__aeabi_dsub>
 8023790:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023792:	f805 4b01 	strb.w	r4, [r5], #1
 8023796:	46a9      	mov	r9, r5
 8023798:	9511      	str	r5, [sp, #68]	; 0x44
 802379a:	4682      	mov	sl, r0
 802379c:	468b      	mov	fp, r1
 802379e:	4652      	mov	r2, sl
 80237a0:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80237a4:	465b      	mov	r3, fp
 80237a6:	f7fd faa5 	bl	8020cf4 <__aeabi_dcmpgt>
 80237aa:	2800      	cmp	r0, #0
 80237ac:	f040 832c 	bne.w	8023e08 <_dtoa_r+0xeb8>
 80237b0:	2100      	movs	r1, #0
 80237b2:	4652      	mov	r2, sl
 80237b4:	465b      	mov	r3, fp
 80237b6:	2000      	movs	r0, #0
 80237b8:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80237bc:	f7fc fe56 	bl	802046c <__aeabi_dsub>
 80237c0:	4602      	mov	r2, r0
 80237c2:	460b      	mov	r3, r1
 80237c4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80237c8:	f7fd fa94 	bl	8020cf4 <__aeabi_dcmpgt>
 80237cc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80237d0:	2800      	cmp	r0, #0
 80237d2:	f47f adc2 	bne.w	802335a <_dtoa_r+0x40a>
 80237d6:	f1bc 0f01 	cmp.w	ip, #1
 80237da:	f340 8137 	ble.w	8023a4c <_dtoa_r+0xafc>
 80237de:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80237e0:	961b      	str	r6, [sp, #108]	; 0x6c
 80237e2:	eb04 070c 	add.w	r7, r4, ip
 80237e6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80237e8:	9716      	str	r7, [sp, #88]	; 0x58
 80237ea:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80237ee:	e010      	b.n	8023812 <_dtoa_r+0x8c2>
 80237f0:	2100      	movs	r1, #0
 80237f2:	2000      	movs	r0, #0
 80237f4:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80237f8:	f7fc fe38 	bl	802046c <__aeabi_dsub>
 80237fc:	4632      	mov	r2, r6
 80237fe:	463b      	mov	r3, r7
 8023800:	f7fd fa5a 	bl	8020cb8 <__aeabi_dcmplt>
 8023804:	2800      	cmp	r0, #0
 8023806:	f040 828c 	bne.w	8023d22 <_dtoa_r+0xdd2>
 802380a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802380c:	42a5      	cmp	r5, r4
 802380e:	f000 811c 	beq.w	8023a4a <_dtoa_r+0xafa>
 8023812:	2300      	movs	r3, #0
 8023814:	2200      	movs	r2, #0
 8023816:	f2c4 0324 	movt	r3, #16420	; 0x4024
 802381a:	4630      	mov	r0, r6
 802381c:	4639      	mov	r1, r7
 802381e:	f7fc ffd9 	bl	80207d4 <__aeabi_dmul>
 8023822:	2300      	movs	r3, #0
 8023824:	2200      	movs	r2, #0
 8023826:	f2c4 0324 	movt	r3, #16420	; 0x4024
 802382a:	4606      	mov	r6, r0
 802382c:	460f      	mov	r7, r1
 802382e:	4650      	mov	r0, sl
 8023830:	4659      	mov	r1, fp
 8023832:	f7fc ffcf 	bl	80207d4 <__aeabi_dmul>
 8023836:	4689      	mov	r9, r1
 8023838:	4680      	mov	r8, r0
 802383a:	f002 febb 	bl	80265b4 <__aeabi_d2iz>
 802383e:	4604      	mov	r4, r0
 8023840:	f7fc ff62 	bl	8020708 <__aeabi_i2d>
 8023844:	3430      	adds	r4, #48	; 0x30
 8023846:	b2e4      	uxtb	r4, r4
 8023848:	4602      	mov	r2, r0
 802384a:	460b      	mov	r3, r1
 802384c:	4640      	mov	r0, r8
 802384e:	4649      	mov	r1, r9
 8023850:	f7fc fe0c 	bl	802046c <__aeabi_dsub>
 8023854:	4632      	mov	r2, r6
 8023856:	463b      	mov	r3, r7
 8023858:	f805 4b01 	strb.w	r4, [r5], #1
 802385c:	46a9      	mov	r9, r5
 802385e:	4682      	mov	sl, r0
 8023860:	468b      	mov	fp, r1
 8023862:	f7fd fa29 	bl	8020cb8 <__aeabi_dcmplt>
 8023866:	4652      	mov	r2, sl
 8023868:	465b      	mov	r3, fp
 802386a:	2800      	cmp	r0, #0
 802386c:	d0c0      	beq.n	80237f0 <_dtoa_r+0x8a0>
 802386e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8023870:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8023872:	9407      	str	r4, [sp, #28]
 8023874:	e645      	b.n	8023502 <_dtoa_r+0x5b2>
 8023876:	2400      	movs	r4, #0
 8023878:	9413      	str	r4, [sp, #76]	; 0x4c
 802387a:	9807      	ldr	r0, [sp, #28]
 802387c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802387e:	1824      	adds	r4, r4, r0
 8023880:	9410      	str	r4, [sp, #64]	; 0x40
 8023882:	1c60      	adds	r0, r4, #1
 8023884:	2800      	cmp	r0, #0
 8023886:	f340 81ad 	ble.w	8023be4 <_dtoa_r+0xc94>
 802388a:	280e      	cmp	r0, #14
 802388c:	bf8c      	ite	hi
 802388e:	2500      	movhi	r5, #0
 8023890:	f005 0501 	andls.w	r5, r5, #1
 8023894:	900d      	str	r0, [sp, #52]	; 0x34
 8023896:	e6b9      	b.n	802360c <_dtoa_r+0x6bc>
 8023898:	2401      	movs	r4, #1
 802389a:	9413      	str	r4, [sp, #76]	; 0x4c
 802389c:	e7ed      	b.n	802387a <_dtoa_r+0x92a>
 802389e:	2400      	movs	r4, #0
 80238a0:	9413      	str	r4, [sp, #76]	; 0x4c
 80238a2:	e6a7      	b.n	80235f4 <_dtoa_r+0x6a4>
 80238a4:	f1ba 0f00 	cmp.w	sl, #0
 80238a8:	f47f adbf 	bne.w	802342a <_dtoa_r+0x4da>
 80238ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80238b0:	4657      	mov	r7, sl
 80238b2:	2b00      	cmp	r3, #0
 80238b4:	f47f adba 	bne.w	802342c <_dtoa_r+0x4dc>
 80238b8:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 80238bc:	ea0b 0303 	and.w	r3, fp, r3
 80238c0:	461f      	mov	r7, r3
 80238c2:	2b00      	cmp	r3, #0
 80238c4:	f43f adb2 	beq.w	802342c <_dtoa_r+0x4dc>
 80238c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80238ca:	2701      	movs	r7, #1
 80238cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80238ce:	3301      	adds	r3, #1
 80238d0:	930e      	str	r3, [sp, #56]	; 0x38
 80238d2:	3001      	adds	r0, #1
 80238d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80238d6:	e5a9      	b.n	802342c <_dtoa_r+0x4dc>
 80238d8:	4638      	mov	r0, r7
 80238da:	f7fc ff15 	bl	8020708 <__aeabi_i2d>
 80238de:	4652      	mov	r2, sl
 80238e0:	465b      	mov	r3, fp
 80238e2:	f7fc ff77 	bl	80207d4 <__aeabi_dmul>
 80238e6:	2300      	movs	r3, #0
 80238e8:	2200      	movs	r2, #0
 80238ea:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80238ee:	f7fc fdbf 	bl	8020470 <__adddf3>
 80238f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80238f4:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 80238f8:	4680      	mov	r8, r0
 80238fa:	46a1      	mov	r9, r4
 80238fc:	2d00      	cmp	r5, #0
 80238fe:	f040 80b5 	bne.w	8023a6c <_dtoa_r+0xb1c>
 8023902:	2300      	movs	r3, #0
 8023904:	2200      	movs	r2, #0
 8023906:	f2c4 0314 	movt	r3, #16404	; 0x4014
 802390a:	4650      	mov	r0, sl
 802390c:	4659      	mov	r1, fp
 802390e:	f7fc fdad 	bl	802046c <__aeabi_dsub>
 8023912:	4642      	mov	r2, r8
 8023914:	4623      	mov	r3, r4
 8023916:	4682      	mov	sl, r0
 8023918:	468b      	mov	fp, r1
 802391a:	f7fd f9eb 	bl	8020cf4 <__aeabi_dcmpgt>
 802391e:	2800      	cmp	r0, #0
 8023920:	f040 813c 	bne.w	8023b9c <_dtoa_r+0xc4c>
 8023924:	4642      	mov	r2, r8
 8023926:	4650      	mov	r0, sl
 8023928:	4659      	mov	r1, fp
 802392a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 802392e:	f7fd f9c3 	bl	8020cb8 <__aeabi_dcmplt>
 8023932:	2800      	cmp	r0, #0
 8023934:	f000 808a 	beq.w	8023a4c <_dtoa_r+0xafc>
 8023938:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802393a:	9408      	str	r4, [sp, #32]
 802393c:	e651      	b.n	80235e2 <_dtoa_r+0x692>
 802393e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023940:	2800      	cmp	r0, #0
 8023942:	f000 815e 	beq.w	8023c02 <_dtoa_r+0xcb2>
 8023946:	2d00      	cmp	r5, #0
 8023948:	dd05      	ble.n	8023956 <_dtoa_r+0xa06>
 802394a:	4630      	mov	r0, r6
 802394c:	9908      	ldr	r1, [sp, #32]
 802394e:	462a      	mov	r2, r5
 8023950:	f000 fffe 	bl	8024950 <__lshift>
 8023954:	9008      	str	r0, [sp, #32]
 8023956:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802395a:	2f00      	cmp	r7, #0
 802395c:	f040 820b 	bne.w	8023d76 <_dtoa_r+0xe26>
 8023960:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023962:	2301      	movs	r3, #1
 8023964:	940b      	str	r4, [sp, #44]	; 0x2c
 8023966:	461f      	mov	r7, r3
 8023968:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802396a:	ea0a 0003 	and.w	r0, sl, r3
 802396e:	950a      	str	r5, [sp, #40]	; 0x28
 8023970:	9d08      	ldr	r5, [sp, #32]
 8023972:	900e      	str	r0, [sp, #56]	; 0x38
 8023974:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023976:	4620      	mov	r0, r4
 8023978:	f7ff fa46 	bl	8022e08 <quorem>
 802397c:	4629      	mov	r1, r5
 802397e:	f04f 0b01 	mov.w	fp, #1
 8023982:	9008      	str	r0, [sp, #32]
 8023984:	4620      	mov	r0, r4
 8023986:	f001 f841 	bl	8024a0c <__mcmp>
 802398a:	4642      	mov	r2, r8
 802398c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802398e:	4681      	mov	r9, r0
 8023990:	4630      	mov	r0, r6
 8023992:	f001 f85b 	bl	8024a4c <__mdiff>
 8023996:	9a08      	ldr	r2, [sp, #32]
 8023998:	3230      	adds	r2, #48	; 0x30
 802399a:	920c      	str	r2, [sp, #48]	; 0x30
 802399c:	68c3      	ldr	r3, [r0, #12]
 802399e:	4682      	mov	sl, r0
 80239a0:	2b00      	cmp	r3, #0
 80239a2:	d03e      	beq.n	8023a22 <_dtoa_r+0xad2>
 80239a4:	4630      	mov	r0, r6
 80239a6:	4651      	mov	r1, sl
 80239a8:	f000 fde6 	bl	8024578 <_Bfree>
 80239ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80239ae:	ea5b 0303 	orrs.w	r3, fp, r3
 80239b2:	d103      	bne.n	80239bc <_dtoa_r+0xa6c>
 80239b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80239b6:	2800      	cmp	r0, #0
 80239b8:	f000 8219 	beq.w	8023dee <_dtoa_r+0xe9e>
 80239bc:	f1b9 0f00 	cmp.w	r9, #0
 80239c0:	f2c0 81b6 	blt.w	8023d30 <_dtoa_r+0xde0>
 80239c4:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80239c6:	ea59 0000 	orrs.w	r0, r9, r0
 80239ca:	d103      	bne.n	80239d4 <_dtoa_r+0xa84>
 80239cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80239ce:	2900      	cmp	r1, #0
 80239d0:	f000 81ae 	beq.w	8023d30 <_dtoa_r+0xde0>
 80239d4:	f1bb 0f00 	cmp.w	fp, #0
 80239d8:	f300 81f2 	bgt.w	8023dc0 <_dtoa_r+0xe70>
 80239dc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80239de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80239e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80239e2:	4287      	cmp	r7, r0
 80239e4:	f803 2b01 	strb.w	r2, [r3], #1
 80239e8:	4699      	mov	r9, r3
 80239ea:	930a      	str	r3, [sp, #40]	; 0x28
 80239ec:	f000 81e2 	beq.w	8023db4 <_dtoa_r+0xe64>
 80239f0:	4621      	mov	r1, r4
 80239f2:	220a      	movs	r2, #10
 80239f4:	2300      	movs	r3, #0
 80239f6:	4630      	mov	r0, r6
 80239f8:	f000 fdda 	bl	80245b0 <__multadd>
 80239fc:	4545      	cmp	r5, r8
 80239fe:	4604      	mov	r4, r0
 8023a00:	d02a      	beq.n	8023a58 <_dtoa_r+0xb08>
 8023a02:	4629      	mov	r1, r5
 8023a04:	220a      	movs	r2, #10
 8023a06:	2300      	movs	r3, #0
 8023a08:	4630      	mov	r0, r6
 8023a0a:	f000 fdd1 	bl	80245b0 <__multadd>
 8023a0e:	4641      	mov	r1, r8
 8023a10:	220a      	movs	r2, #10
 8023a12:	2300      	movs	r3, #0
 8023a14:	3701      	adds	r7, #1
 8023a16:	4605      	mov	r5, r0
 8023a18:	4630      	mov	r0, r6
 8023a1a:	f000 fdc9 	bl	80245b0 <__multadd>
 8023a1e:	4680      	mov	r8, r0
 8023a20:	e7a8      	b.n	8023974 <_dtoa_r+0xa24>
 8023a22:	4620      	mov	r0, r4
 8023a24:	4651      	mov	r1, sl
 8023a26:	f000 fff1 	bl	8024a0c <__mcmp>
 8023a2a:	4683      	mov	fp, r0
 8023a2c:	e7ba      	b.n	80239a4 <_dtoa_r+0xa54>
 8023a2e:	4630      	mov	r0, r6
 8023a30:	4629      	mov	r1, r5
 8023a32:	f000 fda1 	bl	8024578 <_Bfree>
 8023a36:	e560      	b.n	80234fa <_dtoa_r+0x5aa>
 8023a38:	231c      	movs	r3, #28
 8023a3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023a3c:	18ed      	adds	r5, r5, r3
 8023a3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023a40:	18d2      	adds	r2, r2, r3
 8023a42:	920e      	str	r2, [sp, #56]	; 0x38
 8023a44:	18c0      	adds	r0, r0, r3
 8023a46:	900b      	str	r0, [sp, #44]	; 0x2c
 8023a48:	e509      	b.n	802345e <_dtoa_r+0x50e>
 8023a4a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8023a4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8023a50:	4682      	mov	sl, r0
 8023a52:	468b      	mov	fp, r1
 8023a54:	f7ff bbd2 	b.w	80231fc <_dtoa_r+0x2ac>
 8023a58:	4629      	mov	r1, r5
 8023a5a:	4630      	mov	r0, r6
 8023a5c:	220a      	movs	r2, #10
 8023a5e:	2300      	movs	r3, #0
 8023a60:	f000 fda6 	bl	80245b0 <__multadd>
 8023a64:	3701      	adds	r7, #1
 8023a66:	4605      	mov	r5, r0
 8023a68:	4680      	mov	r8, r0
 8023a6a:	e783      	b.n	8023974 <_dtoa_r+0xa24>
 8023a6c:	9c07      	ldr	r4, [sp, #28]
 8023a6e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8023a72:	941a      	str	r4, [sp, #104]	; 0x68
 8023a74:	e661      	b.n	802373a <_dtoa_r+0x7ea>
 8023a76:	9d07      	ldr	r5, [sp, #28]
 8023a78:	426c      	negs	r4, r5
 8023a7a:	2c00      	cmp	r4, #0
 8023a7c:	f000 8110 	beq.w	8023ca0 <_dtoa_r+0xd50>
 8023a80:	f004 020f 	and.w	r2, r4, #15
 8023a84:	f64e 23a8 	movw	r3, #60072	; 0xeaa8
 8023a88:	f6c0 0302 	movt	r3, #2050	; 0x802
 8023a8c:	4650      	mov	r0, sl
 8023a8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023a92:	4659      	mov	r1, fp
 8023a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a98:	f7fc fe9c 	bl	80207d4 <__aeabi_dmul>
 8023a9c:	1124      	asrs	r4, r4, #4
 8023a9e:	4682      	mov	sl, r0
 8023aa0:	468b      	mov	fp, r1
 8023aa2:	f000 80fd 	beq.w	8023ca0 <_dtoa_r+0xd50>
 8023aa6:	f64e 3598 	movw	r5, #60312	; 0xeb98
 8023aaa:	2702      	movs	r7, #2
 8023aac:	f6c0 0502 	movt	r5, #2050	; 0x802
 8023ab0:	07e3      	lsls	r3, r4, #31
 8023ab2:	4650      	mov	r0, sl
 8023ab4:	4659      	mov	r1, fp
 8023ab6:	d506      	bpl.n	8023ac6 <_dtoa_r+0xb76>
 8023ab8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8023abc:	3701      	adds	r7, #1
 8023abe:	f7fc fe89 	bl	80207d4 <__aeabi_dmul>
 8023ac2:	4682      	mov	sl, r0
 8023ac4:	468b      	mov	fp, r1
 8023ac6:	3508      	adds	r5, #8
 8023ac8:	1064      	asrs	r4, r4, #1
 8023aca:	d1f1      	bne.n	8023ab0 <_dtoa_r+0xb60>
 8023acc:	e5f8      	b.n	80236c0 <_dtoa_r+0x770>
 8023ace:	f10c 35ff 	add.w	r5, ip, #4294967295
 8023ad2:	f64e 21a8 	movw	r1, #60072	; 0xeaa8
 8023ad6:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023ada:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023adc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8023ae0:	464b      	mov	r3, r9
 8023ae2:	4642      	mov	r2, r8
 8023ae4:	f8cd c00c 	str.w	ip, [sp, #12]
 8023ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023aec:	9516      	str	r5, [sp, #88]	; 0x58
 8023aee:	9411      	str	r4, [sp, #68]	; 0x44
 8023af0:	f7fc fe70 	bl	80207d4 <__aeabi_dmul>
 8023af4:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8023af8:	4659      	mov	r1, fp
 8023afa:	4650      	mov	r0, sl
 8023afc:	f002 fd5a 	bl	80265b4 <__aeabi_d2iz>
 8023b00:	4604      	mov	r4, r0
 8023b02:	f7fc fe01 	bl	8020708 <__aeabi_i2d>
 8023b06:	460b      	mov	r3, r1
 8023b08:	4602      	mov	r2, r0
 8023b0a:	4659      	mov	r1, fp
 8023b0c:	4650      	mov	r0, sl
 8023b0e:	f7fc fcad 	bl	802046c <__aeabi_dsub>
 8023b12:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023b14:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8023b18:	f805 3b01 	strb.w	r3, [r5], #1
 8023b1c:	46a9      	mov	r9, r5
 8023b1e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8023b22:	9511      	str	r5, [sp, #68]	; 0x44
 8023b24:	f1bc 0f01 	cmp.w	ip, #1
 8023b28:	4682      	mov	sl, r0
 8023b2a:	468b      	mov	fp, r1
 8023b2c:	d021      	beq.n	8023b72 <_dtoa_r+0xc22>
 8023b2e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023b30:	1e6f      	subs	r7, r5, #1
 8023b32:	462c      	mov	r4, r5
 8023b34:	4467      	add	r7, ip
 8023b36:	2300      	movs	r3, #0
 8023b38:	2200      	movs	r2, #0
 8023b3a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8023b3e:	f7fc fe49 	bl	80207d4 <__aeabi_dmul>
 8023b42:	4689      	mov	r9, r1
 8023b44:	4680      	mov	r8, r0
 8023b46:	f002 fd35 	bl	80265b4 <__aeabi_d2iz>
 8023b4a:	4605      	mov	r5, r0
 8023b4c:	f7fc fddc 	bl	8020708 <__aeabi_i2d>
 8023b50:	3530      	adds	r5, #48	; 0x30
 8023b52:	4602      	mov	r2, r0
 8023b54:	460b      	mov	r3, r1
 8023b56:	4640      	mov	r0, r8
 8023b58:	4649      	mov	r1, r9
 8023b5a:	f7fc fc87 	bl	802046c <__aeabi_dsub>
 8023b5e:	f804 5f01 	strb.w	r5, [r4, #1]!
 8023b62:	42bc      	cmp	r4, r7
 8023b64:	d1e7      	bne.n	8023b36 <_dtoa_r+0xbe6>
 8023b66:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023b68:	4682      	mov	sl, r0
 8023b6a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023b6c:	468b      	mov	fp, r1
 8023b6e:	eb04 0905 	add.w	r9, r4, r5
 8023b72:	2300      	movs	r3, #0
 8023b74:	2200      	movs	r2, #0
 8023b76:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8023b7a:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8023b7e:	f7fc fc77 	bl	8020470 <__adddf3>
 8023b82:	4602      	mov	r2, r0
 8023b84:	460b      	mov	r3, r1
 8023b86:	4650      	mov	r0, sl
 8023b88:	4659      	mov	r1, fp
 8023b8a:	f7fd f8b3 	bl	8020cf4 <__aeabi_dcmpgt>
 8023b8e:	2800      	cmp	r0, #0
 8023b90:	f000 8092 	beq.w	8023cb8 <_dtoa_r+0xd68>
 8023b94:	f819 4c01 	ldrb.w	r4, [r9, #-1]
 8023b98:	f7ff bbdf 	b.w	802335a <_dtoa_r+0x40a>
 8023b9c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023b9e:	9408      	str	r4, [sp, #32]
 8023ba0:	e491      	b.n	80234c6 <_dtoa_r+0x576>
 8023ba2:	6923      	ldr	r3, [r4, #16]
 8023ba4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8023ba8:	6918      	ldr	r0, [r3, #16]
 8023baa:	f000 fd8d 	bl	80246c8 <__hi0bits>
 8023bae:	f1c0 0320 	rsb	r3, r0, #32
 8023bb2:	e440      	b.n	8023436 <_dtoa_r+0x4e6>
 8023bb4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8023bb6:	4621      	mov	r1, r4
 8023bb8:	f000 ff28 	bl	8024a0c <__mcmp>
 8023bbc:	2800      	cmp	r0, #0
 8023bbe:	f6bf ac63 	bge.w	8023488 <_dtoa_r+0x538>
 8023bc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023bc4:	4630      	mov	r0, r6
 8023bc6:	220a      	movs	r2, #10
 8023bc8:	2300      	movs	r3, #0
 8023bca:	f000 fcf1 	bl	80245b0 <__multadd>
 8023bce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8023bd0:	900c      	str	r0, [sp, #48]	; 0x30
 8023bd2:	9807      	ldr	r0, [sp, #28]
 8023bd4:	3801      	subs	r0, #1
 8023bd6:	9007      	str	r0, [sp, #28]
 8023bd8:	2900      	cmp	r1, #0
 8023bda:	f040 8119 	bne.w	8023e10 <_dtoa_r+0xec0>
 8023bde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023be0:	930d      	str	r3, [sp, #52]	; 0x34
 8023be2:	e451      	b.n	8023488 <_dtoa_r+0x538>
 8023be4:	280e      	cmp	r0, #14
 8023be6:	900d      	str	r0, [sp, #52]	; 0x34
 8023be8:	bf8c      	ite	hi
 8023bea:	2300      	movhi	r3, #0
 8023bec:	2301      	movls	r3, #1
 8023bee:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8023bf0:	401d      	ands	r5, r3
 8023bf2:	2300      	movs	r3, #0
 8023bf4:	6063      	str	r3, [r4, #4]
 8023bf6:	e518      	b.n	802362a <_dtoa_r+0x6da>
 8023bf8:	2301      	movs	r3, #1
 8023bfa:	9310      	str	r3, [sp, #64]	; 0x40
 8023bfc:	930d      	str	r3, [sp, #52]	; 0x34
 8023bfe:	9329      	str	r3, [sp, #164]	; 0xa4
 8023c00:	e7f5      	b.n	8023bee <_dtoa_r+0xc9e>
 8023c02:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023c04:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8023c08:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8023c0c:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8023c10:	e002      	b.n	8023c18 <_dtoa_r+0xcc8>
 8023c12:	f000 fccd 	bl	80245b0 <__multadd>
 8023c16:	4680      	mov	r8, r0
 8023c18:	4621      	mov	r1, r4
 8023c1a:	4640      	mov	r0, r8
 8023c1c:	f7ff f8f4 	bl	8022e08 <quorem>
 8023c20:	220a      	movs	r2, #10
 8023c22:	2300      	movs	r3, #0
 8023c24:	4641      	mov	r1, r8
 8023c26:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8023c2a:	f809 7005 	strb.w	r7, [r9, r5]
 8023c2e:	3501      	adds	r5, #1
 8023c30:	4630      	mov	r0, r6
 8023c32:	45aa      	cmp	sl, r5
 8023c34:	dced      	bgt.n	8023c12 <_dtoa_r+0xcc2>
 8023c36:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023c38:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8023c3c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8023c40:	2d01      	cmp	r5, #1
 8023c42:	bfac      	ite	ge
 8023c44:	44a9      	addge	r9, r5
 8023c46:	f109 0901 	addlt.w	r9, r9, #1
 8023c4a:	461d      	mov	r5, r3
 8023c4c:	2201      	movs	r2, #1
 8023c4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023c50:	4630      	mov	r0, r6
 8023c52:	f000 fe7d 	bl	8024950 <__lshift>
 8023c56:	4621      	mov	r1, r4
 8023c58:	900c      	str	r0, [sp, #48]	; 0x30
 8023c5a:	f000 fed7 	bl	8024a0c <__mcmp>
 8023c5e:	2800      	cmp	r0, #0
 8023c60:	dd14      	ble.n	8023c8c <_dtoa_r+0xd3c>
 8023c62:	f819 2c01 	ldrb.w	r2, [r9, #-1]
 8023c66:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023c68:	464b      	mov	r3, r9
 8023c6a:	1c41      	adds	r1, r0, #1
 8023c6c:	e002      	b.n	8023c74 <_dtoa_r+0xd24>
 8023c6e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8023c72:	3b01      	subs	r3, #1
 8023c74:	2a39      	cmp	r2, #57	; 0x39
 8023c76:	4699      	mov	r9, r3
 8023c78:	d178      	bne.n	8023d6c <_dtoa_r+0xe1c>
 8023c7a:	428b      	cmp	r3, r1
 8023c7c:	d1f7      	bne.n	8023c6e <_dtoa_r+0xd1e>
 8023c7e:	9807      	ldr	r0, [sp, #28]
 8023c80:	2331      	movs	r3, #49	; 0x31
 8023c82:	f801 3c01 	strb.w	r3, [r1, #-1]
 8023c86:	3001      	adds	r0, #1
 8023c88:	9007      	str	r0, [sp, #28]
 8023c8a:	e425      	b.n	80234d8 <_dtoa_r+0x588>
 8023c8c:	d101      	bne.n	8023c92 <_dtoa_r+0xd42>
 8023c8e:	07fb      	lsls	r3, r7, #31
 8023c90:	d4e7      	bmi.n	8023c62 <_dtoa_r+0xd12>
 8023c92:	464b      	mov	r3, r9
 8023c94:	4699      	mov	r9, r3
 8023c96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023c9a:	2a30      	cmp	r2, #48	; 0x30
 8023c9c:	d0fa      	beq.n	8023c94 <_dtoa_r+0xd44>
 8023c9e:	e41b      	b.n	80234d8 <_dtoa_r+0x588>
 8023ca0:	2702      	movs	r7, #2
 8023ca2:	e50d      	b.n	80236c0 <_dtoa_r+0x770>
 8023ca4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8023ca6:	e42c      	b.n	8023502 <_dtoa_r+0x5b2>
 8023ca8:	4630      	mov	r0, r6
 8023caa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023cac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023cae:	f000 fdff 	bl	80248b0 <__pow5mult>
 8023cb2:	900c      	str	r0, [sp, #48]	; 0x30
 8023cb4:	f7ff bba7 	b.w	8023406 <_dtoa_r+0x4b6>
 8023cb8:	2100      	movs	r1, #0
 8023cba:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8023cbe:	2000      	movs	r0, #0
 8023cc0:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8023cc4:	f7fc fbd2 	bl	802046c <__aeabi_dsub>
 8023cc8:	4602      	mov	r2, r0
 8023cca:	460b      	mov	r3, r1
 8023ccc:	4650      	mov	r0, sl
 8023cce:	4659      	mov	r1, fp
 8023cd0:	f7fc fff2 	bl	8020cb8 <__aeabi_dcmplt>
 8023cd4:	2800      	cmp	r0, #0
 8023cd6:	f43f aeb9 	beq.w	8023a4c <_dtoa_r+0xafc>
 8023cda:	464b      	mov	r3, r9
 8023cdc:	4699      	mov	r9, r3
 8023cde:	3b01      	subs	r3, #1
 8023ce0:	f819 2c01 	ldrb.w	r2, [r9, #-1]
 8023ce4:	2a30      	cmp	r2, #48	; 0x30
 8023ce6:	d0f9      	beq.n	8023cdc <_dtoa_r+0xd8c>
 8023ce8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8023cea:	9407      	str	r4, [sp, #28]
 8023cec:	e409      	b.n	8023502 <_dtoa_r+0x5b2>
 8023cee:	4630      	mov	r0, r6
 8023cf0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023cf2:	f000 fddd 	bl	80248b0 <__pow5mult>
 8023cf6:	900c      	str	r0, [sp, #48]	; 0x30
 8023cf8:	f7ff bb85 	b.w	8023406 <_dtoa_r+0x4b6>
 8023cfc:	2400      	movs	r4, #0
 8023cfe:	9408      	str	r4, [sp, #32]
 8023d00:	e46f      	b.n	80235e2 <_dtoa_r+0x692>
 8023d02:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023d04:	2c00      	cmp	r4, #0
 8023d06:	d04e      	beq.n	8023da6 <_dtoa_r+0xe56>
 8023d08:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8023d0c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023d0e:	3303      	adds	r3, #3
 8023d10:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023d12:	e445      	b.n	80235a0 <_dtoa_r+0x650>
 8023d14:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8023d16:	3401      	adds	r4, #1
 8023d18:	f803 4c01 	strb.w	r4, [r3, #-1]
 8023d1c:	9507      	str	r5, [sp, #28]
 8023d1e:	f7ff bbf0 	b.w	8023502 <_dtoa_r+0x5b2>
 8023d22:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8023d24:	f7ff bb19 	b.w	802335a <_dtoa_r+0x40a>
 8023d28:	980e      	ldr	r0, [sp, #56]	; 0x38
 8023d2a:	2300      	movs	r3, #0
 8023d2c:	1b45      	subs	r5, r0, r5
 8023d2e:	e437      	b.n	80235a0 <_dtoa_r+0x650>
 8023d30:	f1bb 0f00 	cmp.w	fp, #0
 8023d34:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023d36:	940c      	str	r4, [sp, #48]	; 0x30
 8023d38:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023d3a:	dd0f      	ble.n	8023d5c <_dtoa_r+0xe0c>
 8023d3c:	2201      	movs	r2, #1
 8023d3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023d40:	4630      	mov	r0, r6
 8023d42:	f000 fe05 	bl	8024950 <__lshift>
 8023d46:	4621      	mov	r1, r4
 8023d48:	900c      	str	r0, [sp, #48]	; 0x30
 8023d4a:	f000 fe5f 	bl	8024a0c <__mcmp>
 8023d4e:	2800      	cmp	r0, #0
 8023d50:	dd56      	ble.n	8023e00 <_dtoa_r+0xeb0>
 8023d52:	2f39      	cmp	r7, #57	; 0x39
 8023d54:	d042      	beq.n	8023ddc <_dtoa_r+0xe8c>
 8023d56:	9b08      	ldr	r3, [sp, #32]
 8023d58:	f103 0731 	add.w	r7, r3, #49	; 0x31
 8023d5c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8023d60:	f8cd 8020 	str.w	r8, [sp, #32]
 8023d64:	f809 7b01 	strb.w	r7, [r9], #1
 8023d68:	f7ff bbb6 	b.w	80234d8 <_dtoa_r+0x588>
 8023d6c:	3201      	adds	r2, #1
 8023d6e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8023d72:	f7ff bbb1 	b.w	80234d8 <_dtoa_r+0x588>
 8023d76:	9d08      	ldr	r5, [sp, #32]
 8023d78:	4630      	mov	r0, r6
 8023d7a:	6869      	ldr	r1, [r5, #4]
 8023d7c:	f000 fbc6 	bl	802450c <_Balloc>
 8023d80:	9b08      	ldr	r3, [sp, #32]
 8023d82:	f103 010c 	add.w	r1, r3, #12
 8023d86:	4605      	mov	r5, r0
 8023d88:	9808      	ldr	r0, [sp, #32]
 8023d8a:	6902      	ldr	r2, [r0, #16]
 8023d8c:	f105 000c 	add.w	r0, r5, #12
 8023d90:	3202      	adds	r2, #2
 8023d92:	0092      	lsls	r2, r2, #2
 8023d94:	f7fd fb30 	bl	80213f8 <memcpy>
 8023d98:	4630      	mov	r0, r6
 8023d9a:	4629      	mov	r1, r5
 8023d9c:	2201      	movs	r2, #1
 8023d9e:	f000 fdd7 	bl	8024950 <__lshift>
 8023da2:	4680      	mov	r8, r0
 8023da4:	e5dc      	b.n	8023960 <_dtoa_r+0xa10>
 8023da6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023da8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023daa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023dac:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8023db0:	f7ff bbf6 	b.w	80235a0 <_dtoa_r+0x650>
 8023db4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023db6:	f8cd 8020 	str.w	r8, [sp, #32]
 8023dba:	940c      	str	r4, [sp, #48]	; 0x30
 8023dbc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023dbe:	e745      	b.n	8023c4c <_dtoa_r+0xcfc>
 8023dc0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023dc2:	940c      	str	r4, [sp, #48]	; 0x30
 8023dc4:	2f39      	cmp	r7, #57	; 0x39
 8023dc6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023dc8:	d008      	beq.n	8023ddc <_dtoa_r+0xe8c>
 8023dca:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8023dce:	3701      	adds	r7, #1
 8023dd0:	f8cd 8020 	str.w	r8, [sp, #32]
 8023dd4:	f809 7b01 	strb.w	r7, [r9], #1
 8023dd8:	f7ff bb7e 	b.w	80234d8 <_dtoa_r+0x588>
 8023ddc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8023de0:	2339      	movs	r3, #57	; 0x39
 8023de2:	f8cd 8020 	str.w	r8, [sp, #32]
 8023de6:	461a      	mov	r2, r3
 8023de8:	f809 3b01 	strb.w	r3, [r9], #1
 8023dec:	e73b      	b.n	8023c66 <_dtoa_r+0xd16>
 8023dee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023df0:	940c      	str	r4, [sp, #48]	; 0x30
 8023df2:	2f39      	cmp	r7, #57	; 0x39
 8023df4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023df6:	d0f1      	beq.n	8023ddc <_dtoa_r+0xe8c>
 8023df8:	f1b9 0f00 	cmp.w	r9, #0
 8023dfc:	dcab      	bgt.n	8023d56 <_dtoa_r+0xe06>
 8023dfe:	e7ad      	b.n	8023d5c <_dtoa_r+0xe0c>
 8023e00:	d1ac      	bne.n	8023d5c <_dtoa_r+0xe0c>
 8023e02:	07fa      	lsls	r2, r7, #31
 8023e04:	d5aa      	bpl.n	8023d5c <_dtoa_r+0xe0c>
 8023e06:	e7a4      	b.n	8023d52 <_dtoa_r+0xe02>
 8023e08:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8023e0a:	9507      	str	r5, [sp, #28]
 8023e0c:	f7ff bb79 	b.w	8023502 <_dtoa_r+0x5b2>
 8023e10:	220a      	movs	r2, #10
 8023e12:	4630      	mov	r0, r6
 8023e14:	9908      	ldr	r1, [sp, #32]
 8023e16:	2300      	movs	r3, #0
 8023e18:	f000 fbca 	bl	80245b0 <__multadd>
 8023e1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023e1e:	920d      	str	r2, [sp, #52]	; 0x34
 8023e20:	9008      	str	r0, [sp, #32]
 8023e22:	f7ff bb31 	b.w	8023488 <_dtoa_r+0x538>
 8023e26:	f43f ab1a 	beq.w	802345e <_dtoa_r+0x50e>
 8023e2a:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8023e2e:	e604      	b.n	8023a3a <_dtoa_r+0xaea>
 8023e30:	2501      	movs	r5, #1
 8023e32:	f7ff b973 	b.w	802311c <_dtoa_r+0x1cc>
 8023e36:	bf00      	nop

08023e38 <_setlocale_r>:
 8023e38:	b510      	push	{r4, lr}
 8023e3a:	4614      	mov	r4, r2
 8023e3c:	b13a      	cbz	r2, 8023e4e <_setlocale_r+0x16>
 8023e3e:	f64e 4148 	movw	r1, #60488	; 0xec48
 8023e42:	4610      	mov	r0, r2
 8023e44:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023e48:	f000 fffc 	bl	8024e44 <strcmp>
 8023e4c:	b920      	cbnz	r0, 8023e58 <_setlocale_r+0x20>
 8023e4e:	f64e 30f0 	movw	r0, #60400	; 0xebf0
 8023e52:	f6c0 0002 	movt	r0, #2050	; 0x802
 8023e56:	bd10      	pop	{r4, pc}
 8023e58:	f64e 31f0 	movw	r1, #60400	; 0xebf0
 8023e5c:	4620      	mov	r0, r4
 8023e5e:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023e62:	f000 ffef 	bl	8024e44 <strcmp>
 8023e66:	b920      	cbnz	r0, 8023e72 <_setlocale_r+0x3a>
 8023e68:	f64e 30f0 	movw	r0, #60400	; 0xebf0
 8023e6c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8023e70:	bd10      	pop	{r4, pc}
 8023e72:	f64e 4114 	movw	r1, #60436	; 0xec14
 8023e76:	4620      	mov	r0, r4
 8023e78:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023e7c:	f000 ffe2 	bl	8024e44 <strcmp>
 8023e80:	f64e 33f0 	movw	r3, #60400	; 0xebf0
 8023e84:	f6c0 0302 	movt	r3, #2050	; 0x802
 8023e88:	2800      	cmp	r0, #0
 8023e8a:	bf0c      	ite	eq
 8023e8c:	4618      	moveq	r0, r3
 8023e8e:	2000      	movne	r0, #0
 8023e90:	bd10      	pop	{r4, pc}
 8023e92:	bf00      	nop

08023e94 <__locale_charset>:
 8023e94:	f240 2018 	movw	r0, #536	; 0x218
 8023e98:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8023e9c:	4770      	bx	lr
 8023e9e:	bf00      	nop

08023ea0 <__locale_mb_cur_max>:
 8023ea0:	f240 2318 	movw	r3, #536	; 0x218
 8023ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023ea8:	6a18      	ldr	r0, [r3, #32]
 8023eaa:	4770      	bx	lr

08023eac <__locale_msgcharset>:
 8023eac:	4800      	ldr	r0, [pc, #0]	; (8023eb0 <__locale_msgcharset+0x4>)
 8023eae:	4770      	bx	lr
 8023eb0:	2000023c 	.word	0x2000023c

08023eb4 <__locale_cjk_lang>:
 8023eb4:	2000      	movs	r0, #0
 8023eb6:	4770      	bx	lr

08023eb8 <_localeconv_r>:
 8023eb8:	4800      	ldr	r0, [pc, #0]	; (8023ebc <_localeconv_r+0x4>)
 8023eba:	4770      	bx	lr
 8023ebc:	2000025c 	.word	0x2000025c

08023ec0 <setlocale>:
 8023ec0:	f240 1324 	movw	r3, #292	; 0x124
 8023ec4:	460a      	mov	r2, r1
 8023ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023eca:	4601      	mov	r1, r0
 8023ecc:	6818      	ldr	r0, [r3, #0]
 8023ece:	f7ff bfb3 	b.w	8023e38 <_setlocale_r>
 8023ed2:	bf00      	nop

08023ed4 <localeconv>:
 8023ed4:	4800      	ldr	r0, [pc, #0]	; (8023ed8 <localeconv+0x4>)
 8023ed6:	4770      	bx	lr
 8023ed8:	2000025c 	.word	0x2000025c

08023edc <malloc>:
 8023edc:	f240 1324 	movw	r3, #292	; 0x124
 8023ee0:	4601      	mov	r1, r0
 8023ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023ee6:	6818      	ldr	r0, [r3, #0]
 8023ee8:	f000 b808 	b.w	8023efc <_malloc_r>

08023eec <free>:
 8023eec:	f240 1324 	movw	r3, #292	; 0x124
 8023ef0:	4601      	mov	r1, r0
 8023ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023ef6:	6818      	ldr	r0, [r3, #0]
 8023ef8:	f001 bec4 	b.w	8025c84 <_free_r>

08023efc <_malloc_r>:
 8023efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f00:	f101 040b 	add.w	r4, r1, #11
 8023f04:	2c16      	cmp	r4, #22
 8023f06:	b083      	sub	sp, #12
 8023f08:	4606      	mov	r6, r0
 8023f0a:	d930      	bls.n	8023f6e <_malloc_r+0x72>
 8023f0c:	f024 0407 	bic.w	r4, r4, #7
 8023f10:	0fe3      	lsrs	r3, r4, #31
 8023f12:	428c      	cmp	r4, r1
 8023f14:	bf2c      	ite	cs
 8023f16:	4619      	movcs	r1, r3
 8023f18:	f043 0101 	orrcc.w	r1, r3, #1
 8023f1c:	2900      	cmp	r1, #0
 8023f1e:	d12f      	bne.n	8023f80 <_malloc_r+0x84>
 8023f20:	4630      	mov	r0, r6
 8023f22:	f000 faef 	bl	8024504 <__malloc_lock>
 8023f26:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8023f2a:	d22d      	bcs.n	8023f88 <_malloc_r+0x8c>
 8023f2c:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8023f30:	f240 2594 	movw	r5, #660	; 0x294
 8023f34:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8023f38:	eb05 02ce 	add.w	r2, r5, lr, lsl #3
 8023f3c:	68d3      	ldr	r3, [r2, #12]
 8023f3e:	4293      	cmp	r3, r2
 8023f40:	f000 8223 	beq.w	802438a <_malloc_r+0x48e>
 8023f44:	685c      	ldr	r4, [r3, #4]
 8023f46:	f103 0708 	add.w	r7, r3, #8
 8023f4a:	68da      	ldr	r2, [r3, #12]
 8023f4c:	4630      	mov	r0, r6
 8023f4e:	f024 0403 	bic.w	r4, r4, #3
 8023f52:	6899      	ldr	r1, [r3, #8]
 8023f54:	191b      	adds	r3, r3, r4
 8023f56:	685c      	ldr	r4, [r3, #4]
 8023f58:	60ca      	str	r2, [r1, #12]
 8023f5a:	f044 0401 	orr.w	r4, r4, #1
 8023f5e:	6091      	str	r1, [r2, #8]
 8023f60:	605c      	str	r4, [r3, #4]
 8023f62:	f000 fad1 	bl	8024508 <__malloc_unlock>
 8023f66:	4638      	mov	r0, r7
 8023f68:	b003      	add	sp, #12
 8023f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f6e:	2300      	movs	r3, #0
 8023f70:	2410      	movs	r4, #16
 8023f72:	428c      	cmp	r4, r1
 8023f74:	bf2c      	ite	cs
 8023f76:	4619      	movcs	r1, r3
 8023f78:	f043 0101 	orrcc.w	r1, r3, #1
 8023f7c:	2900      	cmp	r1, #0
 8023f7e:	d0cf      	beq.n	8023f20 <_malloc_r+0x24>
 8023f80:	230c      	movs	r3, #12
 8023f82:	2700      	movs	r7, #0
 8023f84:	6033      	str	r3, [r6, #0]
 8023f86:	e7ee      	b.n	8023f66 <_malloc_r+0x6a>
 8023f88:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 8023f8c:	bf04      	itt	eq
 8023f8e:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 8023f92:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 8023f96:	f040 808c 	bne.w	80240b2 <_malloc_r+0x1b6>
 8023f9a:	f240 2594 	movw	r5, #660	; 0x294
 8023f9e:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8023fa2:	1869      	adds	r1, r5, r1
 8023fa4:	68cf      	ldr	r7, [r1, #12]
 8023fa6:	42b9      	cmp	r1, r7
 8023fa8:	d106      	bne.n	8023fb8 <_malloc_r+0xbc>
 8023faa:	e00d      	b.n	8023fc8 <_malloc_r+0xcc>
 8023fac:	2a00      	cmp	r2, #0
 8023fae:	f280 8181 	bge.w	80242b4 <_malloc_r+0x3b8>
 8023fb2:	68ff      	ldr	r7, [r7, #12]
 8023fb4:	42b9      	cmp	r1, r7
 8023fb6:	d007      	beq.n	8023fc8 <_malloc_r+0xcc>
 8023fb8:	687b      	ldr	r3, [r7, #4]
 8023fba:	f023 0303 	bic.w	r3, r3, #3
 8023fbe:	1b1a      	subs	r2, r3, r4
 8023fc0:	2a0f      	cmp	r2, #15
 8023fc2:	ddf3      	ble.n	8023fac <_malloc_r+0xb0>
 8023fc4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023fc8:	f10e 0e01 	add.w	lr, lr, #1
 8023fcc:	f240 2094 	movw	r0, #660	; 0x294
 8023fd0:	692f      	ldr	r7, [r5, #16]
 8023fd2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8023fd6:	f100 0208 	add.w	r2, r0, #8
 8023fda:	4297      	cmp	r7, r2
 8023fdc:	bf08      	it	eq
 8023fde:	6843      	ldreq	r3, [r0, #4]
 8023fe0:	d026      	beq.n	8024030 <_malloc_r+0x134>
 8023fe2:	687b      	ldr	r3, [r7, #4]
 8023fe4:	f023 0c03 	bic.w	ip, r3, #3
 8023fe8:	ebc4 030c 	rsb	r3, r4, ip
 8023fec:	2b0f      	cmp	r3, #15
 8023fee:	f300 819c 	bgt.w	802432a <_malloc_r+0x42e>
 8023ff2:	2b00      	cmp	r3, #0
 8023ff4:	6142      	str	r2, [r0, #20]
 8023ff6:	6102      	str	r2, [r0, #16]
 8023ff8:	f280 8095 	bge.w	8024126 <_malloc_r+0x22a>
 8023ffc:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8024000:	f080 8173 	bcs.w	80242ea <_malloc_r+0x3ee>
 8024004:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8024008:	f04f 0801 	mov.w	r8, #1
 802400c:	6843      	ldr	r3, [r0, #4]
 802400e:	eb00 01cc 	add.w	r1, r0, ip, lsl #3
 8024012:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8024016:	fa08 f80c 	lsl.w	r8, r8, ip
 802401a:	60f9      	str	r1, [r7, #12]
 802401c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8024020:	ea48 0303 	orr.w	r3, r8, r3
 8024024:	6043      	str	r3, [r0, #4]
 8024026:	f8c7 c008 	str.w	ip, [r7, #8]
 802402a:	f8cc 700c 	str.w	r7, [ip, #12]
 802402e:	608f      	str	r7, [r1, #8]
 8024030:	2701      	movs	r7, #1
 8024032:	ea4f 01ae 	mov.w	r1, lr, asr #2
 8024036:	fa07 f701 	lsl.w	r7, r7, r1
 802403a:	429f      	cmp	r7, r3
 802403c:	d87e      	bhi.n	802413c <_malloc_r+0x240>
 802403e:	423b      	tst	r3, r7
 8024040:	d106      	bne.n	8024050 <_malloc_r+0x154>
 8024042:	f02e 0e03 	bic.w	lr, lr, #3
 8024046:	007f      	lsls	r7, r7, #1
 8024048:	f10e 0e04 	add.w	lr, lr, #4
 802404c:	423b      	tst	r3, r7
 802404e:	d0fa      	beq.n	8024046 <_malloc_r+0x14a>
 8024050:	eb05 09ce 	add.w	r9, r5, lr, lsl #3
 8024054:	46f0      	mov	r8, lr
 8024056:	46cc      	mov	ip, r9
 8024058:	f8dc 000c 	ldr.w	r0, [ip, #12]
 802405c:	4584      	cmp	ip, r0
 802405e:	d107      	bne.n	8024070 <_malloc_r+0x174>
 8024060:	e174      	b.n	802434c <_malloc_r+0x450>
 8024062:	2b00      	cmp	r3, #0
 8024064:	f280 819b 	bge.w	802439e <_malloc_r+0x4a2>
 8024068:	68c0      	ldr	r0, [r0, #12]
 802406a:	4584      	cmp	ip, r0
 802406c:	f000 816e 	beq.w	802434c <_malloc_r+0x450>
 8024070:	6841      	ldr	r1, [r0, #4]
 8024072:	f021 0103 	bic.w	r1, r1, #3
 8024076:	1b0b      	subs	r3, r1, r4
 8024078:	2b0f      	cmp	r3, #15
 802407a:	ddf2      	ble.n	8024062 <_malloc_r+0x166>
 802407c:	4607      	mov	r7, r0
 802407e:	1901      	adds	r1, r0, r4
 8024080:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8024084:	f044 0801 	orr.w	r8, r4, #1
 8024088:	f857 4f08 	ldr.w	r4, [r7, #8]!
 802408c:	f043 0c01 	orr.w	ip, r3, #1
 8024090:	f8c0 8004 	str.w	r8, [r0, #4]
 8024094:	4630      	mov	r0, r6
 8024096:	f8c1 c004 	str.w	ip, [r1, #4]
 802409a:	f8c4 e00c 	str.w	lr, [r4, #12]
 802409e:	f8ce 4008 	str.w	r4, [lr, #8]
 80240a2:	6169      	str	r1, [r5, #20]
 80240a4:	6129      	str	r1, [r5, #16]
 80240a6:	60ca      	str	r2, [r1, #12]
 80240a8:	608a      	str	r2, [r1, #8]
 80240aa:	50cb      	str	r3, [r1, r3]
 80240ac:	f000 fa2c 	bl	8024508 <__malloc_unlock>
 80240b0:	e759      	b.n	8023f66 <_malloc_r+0x6a>
 80240b2:	f1be 0f04 	cmp.w	lr, #4
 80240b6:	bf9e      	ittt	ls
 80240b8:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 80240bc:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 80240c0:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 80240c4:	f67f af69 	bls.w	8023f9a <_malloc_r+0x9e>
 80240c8:	f1be 0f14 	cmp.w	lr, #20
 80240cc:	bf9c      	itt	ls
 80240ce:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 80240d2:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 80240d6:	f67f af60 	bls.w	8023f9a <_malloc_r+0x9e>
 80240da:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 80240de:	bf9e      	ittt	ls
 80240e0:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 80240e4:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 80240e8:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 80240ec:	f67f af55 	bls.w	8023f9a <_malloc_r+0x9e>
 80240f0:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 80240f4:	bf9e      	ittt	ls
 80240f6:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 80240fa:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 80240fe:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8024102:	f67f af4a 	bls.w	8023f9a <_malloc_r+0x9e>
 8024106:	f240 5354 	movw	r3, #1364	; 0x554
 802410a:	459e      	cmp	lr, r3
 802410c:	bf95      	itete	ls
 802410e:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 8024112:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 8024116:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 802411a:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 802411e:	bf98      	it	ls
 8024120:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8024124:	e739      	b.n	8023f9a <_malloc_r+0x9e>
 8024126:	eb07 030c 	add.w	r3, r7, ip
 802412a:	4630      	mov	r0, r6
 802412c:	3708      	adds	r7, #8
 802412e:	685a      	ldr	r2, [r3, #4]
 8024130:	f042 0201 	orr.w	r2, r2, #1
 8024134:	605a      	str	r2, [r3, #4]
 8024136:	f000 f9e7 	bl	8024508 <__malloc_unlock>
 802413a:	e714      	b.n	8023f66 <_malloc_r+0x6a>
 802413c:	68af      	ldr	r7, [r5, #8]
 802413e:	f240 2394 	movw	r3, #660	; 0x294
 8024142:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8024146:	687a      	ldr	r2, [r7, #4]
 8024148:	f022 0803 	bic.w	r8, r2, #3
 802414c:	4544      	cmp	r4, r8
 802414e:	ebc4 0208 	rsb	r2, r4, r8
 8024152:	bf94      	ite	ls
 8024154:	2100      	movls	r1, #0
 8024156:	2101      	movhi	r1, #1
 8024158:	2a0f      	cmp	r2, #15
 802415a:	bfd8      	it	le
 802415c:	f041 0101 	orrle.w	r1, r1, #1
 8024160:	2900      	cmp	r1, #0
 8024162:	f000 80b5 	beq.w	80242d0 <_malloc_r+0x3d4>
 8024166:	f640 0a18 	movw	sl, #2072	; 0x818
 802416a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 802416e:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8024172:	3201      	adds	r2, #1
 8024174:	f8da 3000 	ldr.w	r3, [sl]
 8024178:	4423      	add	r3, r4
 802417a:	bf08      	it	eq
 802417c:	f103 0b10 	addeq.w	fp, r3, #16
 8024180:	d006      	beq.n	8024190 <_malloc_r+0x294>
 8024182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8024186:	330f      	adds	r3, #15
 8024188:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 802418c:	f023 0b1f 	bic.w	fp, r3, #31
 8024190:	4630      	mov	r0, r6
 8024192:	4659      	mov	r1, fp
 8024194:	f000 fe42 	bl	8024e1c <_sbrk_r>
 8024198:	1c42      	adds	r2, r0, #1
 802419a:	4681      	mov	r9, r0
 802419c:	f000 8131 	beq.w	8024402 <_malloc_r+0x506>
 80241a0:	eb07 0308 	add.w	r3, r7, r8
 80241a4:	4283      	cmp	r3, r0
 80241a6:	f200 8106 	bhi.w	80243b6 <_malloc_r+0x4ba>
 80241aa:	f8da 2004 	ldr.w	r2, [sl, #4]
 80241ae:	454b      	cmp	r3, r9
 80241b0:	445a      	add	r2, fp
 80241b2:	f8ca 2004 	str.w	r2, [sl, #4]
 80241b6:	f000 8131 	beq.w	802441c <_malloc_r+0x520>
 80241ba:	f8d5 0408 	ldr.w	r0, [r5, #1032]	; 0x408
 80241be:	f240 2194 	movw	r1, #660	; 0x294
 80241c2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80241c6:	3001      	adds	r0, #1
 80241c8:	4630      	mov	r0, r6
 80241ca:	bf17      	itett	ne
 80241cc:	ebc3 0309 	rsbne	r3, r3, r9
 80241d0:	f8c1 9408 	streq.w	r9, [r1, #1032]	; 0x408
 80241d4:	18d2      	addne	r2, r2, r3
 80241d6:	f8ca 2004 	strne.w	r2, [sl, #4]
 80241da:	f019 0307 	ands.w	r3, r9, #7
 80241de:	bf1f      	itttt	ne
 80241e0:	f1c3 0208 	rsbne	r2, r3, #8
 80241e4:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 80241e8:	4491      	addne	r9, r2
 80241ea:	f103 0208 	addne.w	r2, r3, #8
 80241ee:	eb09 030b 	add.w	r3, r9, fp
 80241f2:	bf08      	it	eq
 80241f4:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 80241f8:	051b      	lsls	r3, r3, #20
 80241fa:	0d1b      	lsrs	r3, r3, #20
 80241fc:	ebc3 0b02 	rsb	fp, r3, r2
 8024200:	4659      	mov	r1, fp
 8024202:	f000 fe0b 	bl	8024e1c <_sbrk_r>
 8024206:	1c43      	adds	r3, r0, #1
 8024208:	f000 811d 	beq.w	8024446 <_malloc_r+0x54a>
 802420c:	ebc9 0100 	rsb	r1, r9, r0
 8024210:	4459      	add	r1, fp
 8024212:	f041 0101 	orr.w	r1, r1, #1
 8024216:	f8da 2004 	ldr.w	r2, [sl, #4]
 802421a:	42af      	cmp	r7, r5
 802421c:	f640 0318 	movw	r3, #2072	; 0x818
 8024220:	f8c5 9008 	str.w	r9, [r5, #8]
 8024224:	445a      	add	r2, fp
 8024226:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802422a:	f8c9 1004 	str.w	r1, [r9, #4]
 802422e:	f8ca 2004 	str.w	r2, [sl, #4]
 8024232:	d019      	beq.n	8024268 <_malloc_r+0x36c>
 8024234:	f1b8 0f0f 	cmp.w	r8, #15
 8024238:	f240 80dd 	bls.w	80243f6 <_malloc_r+0x4fa>
 802423c:	f1a8 010c 	sub.w	r1, r8, #12
 8024240:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8024244:	f021 0107 	bic.w	r1, r1, #7
 8024248:	f04f 0e05 	mov.w	lr, #5
 802424c:	1878      	adds	r0, r7, r1
 802424e:	290f      	cmp	r1, #15
 8024250:	f00c 0c01 	and.w	ip, ip, #1
 8024254:	ea41 0c0c 	orr.w	ip, r1, ip
 8024258:	f8c7 c004 	str.w	ip, [r7, #4]
 802425c:	f8c0 e004 	str.w	lr, [r0, #4]
 8024260:	f8c0 e008 	str.w	lr, [r0, #8]
 8024264:	f200 80e6 	bhi.w	8024434 <_malloc_r+0x538>
 8024268:	f640 0318 	movw	r3, #2072	; 0x818
 802426c:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
 8024270:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8024274:	68af      	ldr	r7, [r5, #8]
 8024276:	428a      	cmp	r2, r1
 8024278:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
 802427c:	bf88      	it	hi
 802427e:	62da      	strhi	r2, [r3, #44]	; 0x2c
 8024280:	f640 0318 	movw	r3, #2072	; 0x818
 8024284:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8024288:	428a      	cmp	r2, r1
 802428a:	bf88      	it	hi
 802428c:	631a      	strhi	r2, [r3, #48]	; 0x30
 802428e:	687b      	ldr	r3, [r7, #4]
 8024290:	f023 0303 	bic.w	r3, r3, #3
 8024294:	429c      	cmp	r4, r3
 8024296:	ebc4 0203 	rsb	r2, r4, r3
 802429a:	bf94      	ite	ls
 802429c:	2300      	movls	r3, #0
 802429e:	2301      	movhi	r3, #1
 80242a0:	2a0f      	cmp	r2, #15
 80242a2:	bfd8      	it	le
 80242a4:	f043 0301 	orrle.w	r3, r3, #1
 80242a8:	b193      	cbz	r3, 80242d0 <_malloc_r+0x3d4>
 80242aa:	4630      	mov	r0, r6
 80242ac:	2700      	movs	r7, #0
 80242ae:	f000 f92b 	bl	8024508 <__malloc_unlock>
 80242b2:	e658      	b.n	8023f66 <_malloc_r+0x6a>
 80242b4:	18fb      	adds	r3, r7, r3
 80242b6:	68fa      	ldr	r2, [r7, #12]
 80242b8:	68b9      	ldr	r1, [r7, #8]
 80242ba:	4630      	mov	r0, r6
 80242bc:	685c      	ldr	r4, [r3, #4]
 80242be:	3708      	adds	r7, #8
 80242c0:	60ca      	str	r2, [r1, #12]
 80242c2:	f044 0401 	orr.w	r4, r4, #1
 80242c6:	6091      	str	r1, [r2, #8]
 80242c8:	605c      	str	r4, [r3, #4]
 80242ca:	f000 f91d 	bl	8024508 <__malloc_unlock>
 80242ce:	e64a      	b.n	8023f66 <_malloc_r+0x6a>
 80242d0:	193b      	adds	r3, r7, r4
 80242d2:	f042 0201 	orr.w	r2, r2, #1
 80242d6:	f044 0401 	orr.w	r4, r4, #1
 80242da:	4630      	mov	r0, r6
 80242dc:	607c      	str	r4, [r7, #4]
 80242de:	3708      	adds	r7, #8
 80242e0:	605a      	str	r2, [r3, #4]
 80242e2:	60ab      	str	r3, [r5, #8]
 80242e4:	f000 f910 	bl	8024508 <__malloc_unlock>
 80242e8:	e63d      	b.n	8023f66 <_malloc_r+0x6a>
 80242ea:	ea4f 235c 	mov.w	r3, ip, lsr #9
 80242ee:	2b04      	cmp	r3, #4
 80242f0:	d95c      	bls.n	80243ac <_malloc_r+0x4b0>
 80242f2:	2b14      	cmp	r3, #20
 80242f4:	d878      	bhi.n	80243e8 <_malloc_r+0x4ec>
 80242f6:	335b      	adds	r3, #91	; 0x5b
 80242f8:	00d8      	lsls	r0, r3, #3
 80242fa:	1828      	adds	r0, r5, r0
 80242fc:	f240 2894 	movw	r8, #660	; 0x294
 8024300:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8024304:	6881      	ldr	r1, [r0, #8]
 8024306:	4281      	cmp	r1, r0
 8024308:	d103      	bne.n	8024312 <_malloc_r+0x416>
 802430a:	e060      	b.n	80243ce <_malloc_r+0x4d2>
 802430c:	6889      	ldr	r1, [r1, #8]
 802430e:	4288      	cmp	r0, r1
 8024310:	d004      	beq.n	802431c <_malloc_r+0x420>
 8024312:	684b      	ldr	r3, [r1, #4]
 8024314:	f023 0303 	bic.w	r3, r3, #3
 8024318:	459c      	cmp	ip, r3
 802431a:	d3f7      	bcc.n	802430c <_malloc_r+0x410>
 802431c:	68c8      	ldr	r0, [r1, #12]
 802431e:	686b      	ldr	r3, [r5, #4]
 8024320:	60f8      	str	r0, [r7, #12]
 8024322:	60b9      	str	r1, [r7, #8]
 8024324:	60cf      	str	r7, [r1, #12]
 8024326:	6087      	str	r7, [r0, #8]
 8024328:	e682      	b.n	8024030 <_malloc_r+0x134>
 802432a:	1939      	adds	r1, r7, r4
 802432c:	f043 0501 	orr.w	r5, r3, #1
 8024330:	6141      	str	r1, [r0, #20]
 8024332:	f044 0401 	orr.w	r4, r4, #1
 8024336:	6101      	str	r1, [r0, #16]
 8024338:	4630      	mov	r0, r6
 802433a:	607c      	str	r4, [r7, #4]
 802433c:	3708      	adds	r7, #8
 802433e:	60ca      	str	r2, [r1, #12]
 8024340:	608a      	str	r2, [r1, #8]
 8024342:	604d      	str	r5, [r1, #4]
 8024344:	50cb      	str	r3, [r1, r3]
 8024346:	f000 f8df 	bl	8024508 <__malloc_unlock>
 802434a:	e60c      	b.n	8023f66 <_malloc_r+0x6a>
 802434c:	f108 0801 	add.w	r8, r8, #1
 8024350:	f10c 0c08 	add.w	ip, ip, #8
 8024354:	f018 0f03 	tst.w	r8, #3
 8024358:	f47f ae7e 	bne.w	8024058 <_malloc_r+0x15c>
 802435c:	464b      	mov	r3, r9
 802435e:	f01e 0f03 	tst.w	lr, #3
 8024362:	f1a3 0108 	sub.w	r1, r3, #8
 8024366:	f10e 3eff 	add.w	lr, lr, #4294967295
 802436a:	d079      	beq.n	8024460 <_malloc_r+0x564>
 802436c:	681b      	ldr	r3, [r3, #0]
 802436e:	428b      	cmp	r3, r1
 8024370:	d0f5      	beq.n	802435e <_malloc_r+0x462>
 8024372:	686b      	ldr	r3, [r5, #4]
 8024374:	007f      	lsls	r7, r7, #1
 8024376:	429f      	cmp	r7, r3
 8024378:	f63f aee0 	bhi.w	802413c <_malloc_r+0x240>
 802437c:	2f00      	cmp	r7, #0
 802437e:	f43f aedd 	beq.w	802413c <_malloc_r+0x240>
 8024382:	421f      	tst	r7, r3
 8024384:	d071      	beq.n	802446a <_malloc_r+0x56e>
 8024386:	46c6      	mov	lr, r8
 8024388:	e662      	b.n	8024050 <_malloc_r+0x154>
 802438a:	f103 0208 	add.w	r2, r3, #8
 802438e:	695b      	ldr	r3, [r3, #20]
 8024390:	429a      	cmp	r2, r3
 8024392:	bf08      	it	eq
 8024394:	f10e 0e02 	addeq.w	lr, lr, #2
 8024398:	f43f ae18 	beq.w	8023fcc <_malloc_r+0xd0>
 802439c:	e5d2      	b.n	8023f44 <_malloc_r+0x48>
 802439e:	4607      	mov	r7, r0
 80243a0:	1843      	adds	r3, r0, r1
 80243a2:	68c2      	ldr	r2, [r0, #12]
 80243a4:	4630      	mov	r0, r6
 80243a6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80243aa:	e5d4      	b.n	8023f56 <_malloc_r+0x5a>
 80243ac:	ea4f 139c 	mov.w	r3, ip, lsr #6
 80243b0:	3338      	adds	r3, #56	; 0x38
 80243b2:	00d8      	lsls	r0, r3, #3
 80243b4:	e7a1      	b.n	80242fa <_malloc_r+0x3fe>
 80243b6:	42af      	cmp	r7, r5
 80243b8:	f240 2294 	movw	r2, #660	; 0x294
 80243bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80243c0:	f43f aef3 	beq.w	80241aa <_malloc_r+0x2ae>
 80243c4:	6897      	ldr	r7, [r2, #8]
 80243c6:	687b      	ldr	r3, [r7, #4]
 80243c8:	f023 0303 	bic.w	r3, r3, #3
 80243cc:	e762      	b.n	8024294 <_malloc_r+0x398>
 80243ce:	f04f 0901 	mov.w	r9, #1
 80243d2:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80243d6:	109b      	asrs	r3, r3, #2
 80243d8:	4608      	mov	r0, r1
 80243da:	fa09 f303 	lsl.w	r3, r9, r3
 80243de:	ea43 030c 	orr.w	r3, r3, ip
 80243e2:	f8c8 3004 	str.w	r3, [r8, #4]
 80243e6:	e79b      	b.n	8024320 <_malloc_r+0x424>
 80243e8:	2b54      	cmp	r3, #84	; 0x54
 80243ea:	d80f      	bhi.n	802440c <_malloc_r+0x510>
 80243ec:	ea4f 331c 	mov.w	r3, ip, lsr #12
 80243f0:	336e      	adds	r3, #110	; 0x6e
 80243f2:	00d8      	lsls	r0, r3, #3
 80243f4:	e781      	b.n	80242fa <_malloc_r+0x3fe>
 80243f6:	2301      	movs	r3, #1
 80243f8:	464f      	mov	r7, r9
 80243fa:	f8c9 3004 	str.w	r3, [r9, #4]
 80243fe:	2300      	movs	r3, #0
 8024400:	e748      	b.n	8024294 <_malloc_r+0x398>
 8024402:	68af      	ldr	r7, [r5, #8]
 8024404:	687b      	ldr	r3, [r7, #4]
 8024406:	f023 0303 	bic.w	r3, r3, #3
 802440a:	e743      	b.n	8024294 <_malloc_r+0x398>
 802440c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8024410:	d81d      	bhi.n	802444e <_malloc_r+0x552>
 8024412:	ea4f 33dc 	mov.w	r3, ip, lsr #15
 8024416:	3377      	adds	r3, #119	; 0x77
 8024418:	00d8      	lsls	r0, r3, #3
 802441a:	e76e      	b.n	80242fa <_malloc_r+0x3fe>
 802441c:	0519      	lsls	r1, r3, #20
 802441e:	0d09      	lsrs	r1, r1, #20
 8024420:	2900      	cmp	r1, #0
 8024422:	f47f aeca 	bne.w	80241ba <_malloc_r+0x2be>
 8024426:	68ab      	ldr	r3, [r5, #8]
 8024428:	eb0b 0108 	add.w	r1, fp, r8
 802442c:	f041 0101 	orr.w	r1, r1, #1
 8024430:	6059      	str	r1, [r3, #4]
 8024432:	e719      	b.n	8024268 <_malloc_r+0x36c>
 8024434:	4630      	mov	r0, r6
 8024436:	f107 0108 	add.w	r1, r7, #8
 802443a:	9301      	str	r3, [sp, #4]
 802443c:	f001 fc22 	bl	8025c84 <_free_r>
 8024440:	9b01      	ldr	r3, [sp, #4]
 8024442:	685a      	ldr	r2, [r3, #4]
 8024444:	e710      	b.n	8024268 <_malloc_r+0x36c>
 8024446:	2101      	movs	r1, #1
 8024448:	f04f 0b00 	mov.w	fp, #0
 802444c:	e6e3      	b.n	8024216 <_malloc_r+0x31a>
 802444e:	f240 5154 	movw	r1, #1364	; 0x554
 8024452:	428b      	cmp	r3, r1
 8024454:	d80d      	bhi.n	8024472 <_malloc_r+0x576>
 8024456:	ea4f 439c 	mov.w	r3, ip, lsr #18
 802445a:	337c      	adds	r3, #124	; 0x7c
 802445c:	00d8      	lsls	r0, r3, #3
 802445e:	e74c      	b.n	80242fa <_malloc_r+0x3fe>
 8024460:	686b      	ldr	r3, [r5, #4]
 8024462:	ea23 0307 	bic.w	r3, r3, r7
 8024466:	606b      	str	r3, [r5, #4]
 8024468:	e784      	b.n	8024374 <_malloc_r+0x478>
 802446a:	007f      	lsls	r7, r7, #1
 802446c:	f108 0804 	add.w	r8, r8, #4
 8024470:	e787      	b.n	8024382 <_malloc_r+0x486>
 8024472:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8024476:	237e      	movs	r3, #126	; 0x7e
 8024478:	e73f      	b.n	80242fa <_malloc_r+0x3fe>
 802447a:	bf00      	nop

0802447c <memchr>:
 802447c:	0783      	lsls	r3, r0, #30
 802447e:	b2c9      	uxtb	r1, r1
 8024480:	b470      	push	{r4, r5, r6}
 8024482:	d012      	beq.n	80244aa <memchr+0x2e>
 8024484:	2a00      	cmp	r2, #0
 8024486:	d03b      	beq.n	8024500 <memchr+0x84>
 8024488:	7803      	ldrb	r3, [r0, #0]
 802448a:	428b      	cmp	r3, r1
 802448c:	d025      	beq.n	80244da <memchr+0x5e>
 802448e:	4603      	mov	r3, r0
 8024490:	3a01      	subs	r2, #1
 8024492:	e006      	b.n	80244a2 <memchr+0x26>
 8024494:	f112 32ff 	adds.w	r2, r2, #4294967295
 8024498:	d31e      	bcc.n	80244d8 <memchr+0x5c>
 802449a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 802449e:	428c      	cmp	r4, r1
 80244a0:	d01b      	beq.n	80244da <memchr+0x5e>
 80244a2:	3001      	adds	r0, #1
 80244a4:	f010 0f03 	tst.w	r0, #3
 80244a8:	d1f4      	bne.n	8024494 <memchr+0x18>
 80244aa:	2a03      	cmp	r2, #3
 80244ac:	bf84      	itt	hi
 80244ae:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 80244b2:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 80244b6:	d812      	bhi.n	80244de <memchr+0x62>
 80244b8:	2a00      	cmp	r2, #0
 80244ba:	d021      	beq.n	8024500 <memchr+0x84>
 80244bc:	7803      	ldrb	r3, [r0, #0]
 80244be:	428b      	cmp	r3, r1
 80244c0:	d00b      	beq.n	80244da <memchr+0x5e>
 80244c2:	1c43      	adds	r3, r0, #1
 80244c4:	1882      	adds	r2, r0, r2
 80244c6:	e003      	b.n	80244d0 <memchr+0x54>
 80244c8:	f813 4b01 	ldrb.w	r4, [r3], #1
 80244cc:	428c      	cmp	r4, r1
 80244ce:	d004      	beq.n	80244da <memchr+0x5e>
 80244d0:	4293      	cmp	r3, r2
 80244d2:	f100 0001 	add.w	r0, r0, #1
 80244d6:	d1f7      	bne.n	80244c8 <memchr+0x4c>
 80244d8:	2000      	movs	r0, #0
 80244da:	bc70      	pop	{r4, r5, r6}
 80244dc:	4770      	bx	lr
 80244de:	4604      	mov	r4, r0
 80244e0:	3004      	adds	r0, #4
 80244e2:	6823      	ldr	r3, [r4, #0]
 80244e4:	4073      	eors	r3, r6
 80244e6:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 80244ea:	ea25 0303 	bic.w	r3, r5, r3
 80244ee:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80244f2:	d103      	bne.n	80244fc <memchr+0x80>
 80244f4:	3a04      	subs	r2, #4
 80244f6:	2a03      	cmp	r2, #3
 80244f8:	d8f1      	bhi.n	80244de <memchr+0x62>
 80244fa:	e7dd      	b.n	80244b8 <memchr+0x3c>
 80244fc:	4620      	mov	r0, r4
 80244fe:	e7db      	b.n	80244b8 <memchr+0x3c>
 8024500:	4610      	mov	r0, r2
 8024502:	e7ea      	b.n	80244da <memchr+0x5e>

08024504 <__malloc_lock>:
 8024504:	4770      	bx	lr
 8024506:	bf00      	nop

08024508 <__malloc_unlock>:
 8024508:	4770      	bx	lr
 802450a:	bf00      	nop

0802450c <_Balloc>:
 802450c:	b570      	push	{r4, r5, r6, lr}
 802450e:	4606      	mov	r6, r0
 8024510:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8024512:	460d      	mov	r5, r1
 8024514:	b15c      	cbz	r4, 802452e <_Balloc+0x22>
 8024516:	68e3      	ldr	r3, [r4, #12]
 8024518:	b19b      	cbz	r3, 8024542 <_Balloc+0x36>
 802451a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802451e:	b1e0      	cbz	r0, 802455a <_Balloc+0x4e>
 8024520:	6802      	ldr	r2, [r0, #0]
 8024522:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8024526:	2300      	movs	r3, #0
 8024528:	6103      	str	r3, [r0, #16]
 802452a:	60c3      	str	r3, [r0, #12]
 802452c:	bd70      	pop	{r4, r5, r6, pc}
 802452e:	2010      	movs	r0, #16
 8024530:	f7ff fcd4 	bl	8023edc <malloc>
 8024534:	2300      	movs	r3, #0
 8024536:	4604      	mov	r4, r0
 8024538:	6270      	str	r0, [r6, #36]	; 0x24
 802453a:	6043      	str	r3, [r0, #4]
 802453c:	6083      	str	r3, [r0, #8]
 802453e:	6003      	str	r3, [r0, #0]
 8024540:	60c3      	str	r3, [r0, #12]
 8024542:	4630      	mov	r0, r6
 8024544:	2104      	movs	r1, #4
 8024546:	2221      	movs	r2, #33	; 0x21
 8024548:	f001 fb1a 	bl	8025b80 <_calloc_r>
 802454c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802454e:	60e0      	str	r0, [r4, #12]
 8024550:	68db      	ldr	r3, [r3, #12]
 8024552:	2b00      	cmp	r3, #0
 8024554:	d1e1      	bne.n	802451a <_Balloc+0xe>
 8024556:	4618      	mov	r0, r3
 8024558:	bd70      	pop	{r4, r5, r6, pc}
 802455a:	2401      	movs	r4, #1
 802455c:	4630      	mov	r0, r6
 802455e:	4621      	mov	r1, r4
 8024560:	fa04 f405 	lsl.w	r4, r4, r5
 8024564:	1d62      	adds	r2, r4, #5
 8024566:	0092      	lsls	r2, r2, #2
 8024568:	f001 fb0a 	bl	8025b80 <_calloc_r>
 802456c:	2800      	cmp	r0, #0
 802456e:	d0f3      	beq.n	8024558 <_Balloc+0x4c>
 8024570:	6045      	str	r5, [r0, #4]
 8024572:	6084      	str	r4, [r0, #8]
 8024574:	e7d7      	b.n	8024526 <_Balloc+0x1a>
 8024576:	bf00      	nop

08024578 <_Bfree>:
 8024578:	b530      	push	{r4, r5, lr}
 802457a:	4604      	mov	r4, r0
 802457c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802457e:	b083      	sub	sp, #12
 8024580:	b155      	cbz	r5, 8024598 <_Bfree+0x20>
 8024582:	b139      	cbz	r1, 8024594 <_Bfree+0x1c>
 8024584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024586:	684a      	ldr	r2, [r1, #4]
 8024588:	68db      	ldr	r3, [r3, #12]
 802458a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802458e:	6008      	str	r0, [r1, #0]
 8024590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8024594:	b003      	add	sp, #12
 8024596:	bd30      	pop	{r4, r5, pc}
 8024598:	2010      	movs	r0, #16
 802459a:	9101      	str	r1, [sp, #4]
 802459c:	f7ff fc9e 	bl	8023edc <malloc>
 80245a0:	9901      	ldr	r1, [sp, #4]
 80245a2:	6260      	str	r0, [r4, #36]	; 0x24
 80245a4:	6045      	str	r5, [r0, #4]
 80245a6:	6085      	str	r5, [r0, #8]
 80245a8:	6005      	str	r5, [r0, #0]
 80245aa:	60c5      	str	r5, [r0, #12]
 80245ac:	e7e9      	b.n	8024582 <_Bfree+0xa>
 80245ae:	bf00      	nop

080245b0 <__multadd>:
 80245b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80245b4:	460c      	mov	r4, r1
 80245b6:	4605      	mov	r5, r0
 80245b8:	690e      	ldr	r6, [r1, #16]
 80245ba:	f101 0014 	add.w	r0, r1, #20
 80245be:	b082      	sub	sp, #8
 80245c0:	2100      	movs	r1, #0
 80245c2:	6807      	ldr	r7, [r0, #0]
 80245c4:	3101      	adds	r1, #1
 80245c6:	fa1f fc87 	uxth.w	ip, r7
 80245ca:	0c3f      	lsrs	r7, r7, #16
 80245cc:	fb02 330c 	mla	r3, r2, ip, r3
 80245d0:	fb02 f707 	mul.w	r7, r2, r7
 80245d4:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80245d8:	fa1f fc83 	uxth.w	ip, r3
 80245dc:	0c3b      	lsrs	r3, r7, #16
 80245de:	428e      	cmp	r6, r1
 80245e0:	ea4f 4807 	mov.w	r8, r7, lsl #16
 80245e4:	eb08 070c 	add.w	r7, r8, ip
 80245e8:	f840 7b04 	str.w	r7, [r0], #4
 80245ec:	dce9      	bgt.n	80245c2 <__multadd+0x12>
 80245ee:	b13b      	cbz	r3, 8024600 <__multadd+0x50>
 80245f0:	68a2      	ldr	r2, [r4, #8]
 80245f2:	4296      	cmp	r6, r2
 80245f4:	da08      	bge.n	8024608 <__multadd+0x58>
 80245f6:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 80245fa:	3601      	adds	r6, #1
 80245fc:	6126      	str	r6, [r4, #16]
 80245fe:	6153      	str	r3, [r2, #20]
 8024600:	4620      	mov	r0, r4
 8024602:	b002      	add	sp, #8
 8024604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024608:	6861      	ldr	r1, [r4, #4]
 802460a:	4628      	mov	r0, r5
 802460c:	9301      	str	r3, [sp, #4]
 802460e:	3101      	adds	r1, #1
 8024610:	f7ff ff7c 	bl	802450c <_Balloc>
 8024614:	6922      	ldr	r2, [r4, #16]
 8024616:	f104 010c 	add.w	r1, r4, #12
 802461a:	3202      	adds	r2, #2
 802461c:	0092      	lsls	r2, r2, #2
 802461e:	4607      	mov	r7, r0
 8024620:	300c      	adds	r0, #12
 8024622:	f7fc fee9 	bl	80213f8 <memcpy>
 8024626:	4621      	mov	r1, r4
 8024628:	4628      	mov	r0, r5
 802462a:	463c      	mov	r4, r7
 802462c:	f7ff ffa4 	bl	8024578 <_Bfree>
 8024630:	9b01      	ldr	r3, [sp, #4]
 8024632:	e7e0      	b.n	80245f6 <__multadd+0x46>

08024634 <__s2b>:
 8024634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024638:	f648 6439 	movw	r4, #36409	; 0x8e39
 802463c:	461e      	mov	r6, r3
 802463e:	f6c3 04e3 	movt	r4, #14563	; 0x38e3
 8024642:	3308      	adds	r3, #8
 8024644:	4688      	mov	r8, r1
 8024646:	4605      	mov	r5, r0
 8024648:	4617      	mov	r7, r2
 802464a:	fb84 1403 	smull	r1, r4, r4, r3
 802464e:	17db      	asrs	r3, r3, #31
 8024650:	2100      	movs	r1, #0
 8024652:	ebc3 0364 	rsb	r3, r3, r4, asr #1
 8024656:	2b01      	cmp	r3, #1
 8024658:	dd05      	ble.n	8024666 <__s2b+0x32>
 802465a:	2201      	movs	r2, #1
 802465c:	2100      	movs	r1, #0
 802465e:	0052      	lsls	r2, r2, #1
 8024660:	3101      	adds	r1, #1
 8024662:	4293      	cmp	r3, r2
 8024664:	dcfb      	bgt.n	802465e <__s2b+0x2a>
 8024666:	4628      	mov	r0, r5
 8024668:	f7ff ff50 	bl	802450c <_Balloc>
 802466c:	9b08      	ldr	r3, [sp, #32]
 802466e:	6143      	str	r3, [r0, #20]
 8024670:	2301      	movs	r3, #1
 8024672:	2f09      	cmp	r7, #9
 8024674:	4601      	mov	r1, r0
 8024676:	6103      	str	r3, [r0, #16]
 8024678:	dd21      	ble.n	80246be <__s2b+0x8a>
 802467a:	f108 0909 	add.w	r9, r8, #9
 802467e:	2409      	movs	r4, #9
 8024680:	f818 3004 	ldrb.w	r3, [r8, r4]
 8024684:	220a      	movs	r2, #10
 8024686:	4628      	mov	r0, r5
 8024688:	3401      	adds	r4, #1
 802468a:	3b30      	subs	r3, #48	; 0x30
 802468c:	f7ff ff90 	bl	80245b0 <__multadd>
 8024690:	42bc      	cmp	r4, r7
 8024692:	4601      	mov	r1, r0
 8024694:	d1f4      	bne.n	8024680 <__s2b+0x4c>
 8024696:	eb09 0804 	add.w	r8, r9, r4
 802469a:	f1a8 0808 	sub.w	r8, r8, #8
 802469e:	42a6      	cmp	r6, r4
 80246a0:	dd0a      	ble.n	80246b8 <__s2b+0x84>
 80246a2:	f818 3b01 	ldrb.w	r3, [r8], #1
 80246a6:	220a      	movs	r2, #10
 80246a8:	4628      	mov	r0, r5
 80246aa:	3401      	adds	r4, #1
 80246ac:	3b30      	subs	r3, #48	; 0x30
 80246ae:	f7ff ff7f 	bl	80245b0 <__multadd>
 80246b2:	42b4      	cmp	r4, r6
 80246b4:	4601      	mov	r1, r0
 80246b6:	d1f4      	bne.n	80246a2 <__s2b+0x6e>
 80246b8:	4608      	mov	r0, r1
 80246ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80246be:	f108 080a 	add.w	r8, r8, #10
 80246c2:	2409      	movs	r4, #9
 80246c4:	e7eb      	b.n	802469e <__s2b+0x6a>
 80246c6:	bf00      	nop

080246c8 <__hi0bits>:
 80246c8:	4603      	mov	r3, r0
 80246ca:	2000      	movs	r0, #0
 80246cc:	0c1a      	lsrs	r2, r3, #16
 80246ce:	d101      	bne.n	80246d4 <__hi0bits+0xc>
 80246d0:	041b      	lsls	r3, r3, #16
 80246d2:	2010      	movs	r0, #16
 80246d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80246d8:	d101      	bne.n	80246de <__hi0bits+0x16>
 80246da:	3008      	adds	r0, #8
 80246dc:	021b      	lsls	r3, r3, #8
 80246de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80246e2:	d101      	bne.n	80246e8 <__hi0bits+0x20>
 80246e4:	3004      	adds	r0, #4
 80246e6:	011b      	lsls	r3, r3, #4
 80246e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80246ec:	d101      	bne.n	80246f2 <__hi0bits+0x2a>
 80246ee:	3002      	adds	r0, #2
 80246f0:	009b      	lsls	r3, r3, #2
 80246f2:	2b00      	cmp	r3, #0
 80246f4:	db02      	blt.n	80246fc <__hi0bits+0x34>
 80246f6:	005b      	lsls	r3, r3, #1
 80246f8:	d401      	bmi.n	80246fe <__hi0bits+0x36>
 80246fa:	2020      	movs	r0, #32
 80246fc:	4770      	bx	lr
 80246fe:	3001      	adds	r0, #1
 8024700:	4770      	bx	lr
 8024702:	bf00      	nop

08024704 <__lo0bits>:
 8024704:	6803      	ldr	r3, [r0, #0]
 8024706:	4602      	mov	r2, r0
 8024708:	f013 0007 	ands.w	r0, r3, #7
 802470c:	d007      	beq.n	802471e <__lo0bits+0x1a>
 802470e:	07d9      	lsls	r1, r3, #31
 8024710:	d41f      	bmi.n	8024752 <__lo0bits+0x4e>
 8024712:	0798      	lsls	r0, r3, #30
 8024714:	d41f      	bmi.n	8024756 <__lo0bits+0x52>
 8024716:	089b      	lsrs	r3, r3, #2
 8024718:	2002      	movs	r0, #2
 802471a:	6013      	str	r3, [r2, #0]
 802471c:	4770      	bx	lr
 802471e:	b299      	uxth	r1, r3
 8024720:	b909      	cbnz	r1, 8024726 <__lo0bits+0x22>
 8024722:	0c1b      	lsrs	r3, r3, #16
 8024724:	2010      	movs	r0, #16
 8024726:	f013 0fff 	tst.w	r3, #255	; 0xff
 802472a:	d101      	bne.n	8024730 <__lo0bits+0x2c>
 802472c:	3008      	adds	r0, #8
 802472e:	0a1b      	lsrs	r3, r3, #8
 8024730:	0719      	lsls	r1, r3, #28
 8024732:	d101      	bne.n	8024738 <__lo0bits+0x34>
 8024734:	3004      	adds	r0, #4
 8024736:	091b      	lsrs	r3, r3, #4
 8024738:	0799      	lsls	r1, r3, #30
 802473a:	d101      	bne.n	8024740 <__lo0bits+0x3c>
 802473c:	3002      	adds	r0, #2
 802473e:	089b      	lsrs	r3, r3, #2
 8024740:	07d9      	lsls	r1, r3, #31
 8024742:	d404      	bmi.n	802474e <__lo0bits+0x4a>
 8024744:	085b      	lsrs	r3, r3, #1
 8024746:	d101      	bne.n	802474c <__lo0bits+0x48>
 8024748:	2020      	movs	r0, #32
 802474a:	4770      	bx	lr
 802474c:	3001      	adds	r0, #1
 802474e:	6013      	str	r3, [r2, #0]
 8024750:	4770      	bx	lr
 8024752:	2000      	movs	r0, #0
 8024754:	4770      	bx	lr
 8024756:	085b      	lsrs	r3, r3, #1
 8024758:	2001      	movs	r0, #1
 802475a:	6013      	str	r3, [r2, #0]
 802475c:	4770      	bx	lr
 802475e:	bf00      	nop

08024760 <__i2b>:
 8024760:	b510      	push	{r4, lr}
 8024762:	460c      	mov	r4, r1
 8024764:	2101      	movs	r1, #1
 8024766:	f7ff fed1 	bl	802450c <_Balloc>
 802476a:	2201      	movs	r2, #1
 802476c:	6144      	str	r4, [r0, #20]
 802476e:	6102      	str	r2, [r0, #16]
 8024770:	bd10      	pop	{r4, pc}
 8024772:	bf00      	nop

08024774 <__multiply>:
 8024774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024778:	4692      	mov	sl, r2
 802477a:	690d      	ldr	r5, [r1, #16]
 802477c:	460c      	mov	r4, r1
 802477e:	6916      	ldr	r6, [r2, #16]
 8024780:	b087      	sub	sp, #28
 8024782:	42b5      	cmp	r5, r6
 8024784:	bfbf      	itttt	lt
 8024786:	4654      	movlt	r4, sl
 8024788:	462a      	movlt	r2, r5
 802478a:	4635      	movlt	r5, r6
 802478c:	4616      	movlt	r6, r2
 802478e:	68a3      	ldr	r3, [r4, #8]
 8024790:	bfb8      	it	lt
 8024792:	468a      	movlt	sl, r1
 8024794:	eb05 0b06 	add.w	fp, r5, r6
 8024798:	6861      	ldr	r1, [r4, #4]
 802479a:	459b      	cmp	fp, r3
 802479c:	bfc8      	it	gt
 802479e:	3101      	addgt	r1, #1
 80247a0:	f7ff feb4 	bl	802450c <_Balloc>
 80247a4:	f10b 0104 	add.w	r1, fp, #4
 80247a8:	9105      	str	r1, [sp, #20]
 80247aa:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80247ae:	f100 0914 	add.w	r9, r0, #20
 80247b2:	3304      	adds	r3, #4
 80247b4:	9003      	str	r0, [sp, #12]
 80247b6:	4599      	cmp	r9, r3
 80247b8:	9304      	str	r3, [sp, #16]
 80247ba:	d206      	bcs.n	80247ca <__multiply+0x56>
 80247bc:	9904      	ldr	r1, [sp, #16]
 80247be:	464b      	mov	r3, r9
 80247c0:	2200      	movs	r2, #0
 80247c2:	f843 2b04 	str.w	r2, [r3], #4
 80247c6:	4299      	cmp	r1, r3
 80247c8:	d8fb      	bhi.n	80247c2 <__multiply+0x4e>
 80247ca:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 80247ce:	f10a 0a14 	add.w	sl, sl, #20
 80247d2:	3614      	adds	r6, #20
 80247d4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80247d8:	3414      	adds	r4, #20
 80247da:	45b2      	cmp	sl, r6
 80247dc:	9601      	str	r6, [sp, #4]
 80247de:	f105 0814 	add.w	r8, r5, #20
 80247e2:	9402      	str	r4, [sp, #8]
 80247e4:	d24a      	bcs.n	802487c <__multiply+0x108>
 80247e6:	f85a 5b04 	ldr.w	r5, [sl], #4
 80247ea:	b2ac      	uxth	r4, r5
 80247ec:	b1ec      	cbz	r4, 802482a <__multiply+0xb6>
 80247ee:	9a02      	ldr	r2, [sp, #8]
 80247f0:	464b      	mov	r3, r9
 80247f2:	2500      	movs	r5, #0
 80247f4:	6818      	ldr	r0, [r3, #0]
 80247f6:	461f      	mov	r7, r3
 80247f8:	f852 1b04 	ldr.w	r1, [r2], #4
 80247fc:	b286      	uxth	r6, r0
 80247fe:	0c00      	lsrs	r0, r0, #16
 8024800:	1976      	adds	r6, r6, r5
 8024802:	fa1f fc81 	uxth.w	ip, r1
 8024806:	0c09      	lsrs	r1, r1, #16
 8024808:	fb04 660c 	mla	r6, r4, ip, r6
 802480c:	fb04 0001 	mla	r0, r4, r1, r0
 8024810:	eb00 4516 	add.w	r5, r0, r6, lsr #16
 8024814:	b2b6      	uxth	r6, r6
 8024816:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 802481a:	0c2d      	lsrs	r5, r5, #16
 802481c:	4590      	cmp	r8, r2
 802481e:	f843 6b04 	str.w	r6, [r3], #4
 8024822:	d8e7      	bhi.n	80247f4 <__multiply+0x80>
 8024824:	607d      	str	r5, [r7, #4]
 8024826:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 802482a:	0c2d      	lsrs	r5, r5, #16
 802482c:	d021      	beq.n	8024872 <__multiply+0xfe>
 802482e:	f8d9 1000 	ldr.w	r1, [r9]
 8024832:	46cc      	mov	ip, r9
 8024834:	9b02      	ldr	r3, [sp, #8]
 8024836:	464e      	mov	r6, r9
 8024838:	4608      	mov	r0, r1
 802483a:	2700      	movs	r7, #0
 802483c:	e000      	b.n	8024840 <__multiply+0xcc>
 802483e:	4616      	mov	r6, r2
 8024840:	881c      	ldrh	r4, [r3, #0]
 8024842:	eb07 4710 	add.w	r7, r7, r0, lsr #16
 8024846:	4632      	mov	r2, r6
 8024848:	b289      	uxth	r1, r1
 802484a:	fb05 7704 	mla	r7, r5, r4, r7
 802484e:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8024852:	f842 1b04 	str.w	r1, [r2], #4
 8024856:	f853 1b04 	ldr.w	r1, [r3], #4
 802485a:	f85c 0f04 	ldr.w	r0, [ip, #4]!
 802485e:	0c09      	lsrs	r1, r1, #16
 8024860:	b284      	uxth	r4, r0
 8024862:	fb05 4101 	mla	r1, r5, r1, r4
 8024866:	eb01 4117 	add.w	r1, r1, r7, lsr #16
 802486a:	0c0f      	lsrs	r7, r1, #16
 802486c:	4598      	cmp	r8, r3
 802486e:	d8e6      	bhi.n	802483e <__multiply+0xca>
 8024870:	6071      	str	r1, [r6, #4]
 8024872:	9a01      	ldr	r2, [sp, #4]
 8024874:	f109 0904 	add.w	r9, r9, #4
 8024878:	4552      	cmp	r2, sl
 802487a:	d8b4      	bhi.n	80247e6 <__multiply+0x72>
 802487c:	f1bb 0f00 	cmp.w	fp, #0
 8024880:	dd0e      	ble.n	80248a0 <__multiply+0x12c>
 8024882:	9905      	ldr	r1, [sp, #20]
 8024884:	9a03      	ldr	r2, [sp, #12]
 8024886:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802488a:	b94b      	cbnz	r3, 80248a0 <__multiply+0x12c>
 802488c:	9904      	ldr	r1, [sp, #16]
 802488e:	465a      	mov	r2, fp
 8024890:	1f0b      	subs	r3, r1, #4
 8024892:	e002      	b.n	802489a <__multiply+0x126>
 8024894:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8024898:	b909      	cbnz	r1, 802489e <__multiply+0x12a>
 802489a:	3a01      	subs	r2, #1
 802489c:	d1fa      	bne.n	8024894 <__multiply+0x120>
 802489e:	4693      	mov	fp, r2
 80248a0:	9a03      	ldr	r2, [sp, #12]
 80248a2:	4610      	mov	r0, r2
 80248a4:	f8c2 b010 	str.w	fp, [r2, #16]
 80248a8:	b007      	add	sp, #28
 80248aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248ae:	bf00      	nop

080248b0 <__pow5mult>:
 80248b0:	f012 0303 	ands.w	r3, r2, #3
 80248b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80248b8:	4615      	mov	r5, r2
 80248ba:	4604      	mov	r4, r0
 80248bc:	4688      	mov	r8, r1
 80248be:	d127      	bne.n	8024910 <__pow5mult+0x60>
 80248c0:	10ad      	asrs	r5, r5, #2
 80248c2:	d019      	beq.n	80248f8 <__pow5mult+0x48>
 80248c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80248c6:	2e00      	cmp	r6, #0
 80248c8:	d02e      	beq.n	8024928 <__pow5mult+0x78>
 80248ca:	68b7      	ldr	r7, [r6, #8]
 80248cc:	b92f      	cbnz	r7, 80248da <__pow5mult+0x2a>
 80248ce:	e035      	b.n	802493c <__pow5mult+0x8c>
 80248d0:	106d      	asrs	r5, r5, #1
 80248d2:	d011      	beq.n	80248f8 <__pow5mult+0x48>
 80248d4:	683e      	ldr	r6, [r7, #0]
 80248d6:	b196      	cbz	r6, 80248fe <__pow5mult+0x4e>
 80248d8:	4637      	mov	r7, r6
 80248da:	07e8      	lsls	r0, r5, #31
 80248dc:	d5f8      	bpl.n	80248d0 <__pow5mult+0x20>
 80248de:	4641      	mov	r1, r8
 80248e0:	463a      	mov	r2, r7
 80248e2:	4620      	mov	r0, r4
 80248e4:	f7ff ff46 	bl	8024774 <__multiply>
 80248e8:	4641      	mov	r1, r8
 80248ea:	4606      	mov	r6, r0
 80248ec:	4620      	mov	r0, r4
 80248ee:	f7ff fe43 	bl	8024578 <_Bfree>
 80248f2:	106d      	asrs	r5, r5, #1
 80248f4:	46b0      	mov	r8, r6
 80248f6:	d1ed      	bne.n	80248d4 <__pow5mult+0x24>
 80248f8:	4640      	mov	r0, r8
 80248fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80248fe:	4639      	mov	r1, r7
 8024900:	463a      	mov	r2, r7
 8024902:	4620      	mov	r0, r4
 8024904:	f7ff ff36 	bl	8024774 <__multiply>
 8024908:	6038      	str	r0, [r7, #0]
 802490a:	4607      	mov	r7, r0
 802490c:	6006      	str	r6, [r0, #0]
 802490e:	e7e4      	b.n	80248da <__pow5mult+0x2a>
 8024910:	f64e 2298 	movw	r2, #60056	; 0xea98
 8024914:	1e5e      	subs	r6, r3, #1
 8024916:	f6c0 0202 	movt	r2, #2050	; 0x802
 802491a:	2300      	movs	r3, #0
 802491c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8024920:	f7ff fe46 	bl	80245b0 <__multadd>
 8024924:	4680      	mov	r8, r0
 8024926:	e7cb      	b.n	80248c0 <__pow5mult+0x10>
 8024928:	2010      	movs	r0, #16
 802492a:	f7ff fad7 	bl	8023edc <malloc>
 802492e:	2300      	movs	r3, #0
 8024930:	4606      	mov	r6, r0
 8024932:	6260      	str	r0, [r4, #36]	; 0x24
 8024934:	6043      	str	r3, [r0, #4]
 8024936:	6083      	str	r3, [r0, #8]
 8024938:	6003      	str	r3, [r0, #0]
 802493a:	60c3      	str	r3, [r0, #12]
 802493c:	4620      	mov	r0, r4
 802493e:	f240 2171 	movw	r1, #625	; 0x271
 8024942:	f7ff ff0d 	bl	8024760 <__i2b>
 8024946:	2300      	movs	r3, #0
 8024948:	60b0      	str	r0, [r6, #8]
 802494a:	4607      	mov	r7, r0
 802494c:	6003      	str	r3, [r0, #0]
 802494e:	e7c4      	b.n	80248da <__pow5mult+0x2a>

08024950 <__lshift>:
 8024950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024954:	4690      	mov	r8, r2
 8024956:	690a      	ldr	r2, [r1, #16]
 8024958:	460c      	mov	r4, r1
 802495a:	ea4f 1668 	mov.w	r6, r8, asr #5
 802495e:	688b      	ldr	r3, [r1, #8]
 8024960:	eb06 0a02 	add.w	sl, r6, r2
 8024964:	4681      	mov	r9, r0
 8024966:	f10a 0501 	add.w	r5, sl, #1
 802496a:	6849      	ldr	r1, [r1, #4]
 802496c:	429d      	cmp	r5, r3
 802496e:	dd03      	ble.n	8024978 <__lshift+0x28>
 8024970:	005b      	lsls	r3, r3, #1
 8024972:	3101      	adds	r1, #1
 8024974:	429d      	cmp	r5, r3
 8024976:	dcfb      	bgt.n	8024970 <__lshift+0x20>
 8024978:	4648      	mov	r0, r9
 802497a:	f7ff fdc7 	bl	802450c <_Balloc>
 802497e:	2e00      	cmp	r6, #0
 8024980:	4607      	mov	r7, r0
 8024982:	f100 0314 	add.w	r3, r0, #20
 8024986:	dd09      	ble.n	802499c <__lshift+0x4c>
 8024988:	2200      	movs	r2, #0
 802498a:	4611      	mov	r1, r2
 802498c:	3201      	adds	r2, #1
 802498e:	f843 1b04 	str.w	r1, [r3], #4
 8024992:	42b2      	cmp	r2, r6
 8024994:	d1fa      	bne.n	802498c <__lshift+0x3c>
 8024996:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 802499a:	3314      	adds	r3, #20
 802499c:	6926      	ldr	r6, [r4, #16]
 802499e:	f104 0214 	add.w	r2, r4, #20
 80249a2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80249a6:	3614      	adds	r6, #20
 80249a8:	f018 081f 	ands.w	r8, r8, #31
 80249ac:	d020      	beq.n	80249f0 <__lshift+0xa0>
 80249ae:	f1c8 0e20 	rsb	lr, r8, #32
 80249b2:	2000      	movs	r0, #0
 80249b4:	e000      	b.n	80249b8 <__lshift+0x68>
 80249b6:	460b      	mov	r3, r1
 80249b8:	f8d2 c000 	ldr.w	ip, [r2]
 80249bc:	4619      	mov	r1, r3
 80249be:	fa0c fc08 	lsl.w	ip, ip, r8
 80249c2:	ea4c 0000 	orr.w	r0, ip, r0
 80249c6:	f841 0b04 	str.w	r0, [r1], #4
 80249ca:	f852 0b04 	ldr.w	r0, [r2], #4
 80249ce:	4296      	cmp	r6, r2
 80249d0:	fa20 f00e 	lsr.w	r0, r0, lr
 80249d4:	d8ef      	bhi.n	80249b6 <__lshift+0x66>
 80249d6:	6058      	str	r0, [r3, #4]
 80249d8:	b108      	cbz	r0, 80249de <__lshift+0x8e>
 80249da:	f10a 0502 	add.w	r5, sl, #2
 80249de:	4648      	mov	r0, r9
 80249e0:	3d01      	subs	r5, #1
 80249e2:	4621      	mov	r1, r4
 80249e4:	613d      	str	r5, [r7, #16]
 80249e6:	f7ff fdc7 	bl	8024578 <_Bfree>
 80249ea:	4638      	mov	r0, r7
 80249ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80249f0:	f852 1b04 	ldr.w	r1, [r2], #4
 80249f4:	4296      	cmp	r6, r2
 80249f6:	f843 1b04 	str.w	r1, [r3], #4
 80249fa:	d9f0      	bls.n	80249de <__lshift+0x8e>
 80249fc:	f852 1b04 	ldr.w	r1, [r2], #4
 8024a00:	4296      	cmp	r6, r2
 8024a02:	f843 1b04 	str.w	r1, [r3], #4
 8024a06:	d8f3      	bhi.n	80249f0 <__lshift+0xa0>
 8024a08:	e7e9      	b.n	80249de <__lshift+0x8e>
 8024a0a:	bf00      	nop

08024a0c <__mcmp>:
 8024a0c:	4603      	mov	r3, r0
 8024a0e:	690a      	ldr	r2, [r1, #16]
 8024a10:	6900      	ldr	r0, [r0, #16]
 8024a12:	b430      	push	{r4, r5}
 8024a14:	1a80      	subs	r0, r0, r2
 8024a16:	d110      	bne.n	8024a3a <__mcmp+0x2e>
 8024a18:	3204      	adds	r2, #4
 8024a1a:	f103 0514 	add.w	r5, r3, #20
 8024a1e:	0092      	lsls	r2, r2, #2
 8024a20:	189b      	adds	r3, r3, r2
 8024a22:	1889      	adds	r1, r1, r2
 8024a24:	3304      	adds	r3, #4
 8024a26:	3104      	adds	r1, #4
 8024a28:	f853 4c04 	ldr.w	r4, [r3, #-4]
 8024a2c:	3b04      	subs	r3, #4
 8024a2e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8024a32:	4294      	cmp	r4, r2
 8024a34:	d103      	bne.n	8024a3e <__mcmp+0x32>
 8024a36:	429d      	cmp	r5, r3
 8024a38:	d3f6      	bcc.n	8024a28 <__mcmp+0x1c>
 8024a3a:	bc30      	pop	{r4, r5}
 8024a3c:	4770      	bx	lr
 8024a3e:	bf38      	it	cc
 8024a40:	f04f 30ff 	movcc.w	r0, #4294967295
 8024a44:	d3f9      	bcc.n	8024a3a <__mcmp+0x2e>
 8024a46:	2001      	movs	r0, #1
 8024a48:	e7f7      	b.n	8024a3a <__mcmp+0x2e>
 8024a4a:	bf00      	nop

08024a4c <__mdiff>:
 8024a4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a50:	460c      	mov	r4, r1
 8024a52:	4606      	mov	r6, r0
 8024a54:	4611      	mov	r1, r2
 8024a56:	4620      	mov	r0, r4
 8024a58:	4615      	mov	r5, r2
 8024a5a:	f7ff ffd7 	bl	8024a0c <__mcmp>
 8024a5e:	1e07      	subs	r7, r0, #0
 8024a60:	d05b      	beq.n	8024b1a <__mdiff+0xce>
 8024a62:	db55      	blt.n	8024b10 <__mdiff+0xc4>
 8024a64:	2700      	movs	r7, #0
 8024a66:	4630      	mov	r0, r6
 8024a68:	6861      	ldr	r1, [r4, #4]
 8024a6a:	f7ff fd4f 	bl	802450c <_Balloc>
 8024a6e:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024a72:	692b      	ldr	r3, [r5, #16]
 8024a74:	f104 0c14 	add.w	ip, r4, #20
 8024a78:	f105 0914 	add.w	r9, r5, #20
 8024a7c:	2600      	movs	r6, #0
 8024a7e:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8024a82:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8024a86:	3414      	adds	r4, #20
 8024a88:	3514      	adds	r5, #20
 8024a8a:	f100 0a14 	add.w	sl, r0, #20
 8024a8e:	60c7      	str	r7, [r0, #12]
 8024a90:	f85c 7b04 	ldr.w	r7, [ip], #4
 8024a94:	4653      	mov	r3, sl
 8024a96:	f859 ab04 	ldr.w	sl, [r9], #4
 8024a9a:	4662      	mov	r2, ip
 8024a9c:	b2b9      	uxth	r1, r7
 8024a9e:	1989      	adds	r1, r1, r6
 8024aa0:	fa1f fb8a 	uxth.w	fp, sl
 8024aa4:	ebcb 0101 	rsb	r1, fp, r1
 8024aa8:	ea4f 461a 	mov.w	r6, sl, lsr #16
 8024aac:	ebc6 4617 	rsb	r6, r6, r7, lsr #16
 8024ab0:	eb06 4621 	add.w	r6, r6, r1, asr #16
 8024ab4:	b289      	uxth	r1, r1
 8024ab6:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8024aba:	1436      	asrs	r6, r6, #16
 8024abc:	454d      	cmp	r5, r9
 8024abe:	f843 1b04 	str.w	r1, [r3], #4
 8024ac2:	469a      	mov	sl, r3
 8024ac4:	d8e4      	bhi.n	8024a90 <__mdiff+0x44>
 8024ac6:	4564      	cmp	r4, ip
 8024ac8:	461f      	mov	r7, r3
 8024aca:	d915      	bls.n	8024af8 <__mdiff+0xac>
 8024acc:	f852 5b04 	ldr.w	r5, [r2], #4
 8024ad0:	b2a9      	uxth	r1, r5
 8024ad2:	0c2d      	lsrs	r5, r5, #16
 8024ad4:	198e      	adds	r6, r1, r6
 8024ad6:	eb05 4526 	add.w	r5, r5, r6, asr #16
 8024ada:	b2b6      	uxth	r6, r6
 8024adc:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
 8024ae0:	142e      	asrs	r6, r5, #16
 8024ae2:	4294      	cmp	r4, r2
 8024ae4:	f843 1b04 	str.w	r1, [r3], #4
 8024ae8:	d8f0      	bhi.n	8024acc <__mdiff+0x80>
 8024aea:	ea6f 030c 	mvn.w	r3, ip
 8024aee:	191b      	adds	r3, r3, r4
 8024af0:	f023 0303 	bic.w	r3, r3, #3
 8024af4:	3304      	adds	r3, #4
 8024af6:	18fb      	adds	r3, r7, r3
 8024af8:	b931      	cbnz	r1, 8024b08 <__mdiff+0xbc>
 8024afa:	3b04      	subs	r3, #4
 8024afc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8024b00:	f108 38ff 	add.w	r8, r8, #4294967295
 8024b04:	2a00      	cmp	r2, #0
 8024b06:	d0f9      	beq.n	8024afc <__mdiff+0xb0>
 8024b08:	f8c0 8010 	str.w	r8, [r0, #16]
 8024b0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b10:	4623      	mov	r3, r4
 8024b12:	2701      	movs	r7, #1
 8024b14:	462c      	mov	r4, r5
 8024b16:	461d      	mov	r5, r3
 8024b18:	e7a5      	b.n	8024a66 <__mdiff+0x1a>
 8024b1a:	4630      	mov	r0, r6
 8024b1c:	4639      	mov	r1, r7
 8024b1e:	f7ff fcf5 	bl	802450c <_Balloc>
 8024b22:	2301      	movs	r3, #1
 8024b24:	6147      	str	r7, [r0, #20]
 8024b26:	6103      	str	r3, [r0, #16]
 8024b28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024b2c <__ulp>:
 8024b2c:	2300      	movs	r3, #0
 8024b2e:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8024b32:	400b      	ands	r3, r1
 8024b34:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8024b38:	2b00      	cmp	r3, #0
 8024b3a:	dd02      	ble.n	8024b42 <__ulp+0x16>
 8024b3c:	4619      	mov	r1, r3
 8024b3e:	2000      	movs	r0, #0
 8024b40:	4770      	bx	lr
 8024b42:	425b      	negs	r3, r3
 8024b44:	2100      	movs	r1, #0
 8024b46:	151b      	asrs	r3, r3, #20
 8024b48:	2b13      	cmp	r3, #19
 8024b4a:	dd0b      	ble.n	8024b64 <__ulp+0x38>
 8024b4c:	2b32      	cmp	r3, #50	; 0x32
 8024b4e:	dd02      	ble.n	8024b56 <__ulp+0x2a>
 8024b50:	2301      	movs	r3, #1
 8024b52:	4618      	mov	r0, r3
 8024b54:	4770      	bx	lr
 8024b56:	2201      	movs	r2, #1
 8024b58:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8024b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8024b60:	4618      	mov	r0, r3
 8024b62:	4770      	bx	lr
 8024b64:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8024b68:	2000      	movs	r0, #0
 8024b6a:	fa42 f103 	asr.w	r1, r2, r3
 8024b6e:	4770      	bx	lr

08024b70 <__b2d>:
 8024b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024b74:	f100 0614 	add.w	r6, r0, #20
 8024b78:	6904      	ldr	r4, [r0, #16]
 8024b7a:	460f      	mov	r7, r1
 8024b7c:	3404      	adds	r4, #4
 8024b7e:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8024b82:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8024b86:	46a0      	mov	r8, r4
 8024b88:	4628      	mov	r0, r5
 8024b8a:	f7ff fd9d 	bl	80246c8 <__hi0bits>
 8024b8e:	280a      	cmp	r0, #10
 8024b90:	f1c0 0320 	rsb	r3, r0, #32
 8024b94:	603b      	str	r3, [r7, #0]
 8024b96:	dc18      	bgt.n	8024bca <__b2d+0x5a>
 8024b98:	42a6      	cmp	r6, r4
 8024b9a:	f1c0 010b 	rsb	r1, r0, #11
 8024b9e:	fa25 f701 	lsr.w	r7, r5, r1
 8024ba2:	bf38      	it	cc
 8024ba4:	f854 4c04 	ldrcc.w	r4, [r4, #-4]
 8024ba8:	f047 577e 	orr.w	r7, r7, #1065353216	; 0x3f800000
 8024bac:	f447 03e0 	orr.w	r3, r7, #7340032	; 0x700000
 8024bb0:	bf34      	ite	cc
 8024bb2:	fa24 f101 	lsrcc.w	r1, r4, r1
 8024bb6:	2100      	movcs	r1, #0
 8024bb8:	3015      	adds	r0, #21
 8024bba:	fa05 f500 	lsl.w	r5, r5, r0
 8024bbe:	ea41 0205 	orr.w	r2, r1, r5
 8024bc2:	4610      	mov	r0, r2
 8024bc4:	4619      	mov	r1, r3
 8024bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024bca:	2100      	movs	r1, #0
 8024bcc:	42a6      	cmp	r6, r4
 8024bce:	d202      	bcs.n	8024bd6 <__b2d+0x66>
 8024bd0:	f858 1c04 	ldr.w	r1, [r8, #-4]
 8024bd4:	3c04      	subs	r4, #4
 8024bd6:	f1b0 070b 	subs.w	r7, r0, #11
 8024bda:	bf02      	ittt	eq
 8024bdc:	f045 557e 	orreq.w	r5, r5, #1065353216	; 0x3f800000
 8024be0:	460a      	moveq	r2, r1
 8024be2:	f445 03e0 	orreq.w	r3, r5, #7340032	; 0x700000
 8024be6:	d0ec      	beq.n	8024bc2 <__b2d+0x52>
 8024be8:	42b4      	cmp	r4, r6
 8024bea:	fa05 f507 	lsl.w	r5, r5, r7
 8024bee:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 8024bf2:	f045 557e 	orr.w	r5, r5, #1065353216	; 0x3f800000
 8024bf6:	bf88      	it	hi
 8024bf8:	f854 4c04 	ldrhi.w	r4, [r4, #-4]
 8024bfc:	fa21 fc00 	lsr.w	ip, r1, r0
 8024c00:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
 8024c04:	fa01 f107 	lsl.w	r1, r1, r7
 8024c08:	ea45 030c 	orr.w	r3, r5, ip
 8024c0c:	bf8c      	ite	hi
 8024c0e:	fa24 f000 	lsrhi.w	r0, r4, r0
 8024c12:	2000      	movls	r0, #0
 8024c14:	ea40 0201 	orr.w	r2, r0, r1
 8024c18:	4619      	mov	r1, r3
 8024c1a:	4610      	mov	r0, r2
 8024c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08024c20 <__d2b>:
 8024c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024c24:	b083      	sub	sp, #12
 8024c26:	2101      	movs	r1, #1
 8024c28:	461d      	mov	r5, r3
 8024c2a:	4614      	mov	r4, r2
 8024c2c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024c2e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8024c30:	f7ff fc6c 	bl	802450c <_Balloc>
 8024c34:	f3c5 590a 	ubfx	r9, r5, #20, #11
 8024c38:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 8024c3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8024c40:	9301      	str	r3, [sp, #4]
 8024c42:	4680      	mov	r8, r0
 8024c44:	f1b9 0f00 	cmp.w	r9, #0
 8024c48:	d002      	beq.n	8024c50 <__d2b+0x30>
 8024c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8024c4e:	9301      	str	r3, [sp, #4]
 8024c50:	2c00      	cmp	r4, #0
 8024c52:	d026      	beq.n	8024ca2 <__d2b+0x82>
 8024c54:	a802      	add	r0, sp, #8
 8024c56:	f840 4d08 	str.w	r4, [r0, #-8]!
 8024c5a:	4668      	mov	r0, sp
 8024c5c:	f7ff fd52 	bl	8024704 <__lo0bits>
 8024c60:	9b01      	ldr	r3, [sp, #4]
 8024c62:	2800      	cmp	r0, #0
 8024c64:	d135      	bne.n	8024cd2 <__d2b+0xb2>
 8024c66:	9a00      	ldr	r2, [sp, #0]
 8024c68:	f8c8 2014 	str.w	r2, [r8, #20]
 8024c6c:	2b00      	cmp	r3, #0
 8024c6e:	bf0c      	ite	eq
 8024c70:	2401      	moveq	r4, #1
 8024c72:	2402      	movne	r4, #2
 8024c74:	f8c8 3018 	str.w	r3, [r8, #24]
 8024c78:	f8c8 4010 	str.w	r4, [r8, #16]
 8024c7c:	f1b9 0f00 	cmp.w	r9, #0
 8024c80:	d11d      	bne.n	8024cbe <__d2b+0x9e>
 8024c82:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8024c86:	f5a0 6086 	sub.w	r0, r0, #1072	; 0x430
 8024c8a:	3802      	subs	r0, #2
 8024c8c:	6038      	str	r0, [r7, #0]
 8024c8e:	6918      	ldr	r0, [r3, #16]
 8024c90:	0164      	lsls	r4, r4, #5
 8024c92:	f7ff fd19 	bl	80246c8 <__hi0bits>
 8024c96:	1a24      	subs	r4, r4, r0
 8024c98:	6034      	str	r4, [r6, #0]
 8024c9a:	4640      	mov	r0, r8
 8024c9c:	b003      	add	sp, #12
 8024c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024ca2:	a801      	add	r0, sp, #4
 8024ca4:	f7ff fd2e 	bl	8024704 <__lo0bits>
 8024ca8:	2301      	movs	r3, #1
 8024caa:	461c      	mov	r4, r3
 8024cac:	f8c8 3010 	str.w	r3, [r8, #16]
 8024cb0:	9b01      	ldr	r3, [sp, #4]
 8024cb2:	f8c8 3014 	str.w	r3, [r8, #20]
 8024cb6:	3020      	adds	r0, #32
 8024cb8:	f1b9 0f00 	cmp.w	r9, #0
 8024cbc:	d0e1      	beq.n	8024c82 <__d2b+0x62>
 8024cbe:	f5a9 6986 	sub.w	r9, r9, #1072	; 0x430
 8024cc2:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
 8024cc6:	f1a9 0903 	sub.w	r9, r9, #3
 8024cca:	4448      	add	r0, r9
 8024ccc:	6038      	str	r0, [r7, #0]
 8024cce:	6033      	str	r3, [r6, #0]
 8024cd0:	e7e3      	b.n	8024c9a <__d2b+0x7a>
 8024cd2:	f1c0 0220 	rsb	r2, r0, #32
 8024cd6:	9900      	ldr	r1, [sp, #0]
 8024cd8:	fa03 f202 	lsl.w	r2, r3, r2
 8024cdc:	fa23 f300 	lsr.w	r3, r3, r0
 8024ce0:	430a      	orrs	r2, r1
 8024ce2:	9301      	str	r3, [sp, #4]
 8024ce4:	f8c8 2014 	str.w	r2, [r8, #20]
 8024ce8:	e7c0      	b.n	8024c6c <__d2b+0x4c>
 8024cea:	bf00      	nop

08024cec <__ratio>:
 8024cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cf0:	b083      	sub	sp, #12
 8024cf2:	460c      	mov	r4, r1
 8024cf4:	4669      	mov	r1, sp
 8024cf6:	4605      	mov	r5, r0
 8024cf8:	f7ff ff3a 	bl	8024b70 <__b2d>
 8024cfc:	4606      	mov	r6, r0
 8024cfe:	460f      	mov	r7, r1
 8024d00:	4620      	mov	r0, r4
 8024d02:	a901      	add	r1, sp, #4
 8024d04:	f7ff ff34 	bl	8024b70 <__b2d>
 8024d08:	460b      	mov	r3, r1
 8024d0a:	4602      	mov	r2, r0
 8024d0c:	6929      	ldr	r1, [r5, #16]
 8024d0e:	6920      	ldr	r0, [r4, #16]
 8024d10:	9c00      	ldr	r4, [sp, #0]
 8024d12:	1a09      	subs	r1, r1, r0
 8024d14:	9801      	ldr	r0, [sp, #4]
 8024d16:	0149      	lsls	r1, r1, #5
 8024d18:	1a20      	subs	r0, r4, r0
 8024d1a:	1841      	adds	r1, r0, r1
 8024d1c:	2900      	cmp	r1, #0
 8024d1e:	bfdc      	itt	le
 8024d20:	eba3 5101 	suble.w	r1, r3, r1, lsl #20
 8024d24:	460b      	movle	r3, r1
 8024d26:	dd03      	ble.n	8024d30 <__ratio+0x44>
 8024d28:	0509      	lsls	r1, r1, #20
 8024d2a:	eb01 0907 	add.w	r9, r1, r7
 8024d2e:	464f      	mov	r7, r9
 8024d30:	4630      	mov	r0, r6
 8024d32:	4639      	mov	r1, r7
 8024d34:	f7fb fe78 	bl	8020a28 <__aeabi_ddiv>
 8024d38:	b003      	add	sp, #12
 8024d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d3e:	bf00      	nop

08024d40 <_mprec_log10>:
 8024d40:	2817      	cmp	r0, #23
 8024d42:	b510      	push	{r4, lr}
 8024d44:	4604      	mov	r4, r0
 8024d46:	dd0c      	ble.n	8024d62 <_mprec_log10+0x22>
 8024d48:	2100      	movs	r1, #0
 8024d4a:	2000      	movs	r0, #0
 8024d4c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8024d50:	2300      	movs	r3, #0
 8024d52:	2200      	movs	r2, #0
 8024d54:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8024d58:	f7fb fd3c 	bl	80207d4 <__aeabi_dmul>
 8024d5c:	3c01      	subs	r4, #1
 8024d5e:	d1f7      	bne.n	8024d50 <_mprec_log10+0x10>
 8024d60:	bd10      	pop	{r4, pc}
 8024d62:	f64e 2398 	movw	r3, #60056	; 0xea98
 8024d66:	f6c0 0302 	movt	r3, #2050	; 0x802
 8024d6a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8024d6e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8024d72:	bd10      	pop	{r4, pc}

08024d74 <__copybits>:
 8024d74:	b470      	push	{r4, r5, r6}
 8024d76:	3901      	subs	r1, #1
 8024d78:	6916      	ldr	r6, [r2, #16]
 8024d7a:	f102 0314 	add.w	r3, r2, #20
 8024d7e:	1149      	asrs	r1, r1, #5
 8024d80:	3101      	adds	r1, #1
 8024d82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8024d86:	3614      	adds	r6, #20
 8024d88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8024d8c:	42b3      	cmp	r3, r6
 8024d8e:	d20c      	bcs.n	8024daa <__copybits+0x36>
 8024d90:	4604      	mov	r4, r0
 8024d92:	f853 5b04 	ldr.w	r5, [r3], #4
 8024d96:	429e      	cmp	r6, r3
 8024d98:	f844 5b04 	str.w	r5, [r4], #4
 8024d9c:	d8f9      	bhi.n	8024d92 <__copybits+0x1e>
 8024d9e:	1ab3      	subs	r3, r6, r2
 8024da0:	3b15      	subs	r3, #21
 8024da2:	f023 0303 	bic.w	r3, r3, #3
 8024da6:	3304      	adds	r3, #4
 8024da8:	18c0      	adds	r0, r0, r3
 8024daa:	4281      	cmp	r1, r0
 8024dac:	d904      	bls.n	8024db8 <__copybits+0x44>
 8024dae:	2300      	movs	r3, #0
 8024db0:	f840 3b04 	str.w	r3, [r0], #4
 8024db4:	4281      	cmp	r1, r0
 8024db6:	d8fb      	bhi.n	8024db0 <__copybits+0x3c>
 8024db8:	bc70      	pop	{r4, r5, r6}
 8024dba:	4770      	bx	lr

08024dbc <__any_on>:
 8024dbc:	6902      	ldr	r2, [r0, #16]
 8024dbe:	114b      	asrs	r3, r1, #5
 8024dc0:	b410      	push	{r4}
 8024dc2:	429a      	cmp	r2, r3
 8024dc4:	db01      	blt.n	8024dca <__any_on+0xe>
 8024dc6:	461a      	mov	r2, r3
 8024dc8:	dc18      	bgt.n	8024dfc <__any_on+0x40>
 8024dca:	3204      	adds	r2, #4
 8024dcc:	f100 0114 	add.w	r1, r0, #20
 8024dd0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8024dd4:	1d1c      	adds	r4, r3, #4
 8024dd6:	42a1      	cmp	r1, r4
 8024dd8:	d21d      	bcs.n	8024e16 <__any_on+0x5a>
 8024dda:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8024dde:	b952      	cbnz	r2, 8024df6 <__any_on+0x3a>
 8024de0:	1a59      	subs	r1, r3, r1
 8024de2:	3103      	adds	r1, #3
 8024de4:	f021 0103 	bic.w	r1, r1, #3
 8024de8:	1a59      	subs	r1, r3, r1
 8024dea:	428b      	cmp	r3, r1
 8024dec:	d013      	beq.n	8024e16 <__any_on+0x5a>
 8024dee:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8024df2:	2a00      	cmp	r2, #0
 8024df4:	d0f9      	beq.n	8024dea <__any_on+0x2e>
 8024df6:	2001      	movs	r0, #1
 8024df8:	bc10      	pop	{r4}
 8024dfa:	4770      	bx	lr
 8024dfc:	f011 011f 	ands.w	r1, r1, #31
 8024e00:	d0e3      	beq.n	8024dca <__any_on+0xe>
 8024e02:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8024e06:	695b      	ldr	r3, [r3, #20]
 8024e08:	fa23 f401 	lsr.w	r4, r3, r1
 8024e0c:	fa04 f101 	lsl.w	r1, r4, r1
 8024e10:	4299      	cmp	r1, r3
 8024e12:	d1f0      	bne.n	8024df6 <__any_on+0x3a>
 8024e14:	e7d9      	b.n	8024dca <__any_on+0xe>
 8024e16:	2000      	movs	r0, #0
 8024e18:	e7ee      	b.n	8024df8 <__any_on+0x3c>
 8024e1a:	bf00      	nop

08024e1c <_sbrk_r>:
 8024e1c:	b538      	push	{r3, r4, r5, lr}
 8024e1e:	f643 7458 	movw	r4, #16216	; 0x3f58
 8024e22:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8024e26:	4605      	mov	r5, r0
 8024e28:	4608      	mov	r0, r1
 8024e2a:	2300      	movs	r3, #0
 8024e2c:	6023      	str	r3, [r4, #0]
 8024e2e:	f7f1 ffd5 	bl	8016ddc <_sbrk>
 8024e32:	1c43      	adds	r3, r0, #1
 8024e34:	d000      	beq.n	8024e38 <_sbrk_r+0x1c>
 8024e36:	bd38      	pop	{r3, r4, r5, pc}
 8024e38:	6823      	ldr	r3, [r4, #0]
 8024e3a:	2b00      	cmp	r3, #0
 8024e3c:	d0fb      	beq.n	8024e36 <_sbrk_r+0x1a>
 8024e3e:	602b      	str	r3, [r5, #0]
 8024e40:	bd38      	pop	{r3, r4, r5, pc}
 8024e42:	bf00      	nop

08024e44 <strcmp>:
 8024e44:	ea80 0201 	eor.w	r2, r0, r1
 8024e48:	f012 0f03 	tst.w	r2, #3
 8024e4c:	f040 803a 	bne.w	8024ec4 <strcmp_unaligned>
 8024e50:	f010 0203 	ands.w	r2, r0, #3
 8024e54:	f020 0003 	bic.w	r0, r0, #3
 8024e58:	f021 0103 	bic.w	r1, r1, #3
 8024e5c:	f850 cb04 	ldr.w	ip, [r0], #4
 8024e60:	bf08      	it	eq
 8024e62:	f851 3b04 	ldreq.w	r3, [r1], #4
 8024e66:	d00d      	beq.n	8024e84 <strcmp+0x40>
 8024e68:	f082 0203 	eor.w	r2, r2, #3
 8024e6c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8024e70:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8024e74:	fa23 f202 	lsr.w	r2, r3, r2
 8024e78:	f851 3b04 	ldr.w	r3, [r1], #4
 8024e7c:	ea4c 0c02 	orr.w	ip, ip, r2
 8024e80:	ea43 0302 	orr.w	r3, r3, r2
 8024e84:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 8024e88:	459c      	cmp	ip, r3
 8024e8a:	bf01      	itttt	eq
 8024e8c:	ea22 020c 	biceq.w	r2, r2, ip
 8024e90:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8024e94:	f850 cb04 	ldreq.w	ip, [r0], #4
 8024e98:	f851 3b04 	ldreq.w	r3, [r1], #4
 8024e9c:	d0f2      	beq.n	8024e84 <strcmp+0x40>
 8024e9e:	ea4f 600c 	mov.w	r0, ip, lsl #24
 8024ea2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ea6:	2801      	cmp	r0, #1
 8024ea8:	bf28      	it	cs
 8024eaa:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8024eae:	bf08      	it	eq
 8024eb0:	0a1b      	lsreq	r3, r3, #8
 8024eb2:	d0f4      	beq.n	8024e9e <strcmp+0x5a>
 8024eb4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8024eb8:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8024ebc:	eba0 0003 	sub.w	r0, r0, r3
 8024ec0:	4770      	bx	lr
 8024ec2:	bf00      	nop

08024ec4 <strcmp_unaligned>:
 8024ec4:	f010 0f03 	tst.w	r0, #3
 8024ec8:	d00a      	beq.n	8024ee0 <strcmp_unaligned+0x1c>
 8024eca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024ece:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024ed2:	2a01      	cmp	r2, #1
 8024ed4:	bf28      	it	cs
 8024ed6:	429a      	cmpcs	r2, r3
 8024ed8:	d0f4      	beq.n	8024ec4 <strcmp_unaligned>
 8024eda:	eba2 0003 	sub.w	r0, r2, r3
 8024ede:	4770      	bx	lr
 8024ee0:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8024ee4:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8024ee8:	f04f 0201 	mov.w	r2, #1
 8024eec:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8024ef0:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8024ef4:	f001 0c03 	and.w	ip, r1, #3
 8024ef8:	f021 0103 	bic.w	r1, r1, #3
 8024efc:	f850 4b04 	ldr.w	r4, [r0], #4
 8024f00:	f851 5b04 	ldr.w	r5, [r1], #4
 8024f04:	f1bc 0f02 	cmp.w	ip, #2
 8024f08:	d026      	beq.n	8024f58 <strcmp_unaligned+0x94>
 8024f0a:	d84b      	bhi.n	8024fa4 <strcmp_unaligned+0xe0>
 8024f0c:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 8024f10:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 8024f14:	eba4 0302 	sub.w	r3, r4, r2
 8024f18:	ea23 0304 	bic.w	r3, r3, r4
 8024f1c:	d10d      	bne.n	8024f3a <strcmp_unaligned+0x76>
 8024f1e:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8024f22:	bf08      	it	eq
 8024f24:	f851 5b04 	ldreq.w	r5, [r1], #4
 8024f28:	d10a      	bne.n	8024f40 <strcmp_unaligned+0x7c>
 8024f2a:	ea8c 0c04 	eor.w	ip, ip, r4
 8024f2e:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 8024f32:	d10c      	bne.n	8024f4e <strcmp_unaligned+0x8a>
 8024f34:	f850 4b04 	ldr.w	r4, [r0], #4
 8024f38:	e7e8      	b.n	8024f0c <strcmp_unaligned+0x48>
 8024f3a:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8024f3e:	e05c      	b.n	8024ffa <strcmp_unaligned+0x136>
 8024f40:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8024f44:	d152      	bne.n	8024fec <strcmp_unaligned+0x128>
 8024f46:	780d      	ldrb	r5, [r1, #0]
 8024f48:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8024f4c:	e055      	b.n	8024ffa <strcmp_unaligned+0x136>
 8024f4e:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8024f52:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8024f56:	e050      	b.n	8024ffa <strcmp_unaligned+0x136>
 8024f58:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8024f5c:	eba4 0302 	sub.w	r3, r4, r2
 8024f60:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8024f64:	ea23 0304 	bic.w	r3, r3, r4
 8024f68:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8024f6c:	d117      	bne.n	8024f9e <strcmp_unaligned+0xda>
 8024f6e:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8024f72:	bf08      	it	eq
 8024f74:	f851 5b04 	ldreq.w	r5, [r1], #4
 8024f78:	d107      	bne.n	8024f8a <strcmp_unaligned+0xc6>
 8024f7a:	ea8c 0c04 	eor.w	ip, ip, r4
 8024f7e:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 8024f82:	d108      	bne.n	8024f96 <strcmp_unaligned+0xd2>
 8024f84:	f850 4b04 	ldr.w	r4, [r0], #4
 8024f88:	e7e6      	b.n	8024f58 <strcmp_unaligned+0x94>
 8024f8a:	041b      	lsls	r3, r3, #16
 8024f8c:	d12e      	bne.n	8024fec <strcmp_unaligned+0x128>
 8024f8e:	880d      	ldrh	r5, [r1, #0]
 8024f90:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8024f94:	e031      	b.n	8024ffa <strcmp_unaligned+0x136>
 8024f96:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8024f9a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8024f9e:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8024fa2:	e02a      	b.n	8024ffa <strcmp_unaligned+0x136>
 8024fa4:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 8024fa8:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8024fac:	eba4 0302 	sub.w	r3, r4, r2
 8024fb0:	ea23 0304 	bic.w	r3, r3, r4
 8024fb4:	d10d      	bne.n	8024fd2 <strcmp_unaligned+0x10e>
 8024fb6:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8024fba:	bf08      	it	eq
 8024fbc:	f851 5b04 	ldreq.w	r5, [r1], #4
 8024fc0:	d10a      	bne.n	8024fd8 <strcmp_unaligned+0x114>
 8024fc2:	ea8c 0c04 	eor.w	ip, ip, r4
 8024fc6:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 8024fca:	d10a      	bne.n	8024fe2 <strcmp_unaligned+0x11e>
 8024fcc:	f850 4b04 	ldr.w	r4, [r0], #4
 8024fd0:	e7e8      	b.n	8024fa4 <strcmp_unaligned+0xe0>
 8024fd2:	ea4f 6515 	mov.w	r5, r5, lsr #24
 8024fd6:	e010      	b.n	8024ffa <strcmp_unaligned+0x136>
 8024fd8:	f014 0fff 	tst.w	r4, #255	; 0xff
 8024fdc:	d006      	beq.n	8024fec <strcmp_unaligned+0x128>
 8024fde:	f851 5b04 	ldr.w	r5, [r1], #4
 8024fe2:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8024fe6:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8024fea:	e006      	b.n	8024ffa <strcmp_unaligned+0x136>
 8024fec:	f04f 0000 	mov.w	r0, #0
 8024ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024ff4:	f85d 5b04 	ldr.w	r5, [sp], #4
 8024ff8:	4770      	bx	lr
 8024ffa:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 8024ffe:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 8025002:	2801      	cmp	r0, #1
 8025004:	bf28      	it	cs
 8025006:	4290      	cmpcs	r0, r2
 8025008:	bf04      	itt	eq
 802500a:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 802500e:	0a2d      	lsreq	r5, r5, #8
 8025010:	d0f3      	beq.n	8024ffa <strcmp_unaligned+0x136>
 8025012:	eba2 0000 	sub.w	r0, r2, r0
 8025016:	f85d 4b04 	ldr.w	r4, [sp], #4
 802501a:	f85d 5b04 	ldr.w	r5, [sp], #4
 802501e:	4770      	bx	lr

08025020 <__ssprint_r>:
 8025020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025024:	b085      	sub	sp, #20
 8025026:	6894      	ldr	r4, [r2, #8]
 8025028:	4691      	mov	r9, r2
 802502a:	9003      	str	r0, [sp, #12]
 802502c:	460d      	mov	r5, r1
 802502e:	6817      	ldr	r7, [r2, #0]
 8025030:	2c00      	cmp	r4, #0
 8025032:	d07d      	beq.n	8025130 <__ssprint_r+0x110>
 8025034:	f04f 0a00 	mov.w	sl, #0
 8025038:	6808      	ldr	r0, [r1, #0]
 802503a:	688b      	ldr	r3, [r1, #8]
 802503c:	4654      	mov	r4, sl
 802503e:	2c00      	cmp	r4, #0
 8025040:	d051      	beq.n	80250e6 <__ssprint_r+0xc6>
 8025042:	429c      	cmp	r4, r3
 8025044:	461e      	mov	r6, r3
 8025046:	4698      	mov	r8, r3
 8025048:	bf3c      	itt	cc
 802504a:	4626      	movcc	r6, r4
 802504c:	46a0      	movcc	r8, r4
 802504e:	d33a      	bcc.n	80250c6 <__ssprint_r+0xa6>
 8025050:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 8025054:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8025058:	d035      	beq.n	80250c6 <__ssprint_r+0xa6>
 802505a:	696b      	ldr	r3, [r5, #20]
 802505c:	1c62      	adds	r2, r4, #1
 802505e:	6929      	ldr	r1, [r5, #16]
 8025060:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8025064:	1a43      	subs	r3, r0, r1
 8025066:	18d0      	adds	r0, r2, r3
 8025068:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 802506c:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 8025070:	4583      	cmp	fp, r0
 8025072:	465a      	mov	r2, fp
 8025074:	bf3c      	itt	cc
 8025076:	4683      	movcc	fp, r0
 8025078:	4602      	movcc	r2, r0
 802507a:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 802507e:	9803      	ldr	r0, [sp, #12]
 8025080:	d036      	beq.n	80250f0 <__ssprint_r+0xd0>
 8025082:	4611      	mov	r1, r2
 8025084:	9301      	str	r3, [sp, #4]
 8025086:	f7fe ff39 	bl	8023efc <_malloc_r>
 802508a:	9b01      	ldr	r3, [sp, #4]
 802508c:	2800      	cmp	r0, #0
 802508e:	d03a      	beq.n	8025106 <__ssprint_r+0xe6>
 8025090:	6929      	ldr	r1, [r5, #16]
 8025092:	461a      	mov	r2, r3
 8025094:	9301      	str	r3, [sp, #4]
 8025096:	9002      	str	r0, [sp, #8]
 8025098:	f7fc f9ae 	bl	80213f8 <memcpy>
 802509c:	89aa      	ldrh	r2, [r5, #12]
 802509e:	9b01      	ldr	r3, [sp, #4]
 80250a0:	f8dd c008 	ldr.w	ip, [sp, #8]
 80250a4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80250a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80250ac:	81aa      	strh	r2, [r5, #12]
 80250ae:	4626      	mov	r6, r4
 80250b0:	46a0      	mov	r8, r4
 80250b2:	eb0c 0003 	add.w	r0, ip, r3
 80250b6:	f8c5 c010 	str.w	ip, [r5, #16]
 80250ba:	ebc3 030b 	rsb	r3, r3, fp
 80250be:	6028      	str	r0, [r5, #0]
 80250c0:	f8c5 b014 	str.w	fp, [r5, #20]
 80250c4:	60ab      	str	r3, [r5, #8]
 80250c6:	4642      	mov	r2, r8
 80250c8:	4651      	mov	r1, sl
 80250ca:	f000 fea3 	bl	8025e14 <memmove>
 80250ce:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80250d2:	68ab      	ldr	r3, [r5, #8]
 80250d4:	6828      	ldr	r0, [r5, #0]
 80250d6:	1b14      	subs	r4, r2, r4
 80250d8:	1b9b      	subs	r3, r3, r6
 80250da:	60ab      	str	r3, [r5, #8]
 80250dc:	4440      	add	r0, r8
 80250de:	6028      	str	r0, [r5, #0]
 80250e0:	f8c9 4008 	str.w	r4, [r9, #8]
 80250e4:	b1f4      	cbz	r4, 8025124 <__ssprint_r+0x104>
 80250e6:	f8d7 a000 	ldr.w	sl, [r7]
 80250ea:	687c      	ldr	r4, [r7, #4]
 80250ec:	3708      	adds	r7, #8
 80250ee:	e7a6      	b.n	802503e <__ssprint_r+0x1e>
 80250f0:	9301      	str	r3, [sp, #4]
 80250f2:	f000 ff33 	bl	8025f5c <_realloc_r>
 80250f6:	9b01      	ldr	r3, [sp, #4]
 80250f8:	4684      	mov	ip, r0
 80250fa:	2800      	cmp	r0, #0
 80250fc:	d1d7      	bne.n	80250ae <__ssprint_r+0x8e>
 80250fe:	9803      	ldr	r0, [sp, #12]
 8025100:	6929      	ldr	r1, [r5, #16]
 8025102:	f000 fdbf 	bl	8025c84 <_free_r>
 8025106:	9a03      	ldr	r2, [sp, #12]
 8025108:	230c      	movs	r3, #12
 802510a:	f04f 30ff 	mov.w	r0, #4294967295
 802510e:	6013      	str	r3, [r2, #0]
 8025110:	2300      	movs	r3, #0
 8025112:	89aa      	ldrh	r2, [r5, #12]
 8025114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8025118:	81aa      	strh	r2, [r5, #12]
 802511a:	f8c9 3008 	str.w	r3, [r9, #8]
 802511e:	f8c9 3004 	str.w	r3, [r9, #4]
 8025122:	e002      	b.n	802512a <__ssprint_r+0x10a>
 8025124:	4620      	mov	r0, r4
 8025126:	f8c9 4004 	str.w	r4, [r9, #4]
 802512a:	b005      	add	sp, #20
 802512c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025130:	6054      	str	r4, [r2, #4]
 8025132:	4620      	mov	r0, r4
 8025134:	e7f9      	b.n	802512a <__ssprint_r+0x10a>
 8025136:	bf00      	nop

08025138 <_svfiprintf_r>:
 8025138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802513c:	b0ad      	sub	sp, #180	; 0xb4
 802513e:	4689      	mov	r9, r1
 8025140:	9307      	str	r3, [sp, #28]
 8025142:	898b      	ldrh	r3, [r1, #12]
 8025144:	9002      	str	r0, [sp, #8]
 8025146:	061b      	lsls	r3, r3, #24
 8025148:	d503      	bpl.n	8025152 <_svfiprintf_r+0x1a>
 802514a:	690b      	ldr	r3, [r1, #16]
 802514c:	2b00      	cmp	r3, #0
 802514e:	f000 84db 	beq.w	8025b08 <_svfiprintf_r+0x9d0>
 8025152:	4615      	mov	r5, r2
 8025154:	f10d 069f 	add.w	r6, sp, #159	; 0x9f
 8025158:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 802515c:	2300      	movs	r3, #0
 802515e:	9601      	str	r6, [sp, #4]
 8025160:	ac0e      	add	r4, sp, #56	; 0x38
 8025162:	ebc6 060a 	rsb	r6, r6, sl
 8025166:	9308      	str	r3, [sp, #32]
 8025168:	9305      	str	r3, [sp, #20]
 802516a:	960d      	str	r6, [sp, #52]	; 0x34
 802516c:	9428      	str	r4, [sp, #160]	; 0xa0
 802516e:	932a      	str	r3, [sp, #168]	; 0xa8
 8025170:	9329      	str	r3, [sp, #164]	; 0xa4
 8025172:	782b      	ldrb	r3, [r5, #0]
 8025174:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 8025178:	bf18      	it	ne
 802517a:	2201      	movne	r2, #1
 802517c:	2b00      	cmp	r3, #0
 802517e:	bf0c      	ite	eq
 8025180:	2300      	moveq	r3, #0
 8025182:	f002 0301 	andne.w	r3, r2, #1
 8025186:	2b00      	cmp	r3, #0
 8025188:	f000 836d 	beq.w	8025866 <_svfiprintf_r+0x72e>
 802518c:	462a      	mov	r2, r5
 802518e:	462e      	mov	r6, r5
 8025190:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8025194:	3601      	adds	r6, #1
 8025196:	1c19      	adds	r1, r3, #0
 8025198:	bf18      	it	ne
 802519a:	2101      	movne	r1, #1
 802519c:	2b25      	cmp	r3, #37	; 0x25
 802519e:	bf0c      	ite	eq
 80251a0:	2300      	moveq	r3, #0
 80251a2:	f001 0301 	andne.w	r3, r1, #1
 80251a6:	2b00      	cmp	r3, #0
 80251a8:	d1f2      	bne.n	8025190 <_svfiprintf_r+0x58>
 80251aa:	1b77      	subs	r7, r6, r5
 80251ac:	d00e      	beq.n	80251cc <_svfiprintf_r+0x94>
 80251ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80251b0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80251b2:	3301      	adds	r3, #1
 80251b4:	e884 00a0 	stmia.w	r4, {r5, r7}
 80251b8:	2b07      	cmp	r3, #7
 80251ba:	443a      	add	r2, r7
 80251bc:	9329      	str	r3, [sp, #164]	; 0xa4
 80251be:	922a      	str	r2, [sp, #168]	; 0xa8
 80251c0:	f300 83ae 	bgt.w	8025920 <_svfiprintf_r+0x7e8>
 80251c4:	3408      	adds	r4, #8
 80251c6:	9805      	ldr	r0, [sp, #20]
 80251c8:	19c0      	adds	r0, r0, r7
 80251ca:	9005      	str	r0, [sp, #20]
 80251cc:	7833      	ldrb	r3, [r6, #0]
 80251ce:	2b00      	cmp	r3, #0
 80251d0:	f000 834b 	beq.w	802586a <_svfiprintf_r+0x732>
 80251d4:	2200      	movs	r2, #0
 80251d6:	7873      	ldrb	r3, [r6, #1]
 80251d8:	1c75      	adds	r5, r6, #1
 80251da:	f04f 38ff 	mov.w	r8, #4294967295
 80251de:	4693      	mov	fp, r2
 80251e0:	2100      	movs	r1, #0
 80251e2:	9206      	str	r2, [sp, #24]
 80251e4:	f88d 10af 	strb.w	r1, [sp, #175]	; 0xaf
 80251e8:	3501      	adds	r5, #1
 80251ea:	f1a3 0120 	sub.w	r1, r3, #32
 80251ee:	2958      	cmp	r1, #88	; 0x58
 80251f0:	f200 824d 	bhi.w	802568e <_svfiprintf_r+0x556>
 80251f4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80251f8:	024b0190 	.word	0x024b0190
 80251fc:	018c024b 	.word	0x018c024b
 8025200:	024b024b 	.word	0x024b024b
 8025204:	024b024b 	.word	0x024b024b
 8025208:	024b024b 	.word	0x024b024b
 802520c:	01ab00ff 	.word	0x01ab00ff
 8025210:	010c024b 	.word	0x010c024b
 8025214:	024b01ae 	.word	0x024b01ae
 8025218:	019601a7 	.word	0x019601a7
 802521c:	01960196 	.word	0x01960196
 8025220:	01960196 	.word	0x01960196
 8025224:	01960196 	.word	0x01960196
 8025228:	01960196 	.word	0x01960196
 802522c:	024b024b 	.word	0x024b024b
 8025230:	024b024b 	.word	0x024b024b
 8025234:	024b024b 	.word	0x024b024b
 8025238:	024b024b 	.word	0x024b024b
 802523c:	024b024b 	.word	0x024b024b
 8025240:	024b0059 	.word	0x024b0059
 8025244:	024b024b 	.word	0x024b024b
 8025248:	024b024b 	.word	0x024b024b
 802524c:	024b024b 	.word	0x024b024b
 8025250:	024b024b 	.word	0x024b024b
 8025254:	00f5024b 	.word	0x00f5024b
 8025258:	024b024b 	.word	0x024b024b
 802525c:	024b024b 	.word	0x024b024b
 8025260:	00be024b 	.word	0x00be024b
 8025264:	024b024b 	.word	0x024b024b
 8025268:	024b0165 	.word	0x024b0165
 802526c:	024b024b 	.word	0x024b024b
 8025270:	024b024b 	.word	0x024b024b
 8025274:	024b024b 	.word	0x024b024b
 8025278:	024b024b 	.word	0x024b024b
 802527c:	0110024b 	.word	0x0110024b
 8025280:	024b005b 	.word	0x024b005b
 8025284:	024b024b 	.word	0x024b024b
 8025288:	005b0219 	.word	0x005b0219
 802528c:	024b024b 	.word	0x024b024b
 8025290:	024b020c 	.word	0x024b020c
 8025294:	00f7021d 	.word	0x00f7021d
 8025298:	01cd01d1 	.word	0x01cd01d1
 802529c:	01e9024b 	.word	0x01e9024b
 80252a0:	00c0024b 	.word	0x00c0024b
 80252a4:	024b024b 	.word	0x024b024b
 80252a8:	0232      	.short	0x0232
 80252aa:	f04b 0b10 	orr.w	fp, fp, #16
 80252ae:	f01b 0f20 	tst.w	fp, #32
 80252b2:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 80252b6:	f000 837a 	beq.w	80259ae <_svfiprintf_r+0x876>
 80252ba:	9e07      	ldr	r6, [sp, #28]
 80252bc:	1df3      	adds	r3, r6, #7
 80252be:	f023 0307 	bic.w	r3, r3, #7
 80252c2:	f103 0608 	add.w	r6, r3, #8
 80252c6:	9607      	str	r6, [sp, #28]
 80252c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252cc:	4616      	mov	r6, r2
 80252ce:	461f      	mov	r7, r3
 80252d0:	2a00      	cmp	r2, #0
 80252d2:	f173 0000 	sbcs.w	r0, r3, #0
 80252d6:	f2c0 83c7 	blt.w	8025a68 <_svfiprintf_r+0x930>
 80252da:	ea56 0107 	orrs.w	r1, r6, r7
 80252de:	f04f 0301 	mov.w	r3, #1
 80252e2:	bf0c      	ite	eq
 80252e4:	2200      	moveq	r2, #0
 80252e6:	2201      	movne	r2, #1
 80252e8:	f1b8 0f00 	cmp.w	r8, #0
 80252ec:	bfa8      	it	ge
 80252ee:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 80252f2:	f1b8 0f00 	cmp.w	r8, #0
 80252f6:	bf18      	it	ne
 80252f8:	f042 0201 	orrne.w	r2, r2, #1
 80252fc:	2a00      	cmp	r2, #0
 80252fe:	d05d      	beq.n	80253bc <_svfiprintf_r+0x284>
 8025300:	2b01      	cmp	r3, #1
 8025302:	f000 81d4 	beq.w	80256ae <_svfiprintf_r+0x576>
 8025306:	2b02      	cmp	r3, #2
 8025308:	bf1c      	itt	ne
 802530a:	4652      	movne	r2, sl
 802530c:	46ac      	movne	ip, r5
 802530e:	d101      	bne.n	8025314 <_svfiprintf_r+0x1dc>
 8025310:	e332      	b.n	8025978 <_svfiprintf_r+0x840>
 8025312:	462a      	mov	r2, r5
 8025314:	08f3      	lsrs	r3, r6, #3
 8025316:	08f8      	lsrs	r0, r7, #3
 8025318:	ea43 7347 	orr.w	r3, r3, r7, lsl #29
 802531c:	f006 0107 	and.w	r1, r6, #7
 8025320:	4607      	mov	r7, r0
 8025322:	461e      	mov	r6, r3
 8025324:	1e55      	subs	r5, r2, #1
 8025326:	ea56 0007 	orrs.w	r0, r6, r7
 802532a:	f101 0330 	add.w	r3, r1, #48	; 0x30
 802532e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8025332:	d1ee      	bne.n	8025312 <_svfiprintf_r+0x1da>
 8025334:	f01b 0f01 	tst.w	fp, #1
 8025338:	950a      	str	r5, [sp, #40]	; 0x28
 802533a:	4665      	mov	r5, ip
 802533c:	f000 81de 	beq.w	80256fc <_svfiprintf_r+0x5c4>
 8025340:	2b30      	cmp	r3, #48	; 0x30
 8025342:	f000 83f0 	beq.w	8025b26 <_svfiprintf_r+0x9ee>
 8025346:	1e93      	subs	r3, r2, #2
 8025348:	930a      	str	r3, [sp, #40]	; 0x28
 802534a:	ebc3 060a 	rsb	r6, r3, sl
 802534e:	2330      	movs	r3, #48	; 0x30
 8025350:	9604      	str	r6, [sp, #16]
 8025352:	f802 3c02 	strb.w	r3, [r2, #-2]
 8025356:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 802535a:	9e04      	ldr	r6, [sp, #16]
 802535c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802535e:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
 8025362:	4286      	cmp	r6, r0
 8025364:	bfb8      	it	lt
 8025366:	4606      	movlt	r6, r0
 8025368:	9603      	str	r6, [sp, #12]
 802536a:	2b00      	cmp	r3, #0
 802536c:	d066      	beq.n	802543c <_svfiprintf_r+0x304>
 802536e:	3601      	adds	r6, #1
 8025370:	9603      	str	r6, [sp, #12]
 8025372:	e063      	b.n	802543c <_svfiprintf_r+0x304>
 8025374:	f04b 0b10 	orr.w	fp, fp, #16
 8025378:	f01b 0f20 	tst.w	fp, #32
 802537c:	f000 833a 	beq.w	80259f4 <_svfiprintf_r+0x8bc>
 8025380:	9e07      	ldr	r6, [sp, #28]
 8025382:	2301      	movs	r3, #1
 8025384:	1df2      	adds	r2, r6, #7
 8025386:	f022 0207 	bic.w	r2, r2, #7
 802538a:	f102 0608 	add.w	r6, r2, #8
 802538e:	9607      	str	r6, [sp, #28]
 8025390:	e9d2 6700 	ldrd	r6, r7, [r2]
 8025394:	ea56 0007 	orrs.w	r0, r6, r7
 8025398:	bf0c      	ite	eq
 802539a:	2200      	moveq	r2, #0
 802539c:	2201      	movne	r2, #1
 802539e:	2100      	movs	r1, #0
 80253a0:	f1b8 0f00 	cmp.w	r8, #0
 80253a4:	bfa8      	it	ge
 80253a6:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 80253aa:	f1b8 0f00 	cmp.w	r8, #0
 80253ae:	bf18      	it	ne
 80253b0:	f042 0201 	orrne.w	r2, r2, #1
 80253b4:	f88d 10af 	strb.w	r1, [sp, #175]	; 0xaf
 80253b8:	2a00      	cmp	r2, #0
 80253ba:	d1a1      	bne.n	8025300 <_svfiprintf_r+0x1c8>
 80253bc:	2b00      	cmp	r3, #0
 80253be:	f040 82ab 	bne.w	8025918 <_svfiprintf_r+0x7e0>
 80253c2:	f01b 0f01 	tst.w	fp, #1
 80253c6:	bf04      	itt	eq
 80253c8:	9304      	streq	r3, [sp, #16]
 80253ca:	f8cd a028 	streq.w	sl, [sp, #40]	; 0x28
 80253ce:	d0c2      	beq.n	8025356 <_svfiprintf_r+0x21e>
 80253d0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80253d2:	2330      	movs	r3, #48	; 0x30
 80253d4:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 80253d8:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 80253dc:	930a      	str	r3, [sp, #40]	; 0x28
 80253de:	9604      	str	r6, [sp, #16]
 80253e0:	e7b9      	b.n	8025356 <_svfiprintf_r+0x21e>
 80253e2:	f04b 0b10 	orr.w	fp, fp, #16
 80253e6:	f01b 0320 	ands.w	r3, fp, #32
 80253ea:	f000 82f1 	beq.w	80259d0 <_svfiprintf_r+0x898>
 80253ee:	9e07      	ldr	r6, [sp, #28]
 80253f0:	2300      	movs	r3, #0
 80253f2:	1df2      	adds	r2, r6, #7
 80253f4:	e7c7      	b.n	8025386 <_svfiprintf_r+0x24e>
 80253f6:	9e07      	ldr	r6, [sp, #28]
 80253f8:	6836      	ldr	r6, [r6, #0]
 80253fa:	9606      	str	r6, [sp, #24]
 80253fc:	9e07      	ldr	r6, [sp, #28]
 80253fe:	1d30      	adds	r0, r6, #4
 8025400:	9e06      	ldr	r6, [sp, #24]
 8025402:	2e00      	cmp	r6, #0
 8025404:	f280 830c 	bge.w	8025a20 <_svfiprintf_r+0x8e8>
 8025408:	9e06      	ldr	r6, [sp, #24]
 802540a:	9007      	str	r0, [sp, #28]
 802540c:	4276      	negs	r6, r6
 802540e:	9606      	str	r6, [sp, #24]
 8025410:	f04b 0b04 	orr.w	fp, fp, #4
 8025414:	782b      	ldrb	r3, [r5, #0]
 8025416:	e6e7      	b.n	80251e8 <_svfiprintf_r+0xb0>
 8025418:	9b07      	ldr	r3, [sp, #28]
 802541a:	2601      	movs	r6, #1
 802541c:	9603      	str	r6, [sp, #12]
 802541e:	2000      	movs	r0, #0
 8025420:	9e07      	ldr	r6, [sp, #28]
 8025422:	681b      	ldr	r3, [r3, #0]
 8025424:	3604      	adds	r6, #4
 8025426:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 802542a:	9607      	str	r6, [sp, #28]
 802542c:	2601      	movs	r6, #1
 802542e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 8025432:	9604      	str	r6, [sp, #16]
 8025434:	ae1e      	add	r6, sp, #120	; 0x78
 8025436:	960a      	str	r6, [sp, #40]	; 0x28
 8025438:	2300      	movs	r3, #0
 802543a:	9309      	str	r3, [sp, #36]	; 0x24
 802543c:	f01b 0302 	ands.w	r3, fp, #2
 8025440:	930b      	str	r3, [sp, #44]	; 0x2c
 8025442:	d002      	beq.n	802544a <_svfiprintf_r+0x312>
 8025444:	9e03      	ldr	r6, [sp, #12]
 8025446:	3602      	adds	r6, #2
 8025448:	9603      	str	r6, [sp, #12]
 802544a:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 802544e:	930c      	str	r3, [sp, #48]	; 0x30
 8025450:	f040 8159 	bne.w	8025706 <_svfiprintf_r+0x5ce>
 8025454:	9806      	ldr	r0, [sp, #24]
 8025456:	9b03      	ldr	r3, [sp, #12]
 8025458:	1ac6      	subs	r6, r0, r3
 802545a:	2e00      	cmp	r6, #0
 802545c:	f340 8153 	ble.w	8025706 <_svfiprintf_r+0x5ce>
 8025460:	2e10      	cmp	r6, #16
 8025462:	f64e 37c0 	movw	r7, #60352	; 0xebc0
 8025466:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025468:	f6c0 0702 	movt	r7, #2050	; 0x802
 802546c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802546e:	bfc8      	it	gt
 8025470:	f04f 0810 	movgt.w	r8, #16
 8025474:	dc03      	bgt.n	802547e <_svfiprintf_r+0x346>
 8025476:	e019      	b.n	80254ac <_svfiprintf_r+0x374>
 8025478:	3e10      	subs	r6, #16
 802547a:	2e10      	cmp	r6, #16
 802547c:	dd16      	ble.n	80254ac <_svfiprintf_r+0x374>
 802547e:	3301      	adds	r3, #1
 8025480:	3210      	adds	r2, #16
 8025482:	e884 0180 	stmia.w	r4, {r7, r8}
 8025486:	3408      	adds	r4, #8
 8025488:	2b07      	cmp	r3, #7
 802548a:	9329      	str	r3, [sp, #164]	; 0xa4
 802548c:	922a      	str	r2, [sp, #168]	; 0xa8
 802548e:	ddf3      	ble.n	8025478 <_svfiprintf_r+0x340>
 8025490:	9802      	ldr	r0, [sp, #8]
 8025492:	4649      	mov	r1, r9
 8025494:	4652      	mov	r2, sl
 8025496:	ac0e      	add	r4, sp, #56	; 0x38
 8025498:	f7ff fdc2 	bl	8025020 <__ssprint_r>
 802549c:	2800      	cmp	r0, #0
 802549e:	f040 81eb 	bne.w	8025878 <_svfiprintf_r+0x740>
 80254a2:	3e10      	subs	r6, #16
 80254a4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80254a6:	2e10      	cmp	r6, #16
 80254a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80254aa:	dce8      	bgt.n	802547e <_svfiprintf_r+0x346>
 80254ac:	3301      	adds	r3, #1
 80254ae:	1992      	adds	r2, r2, r6
 80254b0:	2b07      	cmp	r3, #7
 80254b2:	6027      	str	r7, [r4, #0]
 80254b4:	6066      	str	r6, [r4, #4]
 80254b6:	9329      	str	r3, [sp, #164]	; 0xa4
 80254b8:	922a      	str	r2, [sp, #168]	; 0xa8
 80254ba:	f300 82a5 	bgt.w	8025a08 <_svfiprintf_r+0x8d0>
 80254be:	3408      	adds	r4, #8
 80254c0:	e123      	b.n	802570a <_svfiprintf_r+0x5d2>
 80254c2:	f01b 0f20 	tst.w	fp, #32
 80254c6:	f64e 4604 	movw	r6, #60420	; 0xec04
 80254ca:	f6c0 0602 	movt	r6, #2050	; 0x802
 80254ce:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 80254d2:	9608      	str	r6, [sp, #32]
 80254d4:	f000 80cd 	beq.w	8025672 <_svfiprintf_r+0x53a>
 80254d8:	9e07      	ldr	r6, [sp, #28]
 80254da:	1df2      	adds	r2, r6, #7
 80254dc:	f022 0207 	bic.w	r2, r2, #7
 80254e0:	f102 0608 	add.w	r6, r2, #8
 80254e4:	9607      	str	r6, [sp, #28]
 80254e6:	e9d2 6700 	ldrd	r6, r7, [r2]
 80254ea:	ea56 0007 	orrs.w	r0, r6, r7
 80254ee:	bf0c      	ite	eq
 80254f0:	2200      	moveq	r2, #0
 80254f2:	2201      	movne	r2, #1
 80254f4:	ea1b 0f02 	tst.w	fp, r2
 80254f8:	f000 8268 	beq.w	80259cc <_svfiprintf_r+0x894>
 80254fc:	f88d 30ad 	strb.w	r3, [sp, #173]	; 0xad
 8025500:	f04b 0b02 	orr.w	fp, fp, #2
 8025504:	2330      	movs	r3, #48	; 0x30
 8025506:	2201      	movs	r2, #1
 8025508:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
 802550c:	2302      	movs	r3, #2
 802550e:	e746      	b.n	802539e <_svfiprintf_r+0x266>
 8025510:	f04b 0b01 	orr.w	fp, fp, #1
 8025514:	782b      	ldrb	r3, [r5, #0]
 8025516:	e667      	b.n	80251e8 <_svfiprintf_r+0xb0>
 8025518:	782b      	ldrb	r3, [r5, #0]
 802551a:	2a00      	cmp	r2, #0
 802551c:	f47f ae64 	bne.w	80251e8 <_svfiprintf_r+0xb0>
 8025520:	2220      	movs	r2, #32
 8025522:	e661      	b.n	80251e8 <_svfiprintf_r+0xb0>
 8025524:	4628      	mov	r0, r5
 8025526:	2100      	movs	r1, #0
 8025528:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 802552c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8025530:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8025534:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8025538:	4605      	mov	r5, r0
 802553a:	2e09      	cmp	r6, #9
 802553c:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 8025540:	d9f2      	bls.n	8025528 <_svfiprintf_r+0x3f0>
 8025542:	9106      	str	r1, [sp, #24]
 8025544:	e651      	b.n	80251ea <_svfiprintf_r+0xb2>
 8025546:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 802554a:	782b      	ldrb	r3, [r5, #0]
 802554c:	e64c      	b.n	80251e8 <_svfiprintf_r+0xb0>
 802554e:	782b      	ldrb	r3, [r5, #0]
 8025550:	222b      	movs	r2, #43	; 0x2b
 8025552:	e649      	b.n	80251e8 <_svfiprintf_r+0xb0>
 8025554:	4629      	mov	r1, r5
 8025556:	f811 3b01 	ldrb.w	r3, [r1], #1
 802555a:	2b2a      	cmp	r3, #42	; 0x2a
 802555c:	f000 82fb 	beq.w	8025b56 <_svfiprintf_r+0xa1e>
 8025560:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8025564:	2809      	cmp	r0, #9
 8025566:	bf84      	itt	hi
 8025568:	460d      	movhi	r5, r1
 802556a:	f04f 0800 	movhi.w	r8, #0
 802556e:	f63f ae3c 	bhi.w	80251ea <_svfiprintf_r+0xb2>
 8025572:	f04f 0800 	mov.w	r8, #0
 8025576:	f811 3b01 	ldrb.w	r3, [r1], #1
 802557a:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 802557e:	eb00 0848 	add.w	r8, r0, r8, lsl #1
 8025582:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8025586:	2809      	cmp	r0, #9
 8025588:	460d      	mov	r5, r1
 802558a:	d9f4      	bls.n	8025576 <_svfiprintf_r+0x43e>
 802558c:	ea48 78e8 	orr.w	r8, r8, r8, asr #31
 8025590:	e62b      	b.n	80251ea <_svfiprintf_r+0xb2>
 8025592:	f04b 0b20 	orr.w	fp, fp, #32
 8025596:	782b      	ldrb	r3, [r5, #0]
 8025598:	e626      	b.n	80251e8 <_svfiprintf_r+0xb0>
 802559a:	9b07      	ldr	r3, [sp, #28]
 802559c:	2700      	movs	r7, #0
 802559e:	f64e 4018 	movw	r0, #60440	; 0xec18
 80255a2:	f04b 0b02 	orr.w	fp, fp, #2
 80255a6:	1d1e      	adds	r6, r3, #4
 80255a8:	9607      	str	r6, [sp, #28]
 80255aa:	681a      	ldr	r2, [r3, #0]
 80255ac:	2330      	movs	r3, #48	; 0x30
 80255ae:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
 80255b2:	2378      	movs	r3, #120	; 0x78
 80255b4:	4616      	mov	r6, r2
 80255b6:	1bd2      	subs	r2, r2, r7
 80255b8:	f88d 30ad 	strb.w	r3, [sp, #173]	; 0xad
 80255bc:	bf18      	it	ne
 80255be:	2201      	movne	r2, #1
 80255c0:	f6c0 0002 	movt	r0, #2050	; 0x802
 80255c4:	2302      	movs	r3, #2
 80255c6:	9008      	str	r0, [sp, #32]
 80255c8:	e6e9      	b.n	802539e <_svfiprintf_r+0x266>
 80255ca:	9b07      	ldr	r3, [sp, #28]
 80255cc:	2100      	movs	r1, #0
 80255ce:	9e07      	ldr	r6, [sp, #28]
 80255d0:	f88d 10af 	strb.w	r1, [sp, #175]	; 0xaf
 80255d4:	681b      	ldr	r3, [r3, #0]
 80255d6:	3604      	adds	r6, #4
 80255d8:	9607      	str	r6, [sp, #28]
 80255da:	930a      	str	r3, [sp, #40]	; 0x28
 80255dc:	2b00      	cmp	r3, #0
 80255de:	f000 82a7 	beq.w	8025b30 <_svfiprintf_r+0x9f8>
 80255e2:	f1b8 0f00 	cmp.w	r8, #0
 80255e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80255e8:	f2c0 8271 	blt.w	8025ace <_svfiprintf_r+0x996>
 80255ec:	2100      	movs	r1, #0
 80255ee:	4642      	mov	r2, r8
 80255f0:	f7fe ff44 	bl	802447c <memchr>
 80255f4:	2800      	cmp	r0, #0
 80255f6:	f000 82aa 	beq.w	8025b4e <_svfiprintf_r+0xa16>
 80255fa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80255fc:	1b80      	subs	r0, r0, r6
 80255fe:	9004      	str	r0, [sp, #16]
 8025600:	4540      	cmp	r0, r8
 8025602:	f340 827e 	ble.w	8025b02 <_svfiprintf_r+0x9ca>
 8025606:	2300      	movs	r3, #0
 8025608:	f8cd 8010 	str.w	r8, [sp, #16]
 802560c:	9309      	str	r3, [sp, #36]	; 0x24
 802560e:	e6a4      	b.n	802535a <_svfiprintf_r+0x222>
 8025610:	782b      	ldrb	r3, [r5, #0]
 8025612:	4629      	mov	r1, r5
 8025614:	2b6c      	cmp	r3, #108	; 0x6c
 8025616:	bf18      	it	ne
 8025618:	f04b 0b10 	orrne.w	fp, fp, #16
 802561c:	f47f ade4 	bne.w	80251e8 <_svfiprintf_r+0xb0>
 8025620:	3501      	adds	r5, #1
 8025622:	f04b 0b20 	orr.w	fp, fp, #32
 8025626:	784b      	ldrb	r3, [r1, #1]
 8025628:	e5de      	b.n	80251e8 <_svfiprintf_r+0xb0>
 802562a:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 802562e:	782b      	ldrb	r3, [r5, #0]
 8025630:	e5da      	b.n	80251e8 <_svfiprintf_r+0xb0>
 8025632:	f01b 0f20 	tst.w	fp, #32
 8025636:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 802563a:	f040 823e 	bne.w	8025aba <_svfiprintf_r+0x982>
 802563e:	f01b 0f10 	tst.w	fp, #16
 8025642:	f040 824a 	bne.w	8025ada <_svfiprintf_r+0x9a2>
 8025646:	f01b 0f40 	tst.w	fp, #64	; 0x40
 802564a:	f000 8246 	beq.w	8025ada <_svfiprintf_r+0x9a2>
 802564e:	9e07      	ldr	r6, [sp, #28]
 8025650:	6833      	ldr	r3, [r6, #0]
 8025652:	3604      	adds	r6, #4
 8025654:	9607      	str	r6, [sp, #28]
 8025656:	9e05      	ldr	r6, [sp, #20]
 8025658:	801e      	strh	r6, [r3, #0]
 802565a:	e58a      	b.n	8025172 <_svfiprintf_r+0x3a>
 802565c:	f01b 0f20 	tst.w	fp, #32
 8025660:	f64e 4618 	movw	r6, #60440	; 0xec18
 8025664:	f6c0 0602 	movt	r6, #2050	; 0x802
 8025668:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 802566c:	9608      	str	r6, [sp, #32]
 802566e:	f47f af33 	bne.w	80254d8 <_svfiprintf_r+0x3a0>
 8025672:	f01b 0f10 	tst.w	fp, #16
 8025676:	f040 8204 	bne.w	8025a82 <_svfiprintf_r+0x94a>
 802567a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 802567e:	f000 8200 	beq.w	8025a82 <_svfiprintf_r+0x94a>
 8025682:	9807      	ldr	r0, [sp, #28]
 8025684:	2700      	movs	r7, #0
 8025686:	8806      	ldrh	r6, [r0, #0]
 8025688:	3004      	adds	r0, #4
 802568a:	9007      	str	r0, [sp, #28]
 802568c:	e72d      	b.n	80254ea <_svfiprintf_r+0x3b2>
 802568e:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8025692:	2b00      	cmp	r3, #0
 8025694:	f000 80e9 	beq.w	802586a <_svfiprintf_r+0x732>
 8025698:	2601      	movs	r6, #1
 802569a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 802569e:	2000      	movs	r0, #0
 80256a0:	ab1e      	add	r3, sp, #120	; 0x78
 80256a2:	9603      	str	r6, [sp, #12]
 80256a4:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 80256a8:	9604      	str	r6, [sp, #16]
 80256aa:	930a      	str	r3, [sp, #40]	; 0x28
 80256ac:	e6c4      	b.n	8025438 <_svfiprintf_r+0x300>
 80256ae:	2e0a      	cmp	r6, #10
 80256b0:	f177 0000 	sbcs.w	r0, r7, #0
 80256b4:	f0c0 81c2 	bcc.w	8025a3c <_svfiprintf_r+0x904>
 80256b8:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 80256bc:	9503      	str	r5, [sp, #12]
 80256be:	f8cd b010 	str.w	fp, [sp, #16]
 80256c2:	461d      	mov	r5, r3
 80256c4:	46a3      	mov	fp, r4
 80256c6:	4630      	mov	r0, r6
 80256c8:	4639      	mov	r1, r7
 80256ca:	220a      	movs	r2, #10
 80256cc:	2300      	movs	r3, #0
 80256ce:	f000 ff99 	bl	8026604 <__aeabi_uldivmod>
 80256d2:	462c      	mov	r4, r5
 80256d4:	4630      	mov	r0, r6
 80256d6:	4639      	mov	r1, r7
 80256d8:	2300      	movs	r3, #0
 80256da:	3d01      	subs	r5, #1
 80256dc:	f102 0630 	add.w	r6, r2, #48	; 0x30
 80256e0:	220a      	movs	r2, #10
 80256e2:	7026      	strb	r6, [r4, #0]
 80256e4:	f000 ff8e 	bl	8026604 <__aeabi_uldivmod>
 80256e8:	4606      	mov	r6, r0
 80256ea:	460f      	mov	r7, r1
 80256ec:	ea56 0007 	orrs.w	r0, r6, r7
 80256f0:	d1e9      	bne.n	80256c6 <_svfiprintf_r+0x58e>
 80256f2:	940a      	str	r4, [sp, #40]	; 0x28
 80256f4:	465c      	mov	r4, fp
 80256f6:	9d03      	ldr	r5, [sp, #12]
 80256f8:	f8dd b010 	ldr.w	fp, [sp, #16]
 80256fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80256fe:	ebc3 030a 	rsb	r3, r3, sl
 8025702:	9304      	str	r3, [sp, #16]
 8025704:	e627      	b.n	8025356 <_svfiprintf_r+0x21e>
 8025706:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025708:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802570a:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
 802570e:	b161      	cbz	r1, 802572a <_svfiprintf_r+0x5f2>
 8025710:	3301      	adds	r3, #1
 8025712:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
 8025716:	6021      	str	r1, [r4, #0]
 8025718:	2101      	movs	r1, #1
 802571a:	2b07      	cmp	r3, #7
 802571c:	440a      	add	r2, r1
 802571e:	6061      	str	r1, [r4, #4]
 8025720:	9329      	str	r3, [sp, #164]	; 0xa4
 8025722:	922a      	str	r2, [sp, #168]	; 0xa8
 8025724:	f300 8110 	bgt.w	8025948 <_svfiprintf_r+0x810>
 8025728:	3408      	adds	r4, #8
 802572a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802572c:	b15e      	cbz	r6, 8025746 <_svfiprintf_r+0x60e>
 802572e:	3301      	adds	r3, #1
 8025730:	a92b      	add	r1, sp, #172	; 0xac
 8025732:	6021      	str	r1, [r4, #0]
 8025734:	2102      	movs	r1, #2
 8025736:	2b07      	cmp	r3, #7
 8025738:	440a      	add	r2, r1
 802573a:	6061      	str	r1, [r4, #4]
 802573c:	9329      	str	r3, [sp, #164]	; 0xa4
 802573e:	922a      	str	r2, [sp, #168]	; 0xa8
 8025740:	f300 810d 	bgt.w	802595e <_svfiprintf_r+0x826>
 8025744:	3408      	adds	r4, #8
 8025746:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025748:	2e80      	cmp	r6, #128	; 0x80
 802574a:	f000 80a2 	beq.w	8025892 <_svfiprintf_r+0x75a>
 802574e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025750:	9804      	ldr	r0, [sp, #16]
 8025752:	1a0e      	subs	r6, r1, r0
 8025754:	2e00      	cmp	r6, #0
 8025756:	dd29      	ble.n	80257ac <_svfiprintf_r+0x674>
 8025758:	2e10      	cmp	r6, #16
 802575a:	4f86      	ldr	r7, [pc, #536]	; (8025974 <_svfiprintf_r+0x83c>)
 802575c:	bfc8      	it	gt
 802575e:	f04f 0810 	movgt.w	r8, #16
 8025762:	dc03      	bgt.n	802576c <_svfiprintf_r+0x634>
 8025764:	e018      	b.n	8025798 <_svfiprintf_r+0x660>
 8025766:	3e10      	subs	r6, #16
 8025768:	2e10      	cmp	r6, #16
 802576a:	dd15      	ble.n	8025798 <_svfiprintf_r+0x660>
 802576c:	3301      	adds	r3, #1
 802576e:	3210      	adds	r2, #16
 8025770:	e884 0180 	stmia.w	r4, {r7, r8}
 8025774:	3408      	adds	r4, #8
 8025776:	2b07      	cmp	r3, #7
 8025778:	9329      	str	r3, [sp, #164]	; 0xa4
 802577a:	922a      	str	r2, [sp, #168]	; 0xa8
 802577c:	ddf3      	ble.n	8025766 <_svfiprintf_r+0x62e>
 802577e:	9802      	ldr	r0, [sp, #8]
 8025780:	4649      	mov	r1, r9
 8025782:	4652      	mov	r2, sl
 8025784:	ac0e      	add	r4, sp, #56	; 0x38
 8025786:	f7ff fc4b 	bl	8025020 <__ssprint_r>
 802578a:	2800      	cmp	r0, #0
 802578c:	d174      	bne.n	8025878 <_svfiprintf_r+0x740>
 802578e:	3e10      	subs	r6, #16
 8025790:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025792:	2e10      	cmp	r6, #16
 8025794:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025796:	dce9      	bgt.n	802576c <_svfiprintf_r+0x634>
 8025798:	3301      	adds	r3, #1
 802579a:	1992      	adds	r2, r2, r6
 802579c:	2b07      	cmp	r3, #7
 802579e:	6027      	str	r7, [r4, #0]
 80257a0:	6066      	str	r6, [r4, #4]
 80257a2:	9329      	str	r3, [sp, #164]	; 0xa4
 80257a4:	922a      	str	r2, [sp, #168]	; 0xa8
 80257a6:	f300 80c4 	bgt.w	8025932 <_svfiprintf_r+0x7fa>
 80257aa:	3408      	adds	r4, #8
 80257ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80257ae:	3301      	adds	r3, #1
 80257b0:	2b07      	cmp	r3, #7
 80257b2:	9329      	str	r3, [sp, #164]	; 0xa4
 80257b4:	bfd8      	it	le
 80257b6:	f104 0108 	addle.w	r1, r4, #8
 80257ba:	6026      	str	r6, [r4, #0]
 80257bc:	9e04      	ldr	r6, [sp, #16]
 80257be:	4432      	add	r2, r6
 80257c0:	922a      	str	r2, [sp, #168]	; 0xa8
 80257c2:	6066      	str	r6, [r4, #4]
 80257c4:	f300 8096 	bgt.w	80258f4 <_svfiprintf_r+0x7bc>
 80257c8:	f01b 0f04 	tst.w	fp, #4
 80257cc:	d031      	beq.n	8025832 <_svfiprintf_r+0x6fa>
 80257ce:	9806      	ldr	r0, [sp, #24]
 80257d0:	9b03      	ldr	r3, [sp, #12]
 80257d2:	1ac6      	subs	r6, r0, r3
 80257d4:	2e00      	cmp	r6, #0
 80257d6:	dd2c      	ble.n	8025832 <_svfiprintf_r+0x6fa>
 80257d8:	2e10      	cmp	r6, #16
 80257da:	f64e 37c0 	movw	r7, #60352	; 0xebc0
 80257de:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80257e0:	f6c0 0702 	movt	r7, #2050	; 0x802
 80257e4:	dd1c      	ble.n	8025820 <_svfiprintf_r+0x6e8>
 80257e6:	2410      	movs	r4, #16
 80257e8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80257ec:	e002      	b.n	80257f4 <_svfiprintf_r+0x6bc>
 80257ee:	3e10      	subs	r6, #16
 80257f0:	2e10      	cmp	r6, #16
 80257f2:	dd15      	ble.n	8025820 <_svfiprintf_r+0x6e8>
 80257f4:	3301      	adds	r3, #1
 80257f6:	3210      	adds	r2, #16
 80257f8:	600f      	str	r7, [r1, #0]
 80257fa:	604c      	str	r4, [r1, #4]
 80257fc:	3108      	adds	r1, #8
 80257fe:	2b07      	cmp	r3, #7
 8025800:	9329      	str	r3, [sp, #164]	; 0xa4
 8025802:	922a      	str	r2, [sp, #168]	; 0xa8
 8025804:	ddf3      	ble.n	80257ee <_svfiprintf_r+0x6b6>
 8025806:	4649      	mov	r1, r9
 8025808:	4640      	mov	r0, r8
 802580a:	4652      	mov	r2, sl
 802580c:	f7ff fc08 	bl	8025020 <__ssprint_r>
 8025810:	a90e      	add	r1, sp, #56	; 0x38
 8025812:	2800      	cmp	r0, #0
 8025814:	d130      	bne.n	8025878 <_svfiprintf_r+0x740>
 8025816:	3e10      	subs	r6, #16
 8025818:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802581a:	2e10      	cmp	r6, #16
 802581c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802581e:	dce9      	bgt.n	80257f4 <_svfiprintf_r+0x6bc>
 8025820:	3301      	adds	r3, #1
 8025822:	18b2      	adds	r2, r6, r2
 8025824:	2b07      	cmp	r3, #7
 8025826:	600f      	str	r7, [r1, #0]
 8025828:	604e      	str	r6, [r1, #4]
 802582a:	9329      	str	r3, [sp, #164]	; 0xa4
 802582c:	922a      	str	r2, [sp, #168]	; 0xa8
 802582e:	f300 80fb 	bgt.w	8025a28 <_svfiprintf_r+0x8f0>
 8025832:	9e05      	ldr	r6, [sp, #20]
 8025834:	9b03      	ldr	r3, [sp, #12]
 8025836:	9806      	ldr	r0, [sp, #24]
 8025838:	4283      	cmp	r3, r0
 802583a:	bfac      	ite	ge
 802583c:	18f6      	addge	r6, r6, r3
 802583e:	1836      	addlt	r6, r6, r0
 8025840:	9605      	str	r6, [sp, #20]
 8025842:	2a00      	cmp	r2, #0
 8025844:	d160      	bne.n	8025908 <_svfiprintf_r+0x7d0>
 8025846:	782b      	ldrb	r3, [r5, #0]
 8025848:	2600      	movs	r6, #0
 802584a:	ac0e      	add	r4, sp, #56	; 0x38
 802584c:	9629      	str	r6, [sp, #164]	; 0xa4
 802584e:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 8025852:	bf18      	it	ne
 8025854:	2201      	movne	r2, #1
 8025856:	2b00      	cmp	r3, #0
 8025858:	bf0c      	ite	eq
 802585a:	2300      	moveq	r3, #0
 802585c:	f002 0301 	andne.w	r3, r2, #1
 8025860:	2b00      	cmp	r3, #0
 8025862:	f47f ac93 	bne.w	802518c <_svfiprintf_r+0x54>
 8025866:	462e      	mov	r6, r5
 8025868:	e4b0      	b.n	80251cc <_svfiprintf_r+0x94>
 802586a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802586c:	b123      	cbz	r3, 8025878 <_svfiprintf_r+0x740>
 802586e:	9802      	ldr	r0, [sp, #8]
 8025870:	4649      	mov	r1, r9
 8025872:	aa28      	add	r2, sp, #160	; 0xa0
 8025874:	f7ff fbd4 	bl	8025020 <__ssprint_r>
 8025878:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 802587c:	9e05      	ldr	r6, [sp, #20]
 802587e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8025882:	bf18      	it	ne
 8025884:	f04f 36ff 	movne.w	r6, #4294967295
 8025888:	9605      	str	r6, [sp, #20]
 802588a:	9805      	ldr	r0, [sp, #20]
 802588c:	b02d      	add	sp, #180	; 0xb4
 802588e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025892:	9806      	ldr	r0, [sp, #24]
 8025894:	9903      	ldr	r1, [sp, #12]
 8025896:	1a46      	subs	r6, r0, r1
 8025898:	2e00      	cmp	r6, #0
 802589a:	f77f af58 	ble.w	802574e <_svfiprintf_r+0x616>
 802589e:	2e10      	cmp	r6, #16
 80258a0:	4f34      	ldr	r7, [pc, #208]	; (8025974 <_svfiprintf_r+0x83c>)
 80258a2:	bfc8      	it	gt
 80258a4:	f04f 0810 	movgt.w	r8, #16
 80258a8:	dc03      	bgt.n	80258b2 <_svfiprintf_r+0x77a>
 80258aa:	e018      	b.n	80258de <_svfiprintf_r+0x7a6>
 80258ac:	3e10      	subs	r6, #16
 80258ae:	2e10      	cmp	r6, #16
 80258b0:	dd15      	ble.n	80258de <_svfiprintf_r+0x7a6>
 80258b2:	3301      	adds	r3, #1
 80258b4:	3210      	adds	r2, #16
 80258b6:	e884 0180 	stmia.w	r4, {r7, r8}
 80258ba:	3408      	adds	r4, #8
 80258bc:	2b07      	cmp	r3, #7
 80258be:	9329      	str	r3, [sp, #164]	; 0xa4
 80258c0:	922a      	str	r2, [sp, #168]	; 0xa8
 80258c2:	ddf3      	ble.n	80258ac <_svfiprintf_r+0x774>
 80258c4:	9802      	ldr	r0, [sp, #8]
 80258c6:	4649      	mov	r1, r9
 80258c8:	4652      	mov	r2, sl
 80258ca:	ac0e      	add	r4, sp, #56	; 0x38
 80258cc:	f7ff fba8 	bl	8025020 <__ssprint_r>
 80258d0:	2800      	cmp	r0, #0
 80258d2:	d1d1      	bne.n	8025878 <_svfiprintf_r+0x740>
 80258d4:	3e10      	subs	r6, #16
 80258d6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80258d8:	2e10      	cmp	r6, #16
 80258da:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80258dc:	dce9      	bgt.n	80258b2 <_svfiprintf_r+0x77a>
 80258de:	3301      	adds	r3, #1
 80258e0:	1992      	adds	r2, r2, r6
 80258e2:	2b07      	cmp	r3, #7
 80258e4:	6027      	str	r7, [r4, #0]
 80258e6:	6066      	str	r6, [r4, #4]
 80258e8:	9329      	str	r3, [sp, #164]	; 0xa4
 80258ea:	922a      	str	r2, [sp, #168]	; 0xa8
 80258ec:	f300 80fd 	bgt.w	8025aea <_svfiprintf_r+0x9b2>
 80258f0:	3408      	adds	r4, #8
 80258f2:	e72c      	b.n	802574e <_svfiprintf_r+0x616>
 80258f4:	9802      	ldr	r0, [sp, #8]
 80258f6:	4649      	mov	r1, r9
 80258f8:	4652      	mov	r2, sl
 80258fa:	f7ff fb91 	bl	8025020 <__ssprint_r>
 80258fe:	2800      	cmp	r0, #0
 8025900:	d1ba      	bne.n	8025878 <_svfiprintf_r+0x740>
 8025902:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025904:	a90e      	add	r1, sp, #56	; 0x38
 8025906:	e75f      	b.n	80257c8 <_svfiprintf_r+0x690>
 8025908:	9802      	ldr	r0, [sp, #8]
 802590a:	4649      	mov	r1, r9
 802590c:	4652      	mov	r2, sl
 802590e:	f7ff fb87 	bl	8025020 <__ssprint_r>
 8025912:	2800      	cmp	r0, #0
 8025914:	d097      	beq.n	8025846 <_svfiprintf_r+0x70e>
 8025916:	e7af      	b.n	8025878 <_svfiprintf_r+0x740>
 8025918:	9204      	str	r2, [sp, #16]
 802591a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 802591e:	e51a      	b.n	8025356 <_svfiprintf_r+0x21e>
 8025920:	9802      	ldr	r0, [sp, #8]
 8025922:	4649      	mov	r1, r9
 8025924:	4652      	mov	r2, sl
 8025926:	f7ff fb7b 	bl	8025020 <__ssprint_r>
 802592a:	2800      	cmp	r0, #0
 802592c:	d1a4      	bne.n	8025878 <_svfiprintf_r+0x740>
 802592e:	ac0e      	add	r4, sp, #56	; 0x38
 8025930:	e449      	b.n	80251c6 <_svfiprintf_r+0x8e>
 8025932:	9802      	ldr	r0, [sp, #8]
 8025934:	4649      	mov	r1, r9
 8025936:	4652      	mov	r2, sl
 8025938:	f7ff fb72 	bl	8025020 <__ssprint_r>
 802593c:	2800      	cmp	r0, #0
 802593e:	d19b      	bne.n	8025878 <_svfiprintf_r+0x740>
 8025940:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025942:	ac0e      	add	r4, sp, #56	; 0x38
 8025944:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025946:	e731      	b.n	80257ac <_svfiprintf_r+0x674>
 8025948:	9802      	ldr	r0, [sp, #8]
 802594a:	4649      	mov	r1, r9
 802594c:	4652      	mov	r2, sl
 802594e:	f7ff fb67 	bl	8025020 <__ssprint_r>
 8025952:	2800      	cmp	r0, #0
 8025954:	d190      	bne.n	8025878 <_svfiprintf_r+0x740>
 8025956:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025958:	ac0e      	add	r4, sp, #56	; 0x38
 802595a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802595c:	e6e5      	b.n	802572a <_svfiprintf_r+0x5f2>
 802595e:	9802      	ldr	r0, [sp, #8]
 8025960:	4649      	mov	r1, r9
 8025962:	4652      	mov	r2, sl
 8025964:	f7ff fb5c 	bl	8025020 <__ssprint_r>
 8025968:	2800      	cmp	r0, #0
 802596a:	d185      	bne.n	8025878 <_svfiprintf_r+0x740>
 802596c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802596e:	ac0e      	add	r4, sp, #56	; 0x38
 8025970:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025972:	e6e8      	b.n	8025746 <_svfiprintf_r+0x60e>
 8025974:	0802ebd0 	.word	0x0802ebd0
 8025978:	46ac      	mov	ip, r5
 802597a:	f10d 019f 	add.w	r1, sp, #159	; 0x9f
 802597e:	4625      	mov	r5, r4
 8025980:	f006 020f 	and.w	r2, r6, #15
 8025984:	0933      	lsrs	r3, r6, #4
 8025986:	9e08      	ldr	r6, [sp, #32]
 8025988:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 802598c:	093c      	lsrs	r4, r7, #4
 802598e:	4627      	mov	r7, r4
 8025990:	5cb0      	ldrb	r0, [r6, r2]
 8025992:	460a      	mov	r2, r1
 8025994:	461e      	mov	r6, r3
 8025996:	3901      	subs	r1, #1
 8025998:	7010      	strb	r0, [r2, #0]
 802599a:	ea56 0007 	orrs.w	r0, r6, r7
 802599e:	d1ef      	bne.n	8025980 <_svfiprintf_r+0x848>
 80259a0:	462c      	mov	r4, r5
 80259a2:	ebc2 030a 	rsb	r3, r2, sl
 80259a6:	920a      	str	r2, [sp, #40]	; 0x28
 80259a8:	4665      	mov	r5, ip
 80259aa:	9304      	str	r3, [sp, #16]
 80259ac:	e4d3      	b.n	8025356 <_svfiprintf_r+0x21e>
 80259ae:	f01b 0f10 	tst.w	fp, #16
 80259b2:	d14c      	bne.n	8025a4e <_svfiprintf_r+0x916>
 80259b4:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80259b8:	d049      	beq.n	8025a4e <_svfiprintf_r+0x916>
 80259ba:	9807      	ldr	r0, [sp, #28]
 80259bc:	f9b0 6000 	ldrsh.w	r6, [r0]
 80259c0:	3004      	adds	r0, #4
 80259c2:	9007      	str	r0, [sp, #28]
 80259c4:	4632      	mov	r2, r6
 80259c6:	17f7      	asrs	r7, r6, #31
 80259c8:	463b      	mov	r3, r7
 80259ca:	e481      	b.n	80252d0 <_svfiprintf_r+0x198>
 80259cc:	2302      	movs	r3, #2
 80259ce:	e4e6      	b.n	802539e <_svfiprintf_r+0x266>
 80259d0:	f01b 0210 	ands.w	r2, fp, #16
 80259d4:	d167      	bne.n	8025aa6 <_svfiprintf_r+0x96e>
 80259d6:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80259da:	d064      	beq.n	8025aa6 <_svfiprintf_r+0x96e>
 80259dc:	9807      	ldr	r0, [sp, #28]
 80259de:	4613      	mov	r3, r2
 80259e0:	8806      	ldrh	r6, [r0, #0]
 80259e2:	2700      	movs	r7, #0
 80259e4:	3004      	adds	r0, #4
 80259e6:	ea56 0107 	orrs.w	r1, r6, r7
 80259ea:	9007      	str	r0, [sp, #28]
 80259ec:	bf0c      	ite	eq
 80259ee:	2200      	moveq	r2, #0
 80259f0:	2201      	movne	r2, #1
 80259f2:	e4d4      	b.n	802539e <_svfiprintf_r+0x266>
 80259f4:	f01b 0f10 	tst.w	fp, #16
 80259f8:	d14a      	bne.n	8025a90 <_svfiprintf_r+0x958>
 80259fa:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80259fe:	d047      	beq.n	8025a90 <_svfiprintf_r+0x958>
 8025a00:	9807      	ldr	r0, [sp, #28]
 8025a02:	2301      	movs	r3, #1
 8025a04:	8806      	ldrh	r6, [r0, #0]
 8025a06:	e7ec      	b.n	80259e2 <_svfiprintf_r+0x8aa>
 8025a08:	9802      	ldr	r0, [sp, #8]
 8025a0a:	4649      	mov	r1, r9
 8025a0c:	4652      	mov	r2, sl
 8025a0e:	f7ff fb07 	bl	8025020 <__ssprint_r>
 8025a12:	2800      	cmp	r0, #0
 8025a14:	f47f af30 	bne.w	8025878 <_svfiprintf_r+0x740>
 8025a18:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025a1a:	ac0e      	add	r4, sp, #56	; 0x38
 8025a1c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025a1e:	e674      	b.n	802570a <_svfiprintf_r+0x5d2>
 8025a20:	782b      	ldrb	r3, [r5, #0]
 8025a22:	9007      	str	r0, [sp, #28]
 8025a24:	f7ff bbe0 	b.w	80251e8 <_svfiprintf_r+0xb0>
 8025a28:	9802      	ldr	r0, [sp, #8]
 8025a2a:	4649      	mov	r1, r9
 8025a2c:	4652      	mov	r2, sl
 8025a2e:	f7ff faf7 	bl	8025020 <__ssprint_r>
 8025a32:	2800      	cmp	r0, #0
 8025a34:	f47f af20 	bne.w	8025878 <_svfiprintf_r+0x740>
 8025a38:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025a3a:	e6fa      	b.n	8025832 <_svfiprintf_r+0x6fa>
 8025a3c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025a3e:	3630      	adds	r6, #48	; 0x30
 8025a40:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 8025a44:	f88d 609f 	strb.w	r6, [sp, #159]	; 0x9f
 8025a48:	930a      	str	r3, [sp, #40]	; 0x28
 8025a4a:	9104      	str	r1, [sp, #16]
 8025a4c:	e483      	b.n	8025356 <_svfiprintf_r+0x21e>
 8025a4e:	9e07      	ldr	r6, [sp, #28]
 8025a50:	6833      	ldr	r3, [r6, #0]
 8025a52:	3604      	adds	r6, #4
 8025a54:	9607      	str	r6, [sp, #28]
 8025a56:	461a      	mov	r2, r3
 8025a58:	461e      	mov	r6, r3
 8025a5a:	17df      	asrs	r7, r3, #31
 8025a5c:	463b      	mov	r3, r7
 8025a5e:	2a00      	cmp	r2, #0
 8025a60:	f173 0000 	sbcs.w	r0, r3, #0
 8025a64:	f6bf ac39 	bge.w	80252da <_svfiprintf_r+0x1a2>
 8025a68:	4276      	negs	r6, r6
 8025a6a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8025a6e:	232d      	movs	r3, #45	; 0x2d
 8025a70:	ea56 0207 	orrs.w	r2, r6, r7
 8025a74:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8025a78:	bf0c      	ite	eq
 8025a7a:	2200      	moveq	r2, #0
 8025a7c:	2201      	movne	r2, #1
 8025a7e:	2301      	movs	r3, #1
 8025a80:	e432      	b.n	80252e8 <_svfiprintf_r+0x1b0>
 8025a82:	9e07      	ldr	r6, [sp, #28]
 8025a84:	2700      	movs	r7, #0
 8025a86:	6832      	ldr	r2, [r6, #0]
 8025a88:	3604      	adds	r6, #4
 8025a8a:	9607      	str	r6, [sp, #28]
 8025a8c:	4616      	mov	r6, r2
 8025a8e:	e52c      	b.n	80254ea <_svfiprintf_r+0x3b2>
 8025a90:	9e07      	ldr	r6, [sp, #28]
 8025a92:	2301      	movs	r3, #1
 8025a94:	6832      	ldr	r2, [r6, #0]
 8025a96:	3604      	adds	r6, #4
 8025a98:	9607      	str	r6, [sp, #28]
 8025a9a:	4616      	mov	r6, r2
 8025a9c:	3200      	adds	r2, #0
 8025a9e:	bf18      	it	ne
 8025aa0:	2201      	movne	r2, #1
 8025aa2:	2700      	movs	r7, #0
 8025aa4:	e47b      	b.n	802539e <_svfiprintf_r+0x266>
 8025aa6:	9e07      	ldr	r6, [sp, #28]
 8025aa8:	6832      	ldr	r2, [r6, #0]
 8025aaa:	3604      	adds	r6, #4
 8025aac:	9607      	str	r6, [sp, #28]
 8025aae:	4616      	mov	r6, r2
 8025ab0:	3200      	adds	r2, #0
 8025ab2:	bf18      	it	ne
 8025ab4:	2201      	movne	r2, #1
 8025ab6:	2700      	movs	r7, #0
 8025ab8:	e471      	b.n	802539e <_svfiprintf_r+0x266>
 8025aba:	9e07      	ldr	r6, [sp, #28]
 8025abc:	9a05      	ldr	r2, [sp, #20]
 8025abe:	6833      	ldr	r3, [r6, #0]
 8025ac0:	3604      	adds	r6, #4
 8025ac2:	17d1      	asrs	r1, r2, #31
 8025ac4:	9607      	str	r6, [sp, #28]
 8025ac6:	601a      	str	r2, [r3, #0]
 8025ac8:	6059      	str	r1, [r3, #4]
 8025aca:	f7ff bb52 	b.w	8025172 <_svfiprintf_r+0x3a>
 8025ace:	2300      	movs	r3, #0
 8025ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8025ad2:	f7fb fe69 	bl	80217a8 <strlen>
 8025ad6:	9004      	str	r0, [sp, #16]
 8025ad8:	e43f      	b.n	802535a <_svfiprintf_r+0x222>
 8025ada:	9e07      	ldr	r6, [sp, #28]
 8025adc:	6833      	ldr	r3, [r6, #0]
 8025ade:	3604      	adds	r6, #4
 8025ae0:	9607      	str	r6, [sp, #28]
 8025ae2:	9e05      	ldr	r6, [sp, #20]
 8025ae4:	601e      	str	r6, [r3, #0]
 8025ae6:	f7ff bb44 	b.w	8025172 <_svfiprintf_r+0x3a>
 8025aea:	9802      	ldr	r0, [sp, #8]
 8025aec:	4649      	mov	r1, r9
 8025aee:	4652      	mov	r2, sl
 8025af0:	f7ff fa96 	bl	8025020 <__ssprint_r>
 8025af4:	2800      	cmp	r0, #0
 8025af6:	f47f aebf 	bne.w	8025878 <_svfiprintf_r+0x740>
 8025afa:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025afc:	ac0e      	add	r4, sp, #56	; 0x38
 8025afe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025b00:	e625      	b.n	802574e <_svfiprintf_r+0x616>
 8025b02:	2600      	movs	r6, #0
 8025b04:	9609      	str	r6, [sp, #36]	; 0x24
 8025b06:	e428      	b.n	802535a <_svfiprintf_r+0x222>
 8025b08:	2140      	movs	r1, #64	; 0x40
 8025b0a:	9200      	str	r2, [sp, #0]
 8025b0c:	f7fe f9f6 	bl	8023efc <_malloc_r>
 8025b10:	9a00      	ldr	r2, [sp, #0]
 8025b12:	f8c9 0000 	str.w	r0, [r9]
 8025b16:	f8c9 0010 	str.w	r0, [r9, #16]
 8025b1a:	b350      	cbz	r0, 8025b72 <_svfiprintf_r+0xa3a>
 8025b1c:	2340      	movs	r3, #64	; 0x40
 8025b1e:	f8c9 3014 	str.w	r3, [r9, #20]
 8025b22:	f7ff bb16 	b.w	8025152 <_svfiprintf_r+0x1a>
 8025b26:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8025b28:	ebc6 060a 	rsb	r6, r6, sl
 8025b2c:	9604      	str	r6, [sp, #16]
 8025b2e:	e412      	b.n	8025356 <_svfiprintf_r+0x21e>
 8025b30:	f1b8 0f06 	cmp.w	r8, #6
 8025b34:	bf34      	ite	cc
 8025b36:	4643      	movcc	r3, r8
 8025b38:	2306      	movcs	r3, #6
 8025b3a:	f64e 462c 	movw	r6, #60460	; 0xec2c
 8025b3e:	9304      	str	r3, [sp, #16]
 8025b40:	f6c0 0602 	movt	r6, #2050	; 0x802
 8025b44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025b48:	960a      	str	r6, [sp, #40]	; 0x28
 8025b4a:	9303      	str	r3, [sp, #12]
 8025b4c:	e474      	b.n	8025438 <_svfiprintf_r+0x300>
 8025b4e:	f8cd 8010 	str.w	r8, [sp, #16]
 8025b52:	9009      	str	r0, [sp, #36]	; 0x24
 8025b54:	e401      	b.n	802535a <_svfiprintf_r+0x222>
 8025b56:	9e07      	ldr	r6, [sp, #28]
 8025b58:	786b      	ldrb	r3, [r5, #1]
 8025b5a:	460d      	mov	r5, r1
 8025b5c:	1d30      	adds	r0, r6, #4
 8025b5e:	9007      	str	r0, [sp, #28]
 8025b60:	f8d6 8000 	ldr.w	r8, [r6]
 8025b64:	f1b8 0f00 	cmp.w	r8, #0
 8025b68:	bfb8      	it	lt
 8025b6a:	f04f 38ff 	movlt.w	r8, #4294967295
 8025b6e:	f7ff bb3b 	b.w	80251e8 <_svfiprintf_r+0xb0>
 8025b72:	f04f 36ff 	mov.w	r6, #4294967295
 8025b76:	9605      	str	r6, [sp, #20]
 8025b78:	9e02      	ldr	r6, [sp, #8]
 8025b7a:	230c      	movs	r3, #12
 8025b7c:	6033      	str	r3, [r6, #0]
 8025b7e:	e684      	b.n	802588a <_svfiprintf_r+0x752>

08025b80 <_calloc_r>:
 8025b80:	b510      	push	{r4, lr}
 8025b82:	fb01 f102 	mul.w	r1, r1, r2
 8025b86:	f7fe f9b9 	bl	8023efc <_malloc_r>
 8025b8a:	4604      	mov	r4, r0
 8025b8c:	b308      	cbz	r0, 8025bd2 <_calloc_r+0x52>
 8025b8e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8025b92:	f022 0203 	bic.w	r2, r2, #3
 8025b96:	3a04      	subs	r2, #4
 8025b98:	2a24      	cmp	r2, #36	; 0x24
 8025b9a:	d81c      	bhi.n	8025bd6 <_calloc_r+0x56>
 8025b9c:	2a13      	cmp	r2, #19
 8025b9e:	bf98      	it	ls
 8025ba0:	4602      	movls	r2, r0
 8025ba2:	d912      	bls.n	8025bca <_calloc_r+0x4a>
 8025ba4:	2300      	movs	r3, #0
 8025ba6:	2a1b      	cmp	r2, #27
 8025ba8:	6003      	str	r3, [r0, #0]
 8025baa:	bf98      	it	ls
 8025bac:	f100 0208 	addls.w	r2, r0, #8
 8025bb0:	6043      	str	r3, [r0, #4]
 8025bb2:	d90a      	bls.n	8025bca <_calloc_r+0x4a>
 8025bb4:	2a24      	cmp	r2, #36	; 0x24
 8025bb6:	6083      	str	r3, [r0, #8]
 8025bb8:	bf14      	ite	ne
 8025bba:	f100 0210 	addne.w	r2, r0, #16
 8025bbe:	f100 0218 	addeq.w	r2, r0, #24
 8025bc2:	60c3      	str	r3, [r0, #12]
 8025bc4:	bf04      	itt	eq
 8025bc6:	6103      	streq	r3, [r0, #16]
 8025bc8:	6143      	streq	r3, [r0, #20]
 8025bca:	2300      	movs	r3, #0
 8025bcc:	6013      	str	r3, [r2, #0]
 8025bce:	6053      	str	r3, [r2, #4]
 8025bd0:	6093      	str	r3, [r2, #8]
 8025bd2:	4620      	mov	r0, r4
 8025bd4:	bd10      	pop	{r4, pc}
 8025bd6:	2100      	movs	r1, #0
 8025bd8:	f000 f97a 	bl	8025ed0 <memset>
 8025bdc:	4620      	mov	r0, r4
 8025bde:	bd10      	pop	{r4, pc}

08025be0 <_malloc_trim_r>:
 8025be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025be2:	f240 2494 	movw	r4, #660	; 0x294
 8025be6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8025bea:	460f      	mov	r7, r1
 8025bec:	4605      	mov	r5, r0
 8025bee:	f7fe fc89 	bl	8024504 <__malloc_lock>
 8025bf2:	68a3      	ldr	r3, [r4, #8]
 8025bf4:	4628      	mov	r0, r5
 8025bf6:	685e      	ldr	r6, [r3, #4]
 8025bf8:	f026 0603 	bic.w	r6, r6, #3
 8025bfc:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
 8025c00:	330f      	adds	r3, #15
 8025c02:	1bdf      	subs	r7, r3, r7
 8025c04:	0b3f      	lsrs	r7, r7, #12
 8025c06:	3f01      	subs	r7, #1
 8025c08:	033f      	lsls	r7, r7, #12
 8025c0a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8025c0e:	db07      	blt.n	8025c20 <_malloc_trim_r+0x40>
 8025c10:	2100      	movs	r1, #0
 8025c12:	f7ff f903 	bl	8024e1c <_sbrk_r>
 8025c16:	68a3      	ldr	r3, [r4, #8]
 8025c18:	199b      	adds	r3, r3, r6
 8025c1a:	4298      	cmp	r0, r3
 8025c1c:	4628      	mov	r0, r5
 8025c1e:	d003      	beq.n	8025c28 <_malloc_trim_r+0x48>
 8025c20:	f7fe fc72 	bl	8024508 <__malloc_unlock>
 8025c24:	2000      	movs	r0, #0
 8025c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025c28:	4279      	negs	r1, r7
 8025c2a:	f7ff f8f7 	bl	8024e1c <_sbrk_r>
 8025c2e:	3001      	adds	r0, #1
 8025c30:	d010      	beq.n	8025c54 <_malloc_trim_r+0x74>
 8025c32:	f640 031c 	movw	r3, #2076	; 0x81c
 8025c36:	68a1      	ldr	r1, [r4, #8]
 8025c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8025c3c:	1bf6      	subs	r6, r6, r7
 8025c3e:	4628      	mov	r0, r5
 8025c40:	f046 0601 	orr.w	r6, r6, #1
 8025c44:	681a      	ldr	r2, [r3, #0]
 8025c46:	604e      	str	r6, [r1, #4]
 8025c48:	1bd7      	subs	r7, r2, r7
 8025c4a:	601f      	str	r7, [r3, #0]
 8025c4c:	f7fe fc5c 	bl	8024508 <__malloc_unlock>
 8025c50:	2001      	movs	r0, #1
 8025c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025c54:	2100      	movs	r1, #0
 8025c56:	4628      	mov	r0, r5
 8025c58:	f7ff f8e0 	bl	8024e1c <_sbrk_r>
 8025c5c:	68a3      	ldr	r3, [r4, #8]
 8025c5e:	1ac2      	subs	r2, r0, r3
 8025c60:	2a0f      	cmp	r2, #15
 8025c62:	dd0d      	ble.n	8025c80 <_malloc_trim_r+0xa0>
 8025c64:	f240 649c 	movw	r4, #1692	; 0x69c
 8025c68:	f640 011c 	movw	r1, #2076	; 0x81c
 8025c6c:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8025c70:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8025c74:	f042 0201 	orr.w	r2, r2, #1
 8025c78:	605a      	str	r2, [r3, #4]
 8025c7a:	6823      	ldr	r3, [r4, #0]
 8025c7c:	1ac0      	subs	r0, r0, r3
 8025c7e:	6008      	str	r0, [r1, #0]
 8025c80:	4628      	mov	r0, r5
 8025c82:	e7cd      	b.n	8025c20 <_malloc_trim_r+0x40>

08025c84 <_free_r>:
 8025c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025c86:	460d      	mov	r5, r1
 8025c88:	4604      	mov	r4, r0
 8025c8a:	2900      	cmp	r1, #0
 8025c8c:	d075      	beq.n	8025d7a <_free_r+0xf6>
 8025c8e:	f7fe fc39 	bl	8024504 <__malloc_lock>
 8025c92:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8025c96:	f240 2094 	movw	r0, #660	; 0x294
 8025c9a:	f1a5 0108 	sub.w	r1, r5, #8
 8025c9e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8025ca2:	f026 0301 	bic.w	r3, r6, #1
 8025ca6:	18ca      	adds	r2, r1, r3
 8025ca8:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8025cac:	6857      	ldr	r7, [r2, #4]
 8025cae:	4594      	cmp	ip, r2
 8025cb0:	f027 0703 	bic.w	r7, r7, #3
 8025cb4:	d07e      	beq.n	8025db4 <_free_r+0x130>
 8025cb6:	f016 0601 	ands.w	r6, r6, #1
 8025cba:	6057      	str	r7, [r2, #4]
 8025cbc:	d04d      	beq.n	8025d5a <_free_r+0xd6>
 8025cbe:	2600      	movs	r6, #0
 8025cc0:	19d5      	adds	r5, r2, r7
 8025cc2:	686d      	ldr	r5, [r5, #4]
 8025cc4:	f015 0f01 	tst.w	r5, #1
 8025cc8:	d106      	bne.n	8025cd8 <_free_r+0x54>
 8025cca:	19db      	adds	r3, r3, r7
 8025ccc:	6895      	ldr	r5, [r2, #8]
 8025cce:	2e00      	cmp	r6, #0
 8025cd0:	d064      	beq.n	8025d9c <_free_r+0x118>
 8025cd2:	68d2      	ldr	r2, [r2, #12]
 8025cd4:	60ea      	str	r2, [r5, #12]
 8025cd6:	6095      	str	r5, [r2, #8]
 8025cd8:	f043 0201 	orr.w	r2, r3, #1
 8025cdc:	50cb      	str	r3, [r1, r3]
 8025cde:	604a      	str	r2, [r1, #4]
 8025ce0:	2e00      	cmp	r6, #0
 8025ce2:	d135      	bne.n	8025d50 <_free_r+0xcc>
 8025ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025ce8:	d348      	bcc.n	8025d7c <_free_r+0xf8>
 8025cea:	099e      	lsrs	r6, r3, #6
 8025cec:	0a5a      	lsrs	r2, r3, #9
 8025cee:	3638      	adds	r6, #56	; 0x38
 8025cf0:	00f5      	lsls	r5, r6, #3
 8025cf2:	2a04      	cmp	r2, #4
 8025cf4:	d916      	bls.n	8025d24 <_free_r+0xa0>
 8025cf6:	f102 065b 	add.w	r6, r2, #91	; 0x5b
 8025cfa:	00f5      	lsls	r5, r6, #3
 8025cfc:	2a14      	cmp	r2, #20
 8025cfe:	d911      	bls.n	8025d24 <_free_r+0xa0>
 8025d00:	0b1e      	lsrs	r6, r3, #12
 8025d02:	366e      	adds	r6, #110	; 0x6e
 8025d04:	00f5      	lsls	r5, r6, #3
 8025d06:	2a54      	cmp	r2, #84	; 0x54
 8025d08:	d90c      	bls.n	8025d24 <_free_r+0xa0>
 8025d0a:	0bde      	lsrs	r6, r3, #15
 8025d0c:	3677      	adds	r6, #119	; 0x77
 8025d0e:	00f5      	lsls	r5, r6, #3
 8025d10:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8025d14:	d906      	bls.n	8025d24 <_free_r+0xa0>
 8025d16:	f240 5554 	movw	r5, #1364	; 0x554
 8025d1a:	42aa      	cmp	r2, r5
 8025d1c:	d874      	bhi.n	8025e08 <_free_r+0x184>
 8025d1e:	0c9e      	lsrs	r6, r3, #18
 8025d20:	367c      	adds	r6, #124	; 0x7c
 8025d22:	00f5      	lsls	r5, r6, #3
 8025d24:	1940      	adds	r0, r0, r5
 8025d26:	f240 2594 	movw	r5, #660	; 0x294
 8025d2a:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8025d2e:	6882      	ldr	r2, [r0, #8]
 8025d30:	4282      	cmp	r2, r0
 8025d32:	d103      	bne.n	8025d3c <_free_r+0xb8>
 8025d34:	e05f      	b.n	8025df6 <_free_r+0x172>
 8025d36:	6892      	ldr	r2, [r2, #8]
 8025d38:	4290      	cmp	r0, r2
 8025d3a:	d004      	beq.n	8025d46 <_free_r+0xc2>
 8025d3c:	6855      	ldr	r5, [r2, #4]
 8025d3e:	f025 0503 	bic.w	r5, r5, #3
 8025d42:	42ab      	cmp	r3, r5
 8025d44:	d3f7      	bcc.n	8025d36 <_free_r+0xb2>
 8025d46:	68d3      	ldr	r3, [r2, #12]
 8025d48:	60cb      	str	r3, [r1, #12]
 8025d4a:	608a      	str	r2, [r1, #8]
 8025d4c:	60d1      	str	r1, [r2, #12]
 8025d4e:	6099      	str	r1, [r3, #8]
 8025d50:	4620      	mov	r0, r4
 8025d52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8025d56:	f7fe bbd7 	b.w	8024508 <__malloc_unlock>
 8025d5a:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8025d5e:	f100 0c08 	add.w	ip, r0, #8
 8025d62:	1b49      	subs	r1, r1, r5
 8025d64:	195b      	adds	r3, r3, r5
 8025d66:	688d      	ldr	r5, [r1, #8]
 8025d68:	4565      	cmp	r5, ip
 8025d6a:	d042      	beq.n	8025df2 <_free_r+0x16e>
 8025d6c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8025d70:	f8c5 c00c 	str.w	ip, [r5, #12]
 8025d74:	f8cc 5008 	str.w	r5, [ip, #8]
 8025d78:	e7a2      	b.n	8025cc0 <_free_r+0x3c>
 8025d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025d7c:	08db      	lsrs	r3, r3, #3
 8025d7e:	2501      	movs	r5, #1
 8025d80:	6846      	ldr	r6, [r0, #4]
 8025d82:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8025d86:	109b      	asrs	r3, r3, #2
 8025d88:	fa05 f303 	lsl.w	r3, r5, r3
 8025d8c:	60ca      	str	r2, [r1, #12]
 8025d8e:	6895      	ldr	r5, [r2, #8]
 8025d90:	4333      	orrs	r3, r6
 8025d92:	6043      	str	r3, [r0, #4]
 8025d94:	608d      	str	r5, [r1, #8]
 8025d96:	60e9      	str	r1, [r5, #12]
 8025d98:	6091      	str	r1, [r2, #8]
 8025d9a:	e7d9      	b.n	8025d50 <_free_r+0xcc>
 8025d9c:	4f1c      	ldr	r7, [pc, #112]	; (8025e10 <_free_r+0x18c>)
 8025d9e:	42bd      	cmp	r5, r7
 8025da0:	d197      	bne.n	8025cd2 <_free_r+0x4e>
 8025da2:	6141      	str	r1, [r0, #20]
 8025da4:	f043 0201 	orr.w	r2, r3, #1
 8025da8:	6101      	str	r1, [r0, #16]
 8025daa:	60cd      	str	r5, [r1, #12]
 8025dac:	608d      	str	r5, [r1, #8]
 8025dae:	604a      	str	r2, [r1, #4]
 8025db0:	50cb      	str	r3, [r1, r3]
 8025db2:	e7cd      	b.n	8025d50 <_free_r+0xcc>
 8025db4:	07f2      	lsls	r2, r6, #31
 8025db6:	443b      	add	r3, r7
 8025db8:	d407      	bmi.n	8025dca <_free_r+0x146>
 8025dba:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8025dbe:	1a89      	subs	r1, r1, r2
 8025dc0:	189b      	adds	r3, r3, r2
 8025dc2:	688d      	ldr	r5, [r1, #8]
 8025dc4:	68ca      	ldr	r2, [r1, #12]
 8025dc6:	60ea      	str	r2, [r5, #12]
 8025dc8:	6095      	str	r5, [r2, #8]
 8025dca:	f240 62a0 	movw	r2, #1696	; 0x6a0
 8025dce:	f043 0501 	orr.w	r5, r3, #1
 8025dd2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8025dd6:	604d      	str	r5, [r1, #4]
 8025dd8:	6081      	str	r1, [r0, #8]
 8025dda:	6812      	ldr	r2, [r2, #0]
 8025ddc:	4293      	cmp	r3, r2
 8025dde:	d3b7      	bcc.n	8025d50 <_free_r+0xcc>
 8025de0:	f640 0318 	movw	r3, #2072	; 0x818
 8025de4:	4620      	mov	r0, r4
 8025de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8025dea:	6819      	ldr	r1, [r3, #0]
 8025dec:	f7ff fef8 	bl	8025be0 <_malloc_trim_r>
 8025df0:	e7ae      	b.n	8025d50 <_free_r+0xcc>
 8025df2:	2601      	movs	r6, #1
 8025df4:	e764      	b.n	8025cc0 <_free_r+0x3c>
 8025df6:	2701      	movs	r7, #1
 8025df8:	6868      	ldr	r0, [r5, #4]
 8025dfa:	10b6      	asrs	r6, r6, #2
 8025dfc:	4613      	mov	r3, r2
 8025dfe:	fa07 f606 	lsl.w	r6, r7, r6
 8025e02:	4330      	orrs	r0, r6
 8025e04:	6068      	str	r0, [r5, #4]
 8025e06:	e79f      	b.n	8025d48 <_free_r+0xc4>
 8025e08:	f44f 757c 	mov.w	r5, #1008	; 0x3f0
 8025e0c:	267e      	movs	r6, #126	; 0x7e
 8025e0e:	e789      	b.n	8025d24 <_free_r+0xa0>
 8025e10:	2000029c 	.word	0x2000029c

08025e14 <memmove>:
 8025e14:	4288      	cmp	r0, r1
 8025e16:	b4f0      	push	{r4, r5, r6, r7}
 8025e18:	d912      	bls.n	8025e40 <memmove+0x2c>
 8025e1a:	188d      	adds	r5, r1, r2
 8025e1c:	42a8      	cmp	r0, r5
 8025e1e:	d20f      	bcs.n	8025e40 <memmove+0x2c>
 8025e20:	b162      	cbz	r2, 8025e3c <memmove+0x28>
 8025e22:	4613      	mov	r3, r2
 8025e24:	1882      	adds	r2, r0, r2
 8025e26:	4259      	negs	r1, r3
 8025e28:	186d      	adds	r5, r5, r1
 8025e2a:	1852      	adds	r2, r2, r1
 8025e2c:	18ec      	adds	r4, r5, r3
 8025e2e:	18d1      	adds	r1, r2, r3
 8025e30:	3b01      	subs	r3, #1
 8025e32:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 8025e36:	f801 4c01 	strb.w	r4, [r1, #-1]
 8025e3a:	d1f7      	bne.n	8025e2c <memmove+0x18>
 8025e3c:	bcf0      	pop	{r4, r5, r6, r7}
 8025e3e:	4770      	bx	lr
 8025e40:	2a0f      	cmp	r2, #15
 8025e42:	bf98      	it	ls
 8025e44:	4603      	movls	r3, r0
 8025e46:	d937      	bls.n	8025eb8 <memmove+0xa4>
 8025e48:	ea40 0301 	orr.w	r3, r0, r1
 8025e4c:	079b      	lsls	r3, r3, #30
 8025e4e:	d13d      	bne.n	8025ecc <memmove+0xb8>
 8025e50:	f1a2 0710 	sub.w	r7, r2, #16
 8025e54:	f101 0610 	add.w	r6, r1, #16
 8025e58:	460b      	mov	r3, r1
 8025e5a:	4604      	mov	r4, r0
 8025e5c:	093f      	lsrs	r7, r7, #4
 8025e5e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8025e62:	681d      	ldr	r5, [r3, #0]
 8025e64:	6025      	str	r5, [r4, #0]
 8025e66:	685d      	ldr	r5, [r3, #4]
 8025e68:	6065      	str	r5, [r4, #4]
 8025e6a:	689d      	ldr	r5, [r3, #8]
 8025e6c:	60a5      	str	r5, [r4, #8]
 8025e6e:	68dd      	ldr	r5, [r3, #12]
 8025e70:	3310      	adds	r3, #16
 8025e72:	60e5      	str	r5, [r4, #12]
 8025e74:	3410      	adds	r4, #16
 8025e76:	429e      	cmp	r6, r3
 8025e78:	d1f3      	bne.n	8025e62 <memmove+0x4e>
 8025e7a:	1c7c      	adds	r4, r7, #1
 8025e7c:	f002 020f 	and.w	r2, r2, #15
 8025e80:	0124      	lsls	r4, r4, #4
 8025e82:	2a03      	cmp	r2, #3
 8025e84:	eb00 0304 	add.w	r3, r0, r4
 8025e88:	4421      	add	r1, r4
 8025e8a:	d915      	bls.n	8025eb8 <memmove+0xa4>
 8025e8c:	f1a2 0c04 	sub.w	ip, r2, #4
 8025e90:	460d      	mov	r5, r1
 8025e92:	461c      	mov	r4, r3
 8025e94:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8025e98:	eb03 078c 	add.w	r7, r3, ip, lsl #2
 8025e9c:	3704      	adds	r7, #4
 8025e9e:	f855 6b04 	ldr.w	r6, [r5], #4
 8025ea2:	f844 6b04 	str.w	r6, [r4], #4
 8025ea6:	42bc      	cmp	r4, r7
 8025ea8:	d1f9      	bne.n	8025e9e <memmove+0x8a>
 8025eaa:	f10c 0401 	add.w	r4, ip, #1
 8025eae:	f002 0203 	and.w	r2, r2, #3
 8025eb2:	00a4      	lsls	r4, r4, #2
 8025eb4:	1909      	adds	r1, r1, r4
 8025eb6:	191b      	adds	r3, r3, r4
 8025eb8:	2a00      	cmp	r2, #0
 8025eba:	d0bf      	beq.n	8025e3c <memmove+0x28>
 8025ebc:	188a      	adds	r2, r1, r2
 8025ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025ec2:	4291      	cmp	r1, r2
 8025ec4:	f803 4b01 	strb.w	r4, [r3], #1
 8025ec8:	d1f9      	bne.n	8025ebe <memmove+0xaa>
 8025eca:	e7b7      	b.n	8025e3c <memmove+0x28>
 8025ecc:	4603      	mov	r3, r0
 8025ece:	e7f5      	b.n	8025ebc <memmove+0xa8>

08025ed0 <memset>:
 8025ed0:	2a03      	cmp	r2, #3
 8025ed2:	b2c9      	uxtb	r1, r1
 8025ed4:	b470      	push	{r4, r5, r6}
 8025ed6:	d807      	bhi.n	8025ee8 <memset+0x18>
 8025ed8:	b122      	cbz	r2, 8025ee4 <memset+0x14>
 8025eda:	2300      	movs	r3, #0
 8025edc:	54c1      	strb	r1, [r0, r3]
 8025ede:	3301      	adds	r3, #1
 8025ee0:	4293      	cmp	r3, r2
 8025ee2:	d1fb      	bne.n	8025edc <memset+0xc>
 8025ee4:	bc70      	pop	{r4, r5, r6}
 8025ee6:	4770      	bx	lr
 8025ee8:	0785      	lsls	r5, r0, #30
 8025eea:	4402      	add	r2, r0
 8025eec:	4603      	mov	r3, r0
 8025eee:	d003      	beq.n	8025ef8 <memset+0x28>
 8025ef0:	f803 1b01 	strb.w	r1, [r3], #1
 8025ef4:	079c      	lsls	r4, r3, #30
 8025ef6:	d1fb      	bne.n	8025ef0 <memset+0x20>
 8025ef8:	020c      	lsls	r4, r1, #8
 8025efa:	1ad5      	subs	r5, r2, r3
 8025efc:	1864      	adds	r4, r4, r1
 8025efe:	0426      	lsls	r6, r4, #16
 8025f00:	2d3f      	cmp	r5, #63	; 0x3f
 8025f02:	4434      	add	r4, r6
 8025f04:	dd1a      	ble.n	8025f3c <memset+0x6c>
 8025f06:	601c      	str	r4, [r3, #0]
 8025f08:	605c      	str	r4, [r3, #4]
 8025f0a:	609c      	str	r4, [r3, #8]
 8025f0c:	60dc      	str	r4, [r3, #12]
 8025f0e:	611c      	str	r4, [r3, #16]
 8025f10:	615c      	str	r4, [r3, #20]
 8025f12:	619c      	str	r4, [r3, #24]
 8025f14:	61dc      	str	r4, [r3, #28]
 8025f16:	621c      	str	r4, [r3, #32]
 8025f18:	625c      	str	r4, [r3, #36]	; 0x24
 8025f1a:	629c      	str	r4, [r3, #40]	; 0x28
 8025f1c:	62dc      	str	r4, [r3, #44]	; 0x2c
 8025f1e:	631c      	str	r4, [r3, #48]	; 0x30
 8025f20:	635c      	str	r4, [r3, #52]	; 0x34
 8025f22:	639c      	str	r4, [r3, #56]	; 0x38
 8025f24:	63dc      	str	r4, [r3, #60]	; 0x3c
 8025f26:	3340      	adds	r3, #64	; 0x40
 8025f28:	1ad5      	subs	r5, r2, r3
 8025f2a:	2d3f      	cmp	r5, #63	; 0x3f
 8025f2c:	dceb      	bgt.n	8025f06 <memset+0x36>
 8025f2e:	e005      	b.n	8025f3c <memset+0x6c>
 8025f30:	601c      	str	r4, [r3, #0]
 8025f32:	605c      	str	r4, [r3, #4]
 8025f34:	609c      	str	r4, [r3, #8]
 8025f36:	60dc      	str	r4, [r3, #12]
 8025f38:	3310      	adds	r3, #16
 8025f3a:	1ad5      	subs	r5, r2, r3
 8025f3c:	2d0f      	cmp	r5, #15
 8025f3e:	dcf7      	bgt.n	8025f30 <memset+0x60>
 8025f40:	e002      	b.n	8025f48 <memset+0x78>
 8025f42:	f843 4b04 	str.w	r4, [r3], #4
 8025f46:	1ad5      	subs	r5, r2, r3
 8025f48:	2d03      	cmp	r5, #3
 8025f4a:	dcfa      	bgt.n	8025f42 <memset+0x72>
 8025f4c:	4293      	cmp	r3, r2
 8025f4e:	d2c9      	bcs.n	8025ee4 <memset+0x14>
 8025f50:	f803 1b01 	strb.w	r1, [r3], #1
 8025f54:	4293      	cmp	r3, r2
 8025f56:	d1fb      	bne.n	8025f50 <memset+0x80>
 8025f58:	e7c4      	b.n	8025ee4 <memset+0x14>
 8025f5a:	bf00      	nop

08025f5c <_realloc_r>:
 8025f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f60:	460c      	mov	r4, r1
 8025f62:	b083      	sub	sp, #12
 8025f64:	4607      	mov	r7, r0
 8025f66:	4690      	mov	r8, r2
 8025f68:	2900      	cmp	r1, #0
 8025f6a:	f000 8120 	beq.w	80261ae <_realloc_r+0x252>
 8025f6e:	f108 050b 	add.w	r5, r8, #11
 8025f72:	f7fe fac7 	bl	8024504 <__malloc_lock>
 8025f76:	2d16      	cmp	r5, #22
 8025f78:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8025f7c:	f200 8093 	bhi.w	80260a6 <_realloc_r+0x14a>
 8025f80:	2210      	movs	r2, #16
 8025f82:	2600      	movs	r6, #0
 8025f84:	4615      	mov	r5, r2
 8025f86:	4545      	cmp	r5, r8
 8025f88:	bf38      	it	cc
 8025f8a:	f046 0601 	orrcc.w	r6, r6, #1
 8025f8e:	2e00      	cmp	r6, #0
 8025f90:	f040 8113 	bne.w	80261ba <_realloc_r+0x25e>
 8025f94:	f021 0a03 	bic.w	sl, r1, #3
 8025f98:	f1a4 0b08 	sub.w	fp, r4, #8
 8025f9c:	4592      	cmp	sl, r2
 8025f9e:	bfa8      	it	ge
 8025fa0:	4656      	movge	r6, sl
 8025fa2:	da6a      	bge.n	802607a <_realloc_r+0x11e>
 8025fa4:	f240 2994 	movw	r9, #660	; 0x294
 8025fa8:	eb0b 000a 	add.w	r0, fp, sl
 8025fac:	f2c2 0900 	movt	r9, #8192	; 0x2000
 8025fb0:	f8d9 c008 	ldr.w	ip, [r9, #8]
 8025fb4:	4584      	cmp	ip, r0
 8025fb6:	f000 8105 	beq.w	80261c4 <_realloc_r+0x268>
 8025fba:	6843      	ldr	r3, [r0, #4]
 8025fbc:	f023 0e01 	bic.w	lr, r3, #1
 8025fc0:	4486      	add	lr, r0
 8025fc2:	f8de e004 	ldr.w	lr, [lr, #4]
 8025fc6:	f01e 0f01 	tst.w	lr, #1
 8025fca:	bf1c      	itt	ne
 8025fcc:	46b6      	movne	lr, r6
 8025fce:	4630      	movne	r0, r6
 8025fd0:	d06e      	beq.n	80260b0 <_realloc_r+0x154>
 8025fd2:	07cb      	lsls	r3, r1, #31
 8025fd4:	f100 808c 	bmi.w	80260f0 <_realloc_r+0x194>
 8025fd8:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8025fdc:	ebc3 030b 	rsb	r3, r3, fp
 8025fe0:	6859      	ldr	r1, [r3, #4]
 8025fe2:	f021 0103 	bic.w	r1, r1, #3
 8025fe6:	2800      	cmp	r0, #0
 8025fe8:	f000 80aa 	beq.w	8026140 <_realloc_r+0x1e4>
 8025fec:	4560      	cmp	r0, ip
 8025fee:	eb01 0c0a 	add.w	ip, r1, sl
 8025ff2:	f000 813b 	beq.w	802626c <_realloc_r+0x310>
 8025ff6:	eb0e 060c 	add.w	r6, lr, ip
 8025ffa:	42b2      	cmp	r2, r6
 8025ffc:	f300 80a2 	bgt.w	8026144 <_realloc_r+0x1e8>
 8026000:	68c1      	ldr	r1, [r0, #12]
 8026002:	469e      	mov	lr, r3
 8026004:	6880      	ldr	r0, [r0, #8]
 8026006:	f1aa 0204 	sub.w	r2, sl, #4
 802600a:	2a24      	cmp	r2, #36	; 0x24
 802600c:	60c1      	str	r1, [r0, #12]
 802600e:	6088      	str	r0, [r1, #8]
 8026010:	68d9      	ldr	r1, [r3, #12]
 8026012:	f85e 0f08 	ldr.w	r0, [lr, #8]!
 8026016:	60c1      	str	r1, [r0, #12]
 8026018:	6088      	str	r0, [r1, #8]
 802601a:	f200 8179 	bhi.w	8026310 <_realloc_r+0x3b4>
 802601e:	2a13      	cmp	r2, #19
 8026020:	bf9c      	itt	ls
 8026022:	4672      	movls	r2, lr
 8026024:	4621      	movls	r1, r4
 8026026:	d91f      	bls.n	8026068 <_realloc_r+0x10c>
 8026028:	6821      	ldr	r1, [r4, #0]
 802602a:	2a1b      	cmp	r2, #27
 802602c:	bf98      	it	ls
 802602e:	f103 0210 	addls.w	r2, r3, #16
 8026032:	6099      	str	r1, [r3, #8]
 8026034:	6861      	ldr	r1, [r4, #4]
 8026036:	60d9      	str	r1, [r3, #12]
 8026038:	bf98      	it	ls
 802603a:	f104 0108 	addls.w	r1, r4, #8
 802603e:	d913      	bls.n	8026068 <_realloc_r+0x10c>
 8026040:	68a1      	ldr	r1, [r4, #8]
 8026042:	2a24      	cmp	r2, #36	; 0x24
 8026044:	bf14      	ite	ne
 8026046:	f103 0218 	addne.w	r2, r3, #24
 802604a:	f103 0220 	addeq.w	r2, r3, #32
 802604e:	6119      	str	r1, [r3, #16]
 8026050:	68e1      	ldr	r1, [r4, #12]
 8026052:	6159      	str	r1, [r3, #20]
 8026054:	bf11      	iteee	ne
 8026056:	f104 0110 	addne.w	r1, r4, #16
 802605a:	6920      	ldreq	r0, [r4, #16]
 802605c:	f104 0118 	addeq.w	r1, r4, #24
 8026060:	6198      	streq	r0, [r3, #24]
 8026062:	bf04      	itt	eq
 8026064:	6960      	ldreq	r0, [r4, #20]
 8026066:	61d8      	streq	r0, [r3, #28]
 8026068:	6808      	ldr	r0, [r1, #0]
 802606a:	4674      	mov	r4, lr
 802606c:	6010      	str	r0, [r2, #0]
 802606e:	469b      	mov	fp, r3
 8026070:	6848      	ldr	r0, [r1, #4]
 8026072:	6050      	str	r0, [r2, #4]
 8026074:	6889      	ldr	r1, [r1, #8]
 8026076:	6091      	str	r1, [r2, #8]
 8026078:	6859      	ldr	r1, [r3, #4]
 802607a:	1b72      	subs	r2, r6, r5
 802607c:	2a0f      	cmp	r2, #15
 802607e:	d822      	bhi.n	80260c6 <_realloc_r+0x16a>
 8026080:	eb0b 0306 	add.w	r3, fp, r6
 8026084:	f001 0101 	and.w	r1, r1, #1
 8026088:	430e      	orrs	r6, r1
 802608a:	f8cb 6004 	str.w	r6, [fp, #4]
 802608e:	685a      	ldr	r2, [r3, #4]
 8026090:	f042 0201 	orr.w	r2, r2, #1
 8026094:	605a      	str	r2, [r3, #4]
 8026096:	4638      	mov	r0, r7
 8026098:	46a0      	mov	r8, r4
 802609a:	f7fe fa35 	bl	8024508 <__malloc_unlock>
 802609e:	4640      	mov	r0, r8
 80260a0:	b003      	add	sp, #12
 80260a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80260a6:	f025 0507 	bic.w	r5, r5, #7
 80260aa:	462a      	mov	r2, r5
 80260ac:	0fee      	lsrs	r6, r5, #31
 80260ae:	e76a      	b.n	8025f86 <_realloc_r+0x2a>
 80260b0:	f023 0e03 	bic.w	lr, r3, #3
 80260b4:	eb0e 060a 	add.w	r6, lr, sl
 80260b8:	42b2      	cmp	r2, r6
 80260ba:	dc8a      	bgt.n	8025fd2 <_realloc_r+0x76>
 80260bc:	68c3      	ldr	r3, [r0, #12]
 80260be:	6882      	ldr	r2, [r0, #8]
 80260c0:	60d3      	str	r3, [r2, #12]
 80260c2:	609a      	str	r2, [r3, #8]
 80260c4:	e7d9      	b.n	802607a <_realloc_r+0x11e>
 80260c6:	eb0b 0605 	add.w	r6, fp, r5
 80260ca:	f001 0101 	and.w	r1, r1, #1
 80260ce:	18b3      	adds	r3, r6, r2
 80260d0:	430d      	orrs	r5, r1
 80260d2:	f042 0201 	orr.w	r2, r2, #1
 80260d6:	f8cb 5004 	str.w	r5, [fp, #4]
 80260da:	6072      	str	r2, [r6, #4]
 80260dc:	4638      	mov	r0, r7
 80260de:	685a      	ldr	r2, [r3, #4]
 80260e0:	f106 0108 	add.w	r1, r6, #8
 80260e4:	f042 0201 	orr.w	r2, r2, #1
 80260e8:	605a      	str	r2, [r3, #4]
 80260ea:	f7ff fdcb 	bl	8025c84 <_free_r>
 80260ee:	e7d2      	b.n	8026096 <_realloc_r+0x13a>
 80260f0:	4641      	mov	r1, r8
 80260f2:	4638      	mov	r0, r7
 80260f4:	f7fd ff02 	bl	8023efc <_malloc_r>
 80260f8:	4680      	mov	r8, r0
 80260fa:	b1e8      	cbz	r0, 8026138 <_realloc_r+0x1dc>
 80260fc:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8026100:	f1a0 0208 	sub.w	r2, r0, #8
 8026104:	f021 0301 	bic.w	r3, r1, #1
 8026108:	445b      	add	r3, fp
 802610a:	429a      	cmp	r2, r3
 802610c:	f000 80fa 	beq.w	8026304 <_realloc_r+0x3a8>
 8026110:	f1aa 0204 	sub.w	r2, sl, #4
 8026114:	2a24      	cmp	r2, #36	; 0x24
 8026116:	f200 80a5 	bhi.w	8026264 <_realloc_r+0x308>
 802611a:	2a13      	cmp	r2, #19
 802611c:	bf9c      	itt	ls
 802611e:	4603      	movls	r3, r0
 8026120:	4622      	movls	r2, r4
 8026122:	d870      	bhi.n	8026206 <_realloc_r+0x2aa>
 8026124:	6811      	ldr	r1, [r2, #0]
 8026126:	6019      	str	r1, [r3, #0]
 8026128:	6851      	ldr	r1, [r2, #4]
 802612a:	6059      	str	r1, [r3, #4]
 802612c:	6892      	ldr	r2, [r2, #8]
 802612e:	609a      	str	r2, [r3, #8]
 8026130:	4638      	mov	r0, r7
 8026132:	4621      	mov	r1, r4
 8026134:	f7ff fda6 	bl	8025c84 <_free_r>
 8026138:	4638      	mov	r0, r7
 802613a:	f7fe f9e5 	bl	8024508 <__malloc_unlock>
 802613e:	e7ae      	b.n	802609e <_realloc_r+0x142>
 8026140:	eb01 0c0a 	add.w	ip, r1, sl
 8026144:	4562      	cmp	r2, ip
 8026146:	dcd3      	bgt.n	80260f0 <_realloc_r+0x194>
 8026148:	461e      	mov	r6, r3
 802614a:	68d9      	ldr	r1, [r3, #12]
 802614c:	f1aa 0204 	sub.w	r2, sl, #4
 8026150:	f856 0f08 	ldr.w	r0, [r6, #8]!
 8026154:	2a24      	cmp	r2, #36	; 0x24
 8026156:	60c1      	str	r1, [r0, #12]
 8026158:	6088      	str	r0, [r1, #8]
 802615a:	d875      	bhi.n	8026248 <_realloc_r+0x2ec>
 802615c:	2a13      	cmp	r2, #19
 802615e:	bf9c      	itt	ls
 8026160:	4632      	movls	r2, r6
 8026162:	4621      	movls	r1, r4
 8026164:	d91f      	bls.n	80261a6 <_realloc_r+0x24a>
 8026166:	6821      	ldr	r1, [r4, #0]
 8026168:	2a1b      	cmp	r2, #27
 802616a:	bf98      	it	ls
 802616c:	f103 0210 	addls.w	r2, r3, #16
 8026170:	6099      	str	r1, [r3, #8]
 8026172:	6861      	ldr	r1, [r4, #4]
 8026174:	60d9      	str	r1, [r3, #12]
 8026176:	bf98      	it	ls
 8026178:	f104 0108 	addls.w	r1, r4, #8
 802617c:	d913      	bls.n	80261a6 <_realloc_r+0x24a>
 802617e:	68a1      	ldr	r1, [r4, #8]
 8026180:	2a24      	cmp	r2, #36	; 0x24
 8026182:	bf14      	ite	ne
 8026184:	f103 0218 	addne.w	r2, r3, #24
 8026188:	f103 0220 	addeq.w	r2, r3, #32
 802618c:	6119      	str	r1, [r3, #16]
 802618e:	68e1      	ldr	r1, [r4, #12]
 8026190:	6159      	str	r1, [r3, #20]
 8026192:	bf11      	iteee	ne
 8026194:	f104 0110 	addne.w	r1, r4, #16
 8026198:	6920      	ldreq	r0, [r4, #16]
 802619a:	f104 0118 	addeq.w	r1, r4, #24
 802619e:	6198      	streq	r0, [r3, #24]
 80261a0:	bf04      	itt	eq
 80261a2:	6960      	ldreq	r0, [r4, #20]
 80261a4:	61d8      	streq	r0, [r3, #28]
 80261a6:	4634      	mov	r4, r6
 80261a8:	6808      	ldr	r0, [r1, #0]
 80261aa:	4666      	mov	r6, ip
 80261ac:	e75e      	b.n	802606c <_realloc_r+0x110>
 80261ae:	4611      	mov	r1, r2
 80261b0:	b003      	add	sp, #12
 80261b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261b6:	f7fd bea1 	b.w	8023efc <_malloc_r>
 80261ba:	230c      	movs	r3, #12
 80261bc:	f04f 0800 	mov.w	r8, #0
 80261c0:	603b      	str	r3, [r7, #0]
 80261c2:	e76c      	b.n	802609e <_realloc_r+0x142>
 80261c4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80261c8:	f105 0310 	add.w	r3, r5, #16
 80261cc:	f026 0e03 	bic.w	lr, r6, #3
 80261d0:	eb0e 000a 	add.w	r0, lr, sl
 80261d4:	4298      	cmp	r0, r3
 80261d6:	bfb8      	it	lt
 80261d8:	4660      	movlt	r0, ip
 80261da:	f6ff aefa 	blt.w	8025fd2 <_realloc_r+0x76>
 80261de:	eb0b 0305 	add.w	r3, fp, r5
 80261e2:	1b42      	subs	r2, r0, r5
 80261e4:	f042 0201 	orr.w	r2, r2, #1
 80261e8:	f8c9 3008 	str.w	r3, [r9, #8]
 80261ec:	605a      	str	r2, [r3, #4]
 80261ee:	4638      	mov	r0, r7
 80261f0:	f854 2c04 	ldr.w	r2, [r4, #-4]
 80261f4:	46a0      	mov	r8, r4
 80261f6:	f002 0301 	and.w	r3, r2, #1
 80261fa:	431d      	orrs	r5, r3
 80261fc:	f844 5c04 	str.w	r5, [r4, #-4]
 8026200:	f7fe f982 	bl	8024508 <__malloc_unlock>
 8026204:	e74b      	b.n	802609e <_realloc_r+0x142>
 8026206:	6823      	ldr	r3, [r4, #0]
 8026208:	2a1b      	cmp	r2, #27
 802620a:	bf98      	it	ls
 802620c:	f104 0208 	addls.w	r2, r4, #8
 8026210:	6003      	str	r3, [r0, #0]
 8026212:	6863      	ldr	r3, [r4, #4]
 8026214:	6043      	str	r3, [r0, #4]
 8026216:	bf98      	it	ls
 8026218:	f100 0308 	addls.w	r3, r0, #8
 802621c:	d982      	bls.n	8026124 <_realloc_r+0x1c8>
 802621e:	68a3      	ldr	r3, [r4, #8]
 8026220:	2a24      	cmp	r2, #36	; 0x24
 8026222:	bf14      	ite	ne
 8026224:	f104 0210 	addne.w	r2, r4, #16
 8026228:	f104 0218 	addeq.w	r2, r4, #24
 802622c:	6083      	str	r3, [r0, #8]
 802622e:	68e3      	ldr	r3, [r4, #12]
 8026230:	60c3      	str	r3, [r0, #12]
 8026232:	bf11      	iteee	ne
 8026234:	f100 0310 	addne.w	r3, r0, #16
 8026238:	6921      	ldreq	r1, [r4, #16]
 802623a:	f100 0318 	addeq.w	r3, r0, #24
 802623e:	6101      	streq	r1, [r0, #16]
 8026240:	bf04      	itt	eq
 8026242:	6961      	ldreq	r1, [r4, #20]
 8026244:	6141      	streq	r1, [r0, #20]
 8026246:	e76d      	b.n	8026124 <_realloc_r+0x1c8>
 8026248:	4621      	mov	r1, r4
 802624a:	4630      	mov	r0, r6
 802624c:	e88d 1008 	stmia.w	sp, {r3, ip}
 8026250:	f7ff fde0 	bl	8025e14 <memmove>
 8026254:	9b00      	ldr	r3, [sp, #0]
 8026256:	4634      	mov	r4, r6
 8026258:	f8dd c004 	ldr.w	ip, [sp, #4]
 802625c:	469b      	mov	fp, r3
 802625e:	4666      	mov	r6, ip
 8026260:	6859      	ldr	r1, [r3, #4]
 8026262:	e70a      	b.n	802607a <_realloc_r+0x11e>
 8026264:	4621      	mov	r1, r4
 8026266:	f7ff fdd5 	bl	8025e14 <memmove>
 802626a:	e761      	b.n	8026130 <_realloc_r+0x1d4>
 802626c:	f105 0110 	add.w	r1, r5, #16
 8026270:	eb0e 060c 	add.w	r6, lr, ip
 8026274:	428e      	cmp	r6, r1
 8026276:	f6ff af65 	blt.w	8026144 <_realloc_r+0x1e8>
 802627a:	4698      	mov	r8, r3
 802627c:	68d9      	ldr	r1, [r3, #12]
 802627e:	f1aa 0204 	sub.w	r2, sl, #4
 8026282:	f858 0f08 	ldr.w	r0, [r8, #8]!
 8026286:	2a24      	cmp	r2, #36	; 0x24
 8026288:	60c1      	str	r1, [r0, #12]
 802628a:	6088      	str	r0, [r1, #8]
 802628c:	d84a      	bhi.n	8026324 <_realloc_r+0x3c8>
 802628e:	2a13      	cmp	r2, #19
 8026290:	bf9c      	itt	ls
 8026292:	4642      	movls	r2, r8
 8026294:	4621      	movls	r1, r4
 8026296:	d91f      	bls.n	80262d8 <_realloc_r+0x37c>
 8026298:	6821      	ldr	r1, [r4, #0]
 802629a:	2a1b      	cmp	r2, #27
 802629c:	bf98      	it	ls
 802629e:	f103 0210 	addls.w	r2, r3, #16
 80262a2:	6099      	str	r1, [r3, #8]
 80262a4:	6861      	ldr	r1, [r4, #4]
 80262a6:	60d9      	str	r1, [r3, #12]
 80262a8:	bf98      	it	ls
 80262aa:	f104 0108 	addls.w	r1, r4, #8
 80262ae:	d913      	bls.n	80262d8 <_realloc_r+0x37c>
 80262b0:	68a1      	ldr	r1, [r4, #8]
 80262b2:	2a24      	cmp	r2, #36	; 0x24
 80262b4:	bf14      	ite	ne
 80262b6:	f103 0218 	addne.w	r2, r3, #24
 80262ba:	f103 0220 	addeq.w	r2, r3, #32
 80262be:	6119      	str	r1, [r3, #16]
 80262c0:	68e1      	ldr	r1, [r4, #12]
 80262c2:	6159      	str	r1, [r3, #20]
 80262c4:	bf11      	iteee	ne
 80262c6:	f104 0110 	addne.w	r1, r4, #16
 80262ca:	6920      	ldreq	r0, [r4, #16]
 80262cc:	f104 0118 	addeq.w	r1, r4, #24
 80262d0:	6198      	streq	r0, [r3, #24]
 80262d2:	bf04      	itt	eq
 80262d4:	6960      	ldreq	r0, [r4, #20]
 80262d6:	61d8      	streq	r0, [r3, #28]
 80262d8:	6808      	ldr	r0, [r1, #0]
 80262da:	6010      	str	r0, [r2, #0]
 80262dc:	6848      	ldr	r0, [r1, #4]
 80262de:	6050      	str	r0, [r2, #4]
 80262e0:	6889      	ldr	r1, [r1, #8]
 80262e2:	6091      	str	r1, [r2, #8]
 80262e4:	195a      	adds	r2, r3, r5
 80262e6:	1b71      	subs	r1, r6, r5
 80262e8:	f041 0101 	orr.w	r1, r1, #1
 80262ec:	f8c9 2008 	str.w	r2, [r9, #8]
 80262f0:	6051      	str	r1, [r2, #4]
 80262f2:	4638      	mov	r0, r7
 80262f4:	6859      	ldr	r1, [r3, #4]
 80262f6:	f001 0201 	and.w	r2, r1, #1
 80262fa:	4315      	orrs	r5, r2
 80262fc:	605d      	str	r5, [r3, #4]
 80262fe:	f7fe f903 	bl	8024508 <__malloc_unlock>
 8026302:	e6cc      	b.n	802609e <_realloc_r+0x142>
 8026304:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8026308:	f026 0603 	bic.w	r6, r6, #3
 802630c:	4456      	add	r6, sl
 802630e:	e6b4      	b.n	802607a <_realloc_r+0x11e>
 8026310:	4621      	mov	r1, r4
 8026312:	4670      	mov	r0, lr
 8026314:	9300      	str	r3, [sp, #0]
 8026316:	4674      	mov	r4, lr
 8026318:	f7ff fd7c 	bl	8025e14 <memmove>
 802631c:	9b00      	ldr	r3, [sp, #0]
 802631e:	469b      	mov	fp, r3
 8026320:	6859      	ldr	r1, [r3, #4]
 8026322:	e6aa      	b.n	802607a <_realloc_r+0x11e>
 8026324:	4640      	mov	r0, r8
 8026326:	4621      	mov	r1, r4
 8026328:	9300      	str	r3, [sp, #0]
 802632a:	f7ff fd73 	bl	8025e14 <memmove>
 802632e:	9b00      	ldr	r3, [sp, #0]
 8026330:	e7d8      	b.n	80262e4 <_realloc_r+0x388>
 8026332:	bf00      	nop
 8026334:	0000      	movs	r0, r0
	...

08026338 <__aeabi_uidiv>:
 8026338:	1e4a      	subs	r2, r1, #1
 802633a:	bf08      	it	eq
 802633c:	4770      	bxeq	lr
 802633e:	f0c0 8124 	bcc.w	802658a <__aeabi_uidiv+0x252>
 8026342:	4288      	cmp	r0, r1
 8026344:	f240 8116 	bls.w	8026574 <__aeabi_uidiv+0x23c>
 8026348:	4211      	tst	r1, r2
 802634a:	f000 8117 	beq.w	802657c <__aeabi_uidiv+0x244>
 802634e:	fab0 f380 	clz	r3, r0
 8026352:	fab1 f281 	clz	r2, r1
 8026356:	eba2 0303 	sub.w	r3, r2, r3
 802635a:	f1c3 031f 	rsb	r3, r3, #31
 802635e:	a204      	add	r2, pc, #16	; (adr r2, 8026370 <__aeabi_uidiv+0x38>)
 8026360:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8026364:	f04f 0200 	mov.w	r2, #0
 8026368:	469f      	mov	pc, r3
 802636a:	bf00      	nop
 802636c:	f3af 8000 	nop.w
 8026370:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
 8026374:	bf00      	nop
 8026376:	eb42 0202 	adc.w	r2, r2, r2
 802637a:	bf28      	it	cs
 802637c:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
 8026380:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
 8026384:	bf00      	nop
 8026386:	eb42 0202 	adc.w	r2, r2, r2
 802638a:	bf28      	it	cs
 802638c:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
 8026390:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
 8026394:	bf00      	nop
 8026396:	eb42 0202 	adc.w	r2, r2, r2
 802639a:	bf28      	it	cs
 802639c:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
 80263a0:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
 80263a4:	bf00      	nop
 80263a6:	eb42 0202 	adc.w	r2, r2, r2
 80263aa:	bf28      	it	cs
 80263ac:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
 80263b0:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
 80263b4:	bf00      	nop
 80263b6:	eb42 0202 	adc.w	r2, r2, r2
 80263ba:	bf28      	it	cs
 80263bc:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
 80263c0:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
 80263c4:	bf00      	nop
 80263c6:	eb42 0202 	adc.w	r2, r2, r2
 80263ca:	bf28      	it	cs
 80263cc:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
 80263d0:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
 80263d4:	bf00      	nop
 80263d6:	eb42 0202 	adc.w	r2, r2, r2
 80263da:	bf28      	it	cs
 80263dc:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
 80263e0:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
 80263e4:	bf00      	nop
 80263e6:	eb42 0202 	adc.w	r2, r2, r2
 80263ea:	bf28      	it	cs
 80263ec:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
 80263f0:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
 80263f4:	bf00      	nop
 80263f6:	eb42 0202 	adc.w	r2, r2, r2
 80263fa:	bf28      	it	cs
 80263fc:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
 8026400:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
 8026404:	bf00      	nop
 8026406:	eb42 0202 	adc.w	r2, r2, r2
 802640a:	bf28      	it	cs
 802640c:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
 8026410:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 8026414:	bf00      	nop
 8026416:	eb42 0202 	adc.w	r2, r2, r2
 802641a:	bf28      	it	cs
 802641c:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
 8026420:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
 8026424:	bf00      	nop
 8026426:	eb42 0202 	adc.w	r2, r2, r2
 802642a:	bf28      	it	cs
 802642c:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
 8026430:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
 8026434:	bf00      	nop
 8026436:	eb42 0202 	adc.w	r2, r2, r2
 802643a:	bf28      	it	cs
 802643c:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
 8026440:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
 8026444:	bf00      	nop
 8026446:	eb42 0202 	adc.w	r2, r2, r2
 802644a:	bf28      	it	cs
 802644c:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
 8026450:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
 8026454:	bf00      	nop
 8026456:	eb42 0202 	adc.w	r2, r2, r2
 802645a:	bf28      	it	cs
 802645c:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
 8026460:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
 8026464:	bf00      	nop
 8026466:	eb42 0202 	adc.w	r2, r2, r2
 802646a:	bf28      	it	cs
 802646c:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
 8026470:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
 8026474:	bf00      	nop
 8026476:	eb42 0202 	adc.w	r2, r2, r2
 802647a:	bf28      	it	cs
 802647c:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
 8026480:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
 8026484:	bf00      	nop
 8026486:	eb42 0202 	adc.w	r2, r2, r2
 802648a:	bf28      	it	cs
 802648c:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
 8026490:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
 8026494:	bf00      	nop
 8026496:	eb42 0202 	adc.w	r2, r2, r2
 802649a:	bf28      	it	cs
 802649c:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
 80264a0:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
 80264a4:	bf00      	nop
 80264a6:	eb42 0202 	adc.w	r2, r2, r2
 80264aa:	bf28      	it	cs
 80264ac:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
 80264b0:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
 80264b4:	bf00      	nop
 80264b6:	eb42 0202 	adc.w	r2, r2, r2
 80264ba:	bf28      	it	cs
 80264bc:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
 80264c0:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
 80264c4:	bf00      	nop
 80264c6:	eb42 0202 	adc.w	r2, r2, r2
 80264ca:	bf28      	it	cs
 80264cc:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
 80264d0:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
 80264d4:	bf00      	nop
 80264d6:	eb42 0202 	adc.w	r2, r2, r2
 80264da:	bf28      	it	cs
 80264dc:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
 80264e0:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
 80264e4:	bf00      	nop
 80264e6:	eb42 0202 	adc.w	r2, r2, r2
 80264ea:	bf28      	it	cs
 80264ec:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
 80264f0:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
 80264f4:	bf00      	nop
 80264f6:	eb42 0202 	adc.w	r2, r2, r2
 80264fa:	bf28      	it	cs
 80264fc:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
 8026500:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
 8026504:	bf00      	nop
 8026506:	eb42 0202 	adc.w	r2, r2, r2
 802650a:	bf28      	it	cs
 802650c:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
 8026510:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 8026514:	bf00      	nop
 8026516:	eb42 0202 	adc.w	r2, r2, r2
 802651a:	bf28      	it	cs
 802651c:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
 8026520:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
 8026524:	bf00      	nop
 8026526:	eb42 0202 	adc.w	r2, r2, r2
 802652a:	bf28      	it	cs
 802652c:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
 8026530:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 8026534:	bf00      	nop
 8026536:	eb42 0202 	adc.w	r2, r2, r2
 802653a:	bf28      	it	cs
 802653c:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
 8026540:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
 8026544:	bf00      	nop
 8026546:	eb42 0202 	adc.w	r2, r2, r2
 802654a:	bf28      	it	cs
 802654c:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
 8026550:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 8026554:	bf00      	nop
 8026556:	eb42 0202 	adc.w	r2, r2, r2
 802655a:	bf28      	it	cs
 802655c:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
 8026560:	ebb0 0f01 	cmp.w	r0, r1
 8026564:	bf00      	nop
 8026566:	eb42 0202 	adc.w	r2, r2, r2
 802656a:	bf28      	it	cs
 802656c:	eba0 0001 	subcs.w	r0, r0, r1
 8026570:	4610      	mov	r0, r2
 8026572:	4770      	bx	lr
 8026574:	bf0c      	ite	eq
 8026576:	2001      	moveq	r0, #1
 8026578:	2000      	movne	r0, #0
 802657a:	4770      	bx	lr
 802657c:	fab1 f281 	clz	r2, r1
 8026580:	f1c2 021f 	rsb	r2, r2, #31
 8026584:	fa20 f002 	lsr.w	r0, r0, r2
 8026588:	4770      	bx	lr
 802658a:	b108      	cbz	r0, 8026590 <__aeabi_uidiv+0x258>
 802658c:	f04f 30ff 	mov.w	r0, #4294967295
 8026590:	f000 b80e 	b.w	80265b0 <__aeabi_idiv0>

08026594 <__aeabi_uidivmod>:
 8026594:	2900      	cmp	r1, #0
 8026596:	d0f8      	beq.n	802658a <__aeabi_uidiv+0x252>
 8026598:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 802659c:	f7ff fecc 	bl	8026338 <__aeabi_uidiv>
 80265a0:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 80265a4:	fb02 f300 	mul.w	r3, r2, r0
 80265a8:	eba1 0103 	sub.w	r1, r1, r3
 80265ac:	4770      	bx	lr
 80265ae:	bf00      	nop

080265b0 <__aeabi_idiv0>:
 80265b0:	4770      	bx	lr
 80265b2:	bf00      	nop

080265b4 <__aeabi_d2iz>:
 80265b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80265b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80265bc:	d215      	bcs.n	80265ea <__aeabi_d2iz+0x36>
 80265be:	d511      	bpl.n	80265e4 <__aeabi_d2iz+0x30>
 80265c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80265c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80265c8:	d912      	bls.n	80265f0 <__aeabi_d2iz+0x3c>
 80265ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80265ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80265d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80265d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80265da:	fa23 f002 	lsr.w	r0, r3, r2
 80265de:	bf18      	it	ne
 80265e0:	4240      	negne	r0, r0
 80265e2:	4770      	bx	lr
 80265e4:	f04f 0000 	mov.w	r0, #0
 80265e8:	4770      	bx	lr
 80265ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80265ee:	d105      	bne.n	80265fc <__aeabi_d2iz+0x48>
 80265f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80265f4:	bf08      	it	eq
 80265f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80265fa:	4770      	bx	lr
 80265fc:	f04f 0000 	mov.w	r0, #0
 8026600:	4770      	bx	lr
 8026602:	bf00      	nop

08026604 <__aeabi_uldivmod>:
 8026604:	b94b      	cbnz	r3, 802661a <__aeabi_uldivmod+0x16>
 8026606:	b942      	cbnz	r2, 802661a <__aeabi_uldivmod+0x16>
 8026608:	2900      	cmp	r1, #0
 802660a:	bf08      	it	eq
 802660c:	2800      	cmpeq	r0, #0
 802660e:	d002      	beq.n	8026616 <__aeabi_uldivmod+0x12>
 8026610:	f04f 31ff 	mov.w	r1, #4294967295
 8026614:	4608      	mov	r0, r1
 8026616:	f7ff bfcb 	b.w	80265b0 <__aeabi_idiv0>
 802661a:	b082      	sub	sp, #8
 802661c:	46ec      	mov	ip, sp
 802661e:	e92d 5000 	stmdb	sp!, {ip, lr}
 8026622:	f000 f81d 	bl	8026660 <__gnu_uldivmod_helper>
 8026626:	f8dd e004 	ldr.w	lr, [sp, #4]
 802662a:	b002      	add	sp, #8
 802662c:	bc0c      	pop	{r2, r3}
 802662e:	4770      	bx	lr

08026630 <__gnu_ldivmod_helper>:
 8026630:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8026634:	461e      	mov	r6, r3
 8026636:	4614      	mov	r4, r2
 8026638:	4680      	mov	r8, r0
 802663a:	4689      	mov	r9, r1
 802663c:	f000 f826 	bl	802668c <__divdi3>
 8026640:	fba4 2300 	umull	r2, r3, r4, r0
 8026644:	fb04 f401 	mul.w	r4, r4, r1
 8026648:	fb00 4406 	mla	r4, r0, r6, r4
 802664c:	18e3      	adds	r3, r4, r3
 802664e:	9c06      	ldr	r4, [sp, #24]
 8026650:	ebb8 0202 	subs.w	r2, r8, r2
 8026654:	eb69 0303 	sbc.w	r3, r9, r3
 8026658:	e9c4 2300 	strd	r2, r3, [r4]
 802665c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08026660 <__gnu_uldivmod_helper>:
 8026660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026662:	4614      	mov	r4, r2
 8026664:	4606      	mov	r6, r0
 8026666:	460f      	mov	r7, r1
 8026668:	461d      	mov	r5, r3
 802666a:	f000 f9c1 	bl	80269f0 <__udivdi3>
 802666e:	fb00 f505 	mul.w	r5, r0, r5
 8026672:	fba0 2304 	umull	r2, r3, r0, r4
 8026676:	fb04 5401 	mla	r4, r4, r1, r5
 802667a:	18e3      	adds	r3, r4, r3
 802667c:	9c06      	ldr	r4, [sp, #24]
 802667e:	1ab2      	subs	r2, r6, r2
 8026680:	eb67 0303 	sbc.w	r3, r7, r3
 8026684:	e9c4 2300 	strd	r2, r3, [r4]
 8026688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802668a:	bf00      	nop

0802668c <__divdi3>:
 802668c:	2900      	cmp	r1, #0
 802668e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026692:	461c      	mov	r4, r3
 8026694:	b085      	sub	sp, #20
 8026696:	bfa8      	it	ge
 8026698:	f04f 0800 	movge.w	r8, #0
 802669c:	f2c0 80c9 	blt.w	8026832 <__divdi3+0x1a6>
 80266a0:	2c00      	cmp	r4, #0
 80266a2:	f2c0 80c0 	blt.w	8026826 <__divdi3+0x19a>
 80266a6:	460f      	mov	r7, r1
 80266a8:	4694      	mov	ip, r2
 80266aa:	4614      	mov	r4, r2
 80266ac:	4605      	mov	r5, r0
 80266ae:	460e      	mov	r6, r1
 80266b0:	2b00      	cmp	r3, #0
 80266b2:	d14b      	bne.n	802674c <__divdi3+0xc0>
 80266b4:	42ba      	cmp	r2, r7
 80266b6:	d96a      	bls.n	802678e <__divdi3+0x102>
 80266b8:	fab2 f382 	clz	r3, r2
 80266bc:	b153      	cbz	r3, 80266d4 <__divdi3+0x48>
 80266be:	f1c3 0120 	rsb	r1, r3, #32
 80266c2:	fa07 f603 	lsl.w	r6, r7, r3
 80266c6:	fa20 f201 	lsr.w	r2, r0, r1
 80266ca:	fa0c f403 	lsl.w	r4, ip, r3
 80266ce:	4316      	orrs	r6, r2
 80266d0:	fa00 f503 	lsl.w	r5, r0, r3
 80266d4:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80266d8:	4630      	mov	r0, r6
 80266da:	4649      	mov	r1, r9
 80266dc:	b2a7      	uxth	r7, r4
 80266de:	f7ff fe2b 	bl	8026338 <__aeabi_uidiv>
 80266e2:	4649      	mov	r1, r9
 80266e4:	4682      	mov	sl, r0
 80266e6:	4630      	mov	r0, r6
 80266e8:	f7ff ff54 	bl	8026594 <__aeabi_uidivmod>
 80266ec:	0c28      	lsrs	r0, r5, #16
 80266ee:	fb07 f30a 	mul.w	r3, r7, sl
 80266f2:	ea40 4b01 	orr.w	fp, r0, r1, lsl #16
 80266f6:	455b      	cmp	r3, fp
 80266f8:	d90b      	bls.n	8026712 <__divdi3+0x86>
 80266fa:	eb1b 0b04 	adds.w	fp, fp, r4
 80266fe:	f10a 32ff 	add.w	r2, sl, #4294967295
 8026702:	d205      	bcs.n	8026710 <__divdi3+0x84>
 8026704:	455b      	cmp	r3, fp
 8026706:	bf84      	itt	hi
 8026708:	f1aa 0a02 	subhi.w	sl, sl, #2
 802670c:	44a3      	addhi	fp, r4
 802670e:	d800      	bhi.n	8026712 <__divdi3+0x86>
 8026710:	4692      	mov	sl, r2
 8026712:	ebc3 0b0b 	rsb	fp, r3, fp
 8026716:	4649      	mov	r1, r9
 8026718:	4658      	mov	r0, fp
 802671a:	b2ad      	uxth	r5, r5
 802671c:	f7ff fe0c 	bl	8026338 <__aeabi_uidiv>
 8026720:	4649      	mov	r1, r9
 8026722:	4606      	mov	r6, r0
 8026724:	4658      	mov	r0, fp
 8026726:	f7ff ff35 	bl	8026594 <__aeabi_uidivmod>
 802672a:	fb07 f706 	mul.w	r7, r7, r6
 802672e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8026732:	42af      	cmp	r7, r5
 8026734:	d906      	bls.n	8026744 <__divdi3+0xb8>
 8026736:	1e73      	subs	r3, r6, #1
 8026738:	192d      	adds	r5, r5, r4
 802673a:	d202      	bcs.n	8026742 <__divdi3+0xb6>
 802673c:	3e02      	subs	r6, #2
 802673e:	42af      	cmp	r7, r5
 8026740:	d800      	bhi.n	8026744 <__divdi3+0xb8>
 8026742:	461e      	mov	r6, r3
 8026744:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8026748:	2700      	movs	r7, #0
 802674a:	e003      	b.n	8026754 <__divdi3+0xc8>
 802674c:	42bb      	cmp	r3, r7
 802674e:	d90c      	bls.n	802676a <__divdi3+0xde>
 8026750:	2700      	movs	r7, #0
 8026752:	463e      	mov	r6, r7
 8026754:	4630      	mov	r0, r6
 8026756:	4639      	mov	r1, r7
 8026758:	f1b8 0f00 	cmp.w	r8, #0
 802675c:	d002      	beq.n	8026764 <__divdi3+0xd8>
 802675e:	4240      	negs	r0, r0
 8026760:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8026764:	b005      	add	sp, #20
 8026766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802676a:	fab3 f483 	clz	r4, r3
 802676e:	2c00      	cmp	r4, #0
 8026770:	f040 80b2 	bne.w	80268d8 <__divdi3+0x24c>
 8026774:	42bb      	cmp	r3, r7
 8026776:	bf2c      	ite	cs
 8026778:	2700      	movcs	r7, #0
 802677a:	2701      	movcc	r7, #1
 802677c:	4282      	cmp	r2, r0
 802677e:	bf98      	it	ls
 8026780:	f047 0701 	orrls.w	r7, r7, #1
 8026784:	2f00      	cmp	r7, #0
 8026786:	d0e4      	beq.n	8026752 <__divdi3+0xc6>
 8026788:	4627      	mov	r7, r4
 802678a:	2601      	movs	r6, #1
 802678c:	e7e2      	b.n	8026754 <__divdi3+0xc8>
 802678e:	b922      	cbnz	r2, 802679a <__divdi3+0x10e>
 8026790:	2001      	movs	r0, #1
 8026792:	4611      	mov	r1, r2
 8026794:	f7ff fdd0 	bl	8026338 <__aeabi_uidiv>
 8026798:	4604      	mov	r4, r0
 802679a:	fab4 f384 	clz	r3, r4
 802679e:	2b00      	cmp	r3, #0
 80267a0:	d14d      	bne.n	802683e <__divdi3+0x1b2>
 80267a2:	1b36      	subs	r6, r6, r4
 80267a4:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80267a8:	2701      	movs	r7, #1
 80267aa:	b2a3      	uxth	r3, r4
 80267ac:	9302      	str	r3, [sp, #8]
 80267ae:	4649      	mov	r1, r9
 80267b0:	4630      	mov	r0, r6
 80267b2:	f7ff fdc1 	bl	8026338 <__aeabi_uidiv>
 80267b6:	4649      	mov	r1, r9
 80267b8:	4682      	mov	sl, r0
 80267ba:	4630      	mov	r0, r6
 80267bc:	f7ff feea 	bl	8026594 <__aeabi_uidivmod>
 80267c0:	9802      	ldr	r0, [sp, #8]
 80267c2:	0c2a      	lsrs	r2, r5, #16
 80267c4:	fb00 f30a 	mul.w	r3, r0, sl
 80267c8:	ea42 4b01 	orr.w	fp, r2, r1, lsl #16
 80267cc:	455b      	cmp	r3, fp
 80267ce:	d90c      	bls.n	80267ea <__divdi3+0x15e>
 80267d0:	eb1b 0b04 	adds.w	fp, fp, r4
 80267d4:	f10a 32ff 	add.w	r2, sl, #4294967295
 80267d8:	f080 80ff 	bcs.w	80269da <__divdi3+0x34e>
 80267dc:	455b      	cmp	r3, fp
 80267de:	bf84      	itt	hi
 80267e0:	f1aa 0a02 	subhi.w	sl, sl, #2
 80267e4:	44a3      	addhi	fp, r4
 80267e6:	f240 80f8 	bls.w	80269da <__divdi3+0x34e>
 80267ea:	ebc3 0b0b 	rsb	fp, r3, fp
 80267ee:	4649      	mov	r1, r9
 80267f0:	4658      	mov	r0, fp
 80267f2:	f7ff fda1 	bl	8026338 <__aeabi_uidiv>
 80267f6:	4649      	mov	r1, r9
 80267f8:	4606      	mov	r6, r0
 80267fa:	4658      	mov	r0, fp
 80267fc:	f7ff feca 	bl	8026594 <__aeabi_uidivmod>
 8026800:	9b02      	ldr	r3, [sp, #8]
 8026802:	fa1f fc85 	uxth.w	ip, r5
 8026806:	fb03 f306 	mul.w	r3, r3, r6
 802680a:	ea4c 4501 	orr.w	r5, ip, r1, lsl #16
 802680e:	42ab      	cmp	r3, r5
 8026810:	d906      	bls.n	8026820 <__divdi3+0x194>
 8026812:	1e72      	subs	r2, r6, #1
 8026814:	192d      	adds	r5, r5, r4
 8026816:	d202      	bcs.n	802681e <__divdi3+0x192>
 8026818:	3e02      	subs	r6, #2
 802681a:	42ab      	cmp	r3, r5
 802681c:	d800      	bhi.n	8026820 <__divdi3+0x194>
 802681e:	4616      	mov	r6, r2
 8026820:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8026824:	e796      	b.n	8026754 <__divdi3+0xc8>
 8026826:	4252      	negs	r2, r2
 8026828:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 802682c:	ea6f 0808 	mvn.w	r8, r8
 8026830:	e739      	b.n	80266a6 <__divdi3+0x1a>
 8026832:	4240      	negs	r0, r0
 8026834:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8026838:	f04f 38ff 	mov.w	r8, #4294967295
 802683c:	e730      	b.n	80266a0 <__divdi3+0x14>
 802683e:	409c      	lsls	r4, r3
 8026840:	f1c3 0120 	rsb	r1, r3, #32
 8026844:	fa26 f701 	lsr.w	r7, r6, r1
 8026848:	fa06 fa03 	lsl.w	sl, r6, r3
 802684c:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8026850:	fa25 f201 	lsr.w	r2, r5, r1
 8026854:	4638      	mov	r0, r7
 8026856:	4649      	mov	r1, r9
 8026858:	ea42 0b0a 	orr.w	fp, r2, sl
 802685c:	409d      	lsls	r5, r3
 802685e:	f7ff fd6b 	bl	8026338 <__aeabi_uidiv>
 8026862:	4649      	mov	r1, r9
 8026864:	b2a6      	uxth	r6, r4
 8026866:	4682      	mov	sl, r0
 8026868:	4638      	mov	r0, r7
 802686a:	f7ff fe93 	bl	8026594 <__aeabi_uidivmod>
 802686e:	ea4f 471b 	mov.w	r7, fp, lsr #16
 8026872:	fb06 f30a 	mul.w	r3, r6, sl
 8026876:	9602      	str	r6, [sp, #8]
 8026878:	ea47 4601 	orr.w	r6, r7, r1, lsl #16
 802687c:	42b3      	cmp	r3, r6
 802687e:	d90b      	bls.n	8026898 <__divdi3+0x20c>
 8026880:	1936      	adds	r6, r6, r4
 8026882:	f10a 32ff 	add.w	r2, sl, #4294967295
 8026886:	f080 80b0 	bcs.w	80269ea <__divdi3+0x35e>
 802688a:	42b3      	cmp	r3, r6
 802688c:	bf84      	itt	hi
 802688e:	f1aa 0a02 	subhi.w	sl, sl, #2
 8026892:	1936      	addhi	r6, r6, r4
 8026894:	f240 80a9 	bls.w	80269ea <__divdi3+0x35e>
 8026898:	1af6      	subs	r6, r6, r3
 802689a:	4649      	mov	r1, r9
 802689c:	4630      	mov	r0, r6
 802689e:	f7ff fd4b 	bl	8026338 <__aeabi_uidiv>
 80268a2:	4649      	mov	r1, r9
 80268a4:	4607      	mov	r7, r0
 80268a6:	4630      	mov	r0, r6
 80268a8:	f7ff fe74 	bl	8026594 <__aeabi_uidivmod>
 80268ac:	9b02      	ldr	r3, [sp, #8]
 80268ae:	fa1f f08b 	uxth.w	r0, fp
 80268b2:	fb03 f307 	mul.w	r3, r3, r7
 80268b6:	ea40 4601 	orr.w	r6, r0, r1, lsl #16
 80268ba:	42b3      	cmp	r3, r6
 80268bc:	d908      	bls.n	80268d0 <__divdi3+0x244>
 80268be:	1e7a      	subs	r2, r7, #1
 80268c0:	1936      	adds	r6, r6, r4
 80268c2:	f080 808c 	bcs.w	80269de <__divdi3+0x352>
 80268c6:	42b3      	cmp	r3, r6
 80268c8:	f240 8089 	bls.w	80269de <__divdi3+0x352>
 80268cc:	3f02      	subs	r7, #2
 80268ce:	1936      	adds	r6, r6, r4
 80268d0:	1af6      	subs	r6, r6, r3
 80268d2:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 80268d6:	e76a      	b.n	80267ae <__divdi3+0x122>
 80268d8:	f1c4 0b20 	rsb	fp, r4, #32
 80268dc:	fa03 f904 	lsl.w	r9, r3, r4
 80268e0:	fa22 f30b 	lsr.w	r3, r2, fp
 80268e4:	fa27 fa0b 	lsr.w	sl, r7, fp
 80268e8:	ea43 0909 	orr.w	r9, r3, r9
 80268ec:	fa20 f10b 	lsr.w	r1, r0, fp
 80268f0:	fa07 f604 	lsl.w	r6, r7, r4
 80268f4:	4650      	mov	r0, sl
 80268f6:	ea4f 4b19 	mov.w	fp, r9, lsr #16
 80268fa:	ea41 0706 	orr.w	r7, r1, r6
 80268fe:	4659      	mov	r1, fp
 8026900:	fa02 fe04 	lsl.w	lr, r2, r4
 8026904:	9703      	str	r7, [sp, #12]
 8026906:	f8cd e008 	str.w	lr, [sp, #8]
 802690a:	f7ff fd15 	bl	8026338 <__aeabi_uidiv>
 802690e:	4659      	mov	r1, fp
 8026910:	4607      	mov	r7, r0
 8026912:	4650      	mov	r0, sl
 8026914:	f7ff fe3e 	bl	8026594 <__aeabi_uidivmod>
 8026918:	9a03      	ldr	r2, [sp, #12]
 802691a:	fa1f f389 	uxth.w	r3, r9
 802691e:	0c16      	lsrs	r6, r2, #16
 8026920:	fb03 f207 	mul.w	r2, r3, r7
 8026924:	ea46 4a01 	orr.w	sl, r6, r1, lsl #16
 8026928:	4552      	cmp	r2, sl
 802692a:	d907      	bls.n	802693c <__divdi3+0x2b0>
 802692c:	1e79      	subs	r1, r7, #1
 802692e:	eb1a 0a09 	adds.w	sl, sl, r9
 8026932:	d258      	bcs.n	80269e6 <__divdi3+0x35a>
 8026934:	4552      	cmp	r2, sl
 8026936:	d956      	bls.n	80269e6 <__divdi3+0x35a>
 8026938:	3f02      	subs	r7, #2
 802693a:	44ca      	add	sl, r9
 802693c:	ebc2 0a0a 	rsb	sl, r2, sl
 8026940:	4659      	mov	r1, fp
 8026942:	4650      	mov	r0, sl
 8026944:	9301      	str	r3, [sp, #4]
 8026946:	f7ff fcf7 	bl	8026338 <__aeabi_uidiv>
 802694a:	4659      	mov	r1, fp
 802694c:	4606      	mov	r6, r0
 802694e:	4650      	mov	r0, sl
 8026950:	f7ff fe20 	bl	8026594 <__aeabi_uidivmod>
 8026954:	9b01      	ldr	r3, [sp, #4]
 8026956:	9a03      	ldr	r2, [sp, #12]
 8026958:	fb03 f306 	mul.w	r3, r3, r6
 802695c:	b290      	uxth	r0, r2
 802695e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8026962:	4293      	cmp	r3, r2
 8026964:	d907      	bls.n	8026976 <__divdi3+0x2ea>
 8026966:	1e71      	subs	r1, r6, #1
 8026968:	eb12 0209 	adds.w	r2, r2, r9
 802696c:	d239      	bcs.n	80269e2 <__divdi3+0x356>
 802696e:	4293      	cmp	r3, r2
 8026970:	d937      	bls.n	80269e2 <__divdi3+0x356>
 8026972:	3e02      	subs	r6, #2
 8026974:	444a      	add	r2, r9
 8026976:	9802      	ldr	r0, [sp, #8]
 8026978:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 802697c:	1ad2      	subs	r2, r2, r3
 802697e:	b2b3      	uxth	r3, r6
 8026980:	0c37      	lsrs	r7, r6, #16
 8026982:	fa1f fe80 	uxth.w	lr, r0
 8026986:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 802698a:	fb0e f903 	mul.w	r9, lr, r3
 802698e:	fb0e f007 	mul.w	r0, lr, r7
 8026992:	fb0c 0103 	mla	r1, ip, r3, r0
 8026996:	fb0c fe07 	mul.w	lr, ip, r7
 802699a:	eb01 4119 	add.w	r1, r1, r9, lsr #16
 802699e:	4288      	cmp	r0, r1
 80269a0:	bf88      	it	hi
 80269a2:	f50e 3e80 	addhi.w	lr, lr, #65536	; 0x10000
 80269a6:	eb0e 4c11 	add.w	ip, lr, r1, lsr #16
 80269aa:	4562      	cmp	r2, ip
 80269ac:	d312      	bcc.n	80269d4 <__divdi3+0x348>
 80269ae:	ea4f 4101 	mov.w	r1, r1, lsl #16
 80269b2:	fa1f f989 	uxth.w	r9, r9
 80269b6:	bf14      	ite	ne
 80269b8:	2700      	movne	r7, #0
 80269ba:	2701      	moveq	r7, #1
 80269bc:	fa05 f404 	lsl.w	r4, r5, r4
 80269c0:	eb01 0209 	add.w	r2, r1, r9
 80269c4:	4294      	cmp	r4, r2
 80269c6:	bf2c      	ite	cs
 80269c8:	2700      	movcs	r7, #0
 80269ca:	f007 0701 	andcc.w	r7, r7, #1
 80269ce:	2f00      	cmp	r7, #0
 80269d0:	f43f aec0 	beq.w	8026754 <__divdi3+0xc8>
 80269d4:	3e01      	subs	r6, #1
 80269d6:	2700      	movs	r7, #0
 80269d8:	e6bc      	b.n	8026754 <__divdi3+0xc8>
 80269da:	4692      	mov	sl, r2
 80269dc:	e705      	b.n	80267ea <__divdi3+0x15e>
 80269de:	4617      	mov	r7, r2
 80269e0:	e776      	b.n	80268d0 <__divdi3+0x244>
 80269e2:	460e      	mov	r6, r1
 80269e4:	e7c7      	b.n	8026976 <__divdi3+0x2ea>
 80269e6:	460f      	mov	r7, r1
 80269e8:	e7a8      	b.n	802693c <__divdi3+0x2b0>
 80269ea:	4692      	mov	sl, r2
 80269ec:	e754      	b.n	8026898 <__divdi3+0x20c>
 80269ee:	bf00      	nop

080269f0 <__udivdi3>:
 80269f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80269f4:	4605      	mov	r5, r0
 80269f6:	b083      	sub	sp, #12
 80269f8:	460c      	mov	r4, r1
 80269fa:	4617      	mov	r7, r2
 80269fc:	4680      	mov	r8, r0
 80269fe:	468b      	mov	fp, r1
 8026a00:	2b00      	cmp	r3, #0
 8026a02:	d152      	bne.n	8026aaa <__udivdi3+0xba>
 8026a04:	428a      	cmp	r2, r1
 8026a06:	d964      	bls.n	8026ad2 <__udivdi3+0xe2>
 8026a08:	fab2 f382 	clz	r3, r2
 8026a0c:	b153      	cbz	r3, 8026a24 <__udivdi3+0x34>
 8026a0e:	f1c3 0420 	rsb	r4, r3, #32
 8026a12:	fa01 f103 	lsl.w	r1, r1, r3
 8026a16:	fa20 f204 	lsr.w	r2, r0, r4
 8026a1a:	409f      	lsls	r7, r3
 8026a1c:	ea42 0b01 	orr.w	fp, r2, r1
 8026a20:	fa00 f803 	lsl.w	r8, r0, r3
 8026a24:	0c3c      	lsrs	r4, r7, #16
 8026a26:	4658      	mov	r0, fp
 8026a28:	4621      	mov	r1, r4
 8026a2a:	b2be      	uxth	r6, r7
 8026a2c:	f7ff fc84 	bl	8026338 <__aeabi_uidiv>
 8026a30:	4621      	mov	r1, r4
 8026a32:	4681      	mov	r9, r0
 8026a34:	4658      	mov	r0, fp
 8026a36:	f7ff fdad 	bl	8026594 <__aeabi_uidivmod>
 8026a3a:	ea4f 4018 	mov.w	r0, r8, lsr #16
 8026a3e:	fb06 f309 	mul.w	r3, r6, r9
 8026a42:	ea40 4a01 	orr.w	sl, r0, r1, lsl #16
 8026a46:	4553      	cmp	r3, sl
 8026a48:	d90b      	bls.n	8026a62 <__udivdi3+0x72>
 8026a4a:	eb1a 0a07 	adds.w	sl, sl, r7
 8026a4e:	f109 32ff 	add.w	r2, r9, #4294967295
 8026a52:	d205      	bcs.n	8026a60 <__udivdi3+0x70>
 8026a54:	4553      	cmp	r3, sl
 8026a56:	bf84      	itt	hi
 8026a58:	f1a9 0902 	subhi.w	r9, r9, #2
 8026a5c:	44ba      	addhi	sl, r7
 8026a5e:	d800      	bhi.n	8026a62 <__udivdi3+0x72>
 8026a60:	4691      	mov	r9, r2
 8026a62:	ebc3 0a0a 	rsb	sl, r3, sl
 8026a66:	4621      	mov	r1, r4
 8026a68:	4650      	mov	r0, sl
 8026a6a:	f7ff fc65 	bl	8026338 <__aeabi_uidiv>
 8026a6e:	4621      	mov	r1, r4
 8026a70:	4605      	mov	r5, r0
 8026a72:	4650      	mov	r0, sl
 8026a74:	f7ff fd8e 	bl	8026594 <__aeabi_uidivmod>
 8026a78:	fa1f f388 	uxth.w	r3, r8
 8026a7c:	fb06 f605 	mul.w	r6, r6, r5
 8026a80:	ea43 4801 	orr.w	r8, r3, r1, lsl #16
 8026a84:	4546      	cmp	r6, r8
 8026a86:	d908      	bls.n	8026a9a <__udivdi3+0xaa>
 8026a88:	1e6b      	subs	r3, r5, #1
 8026a8a:	eb18 0807 	adds.w	r8, r8, r7
 8026a8e:	f080 812e 	bcs.w	8026cee <__udivdi3+0x2fe>
 8026a92:	3d02      	subs	r5, #2
 8026a94:	4546      	cmp	r6, r8
 8026a96:	f240 812a 	bls.w	8026cee <__udivdi3+0x2fe>
 8026a9a:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8026a9e:	2600      	movs	r6, #0
 8026aa0:	4631      	mov	r1, r6
 8026aa2:	4628      	mov	r0, r5
 8026aa4:	b003      	add	sp, #12
 8026aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026aaa:	428b      	cmp	r3, r1
 8026aac:	d85a      	bhi.n	8026b64 <__udivdi3+0x174>
 8026aae:	fab3 f683 	clz	r6, r3
 8026ab2:	2e00      	cmp	r6, #0
 8026ab4:	d159      	bne.n	8026b6a <__udivdi3+0x17a>
 8026ab6:	428b      	cmp	r3, r1
 8026ab8:	bf2c      	ite	cs
 8026aba:	2400      	movcs	r4, #0
 8026abc:	2401      	movcc	r4, #1
 8026abe:	4282      	cmp	r2, r0
 8026ac0:	bf8c      	ite	hi
 8026ac2:	4625      	movhi	r5, r4
 8026ac4:	f044 0501 	orrls.w	r5, r4, #1
 8026ac8:	2d00      	cmp	r5, #0
 8026aca:	f040 8116 	bne.w	8026cfa <__udivdi3+0x30a>
 8026ace:	462e      	mov	r6, r5
 8026ad0:	e7e6      	b.n	8026aa0 <__udivdi3+0xb0>
 8026ad2:	b922      	cbnz	r2, 8026ade <__udivdi3+0xee>
 8026ad4:	2001      	movs	r0, #1
 8026ad6:	4611      	mov	r1, r2
 8026ad8:	f7ff fc2e 	bl	8026338 <__aeabi_uidiv>
 8026adc:	4607      	mov	r7, r0
 8026ade:	fab7 f387 	clz	r3, r7
 8026ae2:	2b00      	cmp	r3, #0
 8026ae4:	f040 80bd 	bne.w	8026c62 <__udivdi3+0x272>
 8026ae8:	1be4      	subs	r4, r4, r7
 8026aea:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8026aee:	fa1f f987 	uxth.w	r9, r7
 8026af2:	2601      	movs	r6, #1
 8026af4:	4659      	mov	r1, fp
 8026af6:	4620      	mov	r0, r4
 8026af8:	f7ff fc1e 	bl	8026338 <__aeabi_uidiv>
 8026afc:	4659      	mov	r1, fp
 8026afe:	4605      	mov	r5, r0
 8026b00:	4620      	mov	r0, r4
 8026b02:	f7ff fd47 	bl	8026594 <__aeabi_uidivmod>
 8026b06:	ea4f 4018 	mov.w	r0, r8, lsr #16
 8026b0a:	fb09 f305 	mul.w	r3, r9, r5
 8026b0e:	ea40 4a01 	orr.w	sl, r0, r1, lsl #16
 8026b12:	4553      	cmp	r3, sl
 8026b14:	d907      	bls.n	8026b26 <__udivdi3+0x136>
 8026b16:	1e6a      	subs	r2, r5, #1
 8026b18:	eb1a 0a07 	adds.w	sl, sl, r7
 8026b1c:	d202      	bcs.n	8026b24 <__udivdi3+0x134>
 8026b1e:	4553      	cmp	r3, sl
 8026b20:	f200 8101 	bhi.w	8026d26 <__udivdi3+0x336>
 8026b24:	4615      	mov	r5, r2
 8026b26:	ebc3 0a0a 	rsb	sl, r3, sl
 8026b2a:	4659      	mov	r1, fp
 8026b2c:	4650      	mov	r0, sl
 8026b2e:	f7ff fc03 	bl	8026338 <__aeabi_uidiv>
 8026b32:	4659      	mov	r1, fp
 8026b34:	4604      	mov	r4, r0
 8026b36:	4650      	mov	r0, sl
 8026b38:	f7ff fd2c 	bl	8026594 <__aeabi_uidivmod>
 8026b3c:	fa1f f388 	uxth.w	r3, r8
 8026b40:	fb09 f904 	mul.w	r9, r9, r4
 8026b44:	ea43 4801 	orr.w	r8, r3, r1, lsl #16
 8026b48:	45c1      	cmp	r9, r8
 8026b4a:	d908      	bls.n	8026b5e <__udivdi3+0x16e>
 8026b4c:	1e63      	subs	r3, r4, #1
 8026b4e:	eb18 0807 	adds.w	r8, r8, r7
 8026b52:	f080 80ce 	bcs.w	8026cf2 <__udivdi3+0x302>
 8026b56:	3c02      	subs	r4, #2
 8026b58:	45c1      	cmp	r9, r8
 8026b5a:	f240 80ca 	bls.w	8026cf2 <__udivdi3+0x302>
 8026b5e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8026b62:	e79d      	b.n	8026aa0 <__udivdi3+0xb0>
 8026b64:	2600      	movs	r6, #0
 8026b66:	4635      	mov	r5, r6
 8026b68:	e79a      	b.n	8026aa0 <__udivdi3+0xb0>
 8026b6a:	f1c6 0e20 	rsb	lr, r6, #32
 8026b6e:	fa03 f706 	lsl.w	r7, r3, r6
 8026b72:	fa22 fc0e 	lsr.w	ip, r2, lr
 8026b76:	fa21 fb0e 	lsr.w	fp, r1, lr
 8026b7a:	ea4c 0707 	orr.w	r7, ip, r7
 8026b7e:	fa20 fa0e 	lsr.w	sl, r0, lr
 8026b82:	fa01 f306 	lsl.w	r3, r1, r6
 8026b86:	4658      	mov	r0, fp
 8026b88:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8026b8c:	ea4a 0103 	orr.w	r1, sl, r3
 8026b90:	9101      	str	r1, [sp, #4]
 8026b92:	4641      	mov	r1, r8
 8026b94:	fa02 f406 	lsl.w	r4, r2, r6
 8026b98:	9400      	str	r4, [sp, #0]
 8026b9a:	f7ff fbcd 	bl	8026338 <__aeabi_uidiv>
 8026b9e:	4641      	mov	r1, r8
 8026ba0:	b2bc      	uxth	r4, r7
 8026ba2:	4682      	mov	sl, r0
 8026ba4:	4658      	mov	r0, fp
 8026ba6:	f7ff fcf5 	bl	8026594 <__aeabi_uidivmod>
 8026baa:	9801      	ldr	r0, [sp, #4]
 8026bac:	fb04 f30a 	mul.w	r3, r4, sl
 8026bb0:	0c02      	lsrs	r2, r0, #16
 8026bb2:	ea42 4b01 	orr.w	fp, r2, r1, lsl #16
 8026bb6:	455b      	cmp	r3, fp
 8026bb8:	d906      	bls.n	8026bc8 <__udivdi3+0x1d8>
 8026bba:	eb1b 0b07 	adds.w	fp, fp, r7
 8026bbe:	f10a 32ff 	add.w	r2, sl, #4294967295
 8026bc2:	f0c0 80a4 	bcc.w	8026d0e <__udivdi3+0x31e>
 8026bc6:	4692      	mov	sl, r2
 8026bc8:	ebc3 0b0b 	rsb	fp, r3, fp
 8026bcc:	4641      	mov	r1, r8
 8026bce:	4658      	mov	r0, fp
 8026bd0:	f7ff fbb2 	bl	8026338 <__aeabi_uidiv>
 8026bd4:	4641      	mov	r1, r8
 8026bd6:	4681      	mov	r9, r0
 8026bd8:	4658      	mov	r0, fp
 8026bda:	f7ff fcdb 	bl	8026594 <__aeabi_uidivmod>
 8026bde:	9801      	ldr	r0, [sp, #4]
 8026be0:	fb04 f409 	mul.w	r4, r4, r9
 8026be4:	b282      	uxth	r2, r0
 8026be6:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8026bea:	429c      	cmp	r4, r3
 8026bec:	d905      	bls.n	8026bfa <__udivdi3+0x20a>
 8026bee:	19db      	adds	r3, r3, r7
 8026bf0:	f109 32ff 	add.w	r2, r9, #4294967295
 8026bf4:	f0c0 8083 	bcc.w	8026cfe <__udivdi3+0x30e>
 8026bf8:	4691      	mov	r9, r2
 8026bfa:	9f00      	ldr	r7, [sp, #0]
 8026bfc:	ea49 490a 	orr.w	r9, r9, sl, lsl #16
 8026c00:	1b1c      	subs	r4, r3, r4
 8026c02:	fa1f f389 	uxth.w	r3, r9
 8026c06:	fa1f fe87 	uxth.w	lr, r7
 8026c0a:	0c3a      	lsrs	r2, r7, #16
 8026c0c:	ea4f 4719 	mov.w	r7, r9, lsr #16
 8026c10:	fb0e fc03 	mul.w	ip, lr, r3
 8026c14:	fb0e f007 	mul.w	r0, lr, r7
 8026c18:	fb02 0103 	mla	r1, r2, r3, r0
 8026c1c:	fb02 fe07 	mul.w	lr, r2, r7
 8026c20:	eb01 411c 	add.w	r1, r1, ip, lsr #16
 8026c24:	4288      	cmp	r0, r1
 8026c26:	bf88      	it	hi
 8026c28:	f50e 3e80 	addhi.w	lr, lr, #65536	; 0x10000
 8026c2c:	eb0e 4311 	add.w	r3, lr, r1, lsr #16
 8026c30:	429c      	cmp	r4, r3
 8026c32:	d312      	bcc.n	8026c5a <__udivdi3+0x26a>
 8026c34:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8026c38:	fa1f f28c 	uxth.w	r2, ip
 8026c3c:	fa05 f506 	lsl.w	r5, r5, r6
 8026c40:	bf14      	ite	ne
 8026c42:	2000      	movne	r0, #0
 8026c44:	2001      	moveq	r0, #1
 8026c46:	188e      	adds	r6, r1, r2
 8026c48:	42b5      	cmp	r5, r6
 8026c4a:	bf2c      	ite	cs
 8026c4c:	2600      	movcs	r6, #0
 8026c4e:	f000 0601 	andcc.w	r6, r0, #1
 8026c52:	464d      	mov	r5, r9
 8026c54:	2e00      	cmp	r6, #0
 8026c56:	f43f af23 	beq.w	8026aa0 <__udivdi3+0xb0>
 8026c5a:	f109 35ff 	add.w	r5, r9, #4294967295
 8026c5e:	2600      	movs	r6, #0
 8026c60:	e71e      	b.n	8026aa0 <__udivdi3+0xb0>
 8026c62:	409f      	lsls	r7, r3
 8026c64:	f1c3 0120 	rsb	r1, r3, #32
 8026c68:	fa24 f901 	lsr.w	r9, r4, r1
 8026c6c:	fa04 f203 	lsl.w	r2, r4, r3
 8026c70:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8026c74:	fa25 f601 	lsr.w	r6, r5, r1
 8026c78:	4648      	mov	r0, r9
 8026c7a:	4659      	mov	r1, fp
 8026c7c:	ea46 0a02 	orr.w	sl, r6, r2
 8026c80:	fa05 f803 	lsl.w	r8, r5, r3
 8026c84:	f7ff fb58 	bl	8026338 <__aeabi_uidiv>
 8026c88:	4659      	mov	r1, fp
 8026c8a:	ea4f 451a 	mov.w	r5, sl, lsr #16
 8026c8e:	4606      	mov	r6, r0
 8026c90:	4648      	mov	r0, r9
 8026c92:	f7ff fc7f 	bl	8026594 <__aeabi_uidivmod>
 8026c96:	fa1f f987 	uxth.w	r9, r7
 8026c9a:	fb09 f306 	mul.w	r3, r9, r6
 8026c9e:	ea45 4401 	orr.w	r4, r5, r1, lsl #16
 8026ca2:	42a3      	cmp	r3, r4
 8026ca4:	d906      	bls.n	8026cb4 <__udivdi3+0x2c4>
 8026ca6:	1e72      	subs	r2, r6, #1
 8026ca8:	19e4      	adds	r4, r4, r7
 8026caa:	d238      	bcs.n	8026d1e <__udivdi3+0x32e>
 8026cac:	42a3      	cmp	r3, r4
 8026cae:	d936      	bls.n	8026d1e <__udivdi3+0x32e>
 8026cb0:	3e02      	subs	r6, #2
 8026cb2:	19e4      	adds	r4, r4, r7
 8026cb4:	1ae4      	subs	r4, r4, r3
 8026cb6:	4659      	mov	r1, fp
 8026cb8:	4620      	mov	r0, r4
 8026cba:	f7ff fb3d 	bl	8026338 <__aeabi_uidiv>
 8026cbe:	4659      	mov	r1, fp
 8026cc0:	4605      	mov	r5, r0
 8026cc2:	4620      	mov	r0, r4
 8026cc4:	f7ff fc66 	bl	8026594 <__aeabi_uidivmod>
 8026cc8:	fa1f f48a 	uxth.w	r4, sl
 8026ccc:	fb09 f305 	mul.w	r3, r9, r5
 8026cd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8026cd4:	42a3      	cmp	r3, r4
 8026cd6:	d906      	bls.n	8026ce6 <__udivdi3+0x2f6>
 8026cd8:	1e6a      	subs	r2, r5, #1
 8026cda:	19e4      	adds	r4, r4, r7
 8026cdc:	d221      	bcs.n	8026d22 <__udivdi3+0x332>
 8026cde:	42a3      	cmp	r3, r4
 8026ce0:	d91f      	bls.n	8026d22 <__udivdi3+0x332>
 8026ce2:	3d02      	subs	r5, #2
 8026ce4:	19e4      	adds	r4, r4, r7
 8026ce6:	1ae4      	subs	r4, r4, r3
 8026ce8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8026cec:	e702      	b.n	8026af4 <__udivdi3+0x104>
 8026cee:	461d      	mov	r5, r3
 8026cf0:	e6d3      	b.n	8026a9a <__udivdi3+0xaa>
 8026cf2:	461c      	mov	r4, r3
 8026cf4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8026cf8:	e6d2      	b.n	8026aa0 <__udivdi3+0xb0>
 8026cfa:	2501      	movs	r5, #1
 8026cfc:	e6d0      	b.n	8026aa0 <__udivdi3+0xb0>
 8026cfe:	429c      	cmp	r4, r3
 8026d00:	bf84      	itt	hi
 8026d02:	f1a9 0902 	subhi.w	r9, r9, #2
 8026d06:	19db      	addhi	r3, r3, r7
 8026d08:	f63f af77 	bhi.w	8026bfa <__udivdi3+0x20a>
 8026d0c:	e774      	b.n	8026bf8 <__udivdi3+0x208>
 8026d0e:	455b      	cmp	r3, fp
 8026d10:	bf84      	itt	hi
 8026d12:	f1aa 0a02 	subhi.w	sl, sl, #2
 8026d16:	44bb      	addhi	fp, r7
 8026d18:	f63f af56 	bhi.w	8026bc8 <__udivdi3+0x1d8>
 8026d1c:	e753      	b.n	8026bc6 <__udivdi3+0x1d6>
 8026d1e:	4616      	mov	r6, r2
 8026d20:	e7c8      	b.n	8026cb4 <__udivdi3+0x2c4>
 8026d22:	4615      	mov	r5, r2
 8026d24:	e7df      	b.n	8026ce6 <__udivdi3+0x2f6>
 8026d26:	3d02      	subs	r5, #2
 8026d28:	44ba      	add	sl, r7
 8026d2a:	e6fc      	b.n	8026b26 <__udivdi3+0x136>

08026d2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
 	ldr	r0, =0x20009FFC         // HJI 11/9/2012
 8026d2c:	481c      	ldr	r0, [pc, #112]	; (8026da0 <Reboot_Loader+0x28>)
	ldr	r1, =0xDEADBEEF         // HJI 11/9/2012
 8026d2e:	491d      	ldr	r1, [pc, #116]	; (8026da4 <Reboot_Loader+0x2c>)
	ldr	r2, [r0, #0]            // HJI 11/9/2012
 8026d30:	6802      	ldr	r2, [r0, #0]
	str	r0, [r0, #0]            // HJI 11/9/2012
 8026d32:	6000      	str	r0, [r0, #0]
	cmp	r2, r1                  // HJI 11/9/2012
 8026d34:	428a      	cmp	r2, r1
	beq	Reboot_Loader           // HJI 11/9/2012
 8026d36:	f000 801f 	beq.w	8026d78 <Reboot_Loader>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8026d3a:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8026d3c:	f000 b804 	b.w	8026d48 <LoopCopyDataInit>

08026d40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8026d40:	4b19      	ldr	r3, [pc, #100]	; (8026da8 <Reboot_Loader+0x30>)
	ldr	r3, [r3, r1]
 8026d42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8026d44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8026d46:	3104      	adds	r1, #4

08026d48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8026d48:	4818      	ldr	r0, [pc, #96]	; (8026dac <Reboot_Loader+0x34>)
	ldr	r3, =_edata
 8026d4a:	4b19      	ldr	r3, [pc, #100]	; (8026db0 <Reboot_Loader+0x38>)
	adds	r2, r0, r1
 8026d4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8026d4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8026d50:	f4ff aff6 	bcc.w	8026d40 <CopyDataInit>
	ldr	r2, =_sbss
 8026d54:	4a17      	ldr	r2, [pc, #92]	; (8026db4 <Reboot_Loader+0x3c>)
	b	LoopFillZerobss
 8026d56:	f000 b803 	b.w	8026d60 <LoopFillZerobss>

08026d5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8026d5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8026d5c:	f842 3b04 	str.w	r3, [r2], #4

08026d60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8026d60:	4b15      	ldr	r3, [pc, #84]	; (8026db8 <Reboot_Loader+0x40>)
	cmp	r2, r3
 8026d62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8026d64:	f4ff aff9 	bcc.w	8026d5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8026d68:	f7ef fd06 	bl	8016778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8026d6c:	f7fa fb1c 	bl	80213a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8026d70:	f7ea f83a 	bl	8010de8 <main>

08026d74 <LoopForever>:

LoopForever:
    b LoopForever
 8026d74:	f7ff bffe 	b.w	8026d74 <LoopForever>

08026d78 <Reboot_Loader>:
.equ    GPIOE_OD_MASK,      0x00005500  // HJI 11/9/2012

Reboot_Loader:                          // HJI 11/9/2012

        // RCC Enable GPIOE Clock       // HJI 11/9/2012
        ldr     r6, =RCC_AHBENR         // HJI 11/9/2012
 8026d78:	4e10      	ldr	r6, [pc, #64]	; (8026dbc <Reboot_Loader+0x44>)
        ldr     r0, =GPIOE_CLK_MASK     // HJI 11/9/2012
 8026d7a:	4811      	ldr	r0, [pc, #68]	; (8026dc0 <Reboot_Loader+0x48>)
        str     r0, [r6];               // HJI 11/9/2012
 8026d7c:	6030      	str	r0, [r6, #0]
        
        // Set GPIOE 8-15 as Outputs    // HJI 11/9/2012
        ldr     r6, =GPIOE_MODER        // HJI 11/9/2012
 8026d7e:	4e11      	ldr	r6, [pc, #68]	; (8026dc4 <Reboot_Loader+0x4c>)
        ldr     r0, =GPIOE_MODE_MASK    // HJI 11/9/2012
 8026d80:	4811      	ldr	r0, [pc, #68]	; (8026dc8 <Reboot_Loader+0x50>)
        str     r0, [r6]                // HJI 11/9/2012
 8026d82:	6030      	str	r0, [r6, #0]
        
        // Set GPIOE 8-15 as Push-Pull  // HJI 11/9/2012
        ldr     r6, =GPIOE_OTYPER       // HJI 11/9/2012
 8026d84:	4e11      	ldr	r6, [pc, #68]	; (8026dcc <Reboot_Loader+0x54>)
        ldr     r0, =GPIOE_OTYPE_MASK   // HJI 11/9/2012
 8026d86:	4812      	ldr	r0, [pc, #72]	; (8026dd0 <Reboot_Loader+0x58>)
        str     r0, [r6]                // HJI 11/9/2012
 8026d88:	6030      	str	r0, [r6, #0]
        
        // Set GPIOE 8-15 at 2 MHz      // HJI 11/9/2012
        ldr     r6, =GPIOE_OSPEEDR      // HJI 11/9/2012
 8026d8a:	4e12      	ldr	r6, [pc, #72]	; (8026dd4 <Reboot_Loader+0x5c>)
        ldr     r0, =GPIOE_OSPEED_MASK  // HJI 11/9/2012
 8026d8c:	4810      	ldr	r0, [pc, #64]	; (8026dd0 <Reboot_Loader+0x58>)
        str     r0, [r6]                // HJI 11/9/2012
 8026d8e:	6030      	str	r0, [r6, #0]
        
        // Set GPIOE 8-15 High          // HJI 11/9/2012
        ldr     r6, =GPIOE_ODR          // HJI 11/9/2012
 8026d90:	4e11      	ldr	r6, [pc, #68]	; (8026dd8 <Reboot_Loader+0x60>)
        ldr     r0, =GPIOE_OD_MASK      // HJI 11/9/2012
 8026d92:	4812      	ldr	r0, [pc, #72]	; (8026ddc <Reboot_Loader+0x64>)
        str     r0, [r6]                // HJI 11/9/2012
 8026d94:	6030      	str	r0, [r6, #0]
        
        // Reboot to ROM                // HJI 11/9/2012
        ldr     r0, =0x1FFF0000         // HJI 11/9/2012
 8026d96:	4812      	ldr	r0, [pc, #72]	; (8026de0 <Reboot_Loader+0x68>)
        ldr     sp,[r0, #0]             // HJI 11/9/2012
 8026d98:	f8d0 d000 	ldr.w	sp, [r0]
        ldr     r0,[r0, #4]             // HJI 11/9/2012
 8026d9c:	6840      	ldr	r0, [r0, #4]
        bx      r0                      // HJI 11/9/2012
 8026d9e:	4700      	bx	r0

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
 	ldr	r0, =0x20009FFC         // HJI 11/9/2012
 8026da0:	20009ffc 	.word	0x20009ffc
	ldr	r1, =0xDEADBEEF         // HJI 11/9/2012
 8026da4:	deadbeef 	.word	0xdeadbeef
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8026da8:	0802ec7c 	.word	0x0802ec7c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8026dac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8026db0:	200006a4 	.word	0x200006a4
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8026db4:	200006a4 	.word	0x200006a4
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8026db8:	20003f5c 	.word	0x20003f5c
.equ    GPIOE_OD_MASK,      0x00005500  // HJI 11/9/2012

Reboot_Loader:                          // HJI 11/9/2012

        // RCC Enable GPIOE Clock       // HJI 11/9/2012
        ldr     r6, =RCC_AHBENR         // HJI 11/9/2012
 8026dbc:	40021014 	.word	0x40021014
        ldr     r0, =GPIOE_CLK_MASK     // HJI 11/9/2012
 8026dc0:	00200000 	.word	0x00200000
        str     r0, [r6];               // HJI 11/9/2012
        
        // Set GPIOE 8-15 as Outputs    // HJI 11/9/2012
        ldr     r6, =GPIOE_MODER        // HJI 11/9/2012
 8026dc4:	48001000 	.word	0x48001000
        ldr     r0, =GPIOE_MODE_MASK    // HJI 11/9/2012
 8026dc8:	11110000 	.word	0x11110000
        str     r0, [r6]                // HJI 11/9/2012
        
        // Set GPIOE 8-15 as Push-Pull  // HJI 11/9/2012
        ldr     r6, =GPIOE_OTYPER       // HJI 11/9/2012
 8026dcc:	48001004 	.word	0x48001004
        ldr     r0, =GPIOE_OTYPE_MASK   // HJI 11/9/2012
 8026dd0:	00000000 	.word	0x00000000
        str     r0, [r6]                // HJI 11/9/2012
        
        // Set GPIOE 8-15 at 2 MHz      // HJI 11/9/2012
        ldr     r6, =GPIOE_OSPEEDR      // HJI 11/9/2012
 8026dd4:	48001008 	.word	0x48001008
        ldr     r0, =GPIOE_OSPEED_MASK  // HJI 11/9/2012
        str     r0, [r6]                // HJI 11/9/2012
        
        // Set GPIOE 8-15 High          // HJI 11/9/2012
        ldr     r6, =GPIOE_ODR          // HJI 11/9/2012
 8026dd8:	48001014 	.word	0x48001014
        ldr     r0, =GPIOE_OD_MASK      // HJI 11/9/2012
 8026ddc:	00005500 	.word	0x00005500
        str     r0, [r6]                // HJI 11/9/2012
        
        // Reboot to ROM                // HJI 11/9/2012
        ldr     r0, =0x1FFF0000         // HJI 11/9/2012
 8026de0:	1fff0000 	.word	0x1fff0000

08026de4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8026de4:	f7ff bffe 	b.w	8026de4 <ADC1_2_IRQHandler>
 8026de8:	25632509 	.word	0x25632509
 8026dec:	252e6431 	.word	0x252e6431
 8026df0:	006d6431 	.word	0x006d6431
 8026df4:	64342509 	.word	0x64342509
 8026df8:	0000006d 	.word	0x0000006d
 8026dfc:	64342509 	.word	0x64342509
 8026e00:	00000066 	.word	0x00000066
 8026e04:	2563250a 	.word	0x2563250a
 8026e08:	252e6431 	.word	0x252e6431
 8026e0c:	006d6431 	.word	0x006d6431
 8026e10:	6434250a 	.word	0x6434250a
 8026e14:	0000006d 	.word	0x0000006d
 8026e18:	6434250a 	.word	0x6434250a
 8026e1c:	00000066 	.word	0x00000066
 8026e20:	6e61700a 	.word	0x6e61700a
 8026e24:	00006369 	.word	0x00006369

08026e28 <ahColumns>:
 8026e28:	110c0a08 00001513                       ........

08026e30 <ROLL_COLUMNS>:
 8026e30:	13110c0a 64332516 00000017              .....%3d....

08026e3c <ubx5Hz>:
 8026e3c:	080662b5 00c80006 00010001 00006ade     .b...........j..
 8026e4c:	43475024 312c444d 2c302c36 2c302c30     $PGCMD,16,0,0,0,
 8026e5c:	2a302c30 0a0d4136 00000000 544d5024     0,0*6A......$PMT
 8026e6c:	3032324b 3030322c 0d43322a 0000000a     K220,200*2C.....
 8026e7c:	544d5024 3331334b 322a312c 000a0d45     $PMTK313,1*2E...
 8026e8c:	544d5024 3130334b 322a322c 000a0d45     $PMTK301,2*2E...
 8026e9c:	544d5024 3739334b 322a302c 000a0d33     $PMTK397,0*23...
 8026eac:	544d5024 3431334b 312c302c 312c302c     $PMTK314,0,1,0,1
 8026ebc:	302c312c 302c302c 302c302c 302c302c     ,1,0,0,0,0,0,0,0
 8026ecc:	302c302c 302c302c 302c302c 322a302c     ,0,0,0,0,0,0,0*2
 8026edc:	000a0d39 42555024 31342c58 302c312c     9...$PUBX,41,1,0
 8026eec:	2c333030 31303030 3438332c 302c3030     003,0001,38400,0
 8026efc:	0d36322a 0000000a                       *26.....

08026f04 <nib2hex>:
 8026f04:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8026f14:	47475047 00002c41 53475047 00002c41     GPGGA,..GPGSA,..
 8026f24:	4d525047 00002c43                       GPRMC,..

08026f2c <fontdata>:
 8026f2c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8026f3c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8026f4c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8026f5c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8026f6c:	55545555 55555255 52555552 55425555     UUTUURUURUURUUBU
 8026f7c:	54552a55 15525580 40155255 aa2a1502     U*UT.UR.UR.@..*.
 8026f8c:	15024015 55155255 55558054 4055552a     .@..UR.UT.UU*UU@
 8026f9c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8026fac:	85555515 55855555 55558555 a8555581     .UU.UU.UU.UU.UU.
 8026fbc:	15025555 55855455 54558554 aa540180     UU..UT.UT.UT..T.
 8026fcc:	018054a8 02558554 55a85515 55550155     .T..T.U..U.UU.UU
 8026fdc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8026fec:	55545555 55555255 52555552 55425555     UUTUURUURUURUUBU
 8026ffc:	54552a55 14525580 40125255 aa2a0802     U*UT.UR.UR.@..*.
 802700c:	14024012 55125255 55558054 4055552a     .@..UR.UT.UU*UU@
 802701c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802702c:	85555515 55855555 55558555 a8555581     .UU.UU.UU.UU.UU.
 802703c:	15025555 55851455 14558584 aa840180     UU..U..U..U.....
 802704c:	018020a8 02558584 55a85515 55550155     . ....U..U.UU.UU
 802705c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802706c:	55545555 55555255 52555552 55425555     UUTUURUURUURUUBU
 802707c:	54552a55 14525580 40125255 aa2a1202     U*UT.UR.UR.@..*.
 802708c:	12024012 55125255 55558054 4055552a     .@..UR.UT.UU*UU@
 802709c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80270ac:	85555515 55855555 55558555 a8555581     .UU.UU.UU.UU.UU.
 80270bc:	15025555 55851455 20558584 aa840180     UU..U..U..U ....
 80270cc:	018014a8 02558514 55a85515 55550155     ......U..U.UU.UU
 80270dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80270ec:	55545555 55555255 52555552 55425555     UUTUURUURUURUUBU
 80270fc:	54552a55 11525580 40085255 aa2a0a02     U*UT.UR.UR.@..*.
 802710c:	0802400a 55085255 55558054 4055552a     .@..UR.UT.UU*UU@
 802711c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802712c:	85555515 55855555 55558555 a8555581     .UU.UU.UU.UU.UU.
 802713c:	15025555 55854455 20558520 aaa00180     UU..UD.U .U ....
 802714c:	0180a0a8 02558520 55a85515 55550155     .... .U..U.UU.UU
 802715c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802716c:	40555555 aa2a0100 018040a8 4a55a152     UUU@..*..@..R.UJ
 802717c:	815055a8 55855455 54558554 85545585     .UP.UT.UT.UT.UT.
 802718c:	55855455 4a558150 a15255a8 01804055     UT.UP.UJ.UR.U@..
 802719c:	40a8aa2a 55550100 55555555 55555555     *..@..UUUUUUUUUU
 80271ac:	40555555 aa2a0100 018040a8 4a55a152     UUU@..*..@..R.UJ
 80271bc:	814055a8 88842011 2a888428 8428a894     .U@.. ..(..*..(.
 80271cc:	88842088 4a118140 a15255a8 01804055     . ..@..J.UR.U@..
 80271dc:	40a8aa2a 55550100 55555555 55555555     *..@..UUUUUUUUUU
 80271ec:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80271fc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802720c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802721c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802722c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802723c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802724c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802725c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802726c:	55555555 28555541 15aa5455 4a85aa52     UUUUAUU(UT..R..J
 802727c:	aa2aa1aa 010040a8 55555555 00405555     ..*..@..UUUUUU@.
 802728c:	a8aa2a01 52a1aa4a aa5485aa 55285515     .*..J..R..T..U(U
 802729c:	55554155 55555555 55555555 55555555     UAUUUUUUUUUUUUUU
 80272ac:	55555555 28555541 15aa5455 4a85aa52     UUUUAUU(UT..R..J
 80272bc:	aa2aa1aa 010040a8 55555555 00405555     ..*..@..UUUUUU@.
 80272cc:	54551501 51515545 55544555 55145515     ..UTEUQQUETU.U.U
 80272dc:	55554155 55555555 55555555 55555555     UAUUUUUUUUUUUUUU
 80272ec:	55555555 14555541 15555455 45455551     UUUUAUU.UTU.QUEE
 80272fc:	55155155 01004054 55555555 00405555     UQ.UT@..UUUUUU@.
 802730c:	a8aa2a01 52a1aa4a aa5485aa 55285515     .*..J..R..T..U(U
 802731c:	55554155 55555555 55555555 55555555     UAUUUUUUUUUUUUUU
 802732c:	55555555 28545541 85aa5215 4aa1aa4a     UUUUAUT(.R..J..J
 802733c:	aa4aa1aa a1aa4aa1 4aa1aa4a aa4aa1aa     ..J..J..J..J..J.
 802734c:	a1aa4aa1 4aa1aa4a aa4aa1aa a1aa4aa1     .J..J..J..J..J..
 802735c:	50a1aa4a 55550500 55555555 55555555     J..P..UUUUUUUUUU
 802736c:	55555555 28545541 85aa5215 48210048     UUUUAUT(.R..H.!H
 802737c:	aa4821a2 a1aa4a21 4a210048 8a4aa1a0     .!H.!J..H.!J..J.
 802738c:	210048a1 48a1aa4a aa482100 21024821     .H.!J..H.!H.!H.!
 802739c:	50a1aa4a 55550500 55555555 55555555     J..P..UUUUUUUUUU
 80273ac:	55555555 28545541 85aa5215 4aa1aa4a     UUUUAUT(.R..J..J
 80273bc:	a04aa1aa a10a4821 4a21a04a 0048a1aa     ..J.!H..J.!J..H.
 80273cc:	a1aa4a21 48210048 004a21aa a1aa4aa1     !J..H.!H.!J..J..
 80273dc:	50a1aa4a 55550500 55555555 55555555     J..P..UUUUUUUUUU
 80273ec:	55555555 28545541 85aa5215 48a1a248     UUUUAUT(.R..H..H
 80273fc:	0248a1a2 21a24821 4a21a248 aa4aa1aa     ..H.!H.!H.!J..J.
 802740c:	a1aa48a1 48a1a848 a24821a2 a1084821     .H..H..H.!H.!H..
 802741c:	50a1aa4a 55550500 55555555 55555555     J..P..UUUUUUUUUU
 802742c:	55555555 15515555 55854855 22552122     UUUUUUQ.UH.U"!U"
 802743c:	21225521 55212255 54550540 14525555     !U"!U"!U@.UTUUR.
 802744c:	15824855 20158248 a22a1522 21222085     UH..H.. ".*.. "!
 802745c:	45212221 55554544 55555555 55555555     !"!EDEUUUUUUUUUU
 802746c:	55555555 55555555 55555555 52150054     UUUUUUUUUUUUT..R
 802747c:	8a4a858a a88a2aa1 2aa88a2a 802aa88a     ..J..*..*..*..*.
 802748c:	a8aa2a28 4aa8aa2a aa52a1aa 15005485     (*..*..J..R..T..
 802749c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80274ac:	54550455 a2541582 158a5415 55158254     U.UT..T..T..T..U
 80274bc:	00545514 85aa5215 2aa1aa4a a82a2880     .UT..R..J..*.(*.
 80274cc:	28a22a28 2a288a2a aa20a82a a1aa48a8     (*.(*.(**. ..H..
 80274dc:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 80274ec:	55555555 28555541 15825455 55158254     UUUUAUU(UT..T..U
 80274fc:	41555528 55555555 55555555 55555555     (UUAUUUUUUUUUUUU
 802750c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802751c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802752c:	20454545 28202121 212222a1 22212028     EEE !! (.""!( !"
 802753c:	a1202121 41054521 55285455 28548142     !! .!E.AUT(UB.T(
 802754c:	15824215 41051228 5255a152 08525508     .B..(..AR.UR.UR.
 802755c:	55085255 55555154 55555555 55555555     UR.UTQUUUUUUUUUU
 802756c:	21454545 a2282120 21202221 21212220     EEE! !(.!" ! "!!
 802757c:	22212122 45444521 55285455 28548142     "!!"!EDEUT(UB.T(
 802758c:	15824215 41051228 5255a152 08525508     .B..(..AR.UR.UR.
 802759c:	55085255 55555154 55555555 55555555     UR.UTQUUUUUUUUUU
 80275ac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80275bc:	55555555 55555555 21555545 55215555     UUUUUUUUEUU!UU!U
 80275cc:	51112155 22488820 4828280a 08082288     U!.Q .H".((H."..
 80275dc:	45488820 55555111 55555555 55555555      .HE.QUUUUUUUUUU
 80275ec:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80275fc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802760c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802761c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802762c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802763c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802764c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802765c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802766c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802767c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802768c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802769c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80276ac:	55555555 54550555 15525585 55154a55     UUUUU.UT.UR.UJ.U
 80276bc:	a8545528 a1aa5201 4085aa4a a854152a     (UT..R..J..@*.T.
 80276cc:	55a15455 52558552 55485515 55554155     UT.UR.UR.UHUUAUU
 80276dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80276ec:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80276fc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802770c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802771c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802772c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802773c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802774c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802775c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802776c:	55555555 28555541 55285555 55552855     UUUUAUU(UU(UU(UU
 802777c:	28555528 55285555 55552855 28555528     (UU(UU(UU(UU(UU(
 802778c:	55285555 55554155 28555541 55285555     UU(UUAUUAUU(UU(U
 802779c:	55554155 55555555 55555555 55555555     UAUUUUUUUUUUUUUU
 80277ac:	54555555 14521555 a1824a85 54a18452     UUUTU.R..J..R..T
 80277bc:	85542185 85145221 55155554 55555555     .!T.!R..TU.UUUUU
 80277cc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80277dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80277ec:	55555555 14545555 85825215 42858252     UUUUUUT..R..R..B
 80277fc:	aa2a8182 a8aa2aa8 42818242 aa2a8182     ..*..*..B..B..*.
 802780c:	a8aa2aa8 52818242 82528582 15145485     .*..B..R..R..T..
 802781c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802782c:	55555555 28555541 15285455 4a85aa52     UUUUAUU(UT(.R..J
 802783c:	284aa1aa 05284aa1 5215aa4a 285085aa     ..J(.J(.J..R..P(
 802784c:	a1284aa1 52a1aa4a 285485aa 55285515     .J(.J..R..T(.U(U
 802785c:	55554155 55555555 55555555 55555555     UAUUUUUUUUUUUUUU
 802786c:	55555555 55555555 55555555 4a415550     UUUUUUUUUUUUPUAJ
 802787c:	144a2815 a15250a8 55854a55 a854152a     .(J..PR.UJ.U*.T.
 802788c:	55a15255 2a05854a 5428a114 055541a1     UR.UJ..*..(T.AU.
 802789c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80278ac:	55555555 55555555 55015555 5255a854     UUUUUUUUUU.UT.UR
 80278bc:	12521582 15125215 54550852 a15455a1     ..R..R..R.UT.UT.
 80278cc:	05085255 48215248 02488554 48a85221     UR..HR!HT.H.!R.H
 80278dc:	55510154 55555555 55555555 55555555     T.QUUUUUUUUUUUUU
 80278ec:	55555555 48555551 152a5555 55154a55     UUUUQUUHUU*.UJ.U
 80278fc:	52551552 55485515 55555155 55555555     R.UR.UHUUQUUUUUU
 802790c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802791c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802792c:	55555555 55555555 05555555 55a15455     UUUUUUUUUUU.UT.U
 802793c:	4a558552 55285515 55552855 28555528     R.UJ.U(UU(UU(UU(
 802794c:	55285555 55552855 4a555528 85525515     UU(UU(UU(UUJ.UR.
 802795c:	55a15455 55550555 55555555 55555555     UT.UU.UUUUUUUUUU
 802796c:	55555555 55555555 55155455 54558552     UUUUUUUUUT.UR.UT
 802797c:	285555a1 154a5555 55154a55 4a55154a     .UU(UUJ.UJ.UJ.UJ
 802798c:	154a5515 55154a55 2855154a 55a15455     .UJ.UJ.UJ.U(UT.U
 802799c:	54558552 55555515 55555555 55555555     R.UT.UUUUUUUUUUU
 80279ac:	55555555 55455555 48552151 4a285528     UUUUUUEUQ!UH(U(J
 80279bc:	8252a114 01aa4085 40a8aa2a 825201aa     ..R..@..*..@..R.
 80279cc:	a1144a85 21285528 55454855 55555551     .J..(U(!UHEUQUUU
 80279dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80279ec:	55555555 55555555 55415555 55552855     UUUUUUUUUUAUU(UU
 80279fc:	28505528 a1aa4a05 50a1aa4a 28550528     (UP(.J..J..P(.U(
 8027a0c:	55285555 55554155 55555555 55555555     UU(UUAUUUUUUUUUU
 8027a1c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8027a2c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8027a3c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8027a4c:	55555555 55554155 28555528 55a15455     UUUUUAUU(UU(UT.U
 8027a5c:	54558552 55555515 55555555 55555555     R.UT.UUUUUUUUUUU
 8027a6c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8027a7c:	55555555 05005455 52a1aa52 0054a1aa     UUUUUT..R..R..T.
 8027a8c:	55555505 55555555 55555555 55555555     .UUUUUUUUUUUUUUU
 8027a9c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8027aac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8027abc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8027acc:	55555555 55555555 54555555 85525515     UUUUUUUUUUUT.UR.
 8027adc:	55855255 55551554 55555555 55555555     UR.UT.UUUUUUUUUU
 8027aec:	55555555 55555555 55555555 55415555     UUUUUUUUUUUUUUAU
 8027afc:	54552855 a15255a8 55854a55 a854152a     U(UT.UR.UJ.U*.T.
 8027b0c:	55a15255 2a55854a 55285515 55554155     UR.UJ.U*.U(UUAUU
 8027b1c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8027b2c:	55555555 00545555 85aa5215 2aa1aa4a     UUUUUUT..R..J..*
 8027b3c:	5528a800 28552828 28285528 55282855     ..(U((U((U((U((U
 8027b4c:	28552828 28285528 002a2855 a1aa4aa8     ((U((U((U(*..J..
 8027b5c:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 8027b6c:	55555555 41555555 55285555 5255a854     UUUUUUUAUU(UT.UR
 8027b7c:	a85255a8 55285055 55552855 28555528     .UR.UP(UU(UU(UU(
 8027b8c:	55285555 55552855 28545528 85aa5215     UU(UU(UU(UT(.R..
 8027b9c:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 8027bac:	55555555 00545555 85aa5215 2aa1aa4a     UUUUUUT..R..J..*
 8027bbc:	152aa880 28554028 55a85455 4a55a152     ..*.(@U(UT.UR.UJ
 8027bcc:	152a5585 5255a854 804a55a1 a8aa2a01     .U*.T.UR.UJ..*..
 8027bdc:	40a8aa2a 55550100 55555555 55555555     *..@..UUUUUUUUUU
 8027bec:	55555555 00545555 85aa5215 2aa1aa4a     UUUUUUT..R..J..*
 8027bfc:	5528a800 28554128 55a84055 2a55a12a     ..(U(AU(U@.U*.U*
 8027c0c:	a84055a1 28285541 002a2855 a1aa4aa8     .U@.AU((U(*..J..
 8027c1c:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 8027c2c:	55555555 54555555 85525515 55854a55     UUUUUUUT.UR.UJ.U
 8027c3c:	aa54852a 85a25285 2a85824a 02288512     *.T..R..J..*..(.
 8027c4c:	a8aa2a81 40a8aa2a 52558102 85525585     .*..*..@..UR.UR.
 8027c5c:	55855255 55551554 55555555 55555555     UR.UT.UUUUUUUUUU
 8027c6c:	55555555 00405555 a8aa2a01 28a8aa2a     UUUUUU@..*..*..(
 8027c7c:	00280100 85aa2a15 40a1aa2a 5555a800     ..(..*..*..@..UU
 8027c8c:	28555528 28285541 002a2855 a1aa4aa8     (UU(AU((U(*..J..
 8027c9c:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 8027cac:	55555555 00545555 85aa5215 2aa1aa4a     UUUUUUT..R..J..*
 8027cbc:	5528a800 41552828 2a150028 aa2a85aa     ..(U((UA(..*..*.
 8027ccc:	a80028a1 28285528 002a2855 a1aa4aa8     .(..(U((U(*..J..
 8027cdc:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 8027cec:	55555555 00405555 a8aa2a01 40a8aa2a     UUUUUU@..*..*..@
 8027cfc:	54552800 a15255a8 55854a55 2855152a     .(UT.UR.UJ.U*.U(
 8027d0c:	55285555 55552855 28555528 55285555     UU(UU(UU(UU(UU(U
 8027d1c:	55552855 55555541 55555555 55555555     U(UUAUUUUUUUUUUU
 8027d2c:	55555555 00545555 85aa5215 2aa1aa4a     UUUUUUT..R..J..*
 8027d3c:	5528a800 28552828 4aa8002a aa4aa1aa     ..(U((U(*..J..J.
 8027d4c:	a8002aa1 28285528 002a2855 a1aa4aa8     .*..(U((U(*..J..
 8027d5c:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 8027d6c:	55555555 00545555 85aa5215 2aa1aa4a     UUUUUUT..R..J..*
 8027d7c:	5528a800 28552828 4a28002a aa52a8aa     ..(U((U(*.(J..R.
 8027d8c:	280054a8 28285541 002a2855 a1aa4aa8     .T.(AU((U(*..J..
 8027d9c:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 8027dac:	55555555 55555555 55555555 55554155     UUUUUUUUUUUUUAUU
 8027dbc:	28555528 55415555 55555555 55555555     (UU(UUAUUUUUUUUU
 8027dcc:	55555555 55554155 28555528 55415555     UUUUUAUU(UU(UUAU
 8027ddc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8027dec:	55555555 55555555 55555555 55554155     UUUUUUUUUUUUUAUU
 8027dfc:	28555528 55415555 55555555 41555555     (UU(UUAUUUUUUUUA
 8027e0c:	55285555 54552855 855255a1 55155455     UU(UU(UT.UR.UT.U
 8027e1c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8027e2c:	55555555 55555555 a1545505 55a15255     UUUUUUUU.UT.UR.U
 8027e3c:	2a55854a 55a85415 4a55a152 854a5585     J.U*.T.UR.UJ.UJ.
 8027e4c:	55a15255 5555a854 4a55152a a1525585     UR.UT.UU*.UJ.UR.
 8027e5c:	55a15455 55550555 55555555 55555555     UT.UU.UUUUUUUUUU
 8027e6c:	55555555 55555555 55555555 54555555     UUUUUUUUUUUUUUUT
 8027e7c:	aa520500 a1aa52a1 55050054 55555555     ..R..R..T..UUUUU
 8027e8c:	05005455 52a1aa52 0054a1aa 55555505     UT..R..R..T..UUU
 8027e9c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8027eac:	55555555 55505555 55154a55 5255854a     UUUUUUPUUJ.UJ.UR
 8027ebc:	a85455a1 152a5555 55854a55 5255a152     .UT.UU*.UJ.UR.UR
 8027ecc:	854a55a1 54152a55 a15255a8 55854a55     .UJ.U*.T.UR.UJ.U
 8027edc:	5055154a 55555555 55555555 55555555     J.UPUUUUUUUUUUUU
 8027eec:	55555555 00545555 85aa5215 2aa1aa4a     UUUUUUT..R..J..*
 8027efc:	5528a800 28554128 55a85455 4a55a152     ..(U(AU(UT.UR.UJ
 8027f0c:	152a5585 55552855 41555541 55285555     .U*.U(UUAUUAUU(U
 8027f1c:	55552855 55555541 55555555 55555555     U(UUAUUUUUUUUUUU
 8027f2c:	55555555 55555555 55555555 54550055     UUUUUUUUUUUUU.UT
 8027f3c:	005215aa 21044885 2208a220 0222080a     ..R..H.! .."..".
 8027f4c:	080a2208 2121a220 55488504 21005205     .".. .!!..HU.R.!
 8027f5c:	5585aa54 55551500 55555555 55555555     T..U..UUUUUUUUUU
 8027f6c:	55555555 41555555 55285555 5215aa54     UUUUUUUAUU(UT..R
 8027f7c:	824a85aa a8142aa1 28285528 00282855     ..J..*..(U((U((.
 8027f8c:	a8aa2a28 28a8aa2a 55282800 28552828     (*..*..(.((U((U(
 8027f9c:	41285528 55554155 55555555 55555555     (U(AUAUUUUUUUUUU
 8027fac:	55555555 00405555 85aa2a15 28a1aa2a     UUUUUU@..*..*..(
 8027fbc:	5528a800 28552828 2aa80028 aa2aa1aa     ..(U((U((..*..*.
 8027fcc:	a80028a1 28285528 00282855 a1aa2aa8     .(..(U((U((..*..
 8027fdc:	4085aa2a 55551500 55555555 55555555     *..@..UUUUUUUUUU
 8027fec:	55555555 00545555 85aa5215 2aa1aa4a     UUUUUUT..R..J..*
 8027ffc:	5528a800 41552828 28555528 55285555     ..(U((UA(UU(UU(U
 802800c:	55552855 28415528 002a2855 a1aa4aa8     U(UU(UA(U(*..J..
 802801c:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 802802c:	55555555 01405555 55a82a55 2815aa2a     UUUUUU@.U*.U*..(
 802803c:	5228850a a85428a1 28285528 55282855     ..(R.(T.(U((U((U
 802804c:	28552828 28a85428 0a28a152 15aa2a85     ((U((T.(R.(..*..
 802805c:	4055a82a 55555501 55555555 55555555     *.U@.UUUUUUUUUUU
 802806c:	55555555 00405555 a8aa2a01 28a8aa2a     UUUUUU@..*..*..(
 802807c:	55280100 55552855 2a150028 aa2a85aa     ..(UU(UU(..*..*.
 802808c:	15002885 28555528 00285555 a8aa2a01     .(..(UU(UU(..*..
 802809c:	40a8aa2a 55550100 55555555 55555555     *..@..UUUUUUUUUU
 80280ac:	55555555 00405555 a8aa2a01 28a8aa2a     UUUUUU@..*..*..(
 80280bc:	55280100 55552855 2a150028 aa2a85aa     ..(UU(UU(..*..*.
 80280cc:	15002885 28555528 55285555 55552855     .(..(UU(UU(UU(UU
 80280dc:	41555528 55555555 55555555 55555555     (UUAUUUUUUUUUUUU
 80280ec:	55555555 00545555 85aa5215 2aa1aa4a     UUUUUUT..R..J..*
 80280fc:	5528a102 28552828 28415528 2a280140     ..(U((U((UA(@.(*
 802810c:	a82a28a8 28284028 002a2855 a8aa4a28     .(*.(@((U(*.(J..
 802811c:	54a8aa52 55550100 55555555 55555555     R..T..UUUUUUUUUU
 802812c:	55555555 55415555 28552841 28285528     UUUUUUAUA(U((U((
 802813c:	55282855 28552828 2a280028 aa2aa8aa     U((U((U((.(*..*.
 802814c:	280028a8 28285528 55282855 28552828     .(.((U((U((U((U(
 802815c:	41285528 55554155 55555555 55555555     (U(AUAUUUUUUUUUU
 802816c:	55555555 00545555 85aa5215 5485aa52     UUUUUUT..R..R..T
 802817c:	28551528 55285555 55552855 28555528     (.U(UU(UU(UU(UU(
 802818c:	55285555 55552855 28545528 85aa5215     UU(UU(UU(UT(.R..
 802819c:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 80281ac:	55555555 40555555 a82a5501 55a82a55     UUUUUUU@.U*.U*.U
 80281bc:	52558142 85525585 55855255 52558552     B.UR.UR.UR.UR.UR
 80281cc:	85525585 28855241 0a2a8552 15aa4a85     .UR.AR.(R.*..J..
 80281dc:	5455a852 55555501 55555555 55555555     R.UT.UUUUUUUUUUU
 80281ec:	55555555 55415555 28552841 28a85428     UUUUUUAUA(U((T.(
 80281fc:	4a28a152 152a2885 2a55a828 a12a55a1     R.(J.(*.(.U*.U*.
 802820c:	55a82855 28152a28 5228854a a85428a1     U(.U(*.(J.(R.(T.
 802821c:	41285528 55554155 55555555 55555555     (U(AUAUUUUUUUUUU
 802822c:	55555555 55415555 55552855 28555528     UUUUUUAUU(UU(UU(
 802823c:	55285555 55552855 28555528 55285555     UU(UU(UU(UU(UU(U
 802824c:	55552855 28555528 00285555 a8aa2a01     U(UU(UU(UU(..*..
 802825c:	40a8aa2a 55550100 55555555 55555555     *..@..UUUUUUUUUU
 802826c:	55555555 55415555 28552841 2aa8142a     UUUUUUAUA(U(*..*
 802827c:	aa2aa882 28aa28a8 28282828 41282828     ..*..(.((((((((A
 802828c:	28552828 28285528 55282855 28552828     ((U((U((U((U((U(
 802829c:	41285528 55554155 55555555 55555555     (U(AUAUUUUUUUUUU
 80282ac:	55555555 55415555 28552841 2a28152a     UUUUUUAUA(U(*.(*
 80282bc:	852a2885 28a12828 2828a128 28282828     .(*.((.((.((((((
 80282cc:	284a2828 28284a28 5228a852 a85428a8     ((J((J((R.(R.(T.
 80282dc:	41285528 55554155 55555555 55555555     (U(AUAUUUUUUUUUU
 80282ec:	55555555 00545555 85aa5215 2aa1aa4a     UUUUUUT..R..J..*
 80282fc:	5528a800 28552828 28285528 55282855     ..(U((U((U((U((U
 802830c:	28552828 28285528 002a2855 a1aa4aa8     ((U((U((U(*..J..
 802831c:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 802832c:	55555555 00405555 85aa2a15 28a1aa2a     UUUUUU@..*..*..(
 802833c:	5528a800 28552828 2aa80028 aa2aa1aa     ..(U((U((..*..*.
 802834c:	15002885 28555528 55285555 55552855     .(..(UU(UU(UU(UU
 802835c:	41555528 55555555 55555555 55555555     (UUAUUUUUUUUUUUU
 802836c:	55555555 00545555 85aa5215 2aa1aa4a     UUUUUUT..R..J..*
 802837c:	5528a800 28552828 28285528 41282855     ..(U((U((U((U((A
 802838c:	28282828 28282a28 022aa84a a8aa4aa1     (((((*((J.*..J..
 802839c:	5428a852 55554101 55555555 55555555     R.(T.AUUUUUUUUUU
 80283ac:	55555555 00405555 85aa2a15 28a1aa2a     UUUUUU@..*..*..(
 80283bc:	5528a800 28552828 2aa80028 aa2aa1aa     ..(U((U((..*..*.
 80283cc:	15a82885 28152a28 5228854a a85428a1     .(..(*.(J.(R.(T.
 80283dc:	41285528 55554155 55555555 55555555     (U(AUAUUUUUUUUUU
 80283ec:	55555555 00545555 a1aa5205 2aa8aa4a     UUUUUUT..R..J..*
 80283fc:	55282800 55552841 4a15002a aa5285aa     .((UA(UU*..J..R.
 802840c:	a80054a1 41285555 00282855 a1aa2aa8     .T..UU(AU((..*..
 802841c:	5085aa4a 55551500 55555555 55555555     J..P..UUUUUUUUUU
 802842c:	55555555 00405555 a8aa2a01 40a8aa2a     UUUUUU@..*..*..@
 802843c:	28550128 55285555 55552855 28555528     (.U(UU(UU(UU(UU(
 802844c:	55285555 55552855 28555528 55285555     UU(UU(UU(UU(UU(U
 802845c:	55552855 55555541 55555555 55555555     U(UUAUUUUUUUUUUU
 802846c:	55555555 55415555 28552841 28285528     UUUUUUAUA(U((U((
 802847c:	55282855 28552828 28285528 55282855     U((U((U((U((U((U
 802848c:	28552828 28285528 002a2855 a1aa4aa8     ((U((U((U(*..J..
 802849c:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 80284ac:	55555555 55415555 28552841 28285528     UUUUUUAUA(U((U((
 80284bc:	55282855 28552828 28285528 55282855     U((U((U((U((U((U
 80284cc:	28552828 4aa8142a aa52a182 15aa5485     ((U(*..J..R..T..
 80284dc:	55552855 55555541 55555555 55555555     U(UUAUUUUUUUUUUU
 80284ec:	55555555 55415555 28552841 28285528     UUUUUUAUA(U((U((
 80284fc:	55282855 28552828 28284128 28282828     U((U((U((A((((((
 802850c:	28282828 28282828 aa2a2828 a1aa4aa8     ((((((((((*..J..
 802851c:	54858252 55551514 55555555 55555555     R..T..UUUUUUUUUU
 802852c:	55555555 55415555 28552841 28285528     UUUUUUAUA(U((U((
 802853c:	142a2855 a1824aa8 5485aa52 aa5415aa     U(*..J..R..T..T.
 802854c:	85aa5215 2aa1824a 5528a814 28552828     .R..J..*..(U((U(
 802855c:	41285528 55554155 55555555 55555555     (U(AUAUUUUUUUUUU
 802856c:	55555555 55415555 28552841 28285528     UUUUUUAUA(U((U((
 802857c:	55282855 28552828 4aa8142a aa52a182     U((U((U(*..J..R.
 802858c:	15aa5485 55552855 28555528 55285555     .T..U(UU(UU(UU(U
 802859c:	55552855 55555541 55555555 55555555     U(UUAUUUUUUUUUUU
 80285ac:	55555555 00405555 a8aa2a01 40a8aa2a     UUUUUU@..*..*..@
 80285bc:	54552800 a15255a8 55854a55 a854152a     .(UT.UR.UJ.U*.T.
 80285cc:	55a15255 2a55854a 00285515 a8aa2a01     UR.UJ.U*.U(..*..
 80285dc:	40a8aa2a 55550100 55555555 55555555     *..@..UUUUUUUUUU
 80285ec:	55555555 40555555 852a5515 55852a55     UUUUUUU@.U*.U*.U
 80285fc:	28551528 55285555 55552855 28555528     (.U(UU(UU(UU(UU(
 802860c:	55285555 55152855 2a55852a 15405585     UU(UU(.U*.U*.U@.
 802861c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802862c:	55555555 55555555 55555555 28555541     UUUUUUUUUUUUAUU(
 802863c:	152a5555 55854a55 5455a152 2a5555a8     UU*.UJ.UR.UT.UU*
 802864c:	854a5515 55a15255 5555a854 41555528     .UJ.UR.UT.UU(UUA
 802865c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802866c:	55555555 01545555 55a85255 5455a852     UUUUUUT.UR.UR.UT
 802867c:	28555528 55285555 55552855 28555528     (UU(UU(UU(UU(UU(
 802868c:	55285555 52552854 a85255a8 55015455     UU(UT(UR.UR.UT.U
 802869c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80286ac:	55555555 55555555 55415555 54552855     UUUUUUUUUUAUU(UT
 80286bc:	825215aa 85145285 55055550 55555555     ..R..R..PU.UUUUU
 80286cc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80286dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80286ec:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80286fc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802870c:	55555555 40555555 aa2a0100 a8aa2aa8     UUUUUUU@..*..*..
 802871c:	55010040 55555555 55555555 55555555     @..UUUUUUUUUUUUU
 802872c:	50555555 154a5555 55855255 5555a154     UUUPUUJ.UR.UT.UU
 802873c:	41555528 55555555 55555555 55555555     (UUAUUUUUUUUUUUU
 802874c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802875c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802876c:	55555555 55555555 55555555 52150054     UUUUUUUUUUUUT..R
 802877c:	aa5285aa a80054a1 52280054 aa4a28aa     ..R..T..T.(R.(J.
 802878c:	a8002aa8 28285528 002a2855 a8aa4aa8     .*..(U((U(*..J..
 802879c:	5428aa52 55554100 55555555 55555555     R.(T.AUUUUUUUUUU
 80287ac:	55555555 55415555 55552855 28555528     UUUUUUAUU(UU(UU(
 80287bc:	2a285540 85aa2815 2aa1a22a 152aa884     @U(*.(..*..*..*.
 80287cc:	28152a28 2a28152a a22aa884 85aa28a1     (*.(*.(*..*..(..
 80287dc:	41152a28 55555540 55555555 55555555     (*.A@UUUUUUUUUUU
 80287ec:	55555555 55555555 55555555 54555555     UUUUUUUUUUUUUUUT
 80287fc:	aa521500 a1aa4a85 28a8002a 55282855     ..R..J..*..(U((U
 802880c:	41552828 28415528 002a2855 a1aa4aa8     ((UA(UA(U(*..J..
 802881c:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 802882c:	55555555 55555555 28555541 55285555     UUUUUUUUAUU(UU(U
 802883c:	a8542801 28aa5228 2aa88a4a 5428a812     .(T.(R.(J..*..(T
 802884c:	a85428a8 2aa85428 8a4aa812 28aa52a8     .(T.(T.*..J..R.(
 802885c:	5528a854 55554101 55555555 55555555     T.(U.AUUUUUUUUUU
 802886c:	55555555 55555555 55555555 54555555     UUUUUUUUUUUUUUUT
 802887c:	aa521500 a1aa4a85 28a8002a aa2a2800     ..R..J..*..(.(*.
 802888c:	a1aa2aa8 28050028 002a0155 a1aa4aa8     .*..(..(U.*..J..
 802889c:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 80288ac:	55555555 50555555 a14a5505 55a12a55     UUUUUUUP.UJ.U*.U
 80288bc:	28500528 a1aa4a05 50a1aa4a 28550528     (.P(.J..J..P(.U(
 80288cc:	55285555 55552855 28555528 55285555     UU(UU(UU(UU(UU(U
 80288dc:	55552855 55555541 55555555 55555555     U(UUAUUUUUUUUUUU
 80288ec:	55555555 55555555 55555555 52150054     UUUUUUUUUUUUT..R
 80288fc:	aa4a85aa a8002aa1 2a285528 aa4aa800     ..J..*..(U(*..J.
 802890c:	28aa52a8 50280054 004a2855 a1aa4aa8     .R.(T.(PU(J..J..
 802891c:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 802892c:	55555555 55415555 55552855 28555528     UUUUUUAUU(UU(UU(
 802893c:	2a285540 85aa2815 2aa1a22a 152aa884     @U(*.(..*..*..*.
 802894c:	28552828 28285528 55282855 28552828     ((U((U((U((U((U(
 802895c:	41285528 55554155 55555555 55555555     (U(AUAUUUUUUUUUU
 802896c:	55555555 55555555 55415555 55552855     UUUUUUUUUUAUU(UU
 802897c:	41555528 55015455 5255a852 285455a8     (UUAUT.UR.UR.UT(
 802898c:	55285555 55552855 2a555528 854a5515     UU(UU(UU(UU*.UJ.
 802899c:	55855255 55551554 55555555 55555555     UR.UT.UUUUUUUUUU
 80289ac:	55555555 52551554 85525585 55155455     UUUUT.UR.UR.UT.U
 80289bc:	2a551540 852a5585 55854255 52558552     @.U*.U*.UB.UR.UR
 80289cc:	85525585 55855255 0a548552 15aa5285     .UR.UR.UR.T..R..
 80289dc:	5455a852 55555501 55555555 55555555     R.UT.UUUUUUUUUUU
 80289ec:	55555555 55415555 55552855 28555528     UUUUUUAUU(UU(UU(
 80289fc:	55284155 a8542828 28a15228 2a28854a     UA(U((T.(R.(J.(*
 8028a0c:	55a82815 2a15aa2a 122a858a a85428a1     .(.U*..*..*..(T.
 8028a1c:	41285528 55554155 55555555 55555555     (U(AUAUUUUUUUUUU
 8028a2c:	55555555 41555555 55285555 55552855     UUUUUUUAUU(UU(UU
 8028a3c:	28555528 55285555 55552855 28555528     (UU(UU(UU(UU(UU(
 8028a4c:	55285555 55552855 28555528 55285555     UU(UU(UU(UU(UU(U
 8028a5c:	55552855 55555541 55555555 55555555     U(UUAUUUUUUUUUUU
 8028a6c:	55555555 55555555 55555555 41555555     UUUUUUUUUUUUUUUA
 8028a7c:	aa281500 a1aa2a85 28a8282a 28282828     ..(..*..*(.(((((
 8028a8c:	28282828 28282828 28282828 28282828     ((((((((((((((((
 8028a9c:	41282828 55554141 55555555 55555555     (((AAAUUUUUUUUUU
 8028aac:	55555555 55555555 55555555 41555555     UUUUUUUUUUUUUUUA
 8028abc:	aa281500 a1aa2a85 28a8002a 55282855     ..(..*..*..(U((U
 8028acc:	28552828 28285528 55282855 28552828     ((U((U((U((U((U(
 8028adc:	41285528 55554155 55555555 55555555     (U(AUAUUUUUUUUUU
 8028aec:	55555555 55555555 55555555 54555555     UUUUUUUUUUUUUUUT
 8028afc:	aa521500 a1aa4a85 28a8002a 55282855     ..R..J..*..(U((U
 8028b0c:	28552828 28285528 002a2855 a1aa4aa8     ((U((U((U(*..J..
 8028b1c:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 8028b2c:	55555555 55555555 55555555 28150041     UUUUUUUUUUUUA..(
 8028b3c:	aa2a85aa a8802aa1 2a28152a 152a2815     ..*..*..*.(*.(*.
 8028b4c:	a8802a28 28a1aa2a 002885aa 55552815     (*..*..(..(..(UU
 8028b5c:	41555528 55555555 55555555 55555555     (UUAUUUUUUUUUUUU
 8028b6c:	55555555 55555555 55555555 52410054     UUUUUUUUUUUUT.AR
 8028b7c:	aa4a28aa a8022aa8 28a85428 5428a854     .(J..*..(T.(T.(T
 8028b8c:	a8022aa8 52a8aa4a 0154a8a8 28555528     .*..J..R..T.(UU(
 8028b9c:	55285555 55554155 55555555 55555555     UU(UUAUUUUUUUUUU
 8028bac:	55555555 55555555 55555555 41555555     UUUUUUUUUUUUUUUA
 8028bbc:	2a281540 a1aa2885 2aa8a02a 152a2885     @.(*.(..*..*.(*.
 8028bcc:	55552841 28555528 55285555 55552855     A(UU(UU(UU(UU(UU
 8028bdc:	41555528 55555555 55555555 55555555     (UUAUUUUUUUUUUUU
 8028bec:	55555555 55555555 55555555 54555555     UUUUUUUUUUUUUUUT
 8028bfc:	aa521500 a1aa4a85 2aa8002a a84a2801     ..R..J..*..*.(J.
 8028c0c:	85aa5001 28a10a41 002aa850 a1aa4aa8     .P..A..(P.*..J..
 8028c1c:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 8028c2c:	55555555 41555555 55285555 54552855     UUUUUUUAUU(UU(UT
 8028c3c:	aa521528 85aa5285 55152854 28555528     (.R..R..T(.U(UU(
 8028c4c:	55285555 55552855 2a555528 854a5515     UU(UU(UU(UU*.UJ.
 8028c5c:	55855255 55551554 55555555 55555555     UR.UT.UUUUUUUUUU
 8028c6c:	55555555 55555555 55555555 41555555     UUUUUUUUUUUUUUUA
 8028c7c:	55284155 28552828 28285528 55282855     UA(U((U((U((U((U
 8028c8c:	28552828 28285528 002a2855 a1aa4aa8     ((U((U((U(*..J..
 8028c9c:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 8028cac:	55555555 55555555 55555555 41555555     UUUUUUUUUUUUUUUA
 8028cbc:	55284155 28552828 28285528 55282855     UA(U((U((U((U((U
 8028ccc:	28552828 4aa8142a aa52a182 15aa5485     ((U(*..J..R..T..
 8028cdc:	55552855 55555541 55555555 55555555     U(UUAUUUUUUUUUUU
 8028cec:	55555555 55555555 55555555 41555555     UUUUUUUUUUUUUUUA
 8028cfc:	55284155 28552828 28285528 28282841     UA(U((U((U((A(((
 8028d0c:	28282828 28282828 282a2828 a1aa4aa8     ((((((((((*(.J..
 8028d1c:	54858252 55551514 55555555 55555555     R..T..UUUUUUUUUU
 8028d2c:	55555555 55555555 55555555 41555555     UUUUUUUUUUUUUUUA
 8028d3c:	55284155 a8142a28 52a1824a aa5485aa     UA(U(*..J..R..T.
 8028d4c:	55285515 5215aa54 824a85aa a8142aa1     .U(UT..R..J..*..
 8028d5c:	41285528 55554155 55555555 55555555     (U(AUAUUUUUUUUUU
 8028d6c:	55555555 55555555 55555555 28415541     UUUUUUUUUUUUAUA(
 8028d7c:	55282855 a8542828 28a85428 0a2aa852     U((U((T.(T.(R.*.
 8028d8c:	28aa4aa8 5428a852 00542801 a1aa52a8     .J.(R.(T.(T..R..
 8028d9c:	5485aa52 55551500 55555555 55555555     R..T..UUUUUUUUUU
 8028dac:	55555555 55555555 55555555 40555555     UUUUUUUUUUUUUUU@
 8028dbc:	aa2a0100 a8aa2aa8 55a80040 4a55a152     ..*..*..@..UR.UJ
 8028dcc:	152a5585 5255a854 804a55a1 a8aa2a01     .U*.T.UR.UJ..*..
 8028ddc:	40a8aa2a 55550100 55555555 55555555     *..@..UUUUUUUUUU
 8028dec:	55555555 4a551550 854a5585 55852a55     UUUUP.UJ.UJ.U*.U
 8028dfc:	28551528 55285555 5455a154 285555a1     (.U(UU(UT.UT.UU(
 8028e0c:	55285555 55152855 4a55852a 854a5585     UU(UU(.U*.UJ.UJ.
 8028e1c:	55155055 55555555 55555555 55555555     UP.UUUUUUUUUUUUU
 8028e2c:	55555555 41555555 55285555 55552855     UUUUUUUAUU(UU(UU
 8028e3c:	28555528 55285555 55552855 28555528     (UU(UU(UU(UU(UU(
 8028e4c:	55285555 55552855 28555528 55415555     UU(UU(UU(UU(UUAU
 8028e5c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8028e6c:	54555555 a1525505 55a85255 5455a852     UUUT.UR.UR.UR.UT
 8028e7c:	28555528 55285555 55154a55 2855154a     (UU(UU(UUJ.UJ.U(
 8028e8c:	55285555 52552854 a85255a8 55a15255     UU(UT(UR.UR.UR.U
 8028e9c:	55550554 55555555 55555555 55555555     T.UUUUUUUUUUUUUU
 8028eac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8028ebc:	a1545105 28a85248 28a10a4a 54418552     .QT.HR.(J..(R.AT
 8028ecc:	55555515 55555555 55555555 55555555     .UUUUUUUUUUUUUUU
 8028edc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8028eec:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8028efc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8028f0c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8028f1c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8028f2c:	00aaaaaa 55550000 55555555 55555555     ......UUUUUUUUUU
 8028f3c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8028f4c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8028f5c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8028f6c:	aa000000 0000aaaa 55555500 55555555     .........UUUUUUU
 8028f7c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8028f8c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8028f9c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8028fac:	00555555 aaaa0000 000000aa 55555555     UUU.........UUUU
 8028fbc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8028fcc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8028fdc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8028fec:	55555555 00005555 aaaaaa00 55000000     UUUUUU.........U
 8028ffc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802900c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802901c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802902c:	55555555 55555555 00000055 00aaaaaa     UUUUUUUUU.......
 802903c:	55550000 55555555 55555555 55555555     ..UUUUUUUUUUUUUU
 802904c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802905c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802906c:	55555555 55555555 55555555 aa000000     UUUUUUUUUUUU....
 802907c:	0000aaaa 55555500 55555555 55555555     .....UUUUUUUUUUU
 802908c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802909c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80290ac:	55555555 55555555 55555555 00555555     UUUUUUUUUUUUUUU.
 80290bc:	aaaa0000 000000aa 55555555 55555555     ........UUUUUUUU
 80290cc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80290dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80290ec:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80290fc:	00005555 aaaaaa00 55000000 55555555     UU.........UUUUU
 802910c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802911c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802912c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802913c:	55555555 00000055 00aaaaaa 55550000     UUUUU.........UU
 802914c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802915c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802916c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802917c:	55555555 55555555 aa000000 0000aaaa     UUUUUUUU........
 802918c:	55555500 55555555 55555555 55555555     .UUUUUUUUUUUUUUU
 802919c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80291ac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80291bc:	55555555 55555555 00555555 aaaa0000     UUUUUUUUUUU.....
 80291cc:	000000aa 55555555 55555555 55555555     ....UUUUUUUUUUUU
 80291dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80291ec:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80291fc:	55555555 55555555 55555555 00005555     UUUUUUUUUUUUUU..
 802920c:	aaaaaa00 55000000 55555555 55555555     .......UUUUUUUUU
 802921c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802922c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802923c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802924c:	00000055 00aaaaaa 55550000 55555555     U.........UUUUUU
 802925c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802926c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802927c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802928c:	55555555 aa000000 0000aaaa 55555500     UUUU.........UUU
 802929c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80292ac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80292bc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80292cc:	55555555 00555555 aaaa0000 000000aa     UUUUUUU.........
 80292dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80292ec:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80292fc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802930c:	55555555 55555555 00005555 aaaaaa00     UUUUUUUUUU......
 802931c:	55000000 55555555 55555555 55555555     ...UUUUUUUUUUUUU
 802932c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802933c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802934c:	55555555 55555555 55555555 00000055     UUUUUUUUUUUUU...
 802935c:	00aaaaaa 55550000 55555555 55555555     ......UUUUUUUUUU
 802936c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802937c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802938c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802939c:	aa000000 5555aaaa 55555555 55555555     ......UUUUUUUUUU
 80293ac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80293bc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80293cc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80293dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80293ec:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80293fc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802940c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802941c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802942c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802943c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802944c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802945c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802946c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802947c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802948c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802949c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80294ac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80294bc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80294cc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80294dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80294ec:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80294fc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802950c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802951c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802952c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802953c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802954c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802955c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802956c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802957c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802958c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802959c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80295ac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80295bc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80295cc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80295dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80295ec:	55555555 55695555 55556955 69555569     UUUUUUiUUiUUiUUi
 80295fc:	55695555 55556955 69555569 55695555     UUiUUiUUiUUiUUiU
 802960c:	55556955 69555569 55695555 55556955     UiUUiUUiUUiUUiUU
 802961c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802962c:	55555555 69695555 55696955 69556969     UUUUUUiiUiiUiiUi
 802963c:	69695569 55696955 69556969 69695569     iUiiUiiUiiUiiUii
 802964c:	55696955 69556969 69695569 55696955     UiiUiiUiiUiiUiiU
 802965c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802966c:	55555555 69695555 69696969 69696969     UUUUUUiiiiiiiiii
 802967c:	69696969 69696969 69696969 69696969     iiiiiiiiiiiiiiii
 802968c:	69696969 69696969 69696969 69696969     iiiiiiiiiiiiiiii
 802969c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80296ac:	55555555 69555555 69695569 55696955     UUUUUUUiiUiiUiiU
 80296bc:	69556969 69695569 55696955 69556969     iiUiiUiiUiiUiiUi
 80296cc:	69695569 55696955 69556969 69695569     iUiiUiiUiiUiiUii
 80296dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80296ec:	55555555 55555555 69555569 55695555     UUUUUUUUiUUiUUiU
 80296fc:	55556955 69555569 55695555 55556955     UiUUiUUiUUiUUiUU
 802970c:	69555569 55695555 55556955 69555569     iUUiUUiUUiUUiUUi
 802971c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802972c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802973c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802974c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802975c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802976c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802977c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802978c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802979c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80297ac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80297bc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80297cc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80297dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80297ec:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80297fc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802980c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802981c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802982c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802983c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802984c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802985c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802986c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802987c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802988c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802989c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80298ac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80298bc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80298cc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80298dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80298ec:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80298fc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802990c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802991c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802992c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802993c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802994c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802995c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802996c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802997c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802998c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802999c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80299ac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80299bc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80299cc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80299dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80299ec:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 80299fc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029a0c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029a1c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029a2c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029a3c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029a4c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029a5c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029a6c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029a7c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029a8c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029a9c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029aac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029abc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029acc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029adc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029aec:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029afc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029b0c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029b1c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029b2c:	55545555 54554055 aa42550a 50aa0254     UUTUU@UT.UB.T..P
 8029b3c:	0050aa00 aa0054aa 55aa5055 5055aa50     ..P..T..UP.UP.UP
 8029b4c:	005055aa 55005055 54550050 55555500     .UP.UP.UP.UT.UUU
 8029b5c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029b6c:	05555555 15805555 5501aa55 a81500a8     UUU.UU..U..U....
 8029b7c:	00a80500 1500a805 a85515a8 15a85515     ..........U..U..
 8029b8c:	55150055 00551500 15005515 55555555     U..U..U..U..UUUU
 8029b9c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029bac:	55555555 54555455 2a005500 550a0055     UUUUUTUT.U.*U..U
 8029bbc:	50552a00 aa4255aa 54aa0a55 0054aa0a     .*UP.UB.U..T..T.
 8029bcc:	0000542a 55000054 55550054 55555550     *T..T..UT.UUPUUU
 8029bdc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029bec:	00555555 01a85505 5500aa55 a81580aa     UUU..U..U..U....
 8029bfc:	00a80500 0500a005 800500a0 55000555     ............U..U
 8029c0c:	55550155 05555501 55155555 55555555     U.UU.UU.UU.UUUUU
 8029c1c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029c2c:	55555555 54555555 02545500 550a5455     UUUUUUUT.UT.UT.U
 8029c3c:	2a54aa42 aaaa50aa 50aa2a50 0054a002     B.T*.P..P*.P..T.
 8029c4c:	00005500 55004055 54550150 55555515     .U..U@.UP.UT.UUU
 8029c5c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029c6c:	55555555 01005501 55a0aa55 aa55a0aa     UUUU.U..U..U..U.
 8029c7c:	28a855a0 15008015 00150000 40011500     .U.(...........@
 8029c8c:	15541515 55555555 55555555 55555555     ..T.UUUUUUUUUUUU
 8029c9c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029cac:	55555555 55555055 40555540 50020054     UUUUUPUU@UU@T..P
 8029cbc:	aa50aa0a aa2a50aa 54802a54 00540000     ..P..P*.T*.T..T.
 8029ccc:	01005500 55550055 55555555 55555555     .U..U.UUUUUUUUUU
 8029cdc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029cec:	55555555 05005555 05002a55 aa05aaaa     UUUUUU..U*......
 8029cfc:	a8aa05a8 15a08015 00552000 00005500     ......... U..U..
 8029d0c:	55015455 55550155 55555545 55555555     UT.UU.UUEUUUUUUU
 8029d1c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029d2c:	55555555 55555555 00005555 54aa2a54     UUUUUUUUUU..T*.T
 8029d3c:	2a54aa2a aa2a50aa 50000050 00500000     *.T*.P*.P..P..P.
 8029d4c:	55555500 55555555 55555555 55555555     .UUUUUUUUUUUUUUU
 8029d5c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029d6c:	45555555 15405555 55010a55 aa05a0aa     UUUEUU@.U..U....
 8029d7c:	aaaa80aa 00a8aa00 02018002 00000500     ................
 8029d8c:	55014055 40550540 55415555 55555555     U@.U@.U@UUAUUUUU
 8029d9c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029dac:	55555555 50555555 00425505 50aa0a54     UUUUUUUP.UB.T..P
 8029dbc:	0250aa2a 020050aa 55000050 55550040     *.P..P..P..U@.UU
 8029dcc:	40555540 55005555 55550055 55555501     @UU@UU.UU.UU.UUU
 8029ddc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029dec:	55555555 15545555 55010055 aa558080     UUUUUUT.U..U..U.
 8029dfc:	aaaa15a8 80aaaa05 2a00aa2a 00000000     ........*..*....
 8029e0c:	05000000 01550100 55555555 55555555     ......U.UUUUUUUU
 8029e1c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029e2c:	55555555 50550154 aa0255a0 54aa0a54     UUUUT.UP.U..T..T
 8029e3c:	0054aa02 0240552a 55025055 40550a54     ..T.*U@.UP.UT.U@
 8029e4c:	00005500 55000055 55550040 55555555     .U..U..U@.UUUUUU
 8029e5c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029e6c:	55555555 55155555 55410155 aa5500a0     UUUUUU.UU.AU..U.
 8029e7c:	aaaa55a8 15aaaa15 aa85aaaa 000085aa     .U..............
 8029e8c:	01000001 00010000 55550500 55555555     ..........UUUUUU
 8029e9c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029eac:	55555555 50555055 aa425500 55aa4055     UUUUUPUP.UB.U@.U
 8029ebc:	50552a50 0a50552a 502a0054 0050aa00     P*UP*UP.T.*P..P.
 8029ecc:	00005402 55005055 55554055 55555555     .T..UP.UU@UUUUUU
 8029edc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029eec:	05555555 55055555 55558155 a81554a0     UUU.UU.UU.UU.T..
 8029efc:	28aa1500 15a0aa15 aa55a0aa a0aa55a0     ...(......U..U..
 8029f0c:	55800255 00550100 01005501 55015455     U..U..U..U..UT.U
 8029f1c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029f2c:	55555555 55550055 2a545500 552a5455     UUUUU.UU.UT*UT*U
 8029f3c:	00502a54 aa00502a 54aa0a50 0055aa00     T*P.*P..P..T..U.
 8029f4c:	0a40552a 55005055 55550054 50555540     *U@.UP.UT.UU@UUP
 8029f5c:	55545555 55555555 55555555 55555555     UUTUUUUUUUUUUUUU
 8029f6c:	00555555 15005555 5515a855 a85515a8     UUU.UU..U..U..U.
 8029f7c:	00a85515 0500aa05 a805a0aa 00a01500     .U..............
 8029f8c:	55018055 00550500 55005515 55550155     U..U..U..U.UU.UU
 8029f9c:	55555505 55555555 55555555 55555555     .UUUUUUUUUUUUUUU
 8029fac:	55555555 55555055 42555550 540a1554     UUUUUPUUPUUBT..T
 8029fbc:	28542a00 aa0a54aa 55aa0a54 0a55aa0a     .*T(.T..T..U..U.
 8029fcc:	800255aa 55004055 40550040 15405500     .U..U@.U@.U@.U@.
 8029fdc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 8029fec:	05555555 05005555 5581aa55 a85501aa     UUU.UU..U..U..U.
 8029ffc:	05a85505 5505a055 aa1500a8 00800500     .U..U..U........
 802a00c:	15000005 01550500 55555555 55555555     ......U.UUUUUUUU
 802a01c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a02c:	55555555 55555555 40415554 550a0055     UUUUUUUUTUA@U..U
 802a03c:	2a54aa0a aa2a54aa 50aaaa50 0040aaaa     ..T*.T*.P..P..@.
 802a04c:	00004000 50000040 55550000 55555555     .@..@..P..UUUUUU
 802a05c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a06c:	40555555 050a5515 5580aa55 aa15a0aa     UUU@.U..U..U....
 802a07c:	00a81580 55018015 a0550580 01005515     .......U..U..U..
 802a08c:	55000055 00550000 55555501 55555555     U..U..U..UUUUUUU
 802a09c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a0ac:	55555555 54555555 00405515 54020255     UUUUUUUT.U@.U..T
 802a0bc:	aa50aa2a aaaa02aa 00a8aa00 0000a800     *.P.............
 802a0cc:	00005000 55004055 55554055 55555555     .P..U@.UU@UUUUUU
 802a0dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a0ec:	55555555 05505555 55810055 aa15a0aa     UUUUUUP.U..U....
 802a0fc:	00aa05a8 05008005 00050000 55015501     .............U.U
 802a10c:	55550155 00555500 55405555 55555555     U.UU.UU.UU@UUUUU
 802a11c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a12c:	55555555 54555155 a0405501 02aa0a50     UUUUUQUT.U@.P...
 802a13c:	aa00aaaa aa2a00aa 50800240 00558000     ......*.@..P..U.
 802a14c:	01405500 55015055 55550155 55555541     .U@.UP.UU.UUAUUU
 802a15c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a16c:	55555555 55555555 55000055 aa15a8aa     UUUUUUUUU..U....
 802a17c:	a8aa15a8 05a8aa15 00050000 00000500     ................
 802a18c:	55555505 55555555 55555555 55555555     .UUUUUUUUUUUUUUU
 802a19c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a1ac:	55555555 50555555 a8005000 50aaaa50     UUUUUUUP.P..P..P
 802a1bc:	2a54aa2a 020a54aa 55000855 00550000     *.T*.T..U..U..U.
 802a1cc:	15405500 55554055 55555551 55555555     .U@.U@UUQUUUUUUU
 802a1dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a1ec:	05555555 55015555 55550155 aa550080     UUU.UU.UU.UU..U.
 802a1fc:	aaaa05a0 05a8aa05 0015a802 00001500     ................
 802a20c:	55004015 55550055 55555555 55555555     .@.UU.UUUUUUUUUU
 802a21c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a22c:	55555555 40555540 aa0a5500 55aa0a55     UUUU@UU@.U..U..U
 802a23c:	2854aa0a 0200542a 54000054 01540000     ..T(*T..T..T..T.
 802a24c:	54155440 55555555 55555555 55555555     @T.TUUUUUUUUUUUU
 802a25c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a26c:	55555555 15005555 55158055 aa5515a0     UUUUUU..U..U..U.
 802a27c:	a8aa5581 05aaaa15 0a05a8aa 00000580     .U..............
 802a28c:	55000015 40550100 15545505 55555555     ...U..U@.UT.UUUU
 802a29c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a2ac:	55555555 50550054 aa40552a 54aa0255     UUUUT.UP*U@.U..T
 802a2bc:	00502a00 0a00502a 510a0050 55550255     .*P.*P..P..QU.UU
 802a2cc:	40555500 55405555 55555055 55555554     .UU@UU@UUPUUTUUU
 802a2dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a2ec:	15555555 15005555 5500a855 a85500a0     UUU.UU..U..U..U.
 802a2fc:	05aa5500 5581aa55 aa55a0aa 00a815a0     .U..U..U..U.....
 802a30c:	15000015 00150000 55055515 55555555     .........U.UUUUU
 802a31c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a32c:	55215555 55552155 21555521 55215555     UU!UU!UU!UU!UU!U
 802a33c:	55552155 21555521 55215555 55552155     U!UU!UU!UU!UU!UU
 802a34c:	21555521 55215555 55552155 21555521     !UU!UU!UU!UU!UU!
 802a35c:	55215555 55552155 55555555 55555555     UU!UU!UUUUUUUUUU
 802a36c:	48555548 55485555 55554855 48555548     HUUHUUHUUHUUHUUH
 802a37c:	55485555 55554855 48555548 55485555     UUHUUHUUHUUHUUHU
 802a38c:	55554855 48555548 55485555 55554855     UHUUHUUHUUHUUHUU
 802a39c:	48555548 55555555 55555555 55555555     HUUHUUUUUUUUUUUU
 802a3ac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a3bc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a3cc:	55555555 55555555 00005555 aaaaaa00     UUUUUUUUUU......
 802a3dc:	55000000 55555555 55555555 55555555     ...UUUUUUUUUUUUU
 802a3ec:	00555555 aaaa0000 000000aa 55555555     UUU.........UUUU
 802a3fc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a40c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a41c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a42c:	55215555 55552055 0055552a 55555555     UU!UU UU*UU.UUUU
 802a43c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a44c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a45c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a46c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a47c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a48c:	55555555 55555555 55555555 2a555500     UUUUUUUUUUUU.UU*
 802a49c:	55205555 55552155 55555555 55555555     UU UU!UUUUUUUUUU
 802a4ac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a4bc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a4cc:	55555555 55555555 55005555 5555a855     UUUUUUUUUU.UU.UU
 802a4dc:	48555508 55555555 55555555 55555555     .UUHUUUUUUUUUUUU
 802a4ec:	08555548 55a85555 55550055 55555555     HUU.UU.UU.UUUUUU
 802a4fc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a50c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a51c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a52c:	55154a55 4a55154a 154a5515 55154a55     UJ.UJ.UJ.UJ.UJ.U
 802a53c:	4a55154a 154a5515 55154a55 4a55154a     J.UJ.UJ.UJ.UJ.UJ
 802a54c:	154a5515 55154a55 4a55154a 154a5515     .UJ.UJ.UJ.UJ.UJ.
 802a55c:	55154a55 5555154a 55555555 55555555     UJ.UJ.UUUUUUUUUU
 802a56c:	5455a154 a15455a1 55a15455 5455a154     T.UT.UT.UT.UT.UT
 802a57c:	a15455a1 55a15455 5455a154 a15455a1     .UT.UT.UT.UT.UT.
 802a58c:	55a15455 5455a154 a15455a1 55a15455     UT.UT.UT.UT.UT.U
 802a59c:	5455a154 555555a1 55555555 55555555     T.UT.UUUUUUUUUUU
 802a5ac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a5bc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a5cc:	00000055 aaaaaaaa 0000aaaa 55555500     U............UUU
 802a5dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a5ec:	55555555 55555555 00000055 aaaaaaaa     UUUUUUUUU.......
 802a5fc:	0000aaaa 55555500 55555555 55555555     .....UUUUUUUUUUU
 802a60c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a61c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a62c:	55154a55 4a55154a 004a5515 55aa4a55     UJ.UJ.UJ.UJ.UJ.U
 802a63c:	4055aa4a 55555500 55555555 55555555     J.U@.UUUUUUUUUUU
 802a64c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a65c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a66c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a67c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a68c:	00405555 55aa4a55 4a55aa4a 154a5500     UU@.UJ.UJ.UJ.UJ.
 802a69c:	55154a55 5555154a 55555555 55555555     UJ.UJ.UUUUUUUUUU
 802a6ac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a6bc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a6cc:	55010055 aa55a1aa a10055a1 55a15455     U..U..U..U..UT.U
 802a6dc:	5455a154 555555a1 55555555 55555555     T.UT.UUUUUUUUUUU
 802a6ec:	5455a154 a15455a1 55a10055 aa55a1aa     T.UT.UT.U..U..U.
 802a6fc:	010055a1 55555555 55555555 55555555     .U..UUUUUUUUUUUU
 802a70c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a71c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a72c:	55555555 55555555 55455555 54550555     UUUUUUUUUUEUU.UT
 802a73c:	80525585 a8aa4a00 4aa8aa2a 8052a8aa     .UR..J..*..J..R.
 802a74c:	55855400 55550555 55555545 55555555     .T.UU.UUEUUUUUUU
 802a75c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a76c:	55555555 55555555 55515555 55555055     UUUUUUUUUUQUUPUU
 802a77c:	02001552 a1aa2a85 2aa8aa2a 0200a1aa     R....*..*..*....
 802a78c:	15525585 55555055 55555551 55555555     .UR.UPUUQUUUUUUU
 802a79c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a7ac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a7bc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a7cc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a7dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a7ec:	55555555 55554555 85545505 55855255     UUUUUEUU.UT.UR.U
 802a7fc:	2a55854a 85aa5485 5485aa52 2a5585aa     J.U*.T..R..T..U*
 802a80c:	854a5585 55855255 55558554 45555505     .UJ.UR.UT.UU.UUE
 802a81c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a82c:	51555555 55505555 55155255 52558552     UUUQUUPUUR.UR.UR
 802a83c:	a85255a1 15aa5255 5285aa52 a85215aa     .UR.UR..R..R..R.
 802a84c:	55a15255 52558552 55505515 55555155     UR.UR.UR.UPUUQUU
 802a85c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a86c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a87c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a88c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a89c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a8ac:	55555555 55555555 01000055 25a1aa2a     UUUUUUUUU...*..%
 802a8bc:	aa266155 62562660 26616626 aa266256     Ua&.`&Vb&fa&Vb&.
 802a8cc:	61552560 00a1aa2a 55550100 55555555     `%Ua*.....UUUUUU
 802a8dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a8ec:	55555555 55555555 00004055 49a8aa4a     UUUUUUUUU@..J..I
 802a8fc:	aa095855 98958998 89989949 aa099895     UX......I.......
 802a90c:	58554998 40a8aa4a 55550000 55555555     .IUXJ..@..UUUUUU
 802a91c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a92c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a93c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a94c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a95c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a96c:	40555555 55485555 55554855 48555548     UUU@UUHUUHUUHUUH
 802a97c:	00485555 aaaa4a00 4a555549 0048aaaa     UUH..J..IUUJ..H.
 802a98c:	55554800 48555548 55485555 55554055     .HUUHUUHUUHUU@UU
 802a99c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a9ac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a9bc:	00005555 aaaaaa00 aa555555 0000aaaa     UU......UUU.....
 802a9cc:	55555500 55555555 55555555 55555555     .UUUUUUUUUUUUUUU
 802a9dc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802a9ec:	55555555 55550155 21555521 55215555     UUUUU.UU!UU!UU!U
 802a9fc:	00002155 a1aaaa21 aa615555 0000a1aa     U!..!...UUa.....
 802aa0c:	21555521 55215555 55552155 01555521     !UU!UU!UU!UU!UU.
 802aa1c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802aa2c:	40555555 aa2a0000 080020aa 22881422     UUU@..*.. ..".."
 802aa3c:	0a228812 882a2288 2288aa22 2a2288aa     ..".."*."..".."*
 802aa4c:	880a2288 22881222 00208814 aaaa2a08     .".."..".. ..*..
 802aa5c:	55000040 55555555 55555555 55555555     @..UUUUUUUUUUUUU
 802aa6c:	55555555 55555055 4855554a 55485555     UUUUUPUUJUUHUUHU
 802aa7c:	55554855 48555548 55485555 55554855     UHUUHUUHUUHUUHUU
 802aa8c:	48555548 55485555 55554855 4a555548     HUUHUUHUUHUUHUUJ
 802aa9c:	55505555 55555555 55555555 55555555     UUPUUUUUUUUUUUUU
 802aaac:	00555555 aaaa0000 000000aa aaaaaaaa     UUU.............
 802aabc:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
 802aacc:	aaaaaaaa aaaaaaaa 0000aaaa aaaaaa00     ................
 802aadc:	55000000 55555555 55555555 55555555     ...UUUUUUUUUUUUU
 802aaec:	00555555 aaaa0000 000000aa aa85aaaa     UUU.............
 802aafc:	aaaa85aa 85aaaa85 aa85aaaa aaaa85aa     ................
 802ab0c:	85aaaa85 aa85aaaa 000085aa aaaaaa00     ................
 802ab1c:	55000000 55555555 55555555 55555555     ...UUUUUUUUUUUUU
 802ab2c:	00555555 aaaa0000 000000aa aa55a1aa     UUU...........U.
 802ab3c:	a1aa55a1 55a1aa55 aa55a1aa a1aa55a1     .U..U..U..U..U..
 802ab4c:	55a1aa55 aa55a1aa 000055a1 aaaaaa00     U..U..U..U......
 802ab5c:	55000000 55555555 55555555 55555555     ...UUUUUUUUUUUUU
 802ab6c:	00555555 aaaa0000 000000aa a85555a8     UUU..........UU.
 802ab7c:	55a85555 5555a855 a85555a8 55a85555     UU.UU.UU.UU.UU.U
 802ab8c:	5555a855 a85555a8 00005555 aaaaaa00     U.UU.UU.UU......
 802ab9c:	55000000 55555555 55555555 55555555     ...UUUUUUUUUUUUU
 802abac:	00555555 aaaa0000 000000aa 55555555     UUU.........UUUU
 802abbc:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802abcc:	55555555 55555555 00005555 aaaaaa00     UUUUUUUUUU......
 802abdc:	55000000 55555555 55555555 55555555     ...UUUUUUUUUUUUU
 802abec:	05555555 55a15555 55552155 21555521     UUU.UU.UU!UU!UU!
 802abfc:	55215555 55552155 21555521 55215555     UU!UU!UU!UU!UU!U
 802ac0c:	55552155 21555521 55215555 5555a155     U!UU!UU!UU!UU.UU
 802ac1c:	55555505 55555555 55555555 55555555     .UUUUUUUUUUUUUUU
 802ac2c:	00555555 aaaa0100 080020a8 22881422     UUU...... ..".."
 802ac3c:	a0228884 88a82288 2288aa22 a82288aa     ..".."..".."..".
 802ac4c:	88a02288 22888422 00208814 a8aaaa08     .".."..".. .....
 802ac5c:	55010000 55555555 55555555 55555555     ...UUUUUUUUUUUUU
 802ac6c:	55545555 50555255 104a5552 550a4a55     UUTUURUPRUJ.UJ.U
 802ac7c:	54552a50 850255a0 5485a254 025585a2     P*UT.U..T..T..U.
 802ac8c:	a0545585 552a5055 4a550a4a 52505510     .UT.UP*UJ.UJ.UPR
 802ac9c:	55525555 55555055 55555555 55555555     UURUUPUUUUUUUUUU
 802acac:	85555515 05855555 55a10455 a855a1a0     .UU.UU..U..U..U.
 802acbc:	150a5505 55805255 52158a52 8052158a     .U..UR.UR..R..R.
 802accc:	55150a55 a05505a8 a10455a1 55058555     U..U..U..U..U..U
 802acdc:	15555585 55555555 55555555 55555555     .UU.UUUUUUUUUUUU
 802acec:	55555555 55555055 aa54550a 55a05255     UUUUUPUU.UT.UR.U
 802acfc:	4a55044a 54285514 55542855 28555428     J.UJ.U(TU(TU(TU(
 802ad0c:	144a5554 55044a55 5455a052 0a5555aa     TUJ.UJ.UR.UT.UU.
 802ad1c:	55505555 55555555 55555555 55555555     UUPUUUUUUUUUUUUU
 802ad2c:	05555555 55a05555 5515aa55 aa5585aa     UUU.UU.UU..U..U.
 802ad3c:	a1aa55a1 55a8aa55 aa55a8aa a8aa55a8     .U..U..U..U..U..
 802ad4c:	55a1aa55 aa55a1aa 15aa5585 5555a055     U..U..U..U..U.UU
 802ad5c:	55555505 55555555 55555555 55555555     .UUUUUUUUUUUUUUU
 802ad6c:	55415555 54552855 885255a8 2a080a40     UUAUU(UT.UR.@..*
 802ad7c:	a12048a8 48a12048 2048a120 a12048a1     .H .H .H .H .H .
 802ad8c:	48a82a48 55080a40 54558852 285555a8     H*.H@..UR.UT.UU(
 802ad9c:	55415555 55555555 55555555 55555555     UUAUUUUUUUUUUUUU
 802adac:	55555155 5a555568 15125415 44158252     UQUUhUUZ.T..R..D
 802adbc:	a0208582 85202885 28852048 a0208520     .. ..( .H .( . .
 802adcc:	85824485 54158252 5a551512 55685515     .D..R..T..UZ.UhU
 802addc:	55555155 55555555 55555555 55555555     UQUUUUUUUUUUUUUU
 802adec:	2a010040 0048a8aa 21554821 48215548     @..*..H.!HU!HU!H
 802adfc:	14522155 15825485 55552855 82545528     U!R..T..U(UU(UT.
 802ae0c:	85145215 48215548 55482155 21004821     .R..HU!HU!HU!H.!
 802ae1c:	40a8aa2a 55550100 55555555 55555555     *..@..UUUUUUUUUU
 802ae2c:	50555555 15525555 55855255 5255a152     UUUPUUR.UR.UR.UR
 802ae3c:	aa5255a8 85aa5215 52a1aa52 aa52a8aa     .UR..R..R..R..R.
 802ae4c:	05aa5200 50850a52 5255810a a15255a1     .R..R..P..UR.UR.
 802ae5c:	55815055 55551555 55555555 55555555     UP.UU.UUUUUUUUUU
 802ae6c:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802ae7c:	55555555 51515055 2048084a 8820288a     UUUUUPQQJ.H .( .
 802ae8c:	88882088 2008882a 88204888 48882048     . ..*.. .H .H .H
 802ae9c:	45488820 55555111 55555555 55555555      .HE.QUUUUUUUUUU
 802aeac:	55555555 55555555 55555555 55555555     UUUUUUUUUUUUUUUU
 802aebc:	55555555 51514055 2048082a 8820288a     UUUUU@QQ*.H .( .
 802aecc:	88882088 2008082a 48214848 48482148     . ..*.. HH!HH!HH
 802aedc:	45484821 55555151 55555555 55555555     !HHEQQUUUUUUUUUU
 802aeec:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
 802aefc:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
 802af0c:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
 802af1c:	aaaaaaaa 5555aaaa 55555555 55555555     ......UUUUUUUUUU
 802af2c:	776f440a 616f6c6e 676e6964 6e6f6620     .Downloading fon
 802af3c:	6f742074 58414d20 36353437 4d564e20     t to MAX7456 NVM
 802af4c:	6874202c 6d207369 74207961 20656b61     , this may take 
 802af5c:	68772061 2e656c69 0a0a2e2e 00000000     a while.........
 802af6c:	6e6f4420 00000a65 6e6f440a 69772065      Done....Done wi
 802af7c:	4d206874 34375841 66203635 20746e6f     th MAX7456 font 
 802af8c:	6e776f64 64616f6c 00000a0a 6363410a     download.....Acc
 802af9c:	72656c65 74656d6f 43207265 62696c61     elerometer Calib
 802afac:	69746172 0a3a6e6f 0000000a 63616c50     ration:.....Plac
 802afbc:	63612065 656c6563 656d6f72 20726574     e accelerometer 
 802afcc:	68676972 69732074 75206564 00000a70     right side up...
 802afdc:	65532020 6120646e 61686320 74636172       Send a charact
 802afec:	77207265 206e6568 64616572 6f742079     er when ready to
 802affc:	6f727020 64656563 00000a0a 61472020      proceed....  Ga
 802b00c:	72656874 20676e69 61746144 0a2e2e2e     thering Data....
 802b01c:	0000000a 00000a0a 63616c50 63612065     ........Place ac
 802b02c:	656c6563 656d6f72 20726574 73207075     celerometer up s
 802b03c:	20656469 6e776f64 0000000a 63616c50     ide down....Plac
 802b04c:	63612065 656c6563 656d6f72 20726574     e accelerometer 
 802b05c:	7466656c 67646520 6f642065 000a6e77     left edge down..
 802b06c:	63616c50 63612065 656c6563 656d6f72     Place accelerome
 802b07c:	20726574 68676972 64652074 64206567     ter right edge d
 802b08c:	0a6e776f 00000000 63616c50 63612065     own.....Place ac
 802b09c:	656c6563 656d6f72 20726574 72616572     celerometer rear
 802b0ac:	67646520 6f642065 000a6e77 63616c50      edge down..Plac
 802b0bc:	63612065 656c6563 656d6f72 20726574     e accelerometer 
 802b0cc:	6e6f7266 64652074 64206567 0a6e776f     front edge down.
 802b0dc:	00000000 0000202c 0000000a 6363410a     ...., .......Acc
 802b0ec:	43206c65 62696c61 69746172 43206e6f     el Calibration C
 802b0fc:	6c706d6f 2e657465 0000000a 4353450a     omplete......ESC
 802b10c:	6c614320 61726269 6e6f6974 000a0a3a      Calibration:...
 802b11c:	21212121 55414320 4e4f4954 52202d20     !!!! CAUTION - R
 802b12c:	766f6d65 6c612065 7270206c 6c65706f     emove all propel
 802b13c:	7372656c 646e6120 73696420 6e6e6f63     lers and disconn
 802b14c:	20746365 21212121 0000000a 21212121     ect !!!!....!!!!
 802b15c:	696c6620 20746867 74746162 20797265      flight battery 
 802b16c:	6f666562 70206572 65636f72 6e696465     before proceedin
 802b17c:	6e612067 75662079 65687472 20202072     g any further   
 802b18c:	21212121 00000a0a 65707954 27592720     !!!!....Type 'Y'
 802b19c:	206f7420 746e6f63 65756e69 6e61202c      to continue, an
 802b1ac:	69687479 6f20676e 72656874 61686320     ything other cha
 802b1bc:	74636172 65207265 73746978 00000a0a     racter exits....
 802b1cc:	20435345 696c6143 74617262 206e6f69     ESC Calibration 
 802b1dc:	636e6143 64656c65 0a0a2121 00000000     Canceled!!......
 802b1ec:	65746e45 68272072 6f662027 614d2072     Enter 'h' for Ma
 802b1fc:	6f432078 6e616d6d 2e2e2e64 00000a2e     x Command.......
 802b20c:	65746e45 6d272072 6f662027 694d2072     Enter 'm' for Mi
 802b21c:	6f432064 6e616d6d 2e2e2e64 00000a2e     d Command.......
 802b22c:	65746e45 6c272072 6f662027 694d2072     Enter 'l' for Mi
 802b23c:	6f43206e 6e616d6d 2e2e2e64 00000a2e     n Command.......
 802b24c:	65746e45 78272072 6f742027 69786520     Enter 'x' to exi
 802b25c:	2e2e2e74 000a0a2e 6c707041 676e6979     t.......Applying
 802b26c:	78614d20 6d6f4320 646e616d 2e2e2e2e      Max Command....
 802b27c:	00000a0a 6c707041 676e6979 64694d20     ....Applying Mid
 802b28c:	6d6f4320 646e616d 2e2e2e2e 00000a0a      Command........
 802b29c:	6c707041 676e6979 6e694d20 6d6f4320     Applying Min Com
 802b2ac:	646e616d 2e2e2e2e 00000a0a 6c707041     mand........Appl
 802b2bc:	676e6979 6e694d20 6d6f4320 646e616d     ying Min Command
 802b2cc:	7845202c 6e697469 61432067 7262696c     , Exiting Calibr
 802b2dc:	6f697461 2e2e2e6e 000a0a2e 614d0a0a     ation.........Ma
 802b2ec:	74656e67 74656d6f 43207265 62696c61     gnetometer Calib
 802b2fc:	69746172 0a3a6e6f 0000000a 61746f52     ration:.....Rota
 802b30c:	6d206574 656e6761 656d6f74 20726574     te magnetometer 
 802b31c:	756f7261 6120646e 61206c6c 20736578     around all axes 
 802b32c:	746c756d 656c7069 6d697420 000a7365     multiple times..
 802b33c:	7473754d 6d6f6320 74656c70 69772065     Must complete wi
 802b34c:	6e696874 20303620 6f636573 2e73646e     thin 60 seconds.
 802b35c:	0a2e2e2e 0000000a 65532020 6120646e     ........  Send a
 802b36c:	61686320 74636172 77207265 206e6568      character when 
 802b37c:	64616572 6f742079 67656220 61206e69     ready to begin a
 802b38c:	6120646e 68746f6e 77207265 206e6568     nd another when 
 802b39c:	706d6f63 6574656c 00000a0a 74532020     complete....  St
 802b3ac:	20747261 61746f72 6e6f6974 2e2e2e73     art rotations...
 802b3bc:	0a0a2e2e 00000000 614d0a0d 74656e67     ..........Magnet
 802b3cc:	74656d6f 42207265 20736169 636c6143     ometer Bias Calc
 802b3dc:	74616c75 206e6f69 00000028 6d617320     ulation (... sam
 802b3ec:	73656c70 6c6f6320 7463656c 6f206465     ples collected o
 802b3fc:	6f207475 30332066 6d203030 0a297861     ut of 3000 max).
 802b40c:	0000000a 6e67614d 6d6f7465 72657465     ....Magnetometer
 802b41c:	61694220 61562073 7365756c 0000203a      Bias Values: ..
 802b42c:	0000202c 0000000a 614d0a0a 74656e67     , ........Magnet
 802b43c:	74656d6f 43207265 62696c61 69746172     ometer Calibrati
 802b44c:	43206e6f 6c706d6f 2e657465 00000a0a     on Complete.....
 802b45c:	0000000a 6c6c6f52 74615220 49502065     ....Roll Rate PI
 802b46c:	20203a44 00000000 342e3825 00202c66     D:  ....%8.4f, .
 802b47c:	6f727245 00000a72 74617453 00000a65     Error...State...
 802b48c:	63746950 61522068 50206574 203a4449     Pitch Rate PID: 
 802b49c:	00000000 20776159 65746152 44495020     ....Yaw Rate PID
 802b4ac:	2020203a 00000000 6c6c6f52 74744120     :   ....Roll Att
 802b4bc:	64757469 49502065 20203a44 00000000     itude PID:  ....
 802b4cc:	63746950 74412068 75746974 50206564     Pitch Attitude P
 802b4dc:	203a4449 00000000 64616548 20676e69     ID: ....Heading 
 802b4ec:	3a444950 20202020 20202020 00000000     PID:        ....
 802b4fc:	746f446e 44495020 0020203a 746f4465     nDot PID:  .eDot
 802b50c:	44495020 0020203a 746f4468 44495020      PID:  .hDot PID
 802b51c:	0020203a 4950206e 20203a44 00000000     :  .n PID:  ....
 802b52c:	49502065 20203a44 00000000 49502068     e PID:  ....h PI
 802b53c:	20203a44 00000000 646c3725 0000202c     D:  ....%7ld, ..
 802b54c:	646c3725 0000000a 0000202c 342e3925     %7ld...., ..%9.4
 802b55c:	00202c66 342e3925 00000a66 2e323125     f, .%9.4f...%12.
 802b56c:	202c6637 00000000 46204432 202c7869     7f, ....2D Fix, 
 802b57c:	00000020 46204433 202c7869 00000020      ...3D Fix,  ...
 802b58c:	53204432 2c534142 00000020 53204433     2D SBAS, ...3D S
 802b59c:	2c534142 00000020 46206f4e 202c7869     BAS, ...No Fix, 
 802b5ac:	00000000 00000020 67696c46 4d207468     .... ...Flight M
 802b5bc:	2065646f 4152203d 20204554 20202020     ode = RATE      
 802b5cc:	00000000 67696c46 4d207468 2065646f     ....Flight Mode 
 802b5dc:	5441203d 55544954 20204544 00000000     = ATTITUDE  ....
 802b5ec:	67696c46 4d207468 2065646f 5047203d     Flight Mode = GP
 802b5fc:	20202053 20202020 00000000 64616548     S       ....Head
 802b60c:	20676e69 646c6f48 45203d20 4741474e     ing Hold = ENGAG
 802b61c:	20204445 00202020 64616548 20676e69     ED     .Heading 
 802b62c:	646c6f48 44203d20 4e455349 45474147     Hold = DISENGAGE
 802b63c:	00202044 69746c41 65647574 6c6f4820     D  .Altitude Hol
 802b64c:	203d2064 45534944 4547414e 00000a44     d = DISENAGED...
 802b65c:	69746c41 65647574 6c6f4820 203d2064     Altitude Hold = 
 802b66c:	41474e45 0a444547 00000000 69746c41     ENGAGED.....Alti
 802b67c:	65647574 6c6f4820 203d2064 494e4150     tude Hold = PANI
 802b68c:	00000a43 65757274 00000000 736c6166     C...true....fals
 802b69c:	00000065 6c6f520a 6152206c 50206574     e....Roll Rate P
 802b6ac:	52204449 69656365 2e646576 0a2e2e2e     ID Received.....
 802b6bc:	00000000 7469500a 52206863 20657461     .....Pitch Rate 
 802b6cc:	20444950 65636552 64657669 2e2e2e2e     PID Received....
 802b6dc:	0000000a 7761590a 74615220 49502065     .....Yaw Rate PI
 802b6ec:	65522044 76696563 2e2e6465 000a2e2e     D Received......
 802b6fc:	6c6f520a 7441206c 75746974 50206564     .Roll Attitude P
 802b70c:	52204449 69656365 2e646576 0a2e2e2e     ID Received.....
 802b71c:	00000000 7469500a 41206863 74697474     .....Pitch Attit
 802b72c:	20656475 20444950 65636552 64657669     ude PID Received
 802b73c:	2e2e2e2e 0000000a 6165480a 676e6964     .........Heading
 802b74c:	44495020 63655220 65766965 2e2e2e64      PID Received...
 802b75c:	00000a2e 6f446e0a 49502074 65522044     .....nDot PID Re
 802b76c:	76696563 2e2e6465 000a2e2e 6f44650a     ceived.......eDo
 802b77c:	49502074 65522044 76696563 2e2e6465     t PID Received..
 802b78c:	000a2e2e 6f44680a 49502074 65522044     .....hDot PID Re
 802b79c:	76696563 2e2e6465 000a2e2e 50206e0a     ceived.......n P
 802b7ac:	52204449 69656365 2e646576 0a2e2e2e     ID Received.....
 802b7bc:	00000000 5020650a 52204449 69656365     .....e PID Recei
 802b7cc:	2e646576 0a2e2e2e 00000000 5020680a     ved..........h P
 802b7dc:	52204449 69656365 2e646576 0a2e2e2e     ID Received.....
 802b7ec:	00000000 65746e45 676e6972 6f6f4220     ....Entering Boo
 802b7fc:	616f6c74 2e726564 0a2e2e2e 0000000a     tloader.........
 802b80c:	7379530a 206d6574 65736552 676e6974     .System Reseting
 802b81c:	2e2e2e2e 00000a0a 5045450a 204d4f52     .........EEPROM 
 802b82c:	61726150 6574656d 52207372 74657365     Parameters Reset
 802b83c:	2e2e2e2e 0000000a 7379530a 206d6574     .........System 
 802b84c:	65736552 6e697474 2e2e2e67 000a0a2e     Resetting.......
 802b85c:	6972570a 676e6974 50454520 204d4f52     .Writing EEPROM 
 802b86c:	61726150 6574656d 2e2e7372 000a2e2e     Parameters......
 802b87c:	20276127 65746152 44495020 20202073     'a' Rate PIDs   
 802b88c:	20202020 20202020 20202020 20202020                     
 802b89c:	20202020 20202020 27202020 53202741                'A' S
 802b8ac:	52207465 206c6c6f 65746152 44495020     et Roll Rate PID
 802b8bc:	74614420 20202061 503b4241 443b493b      Data   AB;P;I;D
 802b8cc:	6e69773b 47707564 64726175 7245643b     ;windupGuard;dEr
 802b8dc:	43726f72 0a636c61 00000000 20276227     rorCalc.....'b' 
 802b8ec:	69747441 65647574 44495020 20202073     Attitude PIDs   
 802b8fc:	20202020 20202020 20202020 20202020                     
 802b90c:	20202020 27202020 53202742 50207465            'B' Set P
 802b91c:	68637469 74615220 49502065 61442044     itch Rate PID Da
 802b92c:	20206174 503b4242 443b493b 6e69773b     ta  BB;P;I;D;win
 802b93c:	47707564 64726175 7245643b 43726f72     dupGuard;dErrorC
 802b94c:	0a636c61 00000000 20276327 6f6c6556     alc.....'c' Velo
 802b95c:	79746963 44495020 20202073 20202020     city PIDs       
 802b96c:	20202020 20202020 20202020 20202020                     
 802b97c:	27202020 53202743 59207465 52207761        'C' Set Yaw R
 802b98c:	20657461 20444950 61746144 20202020     ate PID Data    
 802b99c:	503b4243 443b493b 6e69773b 47707564     CB;P;I;D;windupG
 802b9ac:	64726175 7245643b 43726f72 0a636c61     uard;dErrorCalc.
 802b9bc:	00000000 20276427 69736f50 6e6f6974     ....'d' Position
 802b9cc:	44495020 20202073 20202020 20202020      PIDs           
 802b9dc:	20202020 20202020 20202020 27202020                    '
 802b9ec:	53202744 52207465 206c6c6f 20747441     D' Set Roll Att 
 802b9fc:	20444950 61746144 20202020 503b4244     PID Data    DB;P
 802ba0c:	443b493b 6e69773b 47707564 64726175     ;I;D;windupGuard
 802ba1c:	7245643b 43726f72 0a636c61 00000000     ;dErrorCalc.....
 802ba2c:	20276527 706f6f4c 6c654420 54206174     'e' Loop Delta T
 802ba3c:	73656d69 20202020 20202020 20202020     imes            
 802ba4c:	20202020 20202020 27202020 53202745                'E' S
 802ba5c:	50207465 68637469 74744120 44495020     et Pitch Att PID
 802ba6c:	74614420 20202061 503b4245 443b493b      Data   EB;P;I;D
 802ba7c:	6e69773b 47707564 64726175 7245643b     ;windupGuard;dEr
 802ba8c:	43726f72 0a636c61 00000000 20276627     rorCalc.....'f' 
 802ba9c:	706f6f4c 65784520 69747563 54206e6f     Loop Execution T
 802baac:	73656d69 20202020 20202020 20202020     imes            
 802babc:	20202020 27202020 53202746 48207465            'F' Set H
 802bacc:	48206764 20646c6f 20444950 61746144     dg Hold PID Data
 802badc:	20202020 503b4246 443b493b 6e69773b         FB;P;I;D;win
 802baec:	47707564 64726175 7245643b 43726f72     dupGuard;dErrorC
 802bafc:	0a636c61 00000000 20276727 20303035     alc.....'g' 500 
 802bb0c:	41207a48 6c656363 20202073 20202020     Hz Accels       
 802bb1c:	20202020 20202020 20202020 20202020                     
 802bb2c:	27202020 53202747 6e207465 20746f44        'G' Set nDot 
 802bb3c:	20444950 61746144 20202020 20202020     PID Data        
 802bb4c:	503b4247 443b493b 6e69773b 47707564     GB;P;I;D;windupG
 802bb5c:	64726175 7245643b 43726f72 0a636c61     uard;dErrorCalc.
 802bb6c:	00000000 20276827 20303031 45207a48     ....'h' 100 Hz E
 802bb7c:	68747261 69784120 63412073 736c6563     arth Axis Accels
 802bb8c:	20202020 20202020 20202020 27202020                    '
 802bb9c:	53202748 65207465 20746f44 20444950     H' Set eDot PID 
 802bbac:	61746144 20202020 20202020 503b4248     Data        HB;P
 802bbbc:	443b493b 6e69773b 47707564 64726175     ;I;D;windupGuard
 802bbcc:	7245643b 43726f72 0a636c61 00000000     ;dErrorCalc.....
 802bbdc:	20276927 20303035 47207a48 736f7279     'i' 500 Hz Gyros
 802bbec:	20202020 20202020 20202020 20202020                     
 802bbfc:	20202020 20202020 27202020 53202749                'I' S
 802bc0c:	68207465 20746f44 20444950 61746144     et hDot PID Data
 802bc1c:	20202020 20202020 503b4249 443b493b             IB;P;I;D
 802bc2c:	6e69773b 47707564 64726175 7245643b     ;windupGuard;dEr
 802bc3c:	43726f72 0a636c61 00000000 20276a27     rorCalc.....'j' 
 802bc4c:	68203031 614d207a 61442067 20206174     10 hz Mag Data  
 802bc5c:	20202020 20202020 20202020 20202020                     
 802bc6c:	20202020 27202020 5320274a 6e207465            'J' Set n
 802bc7c:	44495020 74614420 20202061 20202020      PID Data       
 802bc8c:	20202020 503b424a 443b493b 6e69773b         JB;P;I;D;win
 802bc9c:	47707564 64726175 7245643b 43726f72     dupGuard;dErrorC
 802bcac:	0a636c61 00000000 20276b27 74726556     alc.....'k' Vert
 802bcbc:	6c616369 69784120 61562073 62616972     ical Axis Variab
 802bccc:	2020656c 20202020 20202020 20202020     le              
 802bcdc:	27202020 5320274b 65207465 44495020        'K' Set e PID
 802bcec:	74614420 20202061 20202020 20202020      Data           
 802bcfc:	503b424b 443b493b 6e69773b 47707564     KB;P;I;D;windupG
 802bd0c:	64726175 7245643b 43726f72 0a636c61     uard;dErrorCalc.
 802bd1c:	00000000 20276c27 69747441 65647574     ....'l' Attitude
 802bd2c:	20202073 20202020 20202020 20202020     s               
 802bd3c:	20202020 20202020 20202020 27202020                    '
 802bd4c:	5320274c 68207465 44495020 74614420     L' Set h PID Dat
 802bd5c:	20202061 20202020 20202020 503b424c     a           LB;P
 802bd6c:	443b493b 6e69773b 47707564 64726175     ;I;D;windupGuard
 802bd7c:	7245643b 43726f72 0a636c61 00000000     ;dErrorCalc.....
 802bd8c:	73657250 70732073 20656361 20726162     Press space bar 
 802bd9c:	20726f66 65726f6d 726f202c 746e6520     for more, or ent
 802bdac:	61207265 6d6f6320 646e616d 2e2e2e2e     er a command....
 802bdbc:	0000000a 20276d27 20535047 61746144     ....'m' GPS Data
 802bdcc:	20202020 20202020 20202020 20202020                     
 802bddc:	20202020 20202020 20202020 27202020                    '
 802bdec:	4d20274d 34375841 43203635 000a494c     M' MAX7456 CLI..
 802bdfc:	20276e27 20535047 74617453 20202073     'n' GPS Stats   
 802be0c:	20202020 20202020 20202020 20202020                     
 802be1c:	20202020 20202020 27202020 4d20274e                'N' M
 802be2c:	72657869 494c4320 0000000a 20276f27     ixer CLI....'o' 
 802be3c:	20746f4e 64657355 20202020 20202020     Not Used        
 802be4c:	20202020 20202020 20202020 20202020                     
 802be5c:	20202020 27202020 5220274f 69656365            'O' Recei
 802be6c:	20726576 0a494c43 00000000 20277027     ver CLI.....'p' 
 802be7c:	20746f4e 64657355 20202020 20202020     Not Used        
 802be8c:	20202020 20202020 20202020 20202020                     
 802be9c:	20202020 27202020 53202750 6f736e65            'P' Senso
 802beac:	4c432072 00000a49 20277127 20746f4e     r CLI...'q' Not 
 802bebc:	64657355 20202020 20202020 20202020     Used            
 802becc:	20202020 20202020 20202020 20202020                     
 802bedc:	27202020 47202751 43205350 000a494c        'Q' GPS CLI..
 802beec:	20277227 65646f4d 61745320 20736574     'r' Mode States 
 802befc:	20202020 20202020 20202020 20202020                     
 802bf0c:	20202020 20202020 27202020 52202752                'R' R
 802bf1c:	74657365 646e6120 746e4520 42207265     eset and Enter B
 802bf2c:	6c746f6f 6564616f 00000a72 20277327     ootloader...'s' 
 802bf3c:	20776152 65636552 72657669 6d6f4320     Raw Receiver Com
 802bf4c:	646e616d 20202073 20202020 20202020     mands           
 802bf5c:	20202020 27202020 52202753 74657365            'S' Reset
 802bf6c:	0000000a 20277427 636f7250 65737365     ....'t' Processe
 802bf7c:	65522064 76696563 43207265 616d6d6f     d Receiver Comma
 802bf8c:	2073646e 20202020 20202020 27202020     nds            '
 802bf9c:	4e202754 5520746f 0a646573 00000000     T' Not Used.....
 802bfac:	20277527 6d6d6f43 20646e61 44206e49     'u' Command In D
 802bfbc:	6e657465 69442074 65726373 20736574     etent Discretes 
 802bfcc:	20202020 20202020 27202020 4e202755                'U' N
 802bfdc:	5520746f 0a646573 00000000 20277627     ot Used.....'v' 
 802bfec:	6f746f4d 57502072 754f204d 74757074     Motor PWM Output
 802bffc:	20202073 20202020 20202020 20202020     s               
 802c00c:	20202020 27202020 52202756 74657365            'V' Reset
 802c01c:	50454520 204d4f52 61726150 6574656d      EEPROM Paramete
 802c02c:	000a7372 20277727 76726553 5750206f     rs..'w' Servo PW
 802c03c:	754f204d 74757074 20202073 20202020     M Outputs       
 802c04c:	20202020 20202020 20202020 27202020                    '
 802c05c:	57202757 65746972 50454520 204d4f52     W' Write EEPROM 
 802c06c:	61726150 6574656d 000a7372 20277827     Parameters..'x' 
 802c07c:	6d726554 74616e69 65532065 6c616972     Terminate Serial
 802c08c:	6d6f4320 696e756d 69746163 20206e6f      Communication  
 802c09c:	20202020 27202020 4e202758 5520746f            'X' Not U
 802c0ac:	0a646573 00000000 20277927 20435345     sed.....'y' ESC 
 802c0bc:	696c6143 74617262 206e6f69 20202020     Calibration     
 802c0cc:	20202020 20202020 20202020 20202020                     
 802c0dc:	27202020 4e202759 5520746f 0a646573        'Y' Not Used.
 802c0ec:	00000000 20277a27 20746f4e 64657355     ....'z' Not Used
 802c0fc:	20202020 20202020 20202020 20202020                     
 802c10c:	20202020 20202020 20202020 27202020                    '
 802c11c:	4e20275a 5520746f 0a646573 00000000     Z' Not Used.....
 802c12c:	20273127 68676948 65705320 54206465     '1' High Speed T
 802c13c:	6d656c65 79727465 45203120 6c62616e     elemetry 1 Enabl
 802c14c:	00000a65 20273227 68676948 65705320     e...'2' High Spe
 802c15c:	54206465 6d656c65 79727465 45203220     ed Telemetry 2 E
 802c16c:	6c62616e 00000a65 20273327 68676948     nable...'3' High
 802c17c:	65705320 54206465 6d656c65 79727465      Speed Telemetry
 802c18c:	45203320 6c62616e 00000a65 20273427      3 Enable...'4' 
 802c19c:	68676948 65705320 54206465 6d656c65     High Speed Telem
 802c1ac:	79727465 45203420 6c62616e 00000a65     etry 4 Enable...
 802c1bc:	20273527 68676948 65705320 54206465     '5' High Speed T
 802c1cc:	6d656c65 79727465 45203520 6c62616e     elemetry 5 Enabl
 802c1dc:	00000a65 20273627 68676948 65705320     e...'6' High Spe
 802c1ec:	54206465 6d656c65 79727465 45203620     ed Telemetry 6 E
 802c1fc:	6c62616e 00000a65 20273727 68676948     nable...'7' High
 802c20c:	65705320 54206465 6d656c65 79727465      Speed Telemetry
 802c21c:	45203720 6c62616e 00000a65 20273827      7 Enable...'8' 
 802c22c:	68676948 65705320 54206465 6d656c65     High Speed Telem
 802c23c:	79727465 45203820 6c62616e 00000a65     etry 8 Enable...
 802c24c:	20273927 68676948 65705320 54206465     '9' High Speed T
 802c25c:	6d656c65 79727465 45203920 6c62616e     elemetry 9 Enabl
 802c26c:	00000a65 20273027 68676948 65705320     e...'0' High Spe
 802c27c:	54206465 6d656c65 79727465 73694420     ed Telemetry Dis
 802c28c:	656c6261 20202020 20202020 27202020     able           '
 802c29c:	4320273f 616d6d6f 5320646e 616d6d75     ?' Command Summa
 802c2ac:	000a7972 746e450a 6e697265 414d2067     ry...Entering MA
 802c2bc:	35343758 4c432036 2e2e2e49 000a0a2e     X7456 CLI.......
 802c2cc:	3758414d 20363534 20494c43 00203e2d     MAX7456 CLI -> .
 802c2dc:	0000000a 58414d0a 36353437 44534f20     .....MAX7456 OSD
 802c2ec:	61745320 3a737574 20202020 20202020      Status:        
 802c2fc:	20202020 00000020 62616e45 0a64656c          ...Enabled.
 802c30c:	00000000 61736944 64656c62 0000000a     ....Disabled....
 802c31c:	2044534f 61666544 20746c75 65646956     OSD Default Vide
 802c32c:	7453206f 61646e61 203a6472 20202020     o Standard:     
 802c33c:	00000000 0a4c4150 00000000 4353544e     ....PAL.....NTSC
 802c34c:	0000000a 2044534f 70736944 2079616c     ....OSD Display 
 802c35c:	74696e55 20203a73 20202020 20202020     Units:          
 802c36c:	20202020 00000000 7274654d 000a6369         ....Metric..
 802c37c:	6c676e45 0a687369 00000000 2044534f     English.....OSD 
 802c38c:	69746c41 65647574 73694420 79616c70     Altitude Display
 802c39c:	2020203a 20202020 20202020 00000000     :           ....
 802c3ac:	000a6e4f 0a66664f 00000000 2044534f     On..Off.....OSD 
 802c3bc:	69747241 61636966 6f48206c 6f7a6972     Artifical Horizo
 802c3cc:	6944206e 616c7073 20203a79 00000000     n Display:  ....
 802c3dc:	2044534f 69747441 65647574 73694420     OSD Attitude Dis
 802c3ec:	79616c70 2020203a 20202020 20202020     play:           
 802c3fc:	00000000 2044534f 64616548 20676e69     ....OSD Heading 
 802c40c:	70736944 3a79616c 20202020 20202020     Display:        
 802c41c:	20202020 00000000 58414d0a 36353437         .....MAX7456
 802c42c:	73655220 2e2e7465 0a0a2e2e 00000000      Reset..........
 802c43c:	58414d0a 36353437 61684320 74636172     .MAX7456 Charact
 802c44c:	53207265 44207465 6c707369 64657961     er Set Displayed
 802c45c:	2e2e2e2e 00000a0a 6978450a 676e6974     .........Exiting
 802c46c:	58414d20 36353437 494c4320 2e2e2e2e      MAX7456 CLI....
 802c47c:	00000a0a 6972570a 676e6974 50454520     .....Writing EEP
 802c48c:	204d4f52 61726150 6574656d 2e2e7372     ROM Parameters..
 802c49c:	0a0a2e2e 00000000 20276127 2044534f     ........'a' OSD 
 802c4ac:	666e6f43 72756769 6f697461 00000a6e     Configuration...
 802c4bc:	20276227 62616e45 4f20656c 41204453     'b' Enable OSD A
 802c4cc:	7469746c 20656475 70736944 2079616c     ltitude Display 
 802c4dc:	20202020 20202020 27202020 44202742                'B' D
 802c4ec:	62617369 4f20656c 41204453 7469746c     isable OSD Altit
 802c4fc:	20656475 70736944 0a79616c 00000000     ude Display.....
 802c50c:	20276327 62616e45 4f20656c 41204453     'c' Enable OSD A
 802c51c:	66697472 61696369 6f48206c 6f7a6972     rtificial Horizo
 802c52c:	6944206e 616c7073 27202079 44202743     n Display  'C' D
 802c53c:	62617369 4f20656c 41204453 66697472     isable OSD Artif
 802c54c:	61696369 6f48206c 6f7a6972 6944206e     icial Horizon Di
 802c55c:	616c7073 00000a79 20276427 62616e45     splay...'d' Enab
 802c56c:	4f20656c 41204453 74697474 20656475     le OSD Attitude 
 802c57c:	70736944 2079616c 20202020 20202020     Display         
 802c58c:	27202020 44202744 62617369 4f20656c        'D' Disable O
 802c59c:	41204453 74697474 20656475 70736944     SD Attitude Disp
 802c5ac:	0a79616c 00000000 20276527 62616e45     lay.....'e' Enab
 802c5bc:	4f20656c 48204453 69646165 4420676e     le OSD Heading D
 802c5cc:	6c707369 20207961 20202020 20202020     isplay          
 802c5dc:	27202020 44202745 62617369 4f20656c        'E' Disable O
 802c5ec:	48204453 69646165 4420676e 6c707369     SD Heading Displ
 802c5fc:	000a7961 20277127 20746553 6c676e45     ay..'q' Set Engl
 802c60c:	20687369 70736944 2079616c 74696e55     ish Display Unit
 802c61c:	20202073 20202020 20202020 27202020     s              '
 802c62c:	53202751 4d207465 69727465 69442063     Q' Set Metric Di
 802c63c:	616c7073 6e552079 0a737469 00000000     splay Units.....
 802c64c:	20277227 65736552 414d2074 35343758     'r' Reset MAX745
 802c65c:	00000a36 20277327 70736944 2079616c     6...'s' Display 
 802c66c:	3758414d 20363534 72616843 65746361     MAX7456 Characte
 802c67c:	65532072 00000a74 20277427 6e776f44     r Set...'t' Down
 802c68c:	64616f6c 6e6f4620 6f742074 58414d20     load Font to MAX
 802c69c:	36353437 0000000a 20277527 6e616843     7456....'u' Chan
 802c6ac:	4f206567 49204453 6174736e 64656c6c     ge OSD Installed
 802c6bc:	61745320 000a6574 20277627 6e616843      State..'v' Chan
 802c6cc:	44206567 75616665 5620746c 6f656469     ge Default Video
 802c6dc:	61745320 7261646e 20202064 20202020      Standard       
 802c6ec:	27202020 57202757 65746972 50454520        'W' Write EEP
 802c6fc:	204d4f52 61726150 6574656d 000a7372     ROM Parameters..
 802c70c:	20277827 74697845 6e655320 20726f73     'x' Exit Sensor 
 802c71c:	20494c43 20202020 20202020 20202020     CLI             
 802c72c:	20202020 20202020 27202020 4320273f                '?' C
 802c73c:	616d6d6f 5320646e 616d6d75 000a7972     ommand Summary..
 802c74c:	746e450a 6e697265 694d2067 20726578     .Entering Mixer 
 802c75c:	2e494c43 0a2e2e2e 0000000a 6578694d     CLI.........Mixe
 802c76c:	4c432072 3e2d2049 00000020 78694d0a     r CLI -> ....Mix
 802c77c:	43207265 69666e6f 61727567 6e6f6974     er Configuration
 802c78c:	2020203a 20202020 20202020 00000020     :            ...
 802c79c:	4558494d 50595452 49472045 4c41424d     MIXERTYPE GIMBAL
 802c7ac:	0000000a 4558494d 50595452 4c462045     ....MIXERTYPE FL
 802c7bc:	474e4959 4e495720 00000a47 4558494d     YING WING...MIXE
 802c7cc:	50595452 49422045 54504f43 000a5245     RTYPE BICOPTER..
 802c7dc:	4558494d 50595452 52542045 504f4349     MIXERTYPE TRICOP
 802c7ec:	0a524554 00000000 4558494d 50595452     TER.....MIXERTYP
 802c7fc:	55512045 50204441 0a53554c 00000000     E QUAD PLUS.....
 802c80c:	4558494d 50595452 55512045 58204441     MIXERTYPE QUAD X
 802c81c:	0000000a 544c554d 50595449 54562045     ....MULTITYPE VT
 802c82c:	204c4941 43204f4e 0a504d4f 00000000     AIL NO COMP.....
 802c83c:	544c554d 50595449 54562045 204c4941     MULTITYPE VTAIL 
 802c84c:	4f432059 000a504d 544c554d 50595449     Y COMP..MULTITYP
 802c85c:	54562045 204c4941 43205952 0a504d4f     E VTAIL RY COMP.
 802c86c:	00000000 544c554d 50595449 54562045     ....MULTITYPE VT
 802c87c:	204c4941 43205950 0a504d4f 00000000     AIL PY COMP.....
 802c88c:	544c554d 50595449 54562045 204c4941     MULTITYPE VTAIL 
 802c89c:	43205052 0a504d4f 00000000 544c554d     RP COMP.....MULT
 802c8ac:	50595449 54562045 204c4941 20595052     ITYPE VTAIL RPY 
 802c8bc:	504d4f43 0000000a 4558494d 50595452     COMP....MIXERTYP
 802c8cc:	34592045 0000000a 4558494d 50595452     E Y4....MIXERTYP
 802c8dc:	45482045 4c502058 000a5355 4558494d     E HEX PLUS..MIXE
 802c8ec:	50595452 45482045 0a582058 00000000     RTYPE HEX X.....
 802c8fc:	4558494d 50595452 36592045 0000000a     MIXERTYPE Y6....
 802c90c:	4558494d 50595452 4c462045 4f205441     MIXERTYPE FLAT O
 802c91c:	204f5443 53554c50 0000000a 4558494d     CTO PLUS....MIXE
 802c92c:	50595452 4c462045 4f205441 204f5443     RTYPE FLAT OCTO 
 802c93c:	00000a58 4558494d 50595452 4f432045     X...MIXERTYPE CO
 802c94c:	41495841 434f204c 50204f54 0a53554c     AXIAL OCTO PLUS.
 802c95c:	00000000 4558494d 50595452 4f432045     ....MIXERTYPE CO
 802c96c:	41495841 434f204c 58204f54 0000000a     AXIAL OCTO X....
 802c97c:	4558494d 50595452 52462045 4d204545     MIXERTYPE FREE M
 802c98c:	000a5849 626d754e 6f207265 6f4d2066     IX..Number of Mo
 802c99c:	73726f74 2020203a 20202020 20202020     tors:           
 802c9ac:	20202020 00000000 20435345 204d5750         ....ESC PWM 
 802c9bc:	65746152 2020203a 20202020 20202020     Rate:           
 802c9cc:	20202020 20202020 00000000 76726553             ....Serv
 802c9dc:	5750206f 6152204d 203a6574 20202020     o PWM Rate:     
 802c9ec:	20202020 20202020 20202020 00000000                 ....
 802c9fc:	6f436942 72657470 66654c20 65532074     BiCopter Left Se
 802ca0c:	206f7672 3a6e694d 20202020 20202020     rvo Min:        
 802ca1c:	00000000 6f436942 72657470 66654c20     ....BiCopter Lef
 802ca2c:	65532074 206f7672 3a64694d 20202020     t Servo Mid:    
 802ca3c:	20202020 00000000 6f436942 72657470         ....BiCopter
 802ca4c:	66654c20 65532074 206f7672 3a78614d      Left Servo Max:
 802ca5c:	20202020 20202020 00000000 6f436942             ....BiCo
 802ca6c:	72657470 67695220 53207468 6f767265     pter Right Servo
 802ca7c:	6e694d20 2020203a 20202020 00000000      Min:       ....
 802ca8c:	6f436942 72657470 67695220 53207468     BiCopter Right S
 802ca9c:	6f767265 64694d20 2020203a 20202020     ervo Mid:       
 802caac:	00000000 6f436942 72657470 67695220     ....BiCopter Rig
 802cabc:	53207468 6f767265 78614d20 2020203a     ht Servo Max:   
 802cacc:	20202020 00000000 6c6c6f52 72694420         ....Roll Dir
 802cadc:	69746365 4c206e6f 3a746665 20202020     ection Left:    
 802caec:	20202020 20202020 00000000 6c6c6f52             ....Roll
 802cafc:	72694420 69746365 52206e6f 74686769      Direction Right
 802cb0c:	2020203a 20202020 20202020 00000000     :           ....
 802cb1c:	63746950 69442068 74636572 206e6f69     Pitch Direction 
 802cb2c:	7466654c 2020203a 20202020 20202020     Left:           
 802cb3c:	00000000 63746950 69442068 74636572     ....Pitch Direct
 802cb4c:	206e6f69 68676952 20203a74 20202020     ion Right:      
 802cb5c:	20202020 00000000 676e6957 66654c20         ....Wing Lef
 802cb6c:	694d2074 756d696e 20203a6d 20202020     t Minimum:      
 802cb7c:	20202020 20202020 00000000 676e6957             ....Wing
 802cb8c:	66654c20 614d2074 756d6978 20203a6d      Left Maximum:  
 802cb9c:	20202020 20202020 20202020 00000000                 ....
 802cbac:	676e6957 67695220 4d207468 6d696e69     Wing Right Minim
 802cbbc:	203a6d75 20202020 20202020 20202020     um:             
 802cbcc:	00000000 676e6957 67695220 4d207468     ....Wing Right M
 802cbdc:	6d697861 203a6d75 20202020 20202020     aximum:         
 802cbec:	20202020 00000000 626d6947 52206c61         ....Gimbal R
 802cbfc:	206c6c6f 76726553 694d206f 20203a6e     oll Servo Min:  
 802cc0c:	20202020 20202020 00000000 626d6947             ....Gimb
 802cc1c:	52206c61 206c6c6f 76726553 694d206f     al Roll Servo Mi
 802cc2c:	20203a64 20202020 20202020 00000000     d:          ....
 802cc3c:	626d6947 52206c61 206c6c6f 76726553     Gimbal Roll Serv
 802cc4c:	614d206f 20203a78 20202020 20202020     o Max:          
 802cc5c:	00000000 626d6947 52206c61 206c6c6f     ....Gimbal Roll 
 802cc6c:	76726553 6147206f 203a6e69 20202020     Servo Gain:     
 802cc7c:	00202020 626d6947 50206c61 68637469        .Gimbal Pitch
 802cc8c:	72655320 4d206f76 203a6e69 20202020      Servo Min:     
 802cc9c:	20202020 00000000 626d6947 50206c61         ....Gimbal P
 802ccac:	68637469 72655320 4d206f76 203a6469     itch Servo Mid: 
 802ccbc:	20202020 20202020 00000000 626d6947             ....Gimb
 802cccc:	50206c61 68637469 72655320 4d206f76     al Pitch Servo M
 802ccdc:	203a7861 20202020 20202020 00000000     ax:         ....
 802ccec:	626d6947 50206c61 68637469 72655320     Gimbal Pitch Ser
 802ccfc:	47206f76 3a6e6961 20202020 00202020     vo Gain:       .
 802cd0c:	43697254 6574706f 61592072 65532077     TriCopter Yaw Se
 802cd1c:	206f7672 3a6e694d 20202020 20202020     rvo Min:        
 802cd2c:	00000000 43697254 6574706f 61592072     ....TriCopter Ya
 802cd3c:	65532077 206f7672 3a64694d 20202020     w Servo Mid:    
 802cd4c:	20202020 00000000 43697254 6574706f         ....TriCopte
 802cd5c:	61592072 65532077 206f7672 3a78614d     r Yaw Servo Max:
 802cd6c:	20202020 20202020 00000000 61542056             ....V Ta
 802cd7c:	41206c69 656c676e 20202020 20202020     il Angle        
 802cd8c:	20202020 20202020 00202020 20776159                .Yaw 
 802cd9c:	65726944 6f697463 20203a6e 20202020     Direction:      
 802cdac:	20202020 20202020 20202020 00000000                 ....
 802cdbc:	00000a0a 6d754e0a 20726562 4620666f     .....Number of F
 802cdcc:	20656572 6578694d 6f4d2072 73726f74     ree Mixer Motors
 802cddc:	0020203a 20202020 20202020 6c6f5220     :  .         Rol
 802cdec:	2020206c 74695020 20206863 77615920     l    Pitch   Yaw
 802cdfc:	0000000a 6f746f4d 00000072 00002020     ....Motor...  ..
 802ce0c:	6978450a 676e6974 78694d20 43207265     .Exiting Mixer C
 802ce1c:	2e2e494c 0a0a2e2e 00000000 20276127     LI..........'a' 
 802ce2c:	6578694d 6f432072 6769666e 74617275     Mixer Configurat
 802ce3c:	206e6f69 61746144 20202020 20202020     ion Data        
 802ce4c:	20202020 27202020 53202741 4d207465            'A' Set M
 802ce5c:	72657869 6e6f4320 75676966 69746172     ixer Configurati
 802ce6c:	20206e6f 20202020 20202020 20202020     on              
 802ce7c:	74203141 20757268 202c3132 20656573     A1 thru 21, see 
 802ce8c:	32337161 73756c50 000a682e 20276227     aq32Plus.h..'b' 
 802ce9c:	65657246 78694d20 43207265 69666e6f     Free Mixer Confi
 802ceac:	61727567 6e6f6974 20202020 20202020     guration        
 802cebc:	20202020 27202020 53202742 50207465            'B' Set P
 802cecc:	52204d57 73657461 20202020 20202020     WM Rates        
 802cedc:	20202020 20202020 20202020 20202020                     
 802ceec:	43534542 7265533b 000a6f76 20202020     BESC;Servo..    
 802cefc:	20202020 20202020 20202020 20202020                     
 802cf0c:	20202020 20202020 20202020 20202020                     
 802cf1c:	20202020 27202020 53202743 42207465            'C' Set B
 802cf2c:	706f4369 20726574 7466654c 72655320     iCopter Left Ser
 802cf3c:	50206f76 6d617261 72657465 20202073     vo Parameters   
 802cf4c:	6e694d43 64694d3b 78614d3b 0000000a     CMin;Mid;Max....
 802cf5c:	20202020 20202020 20202020 20202020                     
 802cf6c:	20202020 20202020 20202020 20202020                     
 802cf7c:	20202020 20202020 27202020 53202744                'D' S
 802cf8c:	42207465 706f4369 20726574 68676952     et BiCopter Righ
 802cf9c:	65532074 206f7672 61726150 6574656d     t Servo Paramete
 802cfac:	20207372 6e694d44 64694d3b 78614d3b     rs  DMin;Mid;Max
 802cfbc:	0000000a 20202020 20202020 20202020     ....            
 802cfcc:	20202020 20202020 20202020 20202020                     
 802cfdc:	20202020 20202020 20202020 27202020                    '
 802cfec:	53202745 46207465 6e69796c 69572067     E' Set Flying Wi
 802cffc:	5320676e 6f767265 72694420 69746365     ng Servo Directi
 802d00c:	20736e6f 20202020 6c6f5245 66654c6c     ons     ERollLef
 802d01c:	6f523b74 69526c6c 3b746867 63746950     t;RollRight;Pitc
 802d02c:	66654c68 69503b74 52686374 74686769     hLeft;PitchRight
 802d03c:	0000000a 20202020 20202020 20202020     ....            
 802d04c:	20202020 20202020 20202020 20202020                     
 802d05c:	20202020 20202020 20202020 27202020                    '
 802d06c:	53202746 46207465 6e69796c 69572067     F' Set Flying Wi
 802d07c:	5320676e 6f767265 6d694c20 20737469     ng Servo Limits 
 802d08c:	20202020 20202020 66654c46 6e694d74             FLeftMin
 802d09c:	66654c3b 78614d74 6769523b 694d7468     ;LeftMax;RightMi
 802d0ac:	69523b6e 4d746867 000a7861 20202020     n;RightMax..    
 802d0bc:	20202020 20202020 20202020 20202020                     
 802d0cc:	20202020 20202020 20202020 20202020                     
 802d0dc:	20202020 27202020 53202747 4e207465            'G' Set N
 802d0ec:	65626d75 666f2072 65724620 78694d65     umber of FreeMix
 802d0fc:	746f4d20 2073726f 20202020 20202020      Motors         
 802d10c:	6d754e47 0a726562 00000000 20202020     GNumber.....    
 802d11c:	20202020 20202020 20202020 20202020                     
 802d12c:	20202020 20202020 20202020 20202020                     
 802d13c:	20202020 27202020 53202748 46207465            'H' Set F
 802d14c:	4d656572 4d207869 69727461 6c452078     reeMix Matrix El
 802d15c:	6e656d65 20202074 20202020 20202020     ement           
 802d16c:	776f5248 6c6f433b 3b6e6d75 6d656c45     HRow;Column;Elem
 802d17c:	0a746e65 00000000 20202020 20202020     ent.....        
 802d18c:	20202020 20202020 20202020 20202020                     
 802d19c:	20202020 20202020 20202020 20202020                     
 802d1ac:	27202020 53202749 47207465 61626d69        'I' Set Gimba
 802d1bc:	6f52206c 53206c6c 6f767265 72615020     l Roll Servo Par
 802d1cc:	74656d61 20737265 20202020 6e694d49     ameters     IMin
 802d1dc:	64694d3b 78614d3b 6961473b 00000a6e     ;Mid;Max;Gain...
 802d1ec:	20202020 20202020 20202020 20202020                     
 802d1fc:	20202020 20202020 20202020 20202020                     
 802d20c:	20202020 20202020 27202020 5320274a                'J' S
 802d21c:	47207465 61626d69 6950206c 20686374     et Gimbal Pitch 
 802d22c:	76726553 6150206f 656d6172 73726574     Servo Parameters
 802d23c:	20202020 6e694d4a 64694d3b 78614d3b         JMin;Mid;Max
 802d24c:	6961473b 00000a6e 20202020 20202020     ;Gain...        
 802d25c:	20202020 20202020 20202020 20202020                     
 802d26c:	20202020 20202020 20202020 20202020                     
 802d27c:	27202020 5320274b 54207465 6f436972        'K' Set TriCo
 802d28c:	72657470 72655320 50206f76 6d617261     pter Servo Param
 802d29c:	72657465 20202073 20202020 6e694d4b     eters       KMin
 802d2ac:	64694d3b 78614d3b 0000000a 20202020     ;Mid;Max....    
 802d2bc:	20202020 20202020 20202020 20202020                     
 802d2cc:	20202020 20202020 20202020 20202020                     
 802d2dc:	20202020 27202020 5320274c 56207465            'L' Set V
 802d2ec:	69615420 6e41206c 20656c67 20202020      Tail Angle     
 802d2fc:	20202020 20202020 20202020 20202020                     
 802d30c:	676e414c 000a656c 20202020 20202020     LAngle..        
 802d31c:	20202020 20202020 20202020 20202020                     
 802d32c:	20202020 20202020 20202020 20202020                     
 802d33c:	27202020 5320274d 59207465 44207761        'M' Set Yaw D
 802d34c:	63657269 6e6f6974 20202020 20202020     irection        
 802d35c:	20202020 20202020 20202020 6f20314d                 M1 o
 802d36c:	2d4d2072 00000a31 20202020 20202020     r M-1...        
 802d37c:	20202020 20202020 20202020 20202020                     
 802d38c:	20202020 20202020 20202020 20202020                     
 802d39c:	27202020 57202757 65746972 50454520        'W' Write EEP
 802d3ac:	204d4f52 61726150 6574656d 000a7372     ROM Parameters..
 802d3bc:	746e450a 6e697265 65522067 76696563     .Entering Receiv
 802d3cc:	43207265 2e2e494c 0a0a2e2e 00000000     er CLI..........
 802d3dc:	65636552 72657669 494c4320 203e2d20     Receiver CLI -> 
 802d3ec:	00000000 6365520a 65766965 79542072     .....Receiver Ty
 802d3fc:	203a6570 20202020 20202020 20202020     pe:             
 802d40c:	20202020 00000020 61726150 6c656c6c          ...Parallel
 802d41c:	0000000a 69726553 000a6c61 6b657053     ....Serial..Spek
 802d42c:	6d757274 0000000a 72727543 20746e65     trum....Current 
 802d43c:	43204352 6e6e6168 41206c65 67697373     RC Channel Assig
 802d44c:	6e656d6e 20203a74 00000000 6b657053     nment:  ....Spek
 802d45c:	6d757274 73655220 74756c6f 3a6e6f69     trum Resolution:
 802d46c:	20202020 20202020 20202020 00000000                 ....
 802d47c:	42203131 4d207469 0a65646f 00000000     11 Bit Mode.....
 802d48c:	42203031 4d207469 0a65646f 00000000     10 Bit Mode.....
 802d49c:	626d754e 6f207265 70532066 72746b65     Number of Spektr
 802d4ac:	43206d75 6e6e6168 3a736c65 20202020     um Channels:    
 802d4bc:	00000000 000a6425 2064694d 6d6d6f43     ....%d..Mid Comm
 802d4cc:	3a646e61 20202020 20202020 20202020     and:            
 802d4dc:	20202020 20202020 00000000 206e694d             ....Min 
 802d4ec:	63656843 20203a6b 20202020 20202020     Check:          
 802d4fc:	20202020 20202020 20202020 00000000                 ....
 802d50c:	2078614d 63656843 20203a6b 20202020     Max Check:      
 802d51c:	20202020 20202020 20202020 20202020                     
 802d52c:	00000000 206e694d 6f726854 656c7474     ....Min Throttle
 802d53c:	2020203a 20202020 20202020 20202020     :               
 802d54c:	20202020 00000000 2078614d 746f6854         ....Max Thot
 802d55c:	3a656c74 20202020 20202020 20202020     tle:            
 802d56c:	20202020 20202020 00000000 0a0a6425             ....%d..
 802d57c:	00000000 2078614d 65746152 6d6f4320     ....Max Rate Com
 802d58c:	646e616d 2020203a 20202020 20202020     mand:           
 802d59c:	20202020 00000000 322e3625 50442066         ....%6.2f DP
 802d5ac:	00000a53 2078614d 69747441 65647574     S...Max Attitude
 802d5bc:	6d6f4320 646e616d 2020203a 20202020      Command:       
 802d5cc:	20202020 00000000 322e3625 65442066         ....%6.2f De
 802d5dc:	65657267 000a0a73 6978450a 676e6974     grees....Exiting
 802d5ec:	63655220 65766965 4c432072 2e2e2e49      Receiver CLI...
 802d5fc:	000a0a2e 6365520a 65766965 79542072     .....Receiver Ty
 802d60c:	43206570 676e6168 2e2e6465 000a2e2e     pe Changed......
 802d61c:	7379530a 206d6574 65736552 6e697474     .System Resettin
 802d62c:	2e2e2e67 00000a2e 20276127 65636552     g.......'a' Rece
 802d63c:	72657669 6e6f4320 75676966 69746172     iver Configurati
 802d64c:	44206e6f 20617461 20202020 20202020     on Data         
 802d65c:	27202020 53202741 52207465 6e492058        'A' Set RX In
 802d66c:	20747570 65707954 20202020 20202020     put Type        
 802d67c:	20202020 20202020 20202020 202c5841                 AX, 
 802d68c:	61503d31 6c6c6172 202c6c65 65533d32     1=Parallel, 2=Se
 802d69c:	6c616972 3d33202c 6b657053 6d757274     rial, 3=Spektrum
 802d6ac:	0000000a 20276227 20746553 6978614d     ....'b' Set Maxi
 802d6bc:	206d756d 65746152 6d6f4320 646e616d     mum Rate Command
 802d6cc:	20202020 20202020 20202020 27202020                    '
 802d6dc:	53202742 52207465 6f432043 6f72746e     B' Set RC Contro
 802d6ec:	724f206c 20726564 20202020 20202020     l Order         
 802d6fc:	20202020 20202020 45415442 33323152             BTAER123
 802d70c:	00000a34 20276327 20746553 6978614d     4...'c' Set Maxi
 802d71c:	206d756d 69747441 65647574 6d6f4320     mum Attitude Com
 802d72c:	646e616d 20202020 20202020 27202020     mand           '
 802d73c:	53202743 53207465 746b6570 206d7572     C' Set Spektrum 
 802d74c:	6f736552 6974756c 20206e6f 20202020     Resolution      
 802d75c:	20202020 20202020 6f203043 31432072             C0 or C1
 802d76c:	0000000a 20202020 20202020 20202020     ....            
 802d77c:	20202020 20202020 20202020 20202020                     
 802d78c:	20202020 20202020 20202020 27202020                    '
 802d79c:	53202744 4e207465 65626d75 666f2072     D' Set Number of
 802d7ac:	65705320 7572746b 6843206d 656e6e61      Spektrum Channe
 802d7bc:	2020736c 20202020 74203644 20757268     ls      D6 thru 
 802d7cc:	0a323144 00000000 20202020 20202020     D12.....        
 802d7dc:	20202020 20202020 20202020 20202020                     
 802d7ec:	20202020 20202020 20202020 20202020                     
 802d7fc:	27202020 53202745 52207465 6f432043        'E' Set RC Co
 802d80c:	6f72746e 6f50206c 73746e69 20202020     ntrol Points    
 802d81c:	20202020 20202020 20202020 64696d45                 Emid
 802d82c:	3b646d43 436e696d 6d3b6b68 68437861     Cmd;minChk;maxCh
 802d83c:	696d3b6b 7268546e 6d3b746f 68547861     k;minThrot;maxTh
 802d84c:	0a746f72 00000000 20277827 74697845     rot.....'x' Exit
 802d85c:	63655220 65766965 4c432072 20202049      Receiver CLI   
 802d86c:	20202020 20202020 20202020 20202020                     
 802d87c:	27202020 4320273f 616d6d6f 5320646e        '?' Command S
 802d88c:	616d6d75 000a7972 746e450a 6e697265     ummary...Enterin
 802d89c:	65532067 726f736e 494c4320 2e2e2e2e     g Sensor CLI....
 802d8ac:	00000a0a 736e6553 4320726f 2d20494c     ....Sensor CLI -
 802d8bc:	0000203e 65636341 6e4f206c 3a472065     > ..Accel One G:
 802d8cc:	20202020 20202020 20202020 00202020                    .
 802d8dc:	342e3925 00000a66 2067614d 73616942     %9.4f...Mag Bias
 802d8ec:	2020203a 20202020 20202020 20202020     :               
 802d8fc:	00202020 342e3925 00202c66 65636341        .%9.4f, .Acce
 802d90c:	7543206c 66666f74 2020203a 20202020     l Cutoff:       
 802d91c:	20202020 00202020 6341704b 4d282063            .KpAcc (M
 802d92c:	29475241 2020203a 20202020 20202020     ARG):           
 802d93c:	00202020 6341694b 4d282063 29475241        .KiAcc (MARG)
 802d94c:	2020203a 20202020 20202020 00202020     :              .
 802d95c:	614d704b 4d282067 29475241 2020203a     KpMag (MARG):   
 802d96c:	20202020 20202020 00202020 614d694b                .KiMa
 802d97c:	4d282067 29475241 2020203a 20202020     g (MARG):       
 802d98c:	20202020 00202020 746f6468 74736520            .hdot est
 802d99c:	6520682f 43207473 20706d6f 206c6946     /h est Comp Fil 
 802d9ac:	00203a41 746f6468 74736520 6520682f     A: .hdot est/h e
 802d9bc:	43207473 20706d6f 206c6946 00203a42     st Comp Fil B: .
 802d9cc:	342e3925 000a0a66 6978450a 676e6974     %9.4f....Exiting
 802d9dc:	6e655320 20726f73 2e494c43 0a2e2e2e      Sensor CLI.....
 802d9ec:	0000000a 20276127 70736944 2079616c     ....'a' Display 
 802d9fc:	736e6553 4420726f 0a617461 00000000     Sensor Data.....
 802da0c:	20276227 65636341 6143206c 7262696c     'b' Accel Calibr
 802da1c:	6f697461 2020206e 20202020 20202020     ation           
 802da2c:	20202020 20202020 27202020 53202742                'B' S
 802da3c:	41207465 6c656363 74754320 2066666f     et Accel Cutoff 
 802da4c:	20202020 20202020 20202020 20202020                     
 802da5c:	20202020 63634142 75436c65 66666f74         BAccelCutoff
 802da6c:	0000000a 20276327 6e67614d 6d6f7465     ....'c' Magnetom
 802da7c:	72657465 6c614320 61726269 6e6f6974     eter Calibration
 802da8c:	20202020 20202020 20202020 27202020                    '
 802da9c:	53202743 6b207465 63634170 41696b2f     C' Set kpAcc/kiA
 802daac:	20206363 20202020 20202020 20202020     cc              
 802dabc:	20202020 20202020 41704b43 4b3b6363             CKpAcc;K
 802dacc:	63634169 0000000a 20202020 20202020     iAcc....        
 802dadc:	20202020 20202020 20202020 20202020                     
 802daec:	20202020 20202020 20202020 20202020                     
 802dafc:	27202020 53202744 6b207465 67614d70        'D' Set kpMag
 802db0c:	4d696b2f 20206761 20202020 20202020     /kiMag          
 802db1c:	20202020 20202020 20202020 4d704b44                 DKpM
 802db2c:	4b3b6761 67614d69 0000000a 20202020     ag;KiMag....    
 802db3c:	20202020 20202020 20202020 20202020                     
 802db4c:	20202020 20202020 20202020 20202020                     
 802db5c:	20202020 27202020 53202745 68207465            'E' Set h
 802db6c:	746f6420 74736520 6520682f 43207473      dot est/h est C
 802db7c:	20706d6f 746c6946 41207265 2020422f     omp Filter A/B  
 802db8c:	423b4145 0000000a 746e450a 6e697265     EA;B.....Enterin
 802db9c:	50472067 4c432053 2e2e2e49 000a0a2e     g GPS CLI.......
 802dbac:	20535047 20494c43 00203e2d 47206f4e     GPS CLI -> .No G
 802dbbc:	49205350 6174736e 64656c6c 2e2e2e2e     PS Installed....
 802dbcc:	00000a0a 6964654d 6b655461 32333320     ....MediaTek 332
 802dbdc:	50472039 6e692053 6c617473 2c64656c     9 GPS installed,
 802dbec:	6e694220 20797261 65646f4d 2e2e2e2e      Binary Mode....
 802dbfc:	00000a0a 6964654d 6b655461 32333320     ....MediaTek 332
 802dc0c:	50472039 6e492053 6c617473 2c64656c     9 GPS Installed,
 802dc1c:	454d4e20 6f4d2041 2e2e6564 0a0a2e2e      NMEA Mode......
 802dc2c:	00000000 4f4c4255 50472058 6e492053     ....UBLOX GPS In
 802dc3c:	6c617473 2c64656c 6e694220 20797261     stalled, Binary 
 802dc4c:	65646f4d 2e2e2e2e 00000a0a 6978450a     Mode.........Exi
 802dc5c:	676e6974 53504720 494c4320 2e2e2e2e     ting GPS CLI....
 802dc6c:	00000a0a 20276127 70736944 2079616c     ....'a' Display 
 802dc7c:	20535047 74736e49 616c6c61 6e6f6974     GPS Installation
 802dc8c:	74614420 20202061 20202020 27202020      Data          '
 802dc9c:	53202741 47207465 54205350 20657079     A' Set GPS Type 
 802dcac:	4e206f74 5047206f 00000a53 20202020     to No GPS...    
 802dcbc:	20202020 20202020 20202020 20202020                     
 802dccc:	20202020 20202020 20202020 20202020                     
 802dcdc:	20202020 27202020 53202742 47207465            'B' Set G
 802dcec:	54205350 20657079 4d206f74 61696465     PS Type to Media
 802dcfc:	206b6554 39323333 6e694220 0a797261     Tek 3329 Binary.
 802dd0c:	00000000 20202020 20202020 20202020     ....            
 802dd1c:	20202020 20202020 20202020 20202020                     
 802dd2c:	20202020 20202020 20202020 27202020                    '
 802dd3c:	53202743 47207465 54205350 20657079     C' Set GPS Type 
 802dd4c:	4d206f74 61696465 206b6554 39323333     to MediaTek 3329
 802dd5c:	454d4e20 00000a41 20202020 20202020      NMEA...        
 802dd6c:	20202020 20202020 20202020 20202020                     
 802dd7c:	20202020 20202020 20202020 20202020                     
 802dd8c:	27202020 53202744 47207465 54205350        'D' Set GPS T
 802dd9c:	20657079 55206f74 584f4c42 0000000a     ype to UBLOX....
 802ddac:	20277827 74697845 53504720 494c4320     'x' Exit GPS CLI
 802ddbc:	20202020 20202020 20202020 20202020                     
 802ddcc:	20202020 20202020 27202020 4320273f                '?' C
 802dddc:	616d6d6f 5320646e 616d6d75 000a7972     ommand Summary..

0802ddec <rcChannelLetters>:
 802ddec:	54524541 34333231 52454154 34333231     AERT1234TAER1234
 802ddfc:	00000000 0000002c 0000000a 0000000a     ....,...........
 802de0c:	6c6c6f52 74615220 49502065 20203a44     Roll Rate PID:  
 802de1c:	00000000 342e3825 00202c66 6f727245     ....%8.4f, .Erro
 802de2c:	00000a72 74617453 00000a65 63746950     r...State...Pitc
 802de3c:	61522068 50206574 203a4449 00000000     h Rate PID: ....
 802de4c:	20776159 65746152 44495020 2020203a     Yaw Rate PID:   
 802de5c:	00000000 6c6c6f52 74744120 64757469     ....Roll Attitud
 802de6c:	49502065 20203a44 00000000 63746950     e PID:  ....Pitc
 802de7c:	74412068 75746974 50206564 203a4449     h Attitude PID: 
 802de8c:	00000000 64616548 20676e69 3a444950     ....Heading PID:
 802de9c:	20202020 20202020 00000000 746f446e             ....nDot
 802deac:	44495020 0020203a 746f4465 44495020      PID:  .eDot PID
 802debc:	0020203a 746f4468 44495020 0020203a     :  .hDot PID:  .
 802decc:	4950206e 20203a44 00000000 49502065     n PID:  ....e PI
 802dedc:	20203a44 00000000 49502068 20203a44     D:  ....h PID:  
 802deec:	00000000 6c6f520a 6152206c 50206574     .....Roll Rate P
 802defc:	52204449 69656365 2e646576 0a2e2e2e     ID Received.....
 802df0c:	00000000 7469500a 52206863 20657461     .....Pitch Rate 
 802df1c:	20444950 65636552 64657669 2e2e2e2e     PID Received....
 802df2c:	0000000a 7761590a 74615220 49502065     .....Yaw Rate PI
 802df3c:	65522044 76696563 2e2e6465 000a2e2e     D Received......
 802df4c:	6c6f520a 7441206c 75746974 50206564     .Roll Attitude P
 802df5c:	52204449 69656365 2e646576 0a2e2e2e     ID Received.....
 802df6c:	00000000 7469500a 41206863 74697474     .....Pitch Attit
 802df7c:	20656475 20444950 65636552 64657669     ude PID Received
 802df8c:	2e2e2e2e 0000000a 6165480a 676e6964     .........Heading
 802df9c:	44495020 63655220 65766965 2e2e2e64      PID Received...
 802dfac:	00000a2e 6f446e0a 49502074 65522044     .....nDot PID Re
 802dfbc:	76696563 2e2e6465 000a2e2e 6f44650a     ceived.......eDo
 802dfcc:	49502074 65522044 76696563 2e2e6465     t PID Received..
 802dfdc:	000a2e2e 6f44680a 49502074 65522044     .....hDot PID Re
 802dfec:	76696563 2e2e6465 000a2e2e 50206e0a     ceived.......n P
 802dffc:	52204449 69656365 2e646576 0a2e2e2e     ID Received.....
 802e00c:	00000000 5020650a 52204449 69656365     .....e PID Recei
 802e01c:	2e646576 0a2e2e2e 00000000 5020680a     ved..........h P
 802e02c:	52204449 69656365 2e646576 0a2e2e2e     ID Received.....
 802e03c:	00000000 6972570a 676e6974 50454520     .....Writing EEP
 802e04c:	204d4f52 61726150 6574656d 2e2e7372     ROM Parameters..
 802e05c:	000a2e2e 20276127 65746152 44495020     ....'a' Rate PID
 802e06c:	20202073 20202020 20202020 20202020     s               
 802e07c:	20202020 20202020 20202020 27202020                    '
 802e08c:	53202741 52207465 206c6c6f 65746152     A' Set Roll Rate
 802e09c:	44495020 74614420 20202061 503b4241      PID Data   AB;P
 802e0ac:	443b493b 6e69773b 47707564 64726175     ;I;D;windupGuard
 802e0bc:	7245643b 43726f72 0a636c61 00000000     ;dErrorCalc.....
 802e0cc:	20276227 69747441 65647574 44495020     'b' Attitude PID
 802e0dc:	20202073 20202020 20202020 20202020     s               
 802e0ec:	20202020 20202020 27202020 53202742                'B' S
 802e0fc:	50207465 68637469 74615220 49502065     et Pitch Rate PI
 802e10c:	61442044 20206174 503b4242 443b493b     D Data  BB;P;I;D
 802e11c:	6e69773b 47707564 64726175 7245643b     ;windupGuard;dEr
 802e12c:	43726f72 0a636c61 00000000 20276327     rorCalc.....'c' 
 802e13c:	6f6c6556 79746963 44495020 20202073     Velocity PIDs   
 802e14c:	20202020 20202020 20202020 20202020                     
 802e15c:	20202020 27202020 53202743 59207465            'C' Set Y
 802e16c:	52207761 20657461 20444950 61746144     aw Rate PID Data
 802e17c:	20202020 503b4243 443b493b 6e69773b         CB;P;I;D;win
 802e18c:	47707564 64726175 7245643b 43726f72     dupGuard;dErrorC
 802e19c:	0a636c61 00000000 20276427 69736f50     alc.....'d' Posi
 802e1ac:	6e6f6974 44495020 20202073 20202020     tion PIDs       
 802e1bc:	20202020 20202020 20202020 20202020                     
 802e1cc:	27202020 53202744 52207465 206c6c6f        'D' Set Roll 
 802e1dc:	20747441 20444950 61746144 20202020     Att PID Data    
 802e1ec:	503b4244 443b493b 6e69773b 47707564     DB;P;I;D;windupG
 802e1fc:	64726175 7245643b 43726f72 0a636c61     uard;dErrorCalc.
 802e20c:	00000000 20277827 6d726554 74616e69     ....'x' Terminat
 802e21c:	65532065 6c616972 6d6f4320 696e756d     e Serial Communi
 802e22c:	69746163 20206e6f 20202020 27202020     cation         '
 802e23c:	53202745 50207465 68637469 74744120     E' Set Pitch Att
 802e24c:	44495020 74614420 20202061 503b4245      PID Data   EB;P
 802e25c:	443b493b 6e69773b 47707564 64726175     ;I;D;windupGuard
 802e26c:	7245643b 43726f72 0a636c61 00000000     ;dErrorCalc.....
 802e27c:	20273127 68676948 65705320 54206465     '1' High Speed T
 802e28c:	6d656c65 79727465 45203120 6c62616e     elemetry 1 Enabl
 802e29c:	20202065 20202020 27202020 53202746     e          'F' S
 802e2ac:	48207465 48206764 20646c6f 20444950     et Hdg Hold PID 
 802e2bc:	61746144 20202020 503b4246 443b493b     Data    FB;P;I;D
 802e2cc:	6e69773b 47707564 64726175 7245643b     ;windupGuard;dEr
 802e2dc:	43726f72 0a636c61 00000000 20273227     rorCalc.....'2' 
 802e2ec:	68676948 65705320 54206465 6d656c65     High Speed Telem
 802e2fc:	79727465 45203220 6c62616e 20202065     etry 2 Enable   
 802e30c:	20202020 27202020 53202747 6e207465            'G' Set n
 802e31c:	20746f44 20444950 61746144 20202020     Dot PID Data    
 802e32c:	20202020 503b4247 443b493b 6e69773b         GB;P;I;D;win
 802e33c:	47707564 64726175 7245643b 43726f72     dupGuard;dErrorC
 802e34c:	0a636c61 00000000 20273327 68676948     alc.....'3' High
 802e35c:	65705320 54206465 6d656c65 79727465      Speed Telemetry
 802e36c:	45203320 6c62616e 20202065 20202020      3 Enable       
 802e37c:	27202020 53202748 65207465 20746f44        'H' Set eDot 
 802e38c:	20444950 61746144 20202020 20202020     PID Data        
 802e39c:	503b4248 443b493b 6e69773b 47707564     HB;P;I;D;windupG
 802e3ac:	64726175 7245643b 43726f72 0a636c61     uard;dErrorCalc.
 802e3bc:	00000000 20273427 68676948 65705320     ....'4' High Spe
 802e3cc:	54206465 6d656c65 79727465 45203420     ed Telemetry 4 E
 802e3dc:	6c62616e 20202065 20202020 27202020     nable          '
 802e3ec:	53202749 68207465 20746f44 20444950     I' Set hDot PID 
 802e3fc:	61746144 20202020 20202020 503b4249     Data        IB;P
 802e40c:	443b493b 6e69773b 47707564 64726175     ;I;D;windupGuard
 802e41c:	7245643b 43726f72 0a636c61 00000000     ;dErrorCalc.....
 802e42c:	20273527 68676948 65705320 54206465     '5' High Speed T
 802e43c:	6d656c65 79727465 45203520 6c62616e     elemetry 5 Enabl
 802e44c:	20202065 20202020 27202020 5320274a     e          'J' S
 802e45c:	6e207465 44495020 74614420 20202061     et n PID Data   
 802e46c:	20202020 20202020 503b424a 443b493b             JB;P;I;D
 802e47c:	6e69773b 47707564 64726175 7245643b     ;windupGuard;dEr
 802e48c:	43726f72 0a636c61 00000000 20273627     rorCalc.....'6' 
 802e49c:	68676948 65705320 54206465 6d656c65     High Speed Telem
 802e4ac:	79727465 45203620 6c62616e 20202065     etry 6 Enable   
 802e4bc:	20202020 27202020 5320274b 65207465            'K' Set e
 802e4cc:	44495020 74614420 20202061 20202020      PID Data       
 802e4dc:	20202020 503b424b 443b493b 6e69773b         KB;P;I;D;win
 802e4ec:	47707564 64726175 7245643b 43726f72     dupGuard;dErrorC
 802e4fc:	0a636c61 00000000 20273727 68676948     alc.....'7' High
 802e50c:	65705320 54206465 6d656c65 79727465      Speed Telemetry
 802e51c:	45203720 6c62616e 20202065 20202020      7 Enable       
 802e52c:	27202020 5320274c 68207465 44495020        'L' Set h PID
 802e53c:	74614420 20202061 20202020 20202020      Data           
 802e54c:	503b424c 443b493b 6e69773b 47707564     LB;P;I;D;windupG
 802e55c:	64726175 7245643b 43726f72 0a636c61     uard;dErrorCalc.
 802e56c:	00000000 20273827 68676948 65705320     ....'8' High Spe
 802e57c:	54206465 6d656c65 79727465 45203820     ed Telemetry 8 E
 802e58c:	6c62616e 20202065 20202020 27202020     nable          '
 802e59c:	57202757 65746972 50454520 204d4f52     W' Write EEPROM 
 802e5ac:	61726150 6574656d 000a7372 20273927     Parameters..'9' 
 802e5bc:	68676948 65705320 54206465 6d656c65     High Speed Telem
 802e5cc:	79727465 45203920 6c62616e 00000a65     etry 9 Enable...
 802e5dc:	20273027 68676948 65705320 54206465     '0' High Speed T
 802e5ec:	6d656c65 79727465 73694420 656c6261     elemetry Disable
 802e5fc:	20202020 20202020 27202020 4320273f                '?' C
 802e60c:	616d6d6f 5320646e 616d6d75 000a7972     ommand Summary..
 802e61c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 802e62c:	4a494847 4e4d4c4b 5251504f 56555453     GHIJKLMNOPQRSTUV
 802e63c:	5a595857 00000000 0000002e              WXYZ........

0802e648 <npio2_hw>:
 802e648:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
 802e658:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
 802e668:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
 802e678:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
 802e688:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
 802e698:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
 802e6a8:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
 802e6b8:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

0802e6c8 <two_over_pi>:
 802e6c8:	000000a2 000000f9 00000083 0000006e     ............n...
 802e6d8:	0000004e 00000044 00000015 00000029     N...D.......)...
 802e6e8:	000000fc 00000027 00000057 000000d1     ....'...W.......
 802e6f8:	000000f5 00000034 000000dd 000000c0     ....4...........
 802e708:	000000db 00000062 00000095 00000099     ....b...........
 802e718:	0000003c 00000043 00000090 00000041     <...C.......A...
 802e728:	000000fe 00000051 00000063 000000ab     ....Q...c.......
 802e738:	000000de 000000bb 000000c5 00000061     ............a...
 802e748:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
 802e758:	00000042 0000004d 000000d2 000000e0     B...M...........
 802e768:	00000006 00000049 0000002e 000000ea     ....I...........
 802e778:	00000009 000000d1 00000092 0000001c     ................
 802e788:	000000fe 0000001d 000000eb 0000001c     ................
 802e798:	000000b1 00000029 000000a7 0000003e     ....).......>...
 802e7a8:	000000e8 00000082 00000035 000000f5     ........5.......
 802e7b8:	0000002e 000000bb 00000044 00000084     ........D.......
 802e7c8:	000000e9 0000009c 00000070 00000026     ........p...&...
 802e7d8:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
 802e7e8:	00000039 00000091 000000d6 00000039     9...........9...
 802e7f8:	00000083 00000053 00000039 000000f4     ....S...9.......
 802e808:	0000009c 00000084 0000005f 0000008b     ........_.......
 802e818:	000000bd 000000f9 00000028 0000003b     ........(...;...
 802e828:	0000001f 000000f8 00000097 000000ff     ................
 802e838:	000000de 00000005 00000098 0000000f     ................
 802e848:	000000ef 0000002f 00000011 0000008b     ..../...........
 802e858:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
 802e868:	0000006d 00000036 0000007e 000000cf     m...6...~.......
 802e878:	00000027 000000cb 00000009 000000b7     '...............
 802e888:	0000004f 00000046 0000003f 00000066     O...F...?...f...
 802e898:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
 802e8a8:	00000075 00000027 000000ba 000000c7     u...'...........
 802e8b8:	000000eb 000000e5 000000f1 0000007b     ............{...
 802e8c8:	0000003d 00000007 00000039 000000f7     =.......9.......
 802e8d8:	0000008a 00000052 00000092 000000ea     ....R...........
 802e8e8:	0000006b 000000fb 0000005f 000000b1     k......._.......
 802e8f8:	0000001f 0000008d 0000005d 00000008     ........].......
 802e908:	00000056 00000003 00000030 00000046     V.......0...F...
 802e918:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
 802e928:	000000f0 000000cf 000000bc 00000020     ............ ...
 802e938:	0000009a 000000f4 00000036 0000001d     ........6.......
 802e948:	000000a9 000000e3 00000091 00000061     ............a...
 802e958:	0000005e 000000e6 0000001b 00000008     ^...............
 802e968:	00000065 00000099 00000085 0000005f     e..........._...
 802e978:	00000014 000000a0 00000068 00000040     ........h...@...
 802e988:	0000008d 000000ff 000000d8 00000080     ................
 802e998:	0000004d 00000073 00000027 00000031     M...s...'...1...
 802e9a8:	00000006 00000006 00000015 00000056     ............V...
 802e9b8:	000000ca 00000073 000000a8 000000c9     ....s...........
 802e9c8:	00000060 000000e2 0000007b 000000c0     `.......{.......
 802e9d8:	0000008c 0000006b                       ....k...

0802e9e0 <init_jk>:
 802e9e0:	00000004 00000007 00000009              ............

0802e9ec <PIo2>:
 802e9ec:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
 802e9fc:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
 802ea0c:	1fc40000 1bc60000 17440000              ..........D.

0802ea18 <atanhi>:
 802ea18:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 802ea28:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

0802ea38 <atanlo>:
 802ea38:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 802ea48:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

0802ea58 <atanhi>:
 802ea58:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?

0802ea68 <atanlo>:
 802ea68:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

0802ea78 <blanks.6603>:
 802ea78:	20202020 20202020 20202020 20202020                     

0802ea88 <zeroes.6604>:
 802ea88:	30303030 30303030 30303030 30303030     0000000000000000

0802ea98 <p05.5129>:
 802ea98:	00000005 00000019 0000007d 00000000     ........}.......

0802eaa8 <__mprec_tens>:
 802eaa8:	00000000 3ff00000 00000000 40240000     .......?......$@
 802eab8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 802eac8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 802ead8:	00000000 412e8480 00000000 416312d0     .......A......cA
 802eae8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 802eaf8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 802eb08:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 802eb18:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 802eb28:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 802eb38:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 802eb48:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 802eb58:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 802eb68:	79d99db4 44ea7843                       ...yCx.D

0802eb70 <__mprec_tinytens>:
 802eb70:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 802eb80:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 802eb90:	64ac6f43 0ac80628                       Co.d(...

0802eb98 <__mprec_bigtens>:
 802eb98:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 802eba8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 802ebb8:	7f73bf3c 75154fdd                       <.s..O.u

0802ebc0 <blanks.6547>:
 802ebc0:	20202020 20202020 20202020 20202020                     

0802ebd0 <zeroes.6548>:
 802ebd0:	30303030 30303030 30303030 30303030     0000000000000000
 802ebe0:	74727173 00000000 6e697361 00000066     sqrt....asinf...
 802ebf0:	00000043 00464e49 00666e69 004e414e     C...INF.inf.NAN.
 802ec00:	006e616e 33323130 37363534 42413938     nan.0123456789AB
 802ec10:	46454443 00000000 33323130 37363534     CDEF....01234567
 802ec20:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
 802ec30:	0000296c 00000030 69666e49 7974696e     l)..0...Infinity
 802ec40:	00000000 004e614e 49534f50 00000058     ....NaN.POSIX...
 802ec50:	0000002e                                ....

0802ec54 <_init>:
 802ec54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ec56:	bf00      	nop
 802ec58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ec5a:	bc08      	pop	{r3}
 802ec5c:	469e      	mov	lr, r3
 802ec5e:	4770      	bx	lr

0802ec60 <_fini>:
 802ec60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ec62:	bf00      	nop
 802ec64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ec66:	bc08      	pop	{r3}
 802ec68:	469e      	mov	lr, r3
 802ec6a:	4770      	bx	lr
